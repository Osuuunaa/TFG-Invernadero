
ThingSpeak-SHT85-Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000843c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000540  080085e0  080085e0  000095e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008b20  08008b20  0000a1d8  2**0
                  CONTENTS
  4 .ARM          00000008  08008b20  08008b20  00009b20  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008b28  08008b28  0000a1d8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008b28  08008b28  00009b28  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08008b2c  08008b2c  00009b2c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001d8  20000000  08008b30  0000a000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000344  200001d8  08008d08  0000a1d8  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  2000051c  08008d08  0000a51c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000a1d8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d1b8  00000000  00000000  0000a208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 0000233a  00000000  00000000  000173c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b60  00000000  00000000  00019700  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000008c8  00000000  00000000  0001a260  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000175ac  00000000  00000000  0001ab28  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000fa4f  00000000  00000000  000320d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008a5c4  00000000  00000000  00041b23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cc0e7  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003fd0  00000000  00000000  000cc12c  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000d00fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d8 	.word	0x200001d8
 80001bc:	00000000 	.word	0x00000000
 80001c0:	080085c4 	.word	0x080085c4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001dc 	.word	0x200001dc
 80001dc:	080085c4 	.word	0x080085c4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b96a 	b.w	8000f44 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	460c      	mov	r4, r1
 8000c90:	2b00      	cmp	r3, #0
 8000c92:	d14e      	bne.n	8000d32 <__udivmoddi4+0xaa>
 8000c94:	4694      	mov	ip, r2
 8000c96:	458c      	cmp	ip, r1
 8000c98:	4686      	mov	lr, r0
 8000c9a:	fab2 f282 	clz	r2, r2
 8000c9e:	d962      	bls.n	8000d66 <__udivmoddi4+0xde>
 8000ca0:	b14a      	cbz	r2, 8000cb6 <__udivmoddi4+0x2e>
 8000ca2:	f1c2 0320 	rsb	r3, r2, #32
 8000ca6:	4091      	lsls	r1, r2
 8000ca8:	fa20 f303 	lsr.w	r3, r0, r3
 8000cac:	fa0c fc02 	lsl.w	ip, ip, r2
 8000cb0:	4319      	orrs	r1, r3
 8000cb2:	fa00 fe02 	lsl.w	lr, r0, r2
 8000cb6:	ea4f 471c 	mov.w	r7, ip, lsr #16
 8000cba:	fa1f f68c 	uxth.w	r6, ip
 8000cbe:	fbb1 f4f7 	udiv	r4, r1, r7
 8000cc2:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000cc6:	fb07 1114 	mls	r1, r7, r4, r1
 8000cca:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cce:	fb04 f106 	mul.w	r1, r4, r6
 8000cd2:	4299      	cmp	r1, r3
 8000cd4:	d90a      	bls.n	8000cec <__udivmoddi4+0x64>
 8000cd6:	eb1c 0303 	adds.w	r3, ip, r3
 8000cda:	f104 30ff 	add.w	r0, r4, #4294967295
 8000cde:	f080 8112 	bcs.w	8000f06 <__udivmoddi4+0x27e>
 8000ce2:	4299      	cmp	r1, r3
 8000ce4:	f240 810f 	bls.w	8000f06 <__udivmoddi4+0x27e>
 8000ce8:	3c02      	subs	r4, #2
 8000cea:	4463      	add	r3, ip
 8000cec:	1a59      	subs	r1, r3, r1
 8000cee:	fa1f f38e 	uxth.w	r3, lr
 8000cf2:	fbb1 f0f7 	udiv	r0, r1, r7
 8000cf6:	fb07 1110 	mls	r1, r7, r0, r1
 8000cfa:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000cfe:	fb00 f606 	mul.w	r6, r0, r6
 8000d02:	429e      	cmp	r6, r3
 8000d04:	d90a      	bls.n	8000d1c <__udivmoddi4+0x94>
 8000d06:	eb1c 0303 	adds.w	r3, ip, r3
 8000d0a:	f100 31ff 	add.w	r1, r0, #4294967295
 8000d0e:	f080 80fc 	bcs.w	8000f0a <__udivmoddi4+0x282>
 8000d12:	429e      	cmp	r6, r3
 8000d14:	f240 80f9 	bls.w	8000f0a <__udivmoddi4+0x282>
 8000d18:	4463      	add	r3, ip
 8000d1a:	3802      	subs	r0, #2
 8000d1c:	1b9b      	subs	r3, r3, r6
 8000d1e:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 8000d22:	2100      	movs	r1, #0
 8000d24:	b11d      	cbz	r5, 8000d2e <__udivmoddi4+0xa6>
 8000d26:	40d3      	lsrs	r3, r2
 8000d28:	2200      	movs	r2, #0
 8000d2a:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d32:	428b      	cmp	r3, r1
 8000d34:	d905      	bls.n	8000d42 <__udivmoddi4+0xba>
 8000d36:	b10d      	cbz	r5, 8000d3c <__udivmoddi4+0xb4>
 8000d38:	e9c5 0100 	strd	r0, r1, [r5]
 8000d3c:	2100      	movs	r1, #0
 8000d3e:	4608      	mov	r0, r1
 8000d40:	e7f5      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d42:	fab3 f183 	clz	r1, r3
 8000d46:	2900      	cmp	r1, #0
 8000d48:	d146      	bne.n	8000dd8 <__udivmoddi4+0x150>
 8000d4a:	42a3      	cmp	r3, r4
 8000d4c:	d302      	bcc.n	8000d54 <__udivmoddi4+0xcc>
 8000d4e:	4290      	cmp	r0, r2
 8000d50:	f0c0 80f0 	bcc.w	8000f34 <__udivmoddi4+0x2ac>
 8000d54:	1a86      	subs	r6, r0, r2
 8000d56:	eb64 0303 	sbc.w	r3, r4, r3
 8000d5a:	2001      	movs	r0, #1
 8000d5c:	2d00      	cmp	r5, #0
 8000d5e:	d0e6      	beq.n	8000d2e <__udivmoddi4+0xa6>
 8000d60:	e9c5 6300 	strd	r6, r3, [r5]
 8000d64:	e7e3      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000d66:	2a00      	cmp	r2, #0
 8000d68:	f040 8090 	bne.w	8000e8c <__udivmoddi4+0x204>
 8000d6c:	eba1 040c 	sub.w	r4, r1, ip
 8000d70:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000d74:	fa1f f78c 	uxth.w	r7, ip
 8000d78:	2101      	movs	r1, #1
 8000d7a:	fbb4 f6f8 	udiv	r6, r4, r8
 8000d7e:	ea4f 431e 	mov.w	r3, lr, lsr #16
 8000d82:	fb08 4416 	mls	r4, r8, r6, r4
 8000d86:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000d8a:	fb07 f006 	mul.w	r0, r7, r6
 8000d8e:	4298      	cmp	r0, r3
 8000d90:	d908      	bls.n	8000da4 <__udivmoddi4+0x11c>
 8000d92:	eb1c 0303 	adds.w	r3, ip, r3
 8000d96:	f106 34ff 	add.w	r4, r6, #4294967295
 8000d9a:	d202      	bcs.n	8000da2 <__udivmoddi4+0x11a>
 8000d9c:	4298      	cmp	r0, r3
 8000d9e:	f200 80cd 	bhi.w	8000f3c <__udivmoddi4+0x2b4>
 8000da2:	4626      	mov	r6, r4
 8000da4:	1a1c      	subs	r4, r3, r0
 8000da6:	fa1f f38e 	uxth.w	r3, lr
 8000daa:	fbb4 f0f8 	udiv	r0, r4, r8
 8000dae:	fb08 4410 	mls	r4, r8, r0, r4
 8000db2:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 8000db6:	fb00 f707 	mul.w	r7, r0, r7
 8000dba:	429f      	cmp	r7, r3
 8000dbc:	d908      	bls.n	8000dd0 <__udivmoddi4+0x148>
 8000dbe:	eb1c 0303 	adds.w	r3, ip, r3
 8000dc2:	f100 34ff 	add.w	r4, r0, #4294967295
 8000dc6:	d202      	bcs.n	8000dce <__udivmoddi4+0x146>
 8000dc8:	429f      	cmp	r7, r3
 8000dca:	f200 80b0 	bhi.w	8000f2e <__udivmoddi4+0x2a6>
 8000dce:	4620      	mov	r0, r4
 8000dd0:	1bdb      	subs	r3, r3, r7
 8000dd2:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000dd6:	e7a5      	b.n	8000d24 <__udivmoddi4+0x9c>
 8000dd8:	f1c1 0620 	rsb	r6, r1, #32
 8000ddc:	408b      	lsls	r3, r1
 8000dde:	fa22 f706 	lsr.w	r7, r2, r6
 8000de2:	431f      	orrs	r7, r3
 8000de4:	fa20 fc06 	lsr.w	ip, r0, r6
 8000de8:	fa04 f301 	lsl.w	r3, r4, r1
 8000dec:	ea43 030c 	orr.w	r3, r3, ip
 8000df0:	40f4      	lsrs	r4, r6
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	0c38      	lsrs	r0, r7, #16
 8000df8:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000dfc:	fbb4 fef0 	udiv	lr, r4, r0
 8000e00:	fa1f fc87 	uxth.w	ip, r7
 8000e04:	fb00 441e 	mls	r4, r0, lr, r4
 8000e08:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e0c:	fb0e f90c 	mul.w	r9, lr, ip
 8000e10:	45a1      	cmp	r9, r4
 8000e12:	fa02 f201 	lsl.w	r2, r2, r1
 8000e16:	d90a      	bls.n	8000e2e <__udivmoddi4+0x1a6>
 8000e18:	193c      	adds	r4, r7, r4
 8000e1a:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000e1e:	f080 8084 	bcs.w	8000f2a <__udivmoddi4+0x2a2>
 8000e22:	45a1      	cmp	r9, r4
 8000e24:	f240 8081 	bls.w	8000f2a <__udivmoddi4+0x2a2>
 8000e28:	f1ae 0e02 	sub.w	lr, lr, #2
 8000e2c:	443c      	add	r4, r7
 8000e2e:	eba4 0409 	sub.w	r4, r4, r9
 8000e32:	fa1f f983 	uxth.w	r9, r3
 8000e36:	fbb4 f3f0 	udiv	r3, r4, r0
 8000e3a:	fb00 4413 	mls	r4, r0, r3, r4
 8000e3e:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000e42:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e46:	45a4      	cmp	ip, r4
 8000e48:	d907      	bls.n	8000e5a <__udivmoddi4+0x1d2>
 8000e4a:	193c      	adds	r4, r7, r4
 8000e4c:	f103 30ff 	add.w	r0, r3, #4294967295
 8000e50:	d267      	bcs.n	8000f22 <__udivmoddi4+0x29a>
 8000e52:	45a4      	cmp	ip, r4
 8000e54:	d965      	bls.n	8000f22 <__udivmoddi4+0x29a>
 8000e56:	3b02      	subs	r3, #2
 8000e58:	443c      	add	r4, r7
 8000e5a:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000e5e:	fba0 9302 	umull	r9, r3, r0, r2
 8000e62:	eba4 040c 	sub.w	r4, r4, ip
 8000e66:	429c      	cmp	r4, r3
 8000e68:	46ce      	mov	lr, r9
 8000e6a:	469c      	mov	ip, r3
 8000e6c:	d351      	bcc.n	8000f12 <__udivmoddi4+0x28a>
 8000e6e:	d04e      	beq.n	8000f0e <__udivmoddi4+0x286>
 8000e70:	b155      	cbz	r5, 8000e88 <__udivmoddi4+0x200>
 8000e72:	ebb8 030e 	subs.w	r3, r8, lr
 8000e76:	eb64 040c 	sbc.w	r4, r4, ip
 8000e7a:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7e:	40cb      	lsrs	r3, r1
 8000e80:	431e      	orrs	r6, r3
 8000e82:	40cc      	lsrs	r4, r1
 8000e84:	e9c5 6400 	strd	r6, r4, [r5]
 8000e88:	2100      	movs	r1, #0
 8000e8a:	e750      	b.n	8000d2e <__udivmoddi4+0xa6>
 8000e8c:	f1c2 0320 	rsb	r3, r2, #32
 8000e90:	fa20 f103 	lsr.w	r1, r0, r3
 8000e94:	fa0c fc02 	lsl.w	ip, ip, r2
 8000e98:	fa24 f303 	lsr.w	r3, r4, r3
 8000e9c:	4094      	lsls	r4, r2
 8000e9e:	430c      	orrs	r4, r1
 8000ea0:	ea4f 481c 	mov.w	r8, ip, lsr #16
 8000ea4:	fa00 fe02 	lsl.w	lr, r0, r2
 8000ea8:	fa1f f78c 	uxth.w	r7, ip
 8000eac:	fbb3 f0f8 	udiv	r0, r3, r8
 8000eb0:	fb08 3110 	mls	r1, r8, r0, r3
 8000eb4:	0c23      	lsrs	r3, r4, #16
 8000eb6:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000eba:	fb00 f107 	mul.w	r1, r0, r7
 8000ebe:	4299      	cmp	r1, r3
 8000ec0:	d908      	bls.n	8000ed4 <__udivmoddi4+0x24c>
 8000ec2:	eb1c 0303 	adds.w	r3, ip, r3
 8000ec6:	f100 36ff 	add.w	r6, r0, #4294967295
 8000eca:	d22c      	bcs.n	8000f26 <__udivmoddi4+0x29e>
 8000ecc:	4299      	cmp	r1, r3
 8000ece:	d92a      	bls.n	8000f26 <__udivmoddi4+0x29e>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	4463      	add	r3, ip
 8000ed4:	1a5b      	subs	r3, r3, r1
 8000ed6:	b2a4      	uxth	r4, r4
 8000ed8:	fbb3 f1f8 	udiv	r1, r3, r8
 8000edc:	fb08 3311 	mls	r3, r8, r1, r3
 8000ee0:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000ee4:	fb01 f307 	mul.w	r3, r1, r7
 8000ee8:	42a3      	cmp	r3, r4
 8000eea:	d908      	bls.n	8000efe <__udivmoddi4+0x276>
 8000eec:	eb1c 0404 	adds.w	r4, ip, r4
 8000ef0:	f101 36ff 	add.w	r6, r1, #4294967295
 8000ef4:	d213      	bcs.n	8000f1e <__udivmoddi4+0x296>
 8000ef6:	42a3      	cmp	r3, r4
 8000ef8:	d911      	bls.n	8000f1e <__udivmoddi4+0x296>
 8000efa:	3902      	subs	r1, #2
 8000efc:	4464      	add	r4, ip
 8000efe:	1ae4      	subs	r4, r4, r3
 8000f00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8000f04:	e739      	b.n	8000d7a <__udivmoddi4+0xf2>
 8000f06:	4604      	mov	r4, r0
 8000f08:	e6f0      	b.n	8000cec <__udivmoddi4+0x64>
 8000f0a:	4608      	mov	r0, r1
 8000f0c:	e706      	b.n	8000d1c <__udivmoddi4+0x94>
 8000f0e:	45c8      	cmp	r8, r9
 8000f10:	d2ae      	bcs.n	8000e70 <__udivmoddi4+0x1e8>
 8000f12:	ebb9 0e02 	subs.w	lr, r9, r2
 8000f16:	eb63 0c07 	sbc.w	ip, r3, r7
 8000f1a:	3801      	subs	r0, #1
 8000f1c:	e7a8      	b.n	8000e70 <__udivmoddi4+0x1e8>
 8000f1e:	4631      	mov	r1, r6
 8000f20:	e7ed      	b.n	8000efe <__udivmoddi4+0x276>
 8000f22:	4603      	mov	r3, r0
 8000f24:	e799      	b.n	8000e5a <__udivmoddi4+0x1d2>
 8000f26:	4630      	mov	r0, r6
 8000f28:	e7d4      	b.n	8000ed4 <__udivmoddi4+0x24c>
 8000f2a:	46d6      	mov	lr, sl
 8000f2c:	e77f      	b.n	8000e2e <__udivmoddi4+0x1a6>
 8000f2e:	4463      	add	r3, ip
 8000f30:	3802      	subs	r0, #2
 8000f32:	e74d      	b.n	8000dd0 <__udivmoddi4+0x148>
 8000f34:	4606      	mov	r6, r0
 8000f36:	4623      	mov	r3, r4
 8000f38:	4608      	mov	r0, r1
 8000f3a:	e70f      	b.n	8000d5c <__udivmoddi4+0xd4>
 8000f3c:	3e02      	subs	r6, #2
 8000f3e:	4463      	add	r3, ip
 8000f40:	e730      	b.n	8000da4 <__udivmoddi4+0x11c>
 8000f42:	bf00      	nop

08000f44 <__aeabi_idiv0>:
 8000f44:	4770      	bx	lr
 8000f46:	bf00      	nop

08000f48 <LCD_Init>:
#include <string.h>

static void LCD_EnablePulse(void);
static void LCD_Send(uint8_t value, uint8_t mode);

void LCD_Init(void) {
 8000f48:	b580      	push	{r7, lr}
 8000f4a:	af00      	add	r7, sp, #0
    HAL_Delay(20); // Wait for LCD to power up
 8000f4c:	2014      	movs	r0, #20
 8000f4e:	f000 ffe7 	bl	8001f20 <HAL_Delay>
    LCD_SendCommand(0x02); // Initialize in 4-bit mode
 8000f52:	2002      	movs	r0, #2
 8000f54:	f000 f811 	bl	8000f7a <LCD_SendCommand>
    LCD_SendCommand(0x28); // 2 lines, 5x7 matrix
 8000f58:	2028      	movs	r0, #40	@ 0x28
 8000f5a:	f000 f80e 	bl	8000f7a <LCD_SendCommand>
    LCD_SendCommand(0x0C); // Display on, cursor off
 8000f5e:	200c      	movs	r0, #12
 8000f60:	f000 f80b 	bl	8000f7a <LCD_SendCommand>
    LCD_SendCommand(0x06); // Increment cursor
 8000f64:	2006      	movs	r0, #6
 8000f66:	f000 f808 	bl	8000f7a <LCD_SendCommand>
    LCD_SendCommand(0x01); // Clear display
 8000f6a:	2001      	movs	r0, #1
 8000f6c:	f000 f805 	bl	8000f7a <LCD_SendCommand>
    HAL_Delay(2);
 8000f70:	2002      	movs	r0, #2
 8000f72:	f000 ffd5 	bl	8001f20 <HAL_Delay>
}
 8000f76:	bf00      	nop
 8000f78:	bd80      	pop	{r7, pc}

08000f7a <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 8000f7a:	b580      	push	{r7, lr}
 8000f7c:	b082      	sub	sp, #8
 8000f7e:	af00      	add	r7, sp, #0
 8000f80:	4603      	mov	r3, r0
 8000f82:	71fb      	strb	r3, [r7, #7]
    LCD_Send(cmd, 0);
 8000f84:	79fb      	ldrb	r3, [r7, #7]
 8000f86:	2100      	movs	r1, #0
 8000f88:	4618      	mov	r0, r3
 8000f8a:	f000 f865 	bl	8001058 <LCD_Send>
}
 8000f8e:	bf00      	nop
 8000f90:	3708      	adds	r7, #8
 8000f92:	46bd      	mov	sp, r7
 8000f94:	bd80      	pop	{r7, pc}

08000f96 <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 8000f96:	b580      	push	{r7, lr}
 8000f98:	b082      	sub	sp, #8
 8000f9a:	af00      	add	r7, sp, #0
 8000f9c:	4603      	mov	r3, r0
 8000f9e:	71fb      	strb	r3, [r7, #7]
    LCD_Send(data, 1);
 8000fa0:	79fb      	ldrb	r3, [r7, #7]
 8000fa2:	2101      	movs	r1, #1
 8000fa4:	4618      	mov	r0, r3
 8000fa6:	f000 f857 	bl	8001058 <LCD_Send>
}
 8000faa:	bf00      	nop
 8000fac:	3708      	adds	r7, #8
 8000fae:	46bd      	mov	sp, r7
 8000fb0:	bd80      	pop	{r7, pc}

08000fb2 <LCD_Print>:

void LCD_Print(const char* str) {
 8000fb2:	b580      	push	{r7, lr}
 8000fb4:	b082      	sub	sp, #8
 8000fb6:	af00      	add	r7, sp, #0
 8000fb8:	6078      	str	r0, [r7, #4]
    while (*str) {
 8000fba:	e007      	b.n	8000fcc <LCD_Print+0x1a>
        LCD_SendData((uint8_t)(*str));
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	781b      	ldrb	r3, [r3, #0]
 8000fc0:	4618      	mov	r0, r3
 8000fc2:	f7ff ffe8 	bl	8000f96 <LCD_SendData>
        str++;
 8000fc6:	687b      	ldr	r3, [r7, #4]
 8000fc8:	3301      	adds	r3, #1
 8000fca:	607b      	str	r3, [r7, #4]
    while (*str) {
 8000fcc:	687b      	ldr	r3, [r7, #4]
 8000fce:	781b      	ldrb	r3, [r3, #0]
 8000fd0:	2b00      	cmp	r3, #0
 8000fd2:	d1f3      	bne.n	8000fbc <LCD_Print+0xa>
    }
}
 8000fd4:	bf00      	nop
 8000fd6:	bf00      	nop
 8000fd8:	3708      	adds	r7, #8
 8000fda:	46bd      	mov	sp, r7
 8000fdc:	bd80      	pop	{r7, pc}

08000fde <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 8000fde:	b580      	push	{r7, lr}
 8000fe0:	b084      	sub	sp, #16
 8000fe2:	af00      	add	r7, sp, #0
 8000fe4:	4603      	mov	r3, r0
 8000fe6:	460a      	mov	r2, r1
 8000fe8:	71fb      	strb	r3, [r7, #7]
 8000fea:	4613      	mov	r3, r2
 8000fec:	71bb      	strb	r3, [r7, #6]
    uint8_t address = (row == 0) ? col : (col + 0x40);
 8000fee:	79fb      	ldrb	r3, [r7, #7]
 8000ff0:	2b00      	cmp	r3, #0
 8000ff2:	d003      	beq.n	8000ffc <LCD_SetCursor+0x1e>
 8000ff4:	79bb      	ldrb	r3, [r7, #6]
 8000ff6:	3340      	adds	r3, #64	@ 0x40
 8000ff8:	b2db      	uxtb	r3, r3
 8000ffa:	e000      	b.n	8000ffe <LCD_SetCursor+0x20>
 8000ffc:	79bb      	ldrb	r3, [r7, #6]
 8000ffe:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(0x80 | address);
 8001000:	7bfb      	ldrb	r3, [r7, #15]
 8001002:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001006:	b2db      	uxtb	r3, r3
 8001008:	4618      	mov	r0, r3
 800100a:	f7ff ffb6 	bl	8000f7a <LCD_SendCommand>
}
 800100e:	bf00      	nop
 8001010:	3710      	adds	r7, #16
 8001012:	46bd      	mov	sp, r7
 8001014:	bd80      	pop	{r7, pc}

08001016 <LCD_Clear>:

void LCD_Clear(void) {
 8001016:	b580      	push	{r7, lr}
 8001018:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01); // Clear display command
 800101a:	2001      	movs	r0, #1
 800101c:	f7ff ffad 	bl	8000f7a <LCD_SendCommand>
    HAL_Delay(2);          // Delay to allow the command to process
 8001020:	2002      	movs	r0, #2
 8001022:	f000 ff7d 	bl	8001f20 <HAL_Delay>
}
 8001026:	bf00      	nop
 8001028:	bd80      	pop	{r7, pc}
	...

0800102c <LCD_EnablePulse>:

static void LCD_EnablePulse(void) {
 800102c:	b580      	push	{r7, lr}
 800102e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_SET);
 8001030:	2201      	movs	r2, #1
 8001032:	2102      	movs	r1, #2
 8001034:	4807      	ldr	r0, [pc, #28]	@ (8001054 <LCD_EnablePulse+0x28>)
 8001036:	f001 fabf 	bl	80025b8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800103a:	2001      	movs	r0, #1
 800103c:	f000 ff70 	bl	8001f20 <HAL_Delay>
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 8001040:	2200      	movs	r2, #0
 8001042:	2102      	movs	r1, #2
 8001044:	4803      	ldr	r0, [pc, #12]	@ (8001054 <LCD_EnablePulse+0x28>)
 8001046:	f001 fab7 	bl	80025b8 <HAL_GPIO_WritePin>
    HAL_Delay(1);
 800104a:	2001      	movs	r0, #1
 800104c:	f000 ff68 	bl	8001f20 <HAL_Delay>
}
 8001050:	bf00      	nop
 8001052:	bd80      	pop	{r7, pc}
 8001054:	40020800 	.word	0x40020800

08001058 <LCD_Send>:

static void LCD_Send(uint8_t value, uint8_t mode) {
 8001058:	b580      	push	{r7, lr}
 800105a:	b082      	sub	sp, #8
 800105c:	af00      	add	r7, sp, #0
 800105e:	4603      	mov	r3, r0
 8001060:	460a      	mov	r2, r1
 8001062:	71fb      	strb	r3, [r7, #7]
 8001064:	4613      	mov	r3, r2
 8001066:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, (mode ? GPIO_PIN_SET : GPIO_PIN_RESET));
 8001068:	79bb      	ldrb	r3, [r7, #6]
 800106a:	2b00      	cmp	r3, #0
 800106c:	bf14      	ite	ne
 800106e:	2301      	movne	r3, #1
 8001070:	2300      	moveq	r3, #0
 8001072:	b2db      	uxtb	r3, r3
 8001074:	461a      	mov	r2, r3
 8001076:	2101      	movs	r1, #1
 8001078:	482e      	ldr	r0, [pc, #184]	@ (8001134 <LCD_Send+0xdc>)
 800107a:	f001 fa9d 	bl	80025b8 <HAL_GPIO_WritePin>

    // Send high nibble
    HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN, (value & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800107e:	79fb      	ldrb	r3, [r7, #7]
 8001080:	111b      	asrs	r3, r3, #4
 8001082:	b2db      	uxtb	r3, r3
 8001084:	f003 0301 	and.w	r3, r3, #1
 8001088:	b2db      	uxtb	r3, r3
 800108a:	461a      	mov	r2, r3
 800108c:	2104      	movs	r1, #4
 800108e:	4829      	ldr	r0, [pc, #164]	@ (8001134 <LCD_Send+0xdc>)
 8001090:	f001 fa92 	bl	80025b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_PORT, LCD_D5_PIN, (value & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001094:	79fb      	ldrb	r3, [r7, #7]
 8001096:	115b      	asrs	r3, r3, #5
 8001098:	b2db      	uxtb	r3, r3
 800109a:	f003 0301 	and.w	r3, r3, #1
 800109e:	b2db      	uxtb	r3, r3
 80010a0:	461a      	mov	r2, r3
 80010a2:	2108      	movs	r1, #8
 80010a4:	4823      	ldr	r0, [pc, #140]	@ (8001134 <LCD_Send+0xdc>)
 80010a6:	f001 fa87 	bl	80025b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_PORT, LCD_D6_PIN, (value & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80010aa:	79fb      	ldrb	r3, [r7, #7]
 80010ac:	119b      	asrs	r3, r3, #6
 80010ae:	b2db      	uxtb	r3, r3
 80010b0:	f003 0301 	and.w	r3, r3, #1
 80010b4:	b2db      	uxtb	r3, r3
 80010b6:	461a      	mov	r2, r3
 80010b8:	2110      	movs	r1, #16
 80010ba:	481e      	ldr	r0, [pc, #120]	@ (8001134 <LCD_Send+0xdc>)
 80010bc:	f001 fa7c 	bl	80025b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_PORT, LCD_D7_PIN, (value & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80010c0:	79fb      	ldrb	r3, [r7, #7]
 80010c2:	09db      	lsrs	r3, r3, #7
 80010c4:	b2db      	uxtb	r3, r3
 80010c6:	461a      	mov	r2, r3
 80010c8:	2120      	movs	r1, #32
 80010ca:	481a      	ldr	r0, [pc, #104]	@ (8001134 <LCD_Send+0xdc>)
 80010cc:	f001 fa74 	bl	80025b8 <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 80010d0:	f7ff ffac 	bl	800102c <LCD_EnablePulse>

    // Send low nibble
    HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN, (value & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80010d4:	79fb      	ldrb	r3, [r7, #7]
 80010d6:	f003 0301 	and.w	r3, r3, #1
 80010da:	b2db      	uxtb	r3, r3
 80010dc:	461a      	mov	r2, r3
 80010de:	2104      	movs	r1, #4
 80010e0:	4814      	ldr	r0, [pc, #80]	@ (8001134 <LCD_Send+0xdc>)
 80010e2:	f001 fa69 	bl	80025b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_PORT, LCD_D5_PIN, (value & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80010e6:	79fb      	ldrb	r3, [r7, #7]
 80010e8:	105b      	asrs	r3, r3, #1
 80010ea:	b2db      	uxtb	r3, r3
 80010ec:	f003 0301 	and.w	r3, r3, #1
 80010f0:	b2db      	uxtb	r3, r3
 80010f2:	461a      	mov	r2, r3
 80010f4:	2108      	movs	r1, #8
 80010f6:	480f      	ldr	r0, [pc, #60]	@ (8001134 <LCD_Send+0xdc>)
 80010f8:	f001 fa5e 	bl	80025b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_PORT, LCD_D6_PIN, (value & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80010fc:	79fb      	ldrb	r3, [r7, #7]
 80010fe:	109b      	asrs	r3, r3, #2
 8001100:	b2db      	uxtb	r3, r3
 8001102:	f003 0301 	and.w	r3, r3, #1
 8001106:	b2db      	uxtb	r3, r3
 8001108:	461a      	mov	r2, r3
 800110a:	2110      	movs	r1, #16
 800110c:	4809      	ldr	r0, [pc, #36]	@ (8001134 <LCD_Send+0xdc>)
 800110e:	f001 fa53 	bl	80025b8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_PORT, LCD_D7_PIN, (value & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001112:	79fb      	ldrb	r3, [r7, #7]
 8001114:	10db      	asrs	r3, r3, #3
 8001116:	b2db      	uxtb	r3, r3
 8001118:	f003 0301 	and.w	r3, r3, #1
 800111c:	b2db      	uxtb	r3, r3
 800111e:	461a      	mov	r2, r3
 8001120:	2120      	movs	r1, #32
 8001122:	4804      	ldr	r0, [pc, #16]	@ (8001134 <LCD_Send+0xdc>)
 8001124:	f001 fa48 	bl	80025b8 <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 8001128:	f7ff ff80 	bl	800102c <LCD_EnablePulse>
}
 800112c:	bf00      	nop
 800112e:	3708      	adds	r7, #8
 8001130:	46bd      	mov	sp, r7
 8001132:	bd80      	pop	{r7, pc}
 8001134:	40020800 	.word	0x40020800

08001138 <floatToStr>:
void LCD_UpdateLuminosity(float luminosity);
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */
const char* floatToStr(float num, int precision) {
 8001138:	b580      	push	{r7, lr}
 800113a:	b084      	sub	sp, #16
 800113c:	af02      	add	r7, sp, #8
 800113e:	ed87 0a01 	vstr	s0, [r7, #4]
 8001142:	6038      	str	r0, [r7, #0]
    static char str[20]; // Buffer estático para almacenar la cadena resultante
    sprintf(str, "%.*f", precision, num);
 8001144:	6878      	ldr	r0, [r7, #4]
 8001146:	f7ff fa07 	bl	8000558 <__aeabi_f2d>
 800114a:	4602      	mov	r2, r0
 800114c:	460b      	mov	r3, r1
 800114e:	e9cd 2300 	strd	r2, r3, [sp]
 8001152:	683a      	ldr	r2, [r7, #0]
 8001154:	4904      	ldr	r1, [pc, #16]	@ (8001168 <floatToStr+0x30>)
 8001156:	4805      	ldr	r0, [pc, #20]	@ (800116c <floatToStr+0x34>)
 8001158:	f005 f906 	bl	8006368 <siprintf>
    return str;
 800115c:	4b03      	ldr	r3, [pc, #12]	@ (800116c <floatToStr+0x34>)
}
 800115e:	4618      	mov	r0, r3
 8001160:	3708      	adds	r7, #8
 8001162:	46bd      	mov	sp, r7
 8001164:	bd80      	pop	{r7, pc}
 8001166:	bf00      	nop
 8001168:	080085e0 	.word	0x080085e0
 800116c:	200002ac 	.word	0x200002ac

08001170 <LCD_UpdateTemperature>:

void LCD_UpdateTemperature(float temperature) {
 8001170:	b580      	push	{r7, lr}
 8001172:	b084      	sub	sp, #16
 8001174:	af00      	add	r7, sp, #0
 8001176:	ed87 0a01 	vstr	s0, [r7, #4]
    const char* strTemp = floatToStr(temperature, 2);
 800117a:	2002      	movs	r0, #2
 800117c:	ed97 0a01 	vldr	s0, [r7, #4]
 8001180:	f7ff ffda 	bl	8001138 <floatToStr>
 8001184:	60f8      	str	r0, [r7, #12]
    LCD_Clear();
 8001186:	f7ff ff46 	bl	8001016 <LCD_Clear>
    LCD_SetCursor(0, 0);
 800118a:	2100      	movs	r1, #0
 800118c:	2000      	movs	r0, #0
 800118e:	f7ff ff26 	bl	8000fde <LCD_SetCursor>
    LCD_Print("Temperatura: ");
 8001192:	4807      	ldr	r0, [pc, #28]	@ (80011b0 <LCD_UpdateTemperature+0x40>)
 8001194:	f7ff ff0d 	bl	8000fb2 <LCD_Print>
    LCD_SetCursor(1, 0);
 8001198:	2100      	movs	r1, #0
 800119a:	2001      	movs	r0, #1
 800119c:	f7ff ff1f 	bl	8000fde <LCD_SetCursor>
    LCD_Print(strTemp);
 80011a0:	68f8      	ldr	r0, [r7, #12]
 80011a2:	f7ff ff06 	bl	8000fb2 <LCD_Print>
}
 80011a6:	bf00      	nop
 80011a8:	3710      	adds	r7, #16
 80011aa:	46bd      	mov	sp, r7
 80011ac:	bd80      	pop	{r7, pc}
 80011ae:	bf00      	nop
 80011b0:	080085e8 	.word	0x080085e8

080011b4 <LCD_UpdateHumidity>:

void LCD_UpdateHumidity(float humidity) {
 80011b4:	b580      	push	{r7, lr}
 80011b6:	b084      	sub	sp, #16
 80011b8:	af00      	add	r7, sp, #0
 80011ba:	ed87 0a01 	vstr	s0, [r7, #4]
    const char* strHum = floatToStr(humidity, 2);
 80011be:	2002      	movs	r0, #2
 80011c0:	ed97 0a01 	vldr	s0, [r7, #4]
 80011c4:	f7ff ffb8 	bl	8001138 <floatToStr>
 80011c8:	60f8      	str	r0, [r7, #12]
    LCD_Clear();
 80011ca:	f7ff ff24 	bl	8001016 <LCD_Clear>
    LCD_SetCursor(0, 0);
 80011ce:	2100      	movs	r1, #0
 80011d0:	2000      	movs	r0, #0
 80011d2:	f7ff ff04 	bl	8000fde <LCD_SetCursor>
    LCD_Print("Humedad: ");
 80011d6:	4807      	ldr	r0, [pc, #28]	@ (80011f4 <LCD_UpdateHumidity+0x40>)
 80011d8:	f7ff feeb 	bl	8000fb2 <LCD_Print>
    LCD_SetCursor(1, 0);
 80011dc:	2100      	movs	r1, #0
 80011de:	2001      	movs	r0, #1
 80011e0:	f7ff fefd 	bl	8000fde <LCD_SetCursor>
    LCD_Print(strHum);
 80011e4:	68f8      	ldr	r0, [r7, #12]
 80011e6:	f7ff fee4 	bl	8000fb2 <LCD_Print>
}
 80011ea:	bf00      	nop
 80011ec:	3710      	adds	r7, #16
 80011ee:	46bd      	mov	sp, r7
 80011f0:	bd80      	pop	{r7, pc}
 80011f2:	bf00      	nop
 80011f4:	080085f8 	.word	0x080085f8

080011f8 <LCD_UpdateLuminosity>:

void LCD_UpdateLuminosity(float luminosity) {
 80011f8:	b580      	push	{r7, lr}
 80011fa:	b084      	sub	sp, #16
 80011fc:	af00      	add	r7, sp, #0
 80011fe:	ed87 0a01 	vstr	s0, [r7, #4]
    const char* strLux = floatToStr(luminosity, 2);
 8001202:	2002      	movs	r0, #2
 8001204:	ed97 0a01 	vldr	s0, [r7, #4]
 8001208:	f7ff ff96 	bl	8001138 <floatToStr>
 800120c:	60f8      	str	r0, [r7, #12]
    LCD_Clear();
 800120e:	f7ff ff02 	bl	8001016 <LCD_Clear>
    LCD_SetCursor(0, 0);
 8001212:	2100      	movs	r1, #0
 8001214:	2000      	movs	r0, #0
 8001216:	f7ff fee2 	bl	8000fde <LCD_SetCursor>
    LCD_Print("Luminosidad: ");
 800121a:	4807      	ldr	r0, [pc, #28]	@ (8001238 <LCD_UpdateLuminosity+0x40>)
 800121c:	f7ff fec9 	bl	8000fb2 <LCD_Print>
    LCD_SetCursor(1, 0);
 8001220:	2100      	movs	r1, #0
 8001222:	2001      	movs	r0, #1
 8001224:	f7ff fedb 	bl	8000fde <LCD_SetCursor>
    LCD_Print(strLux);
 8001228:	68f8      	ldr	r0, [r7, #12]
 800122a:	f7ff fec2 	bl	8000fb2 <LCD_Print>
}
 800122e:	bf00      	nop
 8001230:	3710      	adds	r7, #16
 8001232:	46bd      	mov	sp, r7
 8001234:	bd80      	pop	{r7, pc}
 8001236:	bf00      	nop
 8001238:	08008604 	.word	0x08008604

0800123c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	b082      	sub	sp, #8
 8001240:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 1 */
  lastTimeMeasurement = HAL_GetTick();
 8001242:	f000 fe61 	bl	8001f08 <HAL_GetTick>
 8001246:	4603      	mov	r3, r0
 8001248:	4a48      	ldr	r2, [pc, #288]	@ (800136c <main+0x130>)
 800124a:	6013      	str	r3, [r2, #0]
  lastTimeDisplay = HAL_GetTick();
 800124c:	f000 fe5c 	bl	8001f08 <HAL_GetTick>
 8001250:	4603      	mov	r3, r0
 8001252:	4a47      	ldr	r2, [pc, #284]	@ (8001370 <main+0x134>)
 8001254:	6013      	str	r3, [r2, #0]
  lastTimeSend = HAL_GetTick();
 8001256:	f000 fe57 	bl	8001f08 <HAL_GetTick>
 800125a:	4603      	mov	r3, r0
 800125c:	4a45      	ldr	r2, [pc, #276]	@ (8001374 <main+0x138>)
 800125e:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001260:	f000 fdec 	bl	8001e3c <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001264:	f000 f89a 	bl	800139c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001268:	f000 f958 	bl	800151c <MX_GPIO_Init>
  MX_I2C1_Init();
 800126c:	f000 f8fe 	bl	800146c <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001270:	f000 f92a 	bl	80014c8 <MX_USART2_UART_Init>
  MX_NVIC_Init();
 8001274:	f000 f9a2 	bl	80015bc <MX_NVIC_Init>

  /* USER CODE BEGIN 2 */
  LCD_Init();
 8001278:	f7ff fe66 	bl	8000f48 <LCD_Init>
  VEML7700_Init();
 800127c:	f000 fbec 	bl	8001a58 <VEML7700_Init>
  connectToWiFi(WIFI_SSID, WIFI_PASS);
 8001280:	493d      	ldr	r1, [pc, #244]	@ (8001378 <main+0x13c>)
 8001282:	483e      	ldr	r0, [pc, #248]	@ (800137c <main+0x140>)
 8001284:	f000 fcb2 	bl	8001bec <connectToWiFi>

    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uint32_t currentTick = HAL_GetTick();
 8001288:	f000 fe3e 	bl	8001f08 <HAL_GetTick>
 800128c:	6078      	str	r0, [r7, #4]

	  if (currentTick - lastTimeMeasurement >= measurementInterval) {
 800128e:	4b37      	ldr	r3, [pc, #220]	@ (800136c <main+0x130>)
 8001290:	681b      	ldr	r3, [r3, #0]
 8001292:	687a      	ldr	r2, [r7, #4]
 8001294:	1ad3      	subs	r3, r2, r3
 8001296:	4a3a      	ldr	r2, [pc, #232]	@ (8001380 <main+0x144>)
 8001298:	8812      	ldrh	r2, [r2, #0]
 800129a:	4293      	cmp	r3, r2
 800129c:	d30d      	bcc.n	80012ba <main+0x7e>
		lastTimeMeasurement = currentTick;
 800129e:	4a33      	ldr	r2, [pc, #204]	@ (800136c <main+0x130>)
 80012a0:	687b      	ldr	r3, [r7, #4]
 80012a2:	6013      	str	r3, [r2, #0]
		ReadSHT85(&temperature, &humidity);
 80012a4:	4937      	ldr	r1, [pc, #220]	@ (8001384 <main+0x148>)
 80012a6:	4838      	ldr	r0, [pc, #224]	@ (8001388 <main+0x14c>)
 80012a8:	f000 f99a 	bl	80015e0 <ReadSHT85>
		luminosity = VEML7700_ReadLuminosity();
 80012ac:	f000 fbec 	bl	8001a88 <VEML7700_ReadLuminosity>
 80012b0:	eef0 7a40 	vmov.f32	s15, s0
 80012b4:	4b35      	ldr	r3, [pc, #212]	@ (800138c <main+0x150>)
 80012b6:	edc3 7a00 	vstr	s15, [r3]
	  }

	  if (currentTick - lastTimeDisplay >= displayInterval) {
 80012ba:	4b2d      	ldr	r3, [pc, #180]	@ (8001370 <main+0x134>)
 80012bc:	681b      	ldr	r3, [r3, #0]
 80012be:	687a      	ldr	r2, [r7, #4]
 80012c0:	1ad3      	subs	r3, r2, r3
 80012c2:	4a33      	ldr	r2, [pc, #204]	@ (8001390 <main+0x154>)
 80012c4:	8812      	ldrh	r2, [r2, #0]
 80012c6:	4293      	cmp	r3, r2
 80012c8:	d32e      	bcc.n	8001328 <main+0xec>
		lastTimeDisplay = currentTick;
 80012ca:	4a29      	ldr	r2, [pc, #164]	@ (8001370 <main+0x134>)
 80012cc:	687b      	ldr	r3, [r7, #4]
 80012ce:	6013      	str	r3, [r2, #0]
		switch (displayState) {
 80012d0:	4b30      	ldr	r3, [pc, #192]	@ (8001394 <main+0x158>)
 80012d2:	781b      	ldrb	r3, [r3, #0]
 80012d4:	2b02      	cmp	r3, #2
 80012d6:	d01c      	beq.n	8001312 <main+0xd6>
 80012d8:	2b02      	cmp	r3, #2
 80012da:	dc25      	bgt.n	8001328 <main+0xec>
 80012dc:	2b00      	cmp	r3, #0
 80012de:	d002      	beq.n	80012e6 <main+0xaa>
 80012e0:	2b01      	cmp	r3, #1
 80012e2:	d00b      	beq.n	80012fc <main+0xc0>
 80012e4:	e020      	b.n	8001328 <main+0xec>
		  case 0:
			LCD_UpdateTemperature(temperature);
 80012e6:	4b28      	ldr	r3, [pc, #160]	@ (8001388 <main+0x14c>)
 80012e8:	edd3 7a00 	vldr	s15, [r3]
 80012ec:	eeb0 0a67 	vmov.f32	s0, s15
 80012f0:	f7ff ff3e 	bl	8001170 <LCD_UpdateTemperature>
			displayState = 1;
 80012f4:	4b27      	ldr	r3, [pc, #156]	@ (8001394 <main+0x158>)
 80012f6:	2201      	movs	r2, #1
 80012f8:	701a      	strb	r2, [r3, #0]
			break;
 80012fa:	e015      	b.n	8001328 <main+0xec>
		  case 1:
			LCD_UpdateHumidity(humidity);
 80012fc:	4b21      	ldr	r3, [pc, #132]	@ (8001384 <main+0x148>)
 80012fe:	edd3 7a00 	vldr	s15, [r3]
 8001302:	eeb0 0a67 	vmov.f32	s0, s15
 8001306:	f7ff ff55 	bl	80011b4 <LCD_UpdateHumidity>
			displayState = 2;
 800130a:	4b22      	ldr	r3, [pc, #136]	@ (8001394 <main+0x158>)
 800130c:	2202      	movs	r2, #2
 800130e:	701a      	strb	r2, [r3, #0]
			break;
 8001310:	e00a      	b.n	8001328 <main+0xec>
		  case 2:
			LCD_UpdateLuminosity(luminosity);
 8001312:	4b1e      	ldr	r3, [pc, #120]	@ (800138c <main+0x150>)
 8001314:	edd3 7a00 	vldr	s15, [r3]
 8001318:	eeb0 0a67 	vmov.f32	s0, s15
 800131c:	f7ff ff6c 	bl	80011f8 <LCD_UpdateLuminosity>
			displayState = 0;
 8001320:	4b1c      	ldr	r3, [pc, #112]	@ (8001394 <main+0x158>)
 8001322:	2200      	movs	r2, #0
 8001324:	701a      	strb	r2, [r3, #0]
			break;
 8001326:	bf00      	nop
		}
	  }

	  if (currentTick - lastTimeSend >= measurementInterval) {
 8001328:	4b12      	ldr	r3, [pc, #72]	@ (8001374 <main+0x138>)
 800132a:	681b      	ldr	r3, [r3, #0]
 800132c:	687a      	ldr	r2, [r7, #4]
 800132e:	1ad3      	subs	r3, r2, r3
 8001330:	4a13      	ldr	r2, [pc, #76]	@ (8001380 <main+0x144>)
 8001332:	8812      	ldrh	r2, [r2, #0]
 8001334:	4293      	cmp	r3, r2
 8001336:	d314      	bcc.n	8001362 <main+0x126>
		lastTimeSend = currentTick;
 8001338:	4a0e      	ldr	r2, [pc, #56]	@ (8001374 <main+0x138>)
 800133a:	687b      	ldr	r3, [r7, #4]
 800133c:	6013      	str	r3, [r2, #0]
		sendDataToThingSpeak(THINGSPEAK_API_KEY, temperature, humidity, luminosity);
 800133e:	4b12      	ldr	r3, [pc, #72]	@ (8001388 <main+0x14c>)
 8001340:	edd3 7a00 	vldr	s15, [r3]
 8001344:	4b0f      	ldr	r3, [pc, #60]	@ (8001384 <main+0x148>)
 8001346:	ed93 7a00 	vldr	s14, [r3]
 800134a:	4b10      	ldr	r3, [pc, #64]	@ (800138c <main+0x150>)
 800134c:	edd3 6a00 	vldr	s13, [r3]
 8001350:	eeb0 1a66 	vmov.f32	s2, s13
 8001354:	eef0 0a47 	vmov.f32	s1, s14
 8001358:	eeb0 0a67 	vmov.f32	s0, s15
 800135c:	480e      	ldr	r0, [pc, #56]	@ (8001398 <main+0x15c>)
 800135e:	f000 fcc3 	bl	8001ce8 <sendDataToThingSpeak>
	  }

	  HAL_Delay(500);
 8001362:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001366:	f000 fddb 	bl	8001f20 <HAL_Delay>
  {
 800136a:	e78d      	b.n	8001288 <main+0x4c>
 800136c:	2000029c 	.word	0x2000029c
 8001370:	200002a0 	.word	0x200002a0
 8001374:	200002a4 	.word	0x200002a4
 8001378:	08008614 	.word	0x08008614
 800137c:	0800862c 	.word	0x0800862c
 8001380:	20000000 	.word	0x20000000
 8001384:	20000294 	.word	0x20000294
 8001388:	20000290 	.word	0x20000290
 800138c:	20000298 	.word	0x20000298
 8001390:	20000002 	.word	0x20000002
 8001394:	200002a8 	.word	0x200002a8
 8001398:	0800863c 	.word	0x0800863c

0800139c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800139c:	b580      	push	{r7, lr}
 800139e:	b094      	sub	sp, #80	@ 0x50
 80013a0:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80013a2:	f107 0320 	add.w	r3, r7, #32
 80013a6:	2230      	movs	r2, #48	@ 0x30
 80013a8:	2100      	movs	r1, #0
 80013aa:	4618      	mov	r0, r3
 80013ac:	f005 f83f 	bl	800642e <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80013b0:	f107 030c 	add.w	r3, r7, #12
 80013b4:	2200      	movs	r2, #0
 80013b6:	601a      	str	r2, [r3, #0]
 80013b8:	605a      	str	r2, [r3, #4]
 80013ba:	609a      	str	r2, [r3, #8]
 80013bc:	60da      	str	r2, [r3, #12]
 80013be:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80013c0:	2300      	movs	r3, #0
 80013c2:	60bb      	str	r3, [r7, #8]
 80013c4:	4b27      	ldr	r3, [pc, #156]	@ (8001464 <SystemClock_Config+0xc8>)
 80013c6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013c8:	4a26      	ldr	r2, [pc, #152]	@ (8001464 <SystemClock_Config+0xc8>)
 80013ca:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80013ce:	6413      	str	r3, [r2, #64]	@ 0x40
 80013d0:	4b24      	ldr	r3, [pc, #144]	@ (8001464 <SystemClock_Config+0xc8>)
 80013d2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80013d4:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80013d8:	60bb      	str	r3, [r7, #8]
 80013da:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80013dc:	2300      	movs	r3, #0
 80013de:	607b      	str	r3, [r7, #4]
 80013e0:	4b21      	ldr	r3, [pc, #132]	@ (8001468 <SystemClock_Config+0xcc>)
 80013e2:	681b      	ldr	r3, [r3, #0]
 80013e4:	4a20      	ldr	r2, [pc, #128]	@ (8001468 <SystemClock_Config+0xcc>)
 80013e6:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80013ea:	6013      	str	r3, [r2, #0]
 80013ec:	4b1e      	ldr	r3, [pc, #120]	@ (8001468 <SystemClock_Config+0xcc>)
 80013ee:	681b      	ldr	r3, [r3, #0]
 80013f0:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80013f4:	607b      	str	r3, [r7, #4]
 80013f6:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80013f8:	2302      	movs	r3, #2
 80013fa:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80013fc:	2301      	movs	r3, #1
 80013fe:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001400:	2310      	movs	r3, #16
 8001402:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001404:	2302      	movs	r3, #2
 8001406:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001408:	2300      	movs	r3, #0
 800140a:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 800140c:	2308      	movs	r3, #8
 800140e:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 50;
 8001410:	2332      	movs	r3, #50	@ 0x32
 8001412:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001414:	2302      	movs	r3, #2
 8001416:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001418:	2308      	movs	r3, #8
 800141a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 800141c:	f107 0320 	add.w	r3, r7, #32
 8001420:	4618      	mov	r0, r3
 8001422:	f002 fd87 	bl	8003f34 <HAL_RCC_OscConfig>
 8001426:	4603      	mov	r3, r0
 8001428:	2b00      	cmp	r3, #0
 800142a:	d001      	beq.n	8001430 <SystemClock_Config+0x94>
  {
    Error_Handler();
 800142c:	f000 f8d2 	bl	80015d4 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001430:	230f      	movs	r3, #15
 8001432:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001434:	2302      	movs	r3, #2
 8001436:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001438:	2300      	movs	r3, #0
 800143a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 800143c:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8001440:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001442:	2300      	movs	r3, #0
 8001444:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 8001446:	f107 030c 	add.w	r3, r7, #12
 800144a:	2101      	movs	r1, #1
 800144c:	4618      	mov	r0, r3
 800144e:	f002 ffe9 	bl	8004424 <HAL_RCC_ClockConfig>
 8001452:	4603      	mov	r3, r0
 8001454:	2b00      	cmp	r3, #0
 8001456:	d001      	beq.n	800145c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001458:	f000 f8bc 	bl	80015d4 <Error_Handler>
  }
}
 800145c:	bf00      	nop
 800145e:	3750      	adds	r7, #80	@ 0x50
 8001460:	46bd      	mov	sp, r7
 8001462:	bd80      	pop	{r7, pc}
 8001464:	40023800 	.word	0x40023800
 8001468:	40007000 	.word	0x40007000

0800146c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800146c:	b580      	push	{r7, lr}
 800146e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001470:	4b12      	ldr	r3, [pc, #72]	@ (80014bc <MX_I2C1_Init+0x50>)
 8001472:	4a13      	ldr	r2, [pc, #76]	@ (80014c0 <MX_I2C1_Init+0x54>)
 8001474:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001476:	4b11      	ldr	r3, [pc, #68]	@ (80014bc <MX_I2C1_Init+0x50>)
 8001478:	4a12      	ldr	r2, [pc, #72]	@ (80014c4 <MX_I2C1_Init+0x58>)
 800147a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800147c:	4b0f      	ldr	r3, [pc, #60]	@ (80014bc <MX_I2C1_Init+0x50>)
 800147e:	2200      	movs	r2, #0
 8001480:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001482:	4b0e      	ldr	r3, [pc, #56]	@ (80014bc <MX_I2C1_Init+0x50>)
 8001484:	2200      	movs	r2, #0
 8001486:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001488:	4b0c      	ldr	r3, [pc, #48]	@ (80014bc <MX_I2C1_Init+0x50>)
 800148a:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800148e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001490:	4b0a      	ldr	r3, [pc, #40]	@ (80014bc <MX_I2C1_Init+0x50>)
 8001492:	2200      	movs	r2, #0
 8001494:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001496:	4b09      	ldr	r3, [pc, #36]	@ (80014bc <MX_I2C1_Init+0x50>)
 8001498:	2200      	movs	r2, #0
 800149a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800149c:	4b07      	ldr	r3, [pc, #28]	@ (80014bc <MX_I2C1_Init+0x50>)
 800149e:	2200      	movs	r2, #0
 80014a0:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80014a2:	4b06      	ldr	r3, [pc, #24]	@ (80014bc <MX_I2C1_Init+0x50>)
 80014a4:	2200      	movs	r2, #0
 80014a6:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80014a8:	4804      	ldr	r0, [pc, #16]	@ (80014bc <MX_I2C1_Init+0x50>)
 80014aa:	f001 f89f 	bl	80025ec <HAL_I2C_Init>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80014b4:	f000 f88e 	bl	80015d4 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80014b8:	bf00      	nop
 80014ba:	bd80      	pop	{r7, pc}
 80014bc:	200001f4 	.word	0x200001f4
 80014c0:	40005400 	.word	0x40005400
 80014c4:	000186a0 	.word	0x000186a0

080014c8 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014cc:	4b11      	ldr	r3, [pc, #68]	@ (8001514 <MX_USART2_UART_Init+0x4c>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	@ (8001518 <MX_USART2_UART_Init+0x50>)
 80014d0:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014d2:	4b10      	ldr	r3, [pc, #64]	@ (8001514 <MX_USART2_UART_Init+0x4c>)
 80014d4:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 80014d8:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 80014da:	4b0e      	ldr	r3, [pc, #56]	@ (8001514 <MX_USART2_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	@ (8001514 <MX_USART2_UART_Init+0x4c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	@ (8001514 <MX_USART2_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014ec:	4b09      	ldr	r3, [pc, #36]	@ (8001514 <MX_USART2_UART_Init+0x4c>)
 80014ee:	220c      	movs	r2, #12
 80014f0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f2:	4b08      	ldr	r3, [pc, #32]	@ (8001514 <MX_USART2_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f8:	4b06      	ldr	r3, [pc, #24]	@ (8001514 <MX_USART2_UART_Init+0x4c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	@ (8001514 <MX_USART2_UART_Init+0x4c>)
 8001500:	f003 f9b0 	bl	8004864 <HAL_UART_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 800150a:	f000 f863 	bl	80015d4 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000248 	.word	0x20000248
 8001518:	40004400 	.word	0x40004400

0800151c <MX_GPIO_Init>:
  * @retval None
  */


static void MX_GPIO_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b088      	sub	sp, #32
 8001520:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	f107 030c 	add.w	r3, r7, #12
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	60bb      	str	r3, [r7, #8]
 8001536:	4b1f      	ldr	r3, [pc, #124]	@ (80015b4 <MX_GPIO_Init+0x98>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800153a:	4a1e      	ldr	r2, [pc, #120]	@ (80015b4 <MX_GPIO_Init+0x98>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6313      	str	r3, [r2, #48]	@ 0x30
 8001542:	4b1c      	ldr	r3, [pc, #112]	@ (80015b4 <MX_GPIO_Init+0x98>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	60bb      	str	r3, [r7, #8]
 800154c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	607b      	str	r3, [r7, #4]
 8001552:	4b18      	ldr	r3, [pc, #96]	@ (80015b4 <MX_GPIO_Init+0x98>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001556:	4a17      	ldr	r2, [pc, #92]	@ (80015b4 <MX_GPIO_Init+0x98>)
 8001558:	f043 0301 	orr.w	r3, r3, #1
 800155c:	6313      	str	r3, [r2, #48]	@ 0x30
 800155e:	4b15      	ldr	r3, [pc, #84]	@ (80015b4 <MX_GPIO_Init+0x98>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001562:	f003 0301 	and.w	r3, r3, #1
 8001566:	607b      	str	r3, [r7, #4]
 8001568:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	603b      	str	r3, [r7, #0]
 800156e:	4b11      	ldr	r3, [pc, #68]	@ (80015b4 <MX_GPIO_Init+0x98>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001572:	4a10      	ldr	r2, [pc, #64]	@ (80015b4 <MX_GPIO_Init+0x98>)
 8001574:	f043 0302 	orr.w	r3, r3, #2
 8001578:	6313      	str	r3, [r2, #48]	@ 0x30
 800157a:	4b0e      	ldr	r3, [pc, #56]	@ (80015b4 <MX_GPIO_Init+0x98>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800157e:	f003 0302 	and.w	r3, r3, #2
 8001582:	603b      	str	r3, [r7, #0]
 8001584:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001586:	2200      	movs	r2, #0
 8001588:	213f      	movs	r1, #63	@ 0x3f
 800158a:	480b      	ldr	r0, [pc, #44]	@ (80015b8 <MX_GPIO_Init+0x9c>)
 800158c:	f001 f814 	bl	80025b8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001590:	233f      	movs	r3, #63	@ 0x3f
 8001592:	60fb      	str	r3, [r7, #12]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001594:	2301      	movs	r3, #1
 8001596:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001598:	2300      	movs	r3, #0
 800159a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800159c:	2300      	movs	r3, #0
 800159e:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80015a0:	f107 030c 	add.w	r3, r7, #12
 80015a4:	4619      	mov	r1, r3
 80015a6:	4804      	ldr	r0, [pc, #16]	@ (80015b8 <MX_GPIO_Init+0x9c>)
 80015a8:	f000 fe82 	bl	80022b0 <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 80015ac:	bf00      	nop
 80015ae:	3720      	adds	r7, #32
 80015b0:	46bd      	mov	sp, r7
 80015b2:	bd80      	pop	{r7, pc}
 80015b4:	40023800 	.word	0x40023800
 80015b8:	40020800 	.word	0x40020800

080015bc <MX_NVIC_Init>:

/* USER CODE BEGIN 4 */
static void MX_NVIC_Init(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80015c0:	2200      	movs	r2, #0
 80015c2:	2100      	movs	r1, #0
 80015c4:	2026      	movs	r0, #38	@ 0x26
 80015c6:	f000 fdaa 	bl	800211e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn); // Habilitar interrupciones globales USART2
 80015ca:	2026      	movs	r0, #38	@ 0x26
 80015cc:	f000 fdc3 	bl	8002156 <HAL_NVIC_EnableIRQ>
}
 80015d0:	bf00      	nop
 80015d2:	bd80      	pop	{r7, pc}

080015d4 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80015d4:	b480      	push	{r7}
 80015d6:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80015d8:	b672      	cpsid	i
}
 80015da:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 80015dc:	bf00      	nop
 80015de:	e7fd      	b.n	80015dc <Error_Handler+0x8>

080015e0 <ReadSHT85>:
// Cálculo de temperaturas medias cada 1 segundo (5 muestras recogidas cada 200ms cada una)
float totalTemperature = 0.0f;
float averageTemperature = 0.0f;
uint8_t sampleCount = 0;

void ReadSHT85(float *temperature, float *humidity) {
 80015e0:	b580      	push	{r7, lr}
 80015e2:	b088      	sub	sp, #32
 80015e4:	af02      	add	r7, sp, #8
 80015e6:	6078      	str	r0, [r7, #4]
 80015e8:	6039      	str	r1, [r7, #0]
    uint8_t cmd[2] = { (SHT85_CMD_MEASURE_HIGHREP >> 8) & 0xFF, SHT85_CMD_MEASURE_HIGHREP & 0xFF };
 80015ea:	2324      	movs	r3, #36	@ 0x24
 80015ec:	82bb      	strh	r3, [r7, #20]
    HAL_I2C_Master_Transmit(&hi2c1, SHT85_I2C_ADDR, cmd, 2, HAL_MAX_DELAY);
 80015ee:	f107 0214 	add.w	r2, r7, #20
 80015f2:	f04f 33ff 	mov.w	r3, #4294967295
 80015f6:	9300      	str	r3, [sp, #0]
 80015f8:	2302      	movs	r3, #2
 80015fa:	2188      	movs	r1, #136	@ 0x88
 80015fc:	4826      	ldr	r0, [pc, #152]	@ (8001698 <ReadSHT85+0xb8>)
 80015fe:	f001 f939 	bl	8002874 <HAL_I2C_Master_Transmit>
    HAL_Delay(15); // Esperar a que la medición se complete
 8001602:	200f      	movs	r0, #15
 8001604:	f000 fc8c 	bl	8001f20 <HAL_Delay>

    uint8_t buffer[6];
    HAL_I2C_Master_Receive(&hi2c1, SHT85_I2C_ADDR, buffer, 6, HAL_MAX_DELAY);
 8001608:	f107 020c 	add.w	r2, r7, #12
 800160c:	f04f 33ff 	mov.w	r3, #4294967295
 8001610:	9300      	str	r3, [sp, #0]
 8001612:	2306      	movs	r3, #6
 8001614:	2188      	movs	r1, #136	@ 0x88
 8001616:	4820      	ldr	r0, [pc, #128]	@ (8001698 <ReadSHT85+0xb8>)
 8001618:	f001 fa2a 	bl	8002a70 <HAL_I2C_Master_Receive>

    temp_raw = (buffer[0] << 8) | buffer[1];
 800161c:	7b3b      	ldrb	r3, [r7, #12]
 800161e:	021b      	lsls	r3, r3, #8
 8001620:	b21a      	sxth	r2, r3
 8001622:	7b7b      	ldrb	r3, [r7, #13]
 8001624:	b21b      	sxth	r3, r3
 8001626:	4313      	orrs	r3, r2
 8001628:	b21b      	sxth	r3, r3
 800162a:	b29a      	uxth	r2, r3
 800162c:	4b1b      	ldr	r3, [pc, #108]	@ (800169c <ReadSHT85+0xbc>)
 800162e:	801a      	strh	r2, [r3, #0]
    hum_raw = (buffer[3] << 8) | buffer[4];
 8001630:	7bfb      	ldrb	r3, [r7, #15]
 8001632:	021b      	lsls	r3, r3, #8
 8001634:	b21a      	sxth	r2, r3
 8001636:	7c3b      	ldrb	r3, [r7, #16]
 8001638:	b21b      	sxth	r3, r3
 800163a:	4313      	orrs	r3, r2
 800163c:	b21b      	sxth	r3, r3
 800163e:	b29a      	uxth	r2, r3
 8001640:	4b17      	ldr	r3, [pc, #92]	@ (80016a0 <ReadSHT85+0xc0>)
 8001642:	801a      	strh	r2, [r3, #0]

    *temperature = -45.0f + 175.0f * ((float)temp_raw / 65535.0f);
 8001644:	4b15      	ldr	r3, [pc, #84]	@ (800169c <ReadSHT85+0xbc>)
 8001646:	881b      	ldrh	r3, [r3, #0]
 8001648:	ee07 3a90 	vmov	s15, r3
 800164c:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001650:	eddf 6a14 	vldr	s13, [pc, #80]	@ 80016a4 <ReadSHT85+0xc4>
 8001654:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001658:	ed9f 7a13 	vldr	s14, [pc, #76]	@ 80016a8 <ReadSHT85+0xc8>
 800165c:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001660:	ed9f 7a12 	vldr	s14, [pc, #72]	@ 80016ac <ReadSHT85+0xcc>
 8001664:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001668:	687b      	ldr	r3, [r7, #4]
 800166a:	edc3 7a00 	vstr	s15, [r3]
    *humidity = 100.0f * ((float)hum_raw / 65535.0f);
 800166e:	4b0c      	ldr	r3, [pc, #48]	@ (80016a0 <ReadSHT85+0xc0>)
 8001670:	881b      	ldrh	r3, [r3, #0]
 8001672:	ee07 3a90 	vmov	s15, r3
 8001676:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 800167a:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 80016a4 <ReadSHT85+0xc4>
 800167e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001682:	ed9f 7a0b 	vldr	s14, [pc, #44]	@ 80016b0 <ReadSHT85+0xd0>
 8001686:	ee67 7a87 	vmul.f32	s15, s15, s14
 800168a:	683b      	ldr	r3, [r7, #0]
 800168c:	edc3 7a00 	vstr	s15, [r3]
}
 8001690:	bf00      	nop
 8001692:	3718      	adds	r7, #24
 8001694:	46bd      	mov	sp, r7
 8001696:	bd80      	pop	{r7, pc}
 8001698:	200001f4 	.word	0x200001f4
 800169c:	200002c0 	.word	0x200002c0
 80016a0:	200002c2 	.word	0x200002c2
 80016a4:	477fff00 	.word	0x477fff00
 80016a8:	432f0000 	.word	0x432f0000
 80016ac:	42340000 	.word	0x42340000
 80016b0:	42c80000 	.word	0x42c80000

080016b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80016b4:	b580      	push	{r7, lr}
 80016b6:	b082      	sub	sp, #8
 80016b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80016ba:	2300      	movs	r3, #0
 80016bc:	607b      	str	r3, [r7, #4]
 80016be:	4b10      	ldr	r3, [pc, #64]	@ (8001700 <HAL_MspInit+0x4c>)
 80016c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016c2:	4a0f      	ldr	r2, [pc, #60]	@ (8001700 <HAL_MspInit+0x4c>)
 80016c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80016c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80016ca:	4b0d      	ldr	r3, [pc, #52]	@ (8001700 <HAL_MspInit+0x4c>)
 80016cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80016ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80016d2:	607b      	str	r3, [r7, #4]
 80016d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80016d6:	2300      	movs	r3, #0
 80016d8:	603b      	str	r3, [r7, #0]
 80016da:	4b09      	ldr	r3, [pc, #36]	@ (8001700 <HAL_MspInit+0x4c>)
 80016dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016de:	4a08      	ldr	r2, [pc, #32]	@ (8001700 <HAL_MspInit+0x4c>)
 80016e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80016e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80016e6:	4b06      	ldr	r3, [pc, #24]	@ (8001700 <HAL_MspInit+0x4c>)
 80016e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80016ee:	603b      	str	r3, [r7, #0]
 80016f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80016f2:	2007      	movs	r0, #7
 80016f4:	f000 fd08 	bl	8002108 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80016f8:	bf00      	nop
 80016fa:	3708      	adds	r7, #8
 80016fc:	46bd      	mov	sp, r7
 80016fe:	bd80      	pop	{r7, pc}
 8001700:	40023800 	.word	0x40023800

08001704 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001704:	b580      	push	{r7, lr}
 8001706:	b08a      	sub	sp, #40	@ 0x28
 8001708:	af00      	add	r7, sp, #0
 800170a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800170c:	f107 0314 	add.w	r3, r7, #20
 8001710:	2200      	movs	r2, #0
 8001712:	601a      	str	r2, [r3, #0]
 8001714:	605a      	str	r2, [r3, #4]
 8001716:	609a      	str	r2, [r3, #8]
 8001718:	60da      	str	r2, [r3, #12]
 800171a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800171c:	687b      	ldr	r3, [r7, #4]
 800171e:	681b      	ldr	r3, [r3, #0]
 8001720:	4a19      	ldr	r2, [pc, #100]	@ (8001788 <HAL_I2C_MspInit+0x84>)
 8001722:	4293      	cmp	r3, r2
 8001724:	d12b      	bne.n	800177e <HAL_I2C_MspInit+0x7a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001726:	2300      	movs	r3, #0
 8001728:	613b      	str	r3, [r7, #16]
 800172a:	4b18      	ldr	r3, [pc, #96]	@ (800178c <HAL_I2C_MspInit+0x88>)
 800172c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800172e:	4a17      	ldr	r2, [pc, #92]	@ (800178c <HAL_I2C_MspInit+0x88>)
 8001730:	f043 0302 	orr.w	r3, r3, #2
 8001734:	6313      	str	r3, [r2, #48]	@ 0x30
 8001736:	4b15      	ldr	r3, [pc, #84]	@ (800178c <HAL_I2C_MspInit+0x88>)
 8001738:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800173a:	f003 0302 	and.w	r3, r3, #2
 800173e:	613b      	str	r3, [r7, #16]
 8001740:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001742:	23c0      	movs	r3, #192	@ 0xc0
 8001744:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001746:	2312      	movs	r3, #18
 8001748:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800174a:	2301      	movs	r3, #1
 800174c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800174e:	2303      	movs	r3, #3
 8001750:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001752:	2304      	movs	r3, #4
 8001754:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001756:	f107 0314 	add.w	r3, r7, #20
 800175a:	4619      	mov	r1, r3
 800175c:	480c      	ldr	r0, [pc, #48]	@ (8001790 <HAL_I2C_MspInit+0x8c>)
 800175e:	f000 fda7 	bl	80022b0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001762:	2300      	movs	r3, #0
 8001764:	60fb      	str	r3, [r7, #12]
 8001766:	4b09      	ldr	r3, [pc, #36]	@ (800178c <HAL_I2C_MspInit+0x88>)
 8001768:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800176a:	4a08      	ldr	r2, [pc, #32]	@ (800178c <HAL_I2C_MspInit+0x88>)
 800176c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001770:	6413      	str	r3, [r2, #64]	@ 0x40
 8001772:	4b06      	ldr	r3, [pc, #24]	@ (800178c <HAL_I2C_MspInit+0x88>)
 8001774:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001776:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800177a:	60fb      	str	r3, [r7, #12]
 800177c:	68fb      	ldr	r3, [r7, #12]

  /* USER CODE END I2C1_MspInit 1 */

  }

}
 800177e:	bf00      	nop
 8001780:	3728      	adds	r7, #40	@ 0x28
 8001782:	46bd      	mov	sp, r7
 8001784:	bd80      	pop	{r7, pc}
 8001786:	bf00      	nop
 8001788:	40005400 	.word	0x40005400
 800178c:	40023800 	.word	0x40023800
 8001790:	40020400 	.word	0x40020400

08001794 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8001794:	b580      	push	{r7, lr}
 8001796:	b08a      	sub	sp, #40	@ 0x28
 8001798:	af00      	add	r7, sp, #0
 800179a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800179c:	f107 0314 	add.w	r3, r7, #20
 80017a0:	2200      	movs	r2, #0
 80017a2:	601a      	str	r2, [r3, #0]
 80017a4:	605a      	str	r2, [r3, #4]
 80017a6:	609a      	str	r2, [r3, #8]
 80017a8:	60da      	str	r2, [r3, #12]
 80017aa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	4a1d      	ldr	r2, [pc, #116]	@ (8001828 <HAL_UART_MspInit+0x94>)
 80017b2:	4293      	cmp	r3, r2
 80017b4:	d133      	bne.n	800181e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80017b6:	2300      	movs	r3, #0
 80017b8:	613b      	str	r3, [r7, #16]
 80017ba:	4b1c      	ldr	r3, [pc, #112]	@ (800182c <HAL_UART_MspInit+0x98>)
 80017bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017be:	4a1b      	ldr	r2, [pc, #108]	@ (800182c <HAL_UART_MspInit+0x98>)
 80017c0:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80017c4:	6413      	str	r3, [r2, #64]	@ 0x40
 80017c6:	4b19      	ldr	r3, [pc, #100]	@ (800182c <HAL_UART_MspInit+0x98>)
 80017c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80017ca:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80017ce:	613b      	str	r3, [r7, #16]
 80017d0:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80017d2:	2300      	movs	r3, #0
 80017d4:	60fb      	str	r3, [r7, #12]
 80017d6:	4b15      	ldr	r3, [pc, #84]	@ (800182c <HAL_UART_MspInit+0x98>)
 80017d8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017da:	4a14      	ldr	r2, [pc, #80]	@ (800182c <HAL_UART_MspInit+0x98>)
 80017dc:	f043 0301 	orr.w	r3, r3, #1
 80017e0:	6313      	str	r3, [r2, #48]	@ 0x30
 80017e2:	4b12      	ldr	r3, [pc, #72]	@ (800182c <HAL_UART_MspInit+0x98>)
 80017e4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80017e6:	f003 0301 	and.w	r3, r3, #1
 80017ea:	60fb      	str	r3, [r7, #12]
 80017ec:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80017ee:	230c      	movs	r3, #12
 80017f0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80017f2:	2302      	movs	r3, #2
 80017f4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80017f6:	2300      	movs	r3, #0
 80017f8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80017fa:	2303      	movs	r3, #3
 80017fc:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80017fe:	2307      	movs	r3, #7
 8001800:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001802:	f107 0314 	add.w	r3, r7, #20
 8001806:	4619      	mov	r1, r3
 8001808:	4809      	ldr	r0, [pc, #36]	@ (8001830 <HAL_UART_MspInit+0x9c>)
 800180a:	f000 fd51 	bl	80022b0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800180e:	2200      	movs	r2, #0
 8001810:	2100      	movs	r1, #0
 8001812:	2026      	movs	r0, #38	@ 0x26
 8001814:	f000 fc83 	bl	800211e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8001818:	2026      	movs	r0, #38	@ 0x26
 800181a:	f000 fc9c 	bl	8002156 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800181e:	bf00      	nop
 8001820:	3728      	adds	r7, #40	@ 0x28
 8001822:	46bd      	mov	sp, r7
 8001824:	bd80      	pop	{r7, pc}
 8001826:	bf00      	nop
 8001828:	40004400 	.word	0x40004400
 800182c:	40023800 	.word	0x40023800
 8001830:	40020000 	.word	0x40020000

08001834 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8001834:	b480      	push	{r7}
 8001836:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8001838:	bf00      	nop
 800183a:	e7fd      	b.n	8001838 <NMI_Handler+0x4>

0800183c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800183c:	b480      	push	{r7}
 800183e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8001840:	bf00      	nop
 8001842:	e7fd      	b.n	8001840 <HardFault_Handler+0x4>

08001844 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8001844:	b480      	push	{r7}
 8001846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8001848:	bf00      	nop
 800184a:	e7fd      	b.n	8001848 <MemManage_Handler+0x4>

0800184c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800184c:	b480      	push	{r7}
 800184e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8001850:	bf00      	nop
 8001852:	e7fd      	b.n	8001850 <BusFault_Handler+0x4>

08001854 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8001854:	b480      	push	{r7}
 8001856:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8001858:	bf00      	nop
 800185a:	e7fd      	b.n	8001858 <UsageFault_Handler+0x4>

0800185c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800185c:	b480      	push	{r7}
 800185e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8001860:	bf00      	nop
 8001862:	46bd      	mov	sp, r7
 8001864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001868:	4770      	bx	lr

0800186a <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 800186a:	b480      	push	{r7}
 800186c:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 800186e:	bf00      	nop
 8001870:	46bd      	mov	sp, r7
 8001872:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001876:	4770      	bx	lr

08001878 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8001878:	b480      	push	{r7}
 800187a:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800187c:	bf00      	nop
 800187e:	46bd      	mov	sp, r7
 8001880:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001884:	4770      	bx	lr

08001886 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8001886:	b580      	push	{r7, lr}
 8001888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800188a:	f000 fb29 	bl	8001ee0 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800188e:	bf00      	nop
 8001890:	bd80      	pop	{r7, pc}
	...

08001894 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8001894:	b580      	push	{r7, lr}
 8001896:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8001898:	4802      	ldr	r0, [pc, #8]	@ (80018a4 <USART2_IRQHandler+0x10>)
 800189a:	f003 f8e3 	bl	8004a64 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 800189e:	bf00      	nop
 80018a0:	bd80      	pop	{r7, pc}
 80018a2:	bf00      	nop
 80018a4:	20000248 	.word	0x20000248

080018a8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80018a8:	b480      	push	{r7}
 80018aa:	af00      	add	r7, sp, #0
  return 1;
 80018ac:	2301      	movs	r3, #1
}
 80018ae:	4618      	mov	r0, r3
 80018b0:	46bd      	mov	sp, r7
 80018b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80018b6:	4770      	bx	lr

080018b8 <_kill>:

int _kill(int pid, int sig)
{
 80018b8:	b580      	push	{r7, lr}
 80018ba:	b082      	sub	sp, #8
 80018bc:	af00      	add	r7, sp, #0
 80018be:	6078      	str	r0, [r7, #4]
 80018c0:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80018c2:	f004 fe07 	bl	80064d4 <__errno>
 80018c6:	4603      	mov	r3, r0
 80018c8:	2216      	movs	r2, #22
 80018ca:	601a      	str	r2, [r3, #0]
  return -1;
 80018cc:	f04f 33ff 	mov.w	r3, #4294967295
}
 80018d0:	4618      	mov	r0, r3
 80018d2:	3708      	adds	r7, #8
 80018d4:	46bd      	mov	sp, r7
 80018d6:	bd80      	pop	{r7, pc}

080018d8 <_exit>:

void _exit (int status)
{
 80018d8:	b580      	push	{r7, lr}
 80018da:	b082      	sub	sp, #8
 80018dc:	af00      	add	r7, sp, #0
 80018de:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80018e0:	f04f 31ff 	mov.w	r1, #4294967295
 80018e4:	6878      	ldr	r0, [r7, #4]
 80018e6:	f7ff ffe7 	bl	80018b8 <_kill>
  while (1) {}    /* Make sure we hang here */
 80018ea:	bf00      	nop
 80018ec:	e7fd      	b.n	80018ea <_exit+0x12>

080018ee <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80018ee:	b580      	push	{r7, lr}
 80018f0:	b086      	sub	sp, #24
 80018f2:	af00      	add	r7, sp, #0
 80018f4:	60f8      	str	r0, [r7, #12]
 80018f6:	60b9      	str	r1, [r7, #8]
 80018f8:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80018fa:	2300      	movs	r3, #0
 80018fc:	617b      	str	r3, [r7, #20]
 80018fe:	e00a      	b.n	8001916 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8001900:	f3af 8000 	nop.w
 8001904:	4601      	mov	r1, r0
 8001906:	68bb      	ldr	r3, [r7, #8]
 8001908:	1c5a      	adds	r2, r3, #1
 800190a:	60ba      	str	r2, [r7, #8]
 800190c:	b2ca      	uxtb	r2, r1
 800190e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001910:	697b      	ldr	r3, [r7, #20]
 8001912:	3301      	adds	r3, #1
 8001914:	617b      	str	r3, [r7, #20]
 8001916:	697a      	ldr	r2, [r7, #20]
 8001918:	687b      	ldr	r3, [r7, #4]
 800191a:	429a      	cmp	r2, r3
 800191c:	dbf0      	blt.n	8001900 <_read+0x12>
  }

  return len;
 800191e:	687b      	ldr	r3, [r7, #4]
}
 8001920:	4618      	mov	r0, r3
 8001922:	3718      	adds	r7, #24
 8001924:	46bd      	mov	sp, r7
 8001926:	bd80      	pop	{r7, pc}

08001928 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8001928:	b580      	push	{r7, lr}
 800192a:	b086      	sub	sp, #24
 800192c:	af00      	add	r7, sp, #0
 800192e:	60f8      	str	r0, [r7, #12]
 8001930:	60b9      	str	r1, [r7, #8]
 8001932:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001934:	2300      	movs	r3, #0
 8001936:	617b      	str	r3, [r7, #20]
 8001938:	e009      	b.n	800194e <_write+0x26>
  {
    __io_putchar(*ptr++);
 800193a:	68bb      	ldr	r3, [r7, #8]
 800193c:	1c5a      	adds	r2, r3, #1
 800193e:	60ba      	str	r2, [r7, #8]
 8001940:	781b      	ldrb	r3, [r3, #0]
 8001942:	4618      	mov	r0, r3
 8001944:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8001948:	697b      	ldr	r3, [r7, #20]
 800194a:	3301      	adds	r3, #1
 800194c:	617b      	str	r3, [r7, #20]
 800194e:	697a      	ldr	r2, [r7, #20]
 8001950:	687b      	ldr	r3, [r7, #4]
 8001952:	429a      	cmp	r2, r3
 8001954:	dbf1      	blt.n	800193a <_write+0x12>
  }
  return len;
 8001956:	687b      	ldr	r3, [r7, #4]
}
 8001958:	4618      	mov	r0, r3
 800195a:	3718      	adds	r7, #24
 800195c:	46bd      	mov	sp, r7
 800195e:	bd80      	pop	{r7, pc}

08001960 <_close>:

int _close(int file)
{
 8001960:	b480      	push	{r7}
 8001962:	b083      	sub	sp, #12
 8001964:	af00      	add	r7, sp, #0
 8001966:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8001968:	f04f 33ff 	mov.w	r3, #4294967295
}
 800196c:	4618      	mov	r0, r3
 800196e:	370c      	adds	r7, #12
 8001970:	46bd      	mov	sp, r7
 8001972:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001976:	4770      	bx	lr

08001978 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8001978:	b480      	push	{r7}
 800197a:	b083      	sub	sp, #12
 800197c:	af00      	add	r7, sp, #0
 800197e:	6078      	str	r0, [r7, #4]
 8001980:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8001982:	683b      	ldr	r3, [r7, #0]
 8001984:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8001988:	605a      	str	r2, [r3, #4]
  return 0;
 800198a:	2300      	movs	r3, #0
}
 800198c:	4618      	mov	r0, r3
 800198e:	370c      	adds	r7, #12
 8001990:	46bd      	mov	sp, r7
 8001992:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001996:	4770      	bx	lr

08001998 <_isatty>:

int _isatty(int file)
{
 8001998:	b480      	push	{r7}
 800199a:	b083      	sub	sp, #12
 800199c:	af00      	add	r7, sp, #0
 800199e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 80019a0:	2301      	movs	r3, #1
}
 80019a2:	4618      	mov	r0, r3
 80019a4:	370c      	adds	r7, #12
 80019a6:	46bd      	mov	sp, r7
 80019a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019ac:	4770      	bx	lr

080019ae <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 80019ae:	b480      	push	{r7}
 80019b0:	b085      	sub	sp, #20
 80019b2:	af00      	add	r7, sp, #0
 80019b4:	60f8      	str	r0, [r7, #12]
 80019b6:	60b9      	str	r1, [r7, #8]
 80019b8:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 80019ba:	2300      	movs	r3, #0
}
 80019bc:	4618      	mov	r0, r3
 80019be:	3714      	adds	r7, #20
 80019c0:	46bd      	mov	sp, r7
 80019c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80019c6:	4770      	bx	lr

080019c8 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80019c8:	b580      	push	{r7, lr}
 80019ca:	b086      	sub	sp, #24
 80019cc:	af00      	add	r7, sp, #0
 80019ce:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80019d0:	4a14      	ldr	r2, [pc, #80]	@ (8001a24 <_sbrk+0x5c>)
 80019d2:	4b15      	ldr	r3, [pc, #84]	@ (8001a28 <_sbrk+0x60>)
 80019d4:	1ad3      	subs	r3, r2, r3
 80019d6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80019d8:	697b      	ldr	r3, [r7, #20]
 80019da:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80019dc:	4b13      	ldr	r3, [pc, #76]	@ (8001a2c <_sbrk+0x64>)
 80019de:	681b      	ldr	r3, [r3, #0]
 80019e0:	2b00      	cmp	r3, #0
 80019e2:	d102      	bne.n	80019ea <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80019e4:	4b11      	ldr	r3, [pc, #68]	@ (8001a2c <_sbrk+0x64>)
 80019e6:	4a12      	ldr	r2, [pc, #72]	@ (8001a30 <_sbrk+0x68>)
 80019e8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80019ea:	4b10      	ldr	r3, [pc, #64]	@ (8001a2c <_sbrk+0x64>)
 80019ec:	681a      	ldr	r2, [r3, #0]
 80019ee:	687b      	ldr	r3, [r7, #4]
 80019f0:	4413      	add	r3, r2
 80019f2:	693a      	ldr	r2, [r7, #16]
 80019f4:	429a      	cmp	r2, r3
 80019f6:	d207      	bcs.n	8001a08 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80019f8:	f004 fd6c 	bl	80064d4 <__errno>
 80019fc:	4603      	mov	r3, r0
 80019fe:	220c      	movs	r2, #12
 8001a00:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8001a02:	f04f 33ff 	mov.w	r3, #4294967295
 8001a06:	e009      	b.n	8001a1c <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8001a08:	4b08      	ldr	r3, [pc, #32]	@ (8001a2c <_sbrk+0x64>)
 8001a0a:	681b      	ldr	r3, [r3, #0]
 8001a0c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8001a0e:	4b07      	ldr	r3, [pc, #28]	@ (8001a2c <_sbrk+0x64>)
 8001a10:	681a      	ldr	r2, [r3, #0]
 8001a12:	687b      	ldr	r3, [r7, #4]
 8001a14:	4413      	add	r3, r2
 8001a16:	4a05      	ldr	r2, [pc, #20]	@ (8001a2c <_sbrk+0x64>)
 8001a18:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8001a1a:	68fb      	ldr	r3, [r7, #12]
}
 8001a1c:	4618      	mov	r0, r3
 8001a1e:	3718      	adds	r7, #24
 8001a20:	46bd      	mov	sp, r7
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	20020000 	.word	0x20020000
 8001a28:	00000400 	.word	0x00000400
 8001a2c:	200002c4 	.word	0x200002c4
 8001a30:	20000520 	.word	0x20000520

08001a34 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8001a34:	b480      	push	{r7}
 8001a36:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8001a38:	4b06      	ldr	r3, [pc, #24]	@ (8001a54 <SystemInit+0x20>)
 8001a3a:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8001a3e:	4a05      	ldr	r2, [pc, #20]	@ (8001a54 <SystemInit+0x20>)
 8001a40:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8001a44:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8001a48:	bf00      	nop
 8001a4a:	46bd      	mov	sp, r7
 8001a4c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001a50:	4770      	bx	lr
 8001a52:	bf00      	nop
 8001a54:	e000ed00 	.word	0xe000ed00

08001a58 <VEML7700_Init>:
#include "veml7700.h"
#include <stdio.h>

// Function to initialize the VEML7700 sensor
void VEML7700_Init(void) {
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	b086      	sub	sp, #24
 8001a5c:	af04      	add	r7, sp, #16
    uint8_t config[2] = {0x00, 0x00}; // Example configuration
 8001a5e:	2300      	movs	r3, #0
 8001a60:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Write(&hi2c1, VEML7700_I2C_ADDR, VEML7700_REG_CONF, I2C_MEMADD_SIZE_8BIT, config, 2, HAL_MAX_DELAY);
 8001a62:	f04f 33ff 	mov.w	r3, #4294967295
 8001a66:	9302      	str	r3, [sp, #8]
 8001a68:	2302      	movs	r3, #2
 8001a6a:	9301      	str	r3, [sp, #4]
 8001a6c:	1d3b      	adds	r3, r7, #4
 8001a6e:	9300      	str	r3, [sp, #0]
 8001a70:	2301      	movs	r3, #1
 8001a72:	2200      	movs	r2, #0
 8001a74:	2120      	movs	r1, #32
 8001a76:	4803      	ldr	r0, [pc, #12]	@ (8001a84 <VEML7700_Init+0x2c>)
 8001a78:	f001 fa2c 	bl	8002ed4 <HAL_I2C_Mem_Write>
}
 8001a7c:	bf00      	nop
 8001a7e:	3708      	adds	r7, #8
 8001a80:	46bd      	mov	sp, r7
 8001a82:	bd80      	pop	{r7, pc}
 8001a84:	200001f4 	.word	0x200001f4

08001a88 <VEML7700_ReadLuminosity>:

// Function to read luminosity from the VEML7700 sensor
float VEML7700_ReadLuminosity(void) {
 8001a88:	b580      	push	{r7, lr}
 8001a8a:	b088      	sub	sp, #32
 8001a8c:	af04      	add	r7, sp, #16
    uint8_t buffer[2] = {0x00, 0x00};
 8001a8e:	2300      	movs	r3, #0
 8001a90:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Read(&hi2c1, VEML7700_I2C_ADDR, VEML7700_REG_ALS, I2C_MEMADD_SIZE_8BIT, buffer, 2, HAL_MAX_DELAY);
 8001a92:	f04f 33ff 	mov.w	r3, #4294967295
 8001a96:	9302      	str	r3, [sp, #8]
 8001a98:	2302      	movs	r3, #2
 8001a9a:	9301      	str	r3, [sp, #4]
 8001a9c:	1d3b      	adds	r3, r7, #4
 8001a9e:	9300      	str	r3, [sp, #0]
 8001aa0:	2301      	movs	r3, #1
 8001aa2:	2204      	movs	r2, #4
 8001aa4:	2120      	movs	r1, #32
 8001aa6:	4814      	ldr	r0, [pc, #80]	@ (8001af8 <VEML7700_ReadLuminosity+0x70>)
 8001aa8:	f001 fb0e 	bl	80030c8 <HAL_I2C_Mem_Read>
    uint16_t raw_lux = (buffer[1] << 8) | buffer[0];
 8001aac:	797b      	ldrb	r3, [r7, #5]
 8001aae:	021b      	lsls	r3, r3, #8
 8001ab0:	b21a      	sxth	r2, r3
 8001ab2:	793b      	ldrb	r3, [r7, #4]
 8001ab4:	b21b      	sxth	r3, r3
 8001ab6:	4313      	orrs	r3, r2
 8001ab8:	b21b      	sxth	r3, r3
 8001aba:	81fb      	strh	r3, [r7, #14]
    float luminosity = raw_lux * 0.0576; // Convert raw value to lux (example conversion factor)
 8001abc:	89fb      	ldrh	r3, [r7, #14]
 8001abe:	4618      	mov	r0, r3
 8001ac0:	f7fe fd38 	bl	8000534 <__aeabi_i2d>
 8001ac4:	a30a      	add	r3, pc, #40	@ (adr r3, 8001af0 <VEML7700_ReadLuminosity+0x68>)
 8001ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aca:	f7fe fd9d 	bl	8000608 <__aeabi_dmul>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7ff f86f 	bl	8000bb8 <__aeabi_d2f>
 8001ada:	4603      	mov	r3, r0
 8001adc:	60bb      	str	r3, [r7, #8]
    return luminosity;
 8001ade:	68bb      	ldr	r3, [r7, #8]
 8001ae0:	ee07 3a90 	vmov	s15, r3
}
 8001ae4:	eeb0 0a67 	vmov.f32	s0, s15
 8001ae8:	3710      	adds	r7, #16
 8001aea:	46bd      	mov	sp, r7
 8001aec:	bd80      	pop	{r7, pc}
 8001aee:	bf00      	nop
 8001af0:	487fcb92 	.word	0x487fcb92
 8001af4:	3fad7dbf 	.word	0x3fad7dbf
 8001af8:	200001f4 	.word	0x200001f4

08001afc <sendATCommand>:

static char response[256];  // Buffer para almacenar la respuesta
static volatile uint8_t rxIndex = 0; // Índice de recepción
static volatile uint8_t rxComplete = 0; // Bandera de recepción completa

void sendATCommand(char *cmd) {
 8001afc:	b580      	push	{r7, lr}
 8001afe:	b082      	sub	sp, #8
 8001b00:	af00      	add	r7, sp, #0
 8001b02:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 8001b04:	6878      	ldr	r0, [r7, #4]
 8001b06:	f7fe fbbb 	bl	8000280 <strlen>
 8001b0a:	4603      	mov	r3, r0
 8001b0c:	b29a      	uxth	r2, r3
 8001b0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001b12:	6879      	ldr	r1, [r7, #4]
 8001b14:	4803      	ldr	r0, [pc, #12]	@ (8001b24 <sendATCommand+0x28>)
 8001b16:	f002 fef5 	bl	8004904 <HAL_UART_Transmit>
}
 8001b1a:	bf00      	nop
 8001b1c:	3708      	adds	r7, #8
 8001b1e:	46bd      	mov	sp, r7
 8001b20:	bd80      	pop	{r7, pc}
 8001b22:	bf00      	nop
 8001b24:	20000248 	.word	0x20000248

08001b28 <receiveResponse_IT>:

void receiveResponse_IT() {
 8001b28:	b580      	push	{r7, lr}
 8001b2a:	af00      	add	r7, sp, #0
    rxIndex = 0;  // Reiniciar índice
 8001b2c:	4b0c      	ldr	r3, [pc, #48]	@ (8001b60 <receiveResponse_IT+0x38>)
 8001b2e:	2200      	movs	r2, #0
 8001b30:	701a      	strb	r2, [r3, #0]
    rxComplete = 0;  // Limpiar bandera de recepción completa
 8001b32:	4b0c      	ldr	r3, [pc, #48]	@ (8001b64 <receiveResponse_IT+0x3c>)
 8001b34:	2200      	movs	r2, #0
 8001b36:	701a      	strb	r2, [r3, #0]
    memset(response, 0, sizeof(response));  // Limpiar el buffer
 8001b38:	f44f 7280 	mov.w	r2, #256	@ 0x100
 8001b3c:	2100      	movs	r1, #0
 8001b3e:	480a      	ldr	r0, [pc, #40]	@ (8001b68 <receiveResponse_IT+0x40>)
 8001b40:	f004 fc75 	bl	800642e <memset>
    HAL_UART_Receive_IT(&huart2, (uint8_t*)&response[rxIndex], 1);  // Recibir primer byte
 8001b44:	4b06      	ldr	r3, [pc, #24]	@ (8001b60 <receiveResponse_IT+0x38>)
 8001b46:	781b      	ldrb	r3, [r3, #0]
 8001b48:	b2db      	uxtb	r3, r3
 8001b4a:	461a      	mov	r2, r3
 8001b4c:	4b06      	ldr	r3, [pc, #24]	@ (8001b68 <receiveResponse_IT+0x40>)
 8001b4e:	4413      	add	r3, r2
 8001b50:	2201      	movs	r2, #1
 8001b52:	4619      	mov	r1, r3
 8001b54:	4805      	ldr	r0, [pc, #20]	@ (8001b6c <receiveResponse_IT+0x44>)
 8001b56:	f002 ff60 	bl	8004a1a <HAL_UART_Receive_IT>
}
 8001b5a:	bf00      	nop
 8001b5c:	bd80      	pop	{r7, pc}
 8001b5e:	bf00      	nop
 8001b60:	200003c8 	.word	0x200003c8
 8001b64:	200003c9 	.word	0x200003c9
 8001b68:	200002c8 	.word	0x200002c8
 8001b6c:	20000248 	.word	0x20000248

08001b70 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001b70:	b580      	push	{r7, lr}
 8001b72:	b082      	sub	sp, #8
 8001b74:	af00      	add	r7, sp, #0
 8001b76:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {  // Verificar si es el UART correcto
 8001b78:	687b      	ldr	r3, [r7, #4]
 8001b7a:	681b      	ldr	r3, [r3, #0]
 8001b7c:	4a16      	ldr	r2, [pc, #88]	@ (8001bd8 <HAL_UART_RxCpltCallback+0x68>)
 8001b7e:	4293      	cmp	r3, r2
 8001b80:	d126      	bne.n	8001bd0 <HAL_UART_RxCpltCallback+0x60>
        if (rxIndex < sizeof(response) - 1) {  // Evitar desbordamiento del buffer
 8001b82:	4b16      	ldr	r3, [pc, #88]	@ (8001bdc <HAL_UART_RxCpltCallback+0x6c>)
 8001b84:	781b      	ldrb	r3, [r3, #0]
 8001b86:	b2db      	uxtb	r3, r3
 8001b88:	2bff      	cmp	r3, #255	@ 0xff
 8001b8a:	d01e      	beq.n	8001bca <HAL_UART_RxCpltCallback+0x5a>
            rxIndex++;  // Avanzar índice
 8001b8c:	4b13      	ldr	r3, [pc, #76]	@ (8001bdc <HAL_UART_RxCpltCallback+0x6c>)
 8001b8e:	781b      	ldrb	r3, [r3, #0]
 8001b90:	b2db      	uxtb	r3, r3
 8001b92:	3301      	adds	r3, #1
 8001b94:	b2da      	uxtb	r2, r3
 8001b96:	4b11      	ldr	r3, [pc, #68]	@ (8001bdc <HAL_UART_RxCpltCallback+0x6c>)
 8001b98:	701a      	strb	r2, [r3, #0]
            if (response[rxIndex - 1] == '\n') {  // Detecta el fin de la respuesta
 8001b9a:	4b10      	ldr	r3, [pc, #64]	@ (8001bdc <HAL_UART_RxCpltCallback+0x6c>)
 8001b9c:	781b      	ldrb	r3, [r3, #0]
 8001b9e:	b2db      	uxtb	r3, r3
 8001ba0:	3b01      	subs	r3, #1
 8001ba2:	4a0f      	ldr	r2, [pc, #60]	@ (8001be0 <HAL_UART_RxCpltCallback+0x70>)
 8001ba4:	5cd3      	ldrb	r3, [r2, r3]
 8001ba6:	2b0a      	cmp	r3, #10
 8001ba8:	d103      	bne.n	8001bb2 <HAL_UART_RxCpltCallback+0x42>
                rxComplete = 1;  // Marcar recepción completa
 8001baa:	4b0e      	ldr	r3, [pc, #56]	@ (8001be4 <HAL_UART_RxCpltCallback+0x74>)
 8001bac:	2201      	movs	r2, #1
 8001bae:	701a      	strb	r2, [r3, #0]
            }
        } else {
            rxComplete = 1;  // Si se llena el buffer, finalizar recepción
        }
    }
}
 8001bb0:	e00e      	b.n	8001bd0 <HAL_UART_RxCpltCallback+0x60>
                HAL_UART_Receive_IT(&huart2, (uint8_t*)&response[rxIndex], 1);  // Recibir siguiente byte
 8001bb2:	4b0a      	ldr	r3, [pc, #40]	@ (8001bdc <HAL_UART_RxCpltCallback+0x6c>)
 8001bb4:	781b      	ldrb	r3, [r3, #0]
 8001bb6:	b2db      	uxtb	r3, r3
 8001bb8:	461a      	mov	r2, r3
 8001bba:	4b09      	ldr	r3, [pc, #36]	@ (8001be0 <HAL_UART_RxCpltCallback+0x70>)
 8001bbc:	4413      	add	r3, r2
 8001bbe:	2201      	movs	r2, #1
 8001bc0:	4619      	mov	r1, r3
 8001bc2:	4809      	ldr	r0, [pc, #36]	@ (8001be8 <HAL_UART_RxCpltCallback+0x78>)
 8001bc4:	f002 ff29 	bl	8004a1a <HAL_UART_Receive_IT>
}
 8001bc8:	e002      	b.n	8001bd0 <HAL_UART_RxCpltCallback+0x60>
            rxComplete = 1;  // Si se llena el buffer, finalizar recepción
 8001bca:	4b06      	ldr	r3, [pc, #24]	@ (8001be4 <HAL_UART_RxCpltCallback+0x74>)
 8001bcc:	2201      	movs	r2, #1
 8001bce:	701a      	strb	r2, [r3, #0]
}
 8001bd0:	bf00      	nop
 8001bd2:	3708      	adds	r7, #8
 8001bd4:	46bd      	mov	sp, r7
 8001bd6:	bd80      	pop	{r7, pc}
 8001bd8:	40004400 	.word	0x40004400
 8001bdc:	200003c8 	.word	0x200003c8
 8001be0:	200002c8 	.word	0x200002c8
 8001be4:	200003c9 	.word	0x200003c9
 8001be8:	20000248 	.word	0x20000248

08001bec <connectToWiFi>:

void connectToWiFi(const char* ssid, const char* password) {
 8001bec:	b580      	push	{r7, lr}
 8001bee:	b09c      	sub	sp, #112	@ 0x70
 8001bf0:	af00      	add	r7, sp, #0
 8001bf2:	6078      	str	r0, [r7, #4]
 8001bf4:	6039      	str	r1, [r7, #0]
    HAL_Delay(3000);  // Esperar 3s después de encender el ESP8266
 8001bf6:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8001bfa:	f000 f991 	bl	8001f20 <HAL_Delay>

    // Enviar comando AT y esperar respuesta con interrupciones
    sendATCommand("AT\r\n");
 8001bfe:	4830      	ldr	r0, [pc, #192]	@ (8001cc0 <connectToWiFi+0xd4>)
 8001c00:	f7ff ff7c 	bl	8001afc <sendATCommand>
    receiveResponse_IT();
 8001c04:	f7ff ff90 	bl	8001b28 <receiveResponse_IT>
    while (!rxComplete);
 8001c08:	bf00      	nop
 8001c0a:	4b2e      	ldr	r3, [pc, #184]	@ (8001cc4 <connectToWiFi+0xd8>)
 8001c0c:	781b      	ldrb	r3, [r3, #0]
 8001c0e:	b2db      	uxtb	r3, r3
 8001c10:	2b00      	cmp	r3, #0
 8001c12:	d0fa      	beq.n	8001c0a <connectToWiFi+0x1e>
    printf("Respuesta AT: %s\n", response);
 8001c14:	492c      	ldr	r1, [pc, #176]	@ (8001cc8 <connectToWiFi+0xdc>)
 8001c16:	482d      	ldr	r0, [pc, #180]	@ (8001ccc <connectToWiFi+0xe0>)
 8001c18:	f004 fb94 	bl	8006344 <iprintf>
    rxComplete = 0;
 8001c1c:	4b29      	ldr	r3, [pc, #164]	@ (8001cc4 <connectToWiFi+0xd8>)
 8001c1e:	2200      	movs	r2, #0
 8001c20:	701a      	strb	r2, [r3, #0]

    // Reiniciar el ESP8266
    sendATCommand("AT+RST\r\n");
 8001c22:	482b      	ldr	r0, [pc, #172]	@ (8001cd0 <connectToWiFi+0xe4>)
 8001c24:	f7ff ff6a 	bl	8001afc <sendATCommand>
    receiveResponse_IT();
 8001c28:	f7ff ff7e 	bl	8001b28 <receiveResponse_IT>
    HAL_Delay(5000);
 8001c2c:	f241 3088 	movw	r0, #5000	@ 0x1388
 8001c30:	f000 f976 	bl	8001f20 <HAL_Delay>
    while (!rxComplete);
 8001c34:	bf00      	nop
 8001c36:	4b23      	ldr	r3, [pc, #140]	@ (8001cc4 <connectToWiFi+0xd8>)
 8001c38:	781b      	ldrb	r3, [r3, #0]
 8001c3a:	b2db      	uxtb	r3, r3
 8001c3c:	2b00      	cmp	r3, #0
 8001c3e:	d0fa      	beq.n	8001c36 <connectToWiFi+0x4a>
    printf("Respuesta RST: %s\n", response);
 8001c40:	4921      	ldr	r1, [pc, #132]	@ (8001cc8 <connectToWiFi+0xdc>)
 8001c42:	4824      	ldr	r0, [pc, #144]	@ (8001cd4 <connectToWiFi+0xe8>)
 8001c44:	f004 fb7e 	bl	8006344 <iprintf>
    rxComplete = 0;
 8001c48:	4b1e      	ldr	r3, [pc, #120]	@ (8001cc4 <connectToWiFi+0xd8>)
 8001c4a:	2200      	movs	r2, #0
 8001c4c:	701a      	strb	r2, [r3, #0]

    // Configurar modo Station
    sendATCommand("AT+CWMODE=1\r\n");
 8001c4e:	4822      	ldr	r0, [pc, #136]	@ (8001cd8 <connectToWiFi+0xec>)
 8001c50:	f7ff ff54 	bl	8001afc <sendATCommand>
    receiveResponse_IT();
 8001c54:	f7ff ff68 	bl	8001b28 <receiveResponse_IT>
    HAL_Delay(1000);
 8001c58:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001c5c:	f000 f960 	bl	8001f20 <HAL_Delay>
    while (!rxComplete);
 8001c60:	bf00      	nop
 8001c62:	4b18      	ldr	r3, [pc, #96]	@ (8001cc4 <connectToWiFi+0xd8>)
 8001c64:	781b      	ldrb	r3, [r3, #0]
 8001c66:	b2db      	uxtb	r3, r3
 8001c68:	2b00      	cmp	r3, #0
 8001c6a:	d0fa      	beq.n	8001c62 <connectToWiFi+0x76>
    printf("Respuesta CWMODE: %s\n", response);
 8001c6c:	4916      	ldr	r1, [pc, #88]	@ (8001cc8 <connectToWiFi+0xdc>)
 8001c6e:	481b      	ldr	r0, [pc, #108]	@ (8001cdc <connectToWiFi+0xf0>)
 8001c70:	f004 fb68 	bl	8006344 <iprintf>
    rxComplete = 0;
 8001c74:	4b13      	ldr	r3, [pc, #76]	@ (8001cc4 <connectToWiFi+0xd8>)
 8001c76:	2200      	movs	r2, #0
 8001c78:	701a      	strb	r2, [r3, #0]

    // Conectar a WiFi
    char connectCmd[100];
    sprintf(connectCmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 8001c7a:	f107 000c 	add.w	r0, r7, #12
 8001c7e:	683b      	ldr	r3, [r7, #0]
 8001c80:	687a      	ldr	r2, [r7, #4]
 8001c82:	4917      	ldr	r1, [pc, #92]	@ (8001ce0 <connectToWiFi+0xf4>)
 8001c84:	f004 fb70 	bl	8006368 <siprintf>
    sendATCommand(connectCmd);
 8001c88:	f107 030c 	add.w	r3, r7, #12
 8001c8c:	4618      	mov	r0, r3
 8001c8e:	f7ff ff35 	bl	8001afc <sendATCommand>
    receiveResponse_IT();
 8001c92:	f7ff ff49 	bl	8001b28 <receiveResponse_IT>
    HAL_Delay(15000);
 8001c96:	f643 2098 	movw	r0, #15000	@ 0x3a98
 8001c9a:	f000 f941 	bl	8001f20 <HAL_Delay>
    while (!rxComplete);
 8001c9e:	bf00      	nop
 8001ca0:	4b08      	ldr	r3, [pc, #32]	@ (8001cc4 <connectToWiFi+0xd8>)
 8001ca2:	781b      	ldrb	r3, [r3, #0]
 8001ca4:	b2db      	uxtb	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d0fa      	beq.n	8001ca0 <connectToWiFi+0xb4>
    printf("Respuesta CWJAP: %s\n", response);
 8001caa:	4907      	ldr	r1, [pc, #28]	@ (8001cc8 <connectToWiFi+0xdc>)
 8001cac:	480d      	ldr	r0, [pc, #52]	@ (8001ce4 <connectToWiFi+0xf8>)
 8001cae:	f004 fb49 	bl	8006344 <iprintf>
    rxComplete = 0;
 8001cb2:	4b04      	ldr	r3, [pc, #16]	@ (8001cc4 <connectToWiFi+0xd8>)
 8001cb4:	2200      	movs	r2, #0
 8001cb6:	701a      	strb	r2, [r3, #0]
}
 8001cb8:	bf00      	nop
 8001cba:	3770      	adds	r7, #112	@ 0x70
 8001cbc:	46bd      	mov	sp, r7
 8001cbe:	bd80      	pop	{r7, pc}
 8001cc0:	08008650 	.word	0x08008650
 8001cc4:	200003c9 	.word	0x200003c9
 8001cc8:	200002c8 	.word	0x200002c8
 8001ccc:	08008658 	.word	0x08008658
 8001cd0:	0800866c 	.word	0x0800866c
 8001cd4:	08008678 	.word	0x08008678
 8001cd8:	0800868c 	.word	0x0800868c
 8001cdc:	0800869c 	.word	0x0800869c
 8001ce0:	080086b4 	.word	0x080086b4
 8001ce4:	080086cc 	.word	0x080086cc

08001ce8 <sendDataToThingSpeak>:

void sendDataToThingSpeak(const char* apiKey, float temperature, float humidity, float luminosity) {
 8001ce8:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001cec:	b0f0      	sub	sp, #448	@ 0x1c0
 8001cee:	af06      	add	r7, sp, #24
 8001cf0:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001cf4:	f5a3 73ce 	sub.w	r3, r3, #412	@ 0x19c
 8001cf8:	6018      	str	r0, [r3, #0]
 8001cfa:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001cfe:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001d02:	ed83 0a00 	vstr	s0, [r3]
 8001d06:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001d0a:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001d0e:	edc3 0a00 	vstr	s1, [r3]
 8001d12:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001d16:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001d1a:	ed83 1a00 	vstr	s2, [r3]
    char cmd[100];
    sprintf(cmd, "AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 8001d1e:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001d22:	492e      	ldr	r1, [pc, #184]	@ (8001ddc <sendDataToThingSpeak+0xf4>)
 8001d24:	4618      	mov	r0, r3
 8001d26:	f004 fb1f 	bl	8006368 <siprintf>
    sendATCommand(cmd);
 8001d2a:	f507 73a2 	add.w	r3, r7, #324	@ 0x144
 8001d2e:	4618      	mov	r0, r3
 8001d30:	f7ff fee4 	bl	8001afc <sendATCommand>
    HAL_Delay(2000);
 8001d34:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001d38:	f000 f8f2 	bl	8001f20 <HAL_Delay>

    char http_request[250];
    sprintf(http_request, "GET /update?api_key=%s&field1=%.2f&field2=%.2f&field3=%.2f HTTP/1.1\r\nHost: api.thingspeak.com\r\nConnection: close\r\n\r\n", apiKey, temperature, humidity, luminosity);
 8001d3c:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001d40:	f5a3 73d0 	sub.w	r3, r3, #416	@ 0x1a0
 8001d44:	6818      	ldr	r0, [r3, #0]
 8001d46:	f7fe fc07 	bl	8000558 <__aeabi_f2d>
 8001d4a:	4604      	mov	r4, r0
 8001d4c:	460d      	mov	r5, r1
 8001d4e:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001d52:	f5a3 73d2 	sub.w	r3, r3, #420	@ 0x1a4
 8001d56:	6818      	ldr	r0, [r3, #0]
 8001d58:	f7fe fbfe 	bl	8000558 <__aeabi_f2d>
 8001d5c:	4680      	mov	r8, r0
 8001d5e:	4689      	mov	r9, r1
 8001d60:	f507 73d4 	add.w	r3, r7, #424	@ 0x1a8
 8001d64:	f5a3 73d4 	sub.w	r3, r3, #424	@ 0x1a8
 8001d68:	6818      	ldr	r0, [r3, #0]
 8001d6a:	f7fe fbf5 	bl	8000558 <__aeabi_f2d>
 8001d6e:	4602      	mov	r2, r0
 8001d70:	460b      	mov	r3, r1
 8001d72:	f507 71d4 	add.w	r1, r7, #424	@ 0x1a8
 8001d76:	f5a1 71ce 	sub.w	r1, r1, #412	@ 0x19c
 8001d7a:	f107 0048 	add.w	r0, r7, #72	@ 0x48
 8001d7e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001d82:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001d86:	e9cd 4500 	strd	r4, r5, [sp]
 8001d8a:	680a      	ldr	r2, [r1, #0]
 8001d8c:	4914      	ldr	r1, [pc, #80]	@ (8001de0 <sendDataToThingSpeak+0xf8>)
 8001d8e:	f004 faeb 	bl	8006368 <siprintf>

    char http_cmd[50];
    sprintf(http_cmd, "AT+CIPSEND=%d\r\n", strlen(http_request));
 8001d92:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001d96:	4618      	mov	r0, r3
 8001d98:	f7fe fa72 	bl	8000280 <strlen>
 8001d9c:	4602      	mov	r2, r0
 8001d9e:	f107 0314 	add.w	r3, r7, #20
 8001da2:	4910      	ldr	r1, [pc, #64]	@ (8001de4 <sendDataToThingSpeak+0xfc>)
 8001da4:	4618      	mov	r0, r3
 8001da6:	f004 fadf 	bl	8006368 <siprintf>
    sendATCommand(http_cmd);
 8001daa:	f107 0314 	add.w	r3, r7, #20
 8001dae:	4618      	mov	r0, r3
 8001db0:	f7ff fea4 	bl	8001afc <sendATCommand>
    HAL_Delay(1000);
 8001db4:	f44f 707a 	mov.w	r0, #1000	@ 0x3e8
 8001db8:	f000 f8b2 	bl	8001f20 <HAL_Delay>
    sendATCommand(http_request);
 8001dbc:	f107 0348 	add.w	r3, r7, #72	@ 0x48
 8001dc0:	4618      	mov	r0, r3
 8001dc2:	f7ff fe9b 	bl	8001afc <sendATCommand>
    HAL_Delay(2000);
 8001dc6:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8001dca:	f000 f8a9 	bl	8001f20 <HAL_Delay>
}
 8001dce:	bf00      	nop
 8001dd0:	f507 77d4 	add.w	r7, r7, #424	@ 0x1a8
 8001dd4:	46bd      	mov	sp, r7
 8001dd6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001dda:	bf00      	nop
 8001ddc:	080086e4 	.word	0x080086e4
 8001de0:	08008710 	.word	0x08008710
 8001de4:	08008788 	.word	0x08008788

08001de8 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8001de8:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8001e20 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8001dec:	f7ff fe22 	bl	8001a34 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8001df0:	480c      	ldr	r0, [pc, #48]	@ (8001e24 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8001df2:	490d      	ldr	r1, [pc, #52]	@ (8001e28 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8001df4:	4a0d      	ldr	r2, [pc, #52]	@ (8001e2c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8001df6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8001df8:	e002      	b.n	8001e00 <LoopCopyDataInit>

08001dfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8001dfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8001dfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8001dfe:	3304      	adds	r3, #4

08001e00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8001e00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8001e02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8001e04:	d3f9      	bcc.n	8001dfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8001e06:	4a0a      	ldr	r2, [pc, #40]	@ (8001e30 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8001e08:	4c0a      	ldr	r4, [pc, #40]	@ (8001e34 <LoopFillZerobss+0x22>)
  movs r3, #0
 8001e0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8001e0c:	e001      	b.n	8001e12 <LoopFillZerobss>

08001e0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8001e0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8001e10:	3204      	adds	r2, #4

08001e12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8001e12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8001e14:	d3fb      	bcc.n	8001e0e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8001e16:	f004 fb63 	bl	80064e0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8001e1a:	f7ff fa0f 	bl	800123c <main>
  bx  lr    
 8001e1e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8001e20:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8001e24:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8001e28:	200001d8 	.word	0x200001d8
  ldr r2, =_sidata
 8001e2c:	08008b30 	.word	0x08008b30
  ldr r2, =_sbss
 8001e30:	200001d8 	.word	0x200001d8
  ldr r4, =_ebss
 8001e34:	2000051c 	.word	0x2000051c

08001e38 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8001e38:	e7fe      	b.n	8001e38 <ADC_IRQHandler>
	...

08001e3c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8001e3c:	b580      	push	{r7, lr}
 8001e3e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8001e40:	4b0e      	ldr	r3, [pc, #56]	@ (8001e7c <HAL_Init+0x40>)
 8001e42:	681b      	ldr	r3, [r3, #0]
 8001e44:	4a0d      	ldr	r2, [pc, #52]	@ (8001e7c <HAL_Init+0x40>)
 8001e46:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8001e4a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8001e4c:	4b0b      	ldr	r3, [pc, #44]	@ (8001e7c <HAL_Init+0x40>)
 8001e4e:	681b      	ldr	r3, [r3, #0]
 8001e50:	4a0a      	ldr	r2, [pc, #40]	@ (8001e7c <HAL_Init+0x40>)
 8001e52:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8001e56:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8001e58:	4b08      	ldr	r3, [pc, #32]	@ (8001e7c <HAL_Init+0x40>)
 8001e5a:	681b      	ldr	r3, [r3, #0]
 8001e5c:	4a07      	ldr	r2, [pc, #28]	@ (8001e7c <HAL_Init+0x40>)
 8001e5e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001e62:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8001e64:	2003      	movs	r0, #3
 8001e66:	f000 f94f 	bl	8002108 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8001e6a:	2000      	movs	r0, #0
 8001e6c:	f000 f808 	bl	8001e80 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8001e70:	f7ff fc20 	bl	80016b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8001e74:	2300      	movs	r3, #0
}
 8001e76:	4618      	mov	r0, r3
 8001e78:	bd80      	pop	{r7, pc}
 8001e7a:	bf00      	nop
 8001e7c:	40023c00 	.word	0x40023c00

08001e80 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8001e80:	b580      	push	{r7, lr}
 8001e82:	b082      	sub	sp, #8
 8001e84:	af00      	add	r7, sp, #0
 8001e86:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8001e88:	4b12      	ldr	r3, [pc, #72]	@ (8001ed4 <HAL_InitTick+0x54>)
 8001e8a:	681a      	ldr	r2, [r3, #0]
 8001e8c:	4b12      	ldr	r3, [pc, #72]	@ (8001ed8 <HAL_InitTick+0x58>)
 8001e8e:	781b      	ldrb	r3, [r3, #0]
 8001e90:	4619      	mov	r1, r3
 8001e92:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8001e96:	fbb3 f3f1 	udiv	r3, r3, r1
 8001e9a:	fbb2 f3f3 	udiv	r3, r2, r3
 8001e9e:	4618      	mov	r0, r3
 8001ea0:	f000 f967 	bl	8002172 <HAL_SYSTICK_Config>
 8001ea4:	4603      	mov	r3, r0
 8001ea6:	2b00      	cmp	r3, #0
 8001ea8:	d001      	beq.n	8001eae <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8001eaa:	2301      	movs	r3, #1
 8001eac:	e00e      	b.n	8001ecc <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8001eae:	687b      	ldr	r3, [r7, #4]
 8001eb0:	2b0f      	cmp	r3, #15
 8001eb2:	d80a      	bhi.n	8001eca <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8001eb4:	2200      	movs	r2, #0
 8001eb6:	6879      	ldr	r1, [r7, #4]
 8001eb8:	f04f 30ff 	mov.w	r0, #4294967295
 8001ebc:	f000 f92f 	bl	800211e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8001ec0:	4a06      	ldr	r2, [pc, #24]	@ (8001edc <HAL_InitTick+0x5c>)
 8001ec2:	687b      	ldr	r3, [r7, #4]
 8001ec4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	e000      	b.n	8001ecc <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8001eca:	2301      	movs	r3, #1
}
 8001ecc:	4618      	mov	r0, r3
 8001ece:	3708      	adds	r7, #8
 8001ed0:	46bd      	mov	sp, r7
 8001ed2:	bd80      	pop	{r7, pc}
 8001ed4:	20000004 	.word	0x20000004
 8001ed8:	2000000c 	.word	0x2000000c
 8001edc:	20000008 	.word	0x20000008

08001ee0 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8001ee0:	b480      	push	{r7}
 8001ee2:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8001ee4:	4b06      	ldr	r3, [pc, #24]	@ (8001f00 <HAL_IncTick+0x20>)
 8001ee6:	781b      	ldrb	r3, [r3, #0]
 8001ee8:	461a      	mov	r2, r3
 8001eea:	4b06      	ldr	r3, [pc, #24]	@ (8001f04 <HAL_IncTick+0x24>)
 8001eec:	681b      	ldr	r3, [r3, #0]
 8001eee:	4413      	add	r3, r2
 8001ef0:	4a04      	ldr	r2, [pc, #16]	@ (8001f04 <HAL_IncTick+0x24>)
 8001ef2:	6013      	str	r3, [r2, #0]
}
 8001ef4:	bf00      	nop
 8001ef6:	46bd      	mov	sp, r7
 8001ef8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001efc:	4770      	bx	lr
 8001efe:	bf00      	nop
 8001f00:	2000000c 	.word	0x2000000c
 8001f04:	200003cc 	.word	0x200003cc

08001f08 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8001f08:	b480      	push	{r7}
 8001f0a:	af00      	add	r7, sp, #0
  return uwTick;
 8001f0c:	4b03      	ldr	r3, [pc, #12]	@ (8001f1c <HAL_GetTick+0x14>)
 8001f0e:	681b      	ldr	r3, [r3, #0]
}
 8001f10:	4618      	mov	r0, r3
 8001f12:	46bd      	mov	sp, r7
 8001f14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001f18:	4770      	bx	lr
 8001f1a:	bf00      	nop
 8001f1c:	200003cc 	.word	0x200003cc

08001f20 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8001f20:	b580      	push	{r7, lr}
 8001f22:	b084      	sub	sp, #16
 8001f24:	af00      	add	r7, sp, #0
 8001f26:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8001f28:	f7ff ffee 	bl	8001f08 <HAL_GetTick>
 8001f2c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8001f2e:	687b      	ldr	r3, [r7, #4]
 8001f30:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8001f32:	68fb      	ldr	r3, [r7, #12]
 8001f34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001f38:	d005      	beq.n	8001f46 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8001f3a:	4b0a      	ldr	r3, [pc, #40]	@ (8001f64 <HAL_Delay+0x44>)
 8001f3c:	781b      	ldrb	r3, [r3, #0]
 8001f3e:	461a      	mov	r2, r3
 8001f40:	68fb      	ldr	r3, [r7, #12]
 8001f42:	4413      	add	r3, r2
 8001f44:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8001f46:	bf00      	nop
 8001f48:	f7ff ffde 	bl	8001f08 <HAL_GetTick>
 8001f4c:	4602      	mov	r2, r0
 8001f4e:	68bb      	ldr	r3, [r7, #8]
 8001f50:	1ad3      	subs	r3, r2, r3
 8001f52:	68fa      	ldr	r2, [r7, #12]
 8001f54:	429a      	cmp	r2, r3
 8001f56:	d8f7      	bhi.n	8001f48 <HAL_Delay+0x28>
  {
  }
}
 8001f58:	bf00      	nop
 8001f5a:	bf00      	nop
 8001f5c:	3710      	adds	r7, #16
 8001f5e:	46bd      	mov	sp, r7
 8001f60:	bd80      	pop	{r7, pc}
 8001f62:	bf00      	nop
 8001f64:	2000000c 	.word	0x2000000c

08001f68 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8001f68:	b480      	push	{r7}
 8001f6a:	b085      	sub	sp, #20
 8001f6c:	af00      	add	r7, sp, #0
 8001f6e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	f003 0307 	and.w	r3, r3, #7
 8001f76:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8001f78:	4b0c      	ldr	r3, [pc, #48]	@ (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f7a:	68db      	ldr	r3, [r3, #12]
 8001f7c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8001f7e:	68ba      	ldr	r2, [r7, #8]
 8001f80:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8001f84:	4013      	ands	r3, r2
 8001f86:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8001f88:	68fb      	ldr	r3, [r7, #12]
 8001f8a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8001f8c:	68bb      	ldr	r3, [r7, #8]
 8001f8e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8001f90:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8001f94:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8001f98:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8001f9a:	4a04      	ldr	r2, [pc, #16]	@ (8001fac <__NVIC_SetPriorityGrouping+0x44>)
 8001f9c:	68bb      	ldr	r3, [r7, #8]
 8001f9e:	60d3      	str	r3, [r2, #12]
}
 8001fa0:	bf00      	nop
 8001fa2:	3714      	adds	r7, #20
 8001fa4:	46bd      	mov	sp, r7
 8001fa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001faa:	4770      	bx	lr
 8001fac:	e000ed00 	.word	0xe000ed00

08001fb0 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8001fb0:	b480      	push	{r7}
 8001fb2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8001fb4:	4b04      	ldr	r3, [pc, #16]	@ (8001fc8 <__NVIC_GetPriorityGrouping+0x18>)
 8001fb6:	68db      	ldr	r3, [r3, #12]
 8001fb8:	0a1b      	lsrs	r3, r3, #8
 8001fba:	f003 0307 	and.w	r3, r3, #7
}
 8001fbe:	4618      	mov	r0, r3
 8001fc0:	46bd      	mov	sp, r7
 8001fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001fc6:	4770      	bx	lr
 8001fc8:	e000ed00 	.word	0xe000ed00

08001fcc <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8001fcc:	b480      	push	{r7}
 8001fce:	b083      	sub	sp, #12
 8001fd0:	af00      	add	r7, sp, #0
 8001fd2:	4603      	mov	r3, r0
 8001fd4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8001fd6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fda:	2b00      	cmp	r3, #0
 8001fdc:	db0b      	blt.n	8001ff6 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8001fde:	79fb      	ldrb	r3, [r7, #7]
 8001fe0:	f003 021f 	and.w	r2, r3, #31
 8001fe4:	4907      	ldr	r1, [pc, #28]	@ (8002004 <__NVIC_EnableIRQ+0x38>)
 8001fe6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8001fea:	095b      	lsrs	r3, r3, #5
 8001fec:	2001      	movs	r0, #1
 8001fee:	fa00 f202 	lsl.w	r2, r0, r2
 8001ff2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8001ff6:	bf00      	nop
 8001ff8:	370c      	adds	r7, #12
 8001ffa:	46bd      	mov	sp, r7
 8001ffc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002000:	4770      	bx	lr
 8002002:	bf00      	nop
 8002004:	e000e100 	.word	0xe000e100

08002008 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002008:	b480      	push	{r7}
 800200a:	b083      	sub	sp, #12
 800200c:	af00      	add	r7, sp, #0
 800200e:	4603      	mov	r3, r0
 8002010:	6039      	str	r1, [r7, #0]
 8002012:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002014:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002018:	2b00      	cmp	r3, #0
 800201a:	db0a      	blt.n	8002032 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800201c:	683b      	ldr	r3, [r7, #0]
 800201e:	b2da      	uxtb	r2, r3
 8002020:	490c      	ldr	r1, [pc, #48]	@ (8002054 <__NVIC_SetPriority+0x4c>)
 8002022:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002026:	0112      	lsls	r2, r2, #4
 8002028:	b2d2      	uxtb	r2, r2
 800202a:	440b      	add	r3, r1
 800202c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002030:	e00a      	b.n	8002048 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002032:	683b      	ldr	r3, [r7, #0]
 8002034:	b2da      	uxtb	r2, r3
 8002036:	4908      	ldr	r1, [pc, #32]	@ (8002058 <__NVIC_SetPriority+0x50>)
 8002038:	79fb      	ldrb	r3, [r7, #7]
 800203a:	f003 030f 	and.w	r3, r3, #15
 800203e:	3b04      	subs	r3, #4
 8002040:	0112      	lsls	r2, r2, #4
 8002042:	b2d2      	uxtb	r2, r2
 8002044:	440b      	add	r3, r1
 8002046:	761a      	strb	r2, [r3, #24]
}
 8002048:	bf00      	nop
 800204a:	370c      	adds	r7, #12
 800204c:	46bd      	mov	sp, r7
 800204e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002052:	4770      	bx	lr
 8002054:	e000e100 	.word	0xe000e100
 8002058:	e000ed00 	.word	0xe000ed00

0800205c <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 800205c:	b480      	push	{r7}
 800205e:	b089      	sub	sp, #36	@ 0x24
 8002060:	af00      	add	r7, sp, #0
 8002062:	60f8      	str	r0, [r7, #12]
 8002064:	60b9      	str	r1, [r7, #8]
 8002066:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002068:	68fb      	ldr	r3, [r7, #12]
 800206a:	f003 0307 	and.w	r3, r3, #7
 800206e:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002070:	69fb      	ldr	r3, [r7, #28]
 8002072:	f1c3 0307 	rsb	r3, r3, #7
 8002076:	2b04      	cmp	r3, #4
 8002078:	bf28      	it	cs
 800207a:	2304      	movcs	r3, #4
 800207c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800207e:	69fb      	ldr	r3, [r7, #28]
 8002080:	3304      	adds	r3, #4
 8002082:	2b06      	cmp	r3, #6
 8002084:	d902      	bls.n	800208c <NVIC_EncodePriority+0x30>
 8002086:	69fb      	ldr	r3, [r7, #28]
 8002088:	3b03      	subs	r3, #3
 800208a:	e000      	b.n	800208e <NVIC_EncodePriority+0x32>
 800208c:	2300      	movs	r3, #0
 800208e:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002090:	f04f 32ff 	mov.w	r2, #4294967295
 8002094:	69bb      	ldr	r3, [r7, #24]
 8002096:	fa02 f303 	lsl.w	r3, r2, r3
 800209a:	43da      	mvns	r2, r3
 800209c:	68bb      	ldr	r3, [r7, #8]
 800209e:	401a      	ands	r2, r3
 80020a0:	697b      	ldr	r3, [r7, #20]
 80020a2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80020a4:	f04f 31ff 	mov.w	r1, #4294967295
 80020a8:	697b      	ldr	r3, [r7, #20]
 80020aa:	fa01 f303 	lsl.w	r3, r1, r3
 80020ae:	43d9      	mvns	r1, r3
 80020b0:	687b      	ldr	r3, [r7, #4]
 80020b2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80020b4:	4313      	orrs	r3, r2
         );
}
 80020b6:	4618      	mov	r0, r3
 80020b8:	3724      	adds	r7, #36	@ 0x24
 80020ba:	46bd      	mov	sp, r7
 80020bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80020c0:	4770      	bx	lr
	...

080020c4 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 80020c4:	b580      	push	{r7, lr}
 80020c6:	b082      	sub	sp, #8
 80020c8:	af00      	add	r7, sp, #0
 80020ca:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80020cc:	687b      	ldr	r3, [r7, #4]
 80020ce:	3b01      	subs	r3, #1
 80020d0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80020d4:	d301      	bcc.n	80020da <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 80020d6:	2301      	movs	r3, #1
 80020d8:	e00f      	b.n	80020fa <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80020da:	4a0a      	ldr	r2, [pc, #40]	@ (8002104 <SysTick_Config+0x40>)
 80020dc:	687b      	ldr	r3, [r7, #4]
 80020de:	3b01      	subs	r3, #1
 80020e0:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 80020e2:	210f      	movs	r1, #15
 80020e4:	f04f 30ff 	mov.w	r0, #4294967295
 80020e8:	f7ff ff8e 	bl	8002008 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 80020ec:	4b05      	ldr	r3, [pc, #20]	@ (8002104 <SysTick_Config+0x40>)
 80020ee:	2200      	movs	r2, #0
 80020f0:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 80020f2:	4b04      	ldr	r3, [pc, #16]	@ (8002104 <SysTick_Config+0x40>)
 80020f4:	2207      	movs	r2, #7
 80020f6:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 80020f8:	2300      	movs	r3, #0
}
 80020fa:	4618      	mov	r0, r3
 80020fc:	3708      	adds	r7, #8
 80020fe:	46bd      	mov	sp, r7
 8002100:	bd80      	pop	{r7, pc}
 8002102:	bf00      	nop
 8002104:	e000e010 	.word	0xe000e010

08002108 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002108:	b580      	push	{r7, lr}
 800210a:	b082      	sub	sp, #8
 800210c:	af00      	add	r7, sp, #0
 800210e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002110:	6878      	ldr	r0, [r7, #4]
 8002112:	f7ff ff29 	bl	8001f68 <__NVIC_SetPriorityGrouping>
}
 8002116:	bf00      	nop
 8002118:	3708      	adds	r7, #8
 800211a:	46bd      	mov	sp, r7
 800211c:	bd80      	pop	{r7, pc}

0800211e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800211e:	b580      	push	{r7, lr}
 8002120:	b086      	sub	sp, #24
 8002122:	af00      	add	r7, sp, #0
 8002124:	4603      	mov	r3, r0
 8002126:	60b9      	str	r1, [r7, #8]
 8002128:	607a      	str	r2, [r7, #4]
 800212a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800212c:	2300      	movs	r3, #0
 800212e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002130:	f7ff ff3e 	bl	8001fb0 <__NVIC_GetPriorityGrouping>
 8002134:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002136:	687a      	ldr	r2, [r7, #4]
 8002138:	68b9      	ldr	r1, [r7, #8]
 800213a:	6978      	ldr	r0, [r7, #20]
 800213c:	f7ff ff8e 	bl	800205c <NVIC_EncodePriority>
 8002140:	4602      	mov	r2, r0
 8002142:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002146:	4611      	mov	r1, r2
 8002148:	4618      	mov	r0, r3
 800214a:	f7ff ff5d 	bl	8002008 <__NVIC_SetPriority>
}
 800214e:	bf00      	nop
 8002150:	3718      	adds	r7, #24
 8002152:	46bd      	mov	sp, r7
 8002154:	bd80      	pop	{r7, pc}

08002156 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002156:	b580      	push	{r7, lr}
 8002158:	b082      	sub	sp, #8
 800215a:	af00      	add	r7, sp, #0
 800215c:	4603      	mov	r3, r0
 800215e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002160:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002164:	4618      	mov	r0, r3
 8002166:	f7ff ff31 	bl	8001fcc <__NVIC_EnableIRQ>
}
 800216a:	bf00      	nop
 800216c:	3708      	adds	r7, #8
 800216e:	46bd      	mov	sp, r7
 8002170:	bd80      	pop	{r7, pc}

08002172 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002172:	b580      	push	{r7, lr}
 8002174:	b082      	sub	sp, #8
 8002176:	af00      	add	r7, sp, #0
 8002178:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800217a:	6878      	ldr	r0, [r7, #4]
 800217c:	f7ff ffa2 	bl	80020c4 <SysTick_Config>
 8002180:	4603      	mov	r3, r0
}
 8002182:	4618      	mov	r0, r3
 8002184:	3708      	adds	r7, #8
 8002186:	46bd      	mov	sp, r7
 8002188:	bd80      	pop	{r7, pc}

0800218a <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800218a:	b580      	push	{r7, lr}
 800218c:	b084      	sub	sp, #16
 800218e:	af00      	add	r7, sp, #0
 8002190:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002192:	687b      	ldr	r3, [r7, #4]
 8002194:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002196:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002198:	f7ff feb6 	bl	8001f08 <HAL_GetTick>
 800219c:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800219e:	687b      	ldr	r3, [r7, #4]
 80021a0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80021a4:	b2db      	uxtb	r3, r3
 80021a6:	2b02      	cmp	r3, #2
 80021a8:	d008      	beq.n	80021bc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80021aa:	687b      	ldr	r3, [r7, #4]
 80021ac:	2280      	movs	r2, #128	@ 0x80
 80021ae:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80021b0:	687b      	ldr	r3, [r7, #4]
 80021b2:	2200      	movs	r2, #0
 80021b4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80021b8:	2301      	movs	r3, #1
 80021ba:	e052      	b.n	8002262 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80021bc:	687b      	ldr	r3, [r7, #4]
 80021be:	681b      	ldr	r3, [r3, #0]
 80021c0:	681a      	ldr	r2, [r3, #0]
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	f022 0216 	bic.w	r2, r2, #22
 80021ca:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80021cc:	687b      	ldr	r3, [r7, #4]
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	695a      	ldr	r2, [r3, #20]
 80021d2:	687b      	ldr	r3, [r7, #4]
 80021d4:	681b      	ldr	r3, [r3, #0]
 80021d6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80021da:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021e0:	2b00      	cmp	r3, #0
 80021e2:	d103      	bne.n	80021ec <HAL_DMA_Abort+0x62>
 80021e4:	687b      	ldr	r3, [r7, #4]
 80021e6:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80021e8:	2b00      	cmp	r3, #0
 80021ea:	d007      	beq.n	80021fc <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80021ec:	687b      	ldr	r3, [r7, #4]
 80021ee:	681b      	ldr	r3, [r3, #0]
 80021f0:	681a      	ldr	r2, [r3, #0]
 80021f2:	687b      	ldr	r3, [r7, #4]
 80021f4:	681b      	ldr	r3, [r3, #0]
 80021f6:	f022 0208 	bic.w	r2, r2, #8
 80021fa:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80021fc:	687b      	ldr	r3, [r7, #4]
 80021fe:	681b      	ldr	r3, [r3, #0]
 8002200:	681a      	ldr	r2, [r3, #0]
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	681b      	ldr	r3, [r3, #0]
 8002206:	f022 0201 	bic.w	r2, r2, #1
 800220a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800220c:	e013      	b.n	8002236 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800220e:	f7ff fe7b 	bl	8001f08 <HAL_GetTick>
 8002212:	4602      	mov	r2, r0
 8002214:	68bb      	ldr	r3, [r7, #8]
 8002216:	1ad3      	subs	r3, r2, r3
 8002218:	2b05      	cmp	r3, #5
 800221a:	d90c      	bls.n	8002236 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	2220      	movs	r2, #32
 8002220:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	2203      	movs	r2, #3
 8002226:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800222a:	687b      	ldr	r3, [r7, #4]
 800222c:	2200      	movs	r2, #0
 800222e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002232:	2303      	movs	r3, #3
 8002234:	e015      	b.n	8002262 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002236:	687b      	ldr	r3, [r7, #4]
 8002238:	681b      	ldr	r3, [r3, #0]
 800223a:	681b      	ldr	r3, [r3, #0]
 800223c:	f003 0301 	and.w	r3, r3, #1
 8002240:	2b00      	cmp	r3, #0
 8002242:	d1e4      	bne.n	800220e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002244:	687b      	ldr	r3, [r7, #4]
 8002246:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002248:	223f      	movs	r2, #63	@ 0x3f
 800224a:	409a      	lsls	r2, r3
 800224c:	68fb      	ldr	r3, [r7, #12]
 800224e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	2201      	movs	r2, #1
 8002254:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002258:	687b      	ldr	r3, [r7, #4]
 800225a:	2200      	movs	r2, #0
 800225c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002260:	2300      	movs	r3, #0
}
 8002262:	4618      	mov	r0, r3
 8002264:	3710      	adds	r7, #16
 8002266:	46bd      	mov	sp, r7
 8002268:	bd80      	pop	{r7, pc}

0800226a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800226a:	b480      	push	{r7}
 800226c:	b083      	sub	sp, #12
 800226e:	af00      	add	r7, sp, #0
 8002270:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002272:	687b      	ldr	r3, [r7, #4]
 8002274:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002278:	b2db      	uxtb	r3, r3
 800227a:	2b02      	cmp	r3, #2
 800227c:	d004      	beq.n	8002288 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800227e:	687b      	ldr	r3, [r7, #4]
 8002280:	2280      	movs	r2, #128	@ 0x80
 8002282:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002284:	2301      	movs	r3, #1
 8002286:	e00c      	b.n	80022a2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002288:	687b      	ldr	r3, [r7, #4]
 800228a:	2205      	movs	r2, #5
 800228c:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002290:	687b      	ldr	r3, [r7, #4]
 8002292:	681b      	ldr	r3, [r3, #0]
 8002294:	681a      	ldr	r2, [r3, #0]
 8002296:	687b      	ldr	r3, [r7, #4]
 8002298:	681b      	ldr	r3, [r3, #0]
 800229a:	f022 0201 	bic.w	r2, r2, #1
 800229e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80022a0:	2300      	movs	r3, #0
}
 80022a2:	4618      	mov	r0, r3
 80022a4:	370c      	adds	r7, #12
 80022a6:	46bd      	mov	sp, r7
 80022a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80022ac:	4770      	bx	lr
	...

080022b0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80022b0:	b480      	push	{r7}
 80022b2:	b089      	sub	sp, #36	@ 0x24
 80022b4:	af00      	add	r7, sp, #0
 80022b6:	6078      	str	r0, [r7, #4]
 80022b8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80022ba:	2300      	movs	r3, #0
 80022bc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80022be:	2300      	movs	r3, #0
 80022c0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80022c2:	2300      	movs	r3, #0
 80022c4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80022c6:	2300      	movs	r3, #0
 80022c8:	61fb      	str	r3, [r7, #28]
 80022ca:	e159      	b.n	8002580 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80022cc:	2201      	movs	r2, #1
 80022ce:	69fb      	ldr	r3, [r7, #28]
 80022d0:	fa02 f303 	lsl.w	r3, r2, r3
 80022d4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80022d6:	683b      	ldr	r3, [r7, #0]
 80022d8:	681b      	ldr	r3, [r3, #0]
 80022da:	697a      	ldr	r2, [r7, #20]
 80022dc:	4013      	ands	r3, r2
 80022de:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80022e0:	693a      	ldr	r2, [r7, #16]
 80022e2:	697b      	ldr	r3, [r7, #20]
 80022e4:	429a      	cmp	r2, r3
 80022e6:	f040 8148 	bne.w	800257a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022ea:	683b      	ldr	r3, [r7, #0]
 80022ec:	685b      	ldr	r3, [r3, #4]
 80022ee:	f003 0303 	and.w	r3, r3, #3
 80022f2:	2b01      	cmp	r3, #1
 80022f4:	d005      	beq.n	8002302 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80022f6:	683b      	ldr	r3, [r7, #0]
 80022f8:	685b      	ldr	r3, [r3, #4]
 80022fa:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80022fe:	2b02      	cmp	r3, #2
 8002300:	d130      	bne.n	8002364 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	689b      	ldr	r3, [r3, #8]
 8002306:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002308:	69fb      	ldr	r3, [r7, #28]
 800230a:	005b      	lsls	r3, r3, #1
 800230c:	2203      	movs	r2, #3
 800230e:	fa02 f303 	lsl.w	r3, r2, r3
 8002312:	43db      	mvns	r3, r3
 8002314:	69ba      	ldr	r2, [r7, #24]
 8002316:	4013      	ands	r3, r2
 8002318:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800231a:	683b      	ldr	r3, [r7, #0]
 800231c:	68da      	ldr	r2, [r3, #12]
 800231e:	69fb      	ldr	r3, [r7, #28]
 8002320:	005b      	lsls	r3, r3, #1
 8002322:	fa02 f303 	lsl.w	r3, r2, r3
 8002326:	69ba      	ldr	r2, [r7, #24]
 8002328:	4313      	orrs	r3, r2
 800232a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800232c:	687b      	ldr	r3, [r7, #4]
 800232e:	69ba      	ldr	r2, [r7, #24]
 8002330:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002332:	687b      	ldr	r3, [r7, #4]
 8002334:	685b      	ldr	r3, [r3, #4]
 8002336:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002338:	2201      	movs	r2, #1
 800233a:	69fb      	ldr	r3, [r7, #28]
 800233c:	fa02 f303 	lsl.w	r3, r2, r3
 8002340:	43db      	mvns	r3, r3
 8002342:	69ba      	ldr	r2, [r7, #24]
 8002344:	4013      	ands	r3, r2
 8002346:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002348:	683b      	ldr	r3, [r7, #0]
 800234a:	685b      	ldr	r3, [r3, #4]
 800234c:	091b      	lsrs	r3, r3, #4
 800234e:	f003 0201 	and.w	r2, r3, #1
 8002352:	69fb      	ldr	r3, [r7, #28]
 8002354:	fa02 f303 	lsl.w	r3, r2, r3
 8002358:	69ba      	ldr	r2, [r7, #24]
 800235a:	4313      	orrs	r3, r2
 800235c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800235e:	687b      	ldr	r3, [r7, #4]
 8002360:	69ba      	ldr	r2, [r7, #24]
 8002362:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002364:	683b      	ldr	r3, [r7, #0]
 8002366:	685b      	ldr	r3, [r3, #4]
 8002368:	f003 0303 	and.w	r3, r3, #3
 800236c:	2b03      	cmp	r3, #3
 800236e:	d017      	beq.n	80023a0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	68db      	ldr	r3, [r3, #12]
 8002374:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002376:	69fb      	ldr	r3, [r7, #28]
 8002378:	005b      	lsls	r3, r3, #1
 800237a:	2203      	movs	r2, #3
 800237c:	fa02 f303 	lsl.w	r3, r2, r3
 8002380:	43db      	mvns	r3, r3
 8002382:	69ba      	ldr	r2, [r7, #24]
 8002384:	4013      	ands	r3, r2
 8002386:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002388:	683b      	ldr	r3, [r7, #0]
 800238a:	689a      	ldr	r2, [r3, #8]
 800238c:	69fb      	ldr	r3, [r7, #28]
 800238e:	005b      	lsls	r3, r3, #1
 8002390:	fa02 f303 	lsl.w	r3, r2, r3
 8002394:	69ba      	ldr	r2, [r7, #24]
 8002396:	4313      	orrs	r3, r2
 8002398:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800239a:	687b      	ldr	r3, [r7, #4]
 800239c:	69ba      	ldr	r2, [r7, #24]
 800239e:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80023a0:	683b      	ldr	r3, [r7, #0]
 80023a2:	685b      	ldr	r3, [r3, #4]
 80023a4:	f003 0303 	and.w	r3, r3, #3
 80023a8:	2b02      	cmp	r3, #2
 80023aa:	d123      	bne.n	80023f4 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80023ac:	69fb      	ldr	r3, [r7, #28]
 80023ae:	08da      	lsrs	r2, r3, #3
 80023b0:	687b      	ldr	r3, [r7, #4]
 80023b2:	3208      	adds	r2, #8
 80023b4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80023b8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80023ba:	69fb      	ldr	r3, [r7, #28]
 80023bc:	f003 0307 	and.w	r3, r3, #7
 80023c0:	009b      	lsls	r3, r3, #2
 80023c2:	220f      	movs	r2, #15
 80023c4:	fa02 f303 	lsl.w	r3, r2, r3
 80023c8:	43db      	mvns	r3, r3
 80023ca:	69ba      	ldr	r2, [r7, #24]
 80023cc:	4013      	ands	r3, r2
 80023ce:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80023d0:	683b      	ldr	r3, [r7, #0]
 80023d2:	691a      	ldr	r2, [r3, #16]
 80023d4:	69fb      	ldr	r3, [r7, #28]
 80023d6:	f003 0307 	and.w	r3, r3, #7
 80023da:	009b      	lsls	r3, r3, #2
 80023dc:	fa02 f303 	lsl.w	r3, r2, r3
 80023e0:	69ba      	ldr	r2, [r7, #24]
 80023e2:	4313      	orrs	r3, r2
 80023e4:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80023e6:	69fb      	ldr	r3, [r7, #28]
 80023e8:	08da      	lsrs	r2, r3, #3
 80023ea:	687b      	ldr	r3, [r7, #4]
 80023ec:	3208      	adds	r2, #8
 80023ee:	69b9      	ldr	r1, [r7, #24]
 80023f0:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80023f4:	687b      	ldr	r3, [r7, #4]
 80023f6:	681b      	ldr	r3, [r3, #0]
 80023f8:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80023fa:	69fb      	ldr	r3, [r7, #28]
 80023fc:	005b      	lsls	r3, r3, #1
 80023fe:	2203      	movs	r2, #3
 8002400:	fa02 f303 	lsl.w	r3, r2, r3
 8002404:	43db      	mvns	r3, r3
 8002406:	69ba      	ldr	r2, [r7, #24]
 8002408:	4013      	ands	r3, r2
 800240a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	685b      	ldr	r3, [r3, #4]
 8002410:	f003 0203 	and.w	r2, r3, #3
 8002414:	69fb      	ldr	r3, [r7, #28]
 8002416:	005b      	lsls	r3, r3, #1
 8002418:	fa02 f303 	lsl.w	r3, r2, r3
 800241c:	69ba      	ldr	r2, [r7, #24]
 800241e:	4313      	orrs	r3, r2
 8002420:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002422:	687b      	ldr	r3, [r7, #4]
 8002424:	69ba      	ldr	r2, [r7, #24]
 8002426:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002428:	683b      	ldr	r3, [r7, #0]
 800242a:	685b      	ldr	r3, [r3, #4]
 800242c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002430:	2b00      	cmp	r3, #0
 8002432:	f000 80a2 	beq.w	800257a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002436:	2300      	movs	r3, #0
 8002438:	60fb      	str	r3, [r7, #12]
 800243a:	4b57      	ldr	r3, [pc, #348]	@ (8002598 <HAL_GPIO_Init+0x2e8>)
 800243c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800243e:	4a56      	ldr	r2, [pc, #344]	@ (8002598 <HAL_GPIO_Init+0x2e8>)
 8002440:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002444:	6453      	str	r3, [r2, #68]	@ 0x44
 8002446:	4b54      	ldr	r3, [pc, #336]	@ (8002598 <HAL_GPIO_Init+0x2e8>)
 8002448:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800244a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800244e:	60fb      	str	r3, [r7, #12]
 8002450:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002452:	4a52      	ldr	r2, [pc, #328]	@ (800259c <HAL_GPIO_Init+0x2ec>)
 8002454:	69fb      	ldr	r3, [r7, #28]
 8002456:	089b      	lsrs	r3, r3, #2
 8002458:	3302      	adds	r3, #2
 800245a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800245e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002460:	69fb      	ldr	r3, [r7, #28]
 8002462:	f003 0303 	and.w	r3, r3, #3
 8002466:	009b      	lsls	r3, r3, #2
 8002468:	220f      	movs	r2, #15
 800246a:	fa02 f303 	lsl.w	r3, r2, r3
 800246e:	43db      	mvns	r3, r3
 8002470:	69ba      	ldr	r2, [r7, #24]
 8002472:	4013      	ands	r3, r2
 8002474:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002476:	687b      	ldr	r3, [r7, #4]
 8002478:	4a49      	ldr	r2, [pc, #292]	@ (80025a0 <HAL_GPIO_Init+0x2f0>)
 800247a:	4293      	cmp	r3, r2
 800247c:	d019      	beq.n	80024b2 <HAL_GPIO_Init+0x202>
 800247e:	687b      	ldr	r3, [r7, #4]
 8002480:	4a48      	ldr	r2, [pc, #288]	@ (80025a4 <HAL_GPIO_Init+0x2f4>)
 8002482:	4293      	cmp	r3, r2
 8002484:	d013      	beq.n	80024ae <HAL_GPIO_Init+0x1fe>
 8002486:	687b      	ldr	r3, [r7, #4]
 8002488:	4a47      	ldr	r2, [pc, #284]	@ (80025a8 <HAL_GPIO_Init+0x2f8>)
 800248a:	4293      	cmp	r3, r2
 800248c:	d00d      	beq.n	80024aa <HAL_GPIO_Init+0x1fa>
 800248e:	687b      	ldr	r3, [r7, #4]
 8002490:	4a46      	ldr	r2, [pc, #280]	@ (80025ac <HAL_GPIO_Init+0x2fc>)
 8002492:	4293      	cmp	r3, r2
 8002494:	d007      	beq.n	80024a6 <HAL_GPIO_Init+0x1f6>
 8002496:	687b      	ldr	r3, [r7, #4]
 8002498:	4a45      	ldr	r2, [pc, #276]	@ (80025b0 <HAL_GPIO_Init+0x300>)
 800249a:	4293      	cmp	r3, r2
 800249c:	d101      	bne.n	80024a2 <HAL_GPIO_Init+0x1f2>
 800249e:	2304      	movs	r3, #4
 80024a0:	e008      	b.n	80024b4 <HAL_GPIO_Init+0x204>
 80024a2:	2307      	movs	r3, #7
 80024a4:	e006      	b.n	80024b4 <HAL_GPIO_Init+0x204>
 80024a6:	2303      	movs	r3, #3
 80024a8:	e004      	b.n	80024b4 <HAL_GPIO_Init+0x204>
 80024aa:	2302      	movs	r3, #2
 80024ac:	e002      	b.n	80024b4 <HAL_GPIO_Init+0x204>
 80024ae:	2301      	movs	r3, #1
 80024b0:	e000      	b.n	80024b4 <HAL_GPIO_Init+0x204>
 80024b2:	2300      	movs	r3, #0
 80024b4:	69fa      	ldr	r2, [r7, #28]
 80024b6:	f002 0203 	and.w	r2, r2, #3
 80024ba:	0092      	lsls	r2, r2, #2
 80024bc:	4093      	lsls	r3, r2
 80024be:	69ba      	ldr	r2, [r7, #24]
 80024c0:	4313      	orrs	r3, r2
 80024c2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80024c4:	4935      	ldr	r1, [pc, #212]	@ (800259c <HAL_GPIO_Init+0x2ec>)
 80024c6:	69fb      	ldr	r3, [r7, #28]
 80024c8:	089b      	lsrs	r3, r3, #2
 80024ca:	3302      	adds	r3, #2
 80024cc:	69ba      	ldr	r2, [r7, #24]
 80024ce:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80024d2:	4b38      	ldr	r3, [pc, #224]	@ (80025b4 <HAL_GPIO_Init+0x304>)
 80024d4:	689b      	ldr	r3, [r3, #8]
 80024d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80024d8:	693b      	ldr	r3, [r7, #16]
 80024da:	43db      	mvns	r3, r3
 80024dc:	69ba      	ldr	r2, [r7, #24]
 80024de:	4013      	ands	r3, r2
 80024e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 80024e2:	683b      	ldr	r3, [r7, #0]
 80024e4:	685b      	ldr	r3, [r3, #4]
 80024e6:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 80024ea:	2b00      	cmp	r3, #0
 80024ec:	d003      	beq.n	80024f6 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80024ee:	69ba      	ldr	r2, [r7, #24]
 80024f0:	693b      	ldr	r3, [r7, #16]
 80024f2:	4313      	orrs	r3, r2
 80024f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80024f6:	4a2f      	ldr	r2, [pc, #188]	@ (80025b4 <HAL_GPIO_Init+0x304>)
 80024f8:	69bb      	ldr	r3, [r7, #24]
 80024fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80024fc:	4b2d      	ldr	r3, [pc, #180]	@ (80025b4 <HAL_GPIO_Init+0x304>)
 80024fe:	68db      	ldr	r3, [r3, #12]
 8002500:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002502:	693b      	ldr	r3, [r7, #16]
 8002504:	43db      	mvns	r3, r3
 8002506:	69ba      	ldr	r2, [r7, #24]
 8002508:	4013      	ands	r3, r2
 800250a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800250c:	683b      	ldr	r3, [r7, #0]
 800250e:	685b      	ldr	r3, [r3, #4]
 8002510:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002514:	2b00      	cmp	r3, #0
 8002516:	d003      	beq.n	8002520 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002518:	69ba      	ldr	r2, [r7, #24]
 800251a:	693b      	ldr	r3, [r7, #16]
 800251c:	4313      	orrs	r3, r2
 800251e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002520:	4a24      	ldr	r2, [pc, #144]	@ (80025b4 <HAL_GPIO_Init+0x304>)
 8002522:	69bb      	ldr	r3, [r7, #24]
 8002524:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002526:	4b23      	ldr	r3, [pc, #140]	@ (80025b4 <HAL_GPIO_Init+0x304>)
 8002528:	685b      	ldr	r3, [r3, #4]
 800252a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800252c:	693b      	ldr	r3, [r7, #16]
 800252e:	43db      	mvns	r3, r3
 8002530:	69ba      	ldr	r2, [r7, #24]
 8002532:	4013      	ands	r3, r2
 8002534:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002536:	683b      	ldr	r3, [r7, #0]
 8002538:	685b      	ldr	r3, [r3, #4]
 800253a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800253e:	2b00      	cmp	r3, #0
 8002540:	d003      	beq.n	800254a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002542:	69ba      	ldr	r2, [r7, #24]
 8002544:	693b      	ldr	r3, [r7, #16]
 8002546:	4313      	orrs	r3, r2
 8002548:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800254a:	4a1a      	ldr	r2, [pc, #104]	@ (80025b4 <HAL_GPIO_Init+0x304>)
 800254c:	69bb      	ldr	r3, [r7, #24]
 800254e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002550:	4b18      	ldr	r3, [pc, #96]	@ (80025b4 <HAL_GPIO_Init+0x304>)
 8002552:	681b      	ldr	r3, [r3, #0]
 8002554:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002556:	693b      	ldr	r3, [r7, #16]
 8002558:	43db      	mvns	r3, r3
 800255a:	69ba      	ldr	r2, [r7, #24]
 800255c:	4013      	ands	r3, r2
 800255e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002560:	683b      	ldr	r3, [r7, #0]
 8002562:	685b      	ldr	r3, [r3, #4]
 8002564:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002568:	2b00      	cmp	r3, #0
 800256a:	d003      	beq.n	8002574 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800256c:	69ba      	ldr	r2, [r7, #24]
 800256e:	693b      	ldr	r3, [r7, #16]
 8002570:	4313      	orrs	r3, r2
 8002572:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002574:	4a0f      	ldr	r2, [pc, #60]	@ (80025b4 <HAL_GPIO_Init+0x304>)
 8002576:	69bb      	ldr	r3, [r7, #24]
 8002578:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800257a:	69fb      	ldr	r3, [r7, #28]
 800257c:	3301      	adds	r3, #1
 800257e:	61fb      	str	r3, [r7, #28]
 8002580:	69fb      	ldr	r3, [r7, #28]
 8002582:	2b0f      	cmp	r3, #15
 8002584:	f67f aea2 	bls.w	80022cc <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002588:	bf00      	nop
 800258a:	bf00      	nop
 800258c:	3724      	adds	r7, #36	@ 0x24
 800258e:	46bd      	mov	sp, r7
 8002590:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002594:	4770      	bx	lr
 8002596:	bf00      	nop
 8002598:	40023800 	.word	0x40023800
 800259c:	40013800 	.word	0x40013800
 80025a0:	40020000 	.word	0x40020000
 80025a4:	40020400 	.word	0x40020400
 80025a8:	40020800 	.word	0x40020800
 80025ac:	40020c00 	.word	0x40020c00
 80025b0:	40021000 	.word	0x40021000
 80025b4:	40013c00 	.word	0x40013c00

080025b8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80025b8:	b480      	push	{r7}
 80025ba:	b083      	sub	sp, #12
 80025bc:	af00      	add	r7, sp, #0
 80025be:	6078      	str	r0, [r7, #4]
 80025c0:	460b      	mov	r3, r1
 80025c2:	807b      	strh	r3, [r7, #2]
 80025c4:	4613      	mov	r3, r2
 80025c6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80025c8:	787b      	ldrb	r3, [r7, #1]
 80025ca:	2b00      	cmp	r3, #0
 80025cc:	d003      	beq.n	80025d6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80025ce:	887a      	ldrh	r2, [r7, #2]
 80025d0:	687b      	ldr	r3, [r7, #4]
 80025d2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80025d4:	e003      	b.n	80025de <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80025d6:	887b      	ldrh	r3, [r7, #2]
 80025d8:	041a      	lsls	r2, r3, #16
 80025da:	687b      	ldr	r3, [r7, #4]
 80025dc:	619a      	str	r2, [r3, #24]
}
 80025de:	bf00      	nop
 80025e0:	370c      	adds	r7, #12
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
	...

080025ec <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80025ec:	b580      	push	{r7, lr}
 80025ee:	b084      	sub	sp, #16
 80025f0:	af00      	add	r7, sp, #0
 80025f2:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80025f4:	687b      	ldr	r3, [r7, #4]
 80025f6:	2b00      	cmp	r3, #0
 80025f8:	d101      	bne.n	80025fe <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80025fa:	2301      	movs	r3, #1
 80025fc:	e12b      	b.n	8002856 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80025fe:	687b      	ldr	r3, [r7, #4]
 8002600:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002604:	b2db      	uxtb	r3, r3
 8002606:	2b00      	cmp	r3, #0
 8002608:	d106      	bne.n	8002618 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800260a:	687b      	ldr	r3, [r7, #4]
 800260c:	2200      	movs	r2, #0
 800260e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002612:	6878      	ldr	r0, [r7, #4]
 8002614:	f7ff f876 	bl	8001704 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002618:	687b      	ldr	r3, [r7, #4]
 800261a:	2224      	movs	r2, #36	@ 0x24
 800261c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002620:	687b      	ldr	r3, [r7, #4]
 8002622:	681b      	ldr	r3, [r3, #0]
 8002624:	681a      	ldr	r2, [r3, #0]
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	681b      	ldr	r3, [r3, #0]
 800262a:	f022 0201 	bic.w	r2, r2, #1
 800262e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002630:	687b      	ldr	r3, [r7, #4]
 8002632:	681b      	ldr	r3, [r3, #0]
 8002634:	681a      	ldr	r2, [r3, #0]
 8002636:	687b      	ldr	r3, [r7, #4]
 8002638:	681b      	ldr	r3, [r3, #0]
 800263a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800263e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002640:	687b      	ldr	r3, [r7, #4]
 8002642:	681b      	ldr	r3, [r3, #0]
 8002644:	681a      	ldr	r2, [r3, #0]
 8002646:	687b      	ldr	r3, [r7, #4]
 8002648:	681b      	ldr	r3, [r3, #0]
 800264a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800264e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002650:	f002 f8e0 	bl	8004814 <HAL_RCC_GetPCLK1Freq>
 8002654:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002656:	687b      	ldr	r3, [r7, #4]
 8002658:	685b      	ldr	r3, [r3, #4]
 800265a:	4a81      	ldr	r2, [pc, #516]	@ (8002860 <HAL_I2C_Init+0x274>)
 800265c:	4293      	cmp	r3, r2
 800265e:	d807      	bhi.n	8002670 <HAL_I2C_Init+0x84>
 8002660:	68fb      	ldr	r3, [r7, #12]
 8002662:	4a80      	ldr	r2, [pc, #512]	@ (8002864 <HAL_I2C_Init+0x278>)
 8002664:	4293      	cmp	r3, r2
 8002666:	bf94      	ite	ls
 8002668:	2301      	movls	r3, #1
 800266a:	2300      	movhi	r3, #0
 800266c:	b2db      	uxtb	r3, r3
 800266e:	e006      	b.n	800267e <HAL_I2C_Init+0x92>
 8002670:	68fb      	ldr	r3, [r7, #12]
 8002672:	4a7d      	ldr	r2, [pc, #500]	@ (8002868 <HAL_I2C_Init+0x27c>)
 8002674:	4293      	cmp	r3, r2
 8002676:	bf94      	ite	ls
 8002678:	2301      	movls	r3, #1
 800267a:	2300      	movhi	r3, #0
 800267c:	b2db      	uxtb	r3, r3
 800267e:	2b00      	cmp	r3, #0
 8002680:	d001      	beq.n	8002686 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8002682:	2301      	movs	r3, #1
 8002684:	e0e7      	b.n	8002856 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8002686:	68fb      	ldr	r3, [r7, #12]
 8002688:	4a78      	ldr	r2, [pc, #480]	@ (800286c <HAL_I2C_Init+0x280>)
 800268a:	fba2 2303 	umull	r2, r3, r2, r3
 800268e:	0c9b      	lsrs	r3, r3, #18
 8002690:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8002692:	687b      	ldr	r3, [r7, #4]
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	685b      	ldr	r3, [r3, #4]
 8002698:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800269c:	687b      	ldr	r3, [r7, #4]
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	68ba      	ldr	r2, [r7, #8]
 80026a2:	430a      	orrs	r2, r1
 80026a4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80026a6:	687b      	ldr	r3, [r7, #4]
 80026a8:	681b      	ldr	r3, [r3, #0]
 80026aa:	6a1b      	ldr	r3, [r3, #32]
 80026ac:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80026b0:	687b      	ldr	r3, [r7, #4]
 80026b2:	685b      	ldr	r3, [r3, #4]
 80026b4:	4a6a      	ldr	r2, [pc, #424]	@ (8002860 <HAL_I2C_Init+0x274>)
 80026b6:	4293      	cmp	r3, r2
 80026b8:	d802      	bhi.n	80026c0 <HAL_I2C_Init+0xd4>
 80026ba:	68bb      	ldr	r3, [r7, #8]
 80026bc:	3301      	adds	r3, #1
 80026be:	e009      	b.n	80026d4 <HAL_I2C_Init+0xe8>
 80026c0:	68bb      	ldr	r3, [r7, #8]
 80026c2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80026c6:	fb02 f303 	mul.w	r3, r2, r3
 80026ca:	4a69      	ldr	r2, [pc, #420]	@ (8002870 <HAL_I2C_Init+0x284>)
 80026cc:	fba2 2303 	umull	r2, r3, r2, r3
 80026d0:	099b      	lsrs	r3, r3, #6
 80026d2:	3301      	adds	r3, #1
 80026d4:	687a      	ldr	r2, [r7, #4]
 80026d6:	6812      	ldr	r2, [r2, #0]
 80026d8:	430b      	orrs	r3, r1
 80026da:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80026dc:	687b      	ldr	r3, [r7, #4]
 80026de:	681b      	ldr	r3, [r3, #0]
 80026e0:	69db      	ldr	r3, [r3, #28]
 80026e2:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 80026e6:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 80026ea:	687b      	ldr	r3, [r7, #4]
 80026ec:	685b      	ldr	r3, [r3, #4]
 80026ee:	495c      	ldr	r1, [pc, #368]	@ (8002860 <HAL_I2C_Init+0x274>)
 80026f0:	428b      	cmp	r3, r1
 80026f2:	d819      	bhi.n	8002728 <HAL_I2C_Init+0x13c>
 80026f4:	68fb      	ldr	r3, [r7, #12]
 80026f6:	1e59      	subs	r1, r3, #1
 80026f8:	687b      	ldr	r3, [r7, #4]
 80026fa:	685b      	ldr	r3, [r3, #4]
 80026fc:	005b      	lsls	r3, r3, #1
 80026fe:	fbb1 f3f3 	udiv	r3, r1, r3
 8002702:	1c59      	adds	r1, r3, #1
 8002704:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8002708:	400b      	ands	r3, r1
 800270a:	2b00      	cmp	r3, #0
 800270c:	d00a      	beq.n	8002724 <HAL_I2C_Init+0x138>
 800270e:	68fb      	ldr	r3, [r7, #12]
 8002710:	1e59      	subs	r1, r3, #1
 8002712:	687b      	ldr	r3, [r7, #4]
 8002714:	685b      	ldr	r3, [r3, #4]
 8002716:	005b      	lsls	r3, r3, #1
 8002718:	fbb1 f3f3 	udiv	r3, r1, r3
 800271c:	3301      	adds	r3, #1
 800271e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002722:	e051      	b.n	80027c8 <HAL_I2C_Init+0x1dc>
 8002724:	2304      	movs	r3, #4
 8002726:	e04f      	b.n	80027c8 <HAL_I2C_Init+0x1dc>
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	689b      	ldr	r3, [r3, #8]
 800272c:	2b00      	cmp	r3, #0
 800272e:	d111      	bne.n	8002754 <HAL_I2C_Init+0x168>
 8002730:	68fb      	ldr	r3, [r7, #12]
 8002732:	1e58      	subs	r0, r3, #1
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	6859      	ldr	r1, [r3, #4]
 8002738:	460b      	mov	r3, r1
 800273a:	005b      	lsls	r3, r3, #1
 800273c:	440b      	add	r3, r1
 800273e:	fbb0 f3f3 	udiv	r3, r0, r3
 8002742:	3301      	adds	r3, #1
 8002744:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002748:	2b00      	cmp	r3, #0
 800274a:	bf0c      	ite	eq
 800274c:	2301      	moveq	r3, #1
 800274e:	2300      	movne	r3, #0
 8002750:	b2db      	uxtb	r3, r3
 8002752:	e012      	b.n	800277a <HAL_I2C_Init+0x18e>
 8002754:	68fb      	ldr	r3, [r7, #12]
 8002756:	1e58      	subs	r0, r3, #1
 8002758:	687b      	ldr	r3, [r7, #4]
 800275a:	6859      	ldr	r1, [r3, #4]
 800275c:	460b      	mov	r3, r1
 800275e:	009b      	lsls	r3, r3, #2
 8002760:	440b      	add	r3, r1
 8002762:	0099      	lsls	r1, r3, #2
 8002764:	440b      	add	r3, r1
 8002766:	fbb0 f3f3 	udiv	r3, r0, r3
 800276a:	3301      	adds	r3, #1
 800276c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8002770:	2b00      	cmp	r3, #0
 8002772:	bf0c      	ite	eq
 8002774:	2301      	moveq	r3, #1
 8002776:	2300      	movne	r3, #0
 8002778:	b2db      	uxtb	r3, r3
 800277a:	2b00      	cmp	r3, #0
 800277c:	d001      	beq.n	8002782 <HAL_I2C_Init+0x196>
 800277e:	2301      	movs	r3, #1
 8002780:	e022      	b.n	80027c8 <HAL_I2C_Init+0x1dc>
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	689b      	ldr	r3, [r3, #8]
 8002786:	2b00      	cmp	r3, #0
 8002788:	d10e      	bne.n	80027a8 <HAL_I2C_Init+0x1bc>
 800278a:	68fb      	ldr	r3, [r7, #12]
 800278c:	1e58      	subs	r0, r3, #1
 800278e:	687b      	ldr	r3, [r7, #4]
 8002790:	6859      	ldr	r1, [r3, #4]
 8002792:	460b      	mov	r3, r1
 8002794:	005b      	lsls	r3, r3, #1
 8002796:	440b      	add	r3, r1
 8002798:	fbb0 f3f3 	udiv	r3, r0, r3
 800279c:	3301      	adds	r3, #1
 800279e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027a2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80027a6:	e00f      	b.n	80027c8 <HAL_I2C_Init+0x1dc>
 80027a8:	68fb      	ldr	r3, [r7, #12]
 80027aa:	1e58      	subs	r0, r3, #1
 80027ac:	687b      	ldr	r3, [r7, #4]
 80027ae:	6859      	ldr	r1, [r3, #4]
 80027b0:	460b      	mov	r3, r1
 80027b2:	009b      	lsls	r3, r3, #2
 80027b4:	440b      	add	r3, r1
 80027b6:	0099      	lsls	r1, r3, #2
 80027b8:	440b      	add	r3, r1
 80027ba:	fbb0 f3f3 	udiv	r3, r0, r3
 80027be:	3301      	adds	r3, #1
 80027c0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80027c4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80027c8:	6879      	ldr	r1, [r7, #4]
 80027ca:	6809      	ldr	r1, [r1, #0]
 80027cc:	4313      	orrs	r3, r2
 80027ce:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80027d0:	687b      	ldr	r3, [r7, #4]
 80027d2:	681b      	ldr	r3, [r3, #0]
 80027d4:	681b      	ldr	r3, [r3, #0]
 80027d6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80027da:	687b      	ldr	r3, [r7, #4]
 80027dc:	69da      	ldr	r2, [r3, #28]
 80027de:	687b      	ldr	r3, [r7, #4]
 80027e0:	6a1b      	ldr	r3, [r3, #32]
 80027e2:	431a      	orrs	r2, r3
 80027e4:	687b      	ldr	r3, [r7, #4]
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	430a      	orrs	r2, r1
 80027ea:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80027ec:	687b      	ldr	r3, [r7, #4]
 80027ee:	681b      	ldr	r3, [r3, #0]
 80027f0:	689b      	ldr	r3, [r3, #8]
 80027f2:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 80027f6:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 80027fa:	687a      	ldr	r2, [r7, #4]
 80027fc:	6911      	ldr	r1, [r2, #16]
 80027fe:	687a      	ldr	r2, [r7, #4]
 8002800:	68d2      	ldr	r2, [r2, #12]
 8002802:	4311      	orrs	r1, r2
 8002804:	687a      	ldr	r2, [r7, #4]
 8002806:	6812      	ldr	r2, [r2, #0]
 8002808:	430b      	orrs	r3, r1
 800280a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800280c:	687b      	ldr	r3, [r7, #4]
 800280e:	681b      	ldr	r3, [r3, #0]
 8002810:	68db      	ldr	r3, [r3, #12]
 8002812:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8002816:	687b      	ldr	r3, [r7, #4]
 8002818:	695a      	ldr	r2, [r3, #20]
 800281a:	687b      	ldr	r3, [r7, #4]
 800281c:	699b      	ldr	r3, [r3, #24]
 800281e:	431a      	orrs	r2, r3
 8002820:	687b      	ldr	r3, [r7, #4]
 8002822:	681b      	ldr	r3, [r3, #0]
 8002824:	430a      	orrs	r2, r1
 8002826:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8002828:	687b      	ldr	r3, [r7, #4]
 800282a:	681b      	ldr	r3, [r3, #0]
 800282c:	681a      	ldr	r2, [r3, #0]
 800282e:	687b      	ldr	r3, [r7, #4]
 8002830:	681b      	ldr	r3, [r3, #0]
 8002832:	f042 0201 	orr.w	r2, r2, #1
 8002836:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002838:	687b      	ldr	r3, [r7, #4]
 800283a:	2200      	movs	r2, #0
 800283c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800283e:	687b      	ldr	r3, [r7, #4]
 8002840:	2220      	movs	r2, #32
 8002842:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8002846:	687b      	ldr	r3, [r7, #4]
 8002848:	2200      	movs	r2, #0
 800284a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800284c:	687b      	ldr	r3, [r7, #4]
 800284e:	2200      	movs	r2, #0
 8002850:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8002854:	2300      	movs	r3, #0
}
 8002856:	4618      	mov	r0, r3
 8002858:	3710      	adds	r7, #16
 800285a:	46bd      	mov	sp, r7
 800285c:	bd80      	pop	{r7, pc}
 800285e:	bf00      	nop
 8002860:	000186a0 	.word	0x000186a0
 8002864:	001e847f 	.word	0x001e847f
 8002868:	003d08ff 	.word	0x003d08ff
 800286c:	431bde83 	.word	0x431bde83
 8002870:	10624dd3 	.word	0x10624dd3

08002874 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002874:	b580      	push	{r7, lr}
 8002876:	b088      	sub	sp, #32
 8002878:	af02      	add	r7, sp, #8
 800287a:	60f8      	str	r0, [r7, #12]
 800287c:	607a      	str	r2, [r7, #4]
 800287e:	461a      	mov	r2, r3
 8002880:	460b      	mov	r3, r1
 8002882:	817b      	strh	r3, [r7, #10]
 8002884:	4613      	mov	r3, r2
 8002886:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002888:	f7ff fb3e 	bl	8001f08 <HAL_GetTick>
 800288c:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800288e:	68fb      	ldr	r3, [r7, #12]
 8002890:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002894:	b2db      	uxtb	r3, r3
 8002896:	2b20      	cmp	r3, #32
 8002898:	f040 80e0 	bne.w	8002a5c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800289c:	697b      	ldr	r3, [r7, #20]
 800289e:	9300      	str	r3, [sp, #0]
 80028a0:	2319      	movs	r3, #25
 80028a2:	2201      	movs	r2, #1
 80028a4:	4970      	ldr	r1, [pc, #448]	@ (8002a68 <HAL_I2C_Master_Transmit+0x1f4>)
 80028a6:	68f8      	ldr	r0, [r7, #12]
 80028a8:	f001 f90e 	bl	8003ac8 <I2C_WaitOnFlagUntilTimeout>
 80028ac:	4603      	mov	r3, r0
 80028ae:	2b00      	cmp	r3, #0
 80028b0:	d001      	beq.n	80028b6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 80028b2:	2302      	movs	r3, #2
 80028b4:	e0d3      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80028b6:	68fb      	ldr	r3, [r7, #12]
 80028b8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80028bc:	2b01      	cmp	r3, #1
 80028be:	d101      	bne.n	80028c4 <HAL_I2C_Master_Transmit+0x50>
 80028c0:	2302      	movs	r3, #2
 80028c2:	e0cc      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
 80028c4:	68fb      	ldr	r3, [r7, #12]
 80028c6:	2201      	movs	r2, #1
 80028c8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	681b      	ldr	r3, [r3, #0]
 80028d0:	681b      	ldr	r3, [r3, #0]
 80028d2:	f003 0301 	and.w	r3, r3, #1
 80028d6:	2b01      	cmp	r3, #1
 80028d8:	d007      	beq.n	80028ea <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80028da:	68fb      	ldr	r3, [r7, #12]
 80028dc:	681b      	ldr	r3, [r3, #0]
 80028de:	681a      	ldr	r2, [r3, #0]
 80028e0:	68fb      	ldr	r3, [r7, #12]
 80028e2:	681b      	ldr	r3, [r3, #0]
 80028e4:	f042 0201 	orr.w	r2, r2, #1
 80028e8:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80028ea:	68fb      	ldr	r3, [r7, #12]
 80028ec:	681b      	ldr	r3, [r3, #0]
 80028ee:	681a      	ldr	r2, [r3, #0]
 80028f0:	68fb      	ldr	r3, [r7, #12]
 80028f2:	681b      	ldr	r3, [r3, #0]
 80028f4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80028f8:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 80028fa:	68fb      	ldr	r3, [r7, #12]
 80028fc:	2221      	movs	r2, #33	@ 0x21
 80028fe:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002902:	68fb      	ldr	r3, [r7, #12]
 8002904:	2210      	movs	r2, #16
 8002906:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800290a:	68fb      	ldr	r3, [r7, #12]
 800290c:	2200      	movs	r2, #0
 800290e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002910:	68fb      	ldr	r3, [r7, #12]
 8002912:	687a      	ldr	r2, [r7, #4]
 8002914:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002916:	68fb      	ldr	r3, [r7, #12]
 8002918:	893a      	ldrh	r2, [r7, #8]
 800291a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800291c:	68fb      	ldr	r3, [r7, #12]
 800291e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002920:	b29a      	uxth	r2, r3
 8002922:	68fb      	ldr	r3, [r7, #12]
 8002924:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002926:	68fb      	ldr	r3, [r7, #12]
 8002928:	4a50      	ldr	r2, [pc, #320]	@ (8002a6c <HAL_I2C_Master_Transmit+0x1f8>)
 800292a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 800292c:	8979      	ldrh	r1, [r7, #10]
 800292e:	697b      	ldr	r3, [r7, #20]
 8002930:	6a3a      	ldr	r2, [r7, #32]
 8002932:	68f8      	ldr	r0, [r7, #12]
 8002934:	f000 fdfa 	bl	800352c <I2C_MasterRequestWrite>
 8002938:	4603      	mov	r3, r0
 800293a:	2b00      	cmp	r3, #0
 800293c:	d001      	beq.n	8002942 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 800293e:	2301      	movs	r3, #1
 8002940:	e08d      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002942:	2300      	movs	r3, #0
 8002944:	613b      	str	r3, [r7, #16]
 8002946:	68fb      	ldr	r3, [r7, #12]
 8002948:	681b      	ldr	r3, [r3, #0]
 800294a:	695b      	ldr	r3, [r3, #20]
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	68fb      	ldr	r3, [r7, #12]
 8002950:	681b      	ldr	r3, [r3, #0]
 8002952:	699b      	ldr	r3, [r3, #24]
 8002954:	613b      	str	r3, [r7, #16]
 8002956:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8002958:	e066      	b.n	8002a28 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800295a:	697a      	ldr	r2, [r7, #20]
 800295c:	6a39      	ldr	r1, [r7, #32]
 800295e:	68f8      	ldr	r0, [r7, #12]
 8002960:	f001 f9cc 	bl	8003cfc <I2C_WaitOnTXEFlagUntilTimeout>
 8002964:	4603      	mov	r3, r0
 8002966:	2b00      	cmp	r3, #0
 8002968:	d00d      	beq.n	8002986 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800296a:	68fb      	ldr	r3, [r7, #12]
 800296c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800296e:	2b04      	cmp	r3, #4
 8002970:	d107      	bne.n	8002982 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002972:	68fb      	ldr	r3, [r7, #12]
 8002974:	681b      	ldr	r3, [r3, #0]
 8002976:	681a      	ldr	r2, [r3, #0]
 8002978:	68fb      	ldr	r3, [r7, #12]
 800297a:	681b      	ldr	r3, [r3, #0]
 800297c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002980:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002982:	2301      	movs	r3, #1
 8002984:	e06b      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002986:	68fb      	ldr	r3, [r7, #12]
 8002988:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800298a:	781a      	ldrb	r2, [r3, #0]
 800298c:	68fb      	ldr	r3, [r7, #12]
 800298e:	681b      	ldr	r3, [r3, #0]
 8002990:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002992:	68fb      	ldr	r3, [r7, #12]
 8002994:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002996:	1c5a      	adds	r2, r3, #1
 8002998:	68fb      	ldr	r3, [r7, #12]
 800299a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 800299c:	68fb      	ldr	r3, [r7, #12]
 800299e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029a0:	b29b      	uxth	r3, r3
 80029a2:	3b01      	subs	r3, #1
 80029a4:	b29a      	uxth	r2, r3
 80029a6:	68fb      	ldr	r3, [r7, #12]
 80029a8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 80029aa:	68fb      	ldr	r3, [r7, #12]
 80029ac:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029ae:	3b01      	subs	r3, #1
 80029b0:	b29a      	uxth	r2, r3
 80029b2:	68fb      	ldr	r3, [r7, #12]
 80029b4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 80029b6:	68fb      	ldr	r3, [r7, #12]
 80029b8:	681b      	ldr	r3, [r3, #0]
 80029ba:	695b      	ldr	r3, [r3, #20]
 80029bc:	f003 0304 	and.w	r3, r3, #4
 80029c0:	2b04      	cmp	r3, #4
 80029c2:	d11b      	bne.n	80029fc <HAL_I2C_Master_Transmit+0x188>
 80029c4:	68fb      	ldr	r3, [r7, #12]
 80029c6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029c8:	2b00      	cmp	r3, #0
 80029ca:	d017      	beq.n	80029fc <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80029cc:	68fb      	ldr	r3, [r7, #12]
 80029ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029d0:	781a      	ldrb	r2, [r3, #0]
 80029d2:	68fb      	ldr	r3, [r7, #12]
 80029d4:	681b      	ldr	r3, [r3, #0]
 80029d6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80029d8:	68fb      	ldr	r3, [r7, #12]
 80029da:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80029dc:	1c5a      	adds	r2, r3, #1
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 80029e2:	68fb      	ldr	r3, [r7, #12]
 80029e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80029e6:	b29b      	uxth	r3, r3
 80029e8:	3b01      	subs	r3, #1
 80029ea:	b29a      	uxth	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 80029f0:	68fb      	ldr	r3, [r7, #12]
 80029f2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80029f4:	3b01      	subs	r3, #1
 80029f6:	b29a      	uxth	r2, r3
 80029f8:	68fb      	ldr	r3, [r7, #12]
 80029fa:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80029fc:	697a      	ldr	r2, [r7, #20]
 80029fe:	6a39      	ldr	r1, [r7, #32]
 8002a00:	68f8      	ldr	r0, [r7, #12]
 8002a02:	f001 f9c3 	bl	8003d8c <I2C_WaitOnBTFFlagUntilTimeout>
 8002a06:	4603      	mov	r3, r0
 8002a08:	2b00      	cmp	r3, #0
 8002a0a:	d00d      	beq.n	8002a28 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002a0c:	68fb      	ldr	r3, [r7, #12]
 8002a0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002a10:	2b04      	cmp	r3, #4
 8002a12:	d107      	bne.n	8002a24 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a14:	68fb      	ldr	r3, [r7, #12]
 8002a16:	681b      	ldr	r3, [r3, #0]
 8002a18:	681a      	ldr	r2, [r3, #0]
 8002a1a:	68fb      	ldr	r3, [r7, #12]
 8002a1c:	681b      	ldr	r3, [r3, #0]
 8002a1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a22:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002a24:	2301      	movs	r3, #1
 8002a26:	e01a      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8002a28:	68fb      	ldr	r3, [r7, #12]
 8002a2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002a2c:	2b00      	cmp	r3, #0
 8002a2e:	d194      	bne.n	800295a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002a30:	68fb      	ldr	r3, [r7, #12]
 8002a32:	681b      	ldr	r3, [r3, #0]
 8002a34:	681a      	ldr	r2, [r3, #0]
 8002a36:	68fb      	ldr	r3, [r7, #12]
 8002a38:	681b      	ldr	r3, [r3, #0]
 8002a3a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002a3e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8002a40:	68fb      	ldr	r3, [r7, #12]
 8002a42:	2220      	movs	r2, #32
 8002a44:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002a48:	68fb      	ldr	r3, [r7, #12]
 8002a4a:	2200      	movs	r2, #0
 8002a4c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002a50:	68fb      	ldr	r3, [r7, #12]
 8002a52:	2200      	movs	r2, #0
 8002a54:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002a58:	2300      	movs	r3, #0
 8002a5a:	e000      	b.n	8002a5e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8002a5c:	2302      	movs	r3, #2
  }
}
 8002a5e:	4618      	mov	r0, r3
 8002a60:	3718      	adds	r7, #24
 8002a62:	46bd      	mov	sp, r7
 8002a64:	bd80      	pop	{r7, pc}
 8002a66:	bf00      	nop
 8002a68:	00100002 	.word	0x00100002
 8002a6c:	ffff0000 	.word	0xffff0000

08002a70 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002a70:	b580      	push	{r7, lr}
 8002a72:	b08c      	sub	sp, #48	@ 0x30
 8002a74:	af02      	add	r7, sp, #8
 8002a76:	60f8      	str	r0, [r7, #12]
 8002a78:	607a      	str	r2, [r7, #4]
 8002a7a:	461a      	mov	r2, r3
 8002a7c:	460b      	mov	r3, r1
 8002a7e:	817b      	strh	r3, [r7, #10]
 8002a80:	4613      	mov	r3, r2
 8002a82:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002a84:	f7ff fa40 	bl	8001f08 <HAL_GetTick>
 8002a88:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002a8a:	68fb      	ldr	r3, [r7, #12]
 8002a8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002a90:	b2db      	uxtb	r3, r3
 8002a92:	2b20      	cmp	r3, #32
 8002a94:	f040 8217 	bne.w	8002ec6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002a98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002a9a:	9300      	str	r3, [sp, #0]
 8002a9c:	2319      	movs	r3, #25
 8002a9e:	2201      	movs	r2, #1
 8002aa0:	497c      	ldr	r1, [pc, #496]	@ (8002c94 <HAL_I2C_Master_Receive+0x224>)
 8002aa2:	68f8      	ldr	r0, [r7, #12]
 8002aa4:	f001 f810 	bl	8003ac8 <I2C_WaitOnFlagUntilTimeout>
 8002aa8:	4603      	mov	r3, r0
 8002aaa:	2b00      	cmp	r3, #0
 8002aac:	d001      	beq.n	8002ab2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8002aae:	2302      	movs	r3, #2
 8002ab0:	e20a      	b.n	8002ec8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002ab2:	68fb      	ldr	r3, [r7, #12]
 8002ab4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002ab8:	2b01      	cmp	r3, #1
 8002aba:	d101      	bne.n	8002ac0 <HAL_I2C_Master_Receive+0x50>
 8002abc:	2302      	movs	r3, #2
 8002abe:	e203      	b.n	8002ec8 <HAL_I2C_Master_Receive+0x458>
 8002ac0:	68fb      	ldr	r3, [r7, #12]
 8002ac2:	2201      	movs	r2, #1
 8002ac4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002ac8:	68fb      	ldr	r3, [r7, #12]
 8002aca:	681b      	ldr	r3, [r3, #0]
 8002acc:	681b      	ldr	r3, [r3, #0]
 8002ace:	f003 0301 	and.w	r3, r3, #1
 8002ad2:	2b01      	cmp	r3, #1
 8002ad4:	d007      	beq.n	8002ae6 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002ad6:	68fb      	ldr	r3, [r7, #12]
 8002ad8:	681b      	ldr	r3, [r3, #0]
 8002ada:	681a      	ldr	r2, [r3, #0]
 8002adc:	68fb      	ldr	r3, [r7, #12]
 8002ade:	681b      	ldr	r3, [r3, #0]
 8002ae0:	f042 0201 	orr.w	r2, r2, #1
 8002ae4:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002ae6:	68fb      	ldr	r3, [r7, #12]
 8002ae8:	681b      	ldr	r3, [r3, #0]
 8002aea:	681a      	ldr	r2, [r3, #0]
 8002aec:	68fb      	ldr	r3, [r7, #12]
 8002aee:	681b      	ldr	r3, [r3, #0]
 8002af0:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002af4:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8002af6:	68fb      	ldr	r3, [r7, #12]
 8002af8:	2222      	movs	r2, #34	@ 0x22
 8002afa:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8002afe:	68fb      	ldr	r3, [r7, #12]
 8002b00:	2210      	movs	r2, #16
 8002b02:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8002b06:	68fb      	ldr	r3, [r7, #12]
 8002b08:	2200      	movs	r2, #0
 8002b0a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002b0c:	68fb      	ldr	r3, [r7, #12]
 8002b0e:	687a      	ldr	r2, [r7, #4]
 8002b10:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002b12:	68fb      	ldr	r3, [r7, #12]
 8002b14:	893a      	ldrh	r2, [r7, #8]
 8002b16:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002b18:	68fb      	ldr	r3, [r7, #12]
 8002b1a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002b1c:	b29a      	uxth	r2, r3
 8002b1e:	68fb      	ldr	r3, [r7, #12]
 8002b20:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002b22:	68fb      	ldr	r3, [r7, #12]
 8002b24:	4a5c      	ldr	r2, [pc, #368]	@ (8002c98 <HAL_I2C_Master_Receive+0x228>)
 8002b26:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8002b28:	8979      	ldrh	r1, [r7, #10]
 8002b2a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002b2c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8002b2e:	68f8      	ldr	r0, [r7, #12]
 8002b30:	f000 fd7e 	bl	8003630 <I2C_MasterRequestRead>
 8002b34:	4603      	mov	r3, r0
 8002b36:	2b00      	cmp	r3, #0
 8002b38:	d001      	beq.n	8002b3e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8002b3a:	2301      	movs	r3, #1
 8002b3c:	e1c4      	b.n	8002ec8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8002b3e:	68fb      	ldr	r3, [r7, #12]
 8002b40:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b42:	2b00      	cmp	r3, #0
 8002b44:	d113      	bne.n	8002b6e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b46:	2300      	movs	r3, #0
 8002b48:	623b      	str	r3, [r7, #32]
 8002b4a:	68fb      	ldr	r3, [r7, #12]
 8002b4c:	681b      	ldr	r3, [r3, #0]
 8002b4e:	695b      	ldr	r3, [r3, #20]
 8002b50:	623b      	str	r3, [r7, #32]
 8002b52:	68fb      	ldr	r3, [r7, #12]
 8002b54:	681b      	ldr	r3, [r3, #0]
 8002b56:	699b      	ldr	r3, [r3, #24]
 8002b58:	623b      	str	r3, [r7, #32]
 8002b5a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b5c:	68fb      	ldr	r3, [r7, #12]
 8002b5e:	681b      	ldr	r3, [r3, #0]
 8002b60:	681a      	ldr	r2, [r3, #0]
 8002b62:	68fb      	ldr	r3, [r7, #12]
 8002b64:	681b      	ldr	r3, [r3, #0]
 8002b66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002b6a:	601a      	str	r2, [r3, #0]
 8002b6c:	e198      	b.n	8002ea0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8002b6e:	68fb      	ldr	r3, [r7, #12]
 8002b70:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002b72:	2b01      	cmp	r3, #1
 8002b74:	d11b      	bne.n	8002bae <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002b76:	68fb      	ldr	r3, [r7, #12]
 8002b78:	681b      	ldr	r3, [r3, #0]
 8002b7a:	681a      	ldr	r2, [r3, #0]
 8002b7c:	68fb      	ldr	r3, [r7, #12]
 8002b7e:	681b      	ldr	r3, [r3, #0]
 8002b80:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002b84:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002b86:	2300      	movs	r3, #0
 8002b88:	61fb      	str	r3, [r7, #28]
 8002b8a:	68fb      	ldr	r3, [r7, #12]
 8002b8c:	681b      	ldr	r3, [r3, #0]
 8002b8e:	695b      	ldr	r3, [r3, #20]
 8002b90:	61fb      	str	r3, [r7, #28]
 8002b92:	68fb      	ldr	r3, [r7, #12]
 8002b94:	681b      	ldr	r3, [r3, #0]
 8002b96:	699b      	ldr	r3, [r3, #24]
 8002b98:	61fb      	str	r3, [r7, #28]
 8002b9a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002b9c:	68fb      	ldr	r3, [r7, #12]
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	681a      	ldr	r2, [r3, #0]
 8002ba2:	68fb      	ldr	r3, [r7, #12]
 8002ba4:	681b      	ldr	r3, [r3, #0]
 8002ba6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002baa:	601a      	str	r2, [r3, #0]
 8002bac:	e178      	b.n	8002ea0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8002bae:	68fb      	ldr	r3, [r7, #12]
 8002bb0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002bb2:	2b02      	cmp	r3, #2
 8002bb4:	d11b      	bne.n	8002bee <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bb6:	68fb      	ldr	r3, [r7, #12]
 8002bb8:	681b      	ldr	r3, [r3, #0]
 8002bba:	681a      	ldr	r2, [r3, #0]
 8002bbc:	68fb      	ldr	r3, [r7, #12]
 8002bbe:	681b      	ldr	r3, [r3, #0]
 8002bc0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002bc4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002bc6:	68fb      	ldr	r3, [r7, #12]
 8002bc8:	681b      	ldr	r3, [r3, #0]
 8002bca:	681a      	ldr	r2, [r3, #0]
 8002bcc:	68fb      	ldr	r3, [r7, #12]
 8002bce:	681b      	ldr	r3, [r3, #0]
 8002bd0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8002bd4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bd6:	2300      	movs	r3, #0
 8002bd8:	61bb      	str	r3, [r7, #24]
 8002bda:	68fb      	ldr	r3, [r7, #12]
 8002bdc:	681b      	ldr	r3, [r3, #0]
 8002bde:	695b      	ldr	r3, [r3, #20]
 8002be0:	61bb      	str	r3, [r7, #24]
 8002be2:	68fb      	ldr	r3, [r7, #12]
 8002be4:	681b      	ldr	r3, [r3, #0]
 8002be6:	699b      	ldr	r3, [r3, #24]
 8002be8:	61bb      	str	r3, [r7, #24]
 8002bea:	69bb      	ldr	r3, [r7, #24]
 8002bec:	e158      	b.n	8002ea0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002bee:	68fb      	ldr	r3, [r7, #12]
 8002bf0:	681b      	ldr	r3, [r3, #0]
 8002bf2:	681a      	ldr	r2, [r3, #0]
 8002bf4:	68fb      	ldr	r3, [r7, #12]
 8002bf6:	681b      	ldr	r3, [r3, #0]
 8002bf8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8002bfc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8002bfe:	2300      	movs	r3, #0
 8002c00:	617b      	str	r3, [r7, #20]
 8002c02:	68fb      	ldr	r3, [r7, #12]
 8002c04:	681b      	ldr	r3, [r3, #0]
 8002c06:	695b      	ldr	r3, [r3, #20]
 8002c08:	617b      	str	r3, [r7, #20]
 8002c0a:	68fb      	ldr	r3, [r7, #12]
 8002c0c:	681b      	ldr	r3, [r3, #0]
 8002c0e:	699b      	ldr	r3, [r3, #24]
 8002c10:	617b      	str	r3, [r7, #20]
 8002c12:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8002c14:	e144      	b.n	8002ea0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8002c16:	68fb      	ldr	r3, [r7, #12]
 8002c18:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c1a:	2b03      	cmp	r3, #3
 8002c1c:	f200 80f1 	bhi.w	8002e02 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8002c20:	68fb      	ldr	r3, [r7, #12]
 8002c22:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c24:	2b01      	cmp	r3, #1
 8002c26:	d123      	bne.n	8002c70 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002c28:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002c2a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002c2c:	68f8      	ldr	r0, [r7, #12]
 8002c2e:	f001 f8f5 	bl	8003e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002c32:	4603      	mov	r3, r0
 8002c34:	2b00      	cmp	r3, #0
 8002c36:	d001      	beq.n	8002c3c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8002c38:	2301      	movs	r3, #1
 8002c3a:	e145      	b.n	8002ec8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002c3c:	68fb      	ldr	r3, [r7, #12]
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	691a      	ldr	r2, [r3, #16]
 8002c42:	68fb      	ldr	r3, [r7, #12]
 8002c44:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c46:	b2d2      	uxtb	r2, r2
 8002c48:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002c4a:	68fb      	ldr	r3, [r7, #12]
 8002c4c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002c4e:	1c5a      	adds	r2, r3, #1
 8002c50:	68fb      	ldr	r3, [r7, #12]
 8002c52:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002c54:	68fb      	ldr	r3, [r7, #12]
 8002c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c58:	3b01      	subs	r3, #1
 8002c5a:	b29a      	uxth	r2, r3
 8002c5c:	68fb      	ldr	r3, [r7, #12]
 8002c5e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002c60:	68fb      	ldr	r3, [r7, #12]
 8002c62:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002c64:	b29b      	uxth	r3, r3
 8002c66:	3b01      	subs	r3, #1
 8002c68:	b29a      	uxth	r2, r3
 8002c6a:	68fb      	ldr	r3, [r7, #12]
 8002c6c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002c6e:	e117      	b.n	8002ea0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8002c70:	68fb      	ldr	r3, [r7, #12]
 8002c72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002c74:	2b02      	cmp	r3, #2
 8002c76:	d14e      	bne.n	8002d16 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002c78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002c7a:	9300      	str	r3, [sp, #0]
 8002c7c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002c7e:	2200      	movs	r2, #0
 8002c80:	4906      	ldr	r1, [pc, #24]	@ (8002c9c <HAL_I2C_Master_Receive+0x22c>)
 8002c82:	68f8      	ldr	r0, [r7, #12]
 8002c84:	f000 ff20 	bl	8003ac8 <I2C_WaitOnFlagUntilTimeout>
 8002c88:	4603      	mov	r3, r0
 8002c8a:	2b00      	cmp	r3, #0
 8002c8c:	d008      	beq.n	8002ca0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8002c8e:	2301      	movs	r3, #1
 8002c90:	e11a      	b.n	8002ec8 <HAL_I2C_Master_Receive+0x458>
 8002c92:	bf00      	nop
 8002c94:	00100002 	.word	0x00100002
 8002c98:	ffff0000 	.word	0xffff0000
 8002c9c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002ca0:	68fb      	ldr	r3, [r7, #12]
 8002ca2:	681b      	ldr	r3, [r3, #0]
 8002ca4:	681a      	ldr	r2, [r3, #0]
 8002ca6:	68fb      	ldr	r3, [r7, #12]
 8002ca8:	681b      	ldr	r3, [r3, #0]
 8002caa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002cae:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002cb0:	68fb      	ldr	r3, [r7, #12]
 8002cb2:	681b      	ldr	r3, [r3, #0]
 8002cb4:	691a      	ldr	r2, [r3, #16]
 8002cb6:	68fb      	ldr	r3, [r7, #12]
 8002cb8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cba:	b2d2      	uxtb	r2, r2
 8002cbc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cbe:	68fb      	ldr	r3, [r7, #12]
 8002cc0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cc2:	1c5a      	adds	r2, r3, #1
 8002cc4:	68fb      	ldr	r3, [r7, #12]
 8002cc6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cc8:	68fb      	ldr	r3, [r7, #12]
 8002cca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ccc:	3b01      	subs	r3, #1
 8002cce:	b29a      	uxth	r2, r3
 8002cd0:	68fb      	ldr	r3, [r7, #12]
 8002cd2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002cd4:	68fb      	ldr	r3, [r7, #12]
 8002cd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002cd8:	b29b      	uxth	r3, r3
 8002cda:	3b01      	subs	r3, #1
 8002cdc:	b29a      	uxth	r2, r3
 8002cde:	68fb      	ldr	r3, [r7, #12]
 8002ce0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002ce2:	68fb      	ldr	r3, [r7, #12]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	691a      	ldr	r2, [r3, #16]
 8002ce8:	68fb      	ldr	r3, [r7, #12]
 8002cea:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cec:	b2d2      	uxtb	r2, r2
 8002cee:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002cf0:	68fb      	ldr	r3, [r7, #12]
 8002cf2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002cf4:	1c5a      	adds	r2, r3, #1
 8002cf6:	68fb      	ldr	r3, [r7, #12]
 8002cf8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002cfa:	68fb      	ldr	r3, [r7, #12]
 8002cfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002cfe:	3b01      	subs	r3, #1
 8002d00:	b29a      	uxth	r2, r3
 8002d02:	68fb      	ldr	r3, [r7, #12]
 8002d04:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d06:	68fb      	ldr	r3, [r7, #12]
 8002d08:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d0a:	b29b      	uxth	r3, r3
 8002d0c:	3b01      	subs	r3, #1
 8002d0e:	b29a      	uxth	r2, r3
 8002d10:	68fb      	ldr	r3, [r7, #12]
 8002d12:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002d14:	e0c4      	b.n	8002ea0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d18:	9300      	str	r3, [sp, #0]
 8002d1a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d1c:	2200      	movs	r2, #0
 8002d1e:	496c      	ldr	r1, [pc, #432]	@ (8002ed0 <HAL_I2C_Master_Receive+0x460>)
 8002d20:	68f8      	ldr	r0, [r7, #12]
 8002d22:	f000 fed1 	bl	8003ac8 <I2C_WaitOnFlagUntilTimeout>
 8002d26:	4603      	mov	r3, r0
 8002d28:	2b00      	cmp	r3, #0
 8002d2a:	d001      	beq.n	8002d30 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8002d2c:	2301      	movs	r3, #1
 8002d2e:	e0cb      	b.n	8002ec8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002d30:	68fb      	ldr	r3, [r7, #12]
 8002d32:	681b      	ldr	r3, [r3, #0]
 8002d34:	681a      	ldr	r2, [r3, #0]
 8002d36:	68fb      	ldr	r3, [r7, #12]
 8002d38:	681b      	ldr	r3, [r3, #0]
 8002d3a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002d3e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d40:	68fb      	ldr	r3, [r7, #12]
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	691a      	ldr	r2, [r3, #16]
 8002d46:	68fb      	ldr	r3, [r7, #12]
 8002d48:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d4a:	b2d2      	uxtb	r2, r2
 8002d4c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002d4e:	68fb      	ldr	r3, [r7, #12]
 8002d50:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002d52:	1c5a      	adds	r2, r3, #1
 8002d54:	68fb      	ldr	r3, [r7, #12]
 8002d56:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002d58:	68fb      	ldr	r3, [r7, #12]
 8002d5a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002d5c:	3b01      	subs	r3, #1
 8002d5e:	b29a      	uxth	r2, r3
 8002d60:	68fb      	ldr	r3, [r7, #12]
 8002d62:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002d64:	68fb      	ldr	r3, [r7, #12]
 8002d66:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002d68:	b29b      	uxth	r3, r3
 8002d6a:	3b01      	subs	r3, #1
 8002d6c:	b29a      	uxth	r2, r3
 8002d6e:	68fb      	ldr	r3, [r7, #12]
 8002d70:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8002d72:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8002d74:	9300      	str	r3, [sp, #0]
 8002d76:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8002d78:	2200      	movs	r2, #0
 8002d7a:	4955      	ldr	r1, [pc, #340]	@ (8002ed0 <HAL_I2C_Master_Receive+0x460>)
 8002d7c:	68f8      	ldr	r0, [r7, #12]
 8002d7e:	f000 fea3 	bl	8003ac8 <I2C_WaitOnFlagUntilTimeout>
 8002d82:	4603      	mov	r3, r0
 8002d84:	2b00      	cmp	r3, #0
 8002d86:	d001      	beq.n	8002d8c <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8002d88:	2301      	movs	r3, #1
 8002d8a:	e09d      	b.n	8002ec8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002d8c:	68fb      	ldr	r3, [r7, #12]
 8002d8e:	681b      	ldr	r3, [r3, #0]
 8002d90:	681a      	ldr	r2, [r3, #0]
 8002d92:	68fb      	ldr	r3, [r7, #12]
 8002d94:	681b      	ldr	r3, [r3, #0]
 8002d96:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002d9a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002d9c:	68fb      	ldr	r3, [r7, #12]
 8002d9e:	681b      	ldr	r3, [r3, #0]
 8002da0:	691a      	ldr	r2, [r3, #16]
 8002da2:	68fb      	ldr	r3, [r7, #12]
 8002da4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002da6:	b2d2      	uxtb	r2, r2
 8002da8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002daa:	68fb      	ldr	r3, [r7, #12]
 8002dac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dae:	1c5a      	adds	r2, r3, #1
 8002db0:	68fb      	ldr	r3, [r7, #12]
 8002db2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002db4:	68fb      	ldr	r3, [r7, #12]
 8002db6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002db8:	3b01      	subs	r3, #1
 8002dba:	b29a      	uxth	r2, r3
 8002dbc:	68fb      	ldr	r3, [r7, #12]
 8002dbe:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002dc0:	68fb      	ldr	r3, [r7, #12]
 8002dc2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002dc4:	b29b      	uxth	r3, r3
 8002dc6:	3b01      	subs	r3, #1
 8002dc8:	b29a      	uxth	r2, r3
 8002dca:	68fb      	ldr	r3, [r7, #12]
 8002dcc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002dce:	68fb      	ldr	r3, [r7, #12]
 8002dd0:	681b      	ldr	r3, [r3, #0]
 8002dd2:	691a      	ldr	r2, [r3, #16]
 8002dd4:	68fb      	ldr	r3, [r7, #12]
 8002dd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002dd8:	b2d2      	uxtb	r2, r2
 8002dda:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002ddc:	68fb      	ldr	r3, [r7, #12]
 8002dde:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002de0:	1c5a      	adds	r2, r3, #1
 8002de2:	68fb      	ldr	r3, [r7, #12]
 8002de4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002de6:	68fb      	ldr	r3, [r7, #12]
 8002de8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002dea:	3b01      	subs	r3, #1
 8002dec:	b29a      	uxth	r2, r3
 8002dee:	68fb      	ldr	r3, [r7, #12]
 8002df0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002df2:	68fb      	ldr	r3, [r7, #12]
 8002df4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002df6:	b29b      	uxth	r3, r3
 8002df8:	3b01      	subs	r3, #1
 8002dfa:	b29a      	uxth	r2, r3
 8002dfc:	68fb      	ldr	r3, [r7, #12]
 8002dfe:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8002e00:	e04e      	b.n	8002ea0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002e02:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8002e04:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8002e06:	68f8      	ldr	r0, [r7, #12]
 8002e08:	f001 f808 	bl	8003e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8002e0c:	4603      	mov	r3, r0
 8002e0e:	2b00      	cmp	r3, #0
 8002e10:	d001      	beq.n	8002e16 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8002e12:	2301      	movs	r3, #1
 8002e14:	e058      	b.n	8002ec8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e16:	68fb      	ldr	r3, [r7, #12]
 8002e18:	681b      	ldr	r3, [r3, #0]
 8002e1a:	691a      	ldr	r2, [r3, #16]
 8002e1c:	68fb      	ldr	r3, [r7, #12]
 8002e1e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e20:	b2d2      	uxtb	r2, r2
 8002e22:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8002e24:	68fb      	ldr	r3, [r7, #12]
 8002e26:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e28:	1c5a      	adds	r2, r3, #1
 8002e2a:	68fb      	ldr	r3, [r7, #12]
 8002e2c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8002e2e:	68fb      	ldr	r3, [r7, #12]
 8002e30:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e32:	3b01      	subs	r3, #1
 8002e34:	b29a      	uxth	r2, r3
 8002e36:	68fb      	ldr	r3, [r7, #12]
 8002e38:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8002e3a:	68fb      	ldr	r3, [r7, #12]
 8002e3c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e3e:	b29b      	uxth	r3, r3
 8002e40:	3b01      	subs	r3, #1
 8002e42:	b29a      	uxth	r2, r3
 8002e44:	68fb      	ldr	r3, [r7, #12]
 8002e46:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8002e48:	68fb      	ldr	r3, [r7, #12]
 8002e4a:	681b      	ldr	r3, [r3, #0]
 8002e4c:	695b      	ldr	r3, [r3, #20]
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	2b04      	cmp	r3, #4
 8002e54:	d124      	bne.n	8002ea0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8002e56:	68fb      	ldr	r3, [r7, #12]
 8002e58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e5a:	2b03      	cmp	r3, #3
 8002e5c:	d107      	bne.n	8002e6e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8002e5e:	68fb      	ldr	r3, [r7, #12]
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	681a      	ldr	r2, [r3, #0]
 8002e64:	68fb      	ldr	r3, [r7, #12]
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8002e6c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8002e6e:	68fb      	ldr	r3, [r7, #12]
 8002e70:	681b      	ldr	r3, [r3, #0]
 8002e72:	691a      	ldr	r2, [r3, #16]
 8002e74:	68fb      	ldr	r3, [r7, #12]
 8002e76:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e78:	b2d2      	uxtb	r2, r2
 8002e7a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8002e7c:	68fb      	ldr	r3, [r7, #12]
 8002e7e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002e80:	1c5a      	adds	r2, r3, #1
 8002e82:	68fb      	ldr	r3, [r7, #12]
 8002e84:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8002e86:	68fb      	ldr	r3, [r7, #12]
 8002e88:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002e8a:	3b01      	subs	r3, #1
 8002e8c:	b29a      	uxth	r2, r3
 8002e8e:	68fb      	ldr	r3, [r7, #12]
 8002e90:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8002e92:	68fb      	ldr	r3, [r7, #12]
 8002e94:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002e96:	b29b      	uxth	r3, r3
 8002e98:	3b01      	subs	r3, #1
 8002e9a:	b29a      	uxth	r2, r3
 8002e9c:	68fb      	ldr	r3, [r7, #12]
 8002e9e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8002ea0:	68fb      	ldr	r3, [r7, #12]
 8002ea2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ea4:	2b00      	cmp	r3, #0
 8002ea6:	f47f aeb6 	bne.w	8002c16 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8002eaa:	68fb      	ldr	r3, [r7, #12]
 8002eac:	2220      	movs	r2, #32
 8002eae:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8002eb2:	68fb      	ldr	r3, [r7, #12]
 8002eb4:	2200      	movs	r2, #0
 8002eb6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8002eba:	68fb      	ldr	r3, [r7, #12]
 8002ebc:	2200      	movs	r2, #0
 8002ebe:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8002ec2:	2300      	movs	r3, #0
 8002ec4:	e000      	b.n	8002ec8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8002ec6:	2302      	movs	r3, #2
  }
}
 8002ec8:	4618      	mov	r0, r3
 8002eca:	3728      	adds	r7, #40	@ 0x28
 8002ecc:	46bd      	mov	sp, r7
 8002ece:	bd80      	pop	{r7, pc}
 8002ed0:	00010004 	.word	0x00010004

08002ed4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8002ed4:	b580      	push	{r7, lr}
 8002ed6:	b088      	sub	sp, #32
 8002ed8:	af02      	add	r7, sp, #8
 8002eda:	60f8      	str	r0, [r7, #12]
 8002edc:	4608      	mov	r0, r1
 8002ede:	4611      	mov	r1, r2
 8002ee0:	461a      	mov	r2, r3
 8002ee2:	4603      	mov	r3, r0
 8002ee4:	817b      	strh	r3, [r7, #10]
 8002ee6:	460b      	mov	r3, r1
 8002ee8:	813b      	strh	r3, [r7, #8]
 8002eea:	4613      	mov	r3, r2
 8002eec:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8002eee:	f7ff f80b 	bl	8001f08 <HAL_GetTick>
 8002ef2:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8002ef4:	68fb      	ldr	r3, [r7, #12]
 8002ef6:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002efa:	b2db      	uxtb	r3, r3
 8002efc:	2b20      	cmp	r3, #32
 8002efe:	f040 80d9 	bne.w	80030b4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8002f02:	697b      	ldr	r3, [r7, #20]
 8002f04:	9300      	str	r3, [sp, #0]
 8002f06:	2319      	movs	r3, #25
 8002f08:	2201      	movs	r2, #1
 8002f0a:	496d      	ldr	r1, [pc, #436]	@ (80030c0 <HAL_I2C_Mem_Write+0x1ec>)
 8002f0c:	68f8      	ldr	r0, [r7, #12]
 8002f0e:	f000 fddb 	bl	8003ac8 <I2C_WaitOnFlagUntilTimeout>
 8002f12:	4603      	mov	r3, r0
 8002f14:	2b00      	cmp	r3, #0
 8002f16:	d001      	beq.n	8002f1c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8002f18:	2302      	movs	r3, #2
 8002f1a:	e0cc      	b.n	80030b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8002f1c:	68fb      	ldr	r3, [r7, #12]
 8002f1e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8002f22:	2b01      	cmp	r3, #1
 8002f24:	d101      	bne.n	8002f2a <HAL_I2C_Mem_Write+0x56>
 8002f26:	2302      	movs	r3, #2
 8002f28:	e0c5      	b.n	80030b6 <HAL_I2C_Mem_Write+0x1e2>
 8002f2a:	68fb      	ldr	r3, [r7, #12]
 8002f2c:	2201      	movs	r2, #1
 8002f2e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8002f32:	68fb      	ldr	r3, [r7, #12]
 8002f34:	681b      	ldr	r3, [r3, #0]
 8002f36:	681b      	ldr	r3, [r3, #0]
 8002f38:	f003 0301 	and.w	r3, r3, #1
 8002f3c:	2b01      	cmp	r3, #1
 8002f3e:	d007      	beq.n	8002f50 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8002f40:	68fb      	ldr	r3, [r7, #12]
 8002f42:	681b      	ldr	r3, [r3, #0]
 8002f44:	681a      	ldr	r2, [r3, #0]
 8002f46:	68fb      	ldr	r3, [r7, #12]
 8002f48:	681b      	ldr	r3, [r3, #0]
 8002f4a:	f042 0201 	orr.w	r2, r2, #1
 8002f4e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	681b      	ldr	r3, [r3, #0]
 8002f54:	681a      	ldr	r2, [r3, #0]
 8002f56:	68fb      	ldr	r3, [r7, #12]
 8002f58:	681b      	ldr	r3, [r3, #0]
 8002f5a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8002f5e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8002f60:	68fb      	ldr	r3, [r7, #12]
 8002f62:	2221      	movs	r2, #33	@ 0x21
 8002f64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8002f68:	68fb      	ldr	r3, [r7, #12]
 8002f6a:	2240      	movs	r2, #64	@ 0x40
 8002f6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8002f70:	68fb      	ldr	r3, [r7, #12]
 8002f72:	2200      	movs	r2, #0
 8002f74:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8002f76:	68fb      	ldr	r3, [r7, #12]
 8002f78:	6a3a      	ldr	r2, [r7, #32]
 8002f7a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8002f7c:	68fb      	ldr	r3, [r7, #12]
 8002f7e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 8002f80:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8002f82:	68fb      	ldr	r3, [r7, #12]
 8002f84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8002f86:	b29a      	uxth	r2, r3
 8002f88:	68fb      	ldr	r3, [r7, #12]
 8002f8a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8002f8c:	68fb      	ldr	r3, [r7, #12]
 8002f8e:	4a4d      	ldr	r2, [pc, #308]	@ (80030c4 <HAL_I2C_Mem_Write+0x1f0>)
 8002f90:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8002f92:	88f8      	ldrh	r0, [r7, #6]
 8002f94:	893a      	ldrh	r2, [r7, #8]
 8002f96:	8979      	ldrh	r1, [r7, #10]
 8002f98:	697b      	ldr	r3, [r7, #20]
 8002f9a:	9301      	str	r3, [sp, #4]
 8002f9c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002f9e:	9300      	str	r3, [sp, #0]
 8002fa0:	4603      	mov	r3, r0
 8002fa2:	68f8      	ldr	r0, [r7, #12]
 8002fa4:	f000 fc12 	bl	80037cc <I2C_RequestMemoryWrite>
 8002fa8:	4603      	mov	r3, r0
 8002faa:	2b00      	cmp	r3, #0
 8002fac:	d052      	beq.n	8003054 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8002fae:	2301      	movs	r3, #1
 8002fb0:	e081      	b.n	80030b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8002fb2:	697a      	ldr	r2, [r7, #20]
 8002fb4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002fb6:	68f8      	ldr	r0, [r7, #12]
 8002fb8:	f000 fea0 	bl	8003cfc <I2C_WaitOnTXEFlagUntilTimeout>
 8002fbc:	4603      	mov	r3, r0
 8002fbe:	2b00      	cmp	r3, #0
 8002fc0:	d00d      	beq.n	8002fde <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8002fc2:	68fb      	ldr	r3, [r7, #12]
 8002fc4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002fc6:	2b04      	cmp	r3, #4
 8002fc8:	d107      	bne.n	8002fda <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8002fca:	68fb      	ldr	r3, [r7, #12]
 8002fcc:	681b      	ldr	r3, [r3, #0]
 8002fce:	681a      	ldr	r2, [r3, #0]
 8002fd0:	68fb      	ldr	r3, [r7, #12]
 8002fd2:	681b      	ldr	r3, [r3, #0]
 8002fd4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8002fd8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8002fda:	2301      	movs	r3, #1
 8002fdc:	e06b      	b.n	80030b6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8002fde:	68fb      	ldr	r3, [r7, #12]
 8002fe0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fe2:	781a      	ldrb	r2, [r3, #0]
 8002fe4:	68fb      	ldr	r3, [r7, #12]
 8002fe6:	681b      	ldr	r3, [r3, #0]
 8002fe8:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8002fea:	68fb      	ldr	r3, [r7, #12]
 8002fec:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8002fee:	1c5a      	adds	r2, r3, #1
 8002ff0:	68fb      	ldr	r3, [r7, #12]
 8002ff2:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8002ff4:	68fb      	ldr	r3, [r7, #12]
 8002ff6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8002ff8:	3b01      	subs	r3, #1
 8002ffa:	b29a      	uxth	r2, r3
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003000:	68fb      	ldr	r3, [r7, #12]
 8003002:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003004:	b29b      	uxth	r3, r3
 8003006:	3b01      	subs	r3, #1
 8003008:	b29a      	uxth	r2, r3
 800300a:	68fb      	ldr	r3, [r7, #12]
 800300c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800300e:	68fb      	ldr	r3, [r7, #12]
 8003010:	681b      	ldr	r3, [r3, #0]
 8003012:	695b      	ldr	r3, [r3, #20]
 8003014:	f003 0304 	and.w	r3, r3, #4
 8003018:	2b04      	cmp	r3, #4
 800301a:	d11b      	bne.n	8003054 <HAL_I2C_Mem_Write+0x180>
 800301c:	68fb      	ldr	r3, [r7, #12]
 800301e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003020:	2b00      	cmp	r3, #0
 8003022:	d017      	beq.n	8003054 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003024:	68fb      	ldr	r3, [r7, #12]
 8003026:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003028:	781a      	ldrb	r2, [r3, #0]
 800302a:	68fb      	ldr	r3, [r7, #12]
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003030:	68fb      	ldr	r3, [r7, #12]
 8003032:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003034:	1c5a      	adds	r2, r3, #1
 8003036:	68fb      	ldr	r3, [r7, #12]
 8003038:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800303a:	68fb      	ldr	r3, [r7, #12]
 800303c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800303e:	3b01      	subs	r3, #1
 8003040:	b29a      	uxth	r2, r3
 8003042:	68fb      	ldr	r3, [r7, #12]
 8003044:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003046:	68fb      	ldr	r3, [r7, #12]
 8003048:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800304a:	b29b      	uxth	r3, r3
 800304c:	3b01      	subs	r3, #1
 800304e:	b29a      	uxth	r2, r3
 8003050:	68fb      	ldr	r3, [r7, #12]
 8003052:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003054:	68fb      	ldr	r3, [r7, #12]
 8003056:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003058:	2b00      	cmp	r3, #0
 800305a:	d1aa      	bne.n	8002fb2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800305c:	697a      	ldr	r2, [r7, #20]
 800305e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003060:	68f8      	ldr	r0, [r7, #12]
 8003062:	f000 fe93 	bl	8003d8c <I2C_WaitOnBTFFlagUntilTimeout>
 8003066:	4603      	mov	r3, r0
 8003068:	2b00      	cmp	r3, #0
 800306a:	d00d      	beq.n	8003088 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800306c:	68fb      	ldr	r3, [r7, #12]
 800306e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003070:	2b04      	cmp	r3, #4
 8003072:	d107      	bne.n	8003084 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003074:	68fb      	ldr	r3, [r7, #12]
 8003076:	681b      	ldr	r3, [r3, #0]
 8003078:	681a      	ldr	r2, [r3, #0]
 800307a:	68fb      	ldr	r3, [r7, #12]
 800307c:	681b      	ldr	r3, [r3, #0]
 800307e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003082:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003084:	2301      	movs	r3, #1
 8003086:	e016      	b.n	80030b6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003088:	68fb      	ldr	r3, [r7, #12]
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	681a      	ldr	r2, [r3, #0]
 800308e:	68fb      	ldr	r3, [r7, #12]
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003096:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003098:	68fb      	ldr	r3, [r7, #12]
 800309a:	2220      	movs	r2, #32
 800309c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80030a0:	68fb      	ldr	r3, [r7, #12]
 80030a2:	2200      	movs	r2, #0
 80030a4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80030a8:	68fb      	ldr	r3, [r7, #12]
 80030aa:	2200      	movs	r2, #0
 80030ac:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80030b0:	2300      	movs	r3, #0
 80030b2:	e000      	b.n	80030b6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80030b4:	2302      	movs	r3, #2
  }
}
 80030b6:	4618      	mov	r0, r3
 80030b8:	3718      	adds	r7, #24
 80030ba:	46bd      	mov	sp, r7
 80030bc:	bd80      	pop	{r7, pc}
 80030be:	bf00      	nop
 80030c0:	00100002 	.word	0x00100002
 80030c4:	ffff0000 	.word	0xffff0000

080030c8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80030c8:	b580      	push	{r7, lr}
 80030ca:	b08c      	sub	sp, #48	@ 0x30
 80030cc:	af02      	add	r7, sp, #8
 80030ce:	60f8      	str	r0, [r7, #12]
 80030d0:	4608      	mov	r0, r1
 80030d2:	4611      	mov	r1, r2
 80030d4:	461a      	mov	r2, r3
 80030d6:	4603      	mov	r3, r0
 80030d8:	817b      	strh	r3, [r7, #10]
 80030da:	460b      	mov	r3, r1
 80030dc:	813b      	strh	r3, [r7, #8]
 80030de:	4613      	mov	r3, r2
 80030e0:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80030e2:	f7fe ff11 	bl	8001f08 <HAL_GetTick>
 80030e6:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 80030ee:	b2db      	uxtb	r3, r3
 80030f0:	2b20      	cmp	r3, #32
 80030f2:	f040 8214 	bne.w	800351e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 80030f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80030f8:	9300      	str	r3, [sp, #0]
 80030fa:	2319      	movs	r3, #25
 80030fc:	2201      	movs	r2, #1
 80030fe:	497b      	ldr	r1, [pc, #492]	@ (80032ec <HAL_I2C_Mem_Read+0x224>)
 8003100:	68f8      	ldr	r0, [r7, #12]
 8003102:	f000 fce1 	bl	8003ac8 <I2C_WaitOnFlagUntilTimeout>
 8003106:	4603      	mov	r3, r0
 8003108:	2b00      	cmp	r3, #0
 800310a:	d001      	beq.n	8003110 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800310c:	2302      	movs	r3, #2
 800310e:	e207      	b.n	8003520 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003110:	68fb      	ldr	r3, [r7, #12]
 8003112:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003116:	2b01      	cmp	r3, #1
 8003118:	d101      	bne.n	800311e <HAL_I2C_Mem_Read+0x56>
 800311a:	2302      	movs	r3, #2
 800311c:	e200      	b.n	8003520 <HAL_I2C_Mem_Read+0x458>
 800311e:	68fb      	ldr	r3, [r7, #12]
 8003120:	2201      	movs	r2, #1
 8003122:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003126:	68fb      	ldr	r3, [r7, #12]
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	681b      	ldr	r3, [r3, #0]
 800312c:	f003 0301 	and.w	r3, r3, #1
 8003130:	2b01      	cmp	r3, #1
 8003132:	d007      	beq.n	8003144 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	681b      	ldr	r3, [r3, #0]
 8003138:	681a      	ldr	r2, [r3, #0]
 800313a:	68fb      	ldr	r3, [r7, #12]
 800313c:	681b      	ldr	r3, [r3, #0]
 800313e:	f042 0201 	orr.w	r2, r2, #1
 8003142:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003144:	68fb      	ldr	r3, [r7, #12]
 8003146:	681b      	ldr	r3, [r3, #0]
 8003148:	681a      	ldr	r2, [r3, #0]
 800314a:	68fb      	ldr	r3, [r7, #12]
 800314c:	681b      	ldr	r3, [r3, #0]
 800314e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003152:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003154:	68fb      	ldr	r3, [r7, #12]
 8003156:	2222      	movs	r2, #34	@ 0x22
 8003158:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800315c:	68fb      	ldr	r3, [r7, #12]
 800315e:	2240      	movs	r2, #64	@ 0x40
 8003160:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003164:	68fb      	ldr	r3, [r7, #12]
 8003166:	2200      	movs	r2, #0
 8003168:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800316a:	68fb      	ldr	r3, [r7, #12]
 800316c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800316e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003170:	68fb      	ldr	r3, [r7, #12]
 8003172:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003174:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003176:	68fb      	ldr	r3, [r7, #12]
 8003178:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800317a:	b29a      	uxth	r2, r3
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003180:	68fb      	ldr	r3, [r7, #12]
 8003182:	4a5b      	ldr	r2, [pc, #364]	@ (80032f0 <HAL_I2C_Mem_Read+0x228>)
 8003184:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003186:	88f8      	ldrh	r0, [r7, #6]
 8003188:	893a      	ldrh	r2, [r7, #8]
 800318a:	8979      	ldrh	r1, [r7, #10]
 800318c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800318e:	9301      	str	r3, [sp, #4]
 8003190:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003192:	9300      	str	r3, [sp, #0]
 8003194:	4603      	mov	r3, r0
 8003196:	68f8      	ldr	r0, [r7, #12]
 8003198:	f000 fbae 	bl	80038f8 <I2C_RequestMemoryRead>
 800319c:	4603      	mov	r3, r0
 800319e:	2b00      	cmp	r3, #0
 80031a0:	d001      	beq.n	80031a6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80031a2:	2301      	movs	r3, #1
 80031a4:	e1bc      	b.n	8003520 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80031a6:	68fb      	ldr	r3, [r7, #12]
 80031a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031aa:	2b00      	cmp	r3, #0
 80031ac:	d113      	bne.n	80031d6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ae:	2300      	movs	r3, #0
 80031b0:	623b      	str	r3, [r7, #32]
 80031b2:	68fb      	ldr	r3, [r7, #12]
 80031b4:	681b      	ldr	r3, [r3, #0]
 80031b6:	695b      	ldr	r3, [r3, #20]
 80031b8:	623b      	str	r3, [r7, #32]
 80031ba:	68fb      	ldr	r3, [r7, #12]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	699b      	ldr	r3, [r3, #24]
 80031c0:	623b      	str	r3, [r7, #32]
 80031c2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80031c4:	68fb      	ldr	r3, [r7, #12]
 80031c6:	681b      	ldr	r3, [r3, #0]
 80031c8:	681a      	ldr	r2, [r3, #0]
 80031ca:	68fb      	ldr	r3, [r7, #12]
 80031cc:	681b      	ldr	r3, [r3, #0]
 80031ce:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80031d2:	601a      	str	r2, [r3, #0]
 80031d4:	e190      	b.n	80034f8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80031d6:	68fb      	ldr	r3, [r7, #12]
 80031d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80031da:	2b01      	cmp	r3, #1
 80031dc:	d11b      	bne.n	8003216 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80031de:	68fb      	ldr	r3, [r7, #12]
 80031e0:	681b      	ldr	r3, [r3, #0]
 80031e2:	681a      	ldr	r2, [r3, #0]
 80031e4:	68fb      	ldr	r3, [r7, #12]
 80031e6:	681b      	ldr	r3, [r3, #0]
 80031e8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80031ec:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80031ee:	2300      	movs	r3, #0
 80031f0:	61fb      	str	r3, [r7, #28]
 80031f2:	68fb      	ldr	r3, [r7, #12]
 80031f4:	681b      	ldr	r3, [r3, #0]
 80031f6:	695b      	ldr	r3, [r3, #20]
 80031f8:	61fb      	str	r3, [r7, #28]
 80031fa:	68fb      	ldr	r3, [r7, #12]
 80031fc:	681b      	ldr	r3, [r3, #0]
 80031fe:	699b      	ldr	r3, [r3, #24]
 8003200:	61fb      	str	r3, [r7, #28]
 8003202:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003204:	68fb      	ldr	r3, [r7, #12]
 8003206:	681b      	ldr	r3, [r3, #0]
 8003208:	681a      	ldr	r2, [r3, #0]
 800320a:	68fb      	ldr	r3, [r7, #12]
 800320c:	681b      	ldr	r3, [r3, #0]
 800320e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003212:	601a      	str	r2, [r3, #0]
 8003214:	e170      	b.n	80034f8 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003216:	68fb      	ldr	r3, [r7, #12]
 8003218:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800321a:	2b02      	cmp	r3, #2
 800321c:	d11b      	bne.n	8003256 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800321e:	68fb      	ldr	r3, [r7, #12]
 8003220:	681b      	ldr	r3, [r3, #0]
 8003222:	681a      	ldr	r2, [r3, #0]
 8003224:	68fb      	ldr	r3, [r7, #12]
 8003226:	681b      	ldr	r3, [r3, #0]
 8003228:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800322c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800322e:	68fb      	ldr	r3, [r7, #12]
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	681a      	ldr	r2, [r3, #0]
 8003234:	68fb      	ldr	r3, [r7, #12]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800323c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800323e:	2300      	movs	r3, #0
 8003240:	61bb      	str	r3, [r7, #24]
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	681b      	ldr	r3, [r3, #0]
 8003246:	695b      	ldr	r3, [r3, #20]
 8003248:	61bb      	str	r3, [r7, #24]
 800324a:	68fb      	ldr	r3, [r7, #12]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	699b      	ldr	r3, [r3, #24]
 8003250:	61bb      	str	r3, [r7, #24]
 8003252:	69bb      	ldr	r3, [r7, #24]
 8003254:	e150      	b.n	80034f8 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003256:	2300      	movs	r3, #0
 8003258:	617b      	str	r3, [r7, #20]
 800325a:	68fb      	ldr	r3, [r7, #12]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	695b      	ldr	r3, [r3, #20]
 8003260:	617b      	str	r3, [r7, #20]
 8003262:	68fb      	ldr	r3, [r7, #12]
 8003264:	681b      	ldr	r3, [r3, #0]
 8003266:	699b      	ldr	r3, [r3, #24]
 8003268:	617b      	str	r3, [r7, #20]
 800326a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800326c:	e144      	b.n	80034f8 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800326e:	68fb      	ldr	r3, [r7, #12]
 8003270:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003272:	2b03      	cmp	r3, #3
 8003274:	f200 80f1 	bhi.w	800345a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003278:	68fb      	ldr	r3, [r7, #12]
 800327a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800327c:	2b01      	cmp	r3, #1
 800327e:	d123      	bne.n	80032c8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003280:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003282:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003284:	68f8      	ldr	r0, [r7, #12]
 8003286:	f000 fdc9 	bl	8003e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 800328a:	4603      	mov	r3, r0
 800328c:	2b00      	cmp	r3, #0
 800328e:	d001      	beq.n	8003294 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003290:	2301      	movs	r3, #1
 8003292:	e145      	b.n	8003520 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003294:	68fb      	ldr	r3, [r7, #12]
 8003296:	681b      	ldr	r3, [r3, #0]
 8003298:	691a      	ldr	r2, [r3, #16]
 800329a:	68fb      	ldr	r3, [r7, #12]
 800329c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800329e:	b2d2      	uxtb	r2, r2
 80032a0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80032a6:	1c5a      	adds	r2, r3, #1
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80032ac:	68fb      	ldr	r3, [r7, #12]
 80032ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032b0:	3b01      	subs	r3, #1
 80032b2:	b29a      	uxth	r2, r3
 80032b4:	68fb      	ldr	r3, [r7, #12]
 80032b6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80032b8:	68fb      	ldr	r3, [r7, #12]
 80032ba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032bc:	b29b      	uxth	r3, r3
 80032be:	3b01      	subs	r3, #1
 80032c0:	b29a      	uxth	r2, r3
 80032c2:	68fb      	ldr	r3, [r7, #12]
 80032c4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80032c6:	e117      	b.n	80034f8 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80032c8:	68fb      	ldr	r3, [r7, #12]
 80032ca:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80032cc:	2b02      	cmp	r3, #2
 80032ce:	d14e      	bne.n	800336e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80032d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80032d2:	9300      	str	r3, [sp, #0]
 80032d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80032d6:	2200      	movs	r2, #0
 80032d8:	4906      	ldr	r1, [pc, #24]	@ (80032f4 <HAL_I2C_Mem_Read+0x22c>)
 80032da:	68f8      	ldr	r0, [r7, #12]
 80032dc:	f000 fbf4 	bl	8003ac8 <I2C_WaitOnFlagUntilTimeout>
 80032e0:	4603      	mov	r3, r0
 80032e2:	2b00      	cmp	r3, #0
 80032e4:	d008      	beq.n	80032f8 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 80032e6:	2301      	movs	r3, #1
 80032e8:	e11a      	b.n	8003520 <HAL_I2C_Mem_Read+0x458>
 80032ea:	bf00      	nop
 80032ec:	00100002 	.word	0x00100002
 80032f0:	ffff0000 	.word	0xffff0000
 80032f4:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032f8:	68fb      	ldr	r3, [r7, #12]
 80032fa:	681b      	ldr	r3, [r3, #0]
 80032fc:	681a      	ldr	r2, [r3, #0]
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003306:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003308:	68fb      	ldr	r3, [r7, #12]
 800330a:	681b      	ldr	r3, [r3, #0]
 800330c:	691a      	ldr	r2, [r3, #16]
 800330e:	68fb      	ldr	r3, [r7, #12]
 8003310:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003312:	b2d2      	uxtb	r2, r2
 8003314:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003316:	68fb      	ldr	r3, [r7, #12]
 8003318:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800331a:	1c5a      	adds	r2, r3, #1
 800331c:	68fb      	ldr	r3, [r7, #12]
 800331e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003320:	68fb      	ldr	r3, [r7, #12]
 8003322:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003324:	3b01      	subs	r3, #1
 8003326:	b29a      	uxth	r2, r3
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003330:	b29b      	uxth	r3, r3
 8003332:	3b01      	subs	r3, #1
 8003334:	b29a      	uxth	r2, r3
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800333a:	68fb      	ldr	r3, [r7, #12]
 800333c:	681b      	ldr	r3, [r3, #0]
 800333e:	691a      	ldr	r2, [r3, #16]
 8003340:	68fb      	ldr	r3, [r7, #12]
 8003342:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003344:	b2d2      	uxtb	r2, r2
 8003346:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003348:	68fb      	ldr	r3, [r7, #12]
 800334a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800334c:	1c5a      	adds	r2, r3, #1
 800334e:	68fb      	ldr	r3, [r7, #12]
 8003350:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003356:	3b01      	subs	r3, #1
 8003358:	b29a      	uxth	r2, r3
 800335a:	68fb      	ldr	r3, [r7, #12]
 800335c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003362:	b29b      	uxth	r3, r3
 8003364:	3b01      	subs	r3, #1
 8003366:	b29a      	uxth	r2, r3
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800336c:	e0c4      	b.n	80034f8 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800336e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003370:	9300      	str	r3, [sp, #0]
 8003372:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003374:	2200      	movs	r2, #0
 8003376:	496c      	ldr	r1, [pc, #432]	@ (8003528 <HAL_I2C_Mem_Read+0x460>)
 8003378:	68f8      	ldr	r0, [r7, #12]
 800337a:	f000 fba5 	bl	8003ac8 <I2C_WaitOnFlagUntilTimeout>
 800337e:	4603      	mov	r3, r0
 8003380:	2b00      	cmp	r3, #0
 8003382:	d001      	beq.n	8003388 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003384:	2301      	movs	r3, #1
 8003386:	e0cb      	b.n	8003520 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	681b      	ldr	r3, [r3, #0]
 800338c:	681a      	ldr	r2, [r3, #0]
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	681b      	ldr	r3, [r3, #0]
 8003392:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003396:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	691a      	ldr	r2, [r3, #16]
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033a2:	b2d2      	uxtb	r2, r2
 80033a4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033aa:	1c5a      	adds	r2, r3, #1
 80033ac:	68fb      	ldr	r3, [r7, #12]
 80033ae:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80033b0:	68fb      	ldr	r3, [r7, #12]
 80033b2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b4:	3b01      	subs	r3, #1
 80033b6:	b29a      	uxth	r2, r3
 80033b8:	68fb      	ldr	r3, [r7, #12]
 80033ba:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80033c0:	b29b      	uxth	r3, r3
 80033c2:	3b01      	subs	r3, #1
 80033c4:	b29a      	uxth	r2, r3
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80033ca:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80033cc:	9300      	str	r3, [sp, #0]
 80033ce:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80033d0:	2200      	movs	r2, #0
 80033d2:	4955      	ldr	r1, [pc, #340]	@ (8003528 <HAL_I2C_Mem_Read+0x460>)
 80033d4:	68f8      	ldr	r0, [r7, #12]
 80033d6:	f000 fb77 	bl	8003ac8 <I2C_WaitOnFlagUntilTimeout>
 80033da:	4603      	mov	r3, r0
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d001      	beq.n	80033e4 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 80033e0:	2301      	movs	r3, #1
 80033e2:	e09d      	b.n	8003520 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033e4:	68fb      	ldr	r3, [r7, #12]
 80033e6:	681b      	ldr	r3, [r3, #0]
 80033e8:	681a      	ldr	r2, [r3, #0]
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033f2:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80033f4:	68fb      	ldr	r3, [r7, #12]
 80033f6:	681b      	ldr	r3, [r3, #0]
 80033f8:	691a      	ldr	r2, [r3, #16]
 80033fa:	68fb      	ldr	r3, [r7, #12]
 80033fc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80033fe:	b2d2      	uxtb	r2, r2
 8003400:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003402:	68fb      	ldr	r3, [r7, #12]
 8003404:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003406:	1c5a      	adds	r2, r3, #1
 8003408:	68fb      	ldr	r3, [r7, #12]
 800340a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800340c:	68fb      	ldr	r3, [r7, #12]
 800340e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003410:	3b01      	subs	r3, #1
 8003412:	b29a      	uxth	r2, r3
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003418:	68fb      	ldr	r3, [r7, #12]
 800341a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800341c:	b29b      	uxth	r3, r3
 800341e:	3b01      	subs	r3, #1
 8003420:	b29a      	uxth	r2, r3
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003426:	68fb      	ldr	r3, [r7, #12]
 8003428:	681b      	ldr	r3, [r3, #0]
 800342a:	691a      	ldr	r2, [r3, #16]
 800342c:	68fb      	ldr	r3, [r7, #12]
 800342e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003430:	b2d2      	uxtb	r2, r2
 8003432:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003434:	68fb      	ldr	r3, [r7, #12]
 8003436:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003438:	1c5a      	adds	r2, r3, #1
 800343a:	68fb      	ldr	r3, [r7, #12]
 800343c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003442:	3b01      	subs	r3, #1
 8003444:	b29a      	uxth	r2, r3
 8003446:	68fb      	ldr	r3, [r7, #12]
 8003448:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800344e:	b29b      	uxth	r3, r3
 8003450:	3b01      	subs	r3, #1
 8003452:	b29a      	uxth	r2, r3
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003458:	e04e      	b.n	80034f8 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800345a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800345c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800345e:	68f8      	ldr	r0, [r7, #12]
 8003460:	f000 fcdc 	bl	8003e1c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003464:	4603      	mov	r3, r0
 8003466:	2b00      	cmp	r3, #0
 8003468:	d001      	beq.n	800346e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e058      	b.n	8003520 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800346e:	68fb      	ldr	r3, [r7, #12]
 8003470:	681b      	ldr	r3, [r3, #0]
 8003472:	691a      	ldr	r2, [r3, #16]
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003478:	b2d2      	uxtb	r2, r2
 800347a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800347c:	68fb      	ldr	r3, [r7, #12]
 800347e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003480:	1c5a      	adds	r2, r3, #1
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003486:	68fb      	ldr	r3, [r7, #12]
 8003488:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800348a:	3b01      	subs	r3, #1
 800348c:	b29a      	uxth	r2, r3
 800348e:	68fb      	ldr	r3, [r7, #12]
 8003490:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003496:	b29b      	uxth	r3, r3
 8003498:	3b01      	subs	r3, #1
 800349a:	b29a      	uxth	r2, r3
 800349c:	68fb      	ldr	r3, [r7, #12]
 800349e:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	695b      	ldr	r3, [r3, #20]
 80034a6:	f003 0304 	and.w	r3, r3, #4
 80034aa:	2b04      	cmp	r3, #4
 80034ac:	d124      	bne.n	80034f8 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034b2:	2b03      	cmp	r3, #3
 80034b4:	d107      	bne.n	80034c6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80034b6:	68fb      	ldr	r3, [r7, #12]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	681a      	ldr	r2, [r3, #0]
 80034bc:	68fb      	ldr	r3, [r7, #12]
 80034be:	681b      	ldr	r3, [r3, #0]
 80034c0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80034c4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80034c6:	68fb      	ldr	r3, [r7, #12]
 80034c8:	681b      	ldr	r3, [r3, #0]
 80034ca:	691a      	ldr	r2, [r3, #16]
 80034cc:	68fb      	ldr	r3, [r7, #12]
 80034ce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d0:	b2d2      	uxtb	r2, r2
 80034d2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80034d8:	1c5a      	adds	r2, r3, #1
 80034da:	68fb      	ldr	r3, [r7, #12]
 80034dc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034e2:	3b01      	subs	r3, #1
 80034e4:	b29a      	uxth	r2, r3
 80034e6:	68fb      	ldr	r3, [r7, #12]
 80034e8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80034ea:	68fb      	ldr	r3, [r7, #12]
 80034ec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034ee:	b29b      	uxth	r3, r3
 80034f0:	3b01      	subs	r3, #1
 80034f2:	b29a      	uxth	r2, r3
 80034f4:	68fb      	ldr	r3, [r7, #12]
 80034f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80034f8:	68fb      	ldr	r3, [r7, #12]
 80034fa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034fc:	2b00      	cmp	r3, #0
 80034fe:	f47f aeb6 	bne.w	800326e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	2220      	movs	r2, #32
 8003506:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800350a:	68fb      	ldr	r3, [r7, #12]
 800350c:	2200      	movs	r2, #0
 800350e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003512:	68fb      	ldr	r3, [r7, #12]
 8003514:	2200      	movs	r2, #0
 8003516:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800351a:	2300      	movs	r3, #0
 800351c:	e000      	b.n	8003520 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800351e:	2302      	movs	r3, #2
  }
}
 8003520:	4618      	mov	r0, r3
 8003522:	3728      	adds	r7, #40	@ 0x28
 8003524:	46bd      	mov	sp, r7
 8003526:	bd80      	pop	{r7, pc}
 8003528:	00010004 	.word	0x00010004

0800352c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800352c:	b580      	push	{r7, lr}
 800352e:	b088      	sub	sp, #32
 8003530:	af02      	add	r7, sp, #8
 8003532:	60f8      	str	r0, [r7, #12]
 8003534:	607a      	str	r2, [r7, #4]
 8003536:	603b      	str	r3, [r7, #0]
 8003538:	460b      	mov	r3, r1
 800353a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800353c:	68fb      	ldr	r3, [r7, #12]
 800353e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003540:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003542:	697b      	ldr	r3, [r7, #20]
 8003544:	2b08      	cmp	r3, #8
 8003546:	d006      	beq.n	8003556 <I2C_MasterRequestWrite+0x2a>
 8003548:	697b      	ldr	r3, [r7, #20]
 800354a:	2b01      	cmp	r3, #1
 800354c:	d003      	beq.n	8003556 <I2C_MasterRequestWrite+0x2a>
 800354e:	697b      	ldr	r3, [r7, #20]
 8003550:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003554:	d108      	bne.n	8003568 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003556:	68fb      	ldr	r3, [r7, #12]
 8003558:	681b      	ldr	r3, [r3, #0]
 800355a:	681a      	ldr	r2, [r3, #0]
 800355c:	68fb      	ldr	r3, [r7, #12]
 800355e:	681b      	ldr	r3, [r3, #0]
 8003560:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003564:	601a      	str	r2, [r3, #0]
 8003566:	e00b      	b.n	8003580 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003568:	68fb      	ldr	r3, [r7, #12]
 800356a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800356c:	2b12      	cmp	r3, #18
 800356e:	d107      	bne.n	8003580 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003570:	68fb      	ldr	r3, [r7, #12]
 8003572:	681b      	ldr	r3, [r3, #0]
 8003574:	681a      	ldr	r2, [r3, #0]
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	681b      	ldr	r3, [r3, #0]
 800357a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800357e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003580:	683b      	ldr	r3, [r7, #0]
 8003582:	9300      	str	r3, [sp, #0]
 8003584:	687b      	ldr	r3, [r7, #4]
 8003586:	2200      	movs	r2, #0
 8003588:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800358c:	68f8      	ldr	r0, [r7, #12]
 800358e:	f000 fa9b 	bl	8003ac8 <I2C_WaitOnFlagUntilTimeout>
 8003592:	4603      	mov	r3, r0
 8003594:	2b00      	cmp	r3, #0
 8003596:	d00d      	beq.n	80035b4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003598:	68fb      	ldr	r3, [r7, #12]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	681b      	ldr	r3, [r3, #0]
 800359e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80035a2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80035a6:	d103      	bne.n	80035b0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80035a8:	68fb      	ldr	r3, [r7, #12]
 80035aa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80035ae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80035b0:	2303      	movs	r3, #3
 80035b2:	e035      	b.n	8003620 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80035b4:	68fb      	ldr	r3, [r7, #12]
 80035b6:	691b      	ldr	r3, [r3, #16]
 80035b8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80035bc:	d108      	bne.n	80035d0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80035be:	897b      	ldrh	r3, [r7, #10]
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	461a      	mov	r2, r3
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	681b      	ldr	r3, [r3, #0]
 80035c8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80035cc:	611a      	str	r2, [r3, #16]
 80035ce:	e01b      	b.n	8003608 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80035d0:	897b      	ldrh	r3, [r7, #10]
 80035d2:	11db      	asrs	r3, r3, #7
 80035d4:	b2db      	uxtb	r3, r3
 80035d6:	f003 0306 	and.w	r3, r3, #6
 80035da:	b2db      	uxtb	r3, r3
 80035dc:	f063 030f 	orn	r3, r3, #15
 80035e0:	b2da      	uxtb	r2, r3
 80035e2:	68fb      	ldr	r3, [r7, #12]
 80035e4:	681b      	ldr	r3, [r3, #0]
 80035e6:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80035e8:	683b      	ldr	r3, [r7, #0]
 80035ea:	687a      	ldr	r2, [r7, #4]
 80035ec:	490e      	ldr	r1, [pc, #56]	@ (8003628 <I2C_MasterRequestWrite+0xfc>)
 80035ee:	68f8      	ldr	r0, [r7, #12]
 80035f0:	f000 fae4 	bl	8003bbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80035f4:	4603      	mov	r3, r0
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d001      	beq.n	80035fe <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 80035fa:	2301      	movs	r3, #1
 80035fc:	e010      	b.n	8003620 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 80035fe:	897b      	ldrh	r3, [r7, #10]
 8003600:	b2da      	uxtb	r2, r3
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003608:	683b      	ldr	r3, [r7, #0]
 800360a:	687a      	ldr	r2, [r7, #4]
 800360c:	4907      	ldr	r1, [pc, #28]	@ (800362c <I2C_MasterRequestWrite+0x100>)
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 fad4 	bl	8003bbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d001      	beq.n	800361e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e000      	b.n	8003620 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800361e:	2300      	movs	r3, #0
}
 8003620:	4618      	mov	r0, r3
 8003622:	3718      	adds	r7, #24
 8003624:	46bd      	mov	sp, r7
 8003626:	bd80      	pop	{r7, pc}
 8003628:	00010008 	.word	0x00010008
 800362c:	00010002 	.word	0x00010002

08003630 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003630:	b580      	push	{r7, lr}
 8003632:	b088      	sub	sp, #32
 8003634:	af02      	add	r7, sp, #8
 8003636:	60f8      	str	r0, [r7, #12]
 8003638:	607a      	str	r2, [r7, #4]
 800363a:	603b      	str	r3, [r7, #0]
 800363c:	460b      	mov	r3, r1
 800363e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003644:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003646:	68fb      	ldr	r3, [r7, #12]
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	681a      	ldr	r2, [r3, #0]
 800364c:	68fb      	ldr	r3, [r7, #12]
 800364e:	681b      	ldr	r3, [r3, #0]
 8003650:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003654:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003656:	697b      	ldr	r3, [r7, #20]
 8003658:	2b08      	cmp	r3, #8
 800365a:	d006      	beq.n	800366a <I2C_MasterRequestRead+0x3a>
 800365c:	697b      	ldr	r3, [r7, #20]
 800365e:	2b01      	cmp	r3, #1
 8003660:	d003      	beq.n	800366a <I2C_MasterRequestRead+0x3a>
 8003662:	697b      	ldr	r3, [r7, #20]
 8003664:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003668:	d108      	bne.n	800367c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	681b      	ldr	r3, [r3, #0]
 800366e:	681a      	ldr	r2, [r3, #0]
 8003670:	68fb      	ldr	r3, [r7, #12]
 8003672:	681b      	ldr	r3, [r3, #0]
 8003674:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003678:	601a      	str	r2, [r3, #0]
 800367a:	e00b      	b.n	8003694 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003680:	2b11      	cmp	r3, #17
 8003682:	d107      	bne.n	8003694 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003684:	68fb      	ldr	r3, [r7, #12]
 8003686:	681b      	ldr	r3, [r3, #0]
 8003688:	681a      	ldr	r2, [r3, #0]
 800368a:	68fb      	ldr	r3, [r7, #12]
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003692:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003694:	683b      	ldr	r3, [r7, #0]
 8003696:	9300      	str	r3, [sp, #0]
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	2200      	movs	r2, #0
 800369c:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80036a0:	68f8      	ldr	r0, [r7, #12]
 80036a2:	f000 fa11 	bl	8003ac8 <I2C_WaitOnFlagUntilTimeout>
 80036a6:	4603      	mov	r3, r0
 80036a8:	2b00      	cmp	r3, #0
 80036aa:	d00d      	beq.n	80036c8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80036ac:	68fb      	ldr	r3, [r7, #12]
 80036ae:	681b      	ldr	r3, [r3, #0]
 80036b0:	681b      	ldr	r3, [r3, #0]
 80036b2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80036b6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80036ba:	d103      	bne.n	80036c4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80036c2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80036c4:	2303      	movs	r3, #3
 80036c6:	e079      	b.n	80037bc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	691b      	ldr	r3, [r3, #16]
 80036cc:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80036d0:	d108      	bne.n	80036e4 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80036d2:	897b      	ldrh	r3, [r7, #10]
 80036d4:	b2db      	uxtb	r3, r3
 80036d6:	f043 0301 	orr.w	r3, r3, #1
 80036da:	b2da      	uxtb	r2, r3
 80036dc:	68fb      	ldr	r3, [r7, #12]
 80036de:	681b      	ldr	r3, [r3, #0]
 80036e0:	611a      	str	r2, [r3, #16]
 80036e2:	e05f      	b.n	80037a4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80036e4:	897b      	ldrh	r3, [r7, #10]
 80036e6:	11db      	asrs	r3, r3, #7
 80036e8:	b2db      	uxtb	r3, r3
 80036ea:	f003 0306 	and.w	r3, r3, #6
 80036ee:	b2db      	uxtb	r3, r3
 80036f0:	f063 030f 	orn	r3, r3, #15
 80036f4:	b2da      	uxtb	r2, r3
 80036f6:	68fb      	ldr	r3, [r7, #12]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 80036fc:	683b      	ldr	r3, [r7, #0]
 80036fe:	687a      	ldr	r2, [r7, #4]
 8003700:	4930      	ldr	r1, [pc, #192]	@ (80037c4 <I2C_MasterRequestRead+0x194>)
 8003702:	68f8      	ldr	r0, [r7, #12]
 8003704:	f000 fa5a 	bl	8003bbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003708:	4603      	mov	r3, r0
 800370a:	2b00      	cmp	r3, #0
 800370c:	d001      	beq.n	8003712 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800370e:	2301      	movs	r3, #1
 8003710:	e054      	b.n	80037bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003712:	897b      	ldrh	r3, [r7, #10]
 8003714:	b2da      	uxtb	r2, r3
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	681b      	ldr	r3, [r3, #0]
 800371a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800371c:	683b      	ldr	r3, [r7, #0]
 800371e:	687a      	ldr	r2, [r7, #4]
 8003720:	4929      	ldr	r1, [pc, #164]	@ (80037c8 <I2C_MasterRequestRead+0x198>)
 8003722:	68f8      	ldr	r0, [r7, #12]
 8003724:	f000 fa4a 	bl	8003bbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003728:	4603      	mov	r3, r0
 800372a:	2b00      	cmp	r3, #0
 800372c:	d001      	beq.n	8003732 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800372e:	2301      	movs	r3, #1
 8003730:	e044      	b.n	80037bc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003732:	2300      	movs	r3, #0
 8003734:	613b      	str	r3, [r7, #16]
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	681b      	ldr	r3, [r3, #0]
 800373a:	695b      	ldr	r3, [r3, #20]
 800373c:	613b      	str	r3, [r7, #16]
 800373e:	68fb      	ldr	r3, [r7, #12]
 8003740:	681b      	ldr	r3, [r3, #0]
 8003742:	699b      	ldr	r3, [r3, #24]
 8003744:	613b      	str	r3, [r7, #16]
 8003746:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	681b      	ldr	r3, [r3, #0]
 800374c:	681a      	ldr	r2, [r3, #0]
 800374e:	68fb      	ldr	r3, [r7, #12]
 8003750:	681b      	ldr	r3, [r3, #0]
 8003752:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003756:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003758:	683b      	ldr	r3, [r7, #0]
 800375a:	9300      	str	r3, [sp, #0]
 800375c:	687b      	ldr	r3, [r7, #4]
 800375e:	2200      	movs	r2, #0
 8003760:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003764:	68f8      	ldr	r0, [r7, #12]
 8003766:	f000 f9af 	bl	8003ac8 <I2C_WaitOnFlagUntilTimeout>
 800376a:	4603      	mov	r3, r0
 800376c:	2b00      	cmp	r3, #0
 800376e:	d00d      	beq.n	800378c <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003770:	68fb      	ldr	r3, [r7, #12]
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	681b      	ldr	r3, [r3, #0]
 8003776:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800377a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800377e:	d103      	bne.n	8003788 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003780:	68fb      	ldr	r3, [r7, #12]
 8003782:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003786:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8003788:	2303      	movs	r3, #3
 800378a:	e017      	b.n	80037bc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 800378c:	897b      	ldrh	r3, [r7, #10]
 800378e:	11db      	asrs	r3, r3, #7
 8003790:	b2db      	uxtb	r3, r3
 8003792:	f003 0306 	and.w	r3, r3, #6
 8003796:	b2db      	uxtb	r3, r3
 8003798:	f063 030e 	orn	r3, r3, #14
 800379c:	b2da      	uxtb	r2, r3
 800379e:	68fb      	ldr	r3, [r7, #12]
 80037a0:	681b      	ldr	r3, [r3, #0]
 80037a2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80037a4:	683b      	ldr	r3, [r7, #0]
 80037a6:	687a      	ldr	r2, [r7, #4]
 80037a8:	4907      	ldr	r1, [pc, #28]	@ (80037c8 <I2C_MasterRequestRead+0x198>)
 80037aa:	68f8      	ldr	r0, [r7, #12]
 80037ac:	f000 fa06 	bl	8003bbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80037b0:	4603      	mov	r3, r0
 80037b2:	2b00      	cmp	r3, #0
 80037b4:	d001      	beq.n	80037ba <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80037b6:	2301      	movs	r3, #1
 80037b8:	e000      	b.n	80037bc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80037ba:	2300      	movs	r3, #0
}
 80037bc:	4618      	mov	r0, r3
 80037be:	3718      	adds	r7, #24
 80037c0:	46bd      	mov	sp, r7
 80037c2:	bd80      	pop	{r7, pc}
 80037c4:	00010008 	.word	0x00010008
 80037c8:	00010002 	.word	0x00010002

080037cc <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80037cc:	b580      	push	{r7, lr}
 80037ce:	b088      	sub	sp, #32
 80037d0:	af02      	add	r7, sp, #8
 80037d2:	60f8      	str	r0, [r7, #12]
 80037d4:	4608      	mov	r0, r1
 80037d6:	4611      	mov	r1, r2
 80037d8:	461a      	mov	r2, r3
 80037da:	4603      	mov	r3, r0
 80037dc:	817b      	strh	r3, [r7, #10]
 80037de:	460b      	mov	r3, r1
 80037e0:	813b      	strh	r3, [r7, #8]
 80037e2:	4613      	mov	r3, r2
 80037e4:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	681b      	ldr	r3, [r3, #0]
 80037ea:	681a      	ldr	r2, [r3, #0]
 80037ec:	68fb      	ldr	r3, [r7, #12]
 80037ee:	681b      	ldr	r3, [r3, #0]
 80037f0:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80037f4:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80037f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037f8:	9300      	str	r3, [sp, #0]
 80037fa:	6a3b      	ldr	r3, [r7, #32]
 80037fc:	2200      	movs	r2, #0
 80037fe:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003802:	68f8      	ldr	r0, [r7, #12]
 8003804:	f000 f960 	bl	8003ac8 <I2C_WaitOnFlagUntilTimeout>
 8003808:	4603      	mov	r3, r0
 800380a:	2b00      	cmp	r3, #0
 800380c:	d00d      	beq.n	800382a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	681b      	ldr	r3, [r3, #0]
 8003812:	681b      	ldr	r3, [r3, #0]
 8003814:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003818:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800381c:	d103      	bne.n	8003826 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003824:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003826:	2303      	movs	r3, #3
 8003828:	e05f      	b.n	80038ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 800382a:	897b      	ldrh	r3, [r7, #10]
 800382c:	b2db      	uxtb	r3, r3
 800382e:	461a      	mov	r2, r3
 8003830:	68fb      	ldr	r3, [r7, #12]
 8003832:	681b      	ldr	r3, [r3, #0]
 8003834:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003838:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800383a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800383c:	6a3a      	ldr	r2, [r7, #32]
 800383e:	492d      	ldr	r1, [pc, #180]	@ (80038f4 <I2C_RequestMemoryWrite+0x128>)
 8003840:	68f8      	ldr	r0, [r7, #12]
 8003842:	f000 f9bb 	bl	8003bbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003846:	4603      	mov	r3, r0
 8003848:	2b00      	cmp	r3, #0
 800384a:	d001      	beq.n	8003850 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 800384c:	2301      	movs	r3, #1
 800384e:	e04c      	b.n	80038ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003850:	2300      	movs	r3, #0
 8003852:	617b      	str	r3, [r7, #20]
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	681b      	ldr	r3, [r3, #0]
 8003858:	695b      	ldr	r3, [r3, #20]
 800385a:	617b      	str	r3, [r7, #20]
 800385c:	68fb      	ldr	r3, [r7, #12]
 800385e:	681b      	ldr	r3, [r3, #0]
 8003860:	699b      	ldr	r3, [r3, #24]
 8003862:	617b      	str	r3, [r7, #20]
 8003864:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003866:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003868:	6a39      	ldr	r1, [r7, #32]
 800386a:	68f8      	ldr	r0, [r7, #12]
 800386c:	f000 fa46 	bl	8003cfc <I2C_WaitOnTXEFlagUntilTimeout>
 8003870:	4603      	mov	r3, r0
 8003872:	2b00      	cmp	r3, #0
 8003874:	d00d      	beq.n	8003892 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003876:	68fb      	ldr	r3, [r7, #12]
 8003878:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800387a:	2b04      	cmp	r3, #4
 800387c:	d107      	bne.n	800388e <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800387e:	68fb      	ldr	r3, [r7, #12]
 8003880:	681b      	ldr	r3, [r3, #0]
 8003882:	681a      	ldr	r2, [r3, #0]
 8003884:	68fb      	ldr	r3, [r7, #12]
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800388c:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800388e:	2301      	movs	r3, #1
 8003890:	e02b      	b.n	80038ea <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8003892:	88fb      	ldrh	r3, [r7, #6]
 8003894:	2b01      	cmp	r3, #1
 8003896:	d105      	bne.n	80038a4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003898:	893b      	ldrh	r3, [r7, #8]
 800389a:	b2da      	uxtb	r2, r3
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	611a      	str	r2, [r3, #16]
 80038a2:	e021      	b.n	80038e8 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80038a4:	893b      	ldrh	r3, [r7, #8]
 80038a6:	0a1b      	lsrs	r3, r3, #8
 80038a8:	b29b      	uxth	r3, r3
 80038aa:	b2da      	uxtb	r2, r3
 80038ac:	68fb      	ldr	r3, [r7, #12]
 80038ae:	681b      	ldr	r3, [r3, #0]
 80038b0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80038b2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80038b4:	6a39      	ldr	r1, [r7, #32]
 80038b6:	68f8      	ldr	r0, [r7, #12]
 80038b8:	f000 fa20 	bl	8003cfc <I2C_WaitOnTXEFlagUntilTimeout>
 80038bc:	4603      	mov	r3, r0
 80038be:	2b00      	cmp	r3, #0
 80038c0:	d00d      	beq.n	80038de <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80038c2:	68fb      	ldr	r3, [r7, #12]
 80038c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80038c6:	2b04      	cmp	r3, #4
 80038c8:	d107      	bne.n	80038da <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80038ca:	68fb      	ldr	r3, [r7, #12]
 80038cc:	681b      	ldr	r3, [r3, #0]
 80038ce:	681a      	ldr	r2, [r3, #0]
 80038d0:	68fb      	ldr	r3, [r7, #12]
 80038d2:	681b      	ldr	r3, [r3, #0]
 80038d4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80038d8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80038da:	2301      	movs	r3, #1
 80038dc:	e005      	b.n	80038ea <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80038de:	893b      	ldrh	r3, [r7, #8]
 80038e0:	b2da      	uxtb	r2, r3
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 80038e8:	2300      	movs	r3, #0
}
 80038ea:	4618      	mov	r0, r3
 80038ec:	3718      	adds	r7, #24
 80038ee:	46bd      	mov	sp, r7
 80038f0:	bd80      	pop	{r7, pc}
 80038f2:	bf00      	nop
 80038f4:	00010002 	.word	0x00010002

080038f8 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80038f8:	b580      	push	{r7, lr}
 80038fa:	b088      	sub	sp, #32
 80038fc:	af02      	add	r7, sp, #8
 80038fe:	60f8      	str	r0, [r7, #12]
 8003900:	4608      	mov	r0, r1
 8003902:	4611      	mov	r1, r2
 8003904:	461a      	mov	r2, r3
 8003906:	4603      	mov	r3, r0
 8003908:	817b      	strh	r3, [r7, #10]
 800390a:	460b      	mov	r3, r1
 800390c:	813b      	strh	r3, [r7, #8]
 800390e:	4613      	mov	r3, r2
 8003910:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003912:	68fb      	ldr	r3, [r7, #12]
 8003914:	681b      	ldr	r3, [r3, #0]
 8003916:	681a      	ldr	r2, [r3, #0]
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	681b      	ldr	r3, [r3, #0]
 800391c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003920:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	681b      	ldr	r3, [r3, #0]
 8003926:	681a      	ldr	r2, [r3, #0]
 8003928:	68fb      	ldr	r3, [r7, #12]
 800392a:	681b      	ldr	r3, [r3, #0]
 800392c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003930:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003932:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003934:	9300      	str	r3, [sp, #0]
 8003936:	6a3b      	ldr	r3, [r7, #32]
 8003938:	2200      	movs	r2, #0
 800393a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800393e:	68f8      	ldr	r0, [r7, #12]
 8003940:	f000 f8c2 	bl	8003ac8 <I2C_WaitOnFlagUntilTimeout>
 8003944:	4603      	mov	r3, r0
 8003946:	2b00      	cmp	r3, #0
 8003948:	d00d      	beq.n	8003966 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800394a:	68fb      	ldr	r3, [r7, #12]
 800394c:	681b      	ldr	r3, [r3, #0]
 800394e:	681b      	ldr	r3, [r3, #0]
 8003950:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003954:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003958:	d103      	bne.n	8003962 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800395a:	68fb      	ldr	r3, [r7, #12]
 800395c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003960:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003962:	2303      	movs	r3, #3
 8003964:	e0aa      	b.n	8003abc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003966:	897b      	ldrh	r3, [r7, #10]
 8003968:	b2db      	uxtb	r3, r3
 800396a:	461a      	mov	r2, r3
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	681b      	ldr	r3, [r3, #0]
 8003970:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003974:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003976:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003978:	6a3a      	ldr	r2, [r7, #32]
 800397a:	4952      	ldr	r1, [pc, #328]	@ (8003ac4 <I2C_RequestMemoryRead+0x1cc>)
 800397c:	68f8      	ldr	r0, [r7, #12]
 800397e:	f000 f91d 	bl	8003bbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003982:	4603      	mov	r3, r0
 8003984:	2b00      	cmp	r3, #0
 8003986:	d001      	beq.n	800398c <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8003988:	2301      	movs	r3, #1
 800398a:	e097      	b.n	8003abc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800398c:	2300      	movs	r3, #0
 800398e:	617b      	str	r3, [r7, #20]
 8003990:	68fb      	ldr	r3, [r7, #12]
 8003992:	681b      	ldr	r3, [r3, #0]
 8003994:	695b      	ldr	r3, [r3, #20]
 8003996:	617b      	str	r3, [r7, #20]
 8003998:	68fb      	ldr	r3, [r7, #12]
 800399a:	681b      	ldr	r3, [r3, #0]
 800399c:	699b      	ldr	r3, [r3, #24]
 800399e:	617b      	str	r3, [r7, #20]
 80039a0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039a2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039a4:	6a39      	ldr	r1, [r7, #32]
 80039a6:	68f8      	ldr	r0, [r7, #12]
 80039a8:	f000 f9a8 	bl	8003cfc <I2C_WaitOnTXEFlagUntilTimeout>
 80039ac:	4603      	mov	r3, r0
 80039ae:	2b00      	cmp	r3, #0
 80039b0:	d00d      	beq.n	80039ce <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039b2:	68fb      	ldr	r3, [r7, #12]
 80039b4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039b6:	2b04      	cmp	r3, #4
 80039b8:	d107      	bne.n	80039ca <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80039ba:	68fb      	ldr	r3, [r7, #12]
 80039bc:	681b      	ldr	r3, [r3, #0]
 80039be:	681a      	ldr	r2, [r3, #0]
 80039c0:	68fb      	ldr	r3, [r7, #12]
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80039c8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80039ca:	2301      	movs	r3, #1
 80039cc:	e076      	b.n	8003abc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 80039ce:	88fb      	ldrh	r3, [r7, #6]
 80039d0:	2b01      	cmp	r3, #1
 80039d2:	d105      	bne.n	80039e0 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80039d4:	893b      	ldrh	r3, [r7, #8]
 80039d6:	b2da      	uxtb	r2, r3
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	681b      	ldr	r3, [r3, #0]
 80039dc:	611a      	str	r2, [r3, #16]
 80039de:	e021      	b.n	8003a24 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 80039e0:	893b      	ldrh	r3, [r7, #8]
 80039e2:	0a1b      	lsrs	r3, r3, #8
 80039e4:	b29b      	uxth	r3, r3
 80039e6:	b2da      	uxtb	r2, r3
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	681b      	ldr	r3, [r3, #0]
 80039ec:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80039ee:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80039f0:	6a39      	ldr	r1, [r7, #32]
 80039f2:	68f8      	ldr	r0, [r7, #12]
 80039f4:	f000 f982 	bl	8003cfc <I2C_WaitOnTXEFlagUntilTimeout>
 80039f8:	4603      	mov	r3, r0
 80039fa:	2b00      	cmp	r3, #0
 80039fc:	d00d      	beq.n	8003a1a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039fe:	68fb      	ldr	r3, [r7, #12]
 8003a00:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a02:	2b04      	cmp	r3, #4
 8003a04:	d107      	bne.n	8003a16 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	681a      	ldr	r2, [r3, #0]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a14:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a16:	2301      	movs	r3, #1
 8003a18:	e050      	b.n	8003abc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8003a1a:	893b      	ldrh	r3, [r7, #8]
 8003a1c:	b2da      	uxtb	r2, r3
 8003a1e:	68fb      	ldr	r3, [r7, #12]
 8003a20:	681b      	ldr	r3, [r3, #0]
 8003a22:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8003a24:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003a26:	6a39      	ldr	r1, [r7, #32]
 8003a28:	68f8      	ldr	r0, [r7, #12]
 8003a2a:	f000 f967 	bl	8003cfc <I2C_WaitOnTXEFlagUntilTimeout>
 8003a2e:	4603      	mov	r3, r0
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d00d      	beq.n	8003a50 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a38:	2b04      	cmp	r3, #4
 8003a3a:	d107      	bne.n	8003a4c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a3c:	68fb      	ldr	r3, [r7, #12]
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	681a      	ldr	r2, [r3, #0]
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a4a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8003a4c:	2301      	movs	r3, #1
 8003a4e:	e035      	b.n	8003abc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003a50:	68fb      	ldr	r3, [r7, #12]
 8003a52:	681b      	ldr	r3, [r3, #0]
 8003a54:	681a      	ldr	r2, [r3, #0]
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	681b      	ldr	r3, [r3, #0]
 8003a5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003a5e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003a60:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a62:	9300      	str	r3, [sp, #0]
 8003a64:	6a3b      	ldr	r3, [r7, #32]
 8003a66:	2200      	movs	r2, #0
 8003a68:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003a6c:	68f8      	ldr	r0, [r7, #12]
 8003a6e:	f000 f82b 	bl	8003ac8 <I2C_WaitOnFlagUntilTimeout>
 8003a72:	4603      	mov	r3, r0
 8003a74:	2b00      	cmp	r3, #0
 8003a76:	d00d      	beq.n	8003a94 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	681b      	ldr	r3, [r3, #0]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003a82:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003a86:	d103      	bne.n	8003a90 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003a88:	68fb      	ldr	r3, [r7, #12]
 8003a8a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003a8e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003a90:	2303      	movs	r3, #3
 8003a92:	e013      	b.n	8003abc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8003a94:	897b      	ldrh	r3, [r7, #10]
 8003a96:	b2db      	uxtb	r3, r3
 8003a98:	f043 0301 	orr.w	r3, r3, #1
 8003a9c:	b2da      	uxtb	r2, r3
 8003a9e:	68fb      	ldr	r3, [r7, #12]
 8003aa0:	681b      	ldr	r3, [r3, #0]
 8003aa2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003aa4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003aa6:	6a3a      	ldr	r2, [r7, #32]
 8003aa8:	4906      	ldr	r1, [pc, #24]	@ (8003ac4 <I2C_RequestMemoryRead+0x1cc>)
 8003aaa:	68f8      	ldr	r0, [r7, #12]
 8003aac:	f000 f886 	bl	8003bbc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003ab0:	4603      	mov	r3, r0
 8003ab2:	2b00      	cmp	r3, #0
 8003ab4:	d001      	beq.n	8003aba <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8003ab6:	2301      	movs	r3, #1
 8003ab8:	e000      	b.n	8003abc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8003aba:	2300      	movs	r3, #0
}
 8003abc:	4618      	mov	r0, r3
 8003abe:	3718      	adds	r7, #24
 8003ac0:	46bd      	mov	sp, r7
 8003ac2:	bd80      	pop	{r7, pc}
 8003ac4:	00010002 	.word	0x00010002

08003ac8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8003ac8:	b580      	push	{r7, lr}
 8003aca:	b084      	sub	sp, #16
 8003acc:	af00      	add	r7, sp, #0
 8003ace:	60f8      	str	r0, [r7, #12]
 8003ad0:	60b9      	str	r1, [r7, #8]
 8003ad2:	603b      	str	r3, [r7, #0]
 8003ad4:	4613      	mov	r3, r2
 8003ad6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003ad8:	e048      	b.n	8003b6c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003ada:	683b      	ldr	r3, [r7, #0]
 8003adc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003ae0:	d044      	beq.n	8003b6c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003ae2:	f7fe fa11 	bl	8001f08 <HAL_GetTick>
 8003ae6:	4602      	mov	r2, r0
 8003ae8:	69bb      	ldr	r3, [r7, #24]
 8003aea:	1ad3      	subs	r3, r2, r3
 8003aec:	683a      	ldr	r2, [r7, #0]
 8003aee:	429a      	cmp	r2, r3
 8003af0:	d302      	bcc.n	8003af8 <I2C_WaitOnFlagUntilTimeout+0x30>
 8003af2:	683b      	ldr	r3, [r7, #0]
 8003af4:	2b00      	cmp	r3, #0
 8003af6:	d139      	bne.n	8003b6c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8003af8:	68bb      	ldr	r3, [r7, #8]
 8003afa:	0c1b      	lsrs	r3, r3, #16
 8003afc:	b2db      	uxtb	r3, r3
 8003afe:	2b01      	cmp	r3, #1
 8003b00:	d10d      	bne.n	8003b1e <I2C_WaitOnFlagUntilTimeout+0x56>
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	681b      	ldr	r3, [r3, #0]
 8003b06:	695b      	ldr	r3, [r3, #20]
 8003b08:	43da      	mvns	r2, r3
 8003b0a:	68bb      	ldr	r3, [r7, #8]
 8003b0c:	4013      	ands	r3, r2
 8003b0e:	b29b      	uxth	r3, r3
 8003b10:	2b00      	cmp	r3, #0
 8003b12:	bf0c      	ite	eq
 8003b14:	2301      	moveq	r3, #1
 8003b16:	2300      	movne	r3, #0
 8003b18:	b2db      	uxtb	r3, r3
 8003b1a:	461a      	mov	r2, r3
 8003b1c:	e00c      	b.n	8003b38 <I2C_WaitOnFlagUntilTimeout+0x70>
 8003b1e:	68fb      	ldr	r3, [r7, #12]
 8003b20:	681b      	ldr	r3, [r3, #0]
 8003b22:	699b      	ldr	r3, [r3, #24]
 8003b24:	43da      	mvns	r2, r3
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	4013      	ands	r3, r2
 8003b2a:	b29b      	uxth	r3, r3
 8003b2c:	2b00      	cmp	r3, #0
 8003b2e:	bf0c      	ite	eq
 8003b30:	2301      	moveq	r3, #1
 8003b32:	2300      	movne	r3, #0
 8003b34:	b2db      	uxtb	r3, r3
 8003b36:	461a      	mov	r2, r3
 8003b38:	79fb      	ldrb	r3, [r7, #7]
 8003b3a:	429a      	cmp	r2, r3
 8003b3c:	d116      	bne.n	8003b6c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	2200      	movs	r2, #0
 8003b42:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8003b44:	68fb      	ldr	r3, [r7, #12]
 8003b46:	2220      	movs	r2, #32
 8003b48:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8003b4c:	68fb      	ldr	r3, [r7, #12]
 8003b4e:	2200      	movs	r2, #0
 8003b50:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8003b54:	68fb      	ldr	r3, [r7, #12]
 8003b56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b58:	f043 0220 	orr.w	r2, r3, #32
 8003b5c:	68fb      	ldr	r3, [r7, #12]
 8003b5e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	2200      	movs	r2, #0
 8003b64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003b68:	2301      	movs	r3, #1
 8003b6a:	e023      	b.n	8003bb4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8003b6c:	68bb      	ldr	r3, [r7, #8]
 8003b6e:	0c1b      	lsrs	r3, r3, #16
 8003b70:	b2db      	uxtb	r3, r3
 8003b72:	2b01      	cmp	r3, #1
 8003b74:	d10d      	bne.n	8003b92 <I2C_WaitOnFlagUntilTimeout+0xca>
 8003b76:	68fb      	ldr	r3, [r7, #12]
 8003b78:	681b      	ldr	r3, [r3, #0]
 8003b7a:	695b      	ldr	r3, [r3, #20]
 8003b7c:	43da      	mvns	r2, r3
 8003b7e:	68bb      	ldr	r3, [r7, #8]
 8003b80:	4013      	ands	r3, r2
 8003b82:	b29b      	uxth	r3, r3
 8003b84:	2b00      	cmp	r3, #0
 8003b86:	bf0c      	ite	eq
 8003b88:	2301      	moveq	r3, #1
 8003b8a:	2300      	movne	r3, #0
 8003b8c:	b2db      	uxtb	r3, r3
 8003b8e:	461a      	mov	r2, r3
 8003b90:	e00c      	b.n	8003bac <I2C_WaitOnFlagUntilTimeout+0xe4>
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	699b      	ldr	r3, [r3, #24]
 8003b98:	43da      	mvns	r2, r3
 8003b9a:	68bb      	ldr	r3, [r7, #8]
 8003b9c:	4013      	ands	r3, r2
 8003b9e:	b29b      	uxth	r3, r3
 8003ba0:	2b00      	cmp	r3, #0
 8003ba2:	bf0c      	ite	eq
 8003ba4:	2301      	moveq	r3, #1
 8003ba6:	2300      	movne	r3, #0
 8003ba8:	b2db      	uxtb	r3, r3
 8003baa:	461a      	mov	r2, r3
 8003bac:	79fb      	ldrb	r3, [r7, #7]
 8003bae:	429a      	cmp	r2, r3
 8003bb0:	d093      	beq.n	8003ada <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8003bb2:	2300      	movs	r3, #0
}
 8003bb4:	4618      	mov	r0, r3
 8003bb6:	3710      	adds	r7, #16
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	bd80      	pop	{r7, pc}

08003bbc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8003bbc:	b580      	push	{r7, lr}
 8003bbe:	b084      	sub	sp, #16
 8003bc0:	af00      	add	r7, sp, #0
 8003bc2:	60f8      	str	r0, [r7, #12]
 8003bc4:	60b9      	str	r1, [r7, #8]
 8003bc6:	607a      	str	r2, [r7, #4]
 8003bc8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003bca:	e071      	b.n	8003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	695b      	ldr	r3, [r3, #20]
 8003bd2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003bd6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003bda:	d123      	bne.n	8003c24 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	681b      	ldr	r3, [r3, #0]
 8003be0:	681a      	ldr	r2, [r3, #0]
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	681b      	ldr	r3, [r3, #0]
 8003be6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003bea:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	681b      	ldr	r3, [r3, #0]
 8003bf0:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003bf4:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003bf6:	68fb      	ldr	r3, [r7, #12]
 8003bf8:	2200      	movs	r2, #0
 8003bfa:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003bfc:	68fb      	ldr	r3, [r7, #12]
 8003bfe:	2220      	movs	r2, #32
 8003c00:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	2200      	movs	r2, #0
 8003c08:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c10:	f043 0204 	orr.w	r2, r3, #4
 8003c14:	68fb      	ldr	r3, [r7, #12]
 8003c16:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	2200      	movs	r2, #0
 8003c1c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003c20:	2301      	movs	r3, #1
 8003c22:	e067      	b.n	8003cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003c24:	687b      	ldr	r3, [r7, #4]
 8003c26:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c2a:	d041      	beq.n	8003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003c2c:	f7fe f96c 	bl	8001f08 <HAL_GetTick>
 8003c30:	4602      	mov	r2, r0
 8003c32:	683b      	ldr	r3, [r7, #0]
 8003c34:	1ad3      	subs	r3, r2, r3
 8003c36:	687a      	ldr	r2, [r7, #4]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	d302      	bcc.n	8003c42 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8003c3c:	687b      	ldr	r3, [r7, #4]
 8003c3e:	2b00      	cmp	r3, #0
 8003c40:	d136      	bne.n	8003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8003c42:	68bb      	ldr	r3, [r7, #8]
 8003c44:	0c1b      	lsrs	r3, r3, #16
 8003c46:	b2db      	uxtb	r3, r3
 8003c48:	2b01      	cmp	r3, #1
 8003c4a:	d10c      	bne.n	8003c66 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8003c4c:	68fb      	ldr	r3, [r7, #12]
 8003c4e:	681b      	ldr	r3, [r3, #0]
 8003c50:	695b      	ldr	r3, [r3, #20]
 8003c52:	43da      	mvns	r2, r3
 8003c54:	68bb      	ldr	r3, [r7, #8]
 8003c56:	4013      	ands	r3, r2
 8003c58:	b29b      	uxth	r3, r3
 8003c5a:	2b00      	cmp	r3, #0
 8003c5c:	bf14      	ite	ne
 8003c5e:	2301      	movne	r3, #1
 8003c60:	2300      	moveq	r3, #0
 8003c62:	b2db      	uxtb	r3, r3
 8003c64:	e00b      	b.n	8003c7e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8003c66:	68fb      	ldr	r3, [r7, #12]
 8003c68:	681b      	ldr	r3, [r3, #0]
 8003c6a:	699b      	ldr	r3, [r3, #24]
 8003c6c:	43da      	mvns	r2, r3
 8003c6e:	68bb      	ldr	r3, [r7, #8]
 8003c70:	4013      	ands	r3, r2
 8003c72:	b29b      	uxth	r3, r3
 8003c74:	2b00      	cmp	r3, #0
 8003c76:	bf14      	ite	ne
 8003c78:	2301      	movne	r3, #1
 8003c7a:	2300      	moveq	r3, #0
 8003c7c:	b2db      	uxtb	r3, r3
 8003c7e:	2b00      	cmp	r3, #0
 8003c80:	d016      	beq.n	8003cb0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	2200      	movs	r2, #0
 8003c86:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003c88:	68fb      	ldr	r3, [r7, #12]
 8003c8a:	2220      	movs	r2, #32
 8003c8c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003c90:	68fb      	ldr	r3, [r7, #12]
 8003c92:	2200      	movs	r2, #0
 8003c94:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003c98:	68fb      	ldr	r3, [r7, #12]
 8003c9a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c9c:	f043 0220 	orr.w	r2, r3, #32
 8003ca0:	68fb      	ldr	r3, [r7, #12]
 8003ca2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003ca4:	68fb      	ldr	r3, [r7, #12]
 8003ca6:	2200      	movs	r2, #0
 8003ca8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003cac:	2301      	movs	r3, #1
 8003cae:	e021      	b.n	8003cf4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8003cb0:	68bb      	ldr	r3, [r7, #8]
 8003cb2:	0c1b      	lsrs	r3, r3, #16
 8003cb4:	b2db      	uxtb	r3, r3
 8003cb6:	2b01      	cmp	r3, #1
 8003cb8:	d10c      	bne.n	8003cd4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	43da      	mvns	r2, r3
 8003cc2:	68bb      	ldr	r3, [r7, #8]
 8003cc4:	4013      	ands	r3, r2
 8003cc6:	b29b      	uxth	r3, r3
 8003cc8:	2b00      	cmp	r3, #0
 8003cca:	bf14      	ite	ne
 8003ccc:	2301      	movne	r3, #1
 8003cce:	2300      	moveq	r3, #0
 8003cd0:	b2db      	uxtb	r3, r3
 8003cd2:	e00b      	b.n	8003cec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	699b      	ldr	r3, [r3, #24]
 8003cda:	43da      	mvns	r2, r3
 8003cdc:	68bb      	ldr	r3, [r7, #8]
 8003cde:	4013      	ands	r3, r2
 8003ce0:	b29b      	uxth	r3, r3
 8003ce2:	2b00      	cmp	r3, #0
 8003ce4:	bf14      	ite	ne
 8003ce6:	2301      	movne	r3, #1
 8003ce8:	2300      	moveq	r3, #0
 8003cea:	b2db      	uxtb	r3, r3
 8003cec:	2b00      	cmp	r3, #0
 8003cee:	f47f af6d 	bne.w	8003bcc <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8003cf2:	2300      	movs	r3, #0
}
 8003cf4:	4618      	mov	r0, r3
 8003cf6:	3710      	adds	r7, #16
 8003cf8:	46bd      	mov	sp, r7
 8003cfa:	bd80      	pop	{r7, pc}

08003cfc <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003cfc:	b580      	push	{r7, lr}
 8003cfe:	b084      	sub	sp, #16
 8003d00:	af00      	add	r7, sp, #0
 8003d02:	60f8      	str	r0, [r7, #12]
 8003d04:	60b9      	str	r1, [r7, #8]
 8003d06:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d08:	e034      	b.n	8003d74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d0a:	68f8      	ldr	r0, [r7, #12]
 8003d0c:	f000 f8e3 	bl	8003ed6 <I2C_IsAcknowledgeFailed>
 8003d10:	4603      	mov	r3, r0
 8003d12:	2b00      	cmp	r3, #0
 8003d14:	d001      	beq.n	8003d1a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003d16:	2301      	movs	r3, #1
 8003d18:	e034      	b.n	8003d84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003d1a:	68bb      	ldr	r3, [r7, #8]
 8003d1c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d20:	d028      	beq.n	8003d74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003d22:	f7fe f8f1 	bl	8001f08 <HAL_GetTick>
 8003d26:	4602      	mov	r2, r0
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	1ad3      	subs	r3, r2, r3
 8003d2c:	68ba      	ldr	r2, [r7, #8]
 8003d2e:	429a      	cmp	r2, r3
 8003d30:	d302      	bcc.n	8003d38 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8003d32:	68bb      	ldr	r3, [r7, #8]
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d11d      	bne.n	8003d74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	681b      	ldr	r3, [r3, #0]
 8003d3c:	695b      	ldr	r3, [r3, #20]
 8003d3e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d42:	2b80      	cmp	r3, #128	@ 0x80
 8003d44:	d016      	beq.n	8003d74 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003d46:	68fb      	ldr	r3, [r7, #12]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003d4c:	68fb      	ldr	r3, [r7, #12]
 8003d4e:	2220      	movs	r2, #32
 8003d50:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003d54:	68fb      	ldr	r3, [r7, #12]
 8003d56:	2200      	movs	r2, #0
 8003d58:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003d5c:	68fb      	ldr	r3, [r7, #12]
 8003d5e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003d60:	f043 0220 	orr.w	r2, r3, #32
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003d68:	68fb      	ldr	r3, [r7, #12]
 8003d6a:	2200      	movs	r2, #0
 8003d6c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003d70:	2301      	movs	r3, #1
 8003d72:	e007      	b.n	8003d84 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8003d74:	68fb      	ldr	r3, [r7, #12]
 8003d76:	681b      	ldr	r3, [r3, #0]
 8003d78:	695b      	ldr	r3, [r3, #20]
 8003d7a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8003d7e:	2b80      	cmp	r3, #128	@ 0x80
 8003d80:	d1c3      	bne.n	8003d0a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003d82:	2300      	movs	r3, #0
}
 8003d84:	4618      	mov	r0, r3
 8003d86:	3710      	adds	r7, #16
 8003d88:	46bd      	mov	sp, r7
 8003d8a:	bd80      	pop	{r7, pc}

08003d8c <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003d8c:	b580      	push	{r7, lr}
 8003d8e:	b084      	sub	sp, #16
 8003d90:	af00      	add	r7, sp, #0
 8003d92:	60f8      	str	r0, [r7, #12]
 8003d94:	60b9      	str	r1, [r7, #8]
 8003d96:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003d98:	e034      	b.n	8003e04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8003d9a:	68f8      	ldr	r0, [r7, #12]
 8003d9c:	f000 f89b 	bl	8003ed6 <I2C_IsAcknowledgeFailed>
 8003da0:	4603      	mov	r3, r0
 8003da2:	2b00      	cmp	r3, #0
 8003da4:	d001      	beq.n	8003daa <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8003da6:	2301      	movs	r3, #1
 8003da8:	e034      	b.n	8003e14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8003daa:	68bb      	ldr	r3, [r7, #8]
 8003dac:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003db0:	d028      	beq.n	8003e04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003db2:	f7fe f8a9 	bl	8001f08 <HAL_GetTick>
 8003db6:	4602      	mov	r2, r0
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	1ad3      	subs	r3, r2, r3
 8003dbc:	68ba      	ldr	r2, [r7, #8]
 8003dbe:	429a      	cmp	r2, r3
 8003dc0:	d302      	bcc.n	8003dc8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8003dc2:	68bb      	ldr	r3, [r7, #8]
 8003dc4:	2b00      	cmp	r3, #0
 8003dc6:	d11d      	bne.n	8003e04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8003dc8:	68fb      	ldr	r3, [r7, #12]
 8003dca:	681b      	ldr	r3, [r3, #0]
 8003dcc:	695b      	ldr	r3, [r3, #20]
 8003dce:	f003 0304 	and.w	r3, r3, #4
 8003dd2:	2b04      	cmp	r3, #4
 8003dd4:	d016      	beq.n	8003e04 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	2200      	movs	r2, #0
 8003dda:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	2220      	movs	r2, #32
 8003de0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003de4:	68fb      	ldr	r3, [r7, #12]
 8003de6:	2200      	movs	r2, #0
 8003de8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003df0:	f043 0220 	orr.w	r2, r3, #32
 8003df4:	68fb      	ldr	r3, [r7, #12]
 8003df6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8003df8:	68fb      	ldr	r3, [r7, #12]
 8003dfa:	2200      	movs	r2, #0
 8003dfc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8003e00:	2301      	movs	r3, #1
 8003e02:	e007      	b.n	8003e14 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8003e04:	68fb      	ldr	r3, [r7, #12]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	695b      	ldr	r3, [r3, #20]
 8003e0a:	f003 0304 	and.w	r3, r3, #4
 8003e0e:	2b04      	cmp	r3, #4
 8003e10:	d1c3      	bne.n	8003d9a <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8003e12:	2300      	movs	r3, #0
}
 8003e14:	4618      	mov	r0, r3
 8003e16:	3710      	adds	r7, #16
 8003e18:	46bd      	mov	sp, r7
 8003e1a:	bd80      	pop	{r7, pc}

08003e1c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8003e1c:	b580      	push	{r7, lr}
 8003e1e:	b084      	sub	sp, #16
 8003e20:	af00      	add	r7, sp, #0
 8003e22:	60f8      	str	r0, [r7, #12]
 8003e24:	60b9      	str	r1, [r7, #8]
 8003e26:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003e28:	e049      	b.n	8003ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	695b      	ldr	r3, [r3, #20]
 8003e30:	f003 0310 	and.w	r3, r3, #16
 8003e34:	2b10      	cmp	r3, #16
 8003e36:	d119      	bne.n	8003e6c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8003e38:	68fb      	ldr	r3, [r7, #12]
 8003e3a:	681b      	ldr	r3, [r3, #0]
 8003e3c:	f06f 0210 	mvn.w	r2, #16
 8003e40:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	2200      	movs	r2, #0
 8003e46:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	2220      	movs	r2, #32
 8003e4c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e50:	68fb      	ldr	r3, [r7, #12]
 8003e52:	2200      	movs	r2, #0
 8003e54:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	2200      	movs	r2, #0
 8003e64:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8003e68:	2301      	movs	r3, #1
 8003e6a:	e030      	b.n	8003ece <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8003e6c:	f7fe f84c 	bl	8001f08 <HAL_GetTick>
 8003e70:	4602      	mov	r2, r0
 8003e72:	687b      	ldr	r3, [r7, #4]
 8003e74:	1ad3      	subs	r3, r2, r3
 8003e76:	68ba      	ldr	r2, [r7, #8]
 8003e78:	429a      	cmp	r2, r3
 8003e7a:	d302      	bcc.n	8003e82 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8003e7c:	68bb      	ldr	r3, [r7, #8]
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d11d      	bne.n	8003ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 8003e82:	68fb      	ldr	r3, [r7, #12]
 8003e84:	681b      	ldr	r3, [r3, #0]
 8003e86:	695b      	ldr	r3, [r3, #20]
 8003e88:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003e8c:	2b40      	cmp	r3, #64	@ 0x40
 8003e8e:	d016      	beq.n	8003ebe <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	2200      	movs	r2, #0
 8003e94:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2220      	movs	r2, #32
 8003e9a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8003ea6:	68fb      	ldr	r3, [r7, #12]
 8003ea8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003eaa:	f043 0220 	orr.w	r2, r3, #32
 8003eae:	68fb      	ldr	r3, [r7, #12]
 8003eb0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	2200      	movs	r2, #0
 8003eb6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8003eba:	2301      	movs	r3, #1
 8003ebc:	e007      	b.n	8003ece <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	695b      	ldr	r3, [r3, #20]
 8003ec4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8003ec8:	2b40      	cmp	r3, #64	@ 0x40
 8003eca:	d1ae      	bne.n	8003e2a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8003ecc:	2300      	movs	r3, #0
}
 8003ece:	4618      	mov	r0, r3
 8003ed0:	3710      	adds	r7, #16
 8003ed2:	46bd      	mov	sp, r7
 8003ed4:	bd80      	pop	{r7, pc}

08003ed6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8003ed6:	b480      	push	{r7}
 8003ed8:	b083      	sub	sp, #12
 8003eda:	af00      	add	r7, sp, #0
 8003edc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	681b      	ldr	r3, [r3, #0]
 8003ee2:	695b      	ldr	r3, [r3, #20]
 8003ee4:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8003ee8:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8003eec:	d11b      	bne.n	8003f26 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003eee:	687b      	ldr	r3, [r7, #4]
 8003ef0:	681b      	ldr	r3, [r3, #0]
 8003ef2:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8003ef6:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8003ef8:	687b      	ldr	r3, [r7, #4]
 8003efa:	2200      	movs	r2, #0
 8003efc:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	2220      	movs	r2, #32
 8003f02:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8003f06:	687b      	ldr	r3, [r7, #4]
 8003f08:	2200      	movs	r2, #0
 8003f0a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003f12:	f043 0204 	orr.w	r2, r3, #4
 8003f16:	687b      	ldr	r3, [r7, #4]
 8003f18:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f1a:	687b      	ldr	r3, [r7, #4]
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8003f22:	2301      	movs	r3, #1
 8003f24:	e000      	b.n	8003f28 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8003f26:	2300      	movs	r3, #0
}
 8003f28:	4618      	mov	r0, r3
 8003f2a:	370c      	adds	r7, #12
 8003f2c:	46bd      	mov	sp, r7
 8003f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f32:	4770      	bx	lr

08003f34 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003f34:	b580      	push	{r7, lr}
 8003f36:	b086      	sub	sp, #24
 8003f38:	af00      	add	r7, sp, #0
 8003f3a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8003f3c:	687b      	ldr	r3, [r7, #4]
 8003f3e:	2b00      	cmp	r3, #0
 8003f40:	d101      	bne.n	8003f46 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003f42:	2301      	movs	r3, #1
 8003f44:	e267      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8003f46:	687b      	ldr	r3, [r7, #4]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f003 0301 	and.w	r3, r3, #1
 8003f4e:	2b00      	cmp	r3, #0
 8003f50:	d075      	beq.n	800403e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f52:	4b88      	ldr	r3, [pc, #544]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003f54:	689b      	ldr	r3, [r3, #8]
 8003f56:	f003 030c 	and.w	r3, r3, #12
 8003f5a:	2b04      	cmp	r3, #4
 8003f5c:	d00c      	beq.n	8003f78 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f5e:	4b85      	ldr	r3, [pc, #532]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003f60:	689b      	ldr	r3, [r3, #8]
 8003f62:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8003f66:	2b08      	cmp	r3, #8
 8003f68:	d112      	bne.n	8003f90 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003f6a:	4b82      	ldr	r3, [pc, #520]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003f6c:	685b      	ldr	r3, [r3, #4]
 8003f6e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8003f72:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8003f76:	d10b      	bne.n	8003f90 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003f78:	4b7e      	ldr	r3, [pc, #504]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003f7a:	681b      	ldr	r3, [r3, #0]
 8003f7c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8003f80:	2b00      	cmp	r3, #0
 8003f82:	d05b      	beq.n	800403c <HAL_RCC_OscConfig+0x108>
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	685b      	ldr	r3, [r3, #4]
 8003f88:	2b00      	cmp	r3, #0
 8003f8a:	d157      	bne.n	800403c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8003f8c:	2301      	movs	r3, #1
 8003f8e:	e242      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	685b      	ldr	r3, [r3, #4]
 8003f94:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8003f98:	d106      	bne.n	8003fa8 <HAL_RCC_OscConfig+0x74>
 8003f9a:	4b76      	ldr	r3, [pc, #472]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	4a75      	ldr	r2, [pc, #468]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003fa0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fa4:	6013      	str	r3, [r2, #0]
 8003fa6:	e01d      	b.n	8003fe4 <HAL_RCC_OscConfig+0xb0>
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	685b      	ldr	r3, [r3, #4]
 8003fac:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8003fb0:	d10c      	bne.n	8003fcc <HAL_RCC_OscConfig+0x98>
 8003fb2:	4b70      	ldr	r3, [pc, #448]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	4a6f      	ldr	r2, [pc, #444]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003fb8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8003fbc:	6013      	str	r3, [r2, #0]
 8003fbe:	4b6d      	ldr	r3, [pc, #436]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	4a6c      	ldr	r2, [pc, #432]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003fc4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8003fc8:	6013      	str	r3, [r2, #0]
 8003fca:	e00b      	b.n	8003fe4 <HAL_RCC_OscConfig+0xb0>
 8003fcc:	4b69      	ldr	r3, [pc, #420]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003fce:	681b      	ldr	r3, [r3, #0]
 8003fd0:	4a68      	ldr	r2, [pc, #416]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003fd2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8003fd6:	6013      	str	r3, [r2, #0]
 8003fd8:	4b66      	ldr	r3, [pc, #408]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	4a65      	ldr	r2, [pc, #404]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8003fde:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8003fe2:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	685b      	ldr	r3, [r3, #4]
 8003fe8:	2b00      	cmp	r3, #0
 8003fea:	d013      	beq.n	8004014 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003fec:	f7fd ff8c 	bl	8001f08 <HAL_GetTick>
 8003ff0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003ff2:	e008      	b.n	8004006 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8003ff4:	f7fd ff88 	bl	8001f08 <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	693b      	ldr	r3, [r7, #16]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b64      	cmp	r3, #100	@ 0x64
 8004000:	d901      	bls.n	8004006 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004002:	2303      	movs	r3, #3
 8004004:	e207      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004006:	4b5b      	ldr	r3, [pc, #364]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8004008:	681b      	ldr	r3, [r3, #0]
 800400a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800400e:	2b00      	cmp	r3, #0
 8004010:	d0f0      	beq.n	8003ff4 <HAL_RCC_OscConfig+0xc0>
 8004012:	e014      	b.n	800403e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004014:	f7fd ff78 	bl	8001f08 <HAL_GetTick>
 8004018:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800401a:	e008      	b.n	800402e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800401c:	f7fd ff74 	bl	8001f08 <HAL_GetTick>
 8004020:	4602      	mov	r2, r0
 8004022:	693b      	ldr	r3, [r7, #16]
 8004024:	1ad3      	subs	r3, r2, r3
 8004026:	2b64      	cmp	r3, #100	@ 0x64
 8004028:	d901      	bls.n	800402e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800402a:	2303      	movs	r3, #3
 800402c:	e1f3      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800402e:	4b51      	ldr	r3, [pc, #324]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8004030:	681b      	ldr	r3, [r3, #0]
 8004032:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004036:	2b00      	cmp	r3, #0
 8004038:	d1f0      	bne.n	800401c <HAL_RCC_OscConfig+0xe8>
 800403a:	e000      	b.n	800403e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800403c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	681b      	ldr	r3, [r3, #0]
 8004042:	f003 0302 	and.w	r3, r3, #2
 8004046:	2b00      	cmp	r3, #0
 8004048:	d063      	beq.n	8004112 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800404a:	4b4a      	ldr	r3, [pc, #296]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 800404c:	689b      	ldr	r3, [r3, #8]
 800404e:	f003 030c 	and.w	r3, r3, #12
 8004052:	2b00      	cmp	r3, #0
 8004054:	d00b      	beq.n	800406e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004056:	4b47      	ldr	r3, [pc, #284]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8004058:	689b      	ldr	r3, [r3, #8]
 800405a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800405e:	2b08      	cmp	r3, #8
 8004060:	d11c      	bne.n	800409c <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004062:	4b44      	ldr	r3, [pc, #272]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8004064:	685b      	ldr	r3, [r3, #4]
 8004066:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800406a:	2b00      	cmp	r3, #0
 800406c:	d116      	bne.n	800409c <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800406e:	4b41      	ldr	r3, [pc, #260]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8004070:	681b      	ldr	r3, [r3, #0]
 8004072:	f003 0302 	and.w	r3, r3, #2
 8004076:	2b00      	cmp	r3, #0
 8004078:	d005      	beq.n	8004086 <HAL_RCC_OscConfig+0x152>
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
 800407e:	2b01      	cmp	r3, #1
 8004080:	d001      	beq.n	8004086 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004082:	2301      	movs	r3, #1
 8004084:	e1c7      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004086:	4b3b      	ldr	r3, [pc, #236]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8004088:	681b      	ldr	r3, [r3, #0]
 800408a:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 800408e:	687b      	ldr	r3, [r7, #4]
 8004090:	691b      	ldr	r3, [r3, #16]
 8004092:	00db      	lsls	r3, r3, #3
 8004094:	4937      	ldr	r1, [pc, #220]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8004096:	4313      	orrs	r3, r2
 8004098:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800409a:	e03a      	b.n	8004112 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 800409c:	687b      	ldr	r3, [r7, #4]
 800409e:	68db      	ldr	r3, [r3, #12]
 80040a0:	2b00      	cmp	r3, #0
 80040a2:	d020      	beq.n	80040e6 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80040a4:	4b34      	ldr	r3, [pc, #208]	@ (8004178 <HAL_RCC_OscConfig+0x244>)
 80040a6:	2201      	movs	r2, #1
 80040a8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040aa:	f7fd ff2d 	bl	8001f08 <HAL_GetTick>
 80040ae:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040b0:	e008      	b.n	80040c4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040b2:	f7fd ff29 	bl	8001f08 <HAL_GetTick>
 80040b6:	4602      	mov	r2, r0
 80040b8:	693b      	ldr	r3, [r7, #16]
 80040ba:	1ad3      	subs	r3, r2, r3
 80040bc:	2b02      	cmp	r3, #2
 80040be:	d901      	bls.n	80040c4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80040c0:	2303      	movs	r3, #3
 80040c2:	e1a8      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80040c4:	4b2b      	ldr	r3, [pc, #172]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f003 0302 	and.w	r3, r3, #2
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	d0f0      	beq.n	80040b2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80040d0:	4b28      	ldr	r3, [pc, #160]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 80040d2:	681b      	ldr	r3, [r3, #0]
 80040d4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	691b      	ldr	r3, [r3, #16]
 80040dc:	00db      	lsls	r3, r3, #3
 80040de:	4925      	ldr	r1, [pc, #148]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 80040e0:	4313      	orrs	r3, r2
 80040e2:	600b      	str	r3, [r1, #0]
 80040e4:	e015      	b.n	8004112 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 80040e6:	4b24      	ldr	r3, [pc, #144]	@ (8004178 <HAL_RCC_OscConfig+0x244>)
 80040e8:	2200      	movs	r2, #0
 80040ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80040ec:	f7fd ff0c 	bl	8001f08 <HAL_GetTick>
 80040f0:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 80040f2:	e008      	b.n	8004106 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80040f4:	f7fd ff08 	bl	8001f08 <HAL_GetTick>
 80040f8:	4602      	mov	r2, r0
 80040fa:	693b      	ldr	r3, [r7, #16]
 80040fc:	1ad3      	subs	r3, r2, r3
 80040fe:	2b02      	cmp	r3, #2
 8004100:	d901      	bls.n	8004106 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004102:	2303      	movs	r3, #3
 8004104:	e187      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004106:	4b1b      	ldr	r3, [pc, #108]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8004108:	681b      	ldr	r3, [r3, #0]
 800410a:	f003 0302 	and.w	r3, r3, #2
 800410e:	2b00      	cmp	r3, #0
 8004110:	d1f0      	bne.n	80040f4 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	681b      	ldr	r3, [r3, #0]
 8004116:	f003 0308 	and.w	r3, r3, #8
 800411a:	2b00      	cmp	r3, #0
 800411c:	d036      	beq.n	800418c <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	695b      	ldr	r3, [r3, #20]
 8004122:	2b00      	cmp	r3, #0
 8004124:	d016      	beq.n	8004154 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004126:	4b15      	ldr	r3, [pc, #84]	@ (800417c <HAL_RCC_OscConfig+0x248>)
 8004128:	2201      	movs	r2, #1
 800412a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800412c:	f7fd feec 	bl	8001f08 <HAL_GetTick>
 8004130:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004132:	e008      	b.n	8004146 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004134:	f7fd fee8 	bl	8001f08 <HAL_GetTick>
 8004138:	4602      	mov	r2, r0
 800413a:	693b      	ldr	r3, [r7, #16]
 800413c:	1ad3      	subs	r3, r2, r3
 800413e:	2b02      	cmp	r3, #2
 8004140:	d901      	bls.n	8004146 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004142:	2303      	movs	r3, #3
 8004144:	e167      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004146:	4b0b      	ldr	r3, [pc, #44]	@ (8004174 <HAL_RCC_OscConfig+0x240>)
 8004148:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800414a:	f003 0302 	and.w	r3, r3, #2
 800414e:	2b00      	cmp	r3, #0
 8004150:	d0f0      	beq.n	8004134 <HAL_RCC_OscConfig+0x200>
 8004152:	e01b      	b.n	800418c <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004154:	4b09      	ldr	r3, [pc, #36]	@ (800417c <HAL_RCC_OscConfig+0x248>)
 8004156:	2200      	movs	r2, #0
 8004158:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800415a:	f7fd fed5 	bl	8001f08 <HAL_GetTick>
 800415e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004160:	e00e      	b.n	8004180 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004162:	f7fd fed1 	bl	8001f08 <HAL_GetTick>
 8004166:	4602      	mov	r2, r0
 8004168:	693b      	ldr	r3, [r7, #16]
 800416a:	1ad3      	subs	r3, r2, r3
 800416c:	2b02      	cmp	r3, #2
 800416e:	d907      	bls.n	8004180 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004170:	2303      	movs	r3, #3
 8004172:	e150      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
 8004174:	40023800 	.word	0x40023800
 8004178:	42470000 	.word	0x42470000
 800417c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004180:	4b88      	ldr	r3, [pc, #544]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004182:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004184:	f003 0302 	and.w	r3, r3, #2
 8004188:	2b00      	cmp	r3, #0
 800418a:	d1ea      	bne.n	8004162 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	f003 0304 	and.w	r3, r3, #4
 8004194:	2b00      	cmp	r3, #0
 8004196:	f000 8097 	beq.w	80042c8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 800419a:	2300      	movs	r3, #0
 800419c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 800419e:	4b81      	ldr	r3, [pc, #516]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 80041a0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041a2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d10f      	bne.n	80041ca <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80041aa:	2300      	movs	r3, #0
 80041ac:	60bb      	str	r3, [r7, #8]
 80041ae:	4b7d      	ldr	r3, [pc, #500]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 80041b0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041b2:	4a7c      	ldr	r2, [pc, #496]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 80041b4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80041b8:	6413      	str	r3, [r2, #64]	@ 0x40
 80041ba:	4b7a      	ldr	r3, [pc, #488]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 80041bc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041be:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80041c2:	60bb      	str	r3, [r7, #8]
 80041c4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80041c6:	2301      	movs	r3, #1
 80041c8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041ca:	4b77      	ldr	r3, [pc, #476]	@ (80043a8 <HAL_RCC_OscConfig+0x474>)
 80041cc:	681b      	ldr	r3, [r3, #0]
 80041ce:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d118      	bne.n	8004208 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80041d6:	4b74      	ldr	r3, [pc, #464]	@ (80043a8 <HAL_RCC_OscConfig+0x474>)
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	4a73      	ldr	r2, [pc, #460]	@ (80043a8 <HAL_RCC_OscConfig+0x474>)
 80041dc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80041e0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80041e2:	f7fd fe91 	bl	8001f08 <HAL_GetTick>
 80041e6:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041e8:	e008      	b.n	80041fc <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80041ea:	f7fd fe8d 	bl	8001f08 <HAL_GetTick>
 80041ee:	4602      	mov	r2, r0
 80041f0:	693b      	ldr	r3, [r7, #16]
 80041f2:	1ad3      	subs	r3, r2, r3
 80041f4:	2b02      	cmp	r3, #2
 80041f6:	d901      	bls.n	80041fc <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 80041f8:	2303      	movs	r3, #3
 80041fa:	e10c      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80041fc:	4b6a      	ldr	r3, [pc, #424]	@ (80043a8 <HAL_RCC_OscConfig+0x474>)
 80041fe:	681b      	ldr	r3, [r3, #0]
 8004200:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004204:	2b00      	cmp	r3, #0
 8004206:	d0f0      	beq.n	80041ea <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	689b      	ldr	r3, [r3, #8]
 800420c:	2b01      	cmp	r3, #1
 800420e:	d106      	bne.n	800421e <HAL_RCC_OscConfig+0x2ea>
 8004210:	4b64      	ldr	r3, [pc, #400]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004212:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004214:	4a63      	ldr	r2, [pc, #396]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004216:	f043 0301 	orr.w	r3, r3, #1
 800421a:	6713      	str	r3, [r2, #112]	@ 0x70
 800421c:	e01c      	b.n	8004258 <HAL_RCC_OscConfig+0x324>
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	689b      	ldr	r3, [r3, #8]
 8004222:	2b05      	cmp	r3, #5
 8004224:	d10c      	bne.n	8004240 <HAL_RCC_OscConfig+0x30c>
 8004226:	4b5f      	ldr	r3, [pc, #380]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004228:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800422a:	4a5e      	ldr	r2, [pc, #376]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 800422c:	f043 0304 	orr.w	r3, r3, #4
 8004230:	6713      	str	r3, [r2, #112]	@ 0x70
 8004232:	4b5c      	ldr	r3, [pc, #368]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004234:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004236:	4a5b      	ldr	r2, [pc, #364]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004238:	f043 0301 	orr.w	r3, r3, #1
 800423c:	6713      	str	r3, [r2, #112]	@ 0x70
 800423e:	e00b      	b.n	8004258 <HAL_RCC_OscConfig+0x324>
 8004240:	4b58      	ldr	r3, [pc, #352]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004242:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004244:	4a57      	ldr	r2, [pc, #348]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004246:	f023 0301 	bic.w	r3, r3, #1
 800424a:	6713      	str	r3, [r2, #112]	@ 0x70
 800424c:	4b55      	ldr	r3, [pc, #340]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 800424e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004250:	4a54      	ldr	r2, [pc, #336]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004252:	f023 0304 	bic.w	r3, r3, #4
 8004256:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004258:	687b      	ldr	r3, [r7, #4]
 800425a:	689b      	ldr	r3, [r3, #8]
 800425c:	2b00      	cmp	r3, #0
 800425e:	d015      	beq.n	800428c <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004260:	f7fd fe52 	bl	8001f08 <HAL_GetTick>
 8004264:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004266:	e00a      	b.n	800427e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004268:	f7fd fe4e 	bl	8001f08 <HAL_GetTick>
 800426c:	4602      	mov	r2, r0
 800426e:	693b      	ldr	r3, [r7, #16]
 8004270:	1ad3      	subs	r3, r2, r3
 8004272:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004276:	4293      	cmp	r3, r2
 8004278:	d901      	bls.n	800427e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800427a:	2303      	movs	r3, #3
 800427c:	e0cb      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800427e:	4b49      	ldr	r3, [pc, #292]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004280:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004282:	f003 0302 	and.w	r3, r3, #2
 8004286:	2b00      	cmp	r3, #0
 8004288:	d0ee      	beq.n	8004268 <HAL_RCC_OscConfig+0x334>
 800428a:	e014      	b.n	80042b6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800428c:	f7fd fe3c 	bl	8001f08 <HAL_GetTick>
 8004290:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004292:	e00a      	b.n	80042aa <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004294:	f7fd fe38 	bl	8001f08 <HAL_GetTick>
 8004298:	4602      	mov	r2, r0
 800429a:	693b      	ldr	r3, [r7, #16]
 800429c:	1ad3      	subs	r3, r2, r3
 800429e:	f241 3288 	movw	r2, #5000	@ 0x1388
 80042a2:	4293      	cmp	r3, r2
 80042a4:	d901      	bls.n	80042aa <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80042a6:	2303      	movs	r3, #3
 80042a8:	e0b5      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80042aa:	4b3e      	ldr	r3, [pc, #248]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 80042ac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80042ae:	f003 0302 	and.w	r3, r3, #2
 80042b2:	2b00      	cmp	r3, #0
 80042b4:	d1ee      	bne.n	8004294 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80042b6:	7dfb      	ldrb	r3, [r7, #23]
 80042b8:	2b01      	cmp	r3, #1
 80042ba:	d105      	bne.n	80042c8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80042bc:	4b39      	ldr	r3, [pc, #228]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 80042be:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042c0:	4a38      	ldr	r2, [pc, #224]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 80042c2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80042c6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	699b      	ldr	r3, [r3, #24]
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	f000 80a1 	beq.w	8004414 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80042d2:	4b34      	ldr	r3, [pc, #208]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 80042d4:	689b      	ldr	r3, [r3, #8]
 80042d6:	f003 030c 	and.w	r3, r3, #12
 80042da:	2b08      	cmp	r3, #8
 80042dc:	d05c      	beq.n	8004398 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80042de:	687b      	ldr	r3, [r7, #4]
 80042e0:	699b      	ldr	r3, [r3, #24]
 80042e2:	2b02      	cmp	r3, #2
 80042e4:	d141      	bne.n	800436a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80042e6:	4b31      	ldr	r3, [pc, #196]	@ (80043ac <HAL_RCC_OscConfig+0x478>)
 80042e8:	2200      	movs	r2, #0
 80042ea:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80042ec:	f7fd fe0c 	bl	8001f08 <HAL_GetTick>
 80042f0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80042f2:	e008      	b.n	8004306 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 80042f4:	f7fd fe08 	bl	8001f08 <HAL_GetTick>
 80042f8:	4602      	mov	r2, r0
 80042fa:	693b      	ldr	r3, [r7, #16]
 80042fc:	1ad3      	subs	r3, r2, r3
 80042fe:	2b02      	cmp	r3, #2
 8004300:	d901      	bls.n	8004306 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004302:	2303      	movs	r3, #3
 8004304:	e087      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004306:	4b27      	ldr	r3, [pc, #156]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800430e:	2b00      	cmp	r3, #0
 8004310:	d1f0      	bne.n	80042f4 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	69da      	ldr	r2, [r3, #28]
 8004316:	687b      	ldr	r3, [r7, #4]
 8004318:	6a1b      	ldr	r3, [r3, #32]
 800431a:	431a      	orrs	r2, r3
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004320:	019b      	lsls	r3, r3, #6
 8004322:	431a      	orrs	r2, r3
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004328:	085b      	lsrs	r3, r3, #1
 800432a:	3b01      	subs	r3, #1
 800432c:	041b      	lsls	r3, r3, #16
 800432e:	431a      	orrs	r2, r3
 8004330:	687b      	ldr	r3, [r7, #4]
 8004332:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004334:	061b      	lsls	r3, r3, #24
 8004336:	491b      	ldr	r1, [pc, #108]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 8004338:	4313      	orrs	r3, r2
 800433a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800433c:	4b1b      	ldr	r3, [pc, #108]	@ (80043ac <HAL_RCC_OscConfig+0x478>)
 800433e:	2201      	movs	r2, #1
 8004340:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004342:	f7fd fde1 	bl	8001f08 <HAL_GetTick>
 8004346:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004348:	e008      	b.n	800435c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800434a:	f7fd fddd 	bl	8001f08 <HAL_GetTick>
 800434e:	4602      	mov	r2, r0
 8004350:	693b      	ldr	r3, [r7, #16]
 8004352:	1ad3      	subs	r3, r2, r3
 8004354:	2b02      	cmp	r3, #2
 8004356:	d901      	bls.n	800435c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004358:	2303      	movs	r3, #3
 800435a:	e05c      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800435c:	4b11      	ldr	r3, [pc, #68]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004364:	2b00      	cmp	r3, #0
 8004366:	d0f0      	beq.n	800434a <HAL_RCC_OscConfig+0x416>
 8004368:	e054      	b.n	8004414 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800436a:	4b10      	ldr	r3, [pc, #64]	@ (80043ac <HAL_RCC_OscConfig+0x478>)
 800436c:	2200      	movs	r2, #0
 800436e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004370:	f7fd fdca 	bl	8001f08 <HAL_GetTick>
 8004374:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004376:	e008      	b.n	800438a <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004378:	f7fd fdc6 	bl	8001f08 <HAL_GetTick>
 800437c:	4602      	mov	r2, r0
 800437e:	693b      	ldr	r3, [r7, #16]
 8004380:	1ad3      	subs	r3, r2, r3
 8004382:	2b02      	cmp	r3, #2
 8004384:	d901      	bls.n	800438a <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004386:	2303      	movs	r3, #3
 8004388:	e045      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800438a:	4b06      	ldr	r3, [pc, #24]	@ (80043a4 <HAL_RCC_OscConfig+0x470>)
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004392:	2b00      	cmp	r3, #0
 8004394:	d1f0      	bne.n	8004378 <HAL_RCC_OscConfig+0x444>
 8004396:	e03d      	b.n	8004414 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	699b      	ldr	r3, [r3, #24]
 800439c:	2b01      	cmp	r3, #1
 800439e:	d107      	bne.n	80043b0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80043a0:	2301      	movs	r3, #1
 80043a2:	e038      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
 80043a4:	40023800 	.word	0x40023800
 80043a8:	40007000 	.word	0x40007000
 80043ac:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80043b0:	4b1b      	ldr	r3, [pc, #108]	@ (8004420 <HAL_RCC_OscConfig+0x4ec>)
 80043b2:	685b      	ldr	r3, [r3, #4]
 80043b4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	699b      	ldr	r3, [r3, #24]
 80043ba:	2b01      	cmp	r3, #1
 80043bc:	d028      	beq.n	8004410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043be:	68fb      	ldr	r3, [r7, #12]
 80043c0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80043c8:	429a      	cmp	r2, r3
 80043ca:	d121      	bne.n	8004410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043cc:	68fb      	ldr	r3, [r7, #12]
 80043ce:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80043d2:	687b      	ldr	r3, [r7, #4]
 80043d4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80043d6:	429a      	cmp	r2, r3
 80043d8:	d11a      	bne.n	8004410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043da:	68fa      	ldr	r2, [r7, #12]
 80043dc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 80043e0:	4013      	ands	r3, r2
 80043e2:	687a      	ldr	r2, [r7, #4]
 80043e4:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 80043e6:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80043e8:	4293      	cmp	r3, r2
 80043ea:	d111      	bne.n	8004410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 80043ec:	68fb      	ldr	r3, [r7, #12]
 80043ee:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 80043f2:	687b      	ldr	r3, [r7, #4]
 80043f4:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80043f6:	085b      	lsrs	r3, r3, #1
 80043f8:	3b01      	subs	r3, #1
 80043fa:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80043fc:	429a      	cmp	r2, r3
 80043fe:	d107      	bne.n	8004410 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004400:	68fb      	ldr	r3, [r7, #12]
 8004402:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004406:	687b      	ldr	r3, [r7, #4]
 8004408:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800440a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800440c:	429a      	cmp	r2, r3
 800440e:	d001      	beq.n	8004414 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004410:	2301      	movs	r3, #1
 8004412:	e000      	b.n	8004416 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004414:	2300      	movs	r3, #0
}
 8004416:	4618      	mov	r0, r3
 8004418:	3718      	adds	r7, #24
 800441a:	46bd      	mov	sp, r7
 800441c:	bd80      	pop	{r7, pc}
 800441e:	bf00      	nop
 8004420:	40023800 	.word	0x40023800

08004424 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004424:	b580      	push	{r7, lr}
 8004426:	b084      	sub	sp, #16
 8004428:	af00      	add	r7, sp, #0
 800442a:	6078      	str	r0, [r7, #4]
 800442c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800442e:	687b      	ldr	r3, [r7, #4]
 8004430:	2b00      	cmp	r3, #0
 8004432:	d101      	bne.n	8004438 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004434:	2301      	movs	r3, #1
 8004436:	e0cc      	b.n	80045d2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004438:	4b68      	ldr	r3, [pc, #416]	@ (80045dc <HAL_RCC_ClockConfig+0x1b8>)
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f003 0307 	and.w	r3, r3, #7
 8004440:	683a      	ldr	r2, [r7, #0]
 8004442:	429a      	cmp	r2, r3
 8004444:	d90c      	bls.n	8004460 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004446:	4b65      	ldr	r3, [pc, #404]	@ (80045dc <HAL_RCC_ClockConfig+0x1b8>)
 8004448:	683a      	ldr	r2, [r7, #0]
 800444a:	b2d2      	uxtb	r2, r2
 800444c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800444e:	4b63      	ldr	r3, [pc, #396]	@ (80045dc <HAL_RCC_ClockConfig+0x1b8>)
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f003 0307 	and.w	r3, r3, #7
 8004456:	683a      	ldr	r2, [r7, #0]
 8004458:	429a      	cmp	r2, r3
 800445a:	d001      	beq.n	8004460 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800445c:	2301      	movs	r3, #1
 800445e:	e0b8      	b.n	80045d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f003 0302 	and.w	r3, r3, #2
 8004468:	2b00      	cmp	r3, #0
 800446a:	d020      	beq.n	80044ae <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800446c:	687b      	ldr	r3, [r7, #4]
 800446e:	681b      	ldr	r3, [r3, #0]
 8004470:	f003 0304 	and.w	r3, r3, #4
 8004474:	2b00      	cmp	r3, #0
 8004476:	d005      	beq.n	8004484 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004478:	4b59      	ldr	r3, [pc, #356]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 800447a:	689b      	ldr	r3, [r3, #8]
 800447c:	4a58      	ldr	r2, [pc, #352]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 800447e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004482:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f003 0308 	and.w	r3, r3, #8
 800448c:	2b00      	cmp	r3, #0
 800448e:	d005      	beq.n	800449c <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004490:	4b53      	ldr	r3, [pc, #332]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004492:	689b      	ldr	r3, [r3, #8]
 8004494:	4a52      	ldr	r2, [pc, #328]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004496:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 800449a:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 800449c:	4b50      	ldr	r3, [pc, #320]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 800449e:	689b      	ldr	r3, [r3, #8]
 80044a0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80044a4:	687b      	ldr	r3, [r7, #4]
 80044a6:	689b      	ldr	r3, [r3, #8]
 80044a8:	494d      	ldr	r1, [pc, #308]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 80044aa:	4313      	orrs	r3, r2
 80044ac:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80044ae:	687b      	ldr	r3, [r7, #4]
 80044b0:	681b      	ldr	r3, [r3, #0]
 80044b2:	f003 0301 	and.w	r3, r3, #1
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d044      	beq.n	8004544 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	685b      	ldr	r3, [r3, #4]
 80044be:	2b01      	cmp	r3, #1
 80044c0:	d107      	bne.n	80044d2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80044c2:	4b47      	ldr	r3, [pc, #284]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80044ca:	2b00      	cmp	r3, #0
 80044cc:	d119      	bne.n	8004502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ce:	2301      	movs	r3, #1
 80044d0:	e07f      	b.n	80045d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044d2:	687b      	ldr	r3, [r7, #4]
 80044d4:	685b      	ldr	r3, [r3, #4]
 80044d6:	2b02      	cmp	r3, #2
 80044d8:	d003      	beq.n	80044e2 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80044de:	2b03      	cmp	r3, #3
 80044e0:	d107      	bne.n	80044f2 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80044e2:	4b3f      	ldr	r3, [pc, #252]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 80044e4:	681b      	ldr	r3, [r3, #0]
 80044e6:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80044ea:	2b00      	cmp	r3, #0
 80044ec:	d109      	bne.n	8004502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044ee:	2301      	movs	r3, #1
 80044f0:	e06f      	b.n	80045d2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80044f2:	4b3b      	ldr	r3, [pc, #236]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f003 0302 	and.w	r3, r3, #2
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d101      	bne.n	8004502 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80044fe:	2301      	movs	r3, #1
 8004500:	e067      	b.n	80045d2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004502:	4b37      	ldr	r3, [pc, #220]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004504:	689b      	ldr	r3, [r3, #8]
 8004506:	f023 0203 	bic.w	r2, r3, #3
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	685b      	ldr	r3, [r3, #4]
 800450e:	4934      	ldr	r1, [pc, #208]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004510:	4313      	orrs	r3, r2
 8004512:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004514:	f7fd fcf8 	bl	8001f08 <HAL_GetTick>
 8004518:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800451a:	e00a      	b.n	8004532 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800451c:	f7fd fcf4 	bl	8001f08 <HAL_GetTick>
 8004520:	4602      	mov	r2, r0
 8004522:	68fb      	ldr	r3, [r7, #12]
 8004524:	1ad3      	subs	r3, r2, r3
 8004526:	f241 3288 	movw	r2, #5000	@ 0x1388
 800452a:	4293      	cmp	r3, r2
 800452c:	d901      	bls.n	8004532 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800452e:	2303      	movs	r3, #3
 8004530:	e04f      	b.n	80045d2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004532:	4b2b      	ldr	r3, [pc, #172]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004534:	689b      	ldr	r3, [r3, #8]
 8004536:	f003 020c 	and.w	r2, r3, #12
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	685b      	ldr	r3, [r3, #4]
 800453e:	009b      	lsls	r3, r3, #2
 8004540:	429a      	cmp	r2, r3
 8004542:	d1eb      	bne.n	800451c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004544:	4b25      	ldr	r3, [pc, #148]	@ (80045dc <HAL_RCC_ClockConfig+0x1b8>)
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0307 	and.w	r3, r3, #7
 800454c:	683a      	ldr	r2, [r7, #0]
 800454e:	429a      	cmp	r2, r3
 8004550:	d20c      	bcs.n	800456c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004552:	4b22      	ldr	r3, [pc, #136]	@ (80045dc <HAL_RCC_ClockConfig+0x1b8>)
 8004554:	683a      	ldr	r2, [r7, #0]
 8004556:	b2d2      	uxtb	r2, r2
 8004558:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800455a:	4b20      	ldr	r3, [pc, #128]	@ (80045dc <HAL_RCC_ClockConfig+0x1b8>)
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	f003 0307 	and.w	r3, r3, #7
 8004562:	683a      	ldr	r2, [r7, #0]
 8004564:	429a      	cmp	r2, r3
 8004566:	d001      	beq.n	800456c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004568:	2301      	movs	r3, #1
 800456a:	e032      	b.n	80045d2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	681b      	ldr	r3, [r3, #0]
 8004570:	f003 0304 	and.w	r3, r3, #4
 8004574:	2b00      	cmp	r3, #0
 8004576:	d008      	beq.n	800458a <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004578:	4b19      	ldr	r3, [pc, #100]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 800457a:	689b      	ldr	r3, [r3, #8]
 800457c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	68db      	ldr	r3, [r3, #12]
 8004584:	4916      	ldr	r1, [pc, #88]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004586:	4313      	orrs	r3, r2
 8004588:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800458a:	687b      	ldr	r3, [r7, #4]
 800458c:	681b      	ldr	r3, [r3, #0]
 800458e:	f003 0308 	and.w	r3, r3, #8
 8004592:	2b00      	cmp	r3, #0
 8004594:	d009      	beq.n	80045aa <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004596:	4b12      	ldr	r3, [pc, #72]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 8004598:	689b      	ldr	r3, [r3, #8]
 800459a:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	691b      	ldr	r3, [r3, #16]
 80045a2:	00db      	lsls	r3, r3, #3
 80045a4:	490e      	ldr	r1, [pc, #56]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045a6:	4313      	orrs	r3, r2
 80045a8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80045aa:	f000 f821 	bl	80045f0 <HAL_RCC_GetSysClockFreq>
 80045ae:	4602      	mov	r2, r0
 80045b0:	4b0b      	ldr	r3, [pc, #44]	@ (80045e0 <HAL_RCC_ClockConfig+0x1bc>)
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	091b      	lsrs	r3, r3, #4
 80045b6:	f003 030f 	and.w	r3, r3, #15
 80045ba:	490a      	ldr	r1, [pc, #40]	@ (80045e4 <HAL_RCC_ClockConfig+0x1c0>)
 80045bc:	5ccb      	ldrb	r3, [r1, r3]
 80045be:	fa22 f303 	lsr.w	r3, r2, r3
 80045c2:	4a09      	ldr	r2, [pc, #36]	@ (80045e8 <HAL_RCC_ClockConfig+0x1c4>)
 80045c4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80045c6:	4b09      	ldr	r3, [pc, #36]	@ (80045ec <HAL_RCC_ClockConfig+0x1c8>)
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	4618      	mov	r0, r3
 80045cc:	f7fd fc58 	bl	8001e80 <HAL_InitTick>

  return HAL_OK;
 80045d0:	2300      	movs	r3, #0
}
 80045d2:	4618      	mov	r0, r3
 80045d4:	3710      	adds	r7, #16
 80045d6:	46bd      	mov	sp, r7
 80045d8:	bd80      	pop	{r7, pc}
 80045da:	bf00      	nop
 80045dc:	40023c00 	.word	0x40023c00
 80045e0:	40023800 	.word	0x40023800
 80045e4:	08008798 	.word	0x08008798
 80045e8:	20000004 	.word	0x20000004
 80045ec:	20000008 	.word	0x20000008

080045f0 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 80045f0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80045f4:	b094      	sub	sp, #80	@ 0x50
 80045f6:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 80045f8:	2300      	movs	r3, #0
 80045fa:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 80045fc:	2300      	movs	r3, #0
 80045fe:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004600:	2300      	movs	r3, #0
 8004602:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004604:	2300      	movs	r3, #0
 8004606:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004608:	4b79      	ldr	r3, [pc, #484]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800460a:	689b      	ldr	r3, [r3, #8]
 800460c:	f003 030c 	and.w	r3, r3, #12
 8004610:	2b08      	cmp	r3, #8
 8004612:	d00d      	beq.n	8004630 <HAL_RCC_GetSysClockFreq+0x40>
 8004614:	2b08      	cmp	r3, #8
 8004616:	f200 80e1 	bhi.w	80047dc <HAL_RCC_GetSysClockFreq+0x1ec>
 800461a:	2b00      	cmp	r3, #0
 800461c:	d002      	beq.n	8004624 <HAL_RCC_GetSysClockFreq+0x34>
 800461e:	2b04      	cmp	r3, #4
 8004620:	d003      	beq.n	800462a <HAL_RCC_GetSysClockFreq+0x3a>
 8004622:	e0db      	b.n	80047dc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004624:	4b73      	ldr	r3, [pc, #460]	@ (80047f4 <HAL_RCC_GetSysClockFreq+0x204>)
 8004626:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004628:	e0db      	b.n	80047e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800462a:	4b73      	ldr	r3, [pc, #460]	@ (80047f8 <HAL_RCC_GetSysClockFreq+0x208>)
 800462c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800462e:	e0d8      	b.n	80047e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004630:	4b6f      	ldr	r3, [pc, #444]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004638:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800463a:	4b6d      	ldr	r3, [pc, #436]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x200>)
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004642:	2b00      	cmp	r3, #0
 8004644:	d063      	beq.n	800470e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004646:	4b6a      	ldr	r3, [pc, #424]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004648:	685b      	ldr	r3, [r3, #4]
 800464a:	099b      	lsrs	r3, r3, #6
 800464c:	2200      	movs	r2, #0
 800464e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004650:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004652:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004654:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004658:	633b      	str	r3, [r7, #48]	@ 0x30
 800465a:	2300      	movs	r3, #0
 800465c:	637b      	str	r3, [r7, #52]	@ 0x34
 800465e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004662:	4622      	mov	r2, r4
 8004664:	462b      	mov	r3, r5
 8004666:	f04f 0000 	mov.w	r0, #0
 800466a:	f04f 0100 	mov.w	r1, #0
 800466e:	0159      	lsls	r1, r3, #5
 8004670:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8004674:	0150      	lsls	r0, r2, #5
 8004676:	4602      	mov	r2, r0
 8004678:	460b      	mov	r3, r1
 800467a:	4621      	mov	r1, r4
 800467c:	1a51      	subs	r1, r2, r1
 800467e:	6139      	str	r1, [r7, #16]
 8004680:	4629      	mov	r1, r5
 8004682:	eb63 0301 	sbc.w	r3, r3, r1
 8004686:	617b      	str	r3, [r7, #20]
 8004688:	f04f 0200 	mov.w	r2, #0
 800468c:	f04f 0300 	mov.w	r3, #0
 8004690:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8004694:	4659      	mov	r1, fp
 8004696:	018b      	lsls	r3, r1, #6
 8004698:	4651      	mov	r1, sl
 800469a:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800469e:	4651      	mov	r1, sl
 80046a0:	018a      	lsls	r2, r1, #6
 80046a2:	4651      	mov	r1, sl
 80046a4:	ebb2 0801 	subs.w	r8, r2, r1
 80046a8:	4659      	mov	r1, fp
 80046aa:	eb63 0901 	sbc.w	r9, r3, r1
 80046ae:	f04f 0200 	mov.w	r2, #0
 80046b2:	f04f 0300 	mov.w	r3, #0
 80046b6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80046ba:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80046be:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80046c2:	4690      	mov	r8, r2
 80046c4:	4699      	mov	r9, r3
 80046c6:	4623      	mov	r3, r4
 80046c8:	eb18 0303 	adds.w	r3, r8, r3
 80046cc:	60bb      	str	r3, [r7, #8]
 80046ce:	462b      	mov	r3, r5
 80046d0:	eb49 0303 	adc.w	r3, r9, r3
 80046d4:	60fb      	str	r3, [r7, #12]
 80046d6:	f04f 0200 	mov.w	r2, #0
 80046da:	f04f 0300 	mov.w	r3, #0
 80046de:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 80046e2:	4629      	mov	r1, r5
 80046e4:	024b      	lsls	r3, r1, #9
 80046e6:	4621      	mov	r1, r4
 80046e8:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 80046ec:	4621      	mov	r1, r4
 80046ee:	024a      	lsls	r2, r1, #9
 80046f0:	4610      	mov	r0, r2
 80046f2:	4619      	mov	r1, r3
 80046f4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80046f6:	2200      	movs	r2, #0
 80046f8:	62bb      	str	r3, [r7, #40]	@ 0x28
 80046fa:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80046fc:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8004700:	f7fc faaa 	bl	8000c58 <__aeabi_uldivmod>
 8004704:	4602      	mov	r2, r0
 8004706:	460b      	mov	r3, r1
 8004708:	4613      	mov	r3, r2
 800470a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800470c:	e058      	b.n	80047c0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800470e:	4b38      	ldr	r3, [pc, #224]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x200>)
 8004710:	685b      	ldr	r3, [r3, #4]
 8004712:	099b      	lsrs	r3, r3, #6
 8004714:	2200      	movs	r2, #0
 8004716:	4618      	mov	r0, r3
 8004718:	4611      	mov	r1, r2
 800471a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800471e:	623b      	str	r3, [r7, #32]
 8004720:	2300      	movs	r3, #0
 8004722:	627b      	str	r3, [r7, #36]	@ 0x24
 8004724:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8004728:	4642      	mov	r2, r8
 800472a:	464b      	mov	r3, r9
 800472c:	f04f 0000 	mov.w	r0, #0
 8004730:	f04f 0100 	mov.w	r1, #0
 8004734:	0159      	lsls	r1, r3, #5
 8004736:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800473a:	0150      	lsls	r0, r2, #5
 800473c:	4602      	mov	r2, r0
 800473e:	460b      	mov	r3, r1
 8004740:	4641      	mov	r1, r8
 8004742:	ebb2 0a01 	subs.w	sl, r2, r1
 8004746:	4649      	mov	r1, r9
 8004748:	eb63 0b01 	sbc.w	fp, r3, r1
 800474c:	f04f 0200 	mov.w	r2, #0
 8004750:	f04f 0300 	mov.w	r3, #0
 8004754:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8004758:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800475c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8004760:	ebb2 040a 	subs.w	r4, r2, sl
 8004764:	eb63 050b 	sbc.w	r5, r3, fp
 8004768:	f04f 0200 	mov.w	r2, #0
 800476c:	f04f 0300 	mov.w	r3, #0
 8004770:	00eb      	lsls	r3, r5, #3
 8004772:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8004776:	00e2      	lsls	r2, r4, #3
 8004778:	4614      	mov	r4, r2
 800477a:	461d      	mov	r5, r3
 800477c:	4643      	mov	r3, r8
 800477e:	18e3      	adds	r3, r4, r3
 8004780:	603b      	str	r3, [r7, #0]
 8004782:	464b      	mov	r3, r9
 8004784:	eb45 0303 	adc.w	r3, r5, r3
 8004788:	607b      	str	r3, [r7, #4]
 800478a:	f04f 0200 	mov.w	r2, #0
 800478e:	f04f 0300 	mov.w	r3, #0
 8004792:	e9d7 4500 	ldrd	r4, r5, [r7]
 8004796:	4629      	mov	r1, r5
 8004798:	028b      	lsls	r3, r1, #10
 800479a:	4621      	mov	r1, r4
 800479c:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80047a0:	4621      	mov	r1, r4
 80047a2:	028a      	lsls	r2, r1, #10
 80047a4:	4610      	mov	r0, r2
 80047a6:	4619      	mov	r1, r3
 80047a8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80047aa:	2200      	movs	r2, #0
 80047ac:	61bb      	str	r3, [r7, #24]
 80047ae:	61fa      	str	r2, [r7, #28]
 80047b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80047b4:	f7fc fa50 	bl	8000c58 <__aeabi_uldivmod>
 80047b8:	4602      	mov	r2, r0
 80047ba:	460b      	mov	r3, r1
 80047bc:	4613      	mov	r3, r2
 80047be:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80047c0:	4b0b      	ldr	r3, [pc, #44]	@ (80047f0 <HAL_RCC_GetSysClockFreq+0x200>)
 80047c2:	685b      	ldr	r3, [r3, #4]
 80047c4:	0c1b      	lsrs	r3, r3, #16
 80047c6:	f003 0303 	and.w	r3, r3, #3
 80047ca:	3301      	adds	r3, #1
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80047d0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80047d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80047d4:	fbb2 f3f3 	udiv	r3, r2, r3
 80047d8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047da:	e002      	b.n	80047e2 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80047dc:	4b05      	ldr	r3, [pc, #20]	@ (80047f4 <HAL_RCC_GetSysClockFreq+0x204>)
 80047de:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80047e0:	bf00      	nop
    }
  }
  return sysclockfreq;
 80047e2:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 80047e4:	4618      	mov	r0, r3
 80047e6:	3750      	adds	r7, #80	@ 0x50
 80047e8:	46bd      	mov	sp, r7
 80047ea:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80047ee:	bf00      	nop
 80047f0:	40023800 	.word	0x40023800
 80047f4:	00f42400 	.word	0x00f42400
 80047f8:	007a1200 	.word	0x007a1200

080047fc <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80047fc:	b480      	push	{r7}
 80047fe:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8004800:	4b03      	ldr	r3, [pc, #12]	@ (8004810 <HAL_RCC_GetHCLKFreq+0x14>)
 8004802:	681b      	ldr	r3, [r3, #0]
}
 8004804:	4618      	mov	r0, r3
 8004806:	46bd      	mov	sp, r7
 8004808:	f85d 7b04 	ldr.w	r7, [sp], #4
 800480c:	4770      	bx	lr
 800480e:	bf00      	nop
 8004810:	20000004 	.word	0x20000004

08004814 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8004814:	b580      	push	{r7, lr}
 8004816:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8004818:	f7ff fff0 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 800481c:	4602      	mov	r2, r0
 800481e:	4b05      	ldr	r3, [pc, #20]	@ (8004834 <HAL_RCC_GetPCLK1Freq+0x20>)
 8004820:	689b      	ldr	r3, [r3, #8]
 8004822:	0a9b      	lsrs	r3, r3, #10
 8004824:	f003 0307 	and.w	r3, r3, #7
 8004828:	4903      	ldr	r1, [pc, #12]	@ (8004838 <HAL_RCC_GetPCLK1Freq+0x24>)
 800482a:	5ccb      	ldrb	r3, [r1, r3]
 800482c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004830:	4618      	mov	r0, r3
 8004832:	bd80      	pop	{r7, pc}
 8004834:	40023800 	.word	0x40023800
 8004838:	080087a8 	.word	0x080087a8

0800483c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8004840:	f7ff ffdc 	bl	80047fc <HAL_RCC_GetHCLKFreq>
 8004844:	4602      	mov	r2, r0
 8004846:	4b05      	ldr	r3, [pc, #20]	@ (800485c <HAL_RCC_GetPCLK2Freq+0x20>)
 8004848:	689b      	ldr	r3, [r3, #8]
 800484a:	0b5b      	lsrs	r3, r3, #13
 800484c:	f003 0307 	and.w	r3, r3, #7
 8004850:	4903      	ldr	r1, [pc, #12]	@ (8004860 <HAL_RCC_GetPCLK2Freq+0x24>)
 8004852:	5ccb      	ldrb	r3, [r1, r3]
 8004854:	fa22 f303 	lsr.w	r3, r2, r3
}
 8004858:	4618      	mov	r0, r3
 800485a:	bd80      	pop	{r7, pc}
 800485c:	40023800 	.word	0x40023800
 8004860:	080087a8 	.word	0x080087a8

08004864 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004864:	b580      	push	{r7, lr}
 8004866:	b082      	sub	sp, #8
 8004868:	af00      	add	r7, sp, #0
 800486a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800486c:	687b      	ldr	r3, [r7, #4]
 800486e:	2b00      	cmp	r3, #0
 8004870:	d101      	bne.n	8004876 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004872:	2301      	movs	r3, #1
 8004874:	e042      	b.n	80048fc <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8004876:	687b      	ldr	r3, [r7, #4]
 8004878:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800487c:	b2db      	uxtb	r3, r3
 800487e:	2b00      	cmp	r3, #0
 8004880:	d106      	bne.n	8004890 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	2200      	movs	r2, #0
 8004886:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800488a:	6878      	ldr	r0, [r7, #4]
 800488c:	f7fc ff82 	bl	8001794 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2224      	movs	r2, #36	@ 0x24
 8004894:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8004898:	687b      	ldr	r3, [r7, #4]
 800489a:	681b      	ldr	r3, [r3, #0]
 800489c:	68da      	ldr	r2, [r3, #12]
 800489e:	687b      	ldr	r3, [r7, #4]
 80048a0:	681b      	ldr	r3, [r3, #0]
 80048a2:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 80048a6:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048a8:	6878      	ldr	r0, [r7, #4]
 80048aa:	f000 fdbd 	bl	8005428 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	681b      	ldr	r3, [r3, #0]
 80048b2:	691a      	ldr	r2, [r3, #16]
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	681b      	ldr	r3, [r3, #0]
 80048b8:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 80048bc:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048be:	687b      	ldr	r3, [r7, #4]
 80048c0:	681b      	ldr	r3, [r3, #0]
 80048c2:	695a      	ldr	r2, [r3, #20]
 80048c4:	687b      	ldr	r3, [r7, #4]
 80048c6:	681b      	ldr	r3, [r3, #0]
 80048c8:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 80048cc:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	68da      	ldr	r2, [r3, #12]
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	681b      	ldr	r3, [r3, #0]
 80048d8:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 80048dc:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80048de:	687b      	ldr	r3, [r7, #4]
 80048e0:	2200      	movs	r2, #0
 80048e2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2220      	movs	r2, #32
 80048e8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	2220      	movs	r2, #32
 80048f0:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 80048fa:	2300      	movs	r3, #0
}
 80048fc:	4618      	mov	r0, r3
 80048fe:	3708      	adds	r7, #8
 8004900:	46bd      	mov	sp, r7
 8004902:	bd80      	pop	{r7, pc}

08004904 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8004904:	b580      	push	{r7, lr}
 8004906:	b08a      	sub	sp, #40	@ 0x28
 8004908:	af02      	add	r7, sp, #8
 800490a:	60f8      	str	r0, [r7, #12]
 800490c:	60b9      	str	r1, [r7, #8]
 800490e:	603b      	str	r3, [r7, #0]
 8004910:	4613      	mov	r3, r2
 8004912:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8004914:	2300      	movs	r3, #0
 8004916:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8004918:	68fb      	ldr	r3, [r7, #12]
 800491a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800491e:	b2db      	uxtb	r3, r3
 8004920:	2b20      	cmp	r3, #32
 8004922:	d175      	bne.n	8004a10 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8004924:	68bb      	ldr	r3, [r7, #8]
 8004926:	2b00      	cmp	r3, #0
 8004928:	d002      	beq.n	8004930 <HAL_UART_Transmit+0x2c>
 800492a:	88fb      	ldrh	r3, [r7, #6]
 800492c:	2b00      	cmp	r3, #0
 800492e:	d101      	bne.n	8004934 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8004930:	2301      	movs	r3, #1
 8004932:	e06e      	b.n	8004a12 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004934:	68fb      	ldr	r3, [r7, #12]
 8004936:	2200      	movs	r2, #0
 8004938:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800493a:	68fb      	ldr	r3, [r7, #12]
 800493c:	2221      	movs	r2, #33	@ 0x21
 800493e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8004942:	f7fd fae1 	bl	8001f08 <HAL_GetTick>
 8004946:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8004948:	68fb      	ldr	r3, [r7, #12]
 800494a:	88fa      	ldrh	r2, [r7, #6]
 800494c:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 800494e:	68fb      	ldr	r3, [r7, #12]
 8004950:	88fa      	ldrh	r2, [r7, #6]
 8004952:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8004954:	68fb      	ldr	r3, [r7, #12]
 8004956:	689b      	ldr	r3, [r3, #8]
 8004958:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800495c:	d108      	bne.n	8004970 <HAL_UART_Transmit+0x6c>
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	691b      	ldr	r3, [r3, #16]
 8004962:	2b00      	cmp	r3, #0
 8004964:	d104      	bne.n	8004970 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8004966:	2300      	movs	r3, #0
 8004968:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 800496a:	68bb      	ldr	r3, [r7, #8]
 800496c:	61bb      	str	r3, [r7, #24]
 800496e:	e003      	b.n	8004978 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8004970:	68bb      	ldr	r3, [r7, #8]
 8004972:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8004974:	2300      	movs	r3, #0
 8004976:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8004978:	e02e      	b.n	80049d8 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 800497a:	683b      	ldr	r3, [r7, #0]
 800497c:	9300      	str	r3, [sp, #0]
 800497e:	697b      	ldr	r3, [r7, #20]
 8004980:	2200      	movs	r2, #0
 8004982:	2180      	movs	r1, #128	@ 0x80
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 fb1f 	bl	8004fc8 <UART_WaitOnFlagUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d005      	beq.n	800499c <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	2220      	movs	r2, #32
 8004994:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8004998:	2303      	movs	r3, #3
 800499a:	e03a      	b.n	8004a12 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800499c:	69fb      	ldr	r3, [r7, #28]
 800499e:	2b00      	cmp	r3, #0
 80049a0:	d10b      	bne.n	80049ba <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 80049a2:	69bb      	ldr	r3, [r7, #24]
 80049a4:	881b      	ldrh	r3, [r3, #0]
 80049a6:	461a      	mov	r2, r3
 80049a8:	68fb      	ldr	r3, [r7, #12]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80049b0:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 80049b2:	69bb      	ldr	r3, [r7, #24]
 80049b4:	3302      	adds	r3, #2
 80049b6:	61bb      	str	r3, [r7, #24]
 80049b8:	e007      	b.n	80049ca <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 80049ba:	69fb      	ldr	r3, [r7, #28]
 80049bc:	781a      	ldrb	r2, [r3, #0]
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	3301      	adds	r3, #1
 80049c8:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049ce:	b29b      	uxth	r3, r3
 80049d0:	3b01      	subs	r3, #1
 80049d2:	b29a      	uxth	r2, r3
 80049d4:	68fb      	ldr	r3, [r7, #12]
 80049d6:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 80049d8:	68fb      	ldr	r3, [r7, #12]
 80049da:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80049dc:	b29b      	uxth	r3, r3
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d1cb      	bne.n	800497a <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	9300      	str	r3, [sp, #0]
 80049e6:	697b      	ldr	r3, [r7, #20]
 80049e8:	2200      	movs	r2, #0
 80049ea:	2140      	movs	r1, #64	@ 0x40
 80049ec:	68f8      	ldr	r0, [r7, #12]
 80049ee:	f000 faeb 	bl	8004fc8 <UART_WaitOnFlagUntilTimeout>
 80049f2:	4603      	mov	r3, r0
 80049f4:	2b00      	cmp	r3, #0
 80049f6:	d005      	beq.n	8004a04 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	2220      	movs	r2, #32
 80049fc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8004a00:	2303      	movs	r3, #3
 8004a02:	e006      	b.n	8004a12 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8004a04:	68fb      	ldr	r3, [r7, #12]
 8004a06:	2220      	movs	r2, #32
 8004a08:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8004a0c:	2300      	movs	r3, #0
 8004a0e:	e000      	b.n	8004a12 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8004a10:	2302      	movs	r3, #2
  }
}
 8004a12:	4618      	mov	r0, r3
 8004a14:	3720      	adds	r7, #32
 8004a16:	46bd      	mov	sp, r7
 8004a18:	bd80      	pop	{r7, pc}

08004a1a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8004a1a:	b580      	push	{r7, lr}
 8004a1c:	b084      	sub	sp, #16
 8004a1e:	af00      	add	r7, sp, #0
 8004a20:	60f8      	str	r0, [r7, #12]
 8004a22:	60b9      	str	r1, [r7, #8]
 8004a24:	4613      	mov	r3, r2
 8004a26:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8004a28:	68fb      	ldr	r3, [r7, #12]
 8004a2a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8004a2e:	b2db      	uxtb	r3, r3
 8004a30:	2b20      	cmp	r3, #32
 8004a32:	d112      	bne.n	8004a5a <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8004a34:	68bb      	ldr	r3, [r7, #8]
 8004a36:	2b00      	cmp	r3, #0
 8004a38:	d002      	beq.n	8004a40 <HAL_UART_Receive_IT+0x26>
 8004a3a:	88fb      	ldrh	r3, [r7, #6]
 8004a3c:	2b00      	cmp	r3, #0
 8004a3e:	d101      	bne.n	8004a44 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8004a40:	2301      	movs	r3, #1
 8004a42:	e00b      	b.n	8004a5c <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004a44:	68fb      	ldr	r3, [r7, #12]
 8004a46:	2200      	movs	r2, #0
 8004a48:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8004a4a:	88fb      	ldrh	r3, [r7, #6]
 8004a4c:	461a      	mov	r2, r3
 8004a4e:	68b9      	ldr	r1, [r7, #8]
 8004a50:	68f8      	ldr	r0, [r7, #12]
 8004a52:	f000 fb12 	bl	800507a <UART_Start_Receive_IT>
 8004a56:	4603      	mov	r3, r0
 8004a58:	e000      	b.n	8004a5c <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8004a5a:	2302      	movs	r3, #2
  }
}
 8004a5c:	4618      	mov	r0, r3
 8004a5e:	3710      	adds	r7, #16
 8004a60:	46bd      	mov	sp, r7
 8004a62:	bd80      	pop	{r7, pc}

08004a64 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8004a64:	b580      	push	{r7, lr}
 8004a66:	b0ba      	sub	sp, #232	@ 0xe8
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8004a6c:	687b      	ldr	r3, [r7, #4]
 8004a6e:	681b      	ldr	r3, [r3, #0]
 8004a70:	681b      	ldr	r3, [r3, #0]
 8004a72:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	681b      	ldr	r3, [r3, #0]
 8004a7a:	68db      	ldr	r3, [r3, #12]
 8004a7c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8004a8a:	2300      	movs	r3, #0
 8004a8c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8004a90:	2300      	movs	r3, #0
 8004a92:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8004a96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004a9a:	f003 030f 	and.w	r3, r3, #15
 8004a9e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8004aa2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d10f      	bne.n	8004aca <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004aaa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004aae:	f003 0320 	and.w	r3, r3, #32
 8004ab2:	2b00      	cmp	r3, #0
 8004ab4:	d009      	beq.n	8004aca <HAL_UART_IRQHandler+0x66>
 8004ab6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004aba:	f003 0320 	and.w	r3, r3, #32
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d003      	beq.n	8004aca <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8004ac2:	6878      	ldr	r0, [r7, #4]
 8004ac4:	f000 fbf2 	bl	80052ac <UART_Receive_IT>
      return;
 8004ac8:	e25b      	b.n	8004f82 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8004aca:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8004ace:	2b00      	cmp	r3, #0
 8004ad0:	f000 80de 	beq.w	8004c90 <HAL_UART_IRQHandler+0x22c>
 8004ad4:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004ad8:	f003 0301 	and.w	r3, r3, #1
 8004adc:	2b00      	cmp	r3, #0
 8004ade:	d106      	bne.n	8004aee <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8004ae0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ae4:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8004ae8:	2b00      	cmp	r3, #0
 8004aea:	f000 80d1 	beq.w	8004c90 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8004aee:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004af2:	f003 0301 	and.w	r3, r3, #1
 8004af6:	2b00      	cmp	r3, #0
 8004af8:	d00b      	beq.n	8004b12 <HAL_UART_IRQHandler+0xae>
 8004afa:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004afe:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b02:	2b00      	cmp	r3, #0
 8004b04:	d005      	beq.n	8004b12 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b0a:	f043 0201 	orr.w	r2, r3, #1
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b16:	f003 0304 	and.w	r3, r3, #4
 8004b1a:	2b00      	cmp	r3, #0
 8004b1c:	d00b      	beq.n	8004b36 <HAL_UART_IRQHandler+0xd2>
 8004b1e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b22:	f003 0301 	and.w	r3, r3, #1
 8004b26:	2b00      	cmp	r3, #0
 8004b28:	d005      	beq.n	8004b36 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8004b2a:	687b      	ldr	r3, [r7, #4]
 8004b2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b2e:	f043 0202 	orr.w	r2, r3, #2
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8004b36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b3a:	f003 0302 	and.w	r3, r3, #2
 8004b3e:	2b00      	cmp	r3, #0
 8004b40:	d00b      	beq.n	8004b5a <HAL_UART_IRQHandler+0xf6>
 8004b42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b46:	f003 0301 	and.w	r3, r3, #1
 8004b4a:	2b00      	cmp	r3, #0
 8004b4c:	d005      	beq.n	8004b5a <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b52:	f043 0204 	orr.w	r2, r3, #4
 8004b56:	687b      	ldr	r3, [r7, #4]
 8004b58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8004b5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b5e:	f003 0308 	and.w	r3, r3, #8
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d011      	beq.n	8004b8a <HAL_UART_IRQHandler+0x126>
 8004b66:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004b6a:	f003 0320 	and.w	r3, r3, #32
 8004b6e:	2b00      	cmp	r3, #0
 8004b70:	d105      	bne.n	8004b7e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8004b72:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8004b76:	f003 0301 	and.w	r3, r3, #1
 8004b7a:	2b00      	cmp	r3, #0
 8004b7c:	d005      	beq.n	8004b8a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b82:	f043 0208 	orr.w	r2, r3, #8
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004b8e:	2b00      	cmp	r3, #0
 8004b90:	f000 81f2 	beq.w	8004f78 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8004b94:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004b98:	f003 0320 	and.w	r3, r3, #32
 8004b9c:	2b00      	cmp	r3, #0
 8004b9e:	d008      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x14e>
 8004ba0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004ba4:	f003 0320 	and.w	r3, r3, #32
 8004ba8:	2b00      	cmp	r3, #0
 8004baa:	d002      	beq.n	8004bb2 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8004bac:	6878      	ldr	r0, [r7, #4]
 8004bae:	f000 fb7d 	bl	80052ac <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8004bb2:	687b      	ldr	r3, [r7, #4]
 8004bb4:	681b      	ldr	r3, [r3, #0]
 8004bb6:	695b      	ldr	r3, [r3, #20]
 8004bb8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bbc:	2b40      	cmp	r3, #64	@ 0x40
 8004bbe:	bf0c      	ite	eq
 8004bc0:	2301      	moveq	r3, #1
 8004bc2:	2300      	movne	r3, #0
 8004bc4:	b2db      	uxtb	r3, r3
 8004bc6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8004bce:	f003 0308 	and.w	r3, r3, #8
 8004bd2:	2b00      	cmp	r3, #0
 8004bd4:	d103      	bne.n	8004bde <HAL_UART_IRQHandler+0x17a>
 8004bd6:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d04f      	beq.n	8004c7e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f000 fa85 	bl	80050ee <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	681b      	ldr	r3, [r3, #0]
 8004be8:	695b      	ldr	r3, [r3, #20]
 8004bea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004bee:	2b40      	cmp	r3, #64	@ 0x40
 8004bf0:	d141      	bne.n	8004c76 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004bf2:	687b      	ldr	r3, [r7, #4]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	3314      	adds	r3, #20
 8004bf8:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004bfc:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8004c00:	e853 3f00 	ldrex	r3, [r3]
 8004c04:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8004c08:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8004c0c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004c10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8004c14:	687b      	ldr	r3, [r7, #4]
 8004c16:	681b      	ldr	r3, [r3, #0]
 8004c18:	3314      	adds	r3, #20
 8004c1a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8004c1e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8004c22:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004c26:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8004c2a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8004c2e:	e841 2300 	strex	r3, r2, [r1]
 8004c32:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8004c36:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8004c3a:	2b00      	cmp	r3, #0
 8004c3c:	d1d9      	bne.n	8004bf2 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8004c3e:	687b      	ldr	r3, [r7, #4]
 8004c40:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c42:	2b00      	cmp	r3, #0
 8004c44:	d013      	beq.n	8004c6e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8004c46:	687b      	ldr	r3, [r7, #4]
 8004c48:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c4a:	4a7e      	ldr	r2, [pc, #504]	@ (8004e44 <HAL_UART_IRQHandler+0x3e0>)
 8004c4c:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8004c4e:	687b      	ldr	r3, [r7, #4]
 8004c50:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c52:	4618      	mov	r0, r3
 8004c54:	f7fd fb09 	bl	800226a <HAL_DMA_Abort_IT>
 8004c58:	4603      	mov	r3, r0
 8004c5a:	2b00      	cmp	r3, #0
 8004c5c:	d016      	beq.n	8004c8c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004c62:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8004c64:	687a      	ldr	r2, [r7, #4]
 8004c66:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8004c68:	4610      	mov	r0, r2
 8004c6a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c6c:	e00e      	b.n	8004c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8004c6e:	6878      	ldr	r0, [r7, #4]
 8004c70:	f000 f994 	bl	8004f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c74:	e00a      	b.n	8004c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8004c76:	6878      	ldr	r0, [r7, #4]
 8004c78:	f000 f990 	bl	8004f9c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c7c:	e006      	b.n	8004c8c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8004c7e:	6878      	ldr	r0, [r7, #4]
 8004c80:	f000 f98c 	bl	8004f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004c84:	687b      	ldr	r3, [r7, #4]
 8004c86:	2200      	movs	r2, #0
 8004c88:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 8004c8a:	e175      	b.n	8004f78 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004c8c:	bf00      	nop
    return;
 8004c8e:	e173      	b.n	8004f78 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8004c94:	2b01      	cmp	r3, #1
 8004c96:	f040 814f 	bne.w	8004f38 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 8004c9a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004c9e:	f003 0310 	and.w	r3, r3, #16
 8004ca2:	2b00      	cmp	r3, #0
 8004ca4:	f000 8148 	beq.w	8004f38 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8004ca8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004cac:	f003 0310 	and.w	r3, r3, #16
 8004cb0:	2b00      	cmp	r3, #0
 8004cb2:	f000 8141 	beq.w	8004f38 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8004cb6:	2300      	movs	r3, #0
 8004cb8:	60bb      	str	r3, [r7, #8]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	681b      	ldr	r3, [r3, #0]
 8004cbe:	681b      	ldr	r3, [r3, #0]
 8004cc0:	60bb      	str	r3, [r7, #8]
 8004cc2:	687b      	ldr	r3, [r7, #4]
 8004cc4:	681b      	ldr	r3, [r3, #0]
 8004cc6:	685b      	ldr	r3, [r3, #4]
 8004cc8:	60bb      	str	r3, [r7, #8]
 8004cca:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	681b      	ldr	r3, [r3, #0]
 8004cd0:	695b      	ldr	r3, [r3, #20]
 8004cd2:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004cd6:	2b40      	cmp	r3, #64	@ 0x40
 8004cd8:	f040 80b6 	bne.w	8004e48 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004ce0:	681b      	ldr	r3, [r3, #0]
 8004ce2:	685b      	ldr	r3, [r3, #4]
 8004ce4:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8004ce8:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8004cec:	2b00      	cmp	r3, #0
 8004cee:	f000 8145 	beq.w	8004f7c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8004cf6:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004cfa:	429a      	cmp	r2, r3
 8004cfc:	f080 813e 	bcs.w	8004f7c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8004d06:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004d0c:	69db      	ldr	r3, [r3, #28]
 8004d0e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004d12:	f000 8088 	beq.w	8004e26 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	330c      	adds	r3, #12
 8004d1c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d20:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8004d24:	e853 3f00 	ldrex	r3, [r3]
 8004d28:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8004d2c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8004d30:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8004d34:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8004d38:	687b      	ldr	r3, [r7, #4]
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	330c      	adds	r3, #12
 8004d3e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8004d42:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8004d46:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d4a:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8004d4e:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8004d52:	e841 2300 	strex	r3, r2, [r1]
 8004d56:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8004d5a:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8004d5e:	2b00      	cmp	r3, #0
 8004d60:	d1d9      	bne.n	8004d16 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	3314      	adds	r3, #20
 8004d68:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004d6a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8004d6c:	e853 3f00 	ldrex	r3, [r3]
 8004d70:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8004d72:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8004d74:	f023 0301 	bic.w	r3, r3, #1
 8004d78:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8004d7c:	687b      	ldr	r3, [r7, #4]
 8004d7e:	681b      	ldr	r3, [r3, #0]
 8004d80:	3314      	adds	r3, #20
 8004d82:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8004d86:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 8004d8a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004d8c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 8004d8e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8004d92:	e841 2300 	strex	r3, r2, [r1]
 8004d96:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8004d98:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8004d9a:	2b00      	cmp	r3, #0
 8004d9c:	d1e1      	bne.n	8004d62 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8004d9e:	687b      	ldr	r3, [r7, #4]
 8004da0:	681b      	ldr	r3, [r3, #0]
 8004da2:	3314      	adds	r3, #20
 8004da4:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004da6:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8004da8:	e853 3f00 	ldrex	r3, [r3]
 8004dac:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 8004dae:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8004db0:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8004db4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8004db8:	687b      	ldr	r3, [r7, #4]
 8004dba:	681b      	ldr	r3, [r3, #0]
 8004dbc:	3314      	adds	r3, #20
 8004dbe:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8004dc2:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8004dc4:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004dc6:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8004dc8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8004dca:	e841 2300 	strex	r3, r2, [r1]
 8004dce:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8004dd0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d1e3      	bne.n	8004d9e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8004dd6:	687b      	ldr	r3, [r7, #4]
 8004dd8:	2220      	movs	r2, #32
 8004dda:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004dde:	687b      	ldr	r3, [r7, #4]
 8004de0:	2200      	movs	r2, #0
 8004de2:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004de4:	687b      	ldr	r3, [r7, #4]
 8004de6:	681b      	ldr	r3, [r3, #0]
 8004de8:	330c      	adds	r3, #12
 8004dea:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004dec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8004dee:	e853 3f00 	ldrex	r3, [r3]
 8004df2:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8004df4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8004df6:	f023 0310 	bic.w	r3, r3, #16
 8004dfa:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8004dfe:	687b      	ldr	r3, [r7, #4]
 8004e00:	681b      	ldr	r3, [r3, #0]
 8004e02:	330c      	adds	r3, #12
 8004e04:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8004e08:	65ba      	str	r2, [r7, #88]	@ 0x58
 8004e0a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e0c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8004e0e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8004e10:	e841 2300 	strex	r3, r2, [r1]
 8004e14:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8004e16:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d1e3      	bne.n	8004de4 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8004e1c:	687b      	ldr	r3, [r7, #4]
 8004e1e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8004e20:	4618      	mov	r0, r3
 8004e22:	f7fd f9b2 	bl	800218a <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004e26:	687b      	ldr	r3, [r7, #4]
 8004e28:	2202      	movs	r2, #2
 8004e2a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e34:	b29b      	uxth	r3, r3
 8004e36:	1ad3      	subs	r3, r2, r3
 8004e38:	b29b      	uxth	r3, r3
 8004e3a:	4619      	mov	r1, r3
 8004e3c:	6878      	ldr	r0, [r7, #4]
 8004e3e:	f000 f8b7 	bl	8004fb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004e42:	e09b      	b.n	8004f7c <HAL_UART_IRQHandler+0x518>
 8004e44:	080051b5 	.word	0x080051b5
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8004e48:	687b      	ldr	r3, [r7, #4]
 8004e4a:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8004e4c:	687b      	ldr	r3, [r7, #4]
 8004e4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e50:	b29b      	uxth	r3, r3
 8004e52:	1ad3      	subs	r3, r2, r3
 8004e54:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8004e5c:	b29b      	uxth	r3, r3
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	f000 808e 	beq.w	8004f80 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8004e64:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004e68:	2b00      	cmp	r3, #0
 8004e6a:	f000 8089 	beq.w	8004f80 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8004e6e:	687b      	ldr	r3, [r7, #4]
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	330c      	adds	r3, #12
 8004e74:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004e76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004e78:	e853 3f00 	ldrex	r3, [r3]
 8004e7c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 8004e7e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8004e80:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8004e84:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8004e88:	687b      	ldr	r3, [r7, #4]
 8004e8a:	681b      	ldr	r3, [r3, #0]
 8004e8c:	330c      	adds	r3, #12
 8004e8e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8004e92:	647a      	str	r2, [r7, #68]	@ 0x44
 8004e94:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004e96:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8004e98:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8004e9a:	e841 2300 	strex	r3, r2, [r1]
 8004e9e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8004ea0:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d1e3      	bne.n	8004e6e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	3314      	adds	r3, #20
 8004eac:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004eae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004eb0:	e853 3f00 	ldrex	r3, [r3]
 8004eb4:	623b      	str	r3, [r7, #32]
   return(result);
 8004eb6:	6a3b      	ldr	r3, [r7, #32]
 8004eb8:	f023 0301 	bic.w	r3, r3, #1
 8004ebc:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8004ec0:	687b      	ldr	r3, [r7, #4]
 8004ec2:	681b      	ldr	r3, [r3, #0]
 8004ec4:	3314      	adds	r3, #20
 8004ec6:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8004eca:	633a      	str	r2, [r7, #48]	@ 0x30
 8004ecc:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004ece:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8004ed0:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8004ed2:	e841 2300 	strex	r3, r2, [r1]
 8004ed6:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8004ed8:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d1e3      	bne.n	8004ea6 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8004ede:	687b      	ldr	r3, [r7, #4]
 8004ee0:	2220      	movs	r2, #32
 8004ee2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	2200      	movs	r2, #0
 8004eea:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8004eec:	687b      	ldr	r3, [r7, #4]
 8004eee:	681b      	ldr	r3, [r3, #0]
 8004ef0:	330c      	adds	r3, #12
 8004ef2:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8004ef4:	693b      	ldr	r3, [r7, #16]
 8004ef6:	e853 3f00 	ldrex	r3, [r3]
 8004efa:	60fb      	str	r3, [r7, #12]
   return(result);
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	f023 0310 	bic.w	r3, r3, #16
 8004f02:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	681b      	ldr	r3, [r3, #0]
 8004f0a:	330c      	adds	r3, #12
 8004f0c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8004f10:	61fa      	str	r2, [r7, #28]
 8004f12:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8004f14:	69b9      	ldr	r1, [r7, #24]
 8004f16:	69fa      	ldr	r2, [r7, #28]
 8004f18:	e841 2300 	strex	r3, r2, [r1]
 8004f1c:	617b      	str	r3, [r7, #20]
   return(result);
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	2b00      	cmp	r3, #0
 8004f22:	d1e3      	bne.n	8004eec <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8004f24:	687b      	ldr	r3, [r7, #4]
 8004f26:	2202      	movs	r2, #2
 8004f28:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8004f2a:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8004f2e:	4619      	mov	r1, r3
 8004f30:	6878      	ldr	r0, [r7, #4]
 8004f32:	f000 f83d 	bl	8004fb0 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8004f36:	e023      	b.n	8004f80 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8004f38:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d009      	beq.n	8004f58 <HAL_UART_IRQHandler+0x4f4>
 8004f44:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f48:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f4c:	2b00      	cmp	r3, #0
 8004f4e:	d003      	beq.n	8004f58 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8004f50:	6878      	ldr	r0, [r7, #4]
 8004f52:	f000 f943 	bl	80051dc <UART_Transmit_IT>
    return;
 8004f56:	e014      	b.n	8004f82 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8004f58:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8004f5c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d00e      	beq.n	8004f82 <HAL_UART_IRQHandler+0x51e>
 8004f64:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8004f68:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004f6c:	2b00      	cmp	r3, #0
 8004f6e:	d008      	beq.n	8004f82 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8004f70:	6878      	ldr	r0, [r7, #4]
 8004f72:	f000 f983 	bl	800527c <UART_EndTransmit_IT>
    return;
 8004f76:	e004      	b.n	8004f82 <HAL_UART_IRQHandler+0x51e>
    return;
 8004f78:	bf00      	nop
 8004f7a:	e002      	b.n	8004f82 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f7c:	bf00      	nop
 8004f7e:	e000      	b.n	8004f82 <HAL_UART_IRQHandler+0x51e>
      return;
 8004f80:	bf00      	nop
  }
}
 8004f82:	37e8      	adds	r7, #232	@ 0xe8
 8004f84:	46bd      	mov	sp, r7
 8004f86:	bd80      	pop	{r7, pc}

08004f88 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8004f88:	b480      	push	{r7}
 8004f8a:	b083      	sub	sp, #12
 8004f8c:	af00      	add	r7, sp, #0
 8004f8e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8004f90:	bf00      	nop
 8004f92:	370c      	adds	r7, #12
 8004f94:	46bd      	mov	sp, r7
 8004f96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f9a:	4770      	bx	lr

08004f9c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8004f9c:	b480      	push	{r7}
 8004f9e:	b083      	sub	sp, #12
 8004fa0:	af00      	add	r7, sp, #0
 8004fa2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8004fa4:	bf00      	nop
 8004fa6:	370c      	adds	r7, #12
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fae:	4770      	bx	lr

08004fb0 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8004fb0:	b480      	push	{r7}
 8004fb2:	b083      	sub	sp, #12
 8004fb4:	af00      	add	r7, sp, #0
 8004fb6:	6078      	str	r0, [r7, #4]
 8004fb8:	460b      	mov	r3, r1
 8004fba:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8004fbc:	bf00      	nop
 8004fbe:	370c      	adds	r7, #12
 8004fc0:	46bd      	mov	sp, r7
 8004fc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fc6:	4770      	bx	lr

08004fc8 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8004fc8:	b580      	push	{r7, lr}
 8004fca:	b086      	sub	sp, #24
 8004fcc:	af00      	add	r7, sp, #0
 8004fce:	60f8      	str	r0, [r7, #12]
 8004fd0:	60b9      	str	r1, [r7, #8]
 8004fd2:	603b      	str	r3, [r7, #0]
 8004fd4:	4613      	mov	r3, r2
 8004fd6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8004fd8:	e03b      	b.n	8005052 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fda:	6a3b      	ldr	r3, [r7, #32]
 8004fdc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fe0:	d037      	beq.n	8005052 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fe2:	f7fc ff91 	bl	8001f08 <HAL_GetTick>
 8004fe6:	4602      	mov	r2, r0
 8004fe8:	683b      	ldr	r3, [r7, #0]
 8004fea:	1ad3      	subs	r3, r2, r3
 8004fec:	6a3a      	ldr	r2, [r7, #32]
 8004fee:	429a      	cmp	r2, r3
 8004ff0:	d302      	bcc.n	8004ff8 <UART_WaitOnFlagUntilTimeout+0x30>
 8004ff2:	6a3b      	ldr	r3, [r7, #32]
 8004ff4:	2b00      	cmp	r3, #0
 8004ff6:	d101      	bne.n	8004ffc <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8004ff8:	2303      	movs	r3, #3
 8004ffa:	e03a      	b.n	8005072 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	681b      	ldr	r3, [r3, #0]
 8005000:	68db      	ldr	r3, [r3, #12]
 8005002:	f003 0304 	and.w	r3, r3, #4
 8005006:	2b00      	cmp	r3, #0
 8005008:	d023      	beq.n	8005052 <UART_WaitOnFlagUntilTimeout+0x8a>
 800500a:	68bb      	ldr	r3, [r7, #8]
 800500c:	2b80      	cmp	r3, #128	@ 0x80
 800500e:	d020      	beq.n	8005052 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005010:	68bb      	ldr	r3, [r7, #8]
 8005012:	2b40      	cmp	r3, #64	@ 0x40
 8005014:	d01d      	beq.n	8005052 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005016:	68fb      	ldr	r3, [r7, #12]
 8005018:	681b      	ldr	r3, [r3, #0]
 800501a:	681b      	ldr	r3, [r3, #0]
 800501c:	f003 0308 	and.w	r3, r3, #8
 8005020:	2b08      	cmp	r3, #8
 8005022:	d116      	bne.n	8005052 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005024:	2300      	movs	r3, #0
 8005026:	617b      	str	r3, [r7, #20]
 8005028:	68fb      	ldr	r3, [r7, #12]
 800502a:	681b      	ldr	r3, [r3, #0]
 800502c:	681b      	ldr	r3, [r3, #0]
 800502e:	617b      	str	r3, [r7, #20]
 8005030:	68fb      	ldr	r3, [r7, #12]
 8005032:	681b      	ldr	r3, [r3, #0]
 8005034:	685b      	ldr	r3, [r3, #4]
 8005036:	617b      	str	r3, [r7, #20]
 8005038:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800503a:	68f8      	ldr	r0, [r7, #12]
 800503c:	f000 f857 	bl	80050ee <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005040:	68fb      	ldr	r3, [r7, #12]
 8005042:	2208      	movs	r2, #8
 8005044:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005046:	68fb      	ldr	r3, [r7, #12]
 8005048:	2200      	movs	r2, #0
 800504a:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 800504e:	2301      	movs	r3, #1
 8005050:	e00f      	b.n	8005072 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005052:	68fb      	ldr	r3, [r7, #12]
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	681a      	ldr	r2, [r3, #0]
 8005058:	68bb      	ldr	r3, [r7, #8]
 800505a:	4013      	ands	r3, r2
 800505c:	68ba      	ldr	r2, [r7, #8]
 800505e:	429a      	cmp	r2, r3
 8005060:	bf0c      	ite	eq
 8005062:	2301      	moveq	r3, #1
 8005064:	2300      	movne	r3, #0
 8005066:	b2db      	uxtb	r3, r3
 8005068:	461a      	mov	r2, r3
 800506a:	79fb      	ldrb	r3, [r7, #7]
 800506c:	429a      	cmp	r2, r3
 800506e:	d0b4      	beq.n	8004fda <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005070:	2300      	movs	r3, #0
}
 8005072:	4618      	mov	r0, r3
 8005074:	3718      	adds	r7, #24
 8005076:	46bd      	mov	sp, r7
 8005078:	bd80      	pop	{r7, pc}

0800507a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800507a:	b480      	push	{r7}
 800507c:	b085      	sub	sp, #20
 800507e:	af00      	add	r7, sp, #0
 8005080:	60f8      	str	r0, [r7, #12]
 8005082:	60b9      	str	r1, [r7, #8]
 8005084:	4613      	mov	r3, r2
 8005086:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005088:	68fb      	ldr	r3, [r7, #12]
 800508a:	68ba      	ldr	r2, [r7, #8]
 800508c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800508e:	68fb      	ldr	r3, [r7, #12]
 8005090:	88fa      	ldrh	r2, [r7, #6]
 8005092:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005094:	68fb      	ldr	r3, [r7, #12]
 8005096:	88fa      	ldrh	r2, [r7, #6]
 8005098:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800509a:	68fb      	ldr	r3, [r7, #12]
 800509c:	2200      	movs	r2, #0
 800509e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80050a0:	68fb      	ldr	r3, [r7, #12]
 80050a2:	2222      	movs	r2, #34	@ 0x22
 80050a4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80050a8:	68fb      	ldr	r3, [r7, #12]
 80050aa:	691b      	ldr	r3, [r3, #16]
 80050ac:	2b00      	cmp	r3, #0
 80050ae:	d007      	beq.n	80050c0 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	68da      	ldr	r2, [r3, #12]
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80050be:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80050c0:	68fb      	ldr	r3, [r7, #12]
 80050c2:	681b      	ldr	r3, [r3, #0]
 80050c4:	695a      	ldr	r2, [r3, #20]
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	681b      	ldr	r3, [r3, #0]
 80050ca:	f042 0201 	orr.w	r2, r2, #1
 80050ce:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80050d0:	68fb      	ldr	r3, [r7, #12]
 80050d2:	681b      	ldr	r3, [r3, #0]
 80050d4:	68da      	ldr	r2, [r3, #12]
 80050d6:	68fb      	ldr	r3, [r7, #12]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	f042 0220 	orr.w	r2, r2, #32
 80050de:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 80050e0:	2300      	movs	r3, #0
}
 80050e2:	4618      	mov	r0, r3
 80050e4:	3714      	adds	r7, #20
 80050e6:	46bd      	mov	sp, r7
 80050e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80050ec:	4770      	bx	lr

080050ee <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 80050ee:	b480      	push	{r7}
 80050f0:	b095      	sub	sp, #84	@ 0x54
 80050f2:	af00      	add	r7, sp, #0
 80050f4:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	330c      	adds	r3, #12
 80050fc:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80050fe:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005100:	e853 3f00 	ldrex	r3, [r3]
 8005104:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005106:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005108:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800510c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	330c      	adds	r3, #12
 8005114:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005116:	643a      	str	r2, [r7, #64]	@ 0x40
 8005118:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800511a:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 800511c:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 800511e:	e841 2300 	strex	r3, r2, [r1]
 8005122:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005124:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005126:	2b00      	cmp	r3, #0
 8005128:	d1e5      	bne.n	80050f6 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	3314      	adds	r3, #20
 8005130:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005132:	6a3b      	ldr	r3, [r7, #32]
 8005134:	e853 3f00 	ldrex	r3, [r3]
 8005138:	61fb      	str	r3, [r7, #28]
   return(result);
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	f023 0301 	bic.w	r3, r3, #1
 8005140:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005142:	687b      	ldr	r3, [r7, #4]
 8005144:	681b      	ldr	r3, [r3, #0]
 8005146:	3314      	adds	r3, #20
 8005148:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800514a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800514c:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800514e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005150:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005152:	e841 2300 	strex	r3, r2, [r1]
 8005156:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005158:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800515a:	2b00      	cmp	r3, #0
 800515c:	d1e5      	bne.n	800512a <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005162:	2b01      	cmp	r3, #1
 8005164:	d119      	bne.n	800519a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	330c      	adds	r3, #12
 800516c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800516e:	68fb      	ldr	r3, [r7, #12]
 8005170:	e853 3f00 	ldrex	r3, [r3]
 8005174:	60bb      	str	r3, [r7, #8]
   return(result);
 8005176:	68bb      	ldr	r3, [r7, #8]
 8005178:	f023 0310 	bic.w	r3, r3, #16
 800517c:	647b      	str	r3, [r7, #68]	@ 0x44
 800517e:	687b      	ldr	r3, [r7, #4]
 8005180:	681b      	ldr	r3, [r3, #0]
 8005182:	330c      	adds	r3, #12
 8005184:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005186:	61ba      	str	r2, [r7, #24]
 8005188:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800518a:	6979      	ldr	r1, [r7, #20]
 800518c:	69ba      	ldr	r2, [r7, #24]
 800518e:	e841 2300 	strex	r3, r2, [r1]
 8005192:	613b      	str	r3, [r7, #16]
   return(result);
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	2b00      	cmp	r3, #0
 8005198:	d1e5      	bne.n	8005166 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800519a:	687b      	ldr	r3, [r7, #4]
 800519c:	2220      	movs	r2, #32
 800519e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80051a2:	687b      	ldr	r3, [r7, #4]
 80051a4:	2200      	movs	r2, #0
 80051a6:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80051a8:	bf00      	nop
 80051aa:	3754      	adds	r7, #84	@ 0x54
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80051b4:	b580      	push	{r7, lr}
 80051b6:	b084      	sub	sp, #16
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80051bc:	687b      	ldr	r3, [r7, #4]
 80051be:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80051c0:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2200      	movs	r2, #0
 80051c6:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80051c8:	68fb      	ldr	r3, [r7, #12]
 80051ca:	2200      	movs	r2, #0
 80051cc:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80051ce:	68f8      	ldr	r0, [r7, #12]
 80051d0:	f7ff fee4 	bl	8004f9c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80051d4:	bf00      	nop
 80051d6:	3710      	adds	r7, #16
 80051d8:	46bd      	mov	sp, r7
 80051da:	bd80      	pop	{r7, pc}

080051dc <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 80051dc:	b480      	push	{r7}
 80051de:	b085      	sub	sp, #20
 80051e0:	af00      	add	r7, sp, #0
 80051e2:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 80051e4:	687b      	ldr	r3, [r7, #4]
 80051e6:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80051ea:	b2db      	uxtb	r3, r3
 80051ec:	2b21      	cmp	r3, #33	@ 0x21
 80051ee:	d13e      	bne.n	800526e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80051f0:	687b      	ldr	r3, [r7, #4]
 80051f2:	689b      	ldr	r3, [r3, #8]
 80051f4:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80051f8:	d114      	bne.n	8005224 <UART_Transmit_IT+0x48>
 80051fa:	687b      	ldr	r3, [r7, #4]
 80051fc:	691b      	ldr	r3, [r3, #16]
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d110      	bne.n	8005224 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a1b      	ldr	r3, [r3, #32]
 8005206:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005208:	68fb      	ldr	r3, [r7, #12]
 800520a:	881b      	ldrh	r3, [r3, #0]
 800520c:	461a      	mov	r2, r3
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005216:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005218:	687b      	ldr	r3, [r7, #4]
 800521a:	6a1b      	ldr	r3, [r3, #32]
 800521c:	1c9a      	adds	r2, r3, #2
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	621a      	str	r2, [r3, #32]
 8005222:	e008      	b.n	8005236 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005224:	687b      	ldr	r3, [r7, #4]
 8005226:	6a1b      	ldr	r3, [r3, #32]
 8005228:	1c59      	adds	r1, r3, #1
 800522a:	687a      	ldr	r2, [r7, #4]
 800522c:	6211      	str	r1, [r2, #32]
 800522e:	781a      	ldrb	r2, [r3, #0]
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800523a:	b29b      	uxth	r3, r3
 800523c:	3b01      	subs	r3, #1
 800523e:	b29b      	uxth	r3, r3
 8005240:	687a      	ldr	r2, [r7, #4]
 8005242:	4619      	mov	r1, r3
 8005244:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005246:	2b00      	cmp	r3, #0
 8005248:	d10f      	bne.n	800526a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	681b      	ldr	r3, [r3, #0]
 800524e:	68da      	ldr	r2, [r3, #12]
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005258:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800525a:	687b      	ldr	r3, [r7, #4]
 800525c:	681b      	ldr	r3, [r3, #0]
 800525e:	68da      	ldr	r2, [r3, #12]
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005268:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800526a:	2300      	movs	r3, #0
 800526c:	e000      	b.n	8005270 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 800526e:	2302      	movs	r3, #2
  }
}
 8005270:	4618      	mov	r0, r3
 8005272:	3714      	adds	r7, #20
 8005274:	46bd      	mov	sp, r7
 8005276:	f85d 7b04 	ldr.w	r7, [sp], #4
 800527a:	4770      	bx	lr

0800527c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 800527c:	b580      	push	{r7, lr}
 800527e:	b082      	sub	sp, #8
 8005280:	af00      	add	r7, sp, #0
 8005282:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	681b      	ldr	r3, [r3, #0]
 8005288:	68da      	ldr	r2, [r3, #12]
 800528a:	687b      	ldr	r3, [r7, #4]
 800528c:	681b      	ldr	r3, [r3, #0]
 800528e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005292:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005294:	687b      	ldr	r3, [r7, #4]
 8005296:	2220      	movs	r2, #32
 8005298:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 800529c:	6878      	ldr	r0, [r7, #4]
 800529e:	f7ff fe73 	bl	8004f88 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80052a2:	2300      	movs	r3, #0
}
 80052a4:	4618      	mov	r0, r3
 80052a6:	3708      	adds	r7, #8
 80052a8:	46bd      	mov	sp, r7
 80052aa:	bd80      	pop	{r7, pc}

080052ac <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80052ac:	b580      	push	{r7, lr}
 80052ae:	b08c      	sub	sp, #48	@ 0x30
 80052b0:	af00      	add	r7, sp, #0
 80052b2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80052b4:	687b      	ldr	r3, [r7, #4]
 80052b6:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80052ba:	b2db      	uxtb	r3, r3
 80052bc:	2b22      	cmp	r3, #34	@ 0x22
 80052be:	f040 80ae 	bne.w	800541e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	689b      	ldr	r3, [r3, #8]
 80052c6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80052ca:	d117      	bne.n	80052fc <UART_Receive_IT+0x50>
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	691b      	ldr	r3, [r3, #16]
 80052d0:	2b00      	cmp	r3, #0
 80052d2:	d113      	bne.n	80052fc <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80052d4:	2300      	movs	r3, #0
 80052d6:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80052d8:	687b      	ldr	r3, [r7, #4]
 80052da:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052dc:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 80052de:	687b      	ldr	r3, [r7, #4]
 80052e0:	681b      	ldr	r3, [r3, #0]
 80052e2:	685b      	ldr	r3, [r3, #4]
 80052e4:	b29b      	uxth	r3, r3
 80052e6:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80052ea:	b29a      	uxth	r2, r3
 80052ec:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80052ee:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052f4:	1c9a      	adds	r2, r3, #2
 80052f6:	687b      	ldr	r3, [r7, #4]
 80052f8:	629a      	str	r2, [r3, #40]	@ 0x28
 80052fa:	e026      	b.n	800534a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 80052fc:	687b      	ldr	r3, [r7, #4]
 80052fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005300:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005302:	2300      	movs	r3, #0
 8005304:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005306:	687b      	ldr	r3, [r7, #4]
 8005308:	689b      	ldr	r3, [r3, #8]
 800530a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800530e:	d007      	beq.n	8005320 <UART_Receive_IT+0x74>
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	689b      	ldr	r3, [r3, #8]
 8005314:	2b00      	cmp	r3, #0
 8005316:	d10a      	bne.n	800532e <UART_Receive_IT+0x82>
 8005318:	687b      	ldr	r3, [r7, #4]
 800531a:	691b      	ldr	r3, [r3, #16]
 800531c:	2b00      	cmp	r3, #0
 800531e:	d106      	bne.n	800532e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	681b      	ldr	r3, [r3, #0]
 8005324:	685b      	ldr	r3, [r3, #4]
 8005326:	b2da      	uxtb	r2, r3
 8005328:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800532a:	701a      	strb	r2, [r3, #0]
 800532c:	e008      	b.n	8005340 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	681b      	ldr	r3, [r3, #0]
 8005332:	685b      	ldr	r3, [r3, #4]
 8005334:	b2db      	uxtb	r3, r3
 8005336:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800533a:	b2da      	uxtb	r2, r3
 800533c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800533e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29b      	uxth	r3, r3
 8005354:	687a      	ldr	r2, [r7, #4]
 8005356:	4619      	mov	r1, r3
 8005358:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800535a:	2b00      	cmp	r3, #0
 800535c:	d15d      	bne.n	800541a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	68da      	ldr	r2, [r3, #12]
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	681b      	ldr	r3, [r3, #0]
 8005368:	f022 0220 	bic.w	r2, r2, #32
 800536c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	68da      	ldr	r2, [r3, #12]
 8005374:	687b      	ldr	r3, [r7, #4]
 8005376:	681b      	ldr	r3, [r3, #0]
 8005378:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 800537c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	681b      	ldr	r3, [r3, #0]
 8005382:	695a      	ldr	r2, [r3, #20]
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	f022 0201 	bic.w	r2, r2, #1
 800538c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	2220      	movs	r2, #32
 8005392:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	2200      	movs	r2, #0
 800539a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80053a0:	2b01      	cmp	r3, #1
 80053a2:	d135      	bne.n	8005410 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	2200      	movs	r2, #0
 80053a8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	330c      	adds	r3, #12
 80053b0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80053b2:	697b      	ldr	r3, [r7, #20]
 80053b4:	e853 3f00 	ldrex	r3, [r3]
 80053b8:	613b      	str	r3, [r7, #16]
   return(result);
 80053ba:	693b      	ldr	r3, [r7, #16]
 80053bc:	f023 0310 	bic.w	r3, r3, #16
 80053c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80053c2:	687b      	ldr	r3, [r7, #4]
 80053c4:	681b      	ldr	r3, [r3, #0]
 80053c6:	330c      	adds	r3, #12
 80053c8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80053ca:	623a      	str	r2, [r7, #32]
 80053cc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80053ce:	69f9      	ldr	r1, [r7, #28]
 80053d0:	6a3a      	ldr	r2, [r7, #32]
 80053d2:	e841 2300 	strex	r3, r2, [r1]
 80053d6:	61bb      	str	r3, [r7, #24]
   return(result);
 80053d8:	69bb      	ldr	r3, [r7, #24]
 80053da:	2b00      	cmp	r3, #0
 80053dc:	d1e5      	bne.n	80053aa <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	681b      	ldr	r3, [r3, #0]
 80053e4:	f003 0310 	and.w	r3, r3, #16
 80053e8:	2b10      	cmp	r3, #16
 80053ea:	d10a      	bne.n	8005402 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 80053ec:	2300      	movs	r3, #0
 80053ee:	60fb      	str	r3, [r7, #12]
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	681b      	ldr	r3, [r3, #0]
 80053f6:	60fb      	str	r3, [r7, #12]
 80053f8:	687b      	ldr	r3, [r7, #4]
 80053fa:	681b      	ldr	r3, [r3, #0]
 80053fc:	685b      	ldr	r3, [r3, #4]
 80053fe:	60fb      	str	r3, [r7, #12]
 8005400:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005406:	4619      	mov	r1, r3
 8005408:	6878      	ldr	r0, [r7, #4]
 800540a:	f7ff fdd1 	bl	8004fb0 <HAL_UARTEx_RxEventCallback>
 800540e:	e002      	b.n	8005416 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005410:	6878      	ldr	r0, [r7, #4]
 8005412:	f7fc fbad 	bl	8001b70 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005416:	2300      	movs	r3, #0
 8005418:	e002      	b.n	8005420 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800541a:	2300      	movs	r3, #0
 800541c:	e000      	b.n	8005420 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 800541e:	2302      	movs	r3, #2
  }
}
 8005420:	4618      	mov	r0, r3
 8005422:	3730      	adds	r7, #48	@ 0x30
 8005424:	46bd      	mov	sp, r7
 8005426:	bd80      	pop	{r7, pc}

08005428 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005428:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800542c:	b0c0      	sub	sp, #256	@ 0x100
 800542e:	af00      	add	r7, sp, #0
 8005430:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005434:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005438:	681b      	ldr	r3, [r3, #0]
 800543a:	691b      	ldr	r3, [r3, #16]
 800543c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005440:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005444:	68d9      	ldr	r1, [r3, #12]
 8005446:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800544a:	681a      	ldr	r2, [r3, #0]
 800544c:	ea40 0301 	orr.w	r3, r0, r1
 8005450:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005452:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005456:	689a      	ldr	r2, [r3, #8]
 8005458:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800545c:	691b      	ldr	r3, [r3, #16]
 800545e:	431a      	orrs	r2, r3
 8005460:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005464:	695b      	ldr	r3, [r3, #20]
 8005466:	431a      	orrs	r2, r3
 8005468:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800546c:	69db      	ldr	r3, [r3, #28]
 800546e:	4313      	orrs	r3, r2
 8005470:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005474:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	68db      	ldr	r3, [r3, #12]
 800547c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005480:	f021 010c 	bic.w	r1, r1, #12
 8005484:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005488:	681a      	ldr	r2, [r3, #0]
 800548a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800548e:	430b      	orrs	r3, r1
 8005490:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005492:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005496:	681b      	ldr	r3, [r3, #0]
 8005498:	695b      	ldr	r3, [r3, #20]
 800549a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800549e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a2:	6999      	ldr	r1, [r3, #24]
 80054a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054a8:	681a      	ldr	r2, [r3, #0]
 80054aa:	ea40 0301 	orr.w	r3, r0, r1
 80054ae:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80054b0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054b4:	681a      	ldr	r2, [r3, #0]
 80054b6:	4b8f      	ldr	r3, [pc, #572]	@ (80056f4 <UART_SetConfig+0x2cc>)
 80054b8:	429a      	cmp	r2, r3
 80054ba:	d005      	beq.n	80054c8 <UART_SetConfig+0xa0>
 80054bc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054c0:	681a      	ldr	r2, [r3, #0]
 80054c2:	4b8d      	ldr	r3, [pc, #564]	@ (80056f8 <UART_SetConfig+0x2d0>)
 80054c4:	429a      	cmp	r2, r3
 80054c6:	d104      	bne.n	80054d2 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80054c8:	f7ff f9b8 	bl	800483c <HAL_RCC_GetPCLK2Freq>
 80054cc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80054d0:	e003      	b.n	80054da <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80054d2:	f7ff f99f 	bl	8004814 <HAL_RCC_GetPCLK1Freq>
 80054d6:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80054da:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80054de:	69db      	ldr	r3, [r3, #28]
 80054e0:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 80054e4:	f040 810c 	bne.w	8005700 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80054e8:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80054ec:	2200      	movs	r2, #0
 80054ee:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 80054f2:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 80054f6:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 80054fa:	4622      	mov	r2, r4
 80054fc:	462b      	mov	r3, r5
 80054fe:	1891      	adds	r1, r2, r2
 8005500:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005502:	415b      	adcs	r3, r3
 8005504:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005506:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800550a:	4621      	mov	r1, r4
 800550c:	eb12 0801 	adds.w	r8, r2, r1
 8005510:	4629      	mov	r1, r5
 8005512:	eb43 0901 	adc.w	r9, r3, r1
 8005516:	f04f 0200 	mov.w	r2, #0
 800551a:	f04f 0300 	mov.w	r3, #0
 800551e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005522:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005526:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800552a:	4690      	mov	r8, r2
 800552c:	4699      	mov	r9, r3
 800552e:	4623      	mov	r3, r4
 8005530:	eb18 0303 	adds.w	r3, r8, r3
 8005534:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005538:	462b      	mov	r3, r5
 800553a:	eb49 0303 	adc.w	r3, r9, r3
 800553e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005542:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005546:	685b      	ldr	r3, [r3, #4]
 8005548:	2200      	movs	r2, #0
 800554a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 800554e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005552:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005556:	460b      	mov	r3, r1
 8005558:	18db      	adds	r3, r3, r3
 800555a:	653b      	str	r3, [r7, #80]	@ 0x50
 800555c:	4613      	mov	r3, r2
 800555e:	eb42 0303 	adc.w	r3, r2, r3
 8005562:	657b      	str	r3, [r7, #84]	@ 0x54
 8005564:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005568:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800556c:	f7fb fb74 	bl	8000c58 <__aeabi_uldivmod>
 8005570:	4602      	mov	r2, r0
 8005572:	460b      	mov	r3, r1
 8005574:	4b61      	ldr	r3, [pc, #388]	@ (80056fc <UART_SetConfig+0x2d4>)
 8005576:	fba3 2302 	umull	r2, r3, r3, r2
 800557a:	095b      	lsrs	r3, r3, #5
 800557c:	011c      	lsls	r4, r3, #4
 800557e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005582:	2200      	movs	r2, #0
 8005584:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005588:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800558c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005590:	4642      	mov	r2, r8
 8005592:	464b      	mov	r3, r9
 8005594:	1891      	adds	r1, r2, r2
 8005596:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005598:	415b      	adcs	r3, r3
 800559a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800559c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80055a0:	4641      	mov	r1, r8
 80055a2:	eb12 0a01 	adds.w	sl, r2, r1
 80055a6:	4649      	mov	r1, r9
 80055a8:	eb43 0b01 	adc.w	fp, r3, r1
 80055ac:	f04f 0200 	mov.w	r2, #0
 80055b0:	f04f 0300 	mov.w	r3, #0
 80055b4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80055b8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80055bc:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80055c0:	4692      	mov	sl, r2
 80055c2:	469b      	mov	fp, r3
 80055c4:	4643      	mov	r3, r8
 80055c6:	eb1a 0303 	adds.w	r3, sl, r3
 80055ca:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80055ce:	464b      	mov	r3, r9
 80055d0:	eb4b 0303 	adc.w	r3, fp, r3
 80055d4:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80055d8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80055dc:	685b      	ldr	r3, [r3, #4]
 80055de:	2200      	movs	r2, #0
 80055e0:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80055e4:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 80055e8:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 80055ec:	460b      	mov	r3, r1
 80055ee:	18db      	adds	r3, r3, r3
 80055f0:	643b      	str	r3, [r7, #64]	@ 0x40
 80055f2:	4613      	mov	r3, r2
 80055f4:	eb42 0303 	adc.w	r3, r2, r3
 80055f8:	647b      	str	r3, [r7, #68]	@ 0x44
 80055fa:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 80055fe:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005602:	f7fb fb29 	bl	8000c58 <__aeabi_uldivmod>
 8005606:	4602      	mov	r2, r0
 8005608:	460b      	mov	r3, r1
 800560a:	4611      	mov	r1, r2
 800560c:	4b3b      	ldr	r3, [pc, #236]	@ (80056fc <UART_SetConfig+0x2d4>)
 800560e:	fba3 2301 	umull	r2, r3, r3, r1
 8005612:	095b      	lsrs	r3, r3, #5
 8005614:	2264      	movs	r2, #100	@ 0x64
 8005616:	fb02 f303 	mul.w	r3, r2, r3
 800561a:	1acb      	subs	r3, r1, r3
 800561c:	00db      	lsls	r3, r3, #3
 800561e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005622:	4b36      	ldr	r3, [pc, #216]	@ (80056fc <UART_SetConfig+0x2d4>)
 8005624:	fba3 2302 	umull	r2, r3, r3, r2
 8005628:	095b      	lsrs	r3, r3, #5
 800562a:	005b      	lsls	r3, r3, #1
 800562c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005630:	441c      	add	r4, r3
 8005632:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005636:	2200      	movs	r2, #0
 8005638:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800563c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005640:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005644:	4642      	mov	r2, r8
 8005646:	464b      	mov	r3, r9
 8005648:	1891      	adds	r1, r2, r2
 800564a:	63b9      	str	r1, [r7, #56]	@ 0x38
 800564c:	415b      	adcs	r3, r3
 800564e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005650:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005654:	4641      	mov	r1, r8
 8005656:	1851      	adds	r1, r2, r1
 8005658:	6339      	str	r1, [r7, #48]	@ 0x30
 800565a:	4649      	mov	r1, r9
 800565c:	414b      	adcs	r3, r1
 800565e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005660:	f04f 0200 	mov.w	r2, #0
 8005664:	f04f 0300 	mov.w	r3, #0
 8005668:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800566c:	4659      	mov	r1, fp
 800566e:	00cb      	lsls	r3, r1, #3
 8005670:	4651      	mov	r1, sl
 8005672:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005676:	4651      	mov	r1, sl
 8005678:	00ca      	lsls	r2, r1, #3
 800567a:	4610      	mov	r0, r2
 800567c:	4619      	mov	r1, r3
 800567e:	4603      	mov	r3, r0
 8005680:	4642      	mov	r2, r8
 8005682:	189b      	adds	r3, r3, r2
 8005684:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005688:	464b      	mov	r3, r9
 800568a:	460a      	mov	r2, r1
 800568c:	eb42 0303 	adc.w	r3, r2, r3
 8005690:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005694:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005698:	685b      	ldr	r3, [r3, #4]
 800569a:	2200      	movs	r2, #0
 800569c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 80056a0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 80056a4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 80056a8:	460b      	mov	r3, r1
 80056aa:	18db      	adds	r3, r3, r3
 80056ac:	62bb      	str	r3, [r7, #40]	@ 0x28
 80056ae:	4613      	mov	r3, r2
 80056b0:	eb42 0303 	adc.w	r3, r2, r3
 80056b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 80056b6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 80056ba:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 80056be:	f7fb facb 	bl	8000c58 <__aeabi_uldivmod>
 80056c2:	4602      	mov	r2, r0
 80056c4:	460b      	mov	r3, r1
 80056c6:	4b0d      	ldr	r3, [pc, #52]	@ (80056fc <UART_SetConfig+0x2d4>)
 80056c8:	fba3 1302 	umull	r1, r3, r3, r2
 80056cc:	095b      	lsrs	r3, r3, #5
 80056ce:	2164      	movs	r1, #100	@ 0x64
 80056d0:	fb01 f303 	mul.w	r3, r1, r3
 80056d4:	1ad3      	subs	r3, r2, r3
 80056d6:	00db      	lsls	r3, r3, #3
 80056d8:	3332      	adds	r3, #50	@ 0x32
 80056da:	4a08      	ldr	r2, [pc, #32]	@ (80056fc <UART_SetConfig+0x2d4>)
 80056dc:	fba2 2303 	umull	r2, r3, r2, r3
 80056e0:	095b      	lsrs	r3, r3, #5
 80056e2:	f003 0207 	and.w	r2, r3, #7
 80056e6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	4422      	add	r2, r4
 80056ee:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 80056f0:	e106      	b.n	8005900 <UART_SetConfig+0x4d8>
 80056f2:	bf00      	nop
 80056f4:	40011000 	.word	0x40011000
 80056f8:	40011400 	.word	0x40011400
 80056fc:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005700:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005704:	2200      	movs	r2, #0
 8005706:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 800570a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 800570e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005712:	4642      	mov	r2, r8
 8005714:	464b      	mov	r3, r9
 8005716:	1891      	adds	r1, r2, r2
 8005718:	6239      	str	r1, [r7, #32]
 800571a:	415b      	adcs	r3, r3
 800571c:	627b      	str	r3, [r7, #36]	@ 0x24
 800571e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005722:	4641      	mov	r1, r8
 8005724:	1854      	adds	r4, r2, r1
 8005726:	4649      	mov	r1, r9
 8005728:	eb43 0501 	adc.w	r5, r3, r1
 800572c:	f04f 0200 	mov.w	r2, #0
 8005730:	f04f 0300 	mov.w	r3, #0
 8005734:	00eb      	lsls	r3, r5, #3
 8005736:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 800573a:	00e2      	lsls	r2, r4, #3
 800573c:	4614      	mov	r4, r2
 800573e:	461d      	mov	r5, r3
 8005740:	4643      	mov	r3, r8
 8005742:	18e3      	adds	r3, r4, r3
 8005744:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005748:	464b      	mov	r3, r9
 800574a:	eb45 0303 	adc.w	r3, r5, r3
 800574e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005752:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005756:	685b      	ldr	r3, [r3, #4]
 8005758:	2200      	movs	r2, #0
 800575a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 800575e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005762:	f04f 0200 	mov.w	r2, #0
 8005766:	f04f 0300 	mov.w	r3, #0
 800576a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800576e:	4629      	mov	r1, r5
 8005770:	008b      	lsls	r3, r1, #2
 8005772:	4621      	mov	r1, r4
 8005774:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005778:	4621      	mov	r1, r4
 800577a:	008a      	lsls	r2, r1, #2
 800577c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005780:	f7fb fa6a 	bl	8000c58 <__aeabi_uldivmod>
 8005784:	4602      	mov	r2, r0
 8005786:	460b      	mov	r3, r1
 8005788:	4b60      	ldr	r3, [pc, #384]	@ (800590c <UART_SetConfig+0x4e4>)
 800578a:	fba3 2302 	umull	r2, r3, r3, r2
 800578e:	095b      	lsrs	r3, r3, #5
 8005790:	011c      	lsls	r4, r3, #4
 8005792:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005796:	2200      	movs	r2, #0
 8005798:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800579c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 80057a0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 80057a4:	4642      	mov	r2, r8
 80057a6:	464b      	mov	r3, r9
 80057a8:	1891      	adds	r1, r2, r2
 80057aa:	61b9      	str	r1, [r7, #24]
 80057ac:	415b      	adcs	r3, r3
 80057ae:	61fb      	str	r3, [r7, #28]
 80057b0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80057b4:	4641      	mov	r1, r8
 80057b6:	1851      	adds	r1, r2, r1
 80057b8:	6139      	str	r1, [r7, #16]
 80057ba:	4649      	mov	r1, r9
 80057bc:	414b      	adcs	r3, r1
 80057be:	617b      	str	r3, [r7, #20]
 80057c0:	f04f 0200 	mov.w	r2, #0
 80057c4:	f04f 0300 	mov.w	r3, #0
 80057c8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80057cc:	4659      	mov	r1, fp
 80057ce:	00cb      	lsls	r3, r1, #3
 80057d0:	4651      	mov	r1, sl
 80057d2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80057d6:	4651      	mov	r1, sl
 80057d8:	00ca      	lsls	r2, r1, #3
 80057da:	4610      	mov	r0, r2
 80057dc:	4619      	mov	r1, r3
 80057de:	4603      	mov	r3, r0
 80057e0:	4642      	mov	r2, r8
 80057e2:	189b      	adds	r3, r3, r2
 80057e4:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 80057e8:	464b      	mov	r3, r9
 80057ea:	460a      	mov	r2, r1
 80057ec:	eb42 0303 	adc.w	r3, r2, r3
 80057f0:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 80057f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80057f8:	685b      	ldr	r3, [r3, #4]
 80057fa:	2200      	movs	r2, #0
 80057fc:	67bb      	str	r3, [r7, #120]	@ 0x78
 80057fe:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8005800:	f04f 0200 	mov.w	r2, #0
 8005804:	f04f 0300 	mov.w	r3, #0
 8005808:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800580c:	4649      	mov	r1, r9
 800580e:	008b      	lsls	r3, r1, #2
 8005810:	4641      	mov	r1, r8
 8005812:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005816:	4641      	mov	r1, r8
 8005818:	008a      	lsls	r2, r1, #2
 800581a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800581e:	f7fb fa1b 	bl	8000c58 <__aeabi_uldivmod>
 8005822:	4602      	mov	r2, r0
 8005824:	460b      	mov	r3, r1
 8005826:	4611      	mov	r1, r2
 8005828:	4b38      	ldr	r3, [pc, #224]	@ (800590c <UART_SetConfig+0x4e4>)
 800582a:	fba3 2301 	umull	r2, r3, r3, r1
 800582e:	095b      	lsrs	r3, r3, #5
 8005830:	2264      	movs	r2, #100	@ 0x64
 8005832:	fb02 f303 	mul.w	r3, r2, r3
 8005836:	1acb      	subs	r3, r1, r3
 8005838:	011b      	lsls	r3, r3, #4
 800583a:	3332      	adds	r3, #50	@ 0x32
 800583c:	4a33      	ldr	r2, [pc, #204]	@ (800590c <UART_SetConfig+0x4e4>)
 800583e:	fba2 2303 	umull	r2, r3, r2, r3
 8005842:	095b      	lsrs	r3, r3, #5
 8005844:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8005848:	441c      	add	r4, r3
 800584a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800584e:	2200      	movs	r2, #0
 8005850:	673b      	str	r3, [r7, #112]	@ 0x70
 8005852:	677a      	str	r2, [r7, #116]	@ 0x74
 8005854:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8005858:	4642      	mov	r2, r8
 800585a:	464b      	mov	r3, r9
 800585c:	1891      	adds	r1, r2, r2
 800585e:	60b9      	str	r1, [r7, #8]
 8005860:	415b      	adcs	r3, r3
 8005862:	60fb      	str	r3, [r7, #12]
 8005864:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8005868:	4641      	mov	r1, r8
 800586a:	1851      	adds	r1, r2, r1
 800586c:	6039      	str	r1, [r7, #0]
 800586e:	4649      	mov	r1, r9
 8005870:	414b      	adcs	r3, r1
 8005872:	607b      	str	r3, [r7, #4]
 8005874:	f04f 0200 	mov.w	r2, #0
 8005878:	f04f 0300 	mov.w	r3, #0
 800587c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8005880:	4659      	mov	r1, fp
 8005882:	00cb      	lsls	r3, r1, #3
 8005884:	4651      	mov	r1, sl
 8005886:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800588a:	4651      	mov	r1, sl
 800588c:	00ca      	lsls	r2, r1, #3
 800588e:	4610      	mov	r0, r2
 8005890:	4619      	mov	r1, r3
 8005892:	4603      	mov	r3, r0
 8005894:	4642      	mov	r2, r8
 8005896:	189b      	adds	r3, r3, r2
 8005898:	66bb      	str	r3, [r7, #104]	@ 0x68
 800589a:	464b      	mov	r3, r9
 800589c:	460a      	mov	r2, r1
 800589e:	eb42 0303 	adc.w	r3, r2, r3
 80058a2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80058a4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058a8:	685b      	ldr	r3, [r3, #4]
 80058aa:	2200      	movs	r2, #0
 80058ac:	663b      	str	r3, [r7, #96]	@ 0x60
 80058ae:	667a      	str	r2, [r7, #100]	@ 0x64
 80058b0:	f04f 0200 	mov.w	r2, #0
 80058b4:	f04f 0300 	mov.w	r3, #0
 80058b8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80058bc:	4649      	mov	r1, r9
 80058be:	008b      	lsls	r3, r1, #2
 80058c0:	4641      	mov	r1, r8
 80058c2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80058c6:	4641      	mov	r1, r8
 80058c8:	008a      	lsls	r2, r1, #2
 80058ca:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80058ce:	f7fb f9c3 	bl	8000c58 <__aeabi_uldivmod>
 80058d2:	4602      	mov	r2, r0
 80058d4:	460b      	mov	r3, r1
 80058d6:	4b0d      	ldr	r3, [pc, #52]	@ (800590c <UART_SetConfig+0x4e4>)
 80058d8:	fba3 1302 	umull	r1, r3, r3, r2
 80058dc:	095b      	lsrs	r3, r3, #5
 80058de:	2164      	movs	r1, #100	@ 0x64
 80058e0:	fb01 f303 	mul.w	r3, r1, r3
 80058e4:	1ad3      	subs	r3, r2, r3
 80058e6:	011b      	lsls	r3, r3, #4
 80058e8:	3332      	adds	r3, #50	@ 0x32
 80058ea:	4a08      	ldr	r2, [pc, #32]	@ (800590c <UART_SetConfig+0x4e4>)
 80058ec:	fba2 2303 	umull	r2, r3, r2, r3
 80058f0:	095b      	lsrs	r3, r3, #5
 80058f2:	f003 020f 	and.w	r2, r3, #15
 80058f6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80058fa:	681b      	ldr	r3, [r3, #0]
 80058fc:	4422      	add	r2, r4
 80058fe:	609a      	str	r2, [r3, #8]
}
 8005900:	bf00      	nop
 8005902:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8005906:	46bd      	mov	sp, r7
 8005908:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800590c:	51eb851f 	.word	0x51eb851f

08005910 <__cvt>:
 8005910:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005914:	ec57 6b10 	vmov	r6, r7, d0
 8005918:	2f00      	cmp	r7, #0
 800591a:	460c      	mov	r4, r1
 800591c:	4619      	mov	r1, r3
 800591e:	463b      	mov	r3, r7
 8005920:	bfbb      	ittet	lt
 8005922:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8005926:	461f      	movlt	r7, r3
 8005928:	2300      	movge	r3, #0
 800592a:	232d      	movlt	r3, #45	@ 0x2d
 800592c:	700b      	strb	r3, [r1, #0]
 800592e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8005930:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8005934:	4691      	mov	r9, r2
 8005936:	f023 0820 	bic.w	r8, r3, #32
 800593a:	bfbc      	itt	lt
 800593c:	4632      	movlt	r2, r6
 800593e:	4616      	movlt	r6, r2
 8005940:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8005944:	d005      	beq.n	8005952 <__cvt+0x42>
 8005946:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800594a:	d100      	bne.n	800594e <__cvt+0x3e>
 800594c:	3401      	adds	r4, #1
 800594e:	2102      	movs	r1, #2
 8005950:	e000      	b.n	8005954 <__cvt+0x44>
 8005952:	2103      	movs	r1, #3
 8005954:	ab03      	add	r3, sp, #12
 8005956:	9301      	str	r3, [sp, #4]
 8005958:	ab02      	add	r3, sp, #8
 800595a:	9300      	str	r3, [sp, #0]
 800595c:	ec47 6b10 	vmov	d0, r6, r7
 8005960:	4653      	mov	r3, sl
 8005962:	4622      	mov	r2, r4
 8005964:	f000 fe6c 	bl	8006640 <_dtoa_r>
 8005968:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800596c:	4605      	mov	r5, r0
 800596e:	d119      	bne.n	80059a4 <__cvt+0x94>
 8005970:	f019 0f01 	tst.w	r9, #1
 8005974:	d00e      	beq.n	8005994 <__cvt+0x84>
 8005976:	eb00 0904 	add.w	r9, r0, r4
 800597a:	2200      	movs	r2, #0
 800597c:	2300      	movs	r3, #0
 800597e:	4630      	mov	r0, r6
 8005980:	4639      	mov	r1, r7
 8005982:	f7fb f8a9 	bl	8000ad8 <__aeabi_dcmpeq>
 8005986:	b108      	cbz	r0, 800598c <__cvt+0x7c>
 8005988:	f8cd 900c 	str.w	r9, [sp, #12]
 800598c:	2230      	movs	r2, #48	@ 0x30
 800598e:	9b03      	ldr	r3, [sp, #12]
 8005990:	454b      	cmp	r3, r9
 8005992:	d31e      	bcc.n	80059d2 <__cvt+0xc2>
 8005994:	9b03      	ldr	r3, [sp, #12]
 8005996:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8005998:	1b5b      	subs	r3, r3, r5
 800599a:	4628      	mov	r0, r5
 800599c:	6013      	str	r3, [r2, #0]
 800599e:	b004      	add	sp, #16
 80059a0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80059a4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80059a8:	eb00 0904 	add.w	r9, r0, r4
 80059ac:	d1e5      	bne.n	800597a <__cvt+0x6a>
 80059ae:	7803      	ldrb	r3, [r0, #0]
 80059b0:	2b30      	cmp	r3, #48	@ 0x30
 80059b2:	d10a      	bne.n	80059ca <__cvt+0xba>
 80059b4:	2200      	movs	r2, #0
 80059b6:	2300      	movs	r3, #0
 80059b8:	4630      	mov	r0, r6
 80059ba:	4639      	mov	r1, r7
 80059bc:	f7fb f88c 	bl	8000ad8 <__aeabi_dcmpeq>
 80059c0:	b918      	cbnz	r0, 80059ca <__cvt+0xba>
 80059c2:	f1c4 0401 	rsb	r4, r4, #1
 80059c6:	f8ca 4000 	str.w	r4, [sl]
 80059ca:	f8da 3000 	ldr.w	r3, [sl]
 80059ce:	4499      	add	r9, r3
 80059d0:	e7d3      	b.n	800597a <__cvt+0x6a>
 80059d2:	1c59      	adds	r1, r3, #1
 80059d4:	9103      	str	r1, [sp, #12]
 80059d6:	701a      	strb	r2, [r3, #0]
 80059d8:	e7d9      	b.n	800598e <__cvt+0x7e>

080059da <__exponent>:
 80059da:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 80059dc:	2900      	cmp	r1, #0
 80059de:	bfba      	itte	lt
 80059e0:	4249      	neglt	r1, r1
 80059e2:	232d      	movlt	r3, #45	@ 0x2d
 80059e4:	232b      	movge	r3, #43	@ 0x2b
 80059e6:	2909      	cmp	r1, #9
 80059e8:	7002      	strb	r2, [r0, #0]
 80059ea:	7043      	strb	r3, [r0, #1]
 80059ec:	dd29      	ble.n	8005a42 <__exponent+0x68>
 80059ee:	f10d 0307 	add.w	r3, sp, #7
 80059f2:	461d      	mov	r5, r3
 80059f4:	270a      	movs	r7, #10
 80059f6:	461a      	mov	r2, r3
 80059f8:	fbb1 f6f7 	udiv	r6, r1, r7
 80059fc:	fb07 1416 	mls	r4, r7, r6, r1
 8005a00:	3430      	adds	r4, #48	@ 0x30
 8005a02:	f802 4c01 	strb.w	r4, [r2, #-1]
 8005a06:	460c      	mov	r4, r1
 8005a08:	2c63      	cmp	r4, #99	@ 0x63
 8005a0a:	f103 33ff 	add.w	r3, r3, #4294967295
 8005a0e:	4631      	mov	r1, r6
 8005a10:	dcf1      	bgt.n	80059f6 <__exponent+0x1c>
 8005a12:	3130      	adds	r1, #48	@ 0x30
 8005a14:	1e94      	subs	r4, r2, #2
 8005a16:	f803 1c01 	strb.w	r1, [r3, #-1]
 8005a1a:	1c41      	adds	r1, r0, #1
 8005a1c:	4623      	mov	r3, r4
 8005a1e:	42ab      	cmp	r3, r5
 8005a20:	d30a      	bcc.n	8005a38 <__exponent+0x5e>
 8005a22:	f10d 0309 	add.w	r3, sp, #9
 8005a26:	1a9b      	subs	r3, r3, r2
 8005a28:	42ac      	cmp	r4, r5
 8005a2a:	bf88      	it	hi
 8005a2c:	2300      	movhi	r3, #0
 8005a2e:	3302      	adds	r3, #2
 8005a30:	4403      	add	r3, r0
 8005a32:	1a18      	subs	r0, r3, r0
 8005a34:	b003      	add	sp, #12
 8005a36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005a38:	f813 6b01 	ldrb.w	r6, [r3], #1
 8005a3c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8005a40:	e7ed      	b.n	8005a1e <__exponent+0x44>
 8005a42:	2330      	movs	r3, #48	@ 0x30
 8005a44:	3130      	adds	r1, #48	@ 0x30
 8005a46:	7083      	strb	r3, [r0, #2]
 8005a48:	70c1      	strb	r1, [r0, #3]
 8005a4a:	1d03      	adds	r3, r0, #4
 8005a4c:	e7f1      	b.n	8005a32 <__exponent+0x58>
	...

08005a50 <_printf_float>:
 8005a50:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005a54:	b08d      	sub	sp, #52	@ 0x34
 8005a56:	460c      	mov	r4, r1
 8005a58:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8005a5c:	4616      	mov	r6, r2
 8005a5e:	461f      	mov	r7, r3
 8005a60:	4605      	mov	r5, r0
 8005a62:	f000 fced 	bl	8006440 <_localeconv_r>
 8005a66:	6803      	ldr	r3, [r0, #0]
 8005a68:	9304      	str	r3, [sp, #16]
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	f7fa fc08 	bl	8000280 <strlen>
 8005a70:	2300      	movs	r3, #0
 8005a72:	930a      	str	r3, [sp, #40]	@ 0x28
 8005a74:	f8d8 3000 	ldr.w	r3, [r8]
 8005a78:	9005      	str	r0, [sp, #20]
 8005a7a:	3307      	adds	r3, #7
 8005a7c:	f023 0307 	bic.w	r3, r3, #7
 8005a80:	f103 0208 	add.w	r2, r3, #8
 8005a84:	f894 a018 	ldrb.w	sl, [r4, #24]
 8005a88:	f8d4 b000 	ldr.w	fp, [r4]
 8005a8c:	f8c8 2000 	str.w	r2, [r8]
 8005a90:	e9d3 8900 	ldrd	r8, r9, [r3]
 8005a94:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 8005a98:	9307      	str	r3, [sp, #28]
 8005a9a:	f8cd 8018 	str.w	r8, [sp, #24]
 8005a9e:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 8005aa2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005aa6:	4b9c      	ldr	r3, [pc, #624]	@ (8005d18 <_printf_float+0x2c8>)
 8005aa8:	f04f 32ff 	mov.w	r2, #4294967295
 8005aac:	f7fb f846 	bl	8000b3c <__aeabi_dcmpun>
 8005ab0:	bb70      	cbnz	r0, 8005b10 <_printf_float+0xc0>
 8005ab2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8005ab6:	4b98      	ldr	r3, [pc, #608]	@ (8005d18 <_printf_float+0x2c8>)
 8005ab8:	f04f 32ff 	mov.w	r2, #4294967295
 8005abc:	f7fb f820 	bl	8000b00 <__aeabi_dcmple>
 8005ac0:	bb30      	cbnz	r0, 8005b10 <_printf_float+0xc0>
 8005ac2:	2200      	movs	r2, #0
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	4640      	mov	r0, r8
 8005ac8:	4649      	mov	r1, r9
 8005aca:	f7fb f80f 	bl	8000aec <__aeabi_dcmplt>
 8005ace:	b110      	cbz	r0, 8005ad6 <_printf_float+0x86>
 8005ad0:	232d      	movs	r3, #45	@ 0x2d
 8005ad2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005ad6:	4a91      	ldr	r2, [pc, #580]	@ (8005d1c <_printf_float+0x2cc>)
 8005ad8:	4b91      	ldr	r3, [pc, #580]	@ (8005d20 <_printf_float+0x2d0>)
 8005ada:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8005ade:	bf94      	ite	ls
 8005ae0:	4690      	movls	r8, r2
 8005ae2:	4698      	movhi	r8, r3
 8005ae4:	2303      	movs	r3, #3
 8005ae6:	6123      	str	r3, [r4, #16]
 8005ae8:	f02b 0304 	bic.w	r3, fp, #4
 8005aec:	6023      	str	r3, [r4, #0]
 8005aee:	f04f 0900 	mov.w	r9, #0
 8005af2:	9700      	str	r7, [sp, #0]
 8005af4:	4633      	mov	r3, r6
 8005af6:	aa0b      	add	r2, sp, #44	@ 0x2c
 8005af8:	4621      	mov	r1, r4
 8005afa:	4628      	mov	r0, r5
 8005afc:	f000 f9d2 	bl	8005ea4 <_printf_common>
 8005b00:	3001      	adds	r0, #1
 8005b02:	f040 808d 	bne.w	8005c20 <_printf_float+0x1d0>
 8005b06:	f04f 30ff 	mov.w	r0, #4294967295
 8005b0a:	b00d      	add	sp, #52	@ 0x34
 8005b0c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005b10:	4642      	mov	r2, r8
 8005b12:	464b      	mov	r3, r9
 8005b14:	4640      	mov	r0, r8
 8005b16:	4649      	mov	r1, r9
 8005b18:	f7fb f810 	bl	8000b3c <__aeabi_dcmpun>
 8005b1c:	b140      	cbz	r0, 8005b30 <_printf_float+0xe0>
 8005b1e:	464b      	mov	r3, r9
 8005b20:	2b00      	cmp	r3, #0
 8005b22:	bfbc      	itt	lt
 8005b24:	232d      	movlt	r3, #45	@ 0x2d
 8005b26:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8005b2a:	4a7e      	ldr	r2, [pc, #504]	@ (8005d24 <_printf_float+0x2d4>)
 8005b2c:	4b7e      	ldr	r3, [pc, #504]	@ (8005d28 <_printf_float+0x2d8>)
 8005b2e:	e7d4      	b.n	8005ada <_printf_float+0x8a>
 8005b30:	6863      	ldr	r3, [r4, #4]
 8005b32:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8005b36:	9206      	str	r2, [sp, #24]
 8005b38:	1c5a      	adds	r2, r3, #1
 8005b3a:	d13b      	bne.n	8005bb4 <_printf_float+0x164>
 8005b3c:	2306      	movs	r3, #6
 8005b3e:	6063      	str	r3, [r4, #4]
 8005b40:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8005b44:	2300      	movs	r3, #0
 8005b46:	6022      	str	r2, [r4, #0]
 8005b48:	9303      	str	r3, [sp, #12]
 8005b4a:	ab0a      	add	r3, sp, #40	@ 0x28
 8005b4c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8005b50:	ab09      	add	r3, sp, #36	@ 0x24
 8005b52:	9300      	str	r3, [sp, #0]
 8005b54:	6861      	ldr	r1, [r4, #4]
 8005b56:	ec49 8b10 	vmov	d0, r8, r9
 8005b5a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8005b5e:	4628      	mov	r0, r5
 8005b60:	f7ff fed6 	bl	8005910 <__cvt>
 8005b64:	9b06      	ldr	r3, [sp, #24]
 8005b66:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8005b68:	2b47      	cmp	r3, #71	@ 0x47
 8005b6a:	4680      	mov	r8, r0
 8005b6c:	d129      	bne.n	8005bc2 <_printf_float+0x172>
 8005b6e:	1cc8      	adds	r0, r1, #3
 8005b70:	db02      	blt.n	8005b78 <_printf_float+0x128>
 8005b72:	6863      	ldr	r3, [r4, #4]
 8005b74:	4299      	cmp	r1, r3
 8005b76:	dd41      	ble.n	8005bfc <_printf_float+0x1ac>
 8005b78:	f1aa 0a02 	sub.w	sl, sl, #2
 8005b7c:	fa5f fa8a 	uxtb.w	sl, sl
 8005b80:	3901      	subs	r1, #1
 8005b82:	4652      	mov	r2, sl
 8005b84:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 8005b88:	9109      	str	r1, [sp, #36]	@ 0x24
 8005b8a:	f7ff ff26 	bl	80059da <__exponent>
 8005b8e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8005b90:	1813      	adds	r3, r2, r0
 8005b92:	2a01      	cmp	r2, #1
 8005b94:	4681      	mov	r9, r0
 8005b96:	6123      	str	r3, [r4, #16]
 8005b98:	dc02      	bgt.n	8005ba0 <_printf_float+0x150>
 8005b9a:	6822      	ldr	r2, [r4, #0]
 8005b9c:	07d2      	lsls	r2, r2, #31
 8005b9e:	d501      	bpl.n	8005ba4 <_printf_float+0x154>
 8005ba0:	3301      	adds	r3, #1
 8005ba2:	6123      	str	r3, [r4, #16]
 8005ba4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 8005ba8:	2b00      	cmp	r3, #0
 8005baa:	d0a2      	beq.n	8005af2 <_printf_float+0xa2>
 8005bac:	232d      	movs	r3, #45	@ 0x2d
 8005bae:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8005bb2:	e79e      	b.n	8005af2 <_printf_float+0xa2>
 8005bb4:	9a06      	ldr	r2, [sp, #24]
 8005bb6:	2a47      	cmp	r2, #71	@ 0x47
 8005bb8:	d1c2      	bne.n	8005b40 <_printf_float+0xf0>
 8005bba:	2b00      	cmp	r3, #0
 8005bbc:	d1c0      	bne.n	8005b40 <_printf_float+0xf0>
 8005bbe:	2301      	movs	r3, #1
 8005bc0:	e7bd      	b.n	8005b3e <_printf_float+0xee>
 8005bc2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005bc6:	d9db      	bls.n	8005b80 <_printf_float+0x130>
 8005bc8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 8005bcc:	d118      	bne.n	8005c00 <_printf_float+0x1b0>
 8005bce:	2900      	cmp	r1, #0
 8005bd0:	6863      	ldr	r3, [r4, #4]
 8005bd2:	dd0b      	ble.n	8005bec <_printf_float+0x19c>
 8005bd4:	6121      	str	r1, [r4, #16]
 8005bd6:	b913      	cbnz	r3, 8005bde <_printf_float+0x18e>
 8005bd8:	6822      	ldr	r2, [r4, #0]
 8005bda:	07d0      	lsls	r0, r2, #31
 8005bdc:	d502      	bpl.n	8005be4 <_printf_float+0x194>
 8005bde:	3301      	adds	r3, #1
 8005be0:	440b      	add	r3, r1
 8005be2:	6123      	str	r3, [r4, #16]
 8005be4:	65a1      	str	r1, [r4, #88]	@ 0x58
 8005be6:	f04f 0900 	mov.w	r9, #0
 8005bea:	e7db      	b.n	8005ba4 <_printf_float+0x154>
 8005bec:	b913      	cbnz	r3, 8005bf4 <_printf_float+0x1a4>
 8005bee:	6822      	ldr	r2, [r4, #0]
 8005bf0:	07d2      	lsls	r2, r2, #31
 8005bf2:	d501      	bpl.n	8005bf8 <_printf_float+0x1a8>
 8005bf4:	3302      	adds	r3, #2
 8005bf6:	e7f4      	b.n	8005be2 <_printf_float+0x192>
 8005bf8:	2301      	movs	r3, #1
 8005bfa:	e7f2      	b.n	8005be2 <_printf_float+0x192>
 8005bfc:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8005c00:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8005c02:	4299      	cmp	r1, r3
 8005c04:	db05      	blt.n	8005c12 <_printf_float+0x1c2>
 8005c06:	6823      	ldr	r3, [r4, #0]
 8005c08:	6121      	str	r1, [r4, #16]
 8005c0a:	07d8      	lsls	r0, r3, #31
 8005c0c:	d5ea      	bpl.n	8005be4 <_printf_float+0x194>
 8005c0e:	1c4b      	adds	r3, r1, #1
 8005c10:	e7e7      	b.n	8005be2 <_printf_float+0x192>
 8005c12:	2900      	cmp	r1, #0
 8005c14:	bfd4      	ite	le
 8005c16:	f1c1 0202 	rsble	r2, r1, #2
 8005c1a:	2201      	movgt	r2, #1
 8005c1c:	4413      	add	r3, r2
 8005c1e:	e7e0      	b.n	8005be2 <_printf_float+0x192>
 8005c20:	6823      	ldr	r3, [r4, #0]
 8005c22:	055a      	lsls	r2, r3, #21
 8005c24:	d407      	bmi.n	8005c36 <_printf_float+0x1e6>
 8005c26:	6923      	ldr	r3, [r4, #16]
 8005c28:	4642      	mov	r2, r8
 8005c2a:	4631      	mov	r1, r6
 8005c2c:	4628      	mov	r0, r5
 8005c2e:	47b8      	blx	r7
 8005c30:	3001      	adds	r0, #1
 8005c32:	d12b      	bne.n	8005c8c <_printf_float+0x23c>
 8005c34:	e767      	b.n	8005b06 <_printf_float+0xb6>
 8005c36:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8005c3a:	f240 80dd 	bls.w	8005df8 <_printf_float+0x3a8>
 8005c3e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005c42:	2200      	movs	r2, #0
 8005c44:	2300      	movs	r3, #0
 8005c46:	f7fa ff47 	bl	8000ad8 <__aeabi_dcmpeq>
 8005c4a:	2800      	cmp	r0, #0
 8005c4c:	d033      	beq.n	8005cb6 <_printf_float+0x266>
 8005c4e:	4a37      	ldr	r2, [pc, #220]	@ (8005d2c <_printf_float+0x2dc>)
 8005c50:	2301      	movs	r3, #1
 8005c52:	4631      	mov	r1, r6
 8005c54:	4628      	mov	r0, r5
 8005c56:	47b8      	blx	r7
 8005c58:	3001      	adds	r0, #1
 8005c5a:	f43f af54 	beq.w	8005b06 <_printf_float+0xb6>
 8005c5e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8005c62:	4543      	cmp	r3, r8
 8005c64:	db02      	blt.n	8005c6c <_printf_float+0x21c>
 8005c66:	6823      	ldr	r3, [r4, #0]
 8005c68:	07d8      	lsls	r0, r3, #31
 8005c6a:	d50f      	bpl.n	8005c8c <_printf_float+0x23c>
 8005c6c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005c70:	4631      	mov	r1, r6
 8005c72:	4628      	mov	r0, r5
 8005c74:	47b8      	blx	r7
 8005c76:	3001      	adds	r0, #1
 8005c78:	f43f af45 	beq.w	8005b06 <_printf_float+0xb6>
 8005c7c:	f04f 0900 	mov.w	r9, #0
 8005c80:	f108 38ff 	add.w	r8, r8, #4294967295
 8005c84:	f104 0a1a 	add.w	sl, r4, #26
 8005c88:	45c8      	cmp	r8, r9
 8005c8a:	dc09      	bgt.n	8005ca0 <_printf_float+0x250>
 8005c8c:	6823      	ldr	r3, [r4, #0]
 8005c8e:	079b      	lsls	r3, r3, #30
 8005c90:	f100 8103 	bmi.w	8005e9a <_printf_float+0x44a>
 8005c94:	68e0      	ldr	r0, [r4, #12]
 8005c96:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8005c98:	4298      	cmp	r0, r3
 8005c9a:	bfb8      	it	lt
 8005c9c:	4618      	movlt	r0, r3
 8005c9e:	e734      	b.n	8005b0a <_printf_float+0xba>
 8005ca0:	2301      	movs	r3, #1
 8005ca2:	4652      	mov	r2, sl
 8005ca4:	4631      	mov	r1, r6
 8005ca6:	4628      	mov	r0, r5
 8005ca8:	47b8      	blx	r7
 8005caa:	3001      	adds	r0, #1
 8005cac:	f43f af2b 	beq.w	8005b06 <_printf_float+0xb6>
 8005cb0:	f109 0901 	add.w	r9, r9, #1
 8005cb4:	e7e8      	b.n	8005c88 <_printf_float+0x238>
 8005cb6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cb8:	2b00      	cmp	r3, #0
 8005cba:	dc39      	bgt.n	8005d30 <_printf_float+0x2e0>
 8005cbc:	4a1b      	ldr	r2, [pc, #108]	@ (8005d2c <_printf_float+0x2dc>)
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	4631      	mov	r1, r6
 8005cc2:	4628      	mov	r0, r5
 8005cc4:	47b8      	blx	r7
 8005cc6:	3001      	adds	r0, #1
 8005cc8:	f43f af1d 	beq.w	8005b06 <_printf_float+0xb6>
 8005ccc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8005cd0:	ea59 0303 	orrs.w	r3, r9, r3
 8005cd4:	d102      	bne.n	8005cdc <_printf_float+0x28c>
 8005cd6:	6823      	ldr	r3, [r4, #0]
 8005cd8:	07d9      	lsls	r1, r3, #31
 8005cda:	d5d7      	bpl.n	8005c8c <_printf_float+0x23c>
 8005cdc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005ce0:	4631      	mov	r1, r6
 8005ce2:	4628      	mov	r0, r5
 8005ce4:	47b8      	blx	r7
 8005ce6:	3001      	adds	r0, #1
 8005ce8:	f43f af0d 	beq.w	8005b06 <_printf_float+0xb6>
 8005cec:	f04f 0a00 	mov.w	sl, #0
 8005cf0:	f104 0b1a 	add.w	fp, r4, #26
 8005cf4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005cf6:	425b      	negs	r3, r3
 8005cf8:	4553      	cmp	r3, sl
 8005cfa:	dc01      	bgt.n	8005d00 <_printf_float+0x2b0>
 8005cfc:	464b      	mov	r3, r9
 8005cfe:	e793      	b.n	8005c28 <_printf_float+0x1d8>
 8005d00:	2301      	movs	r3, #1
 8005d02:	465a      	mov	r2, fp
 8005d04:	4631      	mov	r1, r6
 8005d06:	4628      	mov	r0, r5
 8005d08:	47b8      	blx	r7
 8005d0a:	3001      	adds	r0, #1
 8005d0c:	f43f aefb 	beq.w	8005b06 <_printf_float+0xb6>
 8005d10:	f10a 0a01 	add.w	sl, sl, #1
 8005d14:	e7ee      	b.n	8005cf4 <_printf_float+0x2a4>
 8005d16:	bf00      	nop
 8005d18:	7fefffff 	.word	0x7fefffff
 8005d1c:	080087b0 	.word	0x080087b0
 8005d20:	080087b4 	.word	0x080087b4
 8005d24:	080087b8 	.word	0x080087b8
 8005d28:	080087bc 	.word	0x080087bc
 8005d2c:	080087c0 	.word	0x080087c0
 8005d30:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d32:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005d36:	4553      	cmp	r3, sl
 8005d38:	bfa8      	it	ge
 8005d3a:	4653      	movge	r3, sl
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	4699      	mov	r9, r3
 8005d40:	dc36      	bgt.n	8005db0 <_printf_float+0x360>
 8005d42:	f04f 0b00 	mov.w	fp, #0
 8005d46:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d4a:	f104 021a 	add.w	r2, r4, #26
 8005d4e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8005d50:	9306      	str	r3, [sp, #24]
 8005d52:	eba3 0309 	sub.w	r3, r3, r9
 8005d56:	455b      	cmp	r3, fp
 8005d58:	dc31      	bgt.n	8005dbe <_printf_float+0x36e>
 8005d5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d5c:	459a      	cmp	sl, r3
 8005d5e:	dc3a      	bgt.n	8005dd6 <_printf_float+0x386>
 8005d60:	6823      	ldr	r3, [r4, #0]
 8005d62:	07da      	lsls	r2, r3, #31
 8005d64:	d437      	bmi.n	8005dd6 <_printf_float+0x386>
 8005d66:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d68:	ebaa 0903 	sub.w	r9, sl, r3
 8005d6c:	9b06      	ldr	r3, [sp, #24]
 8005d6e:	ebaa 0303 	sub.w	r3, sl, r3
 8005d72:	4599      	cmp	r9, r3
 8005d74:	bfa8      	it	ge
 8005d76:	4699      	movge	r9, r3
 8005d78:	f1b9 0f00 	cmp.w	r9, #0
 8005d7c:	dc33      	bgt.n	8005de6 <_printf_float+0x396>
 8005d7e:	f04f 0800 	mov.w	r8, #0
 8005d82:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8005d86:	f104 0b1a 	add.w	fp, r4, #26
 8005d8a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8005d8c:	ebaa 0303 	sub.w	r3, sl, r3
 8005d90:	eba3 0309 	sub.w	r3, r3, r9
 8005d94:	4543      	cmp	r3, r8
 8005d96:	f77f af79 	ble.w	8005c8c <_printf_float+0x23c>
 8005d9a:	2301      	movs	r3, #1
 8005d9c:	465a      	mov	r2, fp
 8005d9e:	4631      	mov	r1, r6
 8005da0:	4628      	mov	r0, r5
 8005da2:	47b8      	blx	r7
 8005da4:	3001      	adds	r0, #1
 8005da6:	f43f aeae 	beq.w	8005b06 <_printf_float+0xb6>
 8005daa:	f108 0801 	add.w	r8, r8, #1
 8005dae:	e7ec      	b.n	8005d8a <_printf_float+0x33a>
 8005db0:	4642      	mov	r2, r8
 8005db2:	4631      	mov	r1, r6
 8005db4:	4628      	mov	r0, r5
 8005db6:	47b8      	blx	r7
 8005db8:	3001      	adds	r0, #1
 8005dba:	d1c2      	bne.n	8005d42 <_printf_float+0x2f2>
 8005dbc:	e6a3      	b.n	8005b06 <_printf_float+0xb6>
 8005dbe:	2301      	movs	r3, #1
 8005dc0:	4631      	mov	r1, r6
 8005dc2:	4628      	mov	r0, r5
 8005dc4:	9206      	str	r2, [sp, #24]
 8005dc6:	47b8      	blx	r7
 8005dc8:	3001      	adds	r0, #1
 8005dca:	f43f ae9c 	beq.w	8005b06 <_printf_float+0xb6>
 8005dce:	9a06      	ldr	r2, [sp, #24]
 8005dd0:	f10b 0b01 	add.w	fp, fp, #1
 8005dd4:	e7bb      	b.n	8005d4e <_printf_float+0x2fe>
 8005dd6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005dda:	4631      	mov	r1, r6
 8005ddc:	4628      	mov	r0, r5
 8005dde:	47b8      	blx	r7
 8005de0:	3001      	adds	r0, #1
 8005de2:	d1c0      	bne.n	8005d66 <_printf_float+0x316>
 8005de4:	e68f      	b.n	8005b06 <_printf_float+0xb6>
 8005de6:	9a06      	ldr	r2, [sp, #24]
 8005de8:	464b      	mov	r3, r9
 8005dea:	4442      	add	r2, r8
 8005dec:	4631      	mov	r1, r6
 8005dee:	4628      	mov	r0, r5
 8005df0:	47b8      	blx	r7
 8005df2:	3001      	adds	r0, #1
 8005df4:	d1c3      	bne.n	8005d7e <_printf_float+0x32e>
 8005df6:	e686      	b.n	8005b06 <_printf_float+0xb6>
 8005df8:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8005dfc:	f1ba 0f01 	cmp.w	sl, #1
 8005e00:	dc01      	bgt.n	8005e06 <_printf_float+0x3b6>
 8005e02:	07db      	lsls	r3, r3, #31
 8005e04:	d536      	bpl.n	8005e74 <_printf_float+0x424>
 8005e06:	2301      	movs	r3, #1
 8005e08:	4642      	mov	r2, r8
 8005e0a:	4631      	mov	r1, r6
 8005e0c:	4628      	mov	r0, r5
 8005e0e:	47b8      	blx	r7
 8005e10:	3001      	adds	r0, #1
 8005e12:	f43f ae78 	beq.w	8005b06 <_printf_float+0xb6>
 8005e16:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8005e1a:	4631      	mov	r1, r6
 8005e1c:	4628      	mov	r0, r5
 8005e1e:	47b8      	blx	r7
 8005e20:	3001      	adds	r0, #1
 8005e22:	f43f ae70 	beq.w	8005b06 <_printf_float+0xb6>
 8005e26:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8005e2a:	2200      	movs	r2, #0
 8005e2c:	2300      	movs	r3, #0
 8005e2e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8005e32:	f7fa fe51 	bl	8000ad8 <__aeabi_dcmpeq>
 8005e36:	b9c0      	cbnz	r0, 8005e6a <_printf_float+0x41a>
 8005e38:	4653      	mov	r3, sl
 8005e3a:	f108 0201 	add.w	r2, r8, #1
 8005e3e:	4631      	mov	r1, r6
 8005e40:	4628      	mov	r0, r5
 8005e42:	47b8      	blx	r7
 8005e44:	3001      	adds	r0, #1
 8005e46:	d10c      	bne.n	8005e62 <_printf_float+0x412>
 8005e48:	e65d      	b.n	8005b06 <_printf_float+0xb6>
 8005e4a:	2301      	movs	r3, #1
 8005e4c:	465a      	mov	r2, fp
 8005e4e:	4631      	mov	r1, r6
 8005e50:	4628      	mov	r0, r5
 8005e52:	47b8      	blx	r7
 8005e54:	3001      	adds	r0, #1
 8005e56:	f43f ae56 	beq.w	8005b06 <_printf_float+0xb6>
 8005e5a:	f108 0801 	add.w	r8, r8, #1
 8005e5e:	45d0      	cmp	r8, sl
 8005e60:	dbf3      	blt.n	8005e4a <_printf_float+0x3fa>
 8005e62:	464b      	mov	r3, r9
 8005e64:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8005e68:	e6df      	b.n	8005c2a <_printf_float+0x1da>
 8005e6a:	f04f 0800 	mov.w	r8, #0
 8005e6e:	f104 0b1a 	add.w	fp, r4, #26
 8005e72:	e7f4      	b.n	8005e5e <_printf_float+0x40e>
 8005e74:	2301      	movs	r3, #1
 8005e76:	4642      	mov	r2, r8
 8005e78:	e7e1      	b.n	8005e3e <_printf_float+0x3ee>
 8005e7a:	2301      	movs	r3, #1
 8005e7c:	464a      	mov	r2, r9
 8005e7e:	4631      	mov	r1, r6
 8005e80:	4628      	mov	r0, r5
 8005e82:	47b8      	blx	r7
 8005e84:	3001      	adds	r0, #1
 8005e86:	f43f ae3e 	beq.w	8005b06 <_printf_float+0xb6>
 8005e8a:	f108 0801 	add.w	r8, r8, #1
 8005e8e:	68e3      	ldr	r3, [r4, #12]
 8005e90:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8005e92:	1a5b      	subs	r3, r3, r1
 8005e94:	4543      	cmp	r3, r8
 8005e96:	dcf0      	bgt.n	8005e7a <_printf_float+0x42a>
 8005e98:	e6fc      	b.n	8005c94 <_printf_float+0x244>
 8005e9a:	f04f 0800 	mov.w	r8, #0
 8005e9e:	f104 0919 	add.w	r9, r4, #25
 8005ea2:	e7f4      	b.n	8005e8e <_printf_float+0x43e>

08005ea4 <_printf_common>:
 8005ea4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8005ea8:	4616      	mov	r6, r2
 8005eaa:	4698      	mov	r8, r3
 8005eac:	688a      	ldr	r2, [r1, #8]
 8005eae:	690b      	ldr	r3, [r1, #16]
 8005eb0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8005eb4:	4293      	cmp	r3, r2
 8005eb6:	bfb8      	it	lt
 8005eb8:	4613      	movlt	r3, r2
 8005eba:	6033      	str	r3, [r6, #0]
 8005ebc:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8005ec0:	4607      	mov	r7, r0
 8005ec2:	460c      	mov	r4, r1
 8005ec4:	b10a      	cbz	r2, 8005eca <_printf_common+0x26>
 8005ec6:	3301      	adds	r3, #1
 8005ec8:	6033      	str	r3, [r6, #0]
 8005eca:	6823      	ldr	r3, [r4, #0]
 8005ecc:	0699      	lsls	r1, r3, #26
 8005ece:	bf42      	ittt	mi
 8005ed0:	6833      	ldrmi	r3, [r6, #0]
 8005ed2:	3302      	addmi	r3, #2
 8005ed4:	6033      	strmi	r3, [r6, #0]
 8005ed6:	6825      	ldr	r5, [r4, #0]
 8005ed8:	f015 0506 	ands.w	r5, r5, #6
 8005edc:	d106      	bne.n	8005eec <_printf_common+0x48>
 8005ede:	f104 0a19 	add.w	sl, r4, #25
 8005ee2:	68e3      	ldr	r3, [r4, #12]
 8005ee4:	6832      	ldr	r2, [r6, #0]
 8005ee6:	1a9b      	subs	r3, r3, r2
 8005ee8:	42ab      	cmp	r3, r5
 8005eea:	dc26      	bgt.n	8005f3a <_printf_common+0x96>
 8005eec:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8005ef0:	6822      	ldr	r2, [r4, #0]
 8005ef2:	3b00      	subs	r3, #0
 8005ef4:	bf18      	it	ne
 8005ef6:	2301      	movne	r3, #1
 8005ef8:	0692      	lsls	r2, r2, #26
 8005efa:	d42b      	bmi.n	8005f54 <_printf_common+0xb0>
 8005efc:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8005f00:	4641      	mov	r1, r8
 8005f02:	4638      	mov	r0, r7
 8005f04:	47c8      	blx	r9
 8005f06:	3001      	adds	r0, #1
 8005f08:	d01e      	beq.n	8005f48 <_printf_common+0xa4>
 8005f0a:	6823      	ldr	r3, [r4, #0]
 8005f0c:	6922      	ldr	r2, [r4, #16]
 8005f0e:	f003 0306 	and.w	r3, r3, #6
 8005f12:	2b04      	cmp	r3, #4
 8005f14:	bf02      	ittt	eq
 8005f16:	68e5      	ldreq	r5, [r4, #12]
 8005f18:	6833      	ldreq	r3, [r6, #0]
 8005f1a:	1aed      	subeq	r5, r5, r3
 8005f1c:	68a3      	ldr	r3, [r4, #8]
 8005f1e:	bf0c      	ite	eq
 8005f20:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8005f24:	2500      	movne	r5, #0
 8005f26:	4293      	cmp	r3, r2
 8005f28:	bfc4      	itt	gt
 8005f2a:	1a9b      	subgt	r3, r3, r2
 8005f2c:	18ed      	addgt	r5, r5, r3
 8005f2e:	2600      	movs	r6, #0
 8005f30:	341a      	adds	r4, #26
 8005f32:	42b5      	cmp	r5, r6
 8005f34:	d11a      	bne.n	8005f6c <_printf_common+0xc8>
 8005f36:	2000      	movs	r0, #0
 8005f38:	e008      	b.n	8005f4c <_printf_common+0xa8>
 8005f3a:	2301      	movs	r3, #1
 8005f3c:	4652      	mov	r2, sl
 8005f3e:	4641      	mov	r1, r8
 8005f40:	4638      	mov	r0, r7
 8005f42:	47c8      	blx	r9
 8005f44:	3001      	adds	r0, #1
 8005f46:	d103      	bne.n	8005f50 <_printf_common+0xac>
 8005f48:	f04f 30ff 	mov.w	r0, #4294967295
 8005f4c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8005f50:	3501      	adds	r5, #1
 8005f52:	e7c6      	b.n	8005ee2 <_printf_common+0x3e>
 8005f54:	18e1      	adds	r1, r4, r3
 8005f56:	1c5a      	adds	r2, r3, #1
 8005f58:	2030      	movs	r0, #48	@ 0x30
 8005f5a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8005f5e:	4422      	add	r2, r4
 8005f60:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8005f64:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8005f68:	3302      	adds	r3, #2
 8005f6a:	e7c7      	b.n	8005efc <_printf_common+0x58>
 8005f6c:	2301      	movs	r3, #1
 8005f6e:	4622      	mov	r2, r4
 8005f70:	4641      	mov	r1, r8
 8005f72:	4638      	mov	r0, r7
 8005f74:	47c8      	blx	r9
 8005f76:	3001      	adds	r0, #1
 8005f78:	d0e6      	beq.n	8005f48 <_printf_common+0xa4>
 8005f7a:	3601      	adds	r6, #1
 8005f7c:	e7d9      	b.n	8005f32 <_printf_common+0x8e>
	...

08005f80 <_printf_i>:
 8005f80:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8005f84:	7e0f      	ldrb	r7, [r1, #24]
 8005f86:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8005f88:	2f78      	cmp	r7, #120	@ 0x78
 8005f8a:	4691      	mov	r9, r2
 8005f8c:	4680      	mov	r8, r0
 8005f8e:	460c      	mov	r4, r1
 8005f90:	469a      	mov	sl, r3
 8005f92:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8005f96:	d807      	bhi.n	8005fa8 <_printf_i+0x28>
 8005f98:	2f62      	cmp	r7, #98	@ 0x62
 8005f9a:	d80a      	bhi.n	8005fb2 <_printf_i+0x32>
 8005f9c:	2f00      	cmp	r7, #0
 8005f9e:	f000 80d2 	beq.w	8006146 <_printf_i+0x1c6>
 8005fa2:	2f58      	cmp	r7, #88	@ 0x58
 8005fa4:	f000 80b9 	beq.w	800611a <_printf_i+0x19a>
 8005fa8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8005fac:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8005fb0:	e03a      	b.n	8006028 <_printf_i+0xa8>
 8005fb2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8005fb6:	2b15      	cmp	r3, #21
 8005fb8:	d8f6      	bhi.n	8005fa8 <_printf_i+0x28>
 8005fba:	a101      	add	r1, pc, #4	@ (adr r1, 8005fc0 <_printf_i+0x40>)
 8005fbc:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8005fc0:	08006019 	.word	0x08006019
 8005fc4:	0800602d 	.word	0x0800602d
 8005fc8:	08005fa9 	.word	0x08005fa9
 8005fcc:	08005fa9 	.word	0x08005fa9
 8005fd0:	08005fa9 	.word	0x08005fa9
 8005fd4:	08005fa9 	.word	0x08005fa9
 8005fd8:	0800602d 	.word	0x0800602d
 8005fdc:	08005fa9 	.word	0x08005fa9
 8005fe0:	08005fa9 	.word	0x08005fa9
 8005fe4:	08005fa9 	.word	0x08005fa9
 8005fe8:	08005fa9 	.word	0x08005fa9
 8005fec:	0800612d 	.word	0x0800612d
 8005ff0:	08006057 	.word	0x08006057
 8005ff4:	080060e7 	.word	0x080060e7
 8005ff8:	08005fa9 	.word	0x08005fa9
 8005ffc:	08005fa9 	.word	0x08005fa9
 8006000:	0800614f 	.word	0x0800614f
 8006004:	08005fa9 	.word	0x08005fa9
 8006008:	08006057 	.word	0x08006057
 800600c:	08005fa9 	.word	0x08005fa9
 8006010:	08005fa9 	.word	0x08005fa9
 8006014:	080060ef 	.word	0x080060ef
 8006018:	6833      	ldr	r3, [r6, #0]
 800601a:	1d1a      	adds	r2, r3, #4
 800601c:	681b      	ldr	r3, [r3, #0]
 800601e:	6032      	str	r2, [r6, #0]
 8006020:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006024:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006028:	2301      	movs	r3, #1
 800602a:	e09d      	b.n	8006168 <_printf_i+0x1e8>
 800602c:	6833      	ldr	r3, [r6, #0]
 800602e:	6820      	ldr	r0, [r4, #0]
 8006030:	1d19      	adds	r1, r3, #4
 8006032:	6031      	str	r1, [r6, #0]
 8006034:	0606      	lsls	r6, r0, #24
 8006036:	d501      	bpl.n	800603c <_printf_i+0xbc>
 8006038:	681d      	ldr	r5, [r3, #0]
 800603a:	e003      	b.n	8006044 <_printf_i+0xc4>
 800603c:	0645      	lsls	r5, r0, #25
 800603e:	d5fb      	bpl.n	8006038 <_printf_i+0xb8>
 8006040:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006044:	2d00      	cmp	r5, #0
 8006046:	da03      	bge.n	8006050 <_printf_i+0xd0>
 8006048:	232d      	movs	r3, #45	@ 0x2d
 800604a:	426d      	negs	r5, r5
 800604c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006050:	4859      	ldr	r0, [pc, #356]	@ (80061b8 <_printf_i+0x238>)
 8006052:	230a      	movs	r3, #10
 8006054:	e011      	b.n	800607a <_printf_i+0xfa>
 8006056:	6821      	ldr	r1, [r4, #0]
 8006058:	6833      	ldr	r3, [r6, #0]
 800605a:	0608      	lsls	r0, r1, #24
 800605c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006060:	d402      	bmi.n	8006068 <_printf_i+0xe8>
 8006062:	0649      	lsls	r1, r1, #25
 8006064:	bf48      	it	mi
 8006066:	b2ad      	uxthmi	r5, r5
 8006068:	2f6f      	cmp	r7, #111	@ 0x6f
 800606a:	4853      	ldr	r0, [pc, #332]	@ (80061b8 <_printf_i+0x238>)
 800606c:	6033      	str	r3, [r6, #0]
 800606e:	bf14      	ite	ne
 8006070:	230a      	movne	r3, #10
 8006072:	2308      	moveq	r3, #8
 8006074:	2100      	movs	r1, #0
 8006076:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800607a:	6866      	ldr	r6, [r4, #4]
 800607c:	60a6      	str	r6, [r4, #8]
 800607e:	2e00      	cmp	r6, #0
 8006080:	bfa2      	ittt	ge
 8006082:	6821      	ldrge	r1, [r4, #0]
 8006084:	f021 0104 	bicge.w	r1, r1, #4
 8006088:	6021      	strge	r1, [r4, #0]
 800608a:	b90d      	cbnz	r5, 8006090 <_printf_i+0x110>
 800608c:	2e00      	cmp	r6, #0
 800608e:	d04b      	beq.n	8006128 <_printf_i+0x1a8>
 8006090:	4616      	mov	r6, r2
 8006092:	fbb5 f1f3 	udiv	r1, r5, r3
 8006096:	fb03 5711 	mls	r7, r3, r1, r5
 800609a:	5dc7      	ldrb	r7, [r0, r7]
 800609c:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80060a0:	462f      	mov	r7, r5
 80060a2:	42bb      	cmp	r3, r7
 80060a4:	460d      	mov	r5, r1
 80060a6:	d9f4      	bls.n	8006092 <_printf_i+0x112>
 80060a8:	2b08      	cmp	r3, #8
 80060aa:	d10b      	bne.n	80060c4 <_printf_i+0x144>
 80060ac:	6823      	ldr	r3, [r4, #0]
 80060ae:	07df      	lsls	r7, r3, #31
 80060b0:	d508      	bpl.n	80060c4 <_printf_i+0x144>
 80060b2:	6923      	ldr	r3, [r4, #16]
 80060b4:	6861      	ldr	r1, [r4, #4]
 80060b6:	4299      	cmp	r1, r3
 80060b8:	bfde      	ittt	le
 80060ba:	2330      	movle	r3, #48	@ 0x30
 80060bc:	f806 3c01 	strble.w	r3, [r6, #-1]
 80060c0:	f106 36ff 	addle.w	r6, r6, #4294967295
 80060c4:	1b92      	subs	r2, r2, r6
 80060c6:	6122      	str	r2, [r4, #16]
 80060c8:	f8cd a000 	str.w	sl, [sp]
 80060cc:	464b      	mov	r3, r9
 80060ce:	aa03      	add	r2, sp, #12
 80060d0:	4621      	mov	r1, r4
 80060d2:	4640      	mov	r0, r8
 80060d4:	f7ff fee6 	bl	8005ea4 <_printf_common>
 80060d8:	3001      	adds	r0, #1
 80060da:	d14a      	bne.n	8006172 <_printf_i+0x1f2>
 80060dc:	f04f 30ff 	mov.w	r0, #4294967295
 80060e0:	b004      	add	sp, #16
 80060e2:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80060e6:	6823      	ldr	r3, [r4, #0]
 80060e8:	f043 0320 	orr.w	r3, r3, #32
 80060ec:	6023      	str	r3, [r4, #0]
 80060ee:	4833      	ldr	r0, [pc, #204]	@ (80061bc <_printf_i+0x23c>)
 80060f0:	2778      	movs	r7, #120	@ 0x78
 80060f2:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 80060f6:	6823      	ldr	r3, [r4, #0]
 80060f8:	6831      	ldr	r1, [r6, #0]
 80060fa:	061f      	lsls	r7, r3, #24
 80060fc:	f851 5b04 	ldr.w	r5, [r1], #4
 8006100:	d402      	bmi.n	8006108 <_printf_i+0x188>
 8006102:	065f      	lsls	r7, r3, #25
 8006104:	bf48      	it	mi
 8006106:	b2ad      	uxthmi	r5, r5
 8006108:	6031      	str	r1, [r6, #0]
 800610a:	07d9      	lsls	r1, r3, #31
 800610c:	bf44      	itt	mi
 800610e:	f043 0320 	orrmi.w	r3, r3, #32
 8006112:	6023      	strmi	r3, [r4, #0]
 8006114:	b11d      	cbz	r5, 800611e <_printf_i+0x19e>
 8006116:	2310      	movs	r3, #16
 8006118:	e7ac      	b.n	8006074 <_printf_i+0xf4>
 800611a:	4827      	ldr	r0, [pc, #156]	@ (80061b8 <_printf_i+0x238>)
 800611c:	e7e9      	b.n	80060f2 <_printf_i+0x172>
 800611e:	6823      	ldr	r3, [r4, #0]
 8006120:	f023 0320 	bic.w	r3, r3, #32
 8006124:	6023      	str	r3, [r4, #0]
 8006126:	e7f6      	b.n	8006116 <_printf_i+0x196>
 8006128:	4616      	mov	r6, r2
 800612a:	e7bd      	b.n	80060a8 <_printf_i+0x128>
 800612c:	6833      	ldr	r3, [r6, #0]
 800612e:	6825      	ldr	r5, [r4, #0]
 8006130:	6961      	ldr	r1, [r4, #20]
 8006132:	1d18      	adds	r0, r3, #4
 8006134:	6030      	str	r0, [r6, #0]
 8006136:	062e      	lsls	r6, r5, #24
 8006138:	681b      	ldr	r3, [r3, #0]
 800613a:	d501      	bpl.n	8006140 <_printf_i+0x1c0>
 800613c:	6019      	str	r1, [r3, #0]
 800613e:	e002      	b.n	8006146 <_printf_i+0x1c6>
 8006140:	0668      	lsls	r0, r5, #25
 8006142:	d5fb      	bpl.n	800613c <_printf_i+0x1bc>
 8006144:	8019      	strh	r1, [r3, #0]
 8006146:	2300      	movs	r3, #0
 8006148:	6123      	str	r3, [r4, #16]
 800614a:	4616      	mov	r6, r2
 800614c:	e7bc      	b.n	80060c8 <_printf_i+0x148>
 800614e:	6833      	ldr	r3, [r6, #0]
 8006150:	1d1a      	adds	r2, r3, #4
 8006152:	6032      	str	r2, [r6, #0]
 8006154:	681e      	ldr	r6, [r3, #0]
 8006156:	6862      	ldr	r2, [r4, #4]
 8006158:	2100      	movs	r1, #0
 800615a:	4630      	mov	r0, r6
 800615c:	f7fa f840 	bl	80001e0 <memchr>
 8006160:	b108      	cbz	r0, 8006166 <_printf_i+0x1e6>
 8006162:	1b80      	subs	r0, r0, r6
 8006164:	6060      	str	r0, [r4, #4]
 8006166:	6863      	ldr	r3, [r4, #4]
 8006168:	6123      	str	r3, [r4, #16]
 800616a:	2300      	movs	r3, #0
 800616c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006170:	e7aa      	b.n	80060c8 <_printf_i+0x148>
 8006172:	6923      	ldr	r3, [r4, #16]
 8006174:	4632      	mov	r2, r6
 8006176:	4649      	mov	r1, r9
 8006178:	4640      	mov	r0, r8
 800617a:	47d0      	blx	sl
 800617c:	3001      	adds	r0, #1
 800617e:	d0ad      	beq.n	80060dc <_printf_i+0x15c>
 8006180:	6823      	ldr	r3, [r4, #0]
 8006182:	079b      	lsls	r3, r3, #30
 8006184:	d413      	bmi.n	80061ae <_printf_i+0x22e>
 8006186:	68e0      	ldr	r0, [r4, #12]
 8006188:	9b03      	ldr	r3, [sp, #12]
 800618a:	4298      	cmp	r0, r3
 800618c:	bfb8      	it	lt
 800618e:	4618      	movlt	r0, r3
 8006190:	e7a6      	b.n	80060e0 <_printf_i+0x160>
 8006192:	2301      	movs	r3, #1
 8006194:	4632      	mov	r2, r6
 8006196:	4649      	mov	r1, r9
 8006198:	4640      	mov	r0, r8
 800619a:	47d0      	blx	sl
 800619c:	3001      	adds	r0, #1
 800619e:	d09d      	beq.n	80060dc <_printf_i+0x15c>
 80061a0:	3501      	adds	r5, #1
 80061a2:	68e3      	ldr	r3, [r4, #12]
 80061a4:	9903      	ldr	r1, [sp, #12]
 80061a6:	1a5b      	subs	r3, r3, r1
 80061a8:	42ab      	cmp	r3, r5
 80061aa:	dcf2      	bgt.n	8006192 <_printf_i+0x212>
 80061ac:	e7eb      	b.n	8006186 <_printf_i+0x206>
 80061ae:	2500      	movs	r5, #0
 80061b0:	f104 0619 	add.w	r6, r4, #25
 80061b4:	e7f5      	b.n	80061a2 <_printf_i+0x222>
 80061b6:	bf00      	nop
 80061b8:	080087c2 	.word	0x080087c2
 80061bc:	080087d3 	.word	0x080087d3

080061c0 <std>:
 80061c0:	2300      	movs	r3, #0
 80061c2:	b510      	push	{r4, lr}
 80061c4:	4604      	mov	r4, r0
 80061c6:	e9c0 3300 	strd	r3, r3, [r0]
 80061ca:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80061ce:	6083      	str	r3, [r0, #8]
 80061d0:	8181      	strh	r1, [r0, #12]
 80061d2:	6643      	str	r3, [r0, #100]	@ 0x64
 80061d4:	81c2      	strh	r2, [r0, #14]
 80061d6:	6183      	str	r3, [r0, #24]
 80061d8:	4619      	mov	r1, r3
 80061da:	2208      	movs	r2, #8
 80061dc:	305c      	adds	r0, #92	@ 0x5c
 80061de:	f000 f926 	bl	800642e <memset>
 80061e2:	4b0d      	ldr	r3, [pc, #52]	@ (8006218 <std+0x58>)
 80061e4:	6263      	str	r3, [r4, #36]	@ 0x24
 80061e6:	4b0d      	ldr	r3, [pc, #52]	@ (800621c <std+0x5c>)
 80061e8:	62a3      	str	r3, [r4, #40]	@ 0x28
 80061ea:	4b0d      	ldr	r3, [pc, #52]	@ (8006220 <std+0x60>)
 80061ec:	62e3      	str	r3, [r4, #44]	@ 0x2c
 80061ee:	4b0d      	ldr	r3, [pc, #52]	@ (8006224 <std+0x64>)
 80061f0:	6323      	str	r3, [r4, #48]	@ 0x30
 80061f2:	4b0d      	ldr	r3, [pc, #52]	@ (8006228 <std+0x68>)
 80061f4:	6224      	str	r4, [r4, #32]
 80061f6:	429c      	cmp	r4, r3
 80061f8:	d006      	beq.n	8006208 <std+0x48>
 80061fa:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 80061fe:	4294      	cmp	r4, r2
 8006200:	d002      	beq.n	8006208 <std+0x48>
 8006202:	33d0      	adds	r3, #208	@ 0xd0
 8006204:	429c      	cmp	r4, r3
 8006206:	d105      	bne.n	8006214 <std+0x54>
 8006208:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800620c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006210:	f000 b98a 	b.w	8006528 <__retarget_lock_init_recursive>
 8006214:	bd10      	pop	{r4, pc}
 8006216:	bf00      	nop
 8006218:	080063a9 	.word	0x080063a9
 800621c:	080063cb 	.word	0x080063cb
 8006220:	08006403 	.word	0x08006403
 8006224:	08006427 	.word	0x08006427
 8006228:	200003d0 	.word	0x200003d0

0800622c <stdio_exit_handler>:
 800622c:	4a02      	ldr	r2, [pc, #8]	@ (8006238 <stdio_exit_handler+0xc>)
 800622e:	4903      	ldr	r1, [pc, #12]	@ (800623c <stdio_exit_handler+0x10>)
 8006230:	4803      	ldr	r0, [pc, #12]	@ (8006240 <stdio_exit_handler+0x14>)
 8006232:	f000 b869 	b.w	8006308 <_fwalk_sglue>
 8006236:	bf00      	nop
 8006238:	20000010 	.word	0x20000010
 800623c:	08008109 	.word	0x08008109
 8006240:	20000020 	.word	0x20000020

08006244 <cleanup_stdio>:
 8006244:	6841      	ldr	r1, [r0, #4]
 8006246:	4b0c      	ldr	r3, [pc, #48]	@ (8006278 <cleanup_stdio+0x34>)
 8006248:	4299      	cmp	r1, r3
 800624a:	b510      	push	{r4, lr}
 800624c:	4604      	mov	r4, r0
 800624e:	d001      	beq.n	8006254 <cleanup_stdio+0x10>
 8006250:	f001 ff5a 	bl	8008108 <_fflush_r>
 8006254:	68a1      	ldr	r1, [r4, #8]
 8006256:	4b09      	ldr	r3, [pc, #36]	@ (800627c <cleanup_stdio+0x38>)
 8006258:	4299      	cmp	r1, r3
 800625a:	d002      	beq.n	8006262 <cleanup_stdio+0x1e>
 800625c:	4620      	mov	r0, r4
 800625e:	f001 ff53 	bl	8008108 <_fflush_r>
 8006262:	68e1      	ldr	r1, [r4, #12]
 8006264:	4b06      	ldr	r3, [pc, #24]	@ (8006280 <cleanup_stdio+0x3c>)
 8006266:	4299      	cmp	r1, r3
 8006268:	d004      	beq.n	8006274 <cleanup_stdio+0x30>
 800626a:	4620      	mov	r0, r4
 800626c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006270:	f001 bf4a 	b.w	8008108 <_fflush_r>
 8006274:	bd10      	pop	{r4, pc}
 8006276:	bf00      	nop
 8006278:	200003d0 	.word	0x200003d0
 800627c:	20000438 	.word	0x20000438
 8006280:	200004a0 	.word	0x200004a0

08006284 <global_stdio_init.part.0>:
 8006284:	b510      	push	{r4, lr}
 8006286:	4b0b      	ldr	r3, [pc, #44]	@ (80062b4 <global_stdio_init.part.0+0x30>)
 8006288:	4c0b      	ldr	r4, [pc, #44]	@ (80062b8 <global_stdio_init.part.0+0x34>)
 800628a:	4a0c      	ldr	r2, [pc, #48]	@ (80062bc <global_stdio_init.part.0+0x38>)
 800628c:	601a      	str	r2, [r3, #0]
 800628e:	4620      	mov	r0, r4
 8006290:	2200      	movs	r2, #0
 8006292:	2104      	movs	r1, #4
 8006294:	f7ff ff94 	bl	80061c0 <std>
 8006298:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 800629c:	2201      	movs	r2, #1
 800629e:	2109      	movs	r1, #9
 80062a0:	f7ff ff8e 	bl	80061c0 <std>
 80062a4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80062a8:	2202      	movs	r2, #2
 80062aa:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062ae:	2112      	movs	r1, #18
 80062b0:	f7ff bf86 	b.w	80061c0 <std>
 80062b4:	20000508 	.word	0x20000508
 80062b8:	200003d0 	.word	0x200003d0
 80062bc:	0800622d 	.word	0x0800622d

080062c0 <__sfp_lock_acquire>:
 80062c0:	4801      	ldr	r0, [pc, #4]	@ (80062c8 <__sfp_lock_acquire+0x8>)
 80062c2:	f000 b932 	b.w	800652a <__retarget_lock_acquire_recursive>
 80062c6:	bf00      	nop
 80062c8:	20000511 	.word	0x20000511

080062cc <__sfp_lock_release>:
 80062cc:	4801      	ldr	r0, [pc, #4]	@ (80062d4 <__sfp_lock_release+0x8>)
 80062ce:	f000 b92d 	b.w	800652c <__retarget_lock_release_recursive>
 80062d2:	bf00      	nop
 80062d4:	20000511 	.word	0x20000511

080062d8 <__sinit>:
 80062d8:	b510      	push	{r4, lr}
 80062da:	4604      	mov	r4, r0
 80062dc:	f7ff fff0 	bl	80062c0 <__sfp_lock_acquire>
 80062e0:	6a23      	ldr	r3, [r4, #32]
 80062e2:	b11b      	cbz	r3, 80062ec <__sinit+0x14>
 80062e4:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80062e8:	f7ff bff0 	b.w	80062cc <__sfp_lock_release>
 80062ec:	4b04      	ldr	r3, [pc, #16]	@ (8006300 <__sinit+0x28>)
 80062ee:	6223      	str	r3, [r4, #32]
 80062f0:	4b04      	ldr	r3, [pc, #16]	@ (8006304 <__sinit+0x2c>)
 80062f2:	681b      	ldr	r3, [r3, #0]
 80062f4:	2b00      	cmp	r3, #0
 80062f6:	d1f5      	bne.n	80062e4 <__sinit+0xc>
 80062f8:	f7ff ffc4 	bl	8006284 <global_stdio_init.part.0>
 80062fc:	e7f2      	b.n	80062e4 <__sinit+0xc>
 80062fe:	bf00      	nop
 8006300:	08006245 	.word	0x08006245
 8006304:	20000508 	.word	0x20000508

08006308 <_fwalk_sglue>:
 8006308:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800630c:	4607      	mov	r7, r0
 800630e:	4688      	mov	r8, r1
 8006310:	4614      	mov	r4, r2
 8006312:	2600      	movs	r6, #0
 8006314:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006318:	f1b9 0901 	subs.w	r9, r9, #1
 800631c:	d505      	bpl.n	800632a <_fwalk_sglue+0x22>
 800631e:	6824      	ldr	r4, [r4, #0]
 8006320:	2c00      	cmp	r4, #0
 8006322:	d1f7      	bne.n	8006314 <_fwalk_sglue+0xc>
 8006324:	4630      	mov	r0, r6
 8006326:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800632a:	89ab      	ldrh	r3, [r5, #12]
 800632c:	2b01      	cmp	r3, #1
 800632e:	d907      	bls.n	8006340 <_fwalk_sglue+0x38>
 8006330:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006334:	3301      	adds	r3, #1
 8006336:	d003      	beq.n	8006340 <_fwalk_sglue+0x38>
 8006338:	4629      	mov	r1, r5
 800633a:	4638      	mov	r0, r7
 800633c:	47c0      	blx	r8
 800633e:	4306      	orrs	r6, r0
 8006340:	3568      	adds	r5, #104	@ 0x68
 8006342:	e7e9      	b.n	8006318 <_fwalk_sglue+0x10>

08006344 <iprintf>:
 8006344:	b40f      	push	{r0, r1, r2, r3}
 8006346:	b507      	push	{r0, r1, r2, lr}
 8006348:	4906      	ldr	r1, [pc, #24]	@ (8006364 <iprintf+0x20>)
 800634a:	ab04      	add	r3, sp, #16
 800634c:	6808      	ldr	r0, [r1, #0]
 800634e:	f853 2b04 	ldr.w	r2, [r3], #4
 8006352:	6881      	ldr	r1, [r0, #8]
 8006354:	9301      	str	r3, [sp, #4]
 8006356:	f001 fd3b 	bl	8007dd0 <_vfiprintf_r>
 800635a:	b003      	add	sp, #12
 800635c:	f85d eb04 	ldr.w	lr, [sp], #4
 8006360:	b004      	add	sp, #16
 8006362:	4770      	bx	lr
 8006364:	2000001c 	.word	0x2000001c

08006368 <siprintf>:
 8006368:	b40e      	push	{r1, r2, r3}
 800636a:	b500      	push	{lr}
 800636c:	b09c      	sub	sp, #112	@ 0x70
 800636e:	ab1d      	add	r3, sp, #116	@ 0x74
 8006370:	9002      	str	r0, [sp, #8]
 8006372:	9006      	str	r0, [sp, #24]
 8006374:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006378:	4809      	ldr	r0, [pc, #36]	@ (80063a0 <siprintf+0x38>)
 800637a:	9107      	str	r1, [sp, #28]
 800637c:	9104      	str	r1, [sp, #16]
 800637e:	4909      	ldr	r1, [pc, #36]	@ (80063a4 <siprintf+0x3c>)
 8006380:	f853 2b04 	ldr.w	r2, [r3], #4
 8006384:	9105      	str	r1, [sp, #20]
 8006386:	6800      	ldr	r0, [r0, #0]
 8006388:	9301      	str	r3, [sp, #4]
 800638a:	a902      	add	r1, sp, #8
 800638c:	f001 fbfa 	bl	8007b84 <_svfiprintf_r>
 8006390:	9b02      	ldr	r3, [sp, #8]
 8006392:	2200      	movs	r2, #0
 8006394:	701a      	strb	r2, [r3, #0]
 8006396:	b01c      	add	sp, #112	@ 0x70
 8006398:	f85d eb04 	ldr.w	lr, [sp], #4
 800639c:	b003      	add	sp, #12
 800639e:	4770      	bx	lr
 80063a0:	2000001c 	.word	0x2000001c
 80063a4:	ffff0208 	.word	0xffff0208

080063a8 <__sread>:
 80063a8:	b510      	push	{r4, lr}
 80063aa:	460c      	mov	r4, r1
 80063ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063b0:	f000 f86c 	bl	800648c <_read_r>
 80063b4:	2800      	cmp	r0, #0
 80063b6:	bfab      	itete	ge
 80063b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80063ba:	89a3      	ldrhlt	r3, [r4, #12]
 80063bc:	181b      	addge	r3, r3, r0
 80063be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80063c2:	bfac      	ite	ge
 80063c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80063c6:	81a3      	strhlt	r3, [r4, #12]
 80063c8:	bd10      	pop	{r4, pc}

080063ca <__swrite>:
 80063ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80063ce:	461f      	mov	r7, r3
 80063d0:	898b      	ldrh	r3, [r1, #12]
 80063d2:	05db      	lsls	r3, r3, #23
 80063d4:	4605      	mov	r5, r0
 80063d6:	460c      	mov	r4, r1
 80063d8:	4616      	mov	r6, r2
 80063da:	d505      	bpl.n	80063e8 <__swrite+0x1e>
 80063dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80063e0:	2302      	movs	r3, #2
 80063e2:	2200      	movs	r2, #0
 80063e4:	f000 f840 	bl	8006468 <_lseek_r>
 80063e8:	89a3      	ldrh	r3, [r4, #12]
 80063ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80063ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80063f2:	81a3      	strh	r3, [r4, #12]
 80063f4:	4632      	mov	r2, r6
 80063f6:	463b      	mov	r3, r7
 80063f8:	4628      	mov	r0, r5
 80063fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80063fe:	f000 b857 	b.w	80064b0 <_write_r>

08006402 <__sseek>:
 8006402:	b510      	push	{r4, lr}
 8006404:	460c      	mov	r4, r1
 8006406:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800640a:	f000 f82d 	bl	8006468 <_lseek_r>
 800640e:	1c43      	adds	r3, r0, #1
 8006410:	89a3      	ldrh	r3, [r4, #12]
 8006412:	bf15      	itete	ne
 8006414:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006416:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800641a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800641e:	81a3      	strheq	r3, [r4, #12]
 8006420:	bf18      	it	ne
 8006422:	81a3      	strhne	r3, [r4, #12]
 8006424:	bd10      	pop	{r4, pc}

08006426 <__sclose>:
 8006426:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800642a:	f000 b80d 	b.w	8006448 <_close_r>

0800642e <memset>:
 800642e:	4402      	add	r2, r0
 8006430:	4603      	mov	r3, r0
 8006432:	4293      	cmp	r3, r2
 8006434:	d100      	bne.n	8006438 <memset+0xa>
 8006436:	4770      	bx	lr
 8006438:	f803 1b01 	strb.w	r1, [r3], #1
 800643c:	e7f9      	b.n	8006432 <memset+0x4>
	...

08006440 <_localeconv_r>:
 8006440:	4800      	ldr	r0, [pc, #0]	@ (8006444 <_localeconv_r+0x4>)
 8006442:	4770      	bx	lr
 8006444:	2000015c 	.word	0x2000015c

08006448 <_close_r>:
 8006448:	b538      	push	{r3, r4, r5, lr}
 800644a:	4d06      	ldr	r5, [pc, #24]	@ (8006464 <_close_r+0x1c>)
 800644c:	2300      	movs	r3, #0
 800644e:	4604      	mov	r4, r0
 8006450:	4608      	mov	r0, r1
 8006452:	602b      	str	r3, [r5, #0]
 8006454:	f7fb fa84 	bl	8001960 <_close>
 8006458:	1c43      	adds	r3, r0, #1
 800645a:	d102      	bne.n	8006462 <_close_r+0x1a>
 800645c:	682b      	ldr	r3, [r5, #0]
 800645e:	b103      	cbz	r3, 8006462 <_close_r+0x1a>
 8006460:	6023      	str	r3, [r4, #0]
 8006462:	bd38      	pop	{r3, r4, r5, pc}
 8006464:	2000050c 	.word	0x2000050c

08006468 <_lseek_r>:
 8006468:	b538      	push	{r3, r4, r5, lr}
 800646a:	4d07      	ldr	r5, [pc, #28]	@ (8006488 <_lseek_r+0x20>)
 800646c:	4604      	mov	r4, r0
 800646e:	4608      	mov	r0, r1
 8006470:	4611      	mov	r1, r2
 8006472:	2200      	movs	r2, #0
 8006474:	602a      	str	r2, [r5, #0]
 8006476:	461a      	mov	r2, r3
 8006478:	f7fb fa99 	bl	80019ae <_lseek>
 800647c:	1c43      	adds	r3, r0, #1
 800647e:	d102      	bne.n	8006486 <_lseek_r+0x1e>
 8006480:	682b      	ldr	r3, [r5, #0]
 8006482:	b103      	cbz	r3, 8006486 <_lseek_r+0x1e>
 8006484:	6023      	str	r3, [r4, #0]
 8006486:	bd38      	pop	{r3, r4, r5, pc}
 8006488:	2000050c 	.word	0x2000050c

0800648c <_read_r>:
 800648c:	b538      	push	{r3, r4, r5, lr}
 800648e:	4d07      	ldr	r5, [pc, #28]	@ (80064ac <_read_r+0x20>)
 8006490:	4604      	mov	r4, r0
 8006492:	4608      	mov	r0, r1
 8006494:	4611      	mov	r1, r2
 8006496:	2200      	movs	r2, #0
 8006498:	602a      	str	r2, [r5, #0]
 800649a:	461a      	mov	r2, r3
 800649c:	f7fb fa27 	bl	80018ee <_read>
 80064a0:	1c43      	adds	r3, r0, #1
 80064a2:	d102      	bne.n	80064aa <_read_r+0x1e>
 80064a4:	682b      	ldr	r3, [r5, #0]
 80064a6:	b103      	cbz	r3, 80064aa <_read_r+0x1e>
 80064a8:	6023      	str	r3, [r4, #0]
 80064aa:	bd38      	pop	{r3, r4, r5, pc}
 80064ac:	2000050c 	.word	0x2000050c

080064b0 <_write_r>:
 80064b0:	b538      	push	{r3, r4, r5, lr}
 80064b2:	4d07      	ldr	r5, [pc, #28]	@ (80064d0 <_write_r+0x20>)
 80064b4:	4604      	mov	r4, r0
 80064b6:	4608      	mov	r0, r1
 80064b8:	4611      	mov	r1, r2
 80064ba:	2200      	movs	r2, #0
 80064bc:	602a      	str	r2, [r5, #0]
 80064be:	461a      	mov	r2, r3
 80064c0:	f7fb fa32 	bl	8001928 <_write>
 80064c4:	1c43      	adds	r3, r0, #1
 80064c6:	d102      	bne.n	80064ce <_write_r+0x1e>
 80064c8:	682b      	ldr	r3, [r5, #0]
 80064ca:	b103      	cbz	r3, 80064ce <_write_r+0x1e>
 80064cc:	6023      	str	r3, [r4, #0]
 80064ce:	bd38      	pop	{r3, r4, r5, pc}
 80064d0:	2000050c 	.word	0x2000050c

080064d4 <__errno>:
 80064d4:	4b01      	ldr	r3, [pc, #4]	@ (80064dc <__errno+0x8>)
 80064d6:	6818      	ldr	r0, [r3, #0]
 80064d8:	4770      	bx	lr
 80064da:	bf00      	nop
 80064dc:	2000001c 	.word	0x2000001c

080064e0 <__libc_init_array>:
 80064e0:	b570      	push	{r4, r5, r6, lr}
 80064e2:	4d0d      	ldr	r5, [pc, #52]	@ (8006518 <__libc_init_array+0x38>)
 80064e4:	4c0d      	ldr	r4, [pc, #52]	@ (800651c <__libc_init_array+0x3c>)
 80064e6:	1b64      	subs	r4, r4, r5
 80064e8:	10a4      	asrs	r4, r4, #2
 80064ea:	2600      	movs	r6, #0
 80064ec:	42a6      	cmp	r6, r4
 80064ee:	d109      	bne.n	8006504 <__libc_init_array+0x24>
 80064f0:	4d0b      	ldr	r5, [pc, #44]	@ (8006520 <__libc_init_array+0x40>)
 80064f2:	4c0c      	ldr	r4, [pc, #48]	@ (8006524 <__libc_init_array+0x44>)
 80064f4:	f002 f866 	bl	80085c4 <_init>
 80064f8:	1b64      	subs	r4, r4, r5
 80064fa:	10a4      	asrs	r4, r4, #2
 80064fc:	2600      	movs	r6, #0
 80064fe:	42a6      	cmp	r6, r4
 8006500:	d105      	bne.n	800650e <__libc_init_array+0x2e>
 8006502:	bd70      	pop	{r4, r5, r6, pc}
 8006504:	f855 3b04 	ldr.w	r3, [r5], #4
 8006508:	4798      	blx	r3
 800650a:	3601      	adds	r6, #1
 800650c:	e7ee      	b.n	80064ec <__libc_init_array+0xc>
 800650e:	f855 3b04 	ldr.w	r3, [r5], #4
 8006512:	4798      	blx	r3
 8006514:	3601      	adds	r6, #1
 8006516:	e7f2      	b.n	80064fe <__libc_init_array+0x1e>
 8006518:	08008b28 	.word	0x08008b28
 800651c:	08008b28 	.word	0x08008b28
 8006520:	08008b28 	.word	0x08008b28
 8006524:	08008b2c 	.word	0x08008b2c

08006528 <__retarget_lock_init_recursive>:
 8006528:	4770      	bx	lr

0800652a <__retarget_lock_acquire_recursive>:
 800652a:	4770      	bx	lr

0800652c <__retarget_lock_release_recursive>:
 800652c:	4770      	bx	lr

0800652e <quorem>:
 800652e:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006532:	6903      	ldr	r3, [r0, #16]
 8006534:	690c      	ldr	r4, [r1, #16]
 8006536:	42a3      	cmp	r3, r4
 8006538:	4607      	mov	r7, r0
 800653a:	db7e      	blt.n	800663a <quorem+0x10c>
 800653c:	3c01      	subs	r4, #1
 800653e:	f101 0814 	add.w	r8, r1, #20
 8006542:	00a3      	lsls	r3, r4, #2
 8006544:	f100 0514 	add.w	r5, r0, #20
 8006548:	9300      	str	r3, [sp, #0]
 800654a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800654e:	9301      	str	r3, [sp, #4]
 8006550:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006554:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006558:	3301      	adds	r3, #1
 800655a:	429a      	cmp	r2, r3
 800655c:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006560:	fbb2 f6f3 	udiv	r6, r2, r3
 8006564:	d32e      	bcc.n	80065c4 <quorem+0x96>
 8006566:	f04f 0a00 	mov.w	sl, #0
 800656a:	46c4      	mov	ip, r8
 800656c:	46ae      	mov	lr, r5
 800656e:	46d3      	mov	fp, sl
 8006570:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006574:	b298      	uxth	r0, r3
 8006576:	fb06 a000 	mla	r0, r6, r0, sl
 800657a:	0c02      	lsrs	r2, r0, #16
 800657c:	0c1b      	lsrs	r3, r3, #16
 800657e:	fb06 2303 	mla	r3, r6, r3, r2
 8006582:	f8de 2000 	ldr.w	r2, [lr]
 8006586:	b280      	uxth	r0, r0
 8006588:	b292      	uxth	r2, r2
 800658a:	1a12      	subs	r2, r2, r0
 800658c:	445a      	add	r2, fp
 800658e:	f8de 0000 	ldr.w	r0, [lr]
 8006592:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006596:	b29b      	uxth	r3, r3
 8006598:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 800659c:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 80065a0:	b292      	uxth	r2, r2
 80065a2:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 80065a6:	45e1      	cmp	r9, ip
 80065a8:	f84e 2b04 	str.w	r2, [lr], #4
 80065ac:	ea4f 4b23 	mov.w	fp, r3, asr #16
 80065b0:	d2de      	bcs.n	8006570 <quorem+0x42>
 80065b2:	9b00      	ldr	r3, [sp, #0]
 80065b4:	58eb      	ldr	r3, [r5, r3]
 80065b6:	b92b      	cbnz	r3, 80065c4 <quorem+0x96>
 80065b8:	9b01      	ldr	r3, [sp, #4]
 80065ba:	3b04      	subs	r3, #4
 80065bc:	429d      	cmp	r5, r3
 80065be:	461a      	mov	r2, r3
 80065c0:	d32f      	bcc.n	8006622 <quorem+0xf4>
 80065c2:	613c      	str	r4, [r7, #16]
 80065c4:	4638      	mov	r0, r7
 80065c6:	f001 f979 	bl	80078bc <__mcmp>
 80065ca:	2800      	cmp	r0, #0
 80065cc:	db25      	blt.n	800661a <quorem+0xec>
 80065ce:	4629      	mov	r1, r5
 80065d0:	2000      	movs	r0, #0
 80065d2:	f858 2b04 	ldr.w	r2, [r8], #4
 80065d6:	f8d1 c000 	ldr.w	ip, [r1]
 80065da:	fa1f fe82 	uxth.w	lr, r2
 80065de:	fa1f f38c 	uxth.w	r3, ip
 80065e2:	eba3 030e 	sub.w	r3, r3, lr
 80065e6:	4403      	add	r3, r0
 80065e8:	0c12      	lsrs	r2, r2, #16
 80065ea:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 80065ee:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 80065f2:	b29b      	uxth	r3, r3
 80065f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80065f8:	45c1      	cmp	r9, r8
 80065fa:	f841 3b04 	str.w	r3, [r1], #4
 80065fe:	ea4f 4022 	mov.w	r0, r2, asr #16
 8006602:	d2e6      	bcs.n	80065d2 <quorem+0xa4>
 8006604:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006608:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800660c:	b922      	cbnz	r2, 8006618 <quorem+0xea>
 800660e:	3b04      	subs	r3, #4
 8006610:	429d      	cmp	r5, r3
 8006612:	461a      	mov	r2, r3
 8006614:	d30b      	bcc.n	800662e <quorem+0x100>
 8006616:	613c      	str	r4, [r7, #16]
 8006618:	3601      	adds	r6, #1
 800661a:	4630      	mov	r0, r6
 800661c:	b003      	add	sp, #12
 800661e:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006622:	6812      	ldr	r2, [r2, #0]
 8006624:	3b04      	subs	r3, #4
 8006626:	2a00      	cmp	r2, #0
 8006628:	d1cb      	bne.n	80065c2 <quorem+0x94>
 800662a:	3c01      	subs	r4, #1
 800662c:	e7c6      	b.n	80065bc <quorem+0x8e>
 800662e:	6812      	ldr	r2, [r2, #0]
 8006630:	3b04      	subs	r3, #4
 8006632:	2a00      	cmp	r2, #0
 8006634:	d1ef      	bne.n	8006616 <quorem+0xe8>
 8006636:	3c01      	subs	r4, #1
 8006638:	e7ea      	b.n	8006610 <quorem+0xe2>
 800663a:	2000      	movs	r0, #0
 800663c:	e7ee      	b.n	800661c <quorem+0xee>
	...

08006640 <_dtoa_r>:
 8006640:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006644:	69c7      	ldr	r7, [r0, #28]
 8006646:	b099      	sub	sp, #100	@ 0x64
 8006648:	ed8d 0b02 	vstr	d0, [sp, #8]
 800664c:	ec55 4b10 	vmov	r4, r5, d0
 8006650:	9e22      	ldr	r6, [sp, #136]	@ 0x88
 8006652:	9109      	str	r1, [sp, #36]	@ 0x24
 8006654:	4683      	mov	fp, r0
 8006656:	920e      	str	r2, [sp, #56]	@ 0x38
 8006658:	9313      	str	r3, [sp, #76]	@ 0x4c
 800665a:	b97f      	cbnz	r7, 800667c <_dtoa_r+0x3c>
 800665c:	2010      	movs	r0, #16
 800665e:	f000 fdfd 	bl	800725c <malloc>
 8006662:	4602      	mov	r2, r0
 8006664:	f8cb 001c 	str.w	r0, [fp, #28]
 8006668:	b920      	cbnz	r0, 8006674 <_dtoa_r+0x34>
 800666a:	4ba7      	ldr	r3, [pc, #668]	@ (8006908 <_dtoa_r+0x2c8>)
 800666c:	21ef      	movs	r1, #239	@ 0xef
 800666e:	48a7      	ldr	r0, [pc, #668]	@ (800690c <_dtoa_r+0x2cc>)
 8006670:	f001 fe3e 	bl	80082f0 <__assert_func>
 8006674:	e9c0 7701 	strd	r7, r7, [r0, #4]
 8006678:	6007      	str	r7, [r0, #0]
 800667a:	60c7      	str	r7, [r0, #12]
 800667c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006680:	6819      	ldr	r1, [r3, #0]
 8006682:	b159      	cbz	r1, 800669c <_dtoa_r+0x5c>
 8006684:	685a      	ldr	r2, [r3, #4]
 8006686:	604a      	str	r2, [r1, #4]
 8006688:	2301      	movs	r3, #1
 800668a:	4093      	lsls	r3, r2
 800668c:	608b      	str	r3, [r1, #8]
 800668e:	4658      	mov	r0, fp
 8006690:	f000 feda 	bl	8007448 <_Bfree>
 8006694:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006698:	2200      	movs	r2, #0
 800669a:	601a      	str	r2, [r3, #0]
 800669c:	1e2b      	subs	r3, r5, #0
 800669e:	bfb9      	ittee	lt
 80066a0:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 80066a4:	9303      	strlt	r3, [sp, #12]
 80066a6:	2300      	movge	r3, #0
 80066a8:	6033      	strge	r3, [r6, #0]
 80066aa:	9f03      	ldr	r7, [sp, #12]
 80066ac:	4b98      	ldr	r3, [pc, #608]	@ (8006910 <_dtoa_r+0x2d0>)
 80066ae:	bfbc      	itt	lt
 80066b0:	2201      	movlt	r2, #1
 80066b2:	6032      	strlt	r2, [r6, #0]
 80066b4:	43bb      	bics	r3, r7
 80066b6:	d112      	bne.n	80066de <_dtoa_r+0x9e>
 80066b8:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80066ba:	f242 730f 	movw	r3, #9999	@ 0x270f
 80066be:	6013      	str	r3, [r2, #0]
 80066c0:	f3c7 0313 	ubfx	r3, r7, #0, #20
 80066c4:	4323      	orrs	r3, r4
 80066c6:	f000 854d 	beq.w	8007164 <_dtoa_r+0xb24>
 80066ca:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80066cc:	f8df a254 	ldr.w	sl, [pc, #596]	@ 8006924 <_dtoa_r+0x2e4>
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	f000 854f 	beq.w	8007174 <_dtoa_r+0xb34>
 80066d6:	f10a 0303 	add.w	r3, sl, #3
 80066da:	f000 bd49 	b.w	8007170 <_dtoa_r+0xb30>
 80066de:	ed9d 7b02 	vldr	d7, [sp, #8]
 80066e2:	2200      	movs	r2, #0
 80066e4:	ec51 0b17 	vmov	r0, r1, d7
 80066e8:	2300      	movs	r3, #0
 80066ea:	ed8d 7b0c 	vstr	d7, [sp, #48]	@ 0x30
 80066ee:	f7fa f9f3 	bl	8000ad8 <__aeabi_dcmpeq>
 80066f2:	4680      	mov	r8, r0
 80066f4:	b158      	cbz	r0, 800670e <_dtoa_r+0xce>
 80066f6:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 80066f8:	2301      	movs	r3, #1
 80066fa:	6013      	str	r3, [r2, #0]
 80066fc:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 80066fe:	b113      	cbz	r3, 8006706 <_dtoa_r+0xc6>
 8006700:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8006702:	4b84      	ldr	r3, [pc, #528]	@ (8006914 <_dtoa_r+0x2d4>)
 8006704:	6013      	str	r3, [r2, #0]
 8006706:	f8df a220 	ldr.w	sl, [pc, #544]	@ 8006928 <_dtoa_r+0x2e8>
 800670a:	f000 bd33 	b.w	8007174 <_dtoa_r+0xb34>
 800670e:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8006712:	aa16      	add	r2, sp, #88	@ 0x58
 8006714:	a917      	add	r1, sp, #92	@ 0x5c
 8006716:	4658      	mov	r0, fp
 8006718:	f001 f980 	bl	8007a1c <__d2b>
 800671c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8006720:	4681      	mov	r9, r0
 8006722:	2e00      	cmp	r6, #0
 8006724:	d077      	beq.n	8006816 <_dtoa_r+0x1d6>
 8006726:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006728:	f8cd 8050 	str.w	r8, [sp, #80]	@ 0x50
 800672c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006730:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006734:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8006738:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800673c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 8006740:	4619      	mov	r1, r3
 8006742:	2200      	movs	r2, #0
 8006744:	4b74      	ldr	r3, [pc, #464]	@ (8006918 <_dtoa_r+0x2d8>)
 8006746:	f7f9 fda7 	bl	8000298 <__aeabi_dsub>
 800674a:	a369      	add	r3, pc, #420	@ (adr r3, 80068f0 <_dtoa_r+0x2b0>)
 800674c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8006750:	f7f9 ff5a 	bl	8000608 <__aeabi_dmul>
 8006754:	a368      	add	r3, pc, #416	@ (adr r3, 80068f8 <_dtoa_r+0x2b8>)
 8006756:	e9d3 2300 	ldrd	r2, r3, [r3]
 800675a:	f7f9 fd9f 	bl	800029c <__adddf3>
 800675e:	4604      	mov	r4, r0
 8006760:	4630      	mov	r0, r6
 8006762:	460d      	mov	r5, r1
 8006764:	f7f9 fee6 	bl	8000534 <__aeabi_i2d>
 8006768:	a365      	add	r3, pc, #404	@ (adr r3, 8006900 <_dtoa_r+0x2c0>)
 800676a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800676e:	f7f9 ff4b 	bl	8000608 <__aeabi_dmul>
 8006772:	4602      	mov	r2, r0
 8006774:	460b      	mov	r3, r1
 8006776:	4620      	mov	r0, r4
 8006778:	4629      	mov	r1, r5
 800677a:	f7f9 fd8f 	bl	800029c <__adddf3>
 800677e:	4604      	mov	r4, r0
 8006780:	460d      	mov	r5, r1
 8006782:	f7fa f9f1 	bl	8000b68 <__aeabi_d2iz>
 8006786:	2200      	movs	r2, #0
 8006788:	4607      	mov	r7, r0
 800678a:	2300      	movs	r3, #0
 800678c:	4620      	mov	r0, r4
 800678e:	4629      	mov	r1, r5
 8006790:	f7fa f9ac 	bl	8000aec <__aeabi_dcmplt>
 8006794:	b140      	cbz	r0, 80067a8 <_dtoa_r+0x168>
 8006796:	4638      	mov	r0, r7
 8006798:	f7f9 fecc 	bl	8000534 <__aeabi_i2d>
 800679c:	4622      	mov	r2, r4
 800679e:	462b      	mov	r3, r5
 80067a0:	f7fa f99a 	bl	8000ad8 <__aeabi_dcmpeq>
 80067a4:	b900      	cbnz	r0, 80067a8 <_dtoa_r+0x168>
 80067a6:	3f01      	subs	r7, #1
 80067a8:	2f16      	cmp	r7, #22
 80067aa:	d851      	bhi.n	8006850 <_dtoa_r+0x210>
 80067ac:	4b5b      	ldr	r3, [pc, #364]	@ (800691c <_dtoa_r+0x2dc>)
 80067ae:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80067b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80067b6:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80067ba:	f7fa f997 	bl	8000aec <__aeabi_dcmplt>
 80067be:	2800      	cmp	r0, #0
 80067c0:	d048      	beq.n	8006854 <_dtoa_r+0x214>
 80067c2:	3f01      	subs	r7, #1
 80067c4:	2300      	movs	r3, #0
 80067c6:	9312      	str	r3, [sp, #72]	@ 0x48
 80067c8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 80067ca:	1b9b      	subs	r3, r3, r6
 80067cc:	1e5a      	subs	r2, r3, #1
 80067ce:	bf44      	itt	mi
 80067d0:	f1c3 0801 	rsbmi	r8, r3, #1
 80067d4:	2300      	movmi	r3, #0
 80067d6:	9208      	str	r2, [sp, #32]
 80067d8:	bf54      	ite	pl
 80067da:	f04f 0800 	movpl.w	r8, #0
 80067de:	9308      	strmi	r3, [sp, #32]
 80067e0:	2f00      	cmp	r7, #0
 80067e2:	db39      	blt.n	8006858 <_dtoa_r+0x218>
 80067e4:	9b08      	ldr	r3, [sp, #32]
 80067e6:	970f      	str	r7, [sp, #60]	@ 0x3c
 80067e8:	443b      	add	r3, r7
 80067ea:	9308      	str	r3, [sp, #32]
 80067ec:	2300      	movs	r3, #0
 80067ee:	930a      	str	r3, [sp, #40]	@ 0x28
 80067f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80067f2:	2b09      	cmp	r3, #9
 80067f4:	d864      	bhi.n	80068c0 <_dtoa_r+0x280>
 80067f6:	2b05      	cmp	r3, #5
 80067f8:	bfc4      	itt	gt
 80067fa:	3b04      	subgt	r3, #4
 80067fc:	9309      	strgt	r3, [sp, #36]	@ 0x24
 80067fe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006800:	f1a3 0302 	sub.w	r3, r3, #2
 8006804:	bfcc      	ite	gt
 8006806:	2400      	movgt	r4, #0
 8006808:	2401      	movle	r4, #1
 800680a:	2b03      	cmp	r3, #3
 800680c:	d863      	bhi.n	80068d6 <_dtoa_r+0x296>
 800680e:	e8df f003 	tbb	[pc, r3]
 8006812:	372a      	.short	0x372a
 8006814:	5535      	.short	0x5535
 8006816:	e9dd 6316 	ldrd	r6, r3, [sp, #88]	@ 0x58
 800681a:	441e      	add	r6, r3
 800681c:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8006820:	2b20      	cmp	r3, #32
 8006822:	bfc1      	itttt	gt
 8006824:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8006828:	409f      	lslgt	r7, r3
 800682a:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 800682e:	fa24 f303 	lsrgt.w	r3, r4, r3
 8006832:	bfd6      	itet	le
 8006834:	f1c3 0320 	rsble	r3, r3, #32
 8006838:	ea47 0003 	orrgt.w	r0, r7, r3
 800683c:	fa04 f003 	lslle.w	r0, r4, r3
 8006840:	f7f9 fe68 	bl	8000514 <__aeabi_ui2d>
 8006844:	2201      	movs	r2, #1
 8006846:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 800684a:	3e01      	subs	r6, #1
 800684c:	9214      	str	r2, [sp, #80]	@ 0x50
 800684e:	e777      	b.n	8006740 <_dtoa_r+0x100>
 8006850:	2301      	movs	r3, #1
 8006852:	e7b8      	b.n	80067c6 <_dtoa_r+0x186>
 8006854:	9012      	str	r0, [sp, #72]	@ 0x48
 8006856:	e7b7      	b.n	80067c8 <_dtoa_r+0x188>
 8006858:	427b      	negs	r3, r7
 800685a:	930a      	str	r3, [sp, #40]	@ 0x28
 800685c:	2300      	movs	r3, #0
 800685e:	eba8 0807 	sub.w	r8, r8, r7
 8006862:	930f      	str	r3, [sp, #60]	@ 0x3c
 8006864:	e7c4      	b.n	80067f0 <_dtoa_r+0x1b0>
 8006866:	2300      	movs	r3, #0
 8006868:	930b      	str	r3, [sp, #44]	@ 0x2c
 800686a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800686c:	2b00      	cmp	r3, #0
 800686e:	dc35      	bgt.n	80068dc <_dtoa_r+0x29c>
 8006870:	2301      	movs	r3, #1
 8006872:	9300      	str	r3, [sp, #0]
 8006874:	9307      	str	r3, [sp, #28]
 8006876:	461a      	mov	r2, r3
 8006878:	920e      	str	r2, [sp, #56]	@ 0x38
 800687a:	e00b      	b.n	8006894 <_dtoa_r+0x254>
 800687c:	2301      	movs	r3, #1
 800687e:	e7f3      	b.n	8006868 <_dtoa_r+0x228>
 8006880:	2300      	movs	r3, #0
 8006882:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006884:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006886:	18fb      	adds	r3, r7, r3
 8006888:	9300      	str	r3, [sp, #0]
 800688a:	3301      	adds	r3, #1
 800688c:	2b01      	cmp	r3, #1
 800688e:	9307      	str	r3, [sp, #28]
 8006890:	bfb8      	it	lt
 8006892:	2301      	movlt	r3, #1
 8006894:	f8db 001c 	ldr.w	r0, [fp, #28]
 8006898:	2100      	movs	r1, #0
 800689a:	2204      	movs	r2, #4
 800689c:	f102 0514 	add.w	r5, r2, #20
 80068a0:	429d      	cmp	r5, r3
 80068a2:	d91f      	bls.n	80068e4 <_dtoa_r+0x2a4>
 80068a4:	6041      	str	r1, [r0, #4]
 80068a6:	4658      	mov	r0, fp
 80068a8:	f000 fd8e 	bl	80073c8 <_Balloc>
 80068ac:	4682      	mov	sl, r0
 80068ae:	2800      	cmp	r0, #0
 80068b0:	d13c      	bne.n	800692c <_dtoa_r+0x2ec>
 80068b2:	4b1b      	ldr	r3, [pc, #108]	@ (8006920 <_dtoa_r+0x2e0>)
 80068b4:	4602      	mov	r2, r0
 80068b6:	f240 11af 	movw	r1, #431	@ 0x1af
 80068ba:	e6d8      	b.n	800666e <_dtoa_r+0x2e>
 80068bc:	2301      	movs	r3, #1
 80068be:	e7e0      	b.n	8006882 <_dtoa_r+0x242>
 80068c0:	2401      	movs	r4, #1
 80068c2:	2300      	movs	r3, #0
 80068c4:	9309      	str	r3, [sp, #36]	@ 0x24
 80068c6:	940b      	str	r4, [sp, #44]	@ 0x2c
 80068c8:	f04f 33ff 	mov.w	r3, #4294967295
 80068cc:	9300      	str	r3, [sp, #0]
 80068ce:	9307      	str	r3, [sp, #28]
 80068d0:	2200      	movs	r2, #0
 80068d2:	2312      	movs	r3, #18
 80068d4:	e7d0      	b.n	8006878 <_dtoa_r+0x238>
 80068d6:	2301      	movs	r3, #1
 80068d8:	930b      	str	r3, [sp, #44]	@ 0x2c
 80068da:	e7f5      	b.n	80068c8 <_dtoa_r+0x288>
 80068dc:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 80068de:	9300      	str	r3, [sp, #0]
 80068e0:	9307      	str	r3, [sp, #28]
 80068e2:	e7d7      	b.n	8006894 <_dtoa_r+0x254>
 80068e4:	3101      	adds	r1, #1
 80068e6:	0052      	lsls	r2, r2, #1
 80068e8:	e7d8      	b.n	800689c <_dtoa_r+0x25c>
 80068ea:	bf00      	nop
 80068ec:	f3af 8000 	nop.w
 80068f0:	636f4361 	.word	0x636f4361
 80068f4:	3fd287a7 	.word	0x3fd287a7
 80068f8:	8b60c8b3 	.word	0x8b60c8b3
 80068fc:	3fc68a28 	.word	0x3fc68a28
 8006900:	509f79fb 	.word	0x509f79fb
 8006904:	3fd34413 	.word	0x3fd34413
 8006908:	080087f1 	.word	0x080087f1
 800690c:	08008808 	.word	0x08008808
 8006910:	7ff00000 	.word	0x7ff00000
 8006914:	080087c1 	.word	0x080087c1
 8006918:	3ff80000 	.word	0x3ff80000
 800691c:	08008900 	.word	0x08008900
 8006920:	08008860 	.word	0x08008860
 8006924:	080087ed 	.word	0x080087ed
 8006928:	080087c0 	.word	0x080087c0
 800692c:	f8db 301c 	ldr.w	r3, [fp, #28]
 8006930:	6018      	str	r0, [r3, #0]
 8006932:	9b07      	ldr	r3, [sp, #28]
 8006934:	2b0e      	cmp	r3, #14
 8006936:	f200 80a4 	bhi.w	8006a82 <_dtoa_r+0x442>
 800693a:	2c00      	cmp	r4, #0
 800693c:	f000 80a1 	beq.w	8006a82 <_dtoa_r+0x442>
 8006940:	2f00      	cmp	r7, #0
 8006942:	dd33      	ble.n	80069ac <_dtoa_r+0x36c>
 8006944:	4bad      	ldr	r3, [pc, #692]	@ (8006bfc <_dtoa_r+0x5bc>)
 8006946:	f007 020f 	and.w	r2, r7, #15
 800694a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800694e:	ed93 7b00 	vldr	d7, [r3]
 8006952:	05f8      	lsls	r0, r7, #23
 8006954:	ed8d 7b04 	vstr	d7, [sp, #16]
 8006958:	ea4f 1427 	mov.w	r4, r7, asr #4
 800695c:	d516      	bpl.n	800698c <_dtoa_r+0x34c>
 800695e:	4ba8      	ldr	r3, [pc, #672]	@ (8006c00 <_dtoa_r+0x5c0>)
 8006960:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8006964:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8006968:	f7f9 ff78 	bl	800085c <__aeabi_ddiv>
 800696c:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006970:	f004 040f 	and.w	r4, r4, #15
 8006974:	2603      	movs	r6, #3
 8006976:	4da2      	ldr	r5, [pc, #648]	@ (8006c00 <_dtoa_r+0x5c0>)
 8006978:	b954      	cbnz	r4, 8006990 <_dtoa_r+0x350>
 800697a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800697e:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006982:	f7f9 ff6b 	bl	800085c <__aeabi_ddiv>
 8006986:	e9cd 0102 	strd	r0, r1, [sp, #8]
 800698a:	e028      	b.n	80069de <_dtoa_r+0x39e>
 800698c:	2602      	movs	r6, #2
 800698e:	e7f2      	b.n	8006976 <_dtoa_r+0x336>
 8006990:	07e1      	lsls	r1, r4, #31
 8006992:	d508      	bpl.n	80069a6 <_dtoa_r+0x366>
 8006994:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8006998:	e9d5 2300 	ldrd	r2, r3, [r5]
 800699c:	f7f9 fe34 	bl	8000608 <__aeabi_dmul>
 80069a0:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80069a4:	3601      	adds	r6, #1
 80069a6:	1064      	asrs	r4, r4, #1
 80069a8:	3508      	adds	r5, #8
 80069aa:	e7e5      	b.n	8006978 <_dtoa_r+0x338>
 80069ac:	f000 80d2 	beq.w	8006b54 <_dtoa_r+0x514>
 80069b0:	427c      	negs	r4, r7
 80069b2:	4b92      	ldr	r3, [pc, #584]	@ (8006bfc <_dtoa_r+0x5bc>)
 80069b4:	4d92      	ldr	r5, [pc, #584]	@ (8006c00 <_dtoa_r+0x5c0>)
 80069b6:	f004 020f 	and.w	r2, r4, #15
 80069ba:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80069be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80069c2:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80069c6:	f7f9 fe1f 	bl	8000608 <__aeabi_dmul>
 80069ca:	e9cd 0102 	strd	r0, r1, [sp, #8]
 80069ce:	1124      	asrs	r4, r4, #4
 80069d0:	2300      	movs	r3, #0
 80069d2:	2602      	movs	r6, #2
 80069d4:	2c00      	cmp	r4, #0
 80069d6:	f040 80b2 	bne.w	8006b3e <_dtoa_r+0x4fe>
 80069da:	2b00      	cmp	r3, #0
 80069dc:	d1d3      	bne.n	8006986 <_dtoa_r+0x346>
 80069de:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80069e0:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 80069e4:	2b00      	cmp	r3, #0
 80069e6:	f000 80b7 	beq.w	8006b58 <_dtoa_r+0x518>
 80069ea:	4b86      	ldr	r3, [pc, #536]	@ (8006c04 <_dtoa_r+0x5c4>)
 80069ec:	2200      	movs	r2, #0
 80069ee:	4620      	mov	r0, r4
 80069f0:	4629      	mov	r1, r5
 80069f2:	f7fa f87b 	bl	8000aec <__aeabi_dcmplt>
 80069f6:	2800      	cmp	r0, #0
 80069f8:	f000 80ae 	beq.w	8006b58 <_dtoa_r+0x518>
 80069fc:	9b07      	ldr	r3, [sp, #28]
 80069fe:	2b00      	cmp	r3, #0
 8006a00:	f000 80aa 	beq.w	8006b58 <_dtoa_r+0x518>
 8006a04:	9b00      	ldr	r3, [sp, #0]
 8006a06:	2b00      	cmp	r3, #0
 8006a08:	dd37      	ble.n	8006a7a <_dtoa_r+0x43a>
 8006a0a:	1e7b      	subs	r3, r7, #1
 8006a0c:	9304      	str	r3, [sp, #16]
 8006a0e:	4620      	mov	r0, r4
 8006a10:	4b7d      	ldr	r3, [pc, #500]	@ (8006c08 <_dtoa_r+0x5c8>)
 8006a12:	2200      	movs	r2, #0
 8006a14:	4629      	mov	r1, r5
 8006a16:	f7f9 fdf7 	bl	8000608 <__aeabi_dmul>
 8006a1a:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006a1e:	9c00      	ldr	r4, [sp, #0]
 8006a20:	3601      	adds	r6, #1
 8006a22:	4630      	mov	r0, r6
 8006a24:	f7f9 fd86 	bl	8000534 <__aeabi_i2d>
 8006a28:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006a2c:	f7f9 fdec 	bl	8000608 <__aeabi_dmul>
 8006a30:	4b76      	ldr	r3, [pc, #472]	@ (8006c0c <_dtoa_r+0x5cc>)
 8006a32:	2200      	movs	r2, #0
 8006a34:	f7f9 fc32 	bl	800029c <__adddf3>
 8006a38:	4605      	mov	r5, r0
 8006a3a:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8006a3e:	2c00      	cmp	r4, #0
 8006a40:	f040 808d 	bne.w	8006b5e <_dtoa_r+0x51e>
 8006a44:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a48:	4b71      	ldr	r3, [pc, #452]	@ (8006c10 <_dtoa_r+0x5d0>)
 8006a4a:	2200      	movs	r2, #0
 8006a4c:	f7f9 fc24 	bl	8000298 <__aeabi_dsub>
 8006a50:	4602      	mov	r2, r0
 8006a52:	460b      	mov	r3, r1
 8006a54:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006a58:	462a      	mov	r2, r5
 8006a5a:	4633      	mov	r3, r6
 8006a5c:	f7fa f864 	bl	8000b28 <__aeabi_dcmpgt>
 8006a60:	2800      	cmp	r0, #0
 8006a62:	f040 828b 	bne.w	8006f7c <_dtoa_r+0x93c>
 8006a66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006a6a:	462a      	mov	r2, r5
 8006a6c:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8006a70:	f7fa f83c 	bl	8000aec <__aeabi_dcmplt>
 8006a74:	2800      	cmp	r0, #0
 8006a76:	f040 8128 	bne.w	8006cca <_dtoa_r+0x68a>
 8006a7a:	e9dd 340c 	ldrd	r3, r4, [sp, #48]	@ 0x30
 8006a7e:	e9cd 3402 	strd	r3, r4, [sp, #8]
 8006a82:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8006a84:	2b00      	cmp	r3, #0
 8006a86:	f2c0 815a 	blt.w	8006d3e <_dtoa_r+0x6fe>
 8006a8a:	2f0e      	cmp	r7, #14
 8006a8c:	f300 8157 	bgt.w	8006d3e <_dtoa_r+0x6fe>
 8006a90:	4b5a      	ldr	r3, [pc, #360]	@ (8006bfc <_dtoa_r+0x5bc>)
 8006a92:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8006a96:	ed93 7b00 	vldr	d7, [r3]
 8006a9a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	ed8d 7b00 	vstr	d7, [sp]
 8006aa2:	da03      	bge.n	8006aac <_dtoa_r+0x46c>
 8006aa4:	9b07      	ldr	r3, [sp, #28]
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	f340 8101 	ble.w	8006cae <_dtoa_r+0x66e>
 8006aac:	e9dd 4502 	ldrd	r4, r5, [sp, #8]
 8006ab0:	4656      	mov	r6, sl
 8006ab2:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006ab6:	4620      	mov	r0, r4
 8006ab8:	4629      	mov	r1, r5
 8006aba:	f7f9 fecf 	bl	800085c <__aeabi_ddiv>
 8006abe:	f7fa f853 	bl	8000b68 <__aeabi_d2iz>
 8006ac2:	4680      	mov	r8, r0
 8006ac4:	f7f9 fd36 	bl	8000534 <__aeabi_i2d>
 8006ac8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006acc:	f7f9 fd9c 	bl	8000608 <__aeabi_dmul>
 8006ad0:	4602      	mov	r2, r0
 8006ad2:	460b      	mov	r3, r1
 8006ad4:	4620      	mov	r0, r4
 8006ad6:	4629      	mov	r1, r5
 8006ad8:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8006adc:	f7f9 fbdc 	bl	8000298 <__aeabi_dsub>
 8006ae0:	f806 4b01 	strb.w	r4, [r6], #1
 8006ae4:	9d07      	ldr	r5, [sp, #28]
 8006ae6:	eba6 040a 	sub.w	r4, r6, sl
 8006aea:	42a5      	cmp	r5, r4
 8006aec:	4602      	mov	r2, r0
 8006aee:	460b      	mov	r3, r1
 8006af0:	f040 8117 	bne.w	8006d22 <_dtoa_r+0x6e2>
 8006af4:	f7f9 fbd2 	bl	800029c <__adddf3>
 8006af8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006afc:	4604      	mov	r4, r0
 8006afe:	460d      	mov	r5, r1
 8006b00:	f7fa f812 	bl	8000b28 <__aeabi_dcmpgt>
 8006b04:	2800      	cmp	r0, #0
 8006b06:	f040 80f9 	bne.w	8006cfc <_dtoa_r+0x6bc>
 8006b0a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8006b0e:	4620      	mov	r0, r4
 8006b10:	4629      	mov	r1, r5
 8006b12:	f7f9 ffe1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006b16:	b118      	cbz	r0, 8006b20 <_dtoa_r+0x4e0>
 8006b18:	f018 0f01 	tst.w	r8, #1
 8006b1c:	f040 80ee 	bne.w	8006cfc <_dtoa_r+0x6bc>
 8006b20:	4649      	mov	r1, r9
 8006b22:	4658      	mov	r0, fp
 8006b24:	f000 fc90 	bl	8007448 <_Bfree>
 8006b28:	2300      	movs	r3, #0
 8006b2a:	7033      	strb	r3, [r6, #0]
 8006b2c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 8006b2e:	3701      	adds	r7, #1
 8006b30:	601f      	str	r7, [r3, #0]
 8006b32:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8006b34:	2b00      	cmp	r3, #0
 8006b36:	f000 831d 	beq.w	8007174 <_dtoa_r+0xb34>
 8006b3a:	601e      	str	r6, [r3, #0]
 8006b3c:	e31a      	b.n	8007174 <_dtoa_r+0xb34>
 8006b3e:	07e2      	lsls	r2, r4, #31
 8006b40:	d505      	bpl.n	8006b4e <_dtoa_r+0x50e>
 8006b42:	e9d5 2300 	ldrd	r2, r3, [r5]
 8006b46:	f7f9 fd5f 	bl	8000608 <__aeabi_dmul>
 8006b4a:	3601      	adds	r6, #1
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	1064      	asrs	r4, r4, #1
 8006b50:	3508      	adds	r5, #8
 8006b52:	e73f      	b.n	80069d4 <_dtoa_r+0x394>
 8006b54:	2602      	movs	r6, #2
 8006b56:	e742      	b.n	80069de <_dtoa_r+0x39e>
 8006b58:	9c07      	ldr	r4, [sp, #28]
 8006b5a:	9704      	str	r7, [sp, #16]
 8006b5c:	e761      	b.n	8006a22 <_dtoa_r+0x3e2>
 8006b5e:	4b27      	ldr	r3, [pc, #156]	@ (8006bfc <_dtoa_r+0x5bc>)
 8006b60:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006b62:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8006b66:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8006b6a:	4454      	add	r4, sl
 8006b6c:	2900      	cmp	r1, #0
 8006b6e:	d053      	beq.n	8006c18 <_dtoa_r+0x5d8>
 8006b70:	4928      	ldr	r1, [pc, #160]	@ (8006c14 <_dtoa_r+0x5d4>)
 8006b72:	2000      	movs	r0, #0
 8006b74:	f7f9 fe72 	bl	800085c <__aeabi_ddiv>
 8006b78:	4633      	mov	r3, r6
 8006b7a:	462a      	mov	r2, r5
 8006b7c:	f7f9 fb8c 	bl	8000298 <__aeabi_dsub>
 8006b80:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006b84:	4656      	mov	r6, sl
 8006b86:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b8a:	f7f9 ffed 	bl	8000b68 <__aeabi_d2iz>
 8006b8e:	4605      	mov	r5, r0
 8006b90:	f7f9 fcd0 	bl	8000534 <__aeabi_i2d>
 8006b94:	4602      	mov	r2, r0
 8006b96:	460b      	mov	r3, r1
 8006b98:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006b9c:	f7f9 fb7c 	bl	8000298 <__aeabi_dsub>
 8006ba0:	3530      	adds	r5, #48	@ 0x30
 8006ba2:	4602      	mov	r2, r0
 8006ba4:	460b      	mov	r3, r1
 8006ba6:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006baa:	f806 5b01 	strb.w	r5, [r6], #1
 8006bae:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006bb2:	f7f9 ff9b 	bl	8000aec <__aeabi_dcmplt>
 8006bb6:	2800      	cmp	r0, #0
 8006bb8:	d171      	bne.n	8006c9e <_dtoa_r+0x65e>
 8006bba:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006bbe:	4911      	ldr	r1, [pc, #68]	@ (8006c04 <_dtoa_r+0x5c4>)
 8006bc0:	2000      	movs	r0, #0
 8006bc2:	f7f9 fb69 	bl	8000298 <__aeabi_dsub>
 8006bc6:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006bca:	f7f9 ff8f 	bl	8000aec <__aeabi_dcmplt>
 8006bce:	2800      	cmp	r0, #0
 8006bd0:	f040 8095 	bne.w	8006cfe <_dtoa_r+0x6be>
 8006bd4:	42a6      	cmp	r6, r4
 8006bd6:	f43f af50 	beq.w	8006a7a <_dtoa_r+0x43a>
 8006bda:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006bde:	4b0a      	ldr	r3, [pc, #40]	@ (8006c08 <_dtoa_r+0x5c8>)
 8006be0:	2200      	movs	r2, #0
 8006be2:	f7f9 fd11 	bl	8000608 <__aeabi_dmul>
 8006be6:	4b08      	ldr	r3, [pc, #32]	@ (8006c08 <_dtoa_r+0x5c8>)
 8006be8:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006bec:	2200      	movs	r2, #0
 8006bee:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006bf2:	f7f9 fd09 	bl	8000608 <__aeabi_dmul>
 8006bf6:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006bfa:	e7c4      	b.n	8006b86 <_dtoa_r+0x546>
 8006bfc:	08008900 	.word	0x08008900
 8006c00:	080088d8 	.word	0x080088d8
 8006c04:	3ff00000 	.word	0x3ff00000
 8006c08:	40240000 	.word	0x40240000
 8006c0c:	401c0000 	.word	0x401c0000
 8006c10:	40140000 	.word	0x40140000
 8006c14:	3fe00000 	.word	0x3fe00000
 8006c18:	4631      	mov	r1, r6
 8006c1a:	4628      	mov	r0, r5
 8006c1c:	f7f9 fcf4 	bl	8000608 <__aeabi_dmul>
 8006c20:	e9cd 0110 	strd	r0, r1, [sp, #64]	@ 0x40
 8006c24:	9415      	str	r4, [sp, #84]	@ 0x54
 8006c26:	4656      	mov	r6, sl
 8006c28:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c2c:	f7f9 ff9c 	bl	8000b68 <__aeabi_d2iz>
 8006c30:	4605      	mov	r5, r0
 8006c32:	f7f9 fc7f 	bl	8000534 <__aeabi_i2d>
 8006c36:	4602      	mov	r2, r0
 8006c38:	460b      	mov	r3, r1
 8006c3a:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c3e:	f7f9 fb2b 	bl	8000298 <__aeabi_dsub>
 8006c42:	3530      	adds	r5, #48	@ 0x30
 8006c44:	f806 5b01 	strb.w	r5, [r6], #1
 8006c48:	4602      	mov	r2, r0
 8006c4a:	460b      	mov	r3, r1
 8006c4c:	42a6      	cmp	r6, r4
 8006c4e:	e9cd 2302 	strd	r2, r3, [sp, #8]
 8006c52:	f04f 0200 	mov.w	r2, #0
 8006c56:	d124      	bne.n	8006ca2 <_dtoa_r+0x662>
 8006c58:	4bac      	ldr	r3, [pc, #688]	@ (8006f0c <_dtoa_r+0x8cc>)
 8006c5a:	e9dd 0110 	ldrd	r0, r1, [sp, #64]	@ 0x40
 8006c5e:	f7f9 fb1d 	bl	800029c <__adddf3>
 8006c62:	4602      	mov	r2, r0
 8006c64:	460b      	mov	r3, r1
 8006c66:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c6a:	f7f9 ff5d 	bl	8000b28 <__aeabi_dcmpgt>
 8006c6e:	2800      	cmp	r0, #0
 8006c70:	d145      	bne.n	8006cfe <_dtoa_r+0x6be>
 8006c72:	e9dd 2310 	ldrd	r2, r3, [sp, #64]	@ 0x40
 8006c76:	49a5      	ldr	r1, [pc, #660]	@ (8006f0c <_dtoa_r+0x8cc>)
 8006c78:	2000      	movs	r0, #0
 8006c7a:	f7f9 fb0d 	bl	8000298 <__aeabi_dsub>
 8006c7e:	4602      	mov	r2, r0
 8006c80:	460b      	mov	r3, r1
 8006c82:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8006c86:	f7f9 ff31 	bl	8000aec <__aeabi_dcmplt>
 8006c8a:	2800      	cmp	r0, #0
 8006c8c:	f43f aef5 	beq.w	8006a7a <_dtoa_r+0x43a>
 8006c90:	9e15      	ldr	r6, [sp, #84]	@ 0x54
 8006c92:	1e73      	subs	r3, r6, #1
 8006c94:	9315      	str	r3, [sp, #84]	@ 0x54
 8006c96:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8006c9a:	2b30      	cmp	r3, #48	@ 0x30
 8006c9c:	d0f8      	beq.n	8006c90 <_dtoa_r+0x650>
 8006c9e:	9f04      	ldr	r7, [sp, #16]
 8006ca0:	e73e      	b.n	8006b20 <_dtoa_r+0x4e0>
 8006ca2:	4b9b      	ldr	r3, [pc, #620]	@ (8006f10 <_dtoa_r+0x8d0>)
 8006ca4:	f7f9 fcb0 	bl	8000608 <__aeabi_dmul>
 8006ca8:	e9cd 0102 	strd	r0, r1, [sp, #8]
 8006cac:	e7bc      	b.n	8006c28 <_dtoa_r+0x5e8>
 8006cae:	d10c      	bne.n	8006cca <_dtoa_r+0x68a>
 8006cb0:	4b98      	ldr	r3, [pc, #608]	@ (8006f14 <_dtoa_r+0x8d4>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8006cb8:	f7f9 fca6 	bl	8000608 <__aeabi_dmul>
 8006cbc:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8006cc0:	f7f9 ff28 	bl	8000b14 <__aeabi_dcmpge>
 8006cc4:	2800      	cmp	r0, #0
 8006cc6:	f000 8157 	beq.w	8006f78 <_dtoa_r+0x938>
 8006cca:	2400      	movs	r4, #0
 8006ccc:	4625      	mov	r5, r4
 8006cce:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8006cd0:	43db      	mvns	r3, r3
 8006cd2:	9304      	str	r3, [sp, #16]
 8006cd4:	4656      	mov	r6, sl
 8006cd6:	2700      	movs	r7, #0
 8006cd8:	4621      	mov	r1, r4
 8006cda:	4658      	mov	r0, fp
 8006cdc:	f000 fbb4 	bl	8007448 <_Bfree>
 8006ce0:	2d00      	cmp	r5, #0
 8006ce2:	d0dc      	beq.n	8006c9e <_dtoa_r+0x65e>
 8006ce4:	b12f      	cbz	r7, 8006cf2 <_dtoa_r+0x6b2>
 8006ce6:	42af      	cmp	r7, r5
 8006ce8:	d003      	beq.n	8006cf2 <_dtoa_r+0x6b2>
 8006cea:	4639      	mov	r1, r7
 8006cec:	4658      	mov	r0, fp
 8006cee:	f000 fbab 	bl	8007448 <_Bfree>
 8006cf2:	4629      	mov	r1, r5
 8006cf4:	4658      	mov	r0, fp
 8006cf6:	f000 fba7 	bl	8007448 <_Bfree>
 8006cfa:	e7d0      	b.n	8006c9e <_dtoa_r+0x65e>
 8006cfc:	9704      	str	r7, [sp, #16]
 8006cfe:	4633      	mov	r3, r6
 8006d00:	461e      	mov	r6, r3
 8006d02:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8006d06:	2a39      	cmp	r2, #57	@ 0x39
 8006d08:	d107      	bne.n	8006d1a <_dtoa_r+0x6da>
 8006d0a:	459a      	cmp	sl, r3
 8006d0c:	d1f8      	bne.n	8006d00 <_dtoa_r+0x6c0>
 8006d0e:	9a04      	ldr	r2, [sp, #16]
 8006d10:	3201      	adds	r2, #1
 8006d12:	9204      	str	r2, [sp, #16]
 8006d14:	2230      	movs	r2, #48	@ 0x30
 8006d16:	f88a 2000 	strb.w	r2, [sl]
 8006d1a:	781a      	ldrb	r2, [r3, #0]
 8006d1c:	3201      	adds	r2, #1
 8006d1e:	701a      	strb	r2, [r3, #0]
 8006d20:	e7bd      	b.n	8006c9e <_dtoa_r+0x65e>
 8006d22:	4b7b      	ldr	r3, [pc, #492]	@ (8006f10 <_dtoa_r+0x8d0>)
 8006d24:	2200      	movs	r2, #0
 8006d26:	f7f9 fc6f 	bl	8000608 <__aeabi_dmul>
 8006d2a:	2200      	movs	r2, #0
 8006d2c:	2300      	movs	r3, #0
 8006d2e:	4604      	mov	r4, r0
 8006d30:	460d      	mov	r5, r1
 8006d32:	f7f9 fed1 	bl	8000ad8 <__aeabi_dcmpeq>
 8006d36:	2800      	cmp	r0, #0
 8006d38:	f43f aebb 	beq.w	8006ab2 <_dtoa_r+0x472>
 8006d3c:	e6f0      	b.n	8006b20 <_dtoa_r+0x4e0>
 8006d3e:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 8006d40:	2a00      	cmp	r2, #0
 8006d42:	f000 80db 	beq.w	8006efc <_dtoa_r+0x8bc>
 8006d46:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8006d48:	2a01      	cmp	r2, #1
 8006d4a:	f300 80bf 	bgt.w	8006ecc <_dtoa_r+0x88c>
 8006d4e:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 8006d50:	2a00      	cmp	r2, #0
 8006d52:	f000 80b7 	beq.w	8006ec4 <_dtoa_r+0x884>
 8006d56:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8006d5a:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006d5c:	4646      	mov	r6, r8
 8006d5e:	9a08      	ldr	r2, [sp, #32]
 8006d60:	2101      	movs	r1, #1
 8006d62:	441a      	add	r2, r3
 8006d64:	4658      	mov	r0, fp
 8006d66:	4498      	add	r8, r3
 8006d68:	9208      	str	r2, [sp, #32]
 8006d6a:	f000 fc21 	bl	80075b0 <__i2b>
 8006d6e:	4605      	mov	r5, r0
 8006d70:	b15e      	cbz	r6, 8006d8a <_dtoa_r+0x74a>
 8006d72:	9b08      	ldr	r3, [sp, #32]
 8006d74:	2b00      	cmp	r3, #0
 8006d76:	dd08      	ble.n	8006d8a <_dtoa_r+0x74a>
 8006d78:	42b3      	cmp	r3, r6
 8006d7a:	9a08      	ldr	r2, [sp, #32]
 8006d7c:	bfa8      	it	ge
 8006d7e:	4633      	movge	r3, r6
 8006d80:	eba8 0803 	sub.w	r8, r8, r3
 8006d84:	1af6      	subs	r6, r6, r3
 8006d86:	1ad3      	subs	r3, r2, r3
 8006d88:	9308      	str	r3, [sp, #32]
 8006d8a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006d8c:	b1f3      	cbz	r3, 8006dcc <_dtoa_r+0x78c>
 8006d8e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006d90:	2b00      	cmp	r3, #0
 8006d92:	f000 80b7 	beq.w	8006f04 <_dtoa_r+0x8c4>
 8006d96:	b18c      	cbz	r4, 8006dbc <_dtoa_r+0x77c>
 8006d98:	4629      	mov	r1, r5
 8006d9a:	4622      	mov	r2, r4
 8006d9c:	4658      	mov	r0, fp
 8006d9e:	f000 fcc7 	bl	8007730 <__pow5mult>
 8006da2:	464a      	mov	r2, r9
 8006da4:	4601      	mov	r1, r0
 8006da6:	4605      	mov	r5, r0
 8006da8:	4658      	mov	r0, fp
 8006daa:	f000 fc17 	bl	80075dc <__multiply>
 8006dae:	4649      	mov	r1, r9
 8006db0:	9004      	str	r0, [sp, #16]
 8006db2:	4658      	mov	r0, fp
 8006db4:	f000 fb48 	bl	8007448 <_Bfree>
 8006db8:	9b04      	ldr	r3, [sp, #16]
 8006dba:	4699      	mov	r9, r3
 8006dbc:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006dbe:	1b1a      	subs	r2, r3, r4
 8006dc0:	d004      	beq.n	8006dcc <_dtoa_r+0x78c>
 8006dc2:	4649      	mov	r1, r9
 8006dc4:	4658      	mov	r0, fp
 8006dc6:	f000 fcb3 	bl	8007730 <__pow5mult>
 8006dca:	4681      	mov	r9, r0
 8006dcc:	2101      	movs	r1, #1
 8006dce:	4658      	mov	r0, fp
 8006dd0:	f000 fbee 	bl	80075b0 <__i2b>
 8006dd4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006dd6:	4604      	mov	r4, r0
 8006dd8:	2b00      	cmp	r3, #0
 8006dda:	f000 81cf 	beq.w	800717c <_dtoa_r+0xb3c>
 8006dde:	461a      	mov	r2, r3
 8006de0:	4601      	mov	r1, r0
 8006de2:	4658      	mov	r0, fp
 8006de4:	f000 fca4 	bl	8007730 <__pow5mult>
 8006de8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006dea:	2b01      	cmp	r3, #1
 8006dec:	4604      	mov	r4, r0
 8006dee:	f300 8095 	bgt.w	8006f1c <_dtoa_r+0x8dc>
 8006df2:	9b02      	ldr	r3, [sp, #8]
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	f040 8087 	bne.w	8006f08 <_dtoa_r+0x8c8>
 8006dfa:	9b03      	ldr	r3, [sp, #12]
 8006dfc:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	f040 8089 	bne.w	8006f18 <_dtoa_r+0x8d8>
 8006e06:	9b03      	ldr	r3, [sp, #12]
 8006e08:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8006e0c:	0d1b      	lsrs	r3, r3, #20
 8006e0e:	051b      	lsls	r3, r3, #20
 8006e10:	b12b      	cbz	r3, 8006e1e <_dtoa_r+0x7de>
 8006e12:	9b08      	ldr	r3, [sp, #32]
 8006e14:	3301      	adds	r3, #1
 8006e16:	9308      	str	r3, [sp, #32]
 8006e18:	f108 0801 	add.w	r8, r8, #1
 8006e1c:	2301      	movs	r3, #1
 8006e1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006e20:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8006e22:	2b00      	cmp	r3, #0
 8006e24:	f000 81b0 	beq.w	8007188 <_dtoa_r+0xb48>
 8006e28:	6923      	ldr	r3, [r4, #16]
 8006e2a:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8006e2e:	6918      	ldr	r0, [r3, #16]
 8006e30:	f000 fb72 	bl	8007518 <__hi0bits>
 8006e34:	f1c0 0020 	rsb	r0, r0, #32
 8006e38:	9b08      	ldr	r3, [sp, #32]
 8006e3a:	4418      	add	r0, r3
 8006e3c:	f010 001f 	ands.w	r0, r0, #31
 8006e40:	d077      	beq.n	8006f32 <_dtoa_r+0x8f2>
 8006e42:	f1c0 0320 	rsb	r3, r0, #32
 8006e46:	2b04      	cmp	r3, #4
 8006e48:	dd6b      	ble.n	8006f22 <_dtoa_r+0x8e2>
 8006e4a:	9b08      	ldr	r3, [sp, #32]
 8006e4c:	f1c0 001c 	rsb	r0, r0, #28
 8006e50:	4403      	add	r3, r0
 8006e52:	4480      	add	r8, r0
 8006e54:	4406      	add	r6, r0
 8006e56:	9308      	str	r3, [sp, #32]
 8006e58:	f1b8 0f00 	cmp.w	r8, #0
 8006e5c:	dd05      	ble.n	8006e6a <_dtoa_r+0x82a>
 8006e5e:	4649      	mov	r1, r9
 8006e60:	4642      	mov	r2, r8
 8006e62:	4658      	mov	r0, fp
 8006e64:	f000 fcbe 	bl	80077e4 <__lshift>
 8006e68:	4681      	mov	r9, r0
 8006e6a:	9b08      	ldr	r3, [sp, #32]
 8006e6c:	2b00      	cmp	r3, #0
 8006e6e:	dd05      	ble.n	8006e7c <_dtoa_r+0x83c>
 8006e70:	4621      	mov	r1, r4
 8006e72:	461a      	mov	r2, r3
 8006e74:	4658      	mov	r0, fp
 8006e76:	f000 fcb5 	bl	80077e4 <__lshift>
 8006e7a:	4604      	mov	r4, r0
 8006e7c:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 8006e7e:	2b00      	cmp	r3, #0
 8006e80:	d059      	beq.n	8006f36 <_dtoa_r+0x8f6>
 8006e82:	4621      	mov	r1, r4
 8006e84:	4648      	mov	r0, r9
 8006e86:	f000 fd19 	bl	80078bc <__mcmp>
 8006e8a:	2800      	cmp	r0, #0
 8006e8c:	da53      	bge.n	8006f36 <_dtoa_r+0x8f6>
 8006e8e:	1e7b      	subs	r3, r7, #1
 8006e90:	9304      	str	r3, [sp, #16]
 8006e92:	4649      	mov	r1, r9
 8006e94:	2300      	movs	r3, #0
 8006e96:	220a      	movs	r2, #10
 8006e98:	4658      	mov	r0, fp
 8006e9a:	f000 faf7 	bl	800748c <__multadd>
 8006e9e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006ea0:	4681      	mov	r9, r0
 8006ea2:	2b00      	cmp	r3, #0
 8006ea4:	f000 8172 	beq.w	800718c <_dtoa_r+0xb4c>
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	4629      	mov	r1, r5
 8006eac:	220a      	movs	r2, #10
 8006eae:	4658      	mov	r0, fp
 8006eb0:	f000 faec 	bl	800748c <__multadd>
 8006eb4:	9b00      	ldr	r3, [sp, #0]
 8006eb6:	2b00      	cmp	r3, #0
 8006eb8:	4605      	mov	r5, r0
 8006eba:	dc67      	bgt.n	8006f8c <_dtoa_r+0x94c>
 8006ebc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006ebe:	2b02      	cmp	r3, #2
 8006ec0:	dc41      	bgt.n	8006f46 <_dtoa_r+0x906>
 8006ec2:	e063      	b.n	8006f8c <_dtoa_r+0x94c>
 8006ec4:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 8006ec6:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8006eca:	e746      	b.n	8006d5a <_dtoa_r+0x71a>
 8006ecc:	9b07      	ldr	r3, [sp, #28]
 8006ece:	1e5c      	subs	r4, r3, #1
 8006ed0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006ed2:	42a3      	cmp	r3, r4
 8006ed4:	bfbf      	itttt	lt
 8006ed6:	9b0a      	ldrlt	r3, [sp, #40]	@ 0x28
 8006ed8:	9a0f      	ldrlt	r2, [sp, #60]	@ 0x3c
 8006eda:	940a      	strlt	r4, [sp, #40]	@ 0x28
 8006edc:	1ae3      	sublt	r3, r4, r3
 8006ede:	bfb4      	ite	lt
 8006ee0:	18d2      	addlt	r2, r2, r3
 8006ee2:	1b1c      	subge	r4, r3, r4
 8006ee4:	9b07      	ldr	r3, [sp, #28]
 8006ee6:	bfbc      	itt	lt
 8006ee8:	920f      	strlt	r2, [sp, #60]	@ 0x3c
 8006eea:	2400      	movlt	r4, #0
 8006eec:	2b00      	cmp	r3, #0
 8006eee:	bfb5      	itete	lt
 8006ef0:	eba8 0603 	sublt.w	r6, r8, r3
 8006ef4:	9b07      	ldrge	r3, [sp, #28]
 8006ef6:	2300      	movlt	r3, #0
 8006ef8:	4646      	movge	r6, r8
 8006efa:	e730      	b.n	8006d5e <_dtoa_r+0x71e>
 8006efc:	9c0a      	ldr	r4, [sp, #40]	@ 0x28
 8006efe:	9d0b      	ldr	r5, [sp, #44]	@ 0x2c
 8006f00:	4646      	mov	r6, r8
 8006f02:	e735      	b.n	8006d70 <_dtoa_r+0x730>
 8006f04:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8006f06:	e75c      	b.n	8006dc2 <_dtoa_r+0x782>
 8006f08:	2300      	movs	r3, #0
 8006f0a:	e788      	b.n	8006e1e <_dtoa_r+0x7de>
 8006f0c:	3fe00000 	.word	0x3fe00000
 8006f10:	40240000 	.word	0x40240000
 8006f14:	40140000 	.word	0x40140000
 8006f18:	9b02      	ldr	r3, [sp, #8]
 8006f1a:	e780      	b.n	8006e1e <_dtoa_r+0x7de>
 8006f1c:	2300      	movs	r3, #0
 8006f1e:	930a      	str	r3, [sp, #40]	@ 0x28
 8006f20:	e782      	b.n	8006e28 <_dtoa_r+0x7e8>
 8006f22:	d099      	beq.n	8006e58 <_dtoa_r+0x818>
 8006f24:	9a08      	ldr	r2, [sp, #32]
 8006f26:	331c      	adds	r3, #28
 8006f28:	441a      	add	r2, r3
 8006f2a:	4498      	add	r8, r3
 8006f2c:	441e      	add	r6, r3
 8006f2e:	9208      	str	r2, [sp, #32]
 8006f30:	e792      	b.n	8006e58 <_dtoa_r+0x818>
 8006f32:	4603      	mov	r3, r0
 8006f34:	e7f6      	b.n	8006f24 <_dtoa_r+0x8e4>
 8006f36:	9b07      	ldr	r3, [sp, #28]
 8006f38:	9704      	str	r7, [sp, #16]
 8006f3a:	2b00      	cmp	r3, #0
 8006f3c:	dc20      	bgt.n	8006f80 <_dtoa_r+0x940>
 8006f3e:	9300      	str	r3, [sp, #0]
 8006f40:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006f42:	2b02      	cmp	r3, #2
 8006f44:	dd1e      	ble.n	8006f84 <_dtoa_r+0x944>
 8006f46:	9b00      	ldr	r3, [sp, #0]
 8006f48:	2b00      	cmp	r3, #0
 8006f4a:	f47f aec0 	bne.w	8006cce <_dtoa_r+0x68e>
 8006f4e:	4621      	mov	r1, r4
 8006f50:	2205      	movs	r2, #5
 8006f52:	4658      	mov	r0, fp
 8006f54:	f000 fa9a 	bl	800748c <__multadd>
 8006f58:	4601      	mov	r1, r0
 8006f5a:	4604      	mov	r4, r0
 8006f5c:	4648      	mov	r0, r9
 8006f5e:	f000 fcad 	bl	80078bc <__mcmp>
 8006f62:	2800      	cmp	r0, #0
 8006f64:	f77f aeb3 	ble.w	8006cce <_dtoa_r+0x68e>
 8006f68:	4656      	mov	r6, sl
 8006f6a:	2331      	movs	r3, #49	@ 0x31
 8006f6c:	f806 3b01 	strb.w	r3, [r6], #1
 8006f70:	9b04      	ldr	r3, [sp, #16]
 8006f72:	3301      	adds	r3, #1
 8006f74:	9304      	str	r3, [sp, #16]
 8006f76:	e6ae      	b.n	8006cd6 <_dtoa_r+0x696>
 8006f78:	9c07      	ldr	r4, [sp, #28]
 8006f7a:	9704      	str	r7, [sp, #16]
 8006f7c:	4625      	mov	r5, r4
 8006f7e:	e7f3      	b.n	8006f68 <_dtoa_r+0x928>
 8006f80:	9b07      	ldr	r3, [sp, #28]
 8006f82:	9300      	str	r3, [sp, #0]
 8006f84:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8006f86:	2b00      	cmp	r3, #0
 8006f88:	f000 8104 	beq.w	8007194 <_dtoa_r+0xb54>
 8006f8c:	2e00      	cmp	r6, #0
 8006f8e:	dd05      	ble.n	8006f9c <_dtoa_r+0x95c>
 8006f90:	4629      	mov	r1, r5
 8006f92:	4632      	mov	r2, r6
 8006f94:	4658      	mov	r0, fp
 8006f96:	f000 fc25 	bl	80077e4 <__lshift>
 8006f9a:	4605      	mov	r5, r0
 8006f9c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006f9e:	2b00      	cmp	r3, #0
 8006fa0:	d05a      	beq.n	8007058 <_dtoa_r+0xa18>
 8006fa2:	6869      	ldr	r1, [r5, #4]
 8006fa4:	4658      	mov	r0, fp
 8006fa6:	f000 fa0f 	bl	80073c8 <_Balloc>
 8006faa:	4606      	mov	r6, r0
 8006fac:	b928      	cbnz	r0, 8006fba <_dtoa_r+0x97a>
 8006fae:	4b84      	ldr	r3, [pc, #528]	@ (80071c0 <_dtoa_r+0xb80>)
 8006fb0:	4602      	mov	r2, r0
 8006fb2:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8006fb6:	f7ff bb5a 	b.w	800666e <_dtoa_r+0x2e>
 8006fba:	692a      	ldr	r2, [r5, #16]
 8006fbc:	3202      	adds	r2, #2
 8006fbe:	0092      	lsls	r2, r2, #2
 8006fc0:	f105 010c 	add.w	r1, r5, #12
 8006fc4:	300c      	adds	r0, #12
 8006fc6:	f001 f985 	bl	80082d4 <memcpy>
 8006fca:	2201      	movs	r2, #1
 8006fcc:	4631      	mov	r1, r6
 8006fce:	4658      	mov	r0, fp
 8006fd0:	f000 fc08 	bl	80077e4 <__lshift>
 8006fd4:	f10a 0301 	add.w	r3, sl, #1
 8006fd8:	9307      	str	r3, [sp, #28]
 8006fda:	9b00      	ldr	r3, [sp, #0]
 8006fdc:	4453      	add	r3, sl
 8006fde:	930b      	str	r3, [sp, #44]	@ 0x2c
 8006fe0:	9b02      	ldr	r3, [sp, #8]
 8006fe2:	f003 0301 	and.w	r3, r3, #1
 8006fe6:	462f      	mov	r7, r5
 8006fe8:	930a      	str	r3, [sp, #40]	@ 0x28
 8006fea:	4605      	mov	r5, r0
 8006fec:	9b07      	ldr	r3, [sp, #28]
 8006fee:	4621      	mov	r1, r4
 8006ff0:	3b01      	subs	r3, #1
 8006ff2:	4648      	mov	r0, r9
 8006ff4:	9300      	str	r3, [sp, #0]
 8006ff6:	f7ff fa9a 	bl	800652e <quorem>
 8006ffa:	4639      	mov	r1, r7
 8006ffc:	9002      	str	r0, [sp, #8]
 8006ffe:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 8007002:	4648      	mov	r0, r9
 8007004:	f000 fc5a 	bl	80078bc <__mcmp>
 8007008:	462a      	mov	r2, r5
 800700a:	9008      	str	r0, [sp, #32]
 800700c:	4621      	mov	r1, r4
 800700e:	4658      	mov	r0, fp
 8007010:	f000 fc70 	bl	80078f4 <__mdiff>
 8007014:	68c2      	ldr	r2, [r0, #12]
 8007016:	4606      	mov	r6, r0
 8007018:	bb02      	cbnz	r2, 800705c <_dtoa_r+0xa1c>
 800701a:	4601      	mov	r1, r0
 800701c:	4648      	mov	r0, r9
 800701e:	f000 fc4d 	bl	80078bc <__mcmp>
 8007022:	4602      	mov	r2, r0
 8007024:	4631      	mov	r1, r6
 8007026:	4658      	mov	r0, fp
 8007028:	920e      	str	r2, [sp, #56]	@ 0x38
 800702a:	f000 fa0d 	bl	8007448 <_Bfree>
 800702e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007030:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8007032:	9e07      	ldr	r6, [sp, #28]
 8007034:	ea43 0102 	orr.w	r1, r3, r2
 8007038:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800703a:	4319      	orrs	r1, r3
 800703c:	d110      	bne.n	8007060 <_dtoa_r+0xa20>
 800703e:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007042:	d029      	beq.n	8007098 <_dtoa_r+0xa58>
 8007044:	9b08      	ldr	r3, [sp, #32]
 8007046:	2b00      	cmp	r3, #0
 8007048:	dd02      	ble.n	8007050 <_dtoa_r+0xa10>
 800704a:	9b02      	ldr	r3, [sp, #8]
 800704c:	f103 0831 	add.w	r8, r3, #49	@ 0x31
 8007050:	9b00      	ldr	r3, [sp, #0]
 8007052:	f883 8000 	strb.w	r8, [r3]
 8007056:	e63f      	b.n	8006cd8 <_dtoa_r+0x698>
 8007058:	4628      	mov	r0, r5
 800705a:	e7bb      	b.n	8006fd4 <_dtoa_r+0x994>
 800705c:	2201      	movs	r2, #1
 800705e:	e7e1      	b.n	8007024 <_dtoa_r+0x9e4>
 8007060:	9b08      	ldr	r3, [sp, #32]
 8007062:	2b00      	cmp	r3, #0
 8007064:	db04      	blt.n	8007070 <_dtoa_r+0xa30>
 8007066:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007068:	430b      	orrs	r3, r1
 800706a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 800706c:	430b      	orrs	r3, r1
 800706e:	d120      	bne.n	80070b2 <_dtoa_r+0xa72>
 8007070:	2a00      	cmp	r2, #0
 8007072:	dded      	ble.n	8007050 <_dtoa_r+0xa10>
 8007074:	4649      	mov	r1, r9
 8007076:	2201      	movs	r2, #1
 8007078:	4658      	mov	r0, fp
 800707a:	f000 fbb3 	bl	80077e4 <__lshift>
 800707e:	4621      	mov	r1, r4
 8007080:	4681      	mov	r9, r0
 8007082:	f000 fc1b 	bl	80078bc <__mcmp>
 8007086:	2800      	cmp	r0, #0
 8007088:	dc03      	bgt.n	8007092 <_dtoa_r+0xa52>
 800708a:	d1e1      	bne.n	8007050 <_dtoa_r+0xa10>
 800708c:	f018 0f01 	tst.w	r8, #1
 8007090:	d0de      	beq.n	8007050 <_dtoa_r+0xa10>
 8007092:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 8007096:	d1d8      	bne.n	800704a <_dtoa_r+0xa0a>
 8007098:	9a00      	ldr	r2, [sp, #0]
 800709a:	2339      	movs	r3, #57	@ 0x39
 800709c:	7013      	strb	r3, [r2, #0]
 800709e:	4633      	mov	r3, r6
 80070a0:	461e      	mov	r6, r3
 80070a2:	3b01      	subs	r3, #1
 80070a4:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 80070a8:	2a39      	cmp	r2, #57	@ 0x39
 80070aa:	d052      	beq.n	8007152 <_dtoa_r+0xb12>
 80070ac:	3201      	adds	r2, #1
 80070ae:	701a      	strb	r2, [r3, #0]
 80070b0:	e612      	b.n	8006cd8 <_dtoa_r+0x698>
 80070b2:	2a00      	cmp	r2, #0
 80070b4:	dd07      	ble.n	80070c6 <_dtoa_r+0xa86>
 80070b6:	f1b8 0f39 	cmp.w	r8, #57	@ 0x39
 80070ba:	d0ed      	beq.n	8007098 <_dtoa_r+0xa58>
 80070bc:	9a00      	ldr	r2, [sp, #0]
 80070be:	f108 0301 	add.w	r3, r8, #1
 80070c2:	7013      	strb	r3, [r2, #0]
 80070c4:	e608      	b.n	8006cd8 <_dtoa_r+0x698>
 80070c6:	9b07      	ldr	r3, [sp, #28]
 80070c8:	9a07      	ldr	r2, [sp, #28]
 80070ca:	f803 8c01 	strb.w	r8, [r3, #-1]
 80070ce:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80070d0:	4293      	cmp	r3, r2
 80070d2:	d028      	beq.n	8007126 <_dtoa_r+0xae6>
 80070d4:	4649      	mov	r1, r9
 80070d6:	2300      	movs	r3, #0
 80070d8:	220a      	movs	r2, #10
 80070da:	4658      	mov	r0, fp
 80070dc:	f000 f9d6 	bl	800748c <__multadd>
 80070e0:	42af      	cmp	r7, r5
 80070e2:	4681      	mov	r9, r0
 80070e4:	f04f 0300 	mov.w	r3, #0
 80070e8:	f04f 020a 	mov.w	r2, #10
 80070ec:	4639      	mov	r1, r7
 80070ee:	4658      	mov	r0, fp
 80070f0:	d107      	bne.n	8007102 <_dtoa_r+0xac2>
 80070f2:	f000 f9cb 	bl	800748c <__multadd>
 80070f6:	4607      	mov	r7, r0
 80070f8:	4605      	mov	r5, r0
 80070fa:	9b07      	ldr	r3, [sp, #28]
 80070fc:	3301      	adds	r3, #1
 80070fe:	9307      	str	r3, [sp, #28]
 8007100:	e774      	b.n	8006fec <_dtoa_r+0x9ac>
 8007102:	f000 f9c3 	bl	800748c <__multadd>
 8007106:	4629      	mov	r1, r5
 8007108:	4607      	mov	r7, r0
 800710a:	2300      	movs	r3, #0
 800710c:	220a      	movs	r2, #10
 800710e:	4658      	mov	r0, fp
 8007110:	f000 f9bc 	bl	800748c <__multadd>
 8007114:	4605      	mov	r5, r0
 8007116:	e7f0      	b.n	80070fa <_dtoa_r+0xaba>
 8007118:	9b00      	ldr	r3, [sp, #0]
 800711a:	2b00      	cmp	r3, #0
 800711c:	bfcc      	ite	gt
 800711e:	461e      	movgt	r6, r3
 8007120:	2601      	movle	r6, #1
 8007122:	4456      	add	r6, sl
 8007124:	2700      	movs	r7, #0
 8007126:	4649      	mov	r1, r9
 8007128:	2201      	movs	r2, #1
 800712a:	4658      	mov	r0, fp
 800712c:	f000 fb5a 	bl	80077e4 <__lshift>
 8007130:	4621      	mov	r1, r4
 8007132:	4681      	mov	r9, r0
 8007134:	f000 fbc2 	bl	80078bc <__mcmp>
 8007138:	2800      	cmp	r0, #0
 800713a:	dcb0      	bgt.n	800709e <_dtoa_r+0xa5e>
 800713c:	d102      	bne.n	8007144 <_dtoa_r+0xb04>
 800713e:	f018 0f01 	tst.w	r8, #1
 8007142:	d1ac      	bne.n	800709e <_dtoa_r+0xa5e>
 8007144:	4633      	mov	r3, r6
 8007146:	461e      	mov	r6, r3
 8007148:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800714c:	2a30      	cmp	r2, #48	@ 0x30
 800714e:	d0fa      	beq.n	8007146 <_dtoa_r+0xb06>
 8007150:	e5c2      	b.n	8006cd8 <_dtoa_r+0x698>
 8007152:	459a      	cmp	sl, r3
 8007154:	d1a4      	bne.n	80070a0 <_dtoa_r+0xa60>
 8007156:	9b04      	ldr	r3, [sp, #16]
 8007158:	3301      	adds	r3, #1
 800715a:	9304      	str	r3, [sp, #16]
 800715c:	2331      	movs	r3, #49	@ 0x31
 800715e:	f88a 3000 	strb.w	r3, [sl]
 8007162:	e5b9      	b.n	8006cd8 <_dtoa_r+0x698>
 8007164:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 8007166:	f8df a05c 	ldr.w	sl, [pc, #92]	@ 80071c4 <_dtoa_r+0xb84>
 800716a:	b11b      	cbz	r3, 8007174 <_dtoa_r+0xb34>
 800716c:	f10a 0308 	add.w	r3, sl, #8
 8007170:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 8007172:	6013      	str	r3, [r2, #0]
 8007174:	4650      	mov	r0, sl
 8007176:	b019      	add	sp, #100	@ 0x64
 8007178:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800717c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800717e:	2b01      	cmp	r3, #1
 8007180:	f77f ae37 	ble.w	8006df2 <_dtoa_r+0x7b2>
 8007184:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8007186:	930a      	str	r3, [sp, #40]	@ 0x28
 8007188:	2001      	movs	r0, #1
 800718a:	e655      	b.n	8006e38 <_dtoa_r+0x7f8>
 800718c:	9b00      	ldr	r3, [sp, #0]
 800718e:	2b00      	cmp	r3, #0
 8007190:	f77f aed6 	ble.w	8006f40 <_dtoa_r+0x900>
 8007194:	4656      	mov	r6, sl
 8007196:	4621      	mov	r1, r4
 8007198:	4648      	mov	r0, r9
 800719a:	f7ff f9c8 	bl	800652e <quorem>
 800719e:	f100 0830 	add.w	r8, r0, #48	@ 0x30
 80071a2:	f806 8b01 	strb.w	r8, [r6], #1
 80071a6:	9b00      	ldr	r3, [sp, #0]
 80071a8:	eba6 020a 	sub.w	r2, r6, sl
 80071ac:	4293      	cmp	r3, r2
 80071ae:	ddb3      	ble.n	8007118 <_dtoa_r+0xad8>
 80071b0:	4649      	mov	r1, r9
 80071b2:	2300      	movs	r3, #0
 80071b4:	220a      	movs	r2, #10
 80071b6:	4658      	mov	r0, fp
 80071b8:	f000 f968 	bl	800748c <__multadd>
 80071bc:	4681      	mov	r9, r0
 80071be:	e7ea      	b.n	8007196 <_dtoa_r+0xb56>
 80071c0:	08008860 	.word	0x08008860
 80071c4:	080087e4 	.word	0x080087e4

080071c8 <_free_r>:
 80071c8:	b538      	push	{r3, r4, r5, lr}
 80071ca:	4605      	mov	r5, r0
 80071cc:	2900      	cmp	r1, #0
 80071ce:	d041      	beq.n	8007254 <_free_r+0x8c>
 80071d0:	f851 3c04 	ldr.w	r3, [r1, #-4]
 80071d4:	1f0c      	subs	r4, r1, #4
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	bfb8      	it	lt
 80071da:	18e4      	addlt	r4, r4, r3
 80071dc:	f000 f8e8 	bl	80073b0 <__malloc_lock>
 80071e0:	4a1d      	ldr	r2, [pc, #116]	@ (8007258 <_free_r+0x90>)
 80071e2:	6813      	ldr	r3, [r2, #0]
 80071e4:	b933      	cbnz	r3, 80071f4 <_free_r+0x2c>
 80071e6:	6063      	str	r3, [r4, #4]
 80071e8:	6014      	str	r4, [r2, #0]
 80071ea:	4628      	mov	r0, r5
 80071ec:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 80071f0:	f000 b8e4 	b.w	80073bc <__malloc_unlock>
 80071f4:	42a3      	cmp	r3, r4
 80071f6:	d908      	bls.n	800720a <_free_r+0x42>
 80071f8:	6820      	ldr	r0, [r4, #0]
 80071fa:	1821      	adds	r1, r4, r0
 80071fc:	428b      	cmp	r3, r1
 80071fe:	bf01      	itttt	eq
 8007200:	6819      	ldreq	r1, [r3, #0]
 8007202:	685b      	ldreq	r3, [r3, #4]
 8007204:	1809      	addeq	r1, r1, r0
 8007206:	6021      	streq	r1, [r4, #0]
 8007208:	e7ed      	b.n	80071e6 <_free_r+0x1e>
 800720a:	461a      	mov	r2, r3
 800720c:	685b      	ldr	r3, [r3, #4]
 800720e:	b10b      	cbz	r3, 8007214 <_free_r+0x4c>
 8007210:	42a3      	cmp	r3, r4
 8007212:	d9fa      	bls.n	800720a <_free_r+0x42>
 8007214:	6811      	ldr	r1, [r2, #0]
 8007216:	1850      	adds	r0, r2, r1
 8007218:	42a0      	cmp	r0, r4
 800721a:	d10b      	bne.n	8007234 <_free_r+0x6c>
 800721c:	6820      	ldr	r0, [r4, #0]
 800721e:	4401      	add	r1, r0
 8007220:	1850      	adds	r0, r2, r1
 8007222:	4283      	cmp	r3, r0
 8007224:	6011      	str	r1, [r2, #0]
 8007226:	d1e0      	bne.n	80071ea <_free_r+0x22>
 8007228:	6818      	ldr	r0, [r3, #0]
 800722a:	685b      	ldr	r3, [r3, #4]
 800722c:	6053      	str	r3, [r2, #4]
 800722e:	4408      	add	r0, r1
 8007230:	6010      	str	r0, [r2, #0]
 8007232:	e7da      	b.n	80071ea <_free_r+0x22>
 8007234:	d902      	bls.n	800723c <_free_r+0x74>
 8007236:	230c      	movs	r3, #12
 8007238:	602b      	str	r3, [r5, #0]
 800723a:	e7d6      	b.n	80071ea <_free_r+0x22>
 800723c:	6820      	ldr	r0, [r4, #0]
 800723e:	1821      	adds	r1, r4, r0
 8007240:	428b      	cmp	r3, r1
 8007242:	bf04      	itt	eq
 8007244:	6819      	ldreq	r1, [r3, #0]
 8007246:	685b      	ldreq	r3, [r3, #4]
 8007248:	6063      	str	r3, [r4, #4]
 800724a:	bf04      	itt	eq
 800724c:	1809      	addeq	r1, r1, r0
 800724e:	6021      	streq	r1, [r4, #0]
 8007250:	6054      	str	r4, [r2, #4]
 8007252:	e7ca      	b.n	80071ea <_free_r+0x22>
 8007254:	bd38      	pop	{r3, r4, r5, pc}
 8007256:	bf00      	nop
 8007258:	20000518 	.word	0x20000518

0800725c <malloc>:
 800725c:	4b02      	ldr	r3, [pc, #8]	@ (8007268 <malloc+0xc>)
 800725e:	4601      	mov	r1, r0
 8007260:	6818      	ldr	r0, [r3, #0]
 8007262:	f000 b825 	b.w	80072b0 <_malloc_r>
 8007266:	bf00      	nop
 8007268:	2000001c 	.word	0x2000001c

0800726c <sbrk_aligned>:
 800726c:	b570      	push	{r4, r5, r6, lr}
 800726e:	4e0f      	ldr	r6, [pc, #60]	@ (80072ac <sbrk_aligned+0x40>)
 8007270:	460c      	mov	r4, r1
 8007272:	6831      	ldr	r1, [r6, #0]
 8007274:	4605      	mov	r5, r0
 8007276:	b911      	cbnz	r1, 800727e <sbrk_aligned+0x12>
 8007278:	f001 f81c 	bl	80082b4 <_sbrk_r>
 800727c:	6030      	str	r0, [r6, #0]
 800727e:	4621      	mov	r1, r4
 8007280:	4628      	mov	r0, r5
 8007282:	f001 f817 	bl	80082b4 <_sbrk_r>
 8007286:	1c43      	adds	r3, r0, #1
 8007288:	d103      	bne.n	8007292 <sbrk_aligned+0x26>
 800728a:	f04f 34ff 	mov.w	r4, #4294967295
 800728e:	4620      	mov	r0, r4
 8007290:	bd70      	pop	{r4, r5, r6, pc}
 8007292:	1cc4      	adds	r4, r0, #3
 8007294:	f024 0403 	bic.w	r4, r4, #3
 8007298:	42a0      	cmp	r0, r4
 800729a:	d0f8      	beq.n	800728e <sbrk_aligned+0x22>
 800729c:	1a21      	subs	r1, r4, r0
 800729e:	4628      	mov	r0, r5
 80072a0:	f001 f808 	bl	80082b4 <_sbrk_r>
 80072a4:	3001      	adds	r0, #1
 80072a6:	d1f2      	bne.n	800728e <sbrk_aligned+0x22>
 80072a8:	e7ef      	b.n	800728a <sbrk_aligned+0x1e>
 80072aa:	bf00      	nop
 80072ac:	20000514 	.word	0x20000514

080072b0 <_malloc_r>:
 80072b0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80072b4:	1ccd      	adds	r5, r1, #3
 80072b6:	f025 0503 	bic.w	r5, r5, #3
 80072ba:	3508      	adds	r5, #8
 80072bc:	2d0c      	cmp	r5, #12
 80072be:	bf38      	it	cc
 80072c0:	250c      	movcc	r5, #12
 80072c2:	2d00      	cmp	r5, #0
 80072c4:	4606      	mov	r6, r0
 80072c6:	db01      	blt.n	80072cc <_malloc_r+0x1c>
 80072c8:	42a9      	cmp	r1, r5
 80072ca:	d904      	bls.n	80072d6 <_malloc_r+0x26>
 80072cc:	230c      	movs	r3, #12
 80072ce:	6033      	str	r3, [r6, #0]
 80072d0:	2000      	movs	r0, #0
 80072d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80072d6:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 80073ac <_malloc_r+0xfc>
 80072da:	f000 f869 	bl	80073b0 <__malloc_lock>
 80072de:	f8d8 3000 	ldr.w	r3, [r8]
 80072e2:	461c      	mov	r4, r3
 80072e4:	bb44      	cbnz	r4, 8007338 <_malloc_r+0x88>
 80072e6:	4629      	mov	r1, r5
 80072e8:	4630      	mov	r0, r6
 80072ea:	f7ff ffbf 	bl	800726c <sbrk_aligned>
 80072ee:	1c43      	adds	r3, r0, #1
 80072f0:	4604      	mov	r4, r0
 80072f2:	d158      	bne.n	80073a6 <_malloc_r+0xf6>
 80072f4:	f8d8 4000 	ldr.w	r4, [r8]
 80072f8:	4627      	mov	r7, r4
 80072fa:	2f00      	cmp	r7, #0
 80072fc:	d143      	bne.n	8007386 <_malloc_r+0xd6>
 80072fe:	2c00      	cmp	r4, #0
 8007300:	d04b      	beq.n	800739a <_malloc_r+0xea>
 8007302:	6823      	ldr	r3, [r4, #0]
 8007304:	4639      	mov	r1, r7
 8007306:	4630      	mov	r0, r6
 8007308:	eb04 0903 	add.w	r9, r4, r3
 800730c:	f000 ffd2 	bl	80082b4 <_sbrk_r>
 8007310:	4581      	cmp	r9, r0
 8007312:	d142      	bne.n	800739a <_malloc_r+0xea>
 8007314:	6821      	ldr	r1, [r4, #0]
 8007316:	1a6d      	subs	r5, r5, r1
 8007318:	4629      	mov	r1, r5
 800731a:	4630      	mov	r0, r6
 800731c:	f7ff ffa6 	bl	800726c <sbrk_aligned>
 8007320:	3001      	adds	r0, #1
 8007322:	d03a      	beq.n	800739a <_malloc_r+0xea>
 8007324:	6823      	ldr	r3, [r4, #0]
 8007326:	442b      	add	r3, r5
 8007328:	6023      	str	r3, [r4, #0]
 800732a:	f8d8 3000 	ldr.w	r3, [r8]
 800732e:	685a      	ldr	r2, [r3, #4]
 8007330:	bb62      	cbnz	r2, 800738c <_malloc_r+0xdc>
 8007332:	f8c8 7000 	str.w	r7, [r8]
 8007336:	e00f      	b.n	8007358 <_malloc_r+0xa8>
 8007338:	6822      	ldr	r2, [r4, #0]
 800733a:	1b52      	subs	r2, r2, r5
 800733c:	d420      	bmi.n	8007380 <_malloc_r+0xd0>
 800733e:	2a0b      	cmp	r2, #11
 8007340:	d917      	bls.n	8007372 <_malloc_r+0xc2>
 8007342:	1961      	adds	r1, r4, r5
 8007344:	42a3      	cmp	r3, r4
 8007346:	6025      	str	r5, [r4, #0]
 8007348:	bf18      	it	ne
 800734a:	6059      	strne	r1, [r3, #4]
 800734c:	6863      	ldr	r3, [r4, #4]
 800734e:	bf08      	it	eq
 8007350:	f8c8 1000 	streq.w	r1, [r8]
 8007354:	5162      	str	r2, [r4, r5]
 8007356:	604b      	str	r3, [r1, #4]
 8007358:	4630      	mov	r0, r6
 800735a:	f000 f82f 	bl	80073bc <__malloc_unlock>
 800735e:	f104 000b 	add.w	r0, r4, #11
 8007362:	1d23      	adds	r3, r4, #4
 8007364:	f020 0007 	bic.w	r0, r0, #7
 8007368:	1ac2      	subs	r2, r0, r3
 800736a:	bf1c      	itt	ne
 800736c:	1a1b      	subne	r3, r3, r0
 800736e:	50a3      	strne	r3, [r4, r2]
 8007370:	e7af      	b.n	80072d2 <_malloc_r+0x22>
 8007372:	6862      	ldr	r2, [r4, #4]
 8007374:	42a3      	cmp	r3, r4
 8007376:	bf0c      	ite	eq
 8007378:	f8c8 2000 	streq.w	r2, [r8]
 800737c:	605a      	strne	r2, [r3, #4]
 800737e:	e7eb      	b.n	8007358 <_malloc_r+0xa8>
 8007380:	4623      	mov	r3, r4
 8007382:	6864      	ldr	r4, [r4, #4]
 8007384:	e7ae      	b.n	80072e4 <_malloc_r+0x34>
 8007386:	463c      	mov	r4, r7
 8007388:	687f      	ldr	r7, [r7, #4]
 800738a:	e7b6      	b.n	80072fa <_malloc_r+0x4a>
 800738c:	461a      	mov	r2, r3
 800738e:	685b      	ldr	r3, [r3, #4]
 8007390:	42a3      	cmp	r3, r4
 8007392:	d1fb      	bne.n	800738c <_malloc_r+0xdc>
 8007394:	2300      	movs	r3, #0
 8007396:	6053      	str	r3, [r2, #4]
 8007398:	e7de      	b.n	8007358 <_malloc_r+0xa8>
 800739a:	230c      	movs	r3, #12
 800739c:	6033      	str	r3, [r6, #0]
 800739e:	4630      	mov	r0, r6
 80073a0:	f000 f80c 	bl	80073bc <__malloc_unlock>
 80073a4:	e794      	b.n	80072d0 <_malloc_r+0x20>
 80073a6:	6005      	str	r5, [r0, #0]
 80073a8:	e7d6      	b.n	8007358 <_malloc_r+0xa8>
 80073aa:	bf00      	nop
 80073ac:	20000518 	.word	0x20000518

080073b0 <__malloc_lock>:
 80073b0:	4801      	ldr	r0, [pc, #4]	@ (80073b8 <__malloc_lock+0x8>)
 80073b2:	f7ff b8ba 	b.w	800652a <__retarget_lock_acquire_recursive>
 80073b6:	bf00      	nop
 80073b8:	20000510 	.word	0x20000510

080073bc <__malloc_unlock>:
 80073bc:	4801      	ldr	r0, [pc, #4]	@ (80073c4 <__malloc_unlock+0x8>)
 80073be:	f7ff b8b5 	b.w	800652c <__retarget_lock_release_recursive>
 80073c2:	bf00      	nop
 80073c4:	20000510 	.word	0x20000510

080073c8 <_Balloc>:
 80073c8:	b570      	push	{r4, r5, r6, lr}
 80073ca:	69c6      	ldr	r6, [r0, #28]
 80073cc:	4604      	mov	r4, r0
 80073ce:	460d      	mov	r5, r1
 80073d0:	b976      	cbnz	r6, 80073f0 <_Balloc+0x28>
 80073d2:	2010      	movs	r0, #16
 80073d4:	f7ff ff42 	bl	800725c <malloc>
 80073d8:	4602      	mov	r2, r0
 80073da:	61e0      	str	r0, [r4, #28]
 80073dc:	b920      	cbnz	r0, 80073e8 <_Balloc+0x20>
 80073de:	4b18      	ldr	r3, [pc, #96]	@ (8007440 <_Balloc+0x78>)
 80073e0:	4818      	ldr	r0, [pc, #96]	@ (8007444 <_Balloc+0x7c>)
 80073e2:	216b      	movs	r1, #107	@ 0x6b
 80073e4:	f000 ff84 	bl	80082f0 <__assert_func>
 80073e8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80073ec:	6006      	str	r6, [r0, #0]
 80073ee:	60c6      	str	r6, [r0, #12]
 80073f0:	69e6      	ldr	r6, [r4, #28]
 80073f2:	68f3      	ldr	r3, [r6, #12]
 80073f4:	b183      	cbz	r3, 8007418 <_Balloc+0x50>
 80073f6:	69e3      	ldr	r3, [r4, #28]
 80073f8:	68db      	ldr	r3, [r3, #12]
 80073fa:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 80073fe:	b9b8      	cbnz	r0, 8007430 <_Balloc+0x68>
 8007400:	2101      	movs	r1, #1
 8007402:	fa01 f605 	lsl.w	r6, r1, r5
 8007406:	1d72      	adds	r2, r6, #5
 8007408:	0092      	lsls	r2, r2, #2
 800740a:	4620      	mov	r0, r4
 800740c:	f000 ff8e 	bl	800832c <_calloc_r>
 8007410:	b160      	cbz	r0, 800742c <_Balloc+0x64>
 8007412:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007416:	e00e      	b.n	8007436 <_Balloc+0x6e>
 8007418:	2221      	movs	r2, #33	@ 0x21
 800741a:	2104      	movs	r1, #4
 800741c:	4620      	mov	r0, r4
 800741e:	f000 ff85 	bl	800832c <_calloc_r>
 8007422:	69e3      	ldr	r3, [r4, #28]
 8007424:	60f0      	str	r0, [r6, #12]
 8007426:	68db      	ldr	r3, [r3, #12]
 8007428:	2b00      	cmp	r3, #0
 800742a:	d1e4      	bne.n	80073f6 <_Balloc+0x2e>
 800742c:	2000      	movs	r0, #0
 800742e:	bd70      	pop	{r4, r5, r6, pc}
 8007430:	6802      	ldr	r2, [r0, #0]
 8007432:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007436:	2300      	movs	r3, #0
 8007438:	e9c0 3303 	strd	r3, r3, [r0, #12]
 800743c:	e7f7      	b.n	800742e <_Balloc+0x66>
 800743e:	bf00      	nop
 8007440:	080087f1 	.word	0x080087f1
 8007444:	08008871 	.word	0x08008871

08007448 <_Bfree>:
 8007448:	b570      	push	{r4, r5, r6, lr}
 800744a:	69c6      	ldr	r6, [r0, #28]
 800744c:	4605      	mov	r5, r0
 800744e:	460c      	mov	r4, r1
 8007450:	b976      	cbnz	r6, 8007470 <_Bfree+0x28>
 8007452:	2010      	movs	r0, #16
 8007454:	f7ff ff02 	bl	800725c <malloc>
 8007458:	4602      	mov	r2, r0
 800745a:	61e8      	str	r0, [r5, #28]
 800745c:	b920      	cbnz	r0, 8007468 <_Bfree+0x20>
 800745e:	4b09      	ldr	r3, [pc, #36]	@ (8007484 <_Bfree+0x3c>)
 8007460:	4809      	ldr	r0, [pc, #36]	@ (8007488 <_Bfree+0x40>)
 8007462:	218f      	movs	r1, #143	@ 0x8f
 8007464:	f000 ff44 	bl	80082f0 <__assert_func>
 8007468:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800746c:	6006      	str	r6, [r0, #0]
 800746e:	60c6      	str	r6, [r0, #12]
 8007470:	b13c      	cbz	r4, 8007482 <_Bfree+0x3a>
 8007472:	69eb      	ldr	r3, [r5, #28]
 8007474:	6862      	ldr	r2, [r4, #4]
 8007476:	68db      	ldr	r3, [r3, #12]
 8007478:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800747c:	6021      	str	r1, [r4, #0]
 800747e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007482:	bd70      	pop	{r4, r5, r6, pc}
 8007484:	080087f1 	.word	0x080087f1
 8007488:	08008871 	.word	0x08008871

0800748c <__multadd>:
 800748c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007490:	690d      	ldr	r5, [r1, #16]
 8007492:	4607      	mov	r7, r0
 8007494:	460c      	mov	r4, r1
 8007496:	461e      	mov	r6, r3
 8007498:	f101 0c14 	add.w	ip, r1, #20
 800749c:	2000      	movs	r0, #0
 800749e:	f8dc 3000 	ldr.w	r3, [ip]
 80074a2:	b299      	uxth	r1, r3
 80074a4:	fb02 6101 	mla	r1, r2, r1, r6
 80074a8:	0c1e      	lsrs	r6, r3, #16
 80074aa:	0c0b      	lsrs	r3, r1, #16
 80074ac:	fb02 3306 	mla	r3, r2, r6, r3
 80074b0:	b289      	uxth	r1, r1
 80074b2:	3001      	adds	r0, #1
 80074b4:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 80074b8:	4285      	cmp	r5, r0
 80074ba:	f84c 1b04 	str.w	r1, [ip], #4
 80074be:	ea4f 4613 	mov.w	r6, r3, lsr #16
 80074c2:	dcec      	bgt.n	800749e <__multadd+0x12>
 80074c4:	b30e      	cbz	r6, 800750a <__multadd+0x7e>
 80074c6:	68a3      	ldr	r3, [r4, #8]
 80074c8:	42ab      	cmp	r3, r5
 80074ca:	dc19      	bgt.n	8007500 <__multadd+0x74>
 80074cc:	6861      	ldr	r1, [r4, #4]
 80074ce:	4638      	mov	r0, r7
 80074d0:	3101      	adds	r1, #1
 80074d2:	f7ff ff79 	bl	80073c8 <_Balloc>
 80074d6:	4680      	mov	r8, r0
 80074d8:	b928      	cbnz	r0, 80074e6 <__multadd+0x5a>
 80074da:	4602      	mov	r2, r0
 80074dc:	4b0c      	ldr	r3, [pc, #48]	@ (8007510 <__multadd+0x84>)
 80074de:	480d      	ldr	r0, [pc, #52]	@ (8007514 <__multadd+0x88>)
 80074e0:	21ba      	movs	r1, #186	@ 0xba
 80074e2:	f000 ff05 	bl	80082f0 <__assert_func>
 80074e6:	6922      	ldr	r2, [r4, #16]
 80074e8:	3202      	adds	r2, #2
 80074ea:	f104 010c 	add.w	r1, r4, #12
 80074ee:	0092      	lsls	r2, r2, #2
 80074f0:	300c      	adds	r0, #12
 80074f2:	f000 feef 	bl	80082d4 <memcpy>
 80074f6:	4621      	mov	r1, r4
 80074f8:	4638      	mov	r0, r7
 80074fa:	f7ff ffa5 	bl	8007448 <_Bfree>
 80074fe:	4644      	mov	r4, r8
 8007500:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007504:	3501      	adds	r5, #1
 8007506:	615e      	str	r6, [r3, #20]
 8007508:	6125      	str	r5, [r4, #16]
 800750a:	4620      	mov	r0, r4
 800750c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007510:	08008860 	.word	0x08008860
 8007514:	08008871 	.word	0x08008871

08007518 <__hi0bits>:
 8007518:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 800751c:	4603      	mov	r3, r0
 800751e:	bf36      	itet	cc
 8007520:	0403      	lslcc	r3, r0, #16
 8007522:	2000      	movcs	r0, #0
 8007524:	2010      	movcc	r0, #16
 8007526:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800752a:	bf3c      	itt	cc
 800752c:	021b      	lslcc	r3, r3, #8
 800752e:	3008      	addcc	r0, #8
 8007530:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007534:	bf3c      	itt	cc
 8007536:	011b      	lslcc	r3, r3, #4
 8007538:	3004      	addcc	r0, #4
 800753a:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800753e:	bf3c      	itt	cc
 8007540:	009b      	lslcc	r3, r3, #2
 8007542:	3002      	addcc	r0, #2
 8007544:	2b00      	cmp	r3, #0
 8007546:	db05      	blt.n	8007554 <__hi0bits+0x3c>
 8007548:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 800754c:	f100 0001 	add.w	r0, r0, #1
 8007550:	bf08      	it	eq
 8007552:	2020      	moveq	r0, #32
 8007554:	4770      	bx	lr

08007556 <__lo0bits>:
 8007556:	6803      	ldr	r3, [r0, #0]
 8007558:	4602      	mov	r2, r0
 800755a:	f013 0007 	ands.w	r0, r3, #7
 800755e:	d00b      	beq.n	8007578 <__lo0bits+0x22>
 8007560:	07d9      	lsls	r1, r3, #31
 8007562:	d421      	bmi.n	80075a8 <__lo0bits+0x52>
 8007564:	0798      	lsls	r0, r3, #30
 8007566:	bf49      	itett	mi
 8007568:	085b      	lsrmi	r3, r3, #1
 800756a:	089b      	lsrpl	r3, r3, #2
 800756c:	2001      	movmi	r0, #1
 800756e:	6013      	strmi	r3, [r2, #0]
 8007570:	bf5c      	itt	pl
 8007572:	6013      	strpl	r3, [r2, #0]
 8007574:	2002      	movpl	r0, #2
 8007576:	4770      	bx	lr
 8007578:	b299      	uxth	r1, r3
 800757a:	b909      	cbnz	r1, 8007580 <__lo0bits+0x2a>
 800757c:	0c1b      	lsrs	r3, r3, #16
 800757e:	2010      	movs	r0, #16
 8007580:	b2d9      	uxtb	r1, r3
 8007582:	b909      	cbnz	r1, 8007588 <__lo0bits+0x32>
 8007584:	3008      	adds	r0, #8
 8007586:	0a1b      	lsrs	r3, r3, #8
 8007588:	0719      	lsls	r1, r3, #28
 800758a:	bf04      	itt	eq
 800758c:	091b      	lsreq	r3, r3, #4
 800758e:	3004      	addeq	r0, #4
 8007590:	0799      	lsls	r1, r3, #30
 8007592:	bf04      	itt	eq
 8007594:	089b      	lsreq	r3, r3, #2
 8007596:	3002      	addeq	r0, #2
 8007598:	07d9      	lsls	r1, r3, #31
 800759a:	d403      	bmi.n	80075a4 <__lo0bits+0x4e>
 800759c:	085b      	lsrs	r3, r3, #1
 800759e:	f100 0001 	add.w	r0, r0, #1
 80075a2:	d003      	beq.n	80075ac <__lo0bits+0x56>
 80075a4:	6013      	str	r3, [r2, #0]
 80075a6:	4770      	bx	lr
 80075a8:	2000      	movs	r0, #0
 80075aa:	4770      	bx	lr
 80075ac:	2020      	movs	r0, #32
 80075ae:	4770      	bx	lr

080075b0 <__i2b>:
 80075b0:	b510      	push	{r4, lr}
 80075b2:	460c      	mov	r4, r1
 80075b4:	2101      	movs	r1, #1
 80075b6:	f7ff ff07 	bl	80073c8 <_Balloc>
 80075ba:	4602      	mov	r2, r0
 80075bc:	b928      	cbnz	r0, 80075ca <__i2b+0x1a>
 80075be:	4b05      	ldr	r3, [pc, #20]	@ (80075d4 <__i2b+0x24>)
 80075c0:	4805      	ldr	r0, [pc, #20]	@ (80075d8 <__i2b+0x28>)
 80075c2:	f240 1145 	movw	r1, #325	@ 0x145
 80075c6:	f000 fe93 	bl	80082f0 <__assert_func>
 80075ca:	2301      	movs	r3, #1
 80075cc:	6144      	str	r4, [r0, #20]
 80075ce:	6103      	str	r3, [r0, #16]
 80075d0:	bd10      	pop	{r4, pc}
 80075d2:	bf00      	nop
 80075d4:	08008860 	.word	0x08008860
 80075d8:	08008871 	.word	0x08008871

080075dc <__multiply>:
 80075dc:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80075e0:	4614      	mov	r4, r2
 80075e2:	690a      	ldr	r2, [r1, #16]
 80075e4:	6923      	ldr	r3, [r4, #16]
 80075e6:	429a      	cmp	r2, r3
 80075e8:	bfa8      	it	ge
 80075ea:	4623      	movge	r3, r4
 80075ec:	460f      	mov	r7, r1
 80075ee:	bfa4      	itt	ge
 80075f0:	460c      	movge	r4, r1
 80075f2:	461f      	movge	r7, r3
 80075f4:	f8d4 a010 	ldr.w	sl, [r4, #16]
 80075f8:	f8d7 9010 	ldr.w	r9, [r7, #16]
 80075fc:	68a3      	ldr	r3, [r4, #8]
 80075fe:	6861      	ldr	r1, [r4, #4]
 8007600:	eb0a 0609 	add.w	r6, sl, r9
 8007604:	42b3      	cmp	r3, r6
 8007606:	b085      	sub	sp, #20
 8007608:	bfb8      	it	lt
 800760a:	3101      	addlt	r1, #1
 800760c:	f7ff fedc 	bl	80073c8 <_Balloc>
 8007610:	b930      	cbnz	r0, 8007620 <__multiply+0x44>
 8007612:	4602      	mov	r2, r0
 8007614:	4b44      	ldr	r3, [pc, #272]	@ (8007728 <__multiply+0x14c>)
 8007616:	4845      	ldr	r0, [pc, #276]	@ (800772c <__multiply+0x150>)
 8007618:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800761c:	f000 fe68 	bl	80082f0 <__assert_func>
 8007620:	f100 0514 	add.w	r5, r0, #20
 8007624:	eb05 0886 	add.w	r8, r5, r6, lsl #2
 8007628:	462b      	mov	r3, r5
 800762a:	2200      	movs	r2, #0
 800762c:	4543      	cmp	r3, r8
 800762e:	d321      	bcc.n	8007674 <__multiply+0x98>
 8007630:	f107 0114 	add.w	r1, r7, #20
 8007634:	f104 0214 	add.w	r2, r4, #20
 8007638:	eb02 028a 	add.w	r2, r2, sl, lsl #2
 800763c:	eb01 0389 	add.w	r3, r1, r9, lsl #2
 8007640:	9302      	str	r3, [sp, #8]
 8007642:	1b13      	subs	r3, r2, r4
 8007644:	3b15      	subs	r3, #21
 8007646:	f023 0303 	bic.w	r3, r3, #3
 800764a:	3304      	adds	r3, #4
 800764c:	f104 0715 	add.w	r7, r4, #21
 8007650:	42ba      	cmp	r2, r7
 8007652:	bf38      	it	cc
 8007654:	2304      	movcc	r3, #4
 8007656:	9301      	str	r3, [sp, #4]
 8007658:	9b02      	ldr	r3, [sp, #8]
 800765a:	9103      	str	r1, [sp, #12]
 800765c:	428b      	cmp	r3, r1
 800765e:	d80c      	bhi.n	800767a <__multiply+0x9e>
 8007660:	2e00      	cmp	r6, #0
 8007662:	dd03      	ble.n	800766c <__multiply+0x90>
 8007664:	f858 3d04 	ldr.w	r3, [r8, #-4]!
 8007668:	2b00      	cmp	r3, #0
 800766a:	d05b      	beq.n	8007724 <__multiply+0x148>
 800766c:	6106      	str	r6, [r0, #16]
 800766e:	b005      	add	sp, #20
 8007670:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007674:	f843 2b04 	str.w	r2, [r3], #4
 8007678:	e7d8      	b.n	800762c <__multiply+0x50>
 800767a:	f8b1 a000 	ldrh.w	sl, [r1]
 800767e:	f1ba 0f00 	cmp.w	sl, #0
 8007682:	d024      	beq.n	80076ce <__multiply+0xf2>
 8007684:	f104 0e14 	add.w	lr, r4, #20
 8007688:	46a9      	mov	r9, r5
 800768a:	f04f 0c00 	mov.w	ip, #0
 800768e:	f85e 7b04 	ldr.w	r7, [lr], #4
 8007692:	f8d9 3000 	ldr.w	r3, [r9]
 8007696:	fa1f fb87 	uxth.w	fp, r7
 800769a:	b29b      	uxth	r3, r3
 800769c:	fb0a 330b 	mla	r3, sl, fp, r3
 80076a0:	ea4f 4b17 	mov.w	fp, r7, lsr #16
 80076a4:	f8d9 7000 	ldr.w	r7, [r9]
 80076a8:	4463      	add	r3, ip
 80076aa:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80076ae:	fb0a c70b 	mla	r7, sl, fp, ip
 80076b2:	eb07 4713 	add.w	r7, r7, r3, lsr #16
 80076b6:	b29b      	uxth	r3, r3
 80076b8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80076bc:	4572      	cmp	r2, lr
 80076be:	f849 3b04 	str.w	r3, [r9], #4
 80076c2:	ea4f 4c17 	mov.w	ip, r7, lsr #16
 80076c6:	d8e2      	bhi.n	800768e <__multiply+0xb2>
 80076c8:	9b01      	ldr	r3, [sp, #4]
 80076ca:	f845 c003 	str.w	ip, [r5, r3]
 80076ce:	9b03      	ldr	r3, [sp, #12]
 80076d0:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80076d4:	3104      	adds	r1, #4
 80076d6:	f1b9 0f00 	cmp.w	r9, #0
 80076da:	d021      	beq.n	8007720 <__multiply+0x144>
 80076dc:	682b      	ldr	r3, [r5, #0]
 80076de:	f104 0c14 	add.w	ip, r4, #20
 80076e2:	46ae      	mov	lr, r5
 80076e4:	f04f 0a00 	mov.w	sl, #0
 80076e8:	f8bc b000 	ldrh.w	fp, [ip]
 80076ec:	f8be 7002 	ldrh.w	r7, [lr, #2]
 80076f0:	fb09 770b 	mla	r7, r9, fp, r7
 80076f4:	4457      	add	r7, sl
 80076f6:	b29b      	uxth	r3, r3
 80076f8:	ea43 4307 	orr.w	r3, r3, r7, lsl #16
 80076fc:	f84e 3b04 	str.w	r3, [lr], #4
 8007700:	f85c 3b04 	ldr.w	r3, [ip], #4
 8007704:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8007708:	f8be 3000 	ldrh.w	r3, [lr]
 800770c:	fb09 330a 	mla	r3, r9, sl, r3
 8007710:	eb03 4317 	add.w	r3, r3, r7, lsr #16
 8007714:	4562      	cmp	r2, ip
 8007716:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800771a:	d8e5      	bhi.n	80076e8 <__multiply+0x10c>
 800771c:	9f01      	ldr	r7, [sp, #4]
 800771e:	51eb      	str	r3, [r5, r7]
 8007720:	3504      	adds	r5, #4
 8007722:	e799      	b.n	8007658 <__multiply+0x7c>
 8007724:	3e01      	subs	r6, #1
 8007726:	e79b      	b.n	8007660 <__multiply+0x84>
 8007728:	08008860 	.word	0x08008860
 800772c:	08008871 	.word	0x08008871

08007730 <__pow5mult>:
 8007730:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007734:	4615      	mov	r5, r2
 8007736:	f012 0203 	ands.w	r2, r2, #3
 800773a:	4607      	mov	r7, r0
 800773c:	460e      	mov	r6, r1
 800773e:	d007      	beq.n	8007750 <__pow5mult+0x20>
 8007740:	4c25      	ldr	r4, [pc, #148]	@ (80077d8 <__pow5mult+0xa8>)
 8007742:	3a01      	subs	r2, #1
 8007744:	2300      	movs	r3, #0
 8007746:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800774a:	f7ff fe9f 	bl	800748c <__multadd>
 800774e:	4606      	mov	r6, r0
 8007750:	10ad      	asrs	r5, r5, #2
 8007752:	d03d      	beq.n	80077d0 <__pow5mult+0xa0>
 8007754:	69fc      	ldr	r4, [r7, #28]
 8007756:	b97c      	cbnz	r4, 8007778 <__pow5mult+0x48>
 8007758:	2010      	movs	r0, #16
 800775a:	f7ff fd7f 	bl	800725c <malloc>
 800775e:	4602      	mov	r2, r0
 8007760:	61f8      	str	r0, [r7, #28]
 8007762:	b928      	cbnz	r0, 8007770 <__pow5mult+0x40>
 8007764:	4b1d      	ldr	r3, [pc, #116]	@ (80077dc <__pow5mult+0xac>)
 8007766:	481e      	ldr	r0, [pc, #120]	@ (80077e0 <__pow5mult+0xb0>)
 8007768:	f240 11b3 	movw	r1, #435	@ 0x1b3
 800776c:	f000 fdc0 	bl	80082f0 <__assert_func>
 8007770:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8007774:	6004      	str	r4, [r0, #0]
 8007776:	60c4      	str	r4, [r0, #12]
 8007778:	f8d7 801c 	ldr.w	r8, [r7, #28]
 800777c:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8007780:	b94c      	cbnz	r4, 8007796 <__pow5mult+0x66>
 8007782:	f240 2171 	movw	r1, #625	@ 0x271
 8007786:	4638      	mov	r0, r7
 8007788:	f7ff ff12 	bl	80075b0 <__i2b>
 800778c:	2300      	movs	r3, #0
 800778e:	f8c8 0008 	str.w	r0, [r8, #8]
 8007792:	4604      	mov	r4, r0
 8007794:	6003      	str	r3, [r0, #0]
 8007796:	f04f 0900 	mov.w	r9, #0
 800779a:	07eb      	lsls	r3, r5, #31
 800779c:	d50a      	bpl.n	80077b4 <__pow5mult+0x84>
 800779e:	4631      	mov	r1, r6
 80077a0:	4622      	mov	r2, r4
 80077a2:	4638      	mov	r0, r7
 80077a4:	f7ff ff1a 	bl	80075dc <__multiply>
 80077a8:	4631      	mov	r1, r6
 80077aa:	4680      	mov	r8, r0
 80077ac:	4638      	mov	r0, r7
 80077ae:	f7ff fe4b 	bl	8007448 <_Bfree>
 80077b2:	4646      	mov	r6, r8
 80077b4:	106d      	asrs	r5, r5, #1
 80077b6:	d00b      	beq.n	80077d0 <__pow5mult+0xa0>
 80077b8:	6820      	ldr	r0, [r4, #0]
 80077ba:	b938      	cbnz	r0, 80077cc <__pow5mult+0x9c>
 80077bc:	4622      	mov	r2, r4
 80077be:	4621      	mov	r1, r4
 80077c0:	4638      	mov	r0, r7
 80077c2:	f7ff ff0b 	bl	80075dc <__multiply>
 80077c6:	6020      	str	r0, [r4, #0]
 80077c8:	f8c0 9000 	str.w	r9, [r0]
 80077cc:	4604      	mov	r4, r0
 80077ce:	e7e4      	b.n	800779a <__pow5mult+0x6a>
 80077d0:	4630      	mov	r0, r6
 80077d2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80077d6:	bf00      	nop
 80077d8:	080088cc 	.word	0x080088cc
 80077dc:	080087f1 	.word	0x080087f1
 80077e0:	08008871 	.word	0x08008871

080077e4 <__lshift>:
 80077e4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80077e8:	460c      	mov	r4, r1
 80077ea:	6849      	ldr	r1, [r1, #4]
 80077ec:	6923      	ldr	r3, [r4, #16]
 80077ee:	eb03 1862 	add.w	r8, r3, r2, asr #5
 80077f2:	68a3      	ldr	r3, [r4, #8]
 80077f4:	4607      	mov	r7, r0
 80077f6:	4691      	mov	r9, r2
 80077f8:	ea4f 1a62 	mov.w	sl, r2, asr #5
 80077fc:	f108 0601 	add.w	r6, r8, #1
 8007800:	42b3      	cmp	r3, r6
 8007802:	db0b      	blt.n	800781c <__lshift+0x38>
 8007804:	4638      	mov	r0, r7
 8007806:	f7ff fddf 	bl	80073c8 <_Balloc>
 800780a:	4605      	mov	r5, r0
 800780c:	b948      	cbnz	r0, 8007822 <__lshift+0x3e>
 800780e:	4602      	mov	r2, r0
 8007810:	4b28      	ldr	r3, [pc, #160]	@ (80078b4 <__lshift+0xd0>)
 8007812:	4829      	ldr	r0, [pc, #164]	@ (80078b8 <__lshift+0xd4>)
 8007814:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8007818:	f000 fd6a 	bl	80082f0 <__assert_func>
 800781c:	3101      	adds	r1, #1
 800781e:	005b      	lsls	r3, r3, #1
 8007820:	e7ee      	b.n	8007800 <__lshift+0x1c>
 8007822:	2300      	movs	r3, #0
 8007824:	f100 0114 	add.w	r1, r0, #20
 8007828:	f100 0210 	add.w	r2, r0, #16
 800782c:	4618      	mov	r0, r3
 800782e:	4553      	cmp	r3, sl
 8007830:	db33      	blt.n	800789a <__lshift+0xb6>
 8007832:	6920      	ldr	r0, [r4, #16]
 8007834:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8007838:	f104 0314 	add.w	r3, r4, #20
 800783c:	f019 091f 	ands.w	r9, r9, #31
 8007840:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8007844:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8007848:	d02b      	beq.n	80078a2 <__lshift+0xbe>
 800784a:	f1c9 0e20 	rsb	lr, r9, #32
 800784e:	468a      	mov	sl, r1
 8007850:	2200      	movs	r2, #0
 8007852:	6818      	ldr	r0, [r3, #0]
 8007854:	fa00 f009 	lsl.w	r0, r0, r9
 8007858:	4310      	orrs	r0, r2
 800785a:	f84a 0b04 	str.w	r0, [sl], #4
 800785e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007862:	459c      	cmp	ip, r3
 8007864:	fa22 f20e 	lsr.w	r2, r2, lr
 8007868:	d8f3      	bhi.n	8007852 <__lshift+0x6e>
 800786a:	ebac 0304 	sub.w	r3, ip, r4
 800786e:	3b15      	subs	r3, #21
 8007870:	f023 0303 	bic.w	r3, r3, #3
 8007874:	3304      	adds	r3, #4
 8007876:	f104 0015 	add.w	r0, r4, #21
 800787a:	4584      	cmp	ip, r0
 800787c:	bf38      	it	cc
 800787e:	2304      	movcc	r3, #4
 8007880:	50ca      	str	r2, [r1, r3]
 8007882:	b10a      	cbz	r2, 8007888 <__lshift+0xa4>
 8007884:	f108 0602 	add.w	r6, r8, #2
 8007888:	3e01      	subs	r6, #1
 800788a:	4638      	mov	r0, r7
 800788c:	612e      	str	r6, [r5, #16]
 800788e:	4621      	mov	r1, r4
 8007890:	f7ff fdda 	bl	8007448 <_Bfree>
 8007894:	4628      	mov	r0, r5
 8007896:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800789a:	f842 0f04 	str.w	r0, [r2, #4]!
 800789e:	3301      	adds	r3, #1
 80078a0:	e7c5      	b.n	800782e <__lshift+0x4a>
 80078a2:	3904      	subs	r1, #4
 80078a4:	f853 2b04 	ldr.w	r2, [r3], #4
 80078a8:	f841 2f04 	str.w	r2, [r1, #4]!
 80078ac:	459c      	cmp	ip, r3
 80078ae:	d8f9      	bhi.n	80078a4 <__lshift+0xc0>
 80078b0:	e7ea      	b.n	8007888 <__lshift+0xa4>
 80078b2:	bf00      	nop
 80078b4:	08008860 	.word	0x08008860
 80078b8:	08008871 	.word	0x08008871

080078bc <__mcmp>:
 80078bc:	690a      	ldr	r2, [r1, #16]
 80078be:	4603      	mov	r3, r0
 80078c0:	6900      	ldr	r0, [r0, #16]
 80078c2:	1a80      	subs	r0, r0, r2
 80078c4:	b530      	push	{r4, r5, lr}
 80078c6:	d10e      	bne.n	80078e6 <__mcmp+0x2a>
 80078c8:	3314      	adds	r3, #20
 80078ca:	3114      	adds	r1, #20
 80078cc:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80078d0:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80078d4:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80078d8:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80078dc:	4295      	cmp	r5, r2
 80078de:	d003      	beq.n	80078e8 <__mcmp+0x2c>
 80078e0:	d205      	bcs.n	80078ee <__mcmp+0x32>
 80078e2:	f04f 30ff 	mov.w	r0, #4294967295
 80078e6:	bd30      	pop	{r4, r5, pc}
 80078e8:	42a3      	cmp	r3, r4
 80078ea:	d3f3      	bcc.n	80078d4 <__mcmp+0x18>
 80078ec:	e7fb      	b.n	80078e6 <__mcmp+0x2a>
 80078ee:	2001      	movs	r0, #1
 80078f0:	e7f9      	b.n	80078e6 <__mcmp+0x2a>
	...

080078f4 <__mdiff>:
 80078f4:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078f8:	4689      	mov	r9, r1
 80078fa:	4606      	mov	r6, r0
 80078fc:	4611      	mov	r1, r2
 80078fe:	4648      	mov	r0, r9
 8007900:	4614      	mov	r4, r2
 8007902:	f7ff ffdb 	bl	80078bc <__mcmp>
 8007906:	1e05      	subs	r5, r0, #0
 8007908:	d112      	bne.n	8007930 <__mdiff+0x3c>
 800790a:	4629      	mov	r1, r5
 800790c:	4630      	mov	r0, r6
 800790e:	f7ff fd5b 	bl	80073c8 <_Balloc>
 8007912:	4602      	mov	r2, r0
 8007914:	b928      	cbnz	r0, 8007922 <__mdiff+0x2e>
 8007916:	4b3f      	ldr	r3, [pc, #252]	@ (8007a14 <__mdiff+0x120>)
 8007918:	f240 2137 	movw	r1, #567	@ 0x237
 800791c:	483e      	ldr	r0, [pc, #248]	@ (8007a18 <__mdiff+0x124>)
 800791e:	f000 fce7 	bl	80082f0 <__assert_func>
 8007922:	2301      	movs	r3, #1
 8007924:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8007928:	4610      	mov	r0, r2
 800792a:	b003      	add	sp, #12
 800792c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007930:	bfbc      	itt	lt
 8007932:	464b      	movlt	r3, r9
 8007934:	46a1      	movlt	r9, r4
 8007936:	4630      	mov	r0, r6
 8007938:	f8d9 1004 	ldr.w	r1, [r9, #4]
 800793c:	bfba      	itte	lt
 800793e:	461c      	movlt	r4, r3
 8007940:	2501      	movlt	r5, #1
 8007942:	2500      	movge	r5, #0
 8007944:	f7ff fd40 	bl	80073c8 <_Balloc>
 8007948:	4602      	mov	r2, r0
 800794a:	b918      	cbnz	r0, 8007954 <__mdiff+0x60>
 800794c:	4b31      	ldr	r3, [pc, #196]	@ (8007a14 <__mdiff+0x120>)
 800794e:	f240 2145 	movw	r1, #581	@ 0x245
 8007952:	e7e3      	b.n	800791c <__mdiff+0x28>
 8007954:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8007958:	6926      	ldr	r6, [r4, #16]
 800795a:	60c5      	str	r5, [r0, #12]
 800795c:	f109 0310 	add.w	r3, r9, #16
 8007960:	f109 0514 	add.w	r5, r9, #20
 8007964:	f104 0e14 	add.w	lr, r4, #20
 8007968:	f100 0b14 	add.w	fp, r0, #20
 800796c:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8007970:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8007974:	9301      	str	r3, [sp, #4]
 8007976:	46d9      	mov	r9, fp
 8007978:	f04f 0c00 	mov.w	ip, #0
 800797c:	9b01      	ldr	r3, [sp, #4]
 800797e:	f85e 0b04 	ldr.w	r0, [lr], #4
 8007982:	f853 af04 	ldr.w	sl, [r3, #4]!
 8007986:	9301      	str	r3, [sp, #4]
 8007988:	fa1f f38a 	uxth.w	r3, sl
 800798c:	4619      	mov	r1, r3
 800798e:	b283      	uxth	r3, r0
 8007990:	1acb      	subs	r3, r1, r3
 8007992:	0c00      	lsrs	r0, r0, #16
 8007994:	4463      	add	r3, ip
 8007996:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 800799a:	eb00 4023 	add.w	r0, r0, r3, asr #16
 800799e:	b29b      	uxth	r3, r3
 80079a0:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80079a4:	4576      	cmp	r6, lr
 80079a6:	f849 3b04 	str.w	r3, [r9], #4
 80079aa:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80079ae:	d8e5      	bhi.n	800797c <__mdiff+0x88>
 80079b0:	1b33      	subs	r3, r6, r4
 80079b2:	3b15      	subs	r3, #21
 80079b4:	f023 0303 	bic.w	r3, r3, #3
 80079b8:	3415      	adds	r4, #21
 80079ba:	3304      	adds	r3, #4
 80079bc:	42a6      	cmp	r6, r4
 80079be:	bf38      	it	cc
 80079c0:	2304      	movcc	r3, #4
 80079c2:	441d      	add	r5, r3
 80079c4:	445b      	add	r3, fp
 80079c6:	461e      	mov	r6, r3
 80079c8:	462c      	mov	r4, r5
 80079ca:	4544      	cmp	r4, r8
 80079cc:	d30e      	bcc.n	80079ec <__mdiff+0xf8>
 80079ce:	f108 0103 	add.w	r1, r8, #3
 80079d2:	1b49      	subs	r1, r1, r5
 80079d4:	f021 0103 	bic.w	r1, r1, #3
 80079d8:	3d03      	subs	r5, #3
 80079da:	45a8      	cmp	r8, r5
 80079dc:	bf38      	it	cc
 80079de:	2100      	movcc	r1, #0
 80079e0:	440b      	add	r3, r1
 80079e2:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80079e6:	b191      	cbz	r1, 8007a0e <__mdiff+0x11a>
 80079e8:	6117      	str	r7, [r2, #16]
 80079ea:	e79d      	b.n	8007928 <__mdiff+0x34>
 80079ec:	f854 1b04 	ldr.w	r1, [r4], #4
 80079f0:	46e6      	mov	lr, ip
 80079f2:	0c08      	lsrs	r0, r1, #16
 80079f4:	fa1c fc81 	uxtah	ip, ip, r1
 80079f8:	4471      	add	r1, lr
 80079fa:	eb00 402c 	add.w	r0, r0, ip, asr #16
 80079fe:	b289      	uxth	r1, r1
 8007a00:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8007a04:	f846 1b04 	str.w	r1, [r6], #4
 8007a08:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8007a0c:	e7dd      	b.n	80079ca <__mdiff+0xd6>
 8007a0e:	3f01      	subs	r7, #1
 8007a10:	e7e7      	b.n	80079e2 <__mdiff+0xee>
 8007a12:	bf00      	nop
 8007a14:	08008860 	.word	0x08008860
 8007a18:	08008871 	.word	0x08008871

08007a1c <__d2b>:
 8007a1c:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8007a20:	460f      	mov	r7, r1
 8007a22:	2101      	movs	r1, #1
 8007a24:	ec59 8b10 	vmov	r8, r9, d0
 8007a28:	4616      	mov	r6, r2
 8007a2a:	f7ff fccd 	bl	80073c8 <_Balloc>
 8007a2e:	4604      	mov	r4, r0
 8007a30:	b930      	cbnz	r0, 8007a40 <__d2b+0x24>
 8007a32:	4602      	mov	r2, r0
 8007a34:	4b23      	ldr	r3, [pc, #140]	@ (8007ac4 <__d2b+0xa8>)
 8007a36:	4824      	ldr	r0, [pc, #144]	@ (8007ac8 <__d2b+0xac>)
 8007a38:	f240 310f 	movw	r1, #783	@ 0x30f
 8007a3c:	f000 fc58 	bl	80082f0 <__assert_func>
 8007a40:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8007a44:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8007a48:	b10d      	cbz	r5, 8007a4e <__d2b+0x32>
 8007a4a:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8007a4e:	9301      	str	r3, [sp, #4]
 8007a50:	f1b8 0300 	subs.w	r3, r8, #0
 8007a54:	d023      	beq.n	8007a9e <__d2b+0x82>
 8007a56:	4668      	mov	r0, sp
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	f7ff fd7c 	bl	8007556 <__lo0bits>
 8007a5e:	e9dd 1200 	ldrd	r1, r2, [sp]
 8007a62:	b1d0      	cbz	r0, 8007a9a <__d2b+0x7e>
 8007a64:	f1c0 0320 	rsb	r3, r0, #32
 8007a68:	fa02 f303 	lsl.w	r3, r2, r3
 8007a6c:	430b      	orrs	r3, r1
 8007a6e:	40c2      	lsrs	r2, r0
 8007a70:	6163      	str	r3, [r4, #20]
 8007a72:	9201      	str	r2, [sp, #4]
 8007a74:	9b01      	ldr	r3, [sp, #4]
 8007a76:	61a3      	str	r3, [r4, #24]
 8007a78:	2b00      	cmp	r3, #0
 8007a7a:	bf0c      	ite	eq
 8007a7c:	2201      	moveq	r2, #1
 8007a7e:	2202      	movne	r2, #2
 8007a80:	6122      	str	r2, [r4, #16]
 8007a82:	b1a5      	cbz	r5, 8007aae <__d2b+0x92>
 8007a84:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8007a88:	4405      	add	r5, r0
 8007a8a:	603d      	str	r5, [r7, #0]
 8007a8c:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8007a90:	6030      	str	r0, [r6, #0]
 8007a92:	4620      	mov	r0, r4
 8007a94:	b003      	add	sp, #12
 8007a96:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8007a9a:	6161      	str	r1, [r4, #20]
 8007a9c:	e7ea      	b.n	8007a74 <__d2b+0x58>
 8007a9e:	a801      	add	r0, sp, #4
 8007aa0:	f7ff fd59 	bl	8007556 <__lo0bits>
 8007aa4:	9b01      	ldr	r3, [sp, #4]
 8007aa6:	6163      	str	r3, [r4, #20]
 8007aa8:	3020      	adds	r0, #32
 8007aaa:	2201      	movs	r2, #1
 8007aac:	e7e8      	b.n	8007a80 <__d2b+0x64>
 8007aae:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8007ab2:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8007ab6:	6038      	str	r0, [r7, #0]
 8007ab8:	6918      	ldr	r0, [r3, #16]
 8007aba:	f7ff fd2d 	bl	8007518 <__hi0bits>
 8007abe:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8007ac2:	e7e5      	b.n	8007a90 <__d2b+0x74>
 8007ac4:	08008860 	.word	0x08008860
 8007ac8:	08008871 	.word	0x08008871

08007acc <__ssputs_r>:
 8007acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8007ad0:	688e      	ldr	r6, [r1, #8]
 8007ad2:	461f      	mov	r7, r3
 8007ad4:	42be      	cmp	r6, r7
 8007ad6:	680b      	ldr	r3, [r1, #0]
 8007ad8:	4682      	mov	sl, r0
 8007ada:	460c      	mov	r4, r1
 8007adc:	4690      	mov	r8, r2
 8007ade:	d82d      	bhi.n	8007b3c <__ssputs_r+0x70>
 8007ae0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8007ae4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8007ae8:	d026      	beq.n	8007b38 <__ssputs_r+0x6c>
 8007aea:	6965      	ldr	r5, [r4, #20]
 8007aec:	6909      	ldr	r1, [r1, #16]
 8007aee:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8007af2:	eba3 0901 	sub.w	r9, r3, r1
 8007af6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8007afa:	1c7b      	adds	r3, r7, #1
 8007afc:	444b      	add	r3, r9
 8007afe:	106d      	asrs	r5, r5, #1
 8007b00:	429d      	cmp	r5, r3
 8007b02:	bf38      	it	cc
 8007b04:	461d      	movcc	r5, r3
 8007b06:	0553      	lsls	r3, r2, #21
 8007b08:	d527      	bpl.n	8007b5a <__ssputs_r+0x8e>
 8007b0a:	4629      	mov	r1, r5
 8007b0c:	f7ff fbd0 	bl	80072b0 <_malloc_r>
 8007b10:	4606      	mov	r6, r0
 8007b12:	b360      	cbz	r0, 8007b6e <__ssputs_r+0xa2>
 8007b14:	6921      	ldr	r1, [r4, #16]
 8007b16:	464a      	mov	r2, r9
 8007b18:	f000 fbdc 	bl	80082d4 <memcpy>
 8007b1c:	89a3      	ldrh	r3, [r4, #12]
 8007b1e:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8007b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8007b26:	81a3      	strh	r3, [r4, #12]
 8007b28:	6126      	str	r6, [r4, #16]
 8007b2a:	6165      	str	r5, [r4, #20]
 8007b2c:	444e      	add	r6, r9
 8007b2e:	eba5 0509 	sub.w	r5, r5, r9
 8007b32:	6026      	str	r6, [r4, #0]
 8007b34:	60a5      	str	r5, [r4, #8]
 8007b36:	463e      	mov	r6, r7
 8007b38:	42be      	cmp	r6, r7
 8007b3a:	d900      	bls.n	8007b3e <__ssputs_r+0x72>
 8007b3c:	463e      	mov	r6, r7
 8007b3e:	6820      	ldr	r0, [r4, #0]
 8007b40:	4632      	mov	r2, r6
 8007b42:	4641      	mov	r1, r8
 8007b44:	f000 fb9c 	bl	8008280 <memmove>
 8007b48:	68a3      	ldr	r3, [r4, #8]
 8007b4a:	1b9b      	subs	r3, r3, r6
 8007b4c:	60a3      	str	r3, [r4, #8]
 8007b4e:	6823      	ldr	r3, [r4, #0]
 8007b50:	4433      	add	r3, r6
 8007b52:	6023      	str	r3, [r4, #0]
 8007b54:	2000      	movs	r0, #0
 8007b56:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007b5a:	462a      	mov	r2, r5
 8007b5c:	f000 fc0c 	bl	8008378 <_realloc_r>
 8007b60:	4606      	mov	r6, r0
 8007b62:	2800      	cmp	r0, #0
 8007b64:	d1e0      	bne.n	8007b28 <__ssputs_r+0x5c>
 8007b66:	6921      	ldr	r1, [r4, #16]
 8007b68:	4650      	mov	r0, sl
 8007b6a:	f7ff fb2d 	bl	80071c8 <_free_r>
 8007b6e:	230c      	movs	r3, #12
 8007b70:	f8ca 3000 	str.w	r3, [sl]
 8007b74:	89a3      	ldrh	r3, [r4, #12]
 8007b76:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007b7a:	81a3      	strh	r3, [r4, #12]
 8007b7c:	f04f 30ff 	mov.w	r0, #4294967295
 8007b80:	e7e9      	b.n	8007b56 <__ssputs_r+0x8a>
	...

08007b84 <_svfiprintf_r>:
 8007b84:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007b88:	4698      	mov	r8, r3
 8007b8a:	898b      	ldrh	r3, [r1, #12]
 8007b8c:	061b      	lsls	r3, r3, #24
 8007b8e:	b09d      	sub	sp, #116	@ 0x74
 8007b90:	4607      	mov	r7, r0
 8007b92:	460d      	mov	r5, r1
 8007b94:	4614      	mov	r4, r2
 8007b96:	d510      	bpl.n	8007bba <_svfiprintf_r+0x36>
 8007b98:	690b      	ldr	r3, [r1, #16]
 8007b9a:	b973      	cbnz	r3, 8007bba <_svfiprintf_r+0x36>
 8007b9c:	2140      	movs	r1, #64	@ 0x40
 8007b9e:	f7ff fb87 	bl	80072b0 <_malloc_r>
 8007ba2:	6028      	str	r0, [r5, #0]
 8007ba4:	6128      	str	r0, [r5, #16]
 8007ba6:	b930      	cbnz	r0, 8007bb6 <_svfiprintf_r+0x32>
 8007ba8:	230c      	movs	r3, #12
 8007baa:	603b      	str	r3, [r7, #0]
 8007bac:	f04f 30ff 	mov.w	r0, #4294967295
 8007bb0:	b01d      	add	sp, #116	@ 0x74
 8007bb2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bb6:	2340      	movs	r3, #64	@ 0x40
 8007bb8:	616b      	str	r3, [r5, #20]
 8007bba:	2300      	movs	r3, #0
 8007bbc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007bbe:	2320      	movs	r3, #32
 8007bc0:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007bc4:	f8cd 800c 	str.w	r8, [sp, #12]
 8007bc8:	2330      	movs	r3, #48	@ 0x30
 8007bca:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8007d68 <_svfiprintf_r+0x1e4>
 8007bce:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007bd2:	f04f 0901 	mov.w	r9, #1
 8007bd6:	4623      	mov	r3, r4
 8007bd8:	469a      	mov	sl, r3
 8007bda:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007bde:	b10a      	cbz	r2, 8007be4 <_svfiprintf_r+0x60>
 8007be0:	2a25      	cmp	r2, #37	@ 0x25
 8007be2:	d1f9      	bne.n	8007bd8 <_svfiprintf_r+0x54>
 8007be4:	ebba 0b04 	subs.w	fp, sl, r4
 8007be8:	d00b      	beq.n	8007c02 <_svfiprintf_r+0x7e>
 8007bea:	465b      	mov	r3, fp
 8007bec:	4622      	mov	r2, r4
 8007bee:	4629      	mov	r1, r5
 8007bf0:	4638      	mov	r0, r7
 8007bf2:	f7ff ff6b 	bl	8007acc <__ssputs_r>
 8007bf6:	3001      	adds	r0, #1
 8007bf8:	f000 80a7 	beq.w	8007d4a <_svfiprintf_r+0x1c6>
 8007bfc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007bfe:	445a      	add	r2, fp
 8007c00:	9209      	str	r2, [sp, #36]	@ 0x24
 8007c02:	f89a 3000 	ldrb.w	r3, [sl]
 8007c06:	2b00      	cmp	r3, #0
 8007c08:	f000 809f 	beq.w	8007d4a <_svfiprintf_r+0x1c6>
 8007c0c:	2300      	movs	r3, #0
 8007c0e:	f04f 32ff 	mov.w	r2, #4294967295
 8007c12:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007c16:	f10a 0a01 	add.w	sl, sl, #1
 8007c1a:	9304      	str	r3, [sp, #16]
 8007c1c:	9307      	str	r3, [sp, #28]
 8007c1e:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007c22:	931a      	str	r3, [sp, #104]	@ 0x68
 8007c24:	4654      	mov	r4, sl
 8007c26:	2205      	movs	r2, #5
 8007c28:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007c2c:	484e      	ldr	r0, [pc, #312]	@ (8007d68 <_svfiprintf_r+0x1e4>)
 8007c2e:	f7f8 fad7 	bl	80001e0 <memchr>
 8007c32:	9a04      	ldr	r2, [sp, #16]
 8007c34:	b9d8      	cbnz	r0, 8007c6e <_svfiprintf_r+0xea>
 8007c36:	06d0      	lsls	r0, r2, #27
 8007c38:	bf44      	itt	mi
 8007c3a:	2320      	movmi	r3, #32
 8007c3c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c40:	0711      	lsls	r1, r2, #28
 8007c42:	bf44      	itt	mi
 8007c44:	232b      	movmi	r3, #43	@ 0x2b
 8007c46:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007c4a:	f89a 3000 	ldrb.w	r3, [sl]
 8007c4e:	2b2a      	cmp	r3, #42	@ 0x2a
 8007c50:	d015      	beq.n	8007c7e <_svfiprintf_r+0xfa>
 8007c52:	9a07      	ldr	r2, [sp, #28]
 8007c54:	4654      	mov	r4, sl
 8007c56:	2000      	movs	r0, #0
 8007c58:	f04f 0c0a 	mov.w	ip, #10
 8007c5c:	4621      	mov	r1, r4
 8007c5e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007c62:	3b30      	subs	r3, #48	@ 0x30
 8007c64:	2b09      	cmp	r3, #9
 8007c66:	d94b      	bls.n	8007d00 <_svfiprintf_r+0x17c>
 8007c68:	b1b0      	cbz	r0, 8007c98 <_svfiprintf_r+0x114>
 8007c6a:	9207      	str	r2, [sp, #28]
 8007c6c:	e014      	b.n	8007c98 <_svfiprintf_r+0x114>
 8007c6e:	eba0 0308 	sub.w	r3, r0, r8
 8007c72:	fa09 f303 	lsl.w	r3, r9, r3
 8007c76:	4313      	orrs	r3, r2
 8007c78:	9304      	str	r3, [sp, #16]
 8007c7a:	46a2      	mov	sl, r4
 8007c7c:	e7d2      	b.n	8007c24 <_svfiprintf_r+0xa0>
 8007c7e:	9b03      	ldr	r3, [sp, #12]
 8007c80:	1d19      	adds	r1, r3, #4
 8007c82:	681b      	ldr	r3, [r3, #0]
 8007c84:	9103      	str	r1, [sp, #12]
 8007c86:	2b00      	cmp	r3, #0
 8007c88:	bfbb      	ittet	lt
 8007c8a:	425b      	neglt	r3, r3
 8007c8c:	f042 0202 	orrlt.w	r2, r2, #2
 8007c90:	9307      	strge	r3, [sp, #28]
 8007c92:	9307      	strlt	r3, [sp, #28]
 8007c94:	bfb8      	it	lt
 8007c96:	9204      	strlt	r2, [sp, #16]
 8007c98:	7823      	ldrb	r3, [r4, #0]
 8007c9a:	2b2e      	cmp	r3, #46	@ 0x2e
 8007c9c:	d10a      	bne.n	8007cb4 <_svfiprintf_r+0x130>
 8007c9e:	7863      	ldrb	r3, [r4, #1]
 8007ca0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ca2:	d132      	bne.n	8007d0a <_svfiprintf_r+0x186>
 8007ca4:	9b03      	ldr	r3, [sp, #12]
 8007ca6:	1d1a      	adds	r2, r3, #4
 8007ca8:	681b      	ldr	r3, [r3, #0]
 8007caa:	9203      	str	r2, [sp, #12]
 8007cac:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007cb0:	3402      	adds	r4, #2
 8007cb2:	9305      	str	r3, [sp, #20]
 8007cb4:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8007d78 <_svfiprintf_r+0x1f4>
 8007cb8:	7821      	ldrb	r1, [r4, #0]
 8007cba:	2203      	movs	r2, #3
 8007cbc:	4650      	mov	r0, sl
 8007cbe:	f7f8 fa8f 	bl	80001e0 <memchr>
 8007cc2:	b138      	cbz	r0, 8007cd4 <_svfiprintf_r+0x150>
 8007cc4:	9b04      	ldr	r3, [sp, #16]
 8007cc6:	eba0 000a 	sub.w	r0, r0, sl
 8007cca:	2240      	movs	r2, #64	@ 0x40
 8007ccc:	4082      	lsls	r2, r0
 8007cce:	4313      	orrs	r3, r2
 8007cd0:	3401      	adds	r4, #1
 8007cd2:	9304      	str	r3, [sp, #16]
 8007cd4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007cd8:	4824      	ldr	r0, [pc, #144]	@ (8007d6c <_svfiprintf_r+0x1e8>)
 8007cda:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007cde:	2206      	movs	r2, #6
 8007ce0:	f7f8 fa7e 	bl	80001e0 <memchr>
 8007ce4:	2800      	cmp	r0, #0
 8007ce6:	d036      	beq.n	8007d56 <_svfiprintf_r+0x1d2>
 8007ce8:	4b21      	ldr	r3, [pc, #132]	@ (8007d70 <_svfiprintf_r+0x1ec>)
 8007cea:	bb1b      	cbnz	r3, 8007d34 <_svfiprintf_r+0x1b0>
 8007cec:	9b03      	ldr	r3, [sp, #12]
 8007cee:	3307      	adds	r3, #7
 8007cf0:	f023 0307 	bic.w	r3, r3, #7
 8007cf4:	3308      	adds	r3, #8
 8007cf6:	9303      	str	r3, [sp, #12]
 8007cf8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007cfa:	4433      	add	r3, r6
 8007cfc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007cfe:	e76a      	b.n	8007bd6 <_svfiprintf_r+0x52>
 8007d00:	fb0c 3202 	mla	r2, ip, r2, r3
 8007d04:	460c      	mov	r4, r1
 8007d06:	2001      	movs	r0, #1
 8007d08:	e7a8      	b.n	8007c5c <_svfiprintf_r+0xd8>
 8007d0a:	2300      	movs	r3, #0
 8007d0c:	3401      	adds	r4, #1
 8007d0e:	9305      	str	r3, [sp, #20]
 8007d10:	4619      	mov	r1, r3
 8007d12:	f04f 0c0a 	mov.w	ip, #10
 8007d16:	4620      	mov	r0, r4
 8007d18:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007d1c:	3a30      	subs	r2, #48	@ 0x30
 8007d1e:	2a09      	cmp	r2, #9
 8007d20:	d903      	bls.n	8007d2a <_svfiprintf_r+0x1a6>
 8007d22:	2b00      	cmp	r3, #0
 8007d24:	d0c6      	beq.n	8007cb4 <_svfiprintf_r+0x130>
 8007d26:	9105      	str	r1, [sp, #20]
 8007d28:	e7c4      	b.n	8007cb4 <_svfiprintf_r+0x130>
 8007d2a:	fb0c 2101 	mla	r1, ip, r1, r2
 8007d2e:	4604      	mov	r4, r0
 8007d30:	2301      	movs	r3, #1
 8007d32:	e7f0      	b.n	8007d16 <_svfiprintf_r+0x192>
 8007d34:	ab03      	add	r3, sp, #12
 8007d36:	9300      	str	r3, [sp, #0]
 8007d38:	462a      	mov	r2, r5
 8007d3a:	4b0e      	ldr	r3, [pc, #56]	@ (8007d74 <_svfiprintf_r+0x1f0>)
 8007d3c:	a904      	add	r1, sp, #16
 8007d3e:	4638      	mov	r0, r7
 8007d40:	f7fd fe86 	bl	8005a50 <_printf_float>
 8007d44:	1c42      	adds	r2, r0, #1
 8007d46:	4606      	mov	r6, r0
 8007d48:	d1d6      	bne.n	8007cf8 <_svfiprintf_r+0x174>
 8007d4a:	89ab      	ldrh	r3, [r5, #12]
 8007d4c:	065b      	lsls	r3, r3, #25
 8007d4e:	f53f af2d 	bmi.w	8007bac <_svfiprintf_r+0x28>
 8007d52:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007d54:	e72c      	b.n	8007bb0 <_svfiprintf_r+0x2c>
 8007d56:	ab03      	add	r3, sp, #12
 8007d58:	9300      	str	r3, [sp, #0]
 8007d5a:	462a      	mov	r2, r5
 8007d5c:	4b05      	ldr	r3, [pc, #20]	@ (8007d74 <_svfiprintf_r+0x1f0>)
 8007d5e:	a904      	add	r1, sp, #16
 8007d60:	4638      	mov	r0, r7
 8007d62:	f7fe f90d 	bl	8005f80 <_printf_i>
 8007d66:	e7ed      	b.n	8007d44 <_svfiprintf_r+0x1c0>
 8007d68:	080089c8 	.word	0x080089c8
 8007d6c:	080089d2 	.word	0x080089d2
 8007d70:	08005a51 	.word	0x08005a51
 8007d74:	08007acd 	.word	0x08007acd
 8007d78:	080089ce 	.word	0x080089ce

08007d7c <__sfputc_r>:
 8007d7c:	6893      	ldr	r3, [r2, #8]
 8007d7e:	3b01      	subs	r3, #1
 8007d80:	2b00      	cmp	r3, #0
 8007d82:	b410      	push	{r4}
 8007d84:	6093      	str	r3, [r2, #8]
 8007d86:	da08      	bge.n	8007d9a <__sfputc_r+0x1e>
 8007d88:	6994      	ldr	r4, [r2, #24]
 8007d8a:	42a3      	cmp	r3, r4
 8007d8c:	db01      	blt.n	8007d92 <__sfputc_r+0x16>
 8007d8e:	290a      	cmp	r1, #10
 8007d90:	d103      	bne.n	8007d9a <__sfputc_r+0x1e>
 8007d92:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007d96:	f000 b9df 	b.w	8008158 <__swbuf_r>
 8007d9a:	6813      	ldr	r3, [r2, #0]
 8007d9c:	1c58      	adds	r0, r3, #1
 8007d9e:	6010      	str	r0, [r2, #0]
 8007da0:	7019      	strb	r1, [r3, #0]
 8007da2:	4608      	mov	r0, r1
 8007da4:	f85d 4b04 	ldr.w	r4, [sp], #4
 8007da8:	4770      	bx	lr

08007daa <__sfputs_r>:
 8007daa:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007dac:	4606      	mov	r6, r0
 8007dae:	460f      	mov	r7, r1
 8007db0:	4614      	mov	r4, r2
 8007db2:	18d5      	adds	r5, r2, r3
 8007db4:	42ac      	cmp	r4, r5
 8007db6:	d101      	bne.n	8007dbc <__sfputs_r+0x12>
 8007db8:	2000      	movs	r0, #0
 8007dba:	e007      	b.n	8007dcc <__sfputs_r+0x22>
 8007dbc:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007dc0:	463a      	mov	r2, r7
 8007dc2:	4630      	mov	r0, r6
 8007dc4:	f7ff ffda 	bl	8007d7c <__sfputc_r>
 8007dc8:	1c43      	adds	r3, r0, #1
 8007dca:	d1f3      	bne.n	8007db4 <__sfputs_r+0xa>
 8007dcc:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08007dd0 <_vfiprintf_r>:
 8007dd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007dd4:	460d      	mov	r5, r1
 8007dd6:	b09d      	sub	sp, #116	@ 0x74
 8007dd8:	4614      	mov	r4, r2
 8007dda:	4698      	mov	r8, r3
 8007ddc:	4606      	mov	r6, r0
 8007dde:	b118      	cbz	r0, 8007de8 <_vfiprintf_r+0x18>
 8007de0:	6a03      	ldr	r3, [r0, #32]
 8007de2:	b90b      	cbnz	r3, 8007de8 <_vfiprintf_r+0x18>
 8007de4:	f7fe fa78 	bl	80062d8 <__sinit>
 8007de8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007dea:	07d9      	lsls	r1, r3, #31
 8007dec:	d405      	bmi.n	8007dfa <_vfiprintf_r+0x2a>
 8007dee:	89ab      	ldrh	r3, [r5, #12]
 8007df0:	059a      	lsls	r2, r3, #22
 8007df2:	d402      	bmi.n	8007dfa <_vfiprintf_r+0x2a>
 8007df4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007df6:	f7fe fb98 	bl	800652a <__retarget_lock_acquire_recursive>
 8007dfa:	89ab      	ldrh	r3, [r5, #12]
 8007dfc:	071b      	lsls	r3, r3, #28
 8007dfe:	d501      	bpl.n	8007e04 <_vfiprintf_r+0x34>
 8007e00:	692b      	ldr	r3, [r5, #16]
 8007e02:	b99b      	cbnz	r3, 8007e2c <_vfiprintf_r+0x5c>
 8007e04:	4629      	mov	r1, r5
 8007e06:	4630      	mov	r0, r6
 8007e08:	f000 f9e4 	bl	80081d4 <__swsetup_r>
 8007e0c:	b170      	cbz	r0, 8007e2c <_vfiprintf_r+0x5c>
 8007e0e:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007e10:	07dc      	lsls	r4, r3, #31
 8007e12:	d504      	bpl.n	8007e1e <_vfiprintf_r+0x4e>
 8007e14:	f04f 30ff 	mov.w	r0, #4294967295
 8007e18:	b01d      	add	sp, #116	@ 0x74
 8007e1a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007e1e:	89ab      	ldrh	r3, [r5, #12]
 8007e20:	0598      	lsls	r0, r3, #22
 8007e22:	d4f7      	bmi.n	8007e14 <_vfiprintf_r+0x44>
 8007e24:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007e26:	f7fe fb81 	bl	800652c <__retarget_lock_release_recursive>
 8007e2a:	e7f3      	b.n	8007e14 <_vfiprintf_r+0x44>
 8007e2c:	2300      	movs	r3, #0
 8007e2e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007e30:	2320      	movs	r3, #32
 8007e32:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8007e36:	f8cd 800c 	str.w	r8, [sp, #12]
 8007e3a:	2330      	movs	r3, #48	@ 0x30
 8007e3c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8007fec <_vfiprintf_r+0x21c>
 8007e40:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8007e44:	f04f 0901 	mov.w	r9, #1
 8007e48:	4623      	mov	r3, r4
 8007e4a:	469a      	mov	sl, r3
 8007e4c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8007e50:	b10a      	cbz	r2, 8007e56 <_vfiprintf_r+0x86>
 8007e52:	2a25      	cmp	r2, #37	@ 0x25
 8007e54:	d1f9      	bne.n	8007e4a <_vfiprintf_r+0x7a>
 8007e56:	ebba 0b04 	subs.w	fp, sl, r4
 8007e5a:	d00b      	beq.n	8007e74 <_vfiprintf_r+0xa4>
 8007e5c:	465b      	mov	r3, fp
 8007e5e:	4622      	mov	r2, r4
 8007e60:	4629      	mov	r1, r5
 8007e62:	4630      	mov	r0, r6
 8007e64:	f7ff ffa1 	bl	8007daa <__sfputs_r>
 8007e68:	3001      	adds	r0, #1
 8007e6a:	f000 80a7 	beq.w	8007fbc <_vfiprintf_r+0x1ec>
 8007e6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007e70:	445a      	add	r2, fp
 8007e72:	9209      	str	r2, [sp, #36]	@ 0x24
 8007e74:	f89a 3000 	ldrb.w	r3, [sl]
 8007e78:	2b00      	cmp	r3, #0
 8007e7a:	f000 809f 	beq.w	8007fbc <_vfiprintf_r+0x1ec>
 8007e7e:	2300      	movs	r3, #0
 8007e80:	f04f 32ff 	mov.w	r2, #4294967295
 8007e84:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8007e88:	f10a 0a01 	add.w	sl, sl, #1
 8007e8c:	9304      	str	r3, [sp, #16]
 8007e8e:	9307      	str	r3, [sp, #28]
 8007e90:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8007e94:	931a      	str	r3, [sp, #104]	@ 0x68
 8007e96:	4654      	mov	r4, sl
 8007e98:	2205      	movs	r2, #5
 8007e9a:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007e9e:	4853      	ldr	r0, [pc, #332]	@ (8007fec <_vfiprintf_r+0x21c>)
 8007ea0:	f7f8 f99e 	bl	80001e0 <memchr>
 8007ea4:	9a04      	ldr	r2, [sp, #16]
 8007ea6:	b9d8      	cbnz	r0, 8007ee0 <_vfiprintf_r+0x110>
 8007ea8:	06d1      	lsls	r1, r2, #27
 8007eaa:	bf44      	itt	mi
 8007eac:	2320      	movmi	r3, #32
 8007eae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007eb2:	0713      	lsls	r3, r2, #28
 8007eb4:	bf44      	itt	mi
 8007eb6:	232b      	movmi	r3, #43	@ 0x2b
 8007eb8:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8007ebc:	f89a 3000 	ldrb.w	r3, [sl]
 8007ec0:	2b2a      	cmp	r3, #42	@ 0x2a
 8007ec2:	d015      	beq.n	8007ef0 <_vfiprintf_r+0x120>
 8007ec4:	9a07      	ldr	r2, [sp, #28]
 8007ec6:	4654      	mov	r4, sl
 8007ec8:	2000      	movs	r0, #0
 8007eca:	f04f 0c0a 	mov.w	ip, #10
 8007ece:	4621      	mov	r1, r4
 8007ed0:	f811 3b01 	ldrb.w	r3, [r1], #1
 8007ed4:	3b30      	subs	r3, #48	@ 0x30
 8007ed6:	2b09      	cmp	r3, #9
 8007ed8:	d94b      	bls.n	8007f72 <_vfiprintf_r+0x1a2>
 8007eda:	b1b0      	cbz	r0, 8007f0a <_vfiprintf_r+0x13a>
 8007edc:	9207      	str	r2, [sp, #28]
 8007ede:	e014      	b.n	8007f0a <_vfiprintf_r+0x13a>
 8007ee0:	eba0 0308 	sub.w	r3, r0, r8
 8007ee4:	fa09 f303 	lsl.w	r3, r9, r3
 8007ee8:	4313      	orrs	r3, r2
 8007eea:	9304      	str	r3, [sp, #16]
 8007eec:	46a2      	mov	sl, r4
 8007eee:	e7d2      	b.n	8007e96 <_vfiprintf_r+0xc6>
 8007ef0:	9b03      	ldr	r3, [sp, #12]
 8007ef2:	1d19      	adds	r1, r3, #4
 8007ef4:	681b      	ldr	r3, [r3, #0]
 8007ef6:	9103      	str	r1, [sp, #12]
 8007ef8:	2b00      	cmp	r3, #0
 8007efa:	bfbb      	ittet	lt
 8007efc:	425b      	neglt	r3, r3
 8007efe:	f042 0202 	orrlt.w	r2, r2, #2
 8007f02:	9307      	strge	r3, [sp, #28]
 8007f04:	9307      	strlt	r3, [sp, #28]
 8007f06:	bfb8      	it	lt
 8007f08:	9204      	strlt	r2, [sp, #16]
 8007f0a:	7823      	ldrb	r3, [r4, #0]
 8007f0c:	2b2e      	cmp	r3, #46	@ 0x2e
 8007f0e:	d10a      	bne.n	8007f26 <_vfiprintf_r+0x156>
 8007f10:	7863      	ldrb	r3, [r4, #1]
 8007f12:	2b2a      	cmp	r3, #42	@ 0x2a
 8007f14:	d132      	bne.n	8007f7c <_vfiprintf_r+0x1ac>
 8007f16:	9b03      	ldr	r3, [sp, #12]
 8007f18:	1d1a      	adds	r2, r3, #4
 8007f1a:	681b      	ldr	r3, [r3, #0]
 8007f1c:	9203      	str	r2, [sp, #12]
 8007f1e:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8007f22:	3402      	adds	r4, #2
 8007f24:	9305      	str	r3, [sp, #20]
 8007f26:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8007ffc <_vfiprintf_r+0x22c>
 8007f2a:	7821      	ldrb	r1, [r4, #0]
 8007f2c:	2203      	movs	r2, #3
 8007f2e:	4650      	mov	r0, sl
 8007f30:	f7f8 f956 	bl	80001e0 <memchr>
 8007f34:	b138      	cbz	r0, 8007f46 <_vfiprintf_r+0x176>
 8007f36:	9b04      	ldr	r3, [sp, #16]
 8007f38:	eba0 000a 	sub.w	r0, r0, sl
 8007f3c:	2240      	movs	r2, #64	@ 0x40
 8007f3e:	4082      	lsls	r2, r0
 8007f40:	4313      	orrs	r3, r2
 8007f42:	3401      	adds	r4, #1
 8007f44:	9304      	str	r3, [sp, #16]
 8007f46:	f814 1b01 	ldrb.w	r1, [r4], #1
 8007f4a:	4829      	ldr	r0, [pc, #164]	@ (8007ff0 <_vfiprintf_r+0x220>)
 8007f4c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8007f50:	2206      	movs	r2, #6
 8007f52:	f7f8 f945 	bl	80001e0 <memchr>
 8007f56:	2800      	cmp	r0, #0
 8007f58:	d03f      	beq.n	8007fda <_vfiprintf_r+0x20a>
 8007f5a:	4b26      	ldr	r3, [pc, #152]	@ (8007ff4 <_vfiprintf_r+0x224>)
 8007f5c:	bb1b      	cbnz	r3, 8007fa6 <_vfiprintf_r+0x1d6>
 8007f5e:	9b03      	ldr	r3, [sp, #12]
 8007f60:	3307      	adds	r3, #7
 8007f62:	f023 0307 	bic.w	r3, r3, #7
 8007f66:	3308      	adds	r3, #8
 8007f68:	9303      	str	r3, [sp, #12]
 8007f6a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007f6c:	443b      	add	r3, r7
 8007f6e:	9309      	str	r3, [sp, #36]	@ 0x24
 8007f70:	e76a      	b.n	8007e48 <_vfiprintf_r+0x78>
 8007f72:	fb0c 3202 	mla	r2, ip, r2, r3
 8007f76:	460c      	mov	r4, r1
 8007f78:	2001      	movs	r0, #1
 8007f7a:	e7a8      	b.n	8007ece <_vfiprintf_r+0xfe>
 8007f7c:	2300      	movs	r3, #0
 8007f7e:	3401      	adds	r4, #1
 8007f80:	9305      	str	r3, [sp, #20]
 8007f82:	4619      	mov	r1, r3
 8007f84:	f04f 0c0a 	mov.w	ip, #10
 8007f88:	4620      	mov	r0, r4
 8007f8a:	f810 2b01 	ldrb.w	r2, [r0], #1
 8007f8e:	3a30      	subs	r2, #48	@ 0x30
 8007f90:	2a09      	cmp	r2, #9
 8007f92:	d903      	bls.n	8007f9c <_vfiprintf_r+0x1cc>
 8007f94:	2b00      	cmp	r3, #0
 8007f96:	d0c6      	beq.n	8007f26 <_vfiprintf_r+0x156>
 8007f98:	9105      	str	r1, [sp, #20]
 8007f9a:	e7c4      	b.n	8007f26 <_vfiprintf_r+0x156>
 8007f9c:	fb0c 2101 	mla	r1, ip, r1, r2
 8007fa0:	4604      	mov	r4, r0
 8007fa2:	2301      	movs	r3, #1
 8007fa4:	e7f0      	b.n	8007f88 <_vfiprintf_r+0x1b8>
 8007fa6:	ab03      	add	r3, sp, #12
 8007fa8:	9300      	str	r3, [sp, #0]
 8007faa:	462a      	mov	r2, r5
 8007fac:	4b12      	ldr	r3, [pc, #72]	@ (8007ff8 <_vfiprintf_r+0x228>)
 8007fae:	a904      	add	r1, sp, #16
 8007fb0:	4630      	mov	r0, r6
 8007fb2:	f7fd fd4d 	bl	8005a50 <_printf_float>
 8007fb6:	4607      	mov	r7, r0
 8007fb8:	1c78      	adds	r0, r7, #1
 8007fba:	d1d6      	bne.n	8007f6a <_vfiprintf_r+0x19a>
 8007fbc:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8007fbe:	07d9      	lsls	r1, r3, #31
 8007fc0:	d405      	bmi.n	8007fce <_vfiprintf_r+0x1fe>
 8007fc2:	89ab      	ldrh	r3, [r5, #12]
 8007fc4:	059a      	lsls	r2, r3, #22
 8007fc6:	d402      	bmi.n	8007fce <_vfiprintf_r+0x1fe>
 8007fc8:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8007fca:	f7fe faaf 	bl	800652c <__retarget_lock_release_recursive>
 8007fce:	89ab      	ldrh	r3, [r5, #12]
 8007fd0:	065b      	lsls	r3, r3, #25
 8007fd2:	f53f af1f 	bmi.w	8007e14 <_vfiprintf_r+0x44>
 8007fd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8007fd8:	e71e      	b.n	8007e18 <_vfiprintf_r+0x48>
 8007fda:	ab03      	add	r3, sp, #12
 8007fdc:	9300      	str	r3, [sp, #0]
 8007fde:	462a      	mov	r2, r5
 8007fe0:	4b05      	ldr	r3, [pc, #20]	@ (8007ff8 <_vfiprintf_r+0x228>)
 8007fe2:	a904      	add	r1, sp, #16
 8007fe4:	4630      	mov	r0, r6
 8007fe6:	f7fd ffcb 	bl	8005f80 <_printf_i>
 8007fea:	e7e4      	b.n	8007fb6 <_vfiprintf_r+0x1e6>
 8007fec:	080089c8 	.word	0x080089c8
 8007ff0:	080089d2 	.word	0x080089d2
 8007ff4:	08005a51 	.word	0x08005a51
 8007ff8:	08007dab 	.word	0x08007dab
 8007ffc:	080089ce 	.word	0x080089ce

08008000 <__sflush_r>:
 8008000:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8008004:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008008:	0716      	lsls	r6, r2, #28
 800800a:	4605      	mov	r5, r0
 800800c:	460c      	mov	r4, r1
 800800e:	d454      	bmi.n	80080ba <__sflush_r+0xba>
 8008010:	684b      	ldr	r3, [r1, #4]
 8008012:	2b00      	cmp	r3, #0
 8008014:	dc02      	bgt.n	800801c <__sflush_r+0x1c>
 8008016:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8008018:	2b00      	cmp	r3, #0
 800801a:	dd48      	ble.n	80080ae <__sflush_r+0xae>
 800801c:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800801e:	2e00      	cmp	r6, #0
 8008020:	d045      	beq.n	80080ae <__sflush_r+0xae>
 8008022:	2300      	movs	r3, #0
 8008024:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8008028:	682f      	ldr	r7, [r5, #0]
 800802a:	6a21      	ldr	r1, [r4, #32]
 800802c:	602b      	str	r3, [r5, #0]
 800802e:	d030      	beq.n	8008092 <__sflush_r+0x92>
 8008030:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008032:	89a3      	ldrh	r3, [r4, #12]
 8008034:	0759      	lsls	r1, r3, #29
 8008036:	d505      	bpl.n	8008044 <__sflush_r+0x44>
 8008038:	6863      	ldr	r3, [r4, #4]
 800803a:	1ad2      	subs	r2, r2, r3
 800803c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800803e:	b10b      	cbz	r3, 8008044 <__sflush_r+0x44>
 8008040:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008042:	1ad2      	subs	r2, r2, r3
 8008044:	2300      	movs	r3, #0
 8008046:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008048:	6a21      	ldr	r1, [r4, #32]
 800804a:	4628      	mov	r0, r5
 800804c:	47b0      	blx	r6
 800804e:	1c43      	adds	r3, r0, #1
 8008050:	89a3      	ldrh	r3, [r4, #12]
 8008052:	d106      	bne.n	8008062 <__sflush_r+0x62>
 8008054:	6829      	ldr	r1, [r5, #0]
 8008056:	291d      	cmp	r1, #29
 8008058:	d82b      	bhi.n	80080b2 <__sflush_r+0xb2>
 800805a:	4a2a      	ldr	r2, [pc, #168]	@ (8008104 <__sflush_r+0x104>)
 800805c:	410a      	asrs	r2, r1
 800805e:	07d6      	lsls	r6, r2, #31
 8008060:	d427      	bmi.n	80080b2 <__sflush_r+0xb2>
 8008062:	2200      	movs	r2, #0
 8008064:	6062      	str	r2, [r4, #4]
 8008066:	04d9      	lsls	r1, r3, #19
 8008068:	6922      	ldr	r2, [r4, #16]
 800806a:	6022      	str	r2, [r4, #0]
 800806c:	d504      	bpl.n	8008078 <__sflush_r+0x78>
 800806e:	1c42      	adds	r2, r0, #1
 8008070:	d101      	bne.n	8008076 <__sflush_r+0x76>
 8008072:	682b      	ldr	r3, [r5, #0]
 8008074:	b903      	cbnz	r3, 8008078 <__sflush_r+0x78>
 8008076:	6560      	str	r0, [r4, #84]	@ 0x54
 8008078:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800807a:	602f      	str	r7, [r5, #0]
 800807c:	b1b9      	cbz	r1, 80080ae <__sflush_r+0xae>
 800807e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008082:	4299      	cmp	r1, r3
 8008084:	d002      	beq.n	800808c <__sflush_r+0x8c>
 8008086:	4628      	mov	r0, r5
 8008088:	f7ff f89e 	bl	80071c8 <_free_r>
 800808c:	2300      	movs	r3, #0
 800808e:	6363      	str	r3, [r4, #52]	@ 0x34
 8008090:	e00d      	b.n	80080ae <__sflush_r+0xae>
 8008092:	2301      	movs	r3, #1
 8008094:	4628      	mov	r0, r5
 8008096:	47b0      	blx	r6
 8008098:	4602      	mov	r2, r0
 800809a:	1c50      	adds	r0, r2, #1
 800809c:	d1c9      	bne.n	8008032 <__sflush_r+0x32>
 800809e:	682b      	ldr	r3, [r5, #0]
 80080a0:	2b00      	cmp	r3, #0
 80080a2:	d0c6      	beq.n	8008032 <__sflush_r+0x32>
 80080a4:	2b1d      	cmp	r3, #29
 80080a6:	d001      	beq.n	80080ac <__sflush_r+0xac>
 80080a8:	2b16      	cmp	r3, #22
 80080aa:	d11e      	bne.n	80080ea <__sflush_r+0xea>
 80080ac:	602f      	str	r7, [r5, #0]
 80080ae:	2000      	movs	r0, #0
 80080b0:	e022      	b.n	80080f8 <__sflush_r+0xf8>
 80080b2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080b6:	b21b      	sxth	r3, r3
 80080b8:	e01b      	b.n	80080f2 <__sflush_r+0xf2>
 80080ba:	690f      	ldr	r7, [r1, #16]
 80080bc:	2f00      	cmp	r7, #0
 80080be:	d0f6      	beq.n	80080ae <__sflush_r+0xae>
 80080c0:	0793      	lsls	r3, r2, #30
 80080c2:	680e      	ldr	r6, [r1, #0]
 80080c4:	bf08      	it	eq
 80080c6:	694b      	ldreq	r3, [r1, #20]
 80080c8:	600f      	str	r7, [r1, #0]
 80080ca:	bf18      	it	ne
 80080cc:	2300      	movne	r3, #0
 80080ce:	eba6 0807 	sub.w	r8, r6, r7
 80080d2:	608b      	str	r3, [r1, #8]
 80080d4:	f1b8 0f00 	cmp.w	r8, #0
 80080d8:	dde9      	ble.n	80080ae <__sflush_r+0xae>
 80080da:	6a21      	ldr	r1, [r4, #32]
 80080dc:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80080de:	4643      	mov	r3, r8
 80080e0:	463a      	mov	r2, r7
 80080e2:	4628      	mov	r0, r5
 80080e4:	47b0      	blx	r6
 80080e6:	2800      	cmp	r0, #0
 80080e8:	dc08      	bgt.n	80080fc <__sflush_r+0xfc>
 80080ea:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80080ee:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80080f2:	81a3      	strh	r3, [r4, #12]
 80080f4:	f04f 30ff 	mov.w	r0, #4294967295
 80080f8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80080fc:	4407      	add	r7, r0
 80080fe:	eba8 0800 	sub.w	r8, r8, r0
 8008102:	e7e7      	b.n	80080d4 <__sflush_r+0xd4>
 8008104:	dfbffffe 	.word	0xdfbffffe

08008108 <_fflush_r>:
 8008108:	b538      	push	{r3, r4, r5, lr}
 800810a:	690b      	ldr	r3, [r1, #16]
 800810c:	4605      	mov	r5, r0
 800810e:	460c      	mov	r4, r1
 8008110:	b913      	cbnz	r3, 8008118 <_fflush_r+0x10>
 8008112:	2500      	movs	r5, #0
 8008114:	4628      	mov	r0, r5
 8008116:	bd38      	pop	{r3, r4, r5, pc}
 8008118:	b118      	cbz	r0, 8008122 <_fflush_r+0x1a>
 800811a:	6a03      	ldr	r3, [r0, #32]
 800811c:	b90b      	cbnz	r3, 8008122 <_fflush_r+0x1a>
 800811e:	f7fe f8db 	bl	80062d8 <__sinit>
 8008122:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008126:	2b00      	cmp	r3, #0
 8008128:	d0f3      	beq.n	8008112 <_fflush_r+0xa>
 800812a:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800812c:	07d0      	lsls	r0, r2, #31
 800812e:	d404      	bmi.n	800813a <_fflush_r+0x32>
 8008130:	0599      	lsls	r1, r3, #22
 8008132:	d402      	bmi.n	800813a <_fflush_r+0x32>
 8008134:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008136:	f7fe f9f8 	bl	800652a <__retarget_lock_acquire_recursive>
 800813a:	4628      	mov	r0, r5
 800813c:	4621      	mov	r1, r4
 800813e:	f7ff ff5f 	bl	8008000 <__sflush_r>
 8008142:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008144:	07da      	lsls	r2, r3, #31
 8008146:	4605      	mov	r5, r0
 8008148:	d4e4      	bmi.n	8008114 <_fflush_r+0xc>
 800814a:	89a3      	ldrh	r3, [r4, #12]
 800814c:	059b      	lsls	r3, r3, #22
 800814e:	d4e1      	bmi.n	8008114 <_fflush_r+0xc>
 8008150:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008152:	f7fe f9eb 	bl	800652c <__retarget_lock_release_recursive>
 8008156:	e7dd      	b.n	8008114 <_fflush_r+0xc>

08008158 <__swbuf_r>:
 8008158:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800815a:	460e      	mov	r6, r1
 800815c:	4614      	mov	r4, r2
 800815e:	4605      	mov	r5, r0
 8008160:	b118      	cbz	r0, 800816a <__swbuf_r+0x12>
 8008162:	6a03      	ldr	r3, [r0, #32]
 8008164:	b90b      	cbnz	r3, 800816a <__swbuf_r+0x12>
 8008166:	f7fe f8b7 	bl	80062d8 <__sinit>
 800816a:	69a3      	ldr	r3, [r4, #24]
 800816c:	60a3      	str	r3, [r4, #8]
 800816e:	89a3      	ldrh	r3, [r4, #12]
 8008170:	071a      	lsls	r2, r3, #28
 8008172:	d501      	bpl.n	8008178 <__swbuf_r+0x20>
 8008174:	6923      	ldr	r3, [r4, #16]
 8008176:	b943      	cbnz	r3, 800818a <__swbuf_r+0x32>
 8008178:	4621      	mov	r1, r4
 800817a:	4628      	mov	r0, r5
 800817c:	f000 f82a 	bl	80081d4 <__swsetup_r>
 8008180:	b118      	cbz	r0, 800818a <__swbuf_r+0x32>
 8008182:	f04f 37ff 	mov.w	r7, #4294967295
 8008186:	4638      	mov	r0, r7
 8008188:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800818a:	6823      	ldr	r3, [r4, #0]
 800818c:	6922      	ldr	r2, [r4, #16]
 800818e:	1a98      	subs	r0, r3, r2
 8008190:	6963      	ldr	r3, [r4, #20]
 8008192:	b2f6      	uxtb	r6, r6
 8008194:	4283      	cmp	r3, r0
 8008196:	4637      	mov	r7, r6
 8008198:	dc05      	bgt.n	80081a6 <__swbuf_r+0x4e>
 800819a:	4621      	mov	r1, r4
 800819c:	4628      	mov	r0, r5
 800819e:	f7ff ffb3 	bl	8008108 <_fflush_r>
 80081a2:	2800      	cmp	r0, #0
 80081a4:	d1ed      	bne.n	8008182 <__swbuf_r+0x2a>
 80081a6:	68a3      	ldr	r3, [r4, #8]
 80081a8:	3b01      	subs	r3, #1
 80081aa:	60a3      	str	r3, [r4, #8]
 80081ac:	6823      	ldr	r3, [r4, #0]
 80081ae:	1c5a      	adds	r2, r3, #1
 80081b0:	6022      	str	r2, [r4, #0]
 80081b2:	701e      	strb	r6, [r3, #0]
 80081b4:	6962      	ldr	r2, [r4, #20]
 80081b6:	1c43      	adds	r3, r0, #1
 80081b8:	429a      	cmp	r2, r3
 80081ba:	d004      	beq.n	80081c6 <__swbuf_r+0x6e>
 80081bc:	89a3      	ldrh	r3, [r4, #12]
 80081be:	07db      	lsls	r3, r3, #31
 80081c0:	d5e1      	bpl.n	8008186 <__swbuf_r+0x2e>
 80081c2:	2e0a      	cmp	r6, #10
 80081c4:	d1df      	bne.n	8008186 <__swbuf_r+0x2e>
 80081c6:	4621      	mov	r1, r4
 80081c8:	4628      	mov	r0, r5
 80081ca:	f7ff ff9d 	bl	8008108 <_fflush_r>
 80081ce:	2800      	cmp	r0, #0
 80081d0:	d0d9      	beq.n	8008186 <__swbuf_r+0x2e>
 80081d2:	e7d6      	b.n	8008182 <__swbuf_r+0x2a>

080081d4 <__swsetup_r>:
 80081d4:	b538      	push	{r3, r4, r5, lr}
 80081d6:	4b29      	ldr	r3, [pc, #164]	@ (800827c <__swsetup_r+0xa8>)
 80081d8:	4605      	mov	r5, r0
 80081da:	6818      	ldr	r0, [r3, #0]
 80081dc:	460c      	mov	r4, r1
 80081de:	b118      	cbz	r0, 80081e8 <__swsetup_r+0x14>
 80081e0:	6a03      	ldr	r3, [r0, #32]
 80081e2:	b90b      	cbnz	r3, 80081e8 <__swsetup_r+0x14>
 80081e4:	f7fe f878 	bl	80062d8 <__sinit>
 80081e8:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80081ec:	0719      	lsls	r1, r3, #28
 80081ee:	d422      	bmi.n	8008236 <__swsetup_r+0x62>
 80081f0:	06da      	lsls	r2, r3, #27
 80081f2:	d407      	bmi.n	8008204 <__swsetup_r+0x30>
 80081f4:	2209      	movs	r2, #9
 80081f6:	602a      	str	r2, [r5, #0]
 80081f8:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80081fc:	81a3      	strh	r3, [r4, #12]
 80081fe:	f04f 30ff 	mov.w	r0, #4294967295
 8008202:	e033      	b.n	800826c <__swsetup_r+0x98>
 8008204:	0758      	lsls	r0, r3, #29
 8008206:	d512      	bpl.n	800822e <__swsetup_r+0x5a>
 8008208:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800820a:	b141      	cbz	r1, 800821e <__swsetup_r+0x4a>
 800820c:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008210:	4299      	cmp	r1, r3
 8008212:	d002      	beq.n	800821a <__swsetup_r+0x46>
 8008214:	4628      	mov	r0, r5
 8008216:	f7fe ffd7 	bl	80071c8 <_free_r>
 800821a:	2300      	movs	r3, #0
 800821c:	6363      	str	r3, [r4, #52]	@ 0x34
 800821e:	89a3      	ldrh	r3, [r4, #12]
 8008220:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8008224:	81a3      	strh	r3, [r4, #12]
 8008226:	2300      	movs	r3, #0
 8008228:	6063      	str	r3, [r4, #4]
 800822a:	6923      	ldr	r3, [r4, #16]
 800822c:	6023      	str	r3, [r4, #0]
 800822e:	89a3      	ldrh	r3, [r4, #12]
 8008230:	f043 0308 	orr.w	r3, r3, #8
 8008234:	81a3      	strh	r3, [r4, #12]
 8008236:	6923      	ldr	r3, [r4, #16]
 8008238:	b94b      	cbnz	r3, 800824e <__swsetup_r+0x7a>
 800823a:	89a3      	ldrh	r3, [r4, #12]
 800823c:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8008240:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8008244:	d003      	beq.n	800824e <__swsetup_r+0x7a>
 8008246:	4621      	mov	r1, r4
 8008248:	4628      	mov	r0, r5
 800824a:	f000 f909 	bl	8008460 <__smakebuf_r>
 800824e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008252:	f013 0201 	ands.w	r2, r3, #1
 8008256:	d00a      	beq.n	800826e <__swsetup_r+0x9a>
 8008258:	2200      	movs	r2, #0
 800825a:	60a2      	str	r2, [r4, #8]
 800825c:	6962      	ldr	r2, [r4, #20]
 800825e:	4252      	negs	r2, r2
 8008260:	61a2      	str	r2, [r4, #24]
 8008262:	6922      	ldr	r2, [r4, #16]
 8008264:	b942      	cbnz	r2, 8008278 <__swsetup_r+0xa4>
 8008266:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800826a:	d1c5      	bne.n	80081f8 <__swsetup_r+0x24>
 800826c:	bd38      	pop	{r3, r4, r5, pc}
 800826e:	0799      	lsls	r1, r3, #30
 8008270:	bf58      	it	pl
 8008272:	6962      	ldrpl	r2, [r4, #20]
 8008274:	60a2      	str	r2, [r4, #8]
 8008276:	e7f4      	b.n	8008262 <__swsetup_r+0x8e>
 8008278:	2000      	movs	r0, #0
 800827a:	e7f7      	b.n	800826c <__swsetup_r+0x98>
 800827c:	2000001c 	.word	0x2000001c

08008280 <memmove>:
 8008280:	4288      	cmp	r0, r1
 8008282:	b510      	push	{r4, lr}
 8008284:	eb01 0402 	add.w	r4, r1, r2
 8008288:	d902      	bls.n	8008290 <memmove+0x10>
 800828a:	4284      	cmp	r4, r0
 800828c:	4623      	mov	r3, r4
 800828e:	d807      	bhi.n	80082a0 <memmove+0x20>
 8008290:	1e43      	subs	r3, r0, #1
 8008292:	42a1      	cmp	r1, r4
 8008294:	d008      	beq.n	80082a8 <memmove+0x28>
 8008296:	f811 2b01 	ldrb.w	r2, [r1], #1
 800829a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800829e:	e7f8      	b.n	8008292 <memmove+0x12>
 80082a0:	4402      	add	r2, r0
 80082a2:	4601      	mov	r1, r0
 80082a4:	428a      	cmp	r2, r1
 80082a6:	d100      	bne.n	80082aa <memmove+0x2a>
 80082a8:	bd10      	pop	{r4, pc}
 80082aa:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 80082ae:	f802 4d01 	strb.w	r4, [r2, #-1]!
 80082b2:	e7f7      	b.n	80082a4 <memmove+0x24>

080082b4 <_sbrk_r>:
 80082b4:	b538      	push	{r3, r4, r5, lr}
 80082b6:	4d06      	ldr	r5, [pc, #24]	@ (80082d0 <_sbrk_r+0x1c>)
 80082b8:	2300      	movs	r3, #0
 80082ba:	4604      	mov	r4, r0
 80082bc:	4608      	mov	r0, r1
 80082be:	602b      	str	r3, [r5, #0]
 80082c0:	f7f9 fb82 	bl	80019c8 <_sbrk>
 80082c4:	1c43      	adds	r3, r0, #1
 80082c6:	d102      	bne.n	80082ce <_sbrk_r+0x1a>
 80082c8:	682b      	ldr	r3, [r5, #0]
 80082ca:	b103      	cbz	r3, 80082ce <_sbrk_r+0x1a>
 80082cc:	6023      	str	r3, [r4, #0]
 80082ce:	bd38      	pop	{r3, r4, r5, pc}
 80082d0:	2000050c 	.word	0x2000050c

080082d4 <memcpy>:
 80082d4:	440a      	add	r2, r1
 80082d6:	4291      	cmp	r1, r2
 80082d8:	f100 33ff 	add.w	r3, r0, #4294967295
 80082dc:	d100      	bne.n	80082e0 <memcpy+0xc>
 80082de:	4770      	bx	lr
 80082e0:	b510      	push	{r4, lr}
 80082e2:	f811 4b01 	ldrb.w	r4, [r1], #1
 80082e6:	f803 4f01 	strb.w	r4, [r3, #1]!
 80082ea:	4291      	cmp	r1, r2
 80082ec:	d1f9      	bne.n	80082e2 <memcpy+0xe>
 80082ee:	bd10      	pop	{r4, pc}

080082f0 <__assert_func>:
 80082f0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80082f2:	4614      	mov	r4, r2
 80082f4:	461a      	mov	r2, r3
 80082f6:	4b09      	ldr	r3, [pc, #36]	@ (800831c <__assert_func+0x2c>)
 80082f8:	681b      	ldr	r3, [r3, #0]
 80082fa:	4605      	mov	r5, r0
 80082fc:	68d8      	ldr	r0, [r3, #12]
 80082fe:	b954      	cbnz	r4, 8008316 <__assert_func+0x26>
 8008300:	4b07      	ldr	r3, [pc, #28]	@ (8008320 <__assert_func+0x30>)
 8008302:	461c      	mov	r4, r3
 8008304:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008308:	9100      	str	r1, [sp, #0]
 800830a:	462b      	mov	r3, r5
 800830c:	4905      	ldr	r1, [pc, #20]	@ (8008324 <__assert_func+0x34>)
 800830e:	f000 f86f 	bl	80083f0 <fiprintf>
 8008312:	f000 f903 	bl	800851c <abort>
 8008316:	4b04      	ldr	r3, [pc, #16]	@ (8008328 <__assert_func+0x38>)
 8008318:	e7f4      	b.n	8008304 <__assert_func+0x14>
 800831a:	bf00      	nop
 800831c:	2000001c 	.word	0x2000001c
 8008320:	08008a1e 	.word	0x08008a1e
 8008324:	080089f0 	.word	0x080089f0
 8008328:	080089e3 	.word	0x080089e3

0800832c <_calloc_r>:
 800832c:	b570      	push	{r4, r5, r6, lr}
 800832e:	fba1 5402 	umull	r5, r4, r1, r2
 8008332:	b93c      	cbnz	r4, 8008344 <_calloc_r+0x18>
 8008334:	4629      	mov	r1, r5
 8008336:	f7fe ffbb 	bl	80072b0 <_malloc_r>
 800833a:	4606      	mov	r6, r0
 800833c:	b928      	cbnz	r0, 800834a <_calloc_r+0x1e>
 800833e:	2600      	movs	r6, #0
 8008340:	4630      	mov	r0, r6
 8008342:	bd70      	pop	{r4, r5, r6, pc}
 8008344:	220c      	movs	r2, #12
 8008346:	6002      	str	r2, [r0, #0]
 8008348:	e7f9      	b.n	800833e <_calloc_r+0x12>
 800834a:	462a      	mov	r2, r5
 800834c:	4621      	mov	r1, r4
 800834e:	f7fe f86e 	bl	800642e <memset>
 8008352:	e7f5      	b.n	8008340 <_calloc_r+0x14>

08008354 <__ascii_mbtowc>:
 8008354:	b082      	sub	sp, #8
 8008356:	b901      	cbnz	r1, 800835a <__ascii_mbtowc+0x6>
 8008358:	a901      	add	r1, sp, #4
 800835a:	b142      	cbz	r2, 800836e <__ascii_mbtowc+0x1a>
 800835c:	b14b      	cbz	r3, 8008372 <__ascii_mbtowc+0x1e>
 800835e:	7813      	ldrb	r3, [r2, #0]
 8008360:	600b      	str	r3, [r1, #0]
 8008362:	7812      	ldrb	r2, [r2, #0]
 8008364:	1e10      	subs	r0, r2, #0
 8008366:	bf18      	it	ne
 8008368:	2001      	movne	r0, #1
 800836a:	b002      	add	sp, #8
 800836c:	4770      	bx	lr
 800836e:	4610      	mov	r0, r2
 8008370:	e7fb      	b.n	800836a <__ascii_mbtowc+0x16>
 8008372:	f06f 0001 	mvn.w	r0, #1
 8008376:	e7f8      	b.n	800836a <__ascii_mbtowc+0x16>

08008378 <_realloc_r>:
 8008378:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800837c:	4680      	mov	r8, r0
 800837e:	4615      	mov	r5, r2
 8008380:	460c      	mov	r4, r1
 8008382:	b921      	cbnz	r1, 800838e <_realloc_r+0x16>
 8008384:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008388:	4611      	mov	r1, r2
 800838a:	f7fe bf91 	b.w	80072b0 <_malloc_r>
 800838e:	b92a      	cbnz	r2, 800839c <_realloc_r+0x24>
 8008390:	f7fe ff1a 	bl	80071c8 <_free_r>
 8008394:	2400      	movs	r4, #0
 8008396:	4620      	mov	r0, r4
 8008398:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800839c:	f000 f8c5 	bl	800852a <_malloc_usable_size_r>
 80083a0:	4285      	cmp	r5, r0
 80083a2:	4606      	mov	r6, r0
 80083a4:	d802      	bhi.n	80083ac <_realloc_r+0x34>
 80083a6:	ebb5 0f50 	cmp.w	r5, r0, lsr #1
 80083aa:	d8f4      	bhi.n	8008396 <_realloc_r+0x1e>
 80083ac:	4629      	mov	r1, r5
 80083ae:	4640      	mov	r0, r8
 80083b0:	f7fe ff7e 	bl	80072b0 <_malloc_r>
 80083b4:	4607      	mov	r7, r0
 80083b6:	2800      	cmp	r0, #0
 80083b8:	d0ec      	beq.n	8008394 <_realloc_r+0x1c>
 80083ba:	42b5      	cmp	r5, r6
 80083bc:	462a      	mov	r2, r5
 80083be:	4621      	mov	r1, r4
 80083c0:	bf28      	it	cs
 80083c2:	4632      	movcs	r2, r6
 80083c4:	f7ff ff86 	bl	80082d4 <memcpy>
 80083c8:	4621      	mov	r1, r4
 80083ca:	4640      	mov	r0, r8
 80083cc:	f7fe fefc 	bl	80071c8 <_free_r>
 80083d0:	463c      	mov	r4, r7
 80083d2:	e7e0      	b.n	8008396 <_realloc_r+0x1e>

080083d4 <__ascii_wctomb>:
 80083d4:	4603      	mov	r3, r0
 80083d6:	4608      	mov	r0, r1
 80083d8:	b141      	cbz	r1, 80083ec <__ascii_wctomb+0x18>
 80083da:	2aff      	cmp	r2, #255	@ 0xff
 80083dc:	d904      	bls.n	80083e8 <__ascii_wctomb+0x14>
 80083de:	228a      	movs	r2, #138	@ 0x8a
 80083e0:	601a      	str	r2, [r3, #0]
 80083e2:	f04f 30ff 	mov.w	r0, #4294967295
 80083e6:	4770      	bx	lr
 80083e8:	700a      	strb	r2, [r1, #0]
 80083ea:	2001      	movs	r0, #1
 80083ec:	4770      	bx	lr
	...

080083f0 <fiprintf>:
 80083f0:	b40e      	push	{r1, r2, r3}
 80083f2:	b503      	push	{r0, r1, lr}
 80083f4:	4601      	mov	r1, r0
 80083f6:	ab03      	add	r3, sp, #12
 80083f8:	4805      	ldr	r0, [pc, #20]	@ (8008410 <fiprintf+0x20>)
 80083fa:	f853 2b04 	ldr.w	r2, [r3], #4
 80083fe:	6800      	ldr	r0, [r0, #0]
 8008400:	9301      	str	r3, [sp, #4]
 8008402:	f7ff fce5 	bl	8007dd0 <_vfiprintf_r>
 8008406:	b002      	add	sp, #8
 8008408:	f85d eb04 	ldr.w	lr, [sp], #4
 800840c:	b003      	add	sp, #12
 800840e:	4770      	bx	lr
 8008410:	2000001c 	.word	0x2000001c

08008414 <__swhatbuf_r>:
 8008414:	b570      	push	{r4, r5, r6, lr}
 8008416:	460c      	mov	r4, r1
 8008418:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800841c:	2900      	cmp	r1, #0
 800841e:	b096      	sub	sp, #88	@ 0x58
 8008420:	4615      	mov	r5, r2
 8008422:	461e      	mov	r6, r3
 8008424:	da0d      	bge.n	8008442 <__swhatbuf_r+0x2e>
 8008426:	89a3      	ldrh	r3, [r4, #12]
 8008428:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800842c:	f04f 0100 	mov.w	r1, #0
 8008430:	bf14      	ite	ne
 8008432:	2340      	movne	r3, #64	@ 0x40
 8008434:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008438:	2000      	movs	r0, #0
 800843a:	6031      	str	r1, [r6, #0]
 800843c:	602b      	str	r3, [r5, #0]
 800843e:	b016      	add	sp, #88	@ 0x58
 8008440:	bd70      	pop	{r4, r5, r6, pc}
 8008442:	466a      	mov	r2, sp
 8008444:	f000 f848 	bl	80084d8 <_fstat_r>
 8008448:	2800      	cmp	r0, #0
 800844a:	dbec      	blt.n	8008426 <__swhatbuf_r+0x12>
 800844c:	9901      	ldr	r1, [sp, #4]
 800844e:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8008452:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8008456:	4259      	negs	r1, r3
 8008458:	4159      	adcs	r1, r3
 800845a:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800845e:	e7eb      	b.n	8008438 <__swhatbuf_r+0x24>

08008460 <__smakebuf_r>:
 8008460:	898b      	ldrh	r3, [r1, #12]
 8008462:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8008464:	079d      	lsls	r5, r3, #30
 8008466:	4606      	mov	r6, r0
 8008468:	460c      	mov	r4, r1
 800846a:	d507      	bpl.n	800847c <__smakebuf_r+0x1c>
 800846c:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008470:	6023      	str	r3, [r4, #0]
 8008472:	6123      	str	r3, [r4, #16]
 8008474:	2301      	movs	r3, #1
 8008476:	6163      	str	r3, [r4, #20]
 8008478:	b003      	add	sp, #12
 800847a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800847c:	ab01      	add	r3, sp, #4
 800847e:	466a      	mov	r2, sp
 8008480:	f7ff ffc8 	bl	8008414 <__swhatbuf_r>
 8008484:	9f00      	ldr	r7, [sp, #0]
 8008486:	4605      	mov	r5, r0
 8008488:	4639      	mov	r1, r7
 800848a:	4630      	mov	r0, r6
 800848c:	f7fe ff10 	bl	80072b0 <_malloc_r>
 8008490:	b948      	cbnz	r0, 80084a6 <__smakebuf_r+0x46>
 8008492:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8008496:	059a      	lsls	r2, r3, #22
 8008498:	d4ee      	bmi.n	8008478 <__smakebuf_r+0x18>
 800849a:	f023 0303 	bic.w	r3, r3, #3
 800849e:	f043 0302 	orr.w	r3, r3, #2
 80084a2:	81a3      	strh	r3, [r4, #12]
 80084a4:	e7e2      	b.n	800846c <__smakebuf_r+0xc>
 80084a6:	89a3      	ldrh	r3, [r4, #12]
 80084a8:	6020      	str	r0, [r4, #0]
 80084aa:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80084ae:	81a3      	strh	r3, [r4, #12]
 80084b0:	9b01      	ldr	r3, [sp, #4]
 80084b2:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80084b6:	b15b      	cbz	r3, 80084d0 <__smakebuf_r+0x70>
 80084b8:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80084bc:	4630      	mov	r0, r6
 80084be:	f000 f81d 	bl	80084fc <_isatty_r>
 80084c2:	b128      	cbz	r0, 80084d0 <__smakebuf_r+0x70>
 80084c4:	89a3      	ldrh	r3, [r4, #12]
 80084c6:	f023 0303 	bic.w	r3, r3, #3
 80084ca:	f043 0301 	orr.w	r3, r3, #1
 80084ce:	81a3      	strh	r3, [r4, #12]
 80084d0:	89a3      	ldrh	r3, [r4, #12]
 80084d2:	431d      	orrs	r5, r3
 80084d4:	81a5      	strh	r5, [r4, #12]
 80084d6:	e7cf      	b.n	8008478 <__smakebuf_r+0x18>

080084d8 <_fstat_r>:
 80084d8:	b538      	push	{r3, r4, r5, lr}
 80084da:	4d07      	ldr	r5, [pc, #28]	@ (80084f8 <_fstat_r+0x20>)
 80084dc:	2300      	movs	r3, #0
 80084de:	4604      	mov	r4, r0
 80084e0:	4608      	mov	r0, r1
 80084e2:	4611      	mov	r1, r2
 80084e4:	602b      	str	r3, [r5, #0]
 80084e6:	f7f9 fa47 	bl	8001978 <_fstat>
 80084ea:	1c43      	adds	r3, r0, #1
 80084ec:	d102      	bne.n	80084f4 <_fstat_r+0x1c>
 80084ee:	682b      	ldr	r3, [r5, #0]
 80084f0:	b103      	cbz	r3, 80084f4 <_fstat_r+0x1c>
 80084f2:	6023      	str	r3, [r4, #0]
 80084f4:	bd38      	pop	{r3, r4, r5, pc}
 80084f6:	bf00      	nop
 80084f8:	2000050c 	.word	0x2000050c

080084fc <_isatty_r>:
 80084fc:	b538      	push	{r3, r4, r5, lr}
 80084fe:	4d06      	ldr	r5, [pc, #24]	@ (8008518 <_isatty_r+0x1c>)
 8008500:	2300      	movs	r3, #0
 8008502:	4604      	mov	r4, r0
 8008504:	4608      	mov	r0, r1
 8008506:	602b      	str	r3, [r5, #0]
 8008508:	f7f9 fa46 	bl	8001998 <_isatty>
 800850c:	1c43      	adds	r3, r0, #1
 800850e:	d102      	bne.n	8008516 <_isatty_r+0x1a>
 8008510:	682b      	ldr	r3, [r5, #0]
 8008512:	b103      	cbz	r3, 8008516 <_isatty_r+0x1a>
 8008514:	6023      	str	r3, [r4, #0]
 8008516:	bd38      	pop	{r3, r4, r5, pc}
 8008518:	2000050c 	.word	0x2000050c

0800851c <abort>:
 800851c:	b508      	push	{r3, lr}
 800851e:	2006      	movs	r0, #6
 8008520:	f000 f834 	bl	800858c <raise>
 8008524:	2001      	movs	r0, #1
 8008526:	f7f9 f9d7 	bl	80018d8 <_exit>

0800852a <_malloc_usable_size_r>:
 800852a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800852e:	1f18      	subs	r0, r3, #4
 8008530:	2b00      	cmp	r3, #0
 8008532:	bfbc      	itt	lt
 8008534:	580b      	ldrlt	r3, [r1, r0]
 8008536:	18c0      	addlt	r0, r0, r3
 8008538:	4770      	bx	lr

0800853a <_raise_r>:
 800853a:	291f      	cmp	r1, #31
 800853c:	b538      	push	{r3, r4, r5, lr}
 800853e:	4605      	mov	r5, r0
 8008540:	460c      	mov	r4, r1
 8008542:	d904      	bls.n	800854e <_raise_r+0x14>
 8008544:	2316      	movs	r3, #22
 8008546:	6003      	str	r3, [r0, #0]
 8008548:	f04f 30ff 	mov.w	r0, #4294967295
 800854c:	bd38      	pop	{r3, r4, r5, pc}
 800854e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008550:	b112      	cbz	r2, 8008558 <_raise_r+0x1e>
 8008552:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008556:	b94b      	cbnz	r3, 800856c <_raise_r+0x32>
 8008558:	4628      	mov	r0, r5
 800855a:	f000 f831 	bl	80085c0 <_getpid_r>
 800855e:	4622      	mov	r2, r4
 8008560:	4601      	mov	r1, r0
 8008562:	4628      	mov	r0, r5
 8008564:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008568:	f000 b818 	b.w	800859c <_kill_r>
 800856c:	2b01      	cmp	r3, #1
 800856e:	d00a      	beq.n	8008586 <_raise_r+0x4c>
 8008570:	1c59      	adds	r1, r3, #1
 8008572:	d103      	bne.n	800857c <_raise_r+0x42>
 8008574:	2316      	movs	r3, #22
 8008576:	6003      	str	r3, [r0, #0]
 8008578:	2001      	movs	r0, #1
 800857a:	e7e7      	b.n	800854c <_raise_r+0x12>
 800857c:	2100      	movs	r1, #0
 800857e:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008582:	4620      	mov	r0, r4
 8008584:	4798      	blx	r3
 8008586:	2000      	movs	r0, #0
 8008588:	e7e0      	b.n	800854c <_raise_r+0x12>
	...

0800858c <raise>:
 800858c:	4b02      	ldr	r3, [pc, #8]	@ (8008598 <raise+0xc>)
 800858e:	4601      	mov	r1, r0
 8008590:	6818      	ldr	r0, [r3, #0]
 8008592:	f7ff bfd2 	b.w	800853a <_raise_r>
 8008596:	bf00      	nop
 8008598:	2000001c 	.word	0x2000001c

0800859c <_kill_r>:
 800859c:	b538      	push	{r3, r4, r5, lr}
 800859e:	4d07      	ldr	r5, [pc, #28]	@ (80085bc <_kill_r+0x20>)
 80085a0:	2300      	movs	r3, #0
 80085a2:	4604      	mov	r4, r0
 80085a4:	4608      	mov	r0, r1
 80085a6:	4611      	mov	r1, r2
 80085a8:	602b      	str	r3, [r5, #0]
 80085aa:	f7f9 f985 	bl	80018b8 <_kill>
 80085ae:	1c43      	adds	r3, r0, #1
 80085b0:	d102      	bne.n	80085b8 <_kill_r+0x1c>
 80085b2:	682b      	ldr	r3, [r5, #0]
 80085b4:	b103      	cbz	r3, 80085b8 <_kill_r+0x1c>
 80085b6:	6023      	str	r3, [r4, #0]
 80085b8:	bd38      	pop	{r3, r4, r5, pc}
 80085ba:	bf00      	nop
 80085bc:	2000050c 	.word	0x2000050c

080085c0 <_getpid_r>:
 80085c0:	f7f9 b972 	b.w	80018a8 <_getpid>

080085c4 <_init>:
 80085c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085c6:	bf00      	nop
 80085c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085ca:	bc08      	pop	{r3}
 80085cc:	469e      	mov	lr, r3
 80085ce:	4770      	bx	lr

080085d0 <_fini>:
 80085d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80085d2:	bf00      	nop
 80085d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80085d6:	bc08      	pop	{r3}
 80085d8:	469e      	mov	lr, r3
 80085da:	4770      	bx	lr
