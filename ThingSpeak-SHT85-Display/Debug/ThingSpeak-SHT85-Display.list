
ThingSpeak-SHT85-Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000b54c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       0000076c  0800b6f0  0800b6f0  0000c6f0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800be5c  0800be5c  0000d1f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800be5c  0800be5c  0000ce5c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800be64  0800be64  0000d1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800be64  0800be64  0000ce64  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800be68  0800be68  0000ce68  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800be6c  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000754  200001f0  0800c05c  0000d1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  20000944  0800c05c  0000d944  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011504  00000000  00000000  0000d220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000032cb  00000000  00000000  0001e724  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f18  00000000  00000000  000219f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b9a  00000000  00000000  00022908  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00018595  00000000  00000000  000234a2  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00015429  00000000  00000000  0003ba37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008d33c  00000000  00000000  00050e60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000de19c  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005204  00000000  00000000  000de1e0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000e33e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800b6d4 	.word	0x0800b6d4

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800b6d4 	.word	0x0800b6d4

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <HAL_UART_RxCpltCallback>:

extern UART_HandleTypeDef huart2;


// Callback de recepción por interrupción
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {  // Verificar si es el UART correcto
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a13      	ldr	r2, [pc, #76]	@ (800108c <HAL_UART_RxCpltCallback+0x5c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d120      	bne.n	8001084 <HAL_UART_RxCpltCallback+0x54>
        if (rxIndex < sizeof(response) - 1) {  // Evitar desbordamiento del buffer
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <HAL_UART_RxCpltCallback+0x60>)
 8001044:	781b      	ldrb	r3, [r3, #0]
            rxIndex++;  // Avanzar índice
 8001046:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <HAL_UART_RxCpltCallback+0x60>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	3301      	adds	r3, #1
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <HAL_UART_RxCpltCallback+0x60>)
 8001052:	701a      	strb	r2, [r3, #0]
            if (response[rxIndex - 1] == '\n') {  // Detectar fin de línea
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HAL_UART_RxCpltCallback+0x60>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	3b01      	subs	r3, #1
 800105c:	4a0d      	ldr	r2, [pc, #52]	@ (8001094 <HAL_UART_RxCpltCallback+0x64>)
 800105e:	5cd3      	ldrb	r3, [r2, r3]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b0a      	cmp	r3, #10
 8001064:	d103      	bne.n	800106e <HAL_UART_RxCpltCallback+0x3e>
                rxComplete = 1;  // Marcar recepción completa
 8001066:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <HAL_UART_RxCpltCallback+0x68>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
            }
        } else {
            rxComplete = 1;  // Si se llena el buffer, finalizar recepción
        }
    }
}
 800106c:	e00a      	b.n	8001084 <HAL_UART_RxCpltCallback+0x54>
                HAL_UART_Receive_IT(&huart2, (uint8_t*)&response[rxIndex], 1);  // Recibir siguiente byte
 800106e:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <HAL_UART_RxCpltCallback+0x60>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	461a      	mov	r2, r3
 8001076:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <HAL_UART_RxCpltCallback+0x64>)
 8001078:	4413      	add	r3, r2
 800107a:	2201      	movs	r2, #1
 800107c:	4619      	mov	r1, r3
 800107e:	4807      	ldr	r0, [pc, #28]	@ (800109c <HAL_UART_RxCpltCallback+0x6c>)
 8001080:	f004 fefb 	bl	8005e7a <HAL_UART_Receive_IT>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40004400 	.word	0x40004400
 8001090:	2000040c 	.word	0x2000040c
 8001094:	2000020c 	.word	0x2000020c
 8001098:	2000040d 	.word	0x2000040d
 800109c:	20000514 	.word	0x20000514

080010a0 <esp8266_receive_response_IT>:

// Inicia la recepción por interrupción
void esp8266_receive_response_IT(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
    rxIndex = 0;  // Reiniciar índice
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <esp8266_receive_response_IT+0x38>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
    rxComplete = 0;  // Limpiar bandera de recepción completa
 80010aa:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <esp8266_receive_response_IT+0x3c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
    memset(response, 0, sizeof(response));  // Limpiar el buffer
 80010b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010b4:	2100      	movs	r1, #0
 80010b6:	480a      	ldr	r0, [pc, #40]	@ (80010e0 <esp8266_receive_response_IT+0x40>)
 80010b8:	f006 ffcc 	bl	8008054 <memset>
    HAL_UART_Receive_IT(&huart2, (uint8_t*)&response[rxIndex], 1);  // Recibir primer byte
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <esp8266_receive_response_IT+0x38>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <esp8266_receive_response_IT+0x40>)
 80010c6:	4413      	add	r3, r2
 80010c8:	2201      	movs	r2, #1
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <esp8266_receive_response_IT+0x44>)
 80010ce:	f004 fed4 	bl	8005e7a <HAL_UART_Receive_IT>
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000040c 	.word	0x2000040c
 80010dc:	2000040d 	.word	0x2000040d
 80010e0:	2000020c 	.word	0x2000020c
 80010e4:	20000514 	.word	0x20000514

080010e8 <esp8266_send_command>:


// Envía un comando al ESP8266
void esp8266_send_command(const char* cmd) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff f8c5 	bl	8000280 <strlen>
 80010f6:	4603      	mov	r3, r0
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4803      	ldr	r0, [pc, #12]	@ (8001110 <esp8266_send_command+0x28>)
 8001102:	f004 fd98 	bl	8005c36 <HAL_UART_Transmit>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000514 	.word	0x20000514

08001114 <esp8266_is_response_ready>:


uint8_t esp8266_is_response_ready(void) { 	//Verifica si la respuesta del ESP8266 está lista
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
    return rxComplete;		//En lugar de acceder directamente a rxComplete (que es static y privado en esp8266.c), accedes por función.
 8001118:	4b03      	ldr	r3, [pc, #12]	@ (8001128 <esp8266_is_response_ready+0x14>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b2db      	uxtb	r3, r3
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	2000040d 	.word	0x2000040d

0800112c <esp8266_get_response>:

char* esp8266_get_response(void) {		// Devuelve el contenido de la respuesta recibida del ESP8266
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
	return response;
 8001130:	4b02      	ldr	r3, [pc, #8]	@ (800113c <esp8266_get_response+0x10>)
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	2000020c 	.word	0x2000020c

08001140 <esp8266_clear_response_flag>:
//    return temp;
//}



void esp8266_clear_response_flag(void) {		// Limpia la bandera que indica que la respuesta ha sido recibida
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
    rxComplete = 0;
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <esp8266_clear_response_flag+0x14>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	2000040d 	.word	0x2000040d

08001158 <esp8266_wait_response_timeout>:

bool esp8266_wait_response_timeout(uint32_t timeout_ms) {		// Espera una respuesta del ESP8266 durante un tiempo máximo dado
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    uint32_t start = HAL_GetTick();			// Para no bloquear el resto del programa en reconexión de esp8266
 8001160:	f001 ffe2 	bl	8003128 <HAL_GetTick>
 8001164:	60f8      	str	r0, [r7, #12]
    while (!esp8266_is_response_ready()) {
 8001166:	e009      	b.n	800117c <esp8266_wait_response_timeout+0x24>
        if ((HAL_GetTick() - start) > timeout_ms) return false;
 8001168:	f001 ffde 	bl	8003128 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	429a      	cmp	r2, r3
 8001176:	d201      	bcs.n	800117c <esp8266_wait_response_timeout+0x24>
 8001178:	2300      	movs	r3, #0
 800117a:	e005      	b.n	8001188 <esp8266_wait_response_timeout+0x30>
    while (!esp8266_is_response_ready()) {
 800117c:	f7ff ffca 	bl	8001114 <esp8266_is_response_ready>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f0      	beq.n	8001168 <esp8266_wait_response_timeout+0x10>
    }
    return true;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <esp8266_reset_and_reconnect>:
    esp8266_send_command(command);
    esp8266_receive_response_IT();
    esp8266_wait_response_timeout(5000);  // Espera una respuesta del ESP8266
}

void esp8266_reset_and_reconnect(const char* ssid, const char* password) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b09c      	sub	sp, #112	@ 0x70
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	esp8266_send_command("AT+RST\r\n");
 800119a:	480f      	ldr	r0, [pc, #60]	@ (80011d8 <esp8266_reset_and_reconnect+0x48>)
 800119c:	f7ff ffa4 	bl	80010e8 <esp8266_send_command>
	esp8266_wait_response_timeout(2000);		// Espera
 80011a0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011a4:	f7ff ffd8 	bl	8001158 <esp8266_wait_response_timeout>
	esp8266_clear_response_flag();
 80011a8:	f7ff ffca 	bl	8001140 <esp8266_clear_response_flag>
	// Conectar a WiFi (sin configurar el modo station nuevamente)
	char connectCmd[100];
	sprintf(connectCmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 80011ac:	f107 000c 	add.w	r0, r7, #12
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	4909      	ldr	r1, [pc, #36]	@ (80011dc <esp8266_reset_and_reconnect+0x4c>)
 80011b6:	f006 fe39 	bl	8007e2c <siprintf>
	esp8266_send_command(connectCmd);
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff92 	bl	80010e8 <esp8266_send_command>
	esp8266_wait_response_timeout(5000);			// Espera
 80011c4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80011c8:	f7ff ffc6 	bl	8001158 <esp8266_wait_response_timeout>
	esp8266_clear_response_flag();
 80011cc:	f7ff ffb8 	bl	8001140 <esp8266_clear_response_flag>
}
 80011d0:	bf00      	nop
 80011d2:	3770      	adds	r7, #112	@ 0x70
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	0800b700 	.word	0x0800b700
 80011dc:	0800b70c 	.word	0x0800b70c

080011e0 <LCD_Init>:
static void LCD_EnablePulse(void);
static void LCD_Send(uint8_t value, uint8_t mode);

static uint32_t lastTick = 0;

void LCD_Init(void) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
//    HAL_Delay(20); // Wait for LCD to power up
	// Esperar 20 ms sin bloquear
	lastTick = HAL_GetTick();
 80011e4:	f001 ffa0 	bl	8003128 <HAL_GetTick>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a18      	ldr	r2, [pc, #96]	@ (800124c <LCD_Init+0x6c>)
 80011ec:	6013      	str	r3, [r2, #0]
	while ((HAL_GetTick() - lastTick) < 20);  // Espera activa de 20 ms
 80011ee:	bf00      	nop
 80011f0:	f001 ff9a 	bl	8003128 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	4b15      	ldr	r3, [pc, #84]	@ (800124c <LCD_Init+0x6c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b13      	cmp	r3, #19
 80011fe:	d9f7      	bls.n	80011f0 <LCD_Init+0x10>

	// Inicializar en modo de 4 bits
	LCD_Send(0x33, 0);  // Inicializa en modo de 8 bits
 8001200:	2100      	movs	r1, #0
 8001202:	2033      	movs	r0, #51	@ 0x33
 8001204:	f000 f8b8 	bl	8001378 <LCD_Send>
	LCD_Send(0x32, 0);  // Cambia a modo de 4 bits
 8001208:	2100      	movs	r1, #0
 800120a:	2032      	movs	r0, #50	@ 0x32
 800120c:	f000 f8b4 	bl	8001378 <LCD_Send>
	LCD_SendCommand(0x28);  // 2 líneas, matriz de 5x7
 8001210:	2028      	movs	r0, #40	@ 0x28
 8001212:	f000 f81d 	bl	8001250 <LCD_SendCommand>
	LCD_SendCommand(0x0C);  // Mostrar encendido, cursor apagado
 8001216:	200c      	movs	r0, #12
 8001218:	f000 f81a 	bl	8001250 <LCD_SendCommand>
	LCD_SendCommand(0x06);  // Incrementar cursor
 800121c:	2006      	movs	r0, #6
 800121e:	f000 f817 	bl	8001250 <LCD_SendCommand>
	LCD_SendCommand(0x01);  // Limpiar pantalla
 8001222:	2001      	movs	r0, #1
 8001224:	f000 f814 	bl	8001250 <LCD_SendCommand>
    //HAL_Delay(2);
	lastTick = HAL_GetTick();
 8001228:	f001 ff7e 	bl	8003128 <HAL_GetTick>
 800122c:	4603      	mov	r3, r0
 800122e:	4a07      	ldr	r2, [pc, #28]	@ (800124c <LCD_Init+0x6c>)
 8001230:	6013      	str	r3, [r2, #0]
	while ((HAL_GetTick() - lastTick) < 2);  // Espera activa de 2 ms
 8001232:	bf00      	nop
 8001234:	f001 ff78 	bl	8003128 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	4b04      	ldr	r3, [pc, #16]	@ (800124c <LCD_Init+0x6c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b01      	cmp	r3, #1
 8001242:	d9f7      	bls.n	8001234 <LCD_Init+0x54>

}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000410 	.word	0x20000410

08001250 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
    LCD_Send(cmd, 0);
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f88a 	bl	8001378 <LCD_Send>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
    LCD_Send(data, 1);
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2101      	movs	r1, #1
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f87c 	bl	8001378 <LCD_Send>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <LCD_Print>:

void LCD_Print(const char* str) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001290:	e007      	b.n	80012a2 <LCD_Print+0x1a>
        LCD_SendData((uint8_t)(*str));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ffe8 	bl	800126c <LCD_SendData>
        str++;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3301      	adds	r3, #1
 80012a0:	607b      	str	r3, [r7, #4]
    while (*str) {
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f3      	bne.n	8001292 <LCD_Print+0xa>
    }
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	460a      	mov	r2, r1
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	4613      	mov	r3, r2
 80012c2:	71bb      	strb	r3, [r7, #6]
    uint8_t address = (row == 0) ? col : (col + 0x40);
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <LCD_SetCursor+0x1e>
 80012ca:	79bb      	ldrb	r3, [r7, #6]
 80012cc:	3340      	adds	r3, #64	@ 0x40
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	e000      	b.n	80012d4 <LCD_SetCursor+0x20>
 80012d2:	79bb      	ldrb	r3, [r7, #6]
 80012d4:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(0x80 | address);
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ffb6 	bl	8001250 <LCD_SendCommand>
}
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <LCD_Clear>:

void LCD_Clear(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01); // Clear display command
 80012f0:	2001      	movs	r0, #1
 80012f2:	f7ff ffad 	bl	8001250 <LCD_SendCommand>
    //HAL_Delay(2);          // Delay to allow the command to process
    lastTick = HAL_GetTick();
 80012f6:	f001 ff17 	bl	8003128 <HAL_GetTick>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4a06      	ldr	r2, [pc, #24]	@ (8001318 <LCD_Clear+0x2c>)
 80012fe:	6013      	str	r3, [r2, #0]
	while ((HAL_GetTick() - lastTick) < 2);  // Espera activa de 2 ms
 8001300:	bf00      	nop
 8001302:	f001 ff11 	bl	8003128 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	4b03      	ldr	r3, [pc, #12]	@ (8001318 <LCD_Clear+0x2c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d9f7      	bls.n	8001302 <LCD_Clear+0x16>
}
 8001312:	bf00      	nop
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000410 	.word	0x20000410

0800131c <LCD_EnablePulse>:

static void LCD_EnablePulse(void) {
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_SET);
 8001320:	2201      	movs	r2, #1
 8001322:	2102      	movs	r1, #2
 8001324:	4812      	ldr	r0, [pc, #72]	@ (8001370 <LCD_EnablePulse+0x54>)
 8001326:	f002 fa57 	bl	80037d8 <HAL_GPIO_WritePin>
    //HAL_Delay(1);
    lastTick = HAL_GetTick();
 800132a:	f001 fefd 	bl	8003128 <HAL_GetTick>
 800132e:	4603      	mov	r3, r0
 8001330:	4a10      	ldr	r2, [pc, #64]	@ (8001374 <LCD_EnablePulse+0x58>)
 8001332:	6013      	str	r3, [r2, #0]
	while ((HAL_GetTick() - lastTick) < 1);  // Espera activa de 1 ms
 8001334:	bf00      	nop
 8001336:	f001 fef7 	bl	8003128 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <LCD_EnablePulse+0x58>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d0f8      	beq.n	8001336 <LCD_EnablePulse+0x1a>
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	2102      	movs	r1, #2
 8001348:	4809      	ldr	r0, [pc, #36]	@ (8001370 <LCD_EnablePulse+0x54>)
 800134a:	f002 fa45 	bl	80037d8 <HAL_GPIO_WritePin>
//    HAL_Delay(1);
    lastTick = HAL_GetTick();
 800134e:	f001 feeb 	bl	8003128 <HAL_GetTick>
 8001352:	4603      	mov	r3, r0
 8001354:	4a07      	ldr	r2, [pc, #28]	@ (8001374 <LCD_EnablePulse+0x58>)
 8001356:	6013      	str	r3, [r2, #0]
    while ((HAL_GetTick() - lastTick) < 1);  // Espera activa de 1 ms
 8001358:	bf00      	nop
 800135a:	f001 fee5 	bl	8003128 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <LCD_EnablePulse+0x58>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d0f8      	beq.n	800135a <LCD_EnablePulse+0x3e>
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40020800 	.word	0x40020800
 8001374:	20000410 	.word	0x20000410

08001378 <LCD_Send>:

static void LCD_Send(uint8_t value, uint8_t mode) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	460a      	mov	r2, r1
 8001382:	71fb      	strb	r3, [r7, #7]
 8001384:	4613      	mov	r3, r2
 8001386:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, (mode ? GPIO_PIN_SET : GPIO_PIN_RESET));
 8001388:	79bb      	ldrb	r3, [r7, #6]
 800138a:	2b00      	cmp	r3, #0
 800138c:	bf14      	ite	ne
 800138e:	2301      	movne	r3, #1
 8001390:	2300      	moveq	r3, #0
 8001392:	b2db      	uxtb	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	2101      	movs	r1, #1
 8001398:	482e      	ldr	r0, [pc, #184]	@ (8001454 <LCD_Send+0xdc>)
 800139a:	f002 fa1d 	bl	80037d8 <HAL_GPIO_WritePin>

    // Send high nibble
    HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN, (value & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	111b      	asrs	r3, r3, #4
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	2104      	movs	r1, #4
 80013ae:	4829      	ldr	r0, [pc, #164]	@ (8001454 <LCD_Send+0xdc>)
 80013b0:	f002 fa12 	bl	80037d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_PORT, LCD_D5_PIN, (value & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	115b      	asrs	r3, r3, #5
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	2108      	movs	r1, #8
 80013c4:	4823      	ldr	r0, [pc, #140]	@ (8001454 <LCD_Send+0xdc>)
 80013c6:	f002 fa07 	bl	80037d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_PORT, LCD_D6_PIN, (value & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	119b      	asrs	r3, r3, #6
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	2110      	movs	r1, #16
 80013da:	481e      	ldr	r0, [pc, #120]	@ (8001454 <LCD_Send+0xdc>)
 80013dc:	f002 f9fc 	bl	80037d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_PORT, LCD_D7_PIN, (value & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	09db      	lsrs	r3, r3, #7
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	461a      	mov	r2, r3
 80013e8:	2120      	movs	r1, #32
 80013ea:	481a      	ldr	r0, [pc, #104]	@ (8001454 <LCD_Send+0xdc>)
 80013ec:	f002 f9f4 	bl	80037d8 <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 80013f0:	f7ff ff94 	bl	800131c <LCD_EnablePulse>

    // Send low nibble
    HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN, (value & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	461a      	mov	r2, r3
 80013fe:	2104      	movs	r1, #4
 8001400:	4814      	ldr	r0, [pc, #80]	@ (8001454 <LCD_Send+0xdc>)
 8001402:	f002 f9e9 	bl	80037d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_PORT, LCD_D5_PIN, (value & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	105b      	asrs	r3, r3, #1
 800140a:	b2db      	uxtb	r3, r3
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	b2db      	uxtb	r3, r3
 8001412:	461a      	mov	r2, r3
 8001414:	2108      	movs	r1, #8
 8001416:	480f      	ldr	r0, [pc, #60]	@ (8001454 <LCD_Send+0xdc>)
 8001418:	f002 f9de 	bl	80037d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_PORT, LCD_D6_PIN, (value & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	109b      	asrs	r3, r3, #2
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	2110      	movs	r1, #16
 800142c:	4809      	ldr	r0, [pc, #36]	@ (8001454 <LCD_Send+0xdc>)
 800142e:	f002 f9d3 	bl	80037d8 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_PORT, LCD_D7_PIN, (value & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	10db      	asrs	r3, r3, #3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	b2db      	uxtb	r3, r3
 800143e:	461a      	mov	r2, r3
 8001440:	2120      	movs	r1, #32
 8001442:	4804      	ldr	r0, [pc, #16]	@ (8001454 <LCD_Send+0xdc>)
 8001444:	f002 f9c8 	bl	80037d8 <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 8001448:	f7ff ff68 	bl	800131c <LCD_EnablePulse>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40020800 	.word	0x40020800

08001458 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001460:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001464:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d013      	beq.n	8001498 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001470:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001474:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001478:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00b      	beq.n	8001498 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001480:	e000      	b.n	8001484 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001482:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001484:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f9      	beq.n	8001482 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800148e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001498:	687b      	ldr	r3, [r7, #4]
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <_write>:
    return ch;
}



int _write(int file, char *ptr, int len){
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
	int i=0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
	for (i=0; i<len;i++){
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	e007      	b.n	80014cc <_write+0x26>
		ITM_SendChar((*ptr));
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ffc9 	bl	8001458 <ITM_SendChar>
	for (i=0; i<len;i++){
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbf3      	blt.n	80014bc <_write+0x16>

	}
	return len;
 80014d4:	687b      	ldr	r3, [r7, #4]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <floatToStr>:


const char* floatToStr(float num, int precision) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80014ea:	6038      	str	r0, [r7, #0]
    static char str[20]; // Buffer estático para almacenar la cadena resultante
    sprintf(str, "%.*f", precision, num);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff f833 	bl	8000558 <__aeabi_f2d>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	e9cd 2300 	strd	r2, r3, [sp]
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	4904      	ldr	r1, [pc, #16]	@ (8001510 <floatToStr+0x30>)
 80014fe:	4805      	ldr	r0, [pc, #20]	@ (8001514 <floatToStr+0x34>)
 8001500:	f006 fc94 	bl	8007e2c <siprintf>
    return str;
 8001504:	4b03      	ldr	r3, [pc, #12]	@ (8001514 <floatToStr+0x34>)
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	0800b74c 	.word	0x0800b74c
 8001514:	20000594 	.word	0x20000594

08001518 <LCD_Update_Variables>:

void LCD_Update_Variables(float* temperature, float* humidity, float* luminosity) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
    const char* strTemp = floatToStr(*temperature, 2);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	2002      	movs	r0, #2
 800152c:	eeb0 0a67 	vmov.f32	s0, s15
 8001530:	f7ff ffd6 	bl	80014e0 <floatToStr>
 8001534:	61f8      	str	r0, [r7, #28]
    LCD_Clear();
 8001536:	f7ff fed9 	bl	80012ec <LCD_Clear>
    LCD_SetCursor(0, 0);
 800153a:	2100      	movs	r1, #0
 800153c:	2000      	movs	r0, #0
 800153e:	f7ff feb9 	bl	80012b4 <LCD_SetCursor>
    LCD_Print("T:");
 8001542:	4819      	ldr	r0, [pc, #100]	@ (80015a8 <LCD_Update_Variables+0x90>)
 8001544:	f7ff fea0 	bl	8001288 <LCD_Print>
    LCD_Print(strTemp);
 8001548:	69f8      	ldr	r0, [r7, #28]
 800154a:	f7ff fe9d 	bl	8001288 <LCD_Print>
    //LCD_SendData(223);  // Enviar código ASCII del símbolo de grados para HD44780
    LCD_Print("C | H:");
 800154e:	4817      	ldr	r0, [pc, #92]	@ (80015ac <LCD_Update_Variables+0x94>)
 8001550:	f7ff fe9a 	bl	8001288 <LCD_Print>
    const char* strHum = floatToStr(*humidity, 0);
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	2000      	movs	r0, #0
 800155c:	eeb0 0a67 	vmov.f32	s0, s15
 8001560:	f7ff ffbe 	bl	80014e0 <floatToStr>
 8001564:	61b8      	str	r0, [r7, #24]
    LCD_Print(strHum);
 8001566:	69b8      	ldr	r0, [r7, #24]
 8001568:	f7ff fe8e 	bl	8001288 <LCD_Print>
    LCD_Print("%");
 800156c:	4810      	ldr	r0, [pc, #64]	@ (80015b0 <LCD_Update_Variables+0x98>)
 800156e:	f7ff fe8b 	bl	8001288 <LCD_Print>
    const char* strLux = floatToStr(*luminosity, 3);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	2003      	movs	r0, #3
 800157a:	eeb0 0a67 	vmov.f32	s0, s15
 800157e:	f7ff ffaf 	bl	80014e0 <floatToStr>
 8001582:	6178      	str	r0, [r7, #20]
    LCD_SetCursor(1, 0);
 8001584:	2100      	movs	r1, #0
 8001586:	2001      	movs	r0, #1
 8001588:	f7ff fe94 	bl	80012b4 <LCD_SetCursor>
    LCD_Print("  L: ");
 800158c:	4809      	ldr	r0, [pc, #36]	@ (80015b4 <LCD_Update_Variables+0x9c>)
 800158e:	f7ff fe7b 	bl	8001288 <LCD_Print>
	LCD_Print(strLux);
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff fe78 	bl	8001288 <LCD_Print>
	LCD_Print(" lux");
 8001598:	4807      	ldr	r0, [pc, #28]	@ (80015b8 <LCD_Update_Variables+0xa0>)
 800159a:	f7ff fe75 	bl	8001288 <LCD_Print>
}
 800159e:	bf00      	nop
 80015a0:	3720      	adds	r7, #32
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	0800b754 	.word	0x0800b754
 80015ac:	0800b758 	.word	0x0800b758
 80015b0:	0800b760 	.word	0x0800b760
 80015b4:	0800b764 	.word	0x0800b764
 80015b8:	0800b76c 	.word	0x0800b76c

080015bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b084      	sub	sp, #16
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  lastTimeMeasurement = HAL_GetTick();
 80015c2:	f001 fdb1 	bl	8003128 <HAL_GetTick>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4ab1      	ldr	r2, [pc, #708]	@ (8001890 <main+0x2d4>)
 80015ca:	6013      	str	r3, [r2, #0]
  lastTimeDisplay = HAL_GetTick();
 80015cc:	f001 fdac 	bl	8003128 <HAL_GetTick>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4ab0      	ldr	r2, [pc, #704]	@ (8001894 <main+0x2d8>)
 80015d4:	6013      	str	r3, [r2, #0]
  lastThingSpeakSend = HAL_GetTick();
 80015d6:	f001 fda7 	bl	8003128 <HAL_GetTick>
 80015da:	4603      	mov	r3, r0
 80015dc:	4aae      	ldr	r2, [pc, #696]	@ (8001898 <main+0x2dc>)
 80015de:	6013      	str	r3, [r2, #0]
  lastMQTTSend = HAL_GetTick();
 80015e0:	f001 fda2 	bl	8003128 <HAL_GetTick>
 80015e4:	4603      	mov	r3, r0
 80015e6:	4aad      	ldr	r2, [pc, #692]	@ (800189c <main+0x2e0>)
 80015e8:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015ea:	f001 fd37 	bl	800305c <HAL_Init>

  /* USER CODE BEGIN Init */
  // Habilitar el ITM y DWT (necesario para printf por SWO). NO ESTOY SEGURO SI HAY QUE PONERLO. LO DICE CHATGPT
  CoreDebug->DEMCR |= CoreDebug_DEMCR_TRCENA_Msk;  // Enable TRC
 80015ee:	4bac      	ldr	r3, [pc, #688]	@ (80018a0 <main+0x2e4>)
 80015f0:	68db      	ldr	r3, [r3, #12]
 80015f2:	4aab      	ldr	r2, [pc, #684]	@ (80018a0 <main+0x2e4>)
 80015f4:	f043 7380 	orr.w	r3, r3, #16777216	@ 0x1000000
 80015f8:	60d3      	str	r3, [r2, #12]
  DWT->CTRL |= DWT_CTRL_CYCCNTENA_Msk;             // Enable DWT cycle counter
 80015fa:	4baa      	ldr	r3, [pc, #680]	@ (80018a4 <main+0x2e8>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4aa9      	ldr	r2, [pc, #676]	@ (80018a4 <main+0x2e8>)
 8001600:	f043 0301 	orr.w	r3, r3, #1
 8001604:	6013      	str	r3, [r2, #0]


  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8001606:	f000 f96f 	bl	80018e8 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800160a:	f000 fa91 	bl	8001b30 <MX_GPIO_Init>
  MX_I2C1_Init();
 800160e:	f000 f9d3 	bl	80019b8 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 8001612:	f000 fa63 	bl	8001adc <MX_USART2_UART_Init>
  MX_I2C2_Init();
 8001616:	f000 f9fd 	bl	8001a14 <MX_I2C2_Init>
  MX_SPI1_Init();
 800161a:	f000 fa29 	bl	8001a70 <MX_SPI1_Init>
  MX_FATFS_Init();
 800161e:	f005 fbbd 	bl	8006d9c <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MX_NVIC_Init();
 8001622:	f000 fb25 	bl	8001c70 <MX_NVIC_Init>

  LCD_Init();
 8001626:	f7ff fddb 	bl	80011e0 <LCD_Init>
  //ResetSHT85();      // Añade esto antes de iniciar en modo periódico


  SHT85_Init();
 800162a:	f000 ff6e 	bl	800250a <SHT85_Init>

  HAL_Delay(500);
 800162e:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001632:	f001 fd85 	bl	8003140 <HAL_Delay>

  VEML7700_Init();
 8001636:	f001 fb13 	bl	8002c60 <VEML7700_Init>
  connectToWiFi(WIFI_SSID, WIFI_PASS);
 800163a:	4b9b      	ldr	r3, [pc, #620]	@ (80018a8 <main+0x2ec>)
 800163c:	681b      	ldr	r3, [r3, #0]
 800163e:	4a9b      	ldr	r2, [pc, #620]	@ (80018ac <main+0x2f0>)
 8001640:	6812      	ldr	r2, [r2, #0]
 8001642:	4611      	mov	r1, r2
 8001644:	4618      	mov	r0, r3
 8001646:	f001 fb67 	bl	8002d18 <connectToWiFi>


  if(isWiFiConnected() == 1){
 800164a:	f001 fb9b 	bl	8002d84 <isWiFiConnected>
 800164e:	4603      	mov	r3, r0
 8001650:	2b01      	cmp	r3, #1
 8001652:	d10f      	bne.n	8001674 <main+0xb8>
	LCD_Clear();
 8001654:	f7ff fe4a 	bl	80012ec <LCD_Clear>
	LCD_SetCursor(0, 0);
 8001658:	2100      	movs	r1, #0
 800165a:	2000      	movs	r0, #0
 800165c:	f7ff fe2a 	bl	80012b4 <LCD_SetCursor>
	LCD_Print("Wifi conectado");
 8001660:	4893      	ldr	r0, [pc, #588]	@ (80018b0 <main+0x2f4>)
 8001662:	f7ff fe11 	bl	8001288 <LCD_Print>
	LCD_SetCursor(1, 0);
 8001666:	2100      	movs	r1, #0
 8001668:	2001      	movs	r0, #1
 800166a:	f7ff fe23 	bl	80012b4 <LCD_SetCursor>
	LCD_Print("correctamente");
 800166e:	4891      	ldr	r0, [pc, #580]	@ (80018b4 <main+0x2f8>)
 8001670:	f7ff fe0a 	bl	8001288 <LCD_Print>
  }

  printf("Inicio del programa...\n");
 8001674:	4890      	ldr	r0, [pc, #576]	@ (80018b8 <main+0x2fc>)
 8001676:	f006 fbd1 	bl	8007e1c <puts>

  Rele_Off(); // Relé inicializado en OFF
 800167a:	f000 ff1f 	bl	80024bc <Rele_Off>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uint32_t currentTick = HAL_GetTick();
 800167e:	f001 fd53 	bl	8003128 <HAL_GetTick>
 8001682:	60f8      	str	r0, [r7, #12]




	  // Medición de sensores
	  if (currentTick - lastTimeMeasurement >= MEASUREMENT_INTERVAL) {
 8001684:	4b82      	ldr	r3, [pc, #520]	@ (8001890 <main+0x2d4>)
 8001686:	681b      	ldr	r3, [r3, #0]
 8001688:	68fa      	ldr	r2, [r7, #12]
 800168a:	1ad3      	subs	r3, r2, r3
 800168c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001690:	d343      	bcc.n	800171a <main+0x15e>
		  //lastTimeMeasurement = currentTick;
		  lastTimeMeasurement += MEASUREMENT_INTERVAL; // Incrementar en lugar de reiniciar
 8001692:	4b7f      	ldr	r3, [pc, #508]	@ (8001890 <main+0x2d4>)
 8001694:	681b      	ldr	r3, [r3, #0]
 8001696:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 800169a:	4a7d      	ldr	r2, [pc, #500]	@ (8001890 <main+0x2d4>)
 800169c:	6013      	str	r3, [r2, #0]
		  //ReadSHT85_Periodic(&temperature, &humidity);
		  SHT85_ReadSingleShot(&temperature, &humidity);
 800169e:	4987      	ldr	r1, [pc, #540]	@ (80018bc <main+0x300>)
 80016a0:	4887      	ldr	r0, [pc, #540]	@ (80018c0 <main+0x304>)
 80016a2:	f000 ff71 	bl	8002588 <SHT85_ReadSingleShot>

		  //calculatorAverageTemperature(temperature, &averageTemperature);
		  //calculatorAverageHumidity(humidity, &averageHumidity);
		  SHT85_ErrorReset(&temperature, &humidity);
 80016a6:	4985      	ldr	r1, [pc, #532]	@ (80018bc <main+0x300>)
 80016a8:	4885      	ldr	r0, [pc, #532]	@ (80018c0 <main+0x304>)
 80016aa:	f000 fff3 	bl	8002694 <SHT85_ErrorReset>

		  ReadVEML7700(&luminosity);
 80016ae:	4885      	ldr	r0, [pc, #532]	@ (80018c4 <main+0x308>)
 80016b0:	f001 faf2 	bl	8002c98 <ReadVEML7700>
		  averageTemperature += temperature;
 80016b4:	4b84      	ldr	r3, [pc, #528]	@ (80018c8 <main+0x30c>)
 80016b6:	ed93 7a00 	vldr	s14, [r3]
 80016ba:	4b81      	ldr	r3, [pc, #516]	@ (80018c0 <main+0x304>)
 80016bc:	edd3 7a00 	vldr	s15, [r3]
 80016c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c4:	4b80      	ldr	r3, [pc, #512]	@ (80018c8 <main+0x30c>)
 80016c6:	edc3 7a00 	vstr	s15, [r3]
		  averageHumidity += humidity;
 80016ca:	4b80      	ldr	r3, [pc, #512]	@ (80018cc <main+0x310>)
 80016cc:	ed93 7a00 	vldr	s14, [r3]
 80016d0:	4b7a      	ldr	r3, [pc, #488]	@ (80018bc <main+0x300>)
 80016d2:	edd3 7a00 	vldr	s15, [r3]
 80016d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016da:	4b7c      	ldr	r3, [pc, #496]	@ (80018cc <main+0x310>)
 80016dc:	edc3 7a00 	vstr	s15, [r3]
		  averageLuminosity += luminosity;
 80016e0:	4b7b      	ldr	r3, [pc, #492]	@ (80018d0 <main+0x314>)
 80016e2:	ed93 7a00 	vldr	s14, [r3]
 80016e6:	4b77      	ldr	r3, [pc, #476]	@ (80018c4 <main+0x308>)
 80016e8:	edd3 7a00 	vldr	s15, [r3]
 80016ec:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016f0:	4b77      	ldr	r3, [pc, #476]	@ (80018d0 <main+0x314>)
 80016f2:	edc3 7a00 	vstr	s15, [r3]
		  countAverage++;
 80016f6:	4b77      	ldr	r3, [pc, #476]	@ (80018d4 <main+0x318>)
 80016f8:	781b      	ldrb	r3, [r3, #0]
 80016fa:	3301      	adds	r3, #1
 80016fc:	b2da      	uxtb	r2, r3
 80016fe:	4b75      	ldr	r3, [pc, #468]	@ (80018d4 <main+0x318>)
 8001700:	701a      	strb	r2, [r3, #0]
		  //calculateAverageLuminosity(luminosity, &averageLuminosity);

		  // Display LCD
		  LCD_Update_Variables(&temperature, &humidity, &luminosity);
 8001702:	4a70      	ldr	r2, [pc, #448]	@ (80018c4 <main+0x308>)
 8001704:	496d      	ldr	r1, [pc, #436]	@ (80018bc <main+0x300>)
 8001706:	486e      	ldr	r0, [pc, #440]	@ (80018c0 <main+0x304>)
 8001708:	f7ff ff06 	bl	8001518 <LCD_Update_Variables>


		  // Controlar el rele basado en la luminosidad
		  Control_Rele(luminosity);
 800170c:	4b6d      	ldr	r3, [pc, #436]	@ (80018c4 <main+0x308>)
 800170e:	edd3 7a00 	vldr	s15, [r3]
 8001712:	eeb0 0a67 	vmov.f32	s0, s15
 8001716:	f000 fee1 	bl	80024dc <Control_Rele>

//	  HAL_Delay(1000);


	  // Envío de datos a ThingSpeak
	  if (currentTick - lastThingSpeakSend >= SEND_THINGSPEAK_INTERVAL) {
 800171a:	4b5f      	ldr	r3, [pc, #380]	@ (8001898 <main+0x2dc>)
 800171c:	681b      	ldr	r3, [r3, #0]
 800171e:	68fa      	ldr	r2, [r7, #12]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 8001726:	4293      	cmp	r3, r2
 8001728:	d962      	bls.n	80017f0 <main+0x234>
		  //lastTimeSend = currentTick;

		  if(countAverage == 0) {
 800172a:	4b6a      	ldr	r3, [pc, #424]	@ (80018d4 <main+0x318>)
 800172c:	781b      	ldrb	r3, [r3, #0]
 800172e:	2b00      	cmp	r3, #0
 8001730:	d10c      	bne.n	800174c <main+0x190>
			  averageTemperature = temperature;
 8001732:	4b63      	ldr	r3, [pc, #396]	@ (80018c0 <main+0x304>)
 8001734:	681b      	ldr	r3, [r3, #0]
 8001736:	4a64      	ldr	r2, [pc, #400]	@ (80018c8 <main+0x30c>)
 8001738:	6013      	str	r3, [r2, #0]
			  averageHumidity = humidity;
 800173a:	4b60      	ldr	r3, [pc, #384]	@ (80018bc <main+0x300>)
 800173c:	681b      	ldr	r3, [r3, #0]
 800173e:	4a63      	ldr	r2, [pc, #396]	@ (80018cc <main+0x310>)
 8001740:	6013      	str	r3, [r2, #0]
			  averageLuminosity = luminosity;
 8001742:	4b60      	ldr	r3, [pc, #384]	@ (80018c4 <main+0x308>)
 8001744:	681b      	ldr	r3, [r3, #0]
 8001746:	4a62      	ldr	r2, [pc, #392]	@ (80018d0 <main+0x314>)
 8001748:	6013      	str	r3, [r2, #0]
 800174a:	e029      	b.n	80017a0 <main+0x1e4>
		  } else {
			  averageTemperature = averageTemperature/countAverage;
 800174c:	4b5e      	ldr	r3, [pc, #376]	@ (80018c8 <main+0x30c>)
 800174e:	edd3 6a00 	vldr	s13, [r3]
 8001752:	4b60      	ldr	r3, [pc, #384]	@ (80018d4 <main+0x318>)
 8001754:	781b      	ldrb	r3, [r3, #0]
 8001756:	ee07 3a90 	vmov	s15, r3
 800175a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800175e:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001762:	4b59      	ldr	r3, [pc, #356]	@ (80018c8 <main+0x30c>)
 8001764:	edc3 7a00 	vstr	s15, [r3]
			  averageHumidity = averageHumidity/countAverage;
 8001768:	4b58      	ldr	r3, [pc, #352]	@ (80018cc <main+0x310>)
 800176a:	edd3 6a00 	vldr	s13, [r3]
 800176e:	4b59      	ldr	r3, [pc, #356]	@ (80018d4 <main+0x318>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	ee07 3a90 	vmov	s15, r3
 8001776:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800177a:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800177e:	4b53      	ldr	r3, [pc, #332]	@ (80018cc <main+0x310>)
 8001780:	edc3 7a00 	vstr	s15, [r3]
			  averageLuminosity = averageLuminosity/countAverage;
 8001784:	4b52      	ldr	r3, [pc, #328]	@ (80018d0 <main+0x314>)
 8001786:	edd3 6a00 	vldr	s13, [r3]
 800178a:	4b52      	ldr	r3, [pc, #328]	@ (80018d4 <main+0x318>)
 800178c:	781b      	ldrb	r3, [r3, #0]
 800178e:	ee07 3a90 	vmov	s15, r3
 8001792:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800179a:	4b4d      	ldr	r3, [pc, #308]	@ (80018d0 <main+0x314>)
 800179c:	edc3 7a00 	vstr	s15, [r3]
		  }

		  lastThingSpeakSend += SEND_THINGSPEAK_INTERVAL ; // es recomendable utilizar el método de acumulación para evitar deriva en el tiempo
 80017a0:	4b3d      	ldr	r3, [pc, #244]	@ (8001898 <main+0x2dc>)
 80017a2:	681b      	ldr	r3, [r3, #0]
 80017a4:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 80017a8:	3320      	adds	r3, #32
 80017aa:	4a3b      	ldr	r2, [pc, #236]	@ (8001898 <main+0x2dc>)
 80017ac:	6013      	str	r3, [r2, #0]
		  //sendDataToThingSpeak(THINGSPEAK_API_KEY, averageTemperature, averageHumidity, averageLuminosity);
		  sendDataToThingSpeak(THINGSPEAK_API_KEY, temperature, humidity, luminosity);
 80017ae:	4b44      	ldr	r3, [pc, #272]	@ (80018c0 <main+0x304>)
 80017b0:	edd3 7a00 	vldr	s15, [r3]
 80017b4:	4b41      	ldr	r3, [pc, #260]	@ (80018bc <main+0x300>)
 80017b6:	ed93 7a00 	vldr	s14, [r3]
 80017ba:	4b42      	ldr	r3, [pc, #264]	@ (80018c4 <main+0x308>)
 80017bc:	edd3 6a00 	vldr	s13, [r3]
 80017c0:	eeb0 1a66 	vmov.f32	s2, s13
 80017c4:	eef0 0a47 	vmov.f32	s1, s14
 80017c8:	eeb0 0a67 	vmov.f32	s0, s15
 80017cc:	4842      	ldr	r0, [pc, #264]	@ (80018d8 <main+0x31c>)
 80017ce:	f001 faf5 	bl	8002dbc <sendDataToThingSpeak>

		  averageTemperature = 0.0f;
 80017d2:	4b3d      	ldr	r3, [pc, #244]	@ (80018c8 <main+0x30c>)
 80017d4:	f04f 0200 	mov.w	r2, #0
 80017d8:	601a      	str	r2, [r3, #0]
		  averageHumidity = 0.0f;
 80017da:	4b3c      	ldr	r3, [pc, #240]	@ (80018cc <main+0x310>)
 80017dc:	f04f 0200 	mov.w	r2, #0
 80017e0:	601a      	str	r2, [r3, #0]
		  averageLuminosity = 0.0f;
 80017e2:	4b3b      	ldr	r3, [pc, #236]	@ (80018d0 <main+0x314>)
 80017e4:	f04f 0200 	mov.w	r2, #0
 80017e8:	601a      	str	r2, [r3, #0]
		  countAverage = 0;
 80017ea:	4b3a      	ldr	r3, [pc, #232]	@ (80018d4 <main+0x318>)
 80017ec:	2200      	movs	r2, #0
 80017ee:	701a      	strb	r2, [r3, #0]

		  // FIN COMUNICACIÓN MQTT CON RASPBERRY
	  }

	  // Envío de datos MQTT cada X segundos
	  	  if (currentTick - lastMQTTSend >= SEND_MQTT_INTERVAL) {
 80017f0:	4b2a      	ldr	r3, [pc, #168]	@ (800189c <main+0x2e0>)
 80017f2:	681b      	ldr	r3, [r3, #0]
 80017f4:	68fa      	ldr	r2, [r7, #12]
 80017f6:	1ad3      	subs	r3, r2, r3
 80017f8:	f5b3 5ffa 	cmp.w	r3, #8000	@ 0x1f40
 80017fc:	d32c      	bcc.n	8001858 <main+0x29c>
	  		  marblack = 10;
 80017fe:	4b37      	ldr	r3, [pc, #220]	@ (80018dc <main+0x320>)
 8001800:	220a      	movs	r2, #10
 8001802:	601a      	str	r2, [r3, #0]
	  		lastMQTTSend += SEND_MQTT_INTERVAL;
 8001804:	4b25      	ldr	r3, [pc, #148]	@ (800189c <main+0x2e0>)
 8001806:	681b      	ldr	r3, [r3, #0]
 8001808:	f503 53fa 	add.w	r3, r3, #8000	@ 0x1f40
 800180c:	4a23      	ldr	r2, [pc, #140]	@ (800189c <main+0x2e0>)
 800180e:	6013      	str	r3, [r2, #0]

	  		  // Si tienes medias, cámbialo por tus promedios aquí
	  		  float t = temperature;
 8001810:	4b2b      	ldr	r3, [pc, #172]	@ (80018c0 <main+0x304>)
 8001812:	681b      	ldr	r3, [r3, #0]
 8001814:	60bb      	str	r3, [r7, #8]
	  		  float h = humidity;
 8001816:	4b29      	ldr	r3, [pc, #164]	@ (80018bc <main+0x300>)
 8001818:	681b      	ldr	r3, [r3, #0]
 800181a:	607b      	str	r3, [r7, #4]
	  		  float l = luminosity;
 800181c:	4b29      	ldr	r3, [pc, #164]	@ (80018c4 <main+0x308>)
 800181e:	681b      	ldr	r3, [r3, #0]
 8001820:	603b      	str	r3, [r7, #0]

	  		  // Activa la máquina de estados MQTT y envía los datos
	  		  mqtt_raspberry_set_enabled(1);
 8001822:	2001      	movs	r0, #1
 8001824:	f000 fa36 	bl	8001c94 <mqtt_raspberry_set_enabled>
	  		  mqtt_raspberry_send(t, h, l);
 8001828:	ed97 1a00 	vldr	s2, [r7]
 800182c:	edd7 0a01 	vldr	s1, [r7, #4]
 8001830:	ed97 0a02 	vldr	s0, [r7, #8]
 8001834:	f000 fa3e 	bl	8001cb4 <mqtt_raspberry_send>

	  		  // Espera a que termine el envío (opcional, puedes dejar que corra en background)
	  		  while (mqtt_raspberry_is_busy()) {
 8001838:	e004      	b.n	8001844 <main+0x288>
	  			  mqtt_raspberry_process();
 800183a:	f000 fd0f 	bl	800225c <mqtt_raspberry_process>
	  			  HAL_Delay(10);
 800183e:	200a      	movs	r0, #10
 8001840:	f001 fc7e 	bl	8003140 <HAL_Delay>
	  		  while (mqtt_raspberry_is_busy()) {
 8001844:	f000 fe1e 	bl	8002484 <mqtt_raspberry_is_busy>
 8001848:	4603      	mov	r3, r0
 800184a:	2b00      	cmp	r3, #0
 800184c:	d1f5      	bne.n	800183a <main+0x27e>
	  		  }
	  		marblack++;
 800184e:	4b23      	ldr	r3, [pc, #140]	@ (80018dc <main+0x320>)
 8001850:	681b      	ldr	r3, [r3, #0]
 8001852:	3301      	adds	r3, #1
 8001854:	4a21      	ldr	r2, [pc, #132]	@ (80018dc <main+0x320>)
 8001856:	6013      	str	r3, [r2, #0]
	  	  }

	  	  // Procesa la máquina de estados MQTT (importante si usas envío asíncrono)
	  	  mqtt_raspberry_process();
 8001858:	f000 fd00 	bl	800225c <mqtt_raspberry_process>

	  	  HAL_Delay(10); // Pequeño delay para no saturar el MCU
 800185c:	200a      	movs	r0, #10
 800185e:	f001 fc6f 	bl	8003140 <HAL_Delay>



	  // Reseteo de la conexión ESP8266-router cada 1 hora para asegurar que no se sature
	  if (currentTick - lastWiFiReset > WIFI_RESET_INTERVAL) {	//Forzando reinicio WiFi por mantenimiento
 8001862:	4b1f      	ldr	r3, [pc, #124]	@ (80018e0 <main+0x324>)
 8001864:	681b      	ldr	r3, [r3, #0]
 8001866:	68fa      	ldr	r2, [r7, #12]
 8001868:	1ad3      	subs	r3, r2, r3
 800186a:	4a1e      	ldr	r2, [pc, #120]	@ (80018e4 <main+0x328>)
 800186c:	4293      	cmp	r3, r2
 800186e:	d90c      	bls.n	800188a <main+0x2ce>
		  lastWiFiReset = HAL_GetTick();
 8001870:	f001 fc5a 	bl	8003128 <HAL_GetTick>
 8001874:	4603      	mov	r3, r0
 8001876:	4a1a      	ldr	r2, [pc, #104]	@ (80018e0 <main+0x324>)
 8001878:	6013      	str	r3, [r2, #0]
		  esp8266_reset_and_reconnect(WIFI_SSID,WIFI_PASS);
 800187a:	4b0b      	ldr	r3, [pc, #44]	@ (80018a8 <main+0x2ec>)
 800187c:	681b      	ldr	r3, [r3, #0]
 800187e:	4a0b      	ldr	r2, [pc, #44]	@ (80018ac <main+0x2f0>)
 8001880:	6812      	ldr	r2, [r2, #0]
 8001882:	4611      	mov	r1, r2
 8001884:	4618      	mov	r0, r3
 8001886:	f7ff fc83 	bl	8001190 <esp8266_reset_and_reconnect>
	  }

	  processThingSpeakStateMachine(); // Procesar la máquina de estados de ThingSpeak
 800188a:	f001 fac1 	bl	8002e10 <processThingSpeakStateMachine>
  {
 800188e:	e6f6      	b.n	800167e <main+0xc2>
 8001890:	20000578 	.word	0x20000578
 8001894:	2000057c 	.word	0x2000057c
 8001898:	20000580 	.word	0x20000580
 800189c:	20000584 	.word	0x20000584
 80018a0:	e000edf0 	.word	0xe000edf0
 80018a4:	e0001000 	.word	0xe0001000
 80018a8:	20000000 	.word	0x20000000
 80018ac:	20000004 	.word	0x20000004
 80018b0:	0800b774 	.word	0x0800b774
 80018b4:	0800b784 	.word	0x0800b784
 80018b8:	0800b794 	.word	0x0800b794
 80018bc:	20000564 	.word	0x20000564
 80018c0:	2000055c 	.word	0x2000055c
 80018c4:	2000056c 	.word	0x2000056c
 80018c8:	20000560 	.word	0x20000560
 80018cc:	20000568 	.word	0x20000568
 80018d0:	20000570 	.word	0x20000570
 80018d4:	20000574 	.word	0x20000574
 80018d8:	0800b7ac 	.word	0x0800b7ac
 80018dc:	20000590 	.word	0x20000590
 80018e0:	20000588 	.word	0x20000588
 80018e4:	0036ee80 	.word	0x0036ee80

080018e8 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018e8:	b580      	push	{r7, lr}
 80018ea:	b094      	sub	sp, #80	@ 0x50
 80018ec:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018ee:	f107 0320 	add.w	r3, r7, #32
 80018f2:	2230      	movs	r2, #48	@ 0x30
 80018f4:	2100      	movs	r1, #0
 80018f6:	4618      	mov	r0, r3
 80018f8:	f006 fbac 	bl	8008054 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018fc:	f107 030c 	add.w	r3, r7, #12
 8001900:	2200      	movs	r2, #0
 8001902:	601a      	str	r2, [r3, #0]
 8001904:	605a      	str	r2, [r3, #4]
 8001906:	609a      	str	r2, [r3, #8]
 8001908:	60da      	str	r2, [r3, #12]
 800190a:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 800190c:	2300      	movs	r3, #0
 800190e:	60bb      	str	r3, [r7, #8]
 8001910:	4b27      	ldr	r3, [pc, #156]	@ (80019b0 <SystemClock_Config+0xc8>)
 8001912:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001914:	4a26      	ldr	r2, [pc, #152]	@ (80019b0 <SystemClock_Config+0xc8>)
 8001916:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 800191a:	6413      	str	r3, [r2, #64]	@ 0x40
 800191c:	4b24      	ldr	r3, [pc, #144]	@ (80019b0 <SystemClock_Config+0xc8>)
 800191e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001920:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001924:	60bb      	str	r3, [r7, #8]
 8001926:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001928:	2300      	movs	r3, #0
 800192a:	607b      	str	r3, [r7, #4]
 800192c:	4b21      	ldr	r3, [pc, #132]	@ (80019b4 <SystemClock_Config+0xcc>)
 800192e:	681b      	ldr	r3, [r3, #0]
 8001930:	4a20      	ldr	r2, [pc, #128]	@ (80019b4 <SystemClock_Config+0xcc>)
 8001932:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8001936:	6013      	str	r3, [r2, #0]
 8001938:	4b1e      	ldr	r3, [pc, #120]	@ (80019b4 <SystemClock_Config+0xcc>)
 800193a:	681b      	ldr	r3, [r3, #0]
 800193c:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 8001940:	607b      	str	r3, [r7, #4]
 8001942:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001944:	2302      	movs	r3, #2
 8001946:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001948:	2301      	movs	r3, #1
 800194a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 800194c:	2310      	movs	r3, #16
 800194e:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 8001950:	2302      	movs	r3, #2
 8001952:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001954:	2300      	movs	r3, #0
 8001956:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001958:	2308      	movs	r3, #8
 800195a:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 800195c:	2350      	movs	r3, #80	@ 0x50
 800195e:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001960:	2302      	movs	r3, #2
 8001962:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001964:	2308      	movs	r3, #8
 8001966:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001968:	f107 0320 	add.w	r3, r7, #32
 800196c:	4618      	mov	r0, r3
 800196e:	f003 fbf1 	bl	8005154 <HAL_RCC_OscConfig>
 8001972:	4603      	mov	r3, r0
 8001974:	2b00      	cmp	r3, #0
 8001976:	d001      	beq.n	800197c <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001978:	f000 f986 	bl	8001c88 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800197c:	230f      	movs	r3, #15
 800197e:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001980:	2302      	movs	r3, #2
 8001982:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001984:	2300      	movs	r3, #0
 8001986:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001988:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800198c:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800198e:	2300      	movs	r3, #0
 8001990:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 8001992:	f107 030c 	add.w	r3, r7, #12
 8001996:	2102      	movs	r1, #2
 8001998:	4618      	mov	r0, r3
 800199a:	f003 fe53 	bl	8005644 <HAL_RCC_ClockConfig>
 800199e:	4603      	mov	r3, r0
 80019a0:	2b00      	cmp	r3, #0
 80019a2:	d001      	beq.n	80019a8 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 80019a4:	f000 f970 	bl	8001c88 <Error_Handler>
  }
}
 80019a8:	bf00      	nop
 80019aa:	3750      	adds	r7, #80	@ 0x50
 80019ac:	46bd      	mov	sp, r7
 80019ae:	bd80      	pop	{r7, pc}
 80019b0:	40023800 	.word	0x40023800
 80019b4:	40007000 	.word	0x40007000

080019b8 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 80019b8:	b580      	push	{r7, lr}
 80019ba:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 80019bc:	4b12      	ldr	r3, [pc, #72]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019be:	4a13      	ldr	r2, [pc, #76]	@ (8001a0c <MX_I2C1_Init+0x54>)
 80019c0:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 80019c2:	4b11      	ldr	r3, [pc, #68]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019c4:	4a12      	ldr	r2, [pc, #72]	@ (8001a10 <MX_I2C1_Init+0x58>)
 80019c6:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019c8:	4b0f      	ldr	r3, [pc, #60]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019ca:	2200      	movs	r2, #0
 80019cc:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 80019ce:	4b0e      	ldr	r3, [pc, #56]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019d0:	2200      	movs	r2, #0
 80019d2:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019d4:	4b0c      	ldr	r3, [pc, #48]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019d6:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019da:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019dc:	4b0a      	ldr	r3, [pc, #40]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019de:	2200      	movs	r2, #0
 80019e0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019e2:	4b09      	ldr	r3, [pc, #36]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019e4:	2200      	movs	r2, #0
 80019e6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019e8:	4b07      	ldr	r3, [pc, #28]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019ea:	2200      	movs	r2, #0
 80019ec:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ee:	4b06      	ldr	r3, [pc, #24]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019f0:	2200      	movs	r2, #0
 80019f2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019f4:	4804      	ldr	r0, [pc, #16]	@ (8001a08 <MX_I2C1_Init+0x50>)
 80019f6:	f001 ff09 	bl	800380c <HAL_I2C_Init>
 80019fa:	4603      	mov	r3, r0
 80019fc:	2b00      	cmp	r3, #0
 80019fe:	d001      	beq.n	8001a04 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001a00:	f000 f942 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001a04:	bf00      	nop
 8001a06:	bd80      	pop	{r7, pc}
 8001a08:	20000414 	.word	0x20000414
 8001a0c:	40005400 	.word	0x40005400
 8001a10:	000186a0 	.word	0x000186a0

08001a14 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001a14:	b580      	push	{r7, lr}
 8001a16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001a18:	4b12      	ldr	r3, [pc, #72]	@ (8001a64 <MX_I2C2_Init+0x50>)
 8001a1a:	4a13      	ldr	r2, [pc, #76]	@ (8001a68 <MX_I2C2_Init+0x54>)
 8001a1c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 8001a1e:	4b11      	ldr	r3, [pc, #68]	@ (8001a64 <MX_I2C2_Init+0x50>)
 8001a20:	4a12      	ldr	r2, [pc, #72]	@ (8001a6c <MX_I2C2_Init+0x58>)
 8001a22:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001a24:	4b0f      	ldr	r3, [pc, #60]	@ (8001a64 <MX_I2C2_Init+0x50>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 8001a2a:	4b0e      	ldr	r3, [pc, #56]	@ (8001a64 <MX_I2C2_Init+0x50>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001a30:	4b0c      	ldr	r3, [pc, #48]	@ (8001a64 <MX_I2C2_Init+0x50>)
 8001a32:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001a36:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001a38:	4b0a      	ldr	r3, [pc, #40]	@ (8001a64 <MX_I2C2_Init+0x50>)
 8001a3a:	2200      	movs	r2, #0
 8001a3c:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 8001a3e:	4b09      	ldr	r3, [pc, #36]	@ (8001a64 <MX_I2C2_Init+0x50>)
 8001a40:	2200      	movs	r2, #0
 8001a42:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a44:	4b07      	ldr	r3, [pc, #28]	@ (8001a64 <MX_I2C2_Init+0x50>)
 8001a46:	2200      	movs	r2, #0
 8001a48:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a4a:	4b06      	ldr	r3, [pc, #24]	@ (8001a64 <MX_I2C2_Init+0x50>)
 8001a4c:	2200      	movs	r2, #0
 8001a4e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a50:	4804      	ldr	r0, [pc, #16]	@ (8001a64 <MX_I2C2_Init+0x50>)
 8001a52:	f001 fedb 	bl	800380c <HAL_I2C_Init>
 8001a56:	4603      	mov	r3, r0
 8001a58:	2b00      	cmp	r3, #0
 8001a5a:	d001      	beq.n	8001a60 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a5c:	f000 f914 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a60:	bf00      	nop
 8001a62:	bd80      	pop	{r7, pc}
 8001a64:	20000468 	.word	0x20000468
 8001a68:	40005800 	.word	0x40005800
 8001a6c:	000186a0 	.word	0x000186a0

08001a70 <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 8001a70:	b580      	push	{r7, lr}
 8001a72:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 8001a74:	4b17      	ldr	r3, [pc, #92]	@ (8001ad4 <MX_SPI1_Init+0x64>)
 8001a76:	4a18      	ldr	r2, [pc, #96]	@ (8001ad8 <MX_SPI1_Init+0x68>)
 8001a78:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 8001a7a:	4b16      	ldr	r3, [pc, #88]	@ (8001ad4 <MX_SPI1_Init+0x64>)
 8001a7c:	f44f 7282 	mov.w	r2, #260	@ 0x104
 8001a80:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 8001a82:	4b14      	ldr	r3, [pc, #80]	@ (8001ad4 <MX_SPI1_Init+0x64>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a88:	4b12      	ldr	r3, [pc, #72]	@ (8001ad4 <MX_SPI1_Init+0x64>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a8e:	4b11      	ldr	r3, [pc, #68]	@ (8001ad4 <MX_SPI1_Init+0x64>)
 8001a90:	2200      	movs	r2, #0
 8001a92:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a94:	4b0f      	ldr	r3, [pc, #60]	@ (8001ad4 <MX_SPI1_Init+0x64>)
 8001a96:	2200      	movs	r2, #0
 8001a98:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a9a:	4b0e      	ldr	r3, [pc, #56]	@ (8001ad4 <MX_SPI1_Init+0x64>)
 8001a9c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001aa0:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001aa2:	4b0c      	ldr	r3, [pc, #48]	@ (8001ad4 <MX_SPI1_Init+0x64>)
 8001aa4:	2210      	movs	r2, #16
 8001aa6:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001aa8:	4b0a      	ldr	r3, [pc, #40]	@ (8001ad4 <MX_SPI1_Init+0x64>)
 8001aaa:	2200      	movs	r2, #0
 8001aac:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001aae:	4b09      	ldr	r3, [pc, #36]	@ (8001ad4 <MX_SPI1_Init+0x64>)
 8001ab0:	2200      	movs	r2, #0
 8001ab2:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001ab4:	4b07      	ldr	r3, [pc, #28]	@ (8001ad4 <MX_SPI1_Init+0x64>)
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001aba:	4b06      	ldr	r3, [pc, #24]	@ (8001ad4 <MX_SPI1_Init+0x64>)
 8001abc:	220a      	movs	r2, #10
 8001abe:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001ac0:	4804      	ldr	r0, [pc, #16]	@ (8001ad4 <MX_SPI1_Init+0x64>)
 8001ac2:	f003 ffdf 	bl	8005a84 <HAL_SPI_Init>
 8001ac6:	4603      	mov	r3, r0
 8001ac8:	2b00      	cmp	r3, #0
 8001aca:	d001      	beq.n	8001ad0 <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001acc:	f000 f8dc 	bl	8001c88 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001ad0:	bf00      	nop
 8001ad2:	bd80      	pop	{r7, pc}
 8001ad4:	200004bc 	.word	0x200004bc
 8001ad8:	40013000 	.word	0x40013000

08001adc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001adc:	b580      	push	{r7, lr}
 8001ade:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001ae0:	4b11      	ldr	r3, [pc, #68]	@ (8001b28 <MX_USART2_UART_Init+0x4c>)
 8001ae2:	4a12      	ldr	r2, [pc, #72]	@ (8001b2c <MX_USART2_UART_Init+0x50>)
 8001ae4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001ae6:	4b10      	ldr	r3, [pc, #64]	@ (8001b28 <MX_USART2_UART_Init+0x4c>)
 8001ae8:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001aec:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001aee:	4b0e      	ldr	r3, [pc, #56]	@ (8001b28 <MX_USART2_UART_Init+0x4c>)
 8001af0:	2200      	movs	r2, #0
 8001af2:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001af4:	4b0c      	ldr	r3, [pc, #48]	@ (8001b28 <MX_USART2_UART_Init+0x4c>)
 8001af6:	2200      	movs	r2, #0
 8001af8:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001afa:	4b0b      	ldr	r3, [pc, #44]	@ (8001b28 <MX_USART2_UART_Init+0x4c>)
 8001afc:	2200      	movs	r2, #0
 8001afe:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001b00:	4b09      	ldr	r3, [pc, #36]	@ (8001b28 <MX_USART2_UART_Init+0x4c>)
 8001b02:	220c      	movs	r2, #12
 8001b04:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001b06:	4b08      	ldr	r3, [pc, #32]	@ (8001b28 <MX_USART2_UART_Init+0x4c>)
 8001b08:	2200      	movs	r2, #0
 8001b0a:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001b0c:	4b06      	ldr	r3, [pc, #24]	@ (8001b28 <MX_USART2_UART_Init+0x4c>)
 8001b0e:	2200      	movs	r2, #0
 8001b10:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001b12:	4805      	ldr	r0, [pc, #20]	@ (8001b28 <MX_USART2_UART_Init+0x4c>)
 8001b14:	f004 f83f 	bl	8005b96 <HAL_UART_Init>
 8001b18:	4603      	mov	r3, r0
 8001b1a:	2b00      	cmp	r3, #0
 8001b1c:	d001      	beq.n	8001b22 <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001b1e:	f000 f8b3 	bl	8001c88 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 8001b22:	bf00      	nop
 8001b24:	bd80      	pop	{r7, pc}
 8001b26:	bf00      	nop
 8001b28:	20000514 	.word	0x20000514
 8001b2c:	40004400 	.word	0x40004400

08001b30 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001b30:	b580      	push	{r7, lr}
 8001b32:	b08a      	sub	sp, #40	@ 0x28
 8001b34:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001b36:	f107 0314 	add.w	r3, r7, #20
 8001b3a:	2200      	movs	r2, #0
 8001b3c:	601a      	str	r2, [r3, #0]
 8001b3e:	605a      	str	r2, [r3, #4]
 8001b40:	609a      	str	r2, [r3, #8]
 8001b42:	60da      	str	r2, [r3, #12]
 8001b44:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001b46:	2300      	movs	r3, #0
 8001b48:	613b      	str	r3, [r7, #16]
 8001b4a:	4b44      	ldr	r3, [pc, #272]	@ (8001c5c <MX_GPIO_Init+0x12c>)
 8001b4c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b4e:	4a43      	ldr	r2, [pc, #268]	@ (8001c5c <MX_GPIO_Init+0x12c>)
 8001b50:	f043 0304 	orr.w	r3, r3, #4
 8001b54:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b56:	4b41      	ldr	r3, [pc, #260]	@ (8001c5c <MX_GPIO_Init+0x12c>)
 8001b58:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b5a:	f003 0304 	and.w	r3, r3, #4
 8001b5e:	613b      	str	r3, [r7, #16]
 8001b60:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001b62:	2300      	movs	r3, #0
 8001b64:	60fb      	str	r3, [r7, #12]
 8001b66:	4b3d      	ldr	r3, [pc, #244]	@ (8001c5c <MX_GPIO_Init+0x12c>)
 8001b68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b6a:	4a3c      	ldr	r2, [pc, #240]	@ (8001c5c <MX_GPIO_Init+0x12c>)
 8001b6c:	f043 0301 	orr.w	r3, r3, #1
 8001b70:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b72:	4b3a      	ldr	r3, [pc, #232]	@ (8001c5c <MX_GPIO_Init+0x12c>)
 8001b74:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b76:	f003 0301 	and.w	r3, r3, #1
 8001b7a:	60fb      	str	r3, [r7, #12]
 8001b7c:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001b7e:	2300      	movs	r3, #0
 8001b80:	60bb      	str	r3, [r7, #8]
 8001b82:	4b36      	ldr	r3, [pc, #216]	@ (8001c5c <MX_GPIO_Init+0x12c>)
 8001b84:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b86:	4a35      	ldr	r2, [pc, #212]	@ (8001c5c <MX_GPIO_Init+0x12c>)
 8001b88:	f043 0302 	orr.w	r3, r3, #2
 8001b8c:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b8e:	4b33      	ldr	r3, [pc, #204]	@ (8001c5c <MX_GPIO_Init+0x12c>)
 8001b90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b92:	f003 0302 	and.w	r3, r3, #2
 8001b96:	60bb      	str	r3, [r7, #8]
 8001b98:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b9a:	2300      	movs	r3, #0
 8001b9c:	607b      	str	r3, [r7, #4]
 8001b9e:	4b2f      	ldr	r3, [pc, #188]	@ (8001c5c <MX_GPIO_Init+0x12c>)
 8001ba0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ba2:	4a2e      	ldr	r2, [pc, #184]	@ (8001c5c <MX_GPIO_Init+0x12c>)
 8001ba4:	f043 0308 	orr.w	r3, r3, #8
 8001ba8:	6313      	str	r3, [r2, #48]	@ 0x30
 8001baa:	4b2c      	ldr	r3, [pc, #176]	@ (8001c5c <MX_GPIO_Init+0x12c>)
 8001bac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001bae:	f003 0308 	and.w	r3, r3, #8
 8001bb2:	607b      	str	r3, [r7, #4]
 8001bb4:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001bb6:	2200      	movs	r2, #0
 8001bb8:	213f      	movs	r1, #63	@ 0x3f
 8001bba:	4829      	ldr	r0, [pc, #164]	@ (8001c60 <MX_GPIO_Init+0x130>)
 8001bbc:	f001 fe0c 	bl	80037d8 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001bc0:	2201      	movs	r2, #1
 8001bc2:	2110      	movs	r1, #16
 8001bc4:	4827      	ldr	r0, [pc, #156]	@ (8001c64 <MX_GPIO_Init+0x134>)
 8001bc6:	f001 fe07 	bl	80037d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001bca:	2200      	movs	r2, #0
 8001bcc:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8001bd0:	4825      	ldr	r0, [pc, #148]	@ (8001c68 <MX_GPIO_Init+0x138>)
 8001bd2:	f001 fe01 	bl	80037d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001bd6:	2200      	movs	r2, #0
 8001bd8:	2120      	movs	r1, #32
 8001bda:	4824      	ldr	r0, [pc, #144]	@ (8001c6c <MX_GPIO_Init+0x13c>)
 8001bdc:	f001 fdfc 	bl	80037d8 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001be0:	233f      	movs	r3, #63	@ 0x3f
 8001be2:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001be4:	2301      	movs	r3, #1
 8001be6:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001be8:	2300      	movs	r3, #0
 8001bea:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bec:	2300      	movs	r3, #0
 8001bee:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001bf0:	f107 0314 	add.w	r3, r7, #20
 8001bf4:	4619      	mov	r1, r3
 8001bf6:	481a      	ldr	r0, [pc, #104]	@ (8001c60 <MX_GPIO_Init+0x130>)
 8001bf8:	f001 fc6a 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001bfc:	2310      	movs	r3, #16
 8001bfe:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c00:	2301      	movs	r3, #1
 8001c02:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c04:	2300      	movs	r3, #0
 8001c06:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001c08:	2302      	movs	r3, #2
 8001c0a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001c0c:	f107 0314 	add.w	r3, r7, #20
 8001c10:	4619      	mov	r1, r3
 8001c12:	4814      	ldr	r0, [pc, #80]	@ (8001c64 <MX_GPIO_Init+0x134>)
 8001c14:	f001 fc5c 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001c18:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001c1c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c1e:	2301      	movs	r3, #1
 8001c20:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c22:	2300      	movs	r3, #0
 8001c24:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c26:	2300      	movs	r3, #0
 8001c28:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001c2a:	f107 0314 	add.w	r3, r7, #20
 8001c2e:	4619      	mov	r1, r3
 8001c30:	480d      	ldr	r0, [pc, #52]	@ (8001c68 <MX_GPIO_Init+0x138>)
 8001c32:	f001 fc4d 	bl	80034d0 <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001c36:	2320      	movs	r3, #32
 8001c38:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001c3a:	2301      	movs	r3, #1
 8001c3c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001c3e:	2300      	movs	r3, #0
 8001c40:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001c42:	2300      	movs	r3, #0
 8001c44:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001c46:	f107 0314 	add.w	r3, r7, #20
 8001c4a:	4619      	mov	r1, r3
 8001c4c:	4807      	ldr	r0, [pc, #28]	@ (8001c6c <MX_GPIO_Init+0x13c>)
 8001c4e:	f001 fc3f 	bl	80034d0 <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001c52:	bf00      	nop
 8001c54:	3728      	adds	r7, #40	@ 0x28
 8001c56:	46bd      	mov	sp, r7
 8001c58:	bd80      	pop	{r7, pc}
 8001c5a:	bf00      	nop
 8001c5c:	40023800 	.word	0x40023800
 8001c60:	40020800 	.word	0x40020800
 8001c64:	40020000 	.word	0x40020000
 8001c68:	40020c00 	.word	0x40020c00
 8001c6c:	40020400 	.word	0x40020400

08001c70 <MX_NVIC_Init>:
/* USER CODE BEGIN 4 */



static void MX_NVIC_Init(void)
{
 8001c70:	b580      	push	{r7, lr}
 8001c72:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001c74:	2200      	movs	r2, #0
 8001c76:	2100      	movs	r1, #0
 8001c78:	2026      	movs	r0, #38	@ 0x26
 8001c7a:	f001 fb60 	bl	800333e <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn); // Habilitar interrupciones globales USART2 para ESP8266
 8001c7e:	2026      	movs	r0, #38	@ 0x26
 8001c80:	f001 fb79 	bl	8003376 <HAL_NVIC_EnableIRQ>
}
 8001c84:	bf00      	nop
 8001c86:	bd80      	pop	{r7, pc}

08001c88 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c88:	b480      	push	{r7}
 8001c8a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c8c:	b672      	cpsid	i
}
 8001c8e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c90:	bf00      	nop
 8001c92:	e7fd      	b.n	8001c90 <Error_Handler+0x8>

08001c94 <mqtt_raspberry_set_enabled>:
static float lastTemp = 0, lastHum = 0, lastLux = 0;

// Prototipos auxiliares
static uint8_t mqtt_wait_connack(void);

void mqtt_raspberry_set_enabled(uint8_t enable) {
 8001c94:	b480      	push	{r7}
 8001c96:	b083      	sub	sp, #12
 8001c98:	af00      	add	r7, sp, #0
 8001c9a:	4603      	mov	r3, r0
 8001c9c:	71fb      	strb	r3, [r7, #7]
    mqttEnabled = enable;
 8001c9e:	4a04      	ldr	r2, [pc, #16]	@ (8001cb0 <mqtt_raspberry_set_enabled+0x1c>)
 8001ca0:	79fb      	ldrb	r3, [r7, #7]
 8001ca2:	7013      	strb	r3, [r2, #0]
}
 8001ca4:	bf00      	nop
 8001ca6:	370c      	adds	r7, #12
 8001ca8:	46bd      	mov	sp, r7
 8001caa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cae:	4770      	bx	lr
 8001cb0:	200005a8 	.word	0x200005a8

08001cb4 <mqtt_raspberry_send>:

void mqtt_raspberry_send(float t, float h, float l) {
 8001cb4:	b480      	push	{r7}
 8001cb6:	b085      	sub	sp, #20
 8001cb8:	af00      	add	r7, sp, #0
 8001cba:	ed87 0a03 	vstr	s0, [r7, #12]
 8001cbe:	edc7 0a02 	vstr	s1, [r7, #8]
 8001cc2:	ed87 1a01 	vstr	s2, [r7, #4]
    lastTemp = t;
 8001cc6:	4a09      	ldr	r2, [pc, #36]	@ (8001cec <mqtt_raspberry_send+0x38>)
 8001cc8:	68fb      	ldr	r3, [r7, #12]
 8001cca:	6013      	str	r3, [r2, #0]
    lastHum = h;
 8001ccc:	4a08      	ldr	r2, [pc, #32]	@ (8001cf0 <mqtt_raspberry_send+0x3c>)
 8001cce:	68bb      	ldr	r3, [r7, #8]
 8001cd0:	6013      	str	r3, [r2, #0]
    lastLux = l;
 8001cd2:	4a08      	ldr	r2, [pc, #32]	@ (8001cf4 <mqtt_raspberry_send+0x40>)
 8001cd4:	687b      	ldr	r3, [r7, #4]
 8001cd6:	6013      	str	r3, [r2, #0]
    mqttState = 1;
 8001cd8:	4b07      	ldr	r3, [pc, #28]	@ (8001cf8 <mqtt_raspberry_send+0x44>)
 8001cda:	2201      	movs	r2, #1
 8001cdc:	701a      	strb	r2, [r3, #0]
}
 8001cde:	bf00      	nop
 8001ce0:	3714      	adds	r7, #20
 8001ce2:	46bd      	mov	sp, r7
 8001ce4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ce8:	4770      	bx	lr
 8001cea:	bf00      	nop
 8001cec:	200005ac 	.word	0x200005ac
 8001cf0:	200005b0 	.word	0x200005b0
 8001cf4:	200005b4 	.word	0x200005b4
 8001cf8:	200005a9 	.word	0x200005a9

08001cfc <mqtt_send_connect_packet>:
//    esp8266_wait_response_timeout(3000);
//
//    HAL_UART_Transmit(&huart2, packet, idx, HAL_MAX_DELAY);
//}

static void mqtt_send_connect_packet(void) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b0d0      	sub	sp, #320	@ 0x140
 8001d00:	af00      	add	r7, sp, #0
    const char* clientId = MQTT_CLIENT_ID;
 8001d02:	4bde      	ldr	r3, [pc, #888]	@ (800207c <mqtt_send_connect_packet+0x380>)
 8001d04:	f8c7 3134 	str.w	r3, [r7, #308]	@ 0x134
    const char* username = MQTT_USERNAME;
 8001d08:	4bdd      	ldr	r3, [pc, #884]	@ (8002080 <mqtt_send_connect_packet+0x384>)
 8001d0a:	f8c7 3130 	str.w	r3, [r7, #304]	@ 0x130
    const char* password = MQTT_PASSWORD;
 8001d0e:	4bdd      	ldr	r3, [pc, #884]	@ (8002084 <mqtt_send_connect_packet+0x388>)
 8001d10:	f8c7 312c 	str.w	r3, [r7, #300]	@ 0x12c

    uint8_t packet[256];
    uint16_t idx = 0;
 8001d14:	2300      	movs	r3, #0
 8001d16:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a

    // Fixed header
    packet[idx++] = 0x10;  // CONNECT
 8001d1a:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001d1e:	1c5a      	adds	r2, r3, #1
 8001d20:	f8a7 212a 	strh.w	r2, [r7, #298]	@ 0x12a
 8001d24:	461a      	mov	r2, r3
 8001d26:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d2a:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d2e:	2110      	movs	r1, #16
 8001d30:	5499      	strb	r1, [r3, r2]

    // Reservar espacio para Remaining Length (se insertará después)
    uint16_t rem_len_pos = idx;
 8001d32:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001d36:	f8a7 3128 	strh.w	r3, [r7, #296]	@ 0x128
    idx += 4;  // Reservamos hasta 4 bytes máximo
 8001d3a:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001d3e:	3304      	adds	r3, #4
 8001d40:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a

    // Variable header
    packet[idx++] = 0x00; packet[idx++] = 0x04;  // Length "MQTT"
 8001d44:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001d48:	1c5a      	adds	r2, r3, #1
 8001d4a:	f8a7 212a 	strh.w	r2, [r7, #298]	@ 0x12a
 8001d4e:	461a      	mov	r2, r3
 8001d50:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d54:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d58:	2100      	movs	r1, #0
 8001d5a:	5499      	strb	r1, [r3, r2]
 8001d5c:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001d60:	1c5a      	adds	r2, r3, #1
 8001d62:	f8a7 212a 	strh.w	r2, [r7, #298]	@ 0x12a
 8001d66:	461a      	mov	r2, r3
 8001d68:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d6c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d70:	2104      	movs	r1, #4
 8001d72:	5499      	strb	r1, [r3, r2]
    packet[idx++] = 'M'; packet[idx++] = 'Q'; packet[idx++] = 'T'; packet[idx++] = 'T';
 8001d74:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001d78:	1c5a      	adds	r2, r3, #1
 8001d7a:	f8a7 212a 	strh.w	r2, [r7, #298]	@ 0x12a
 8001d7e:	461a      	mov	r2, r3
 8001d80:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d84:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001d88:	214d      	movs	r1, #77	@ 0x4d
 8001d8a:	5499      	strb	r1, [r3, r2]
 8001d8c:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001d90:	1c5a      	adds	r2, r3, #1
 8001d92:	f8a7 212a 	strh.w	r2, [r7, #298]	@ 0x12a
 8001d96:	461a      	mov	r2, r3
 8001d98:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001d9c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001da0:	2151      	movs	r1, #81	@ 0x51
 8001da2:	5499      	strb	r1, [r3, r2]
 8001da4:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001da8:	1c5a      	adds	r2, r3, #1
 8001daa:	f8a7 212a 	strh.w	r2, [r7, #298]	@ 0x12a
 8001dae:	461a      	mov	r2, r3
 8001db0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001db4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001db8:	2154      	movs	r1, #84	@ 0x54
 8001dba:	5499      	strb	r1, [r3, r2]
 8001dbc:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001dc0:	1c5a      	adds	r2, r3, #1
 8001dc2:	f8a7 212a 	strh.w	r2, [r7, #298]	@ 0x12a
 8001dc6:	461a      	mov	r2, r3
 8001dc8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001dcc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001dd0:	2154      	movs	r1, #84	@ 0x54
 8001dd2:	5499      	strb	r1, [r3, r2]
    packet[idx++] = 0x04;  // Protocol Level 4
 8001dd4:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001dd8:	1c5a      	adds	r2, r3, #1
 8001dda:	f8a7 212a 	strh.w	r2, [r7, #298]	@ 0x12a
 8001dde:	461a      	mov	r2, r3
 8001de0:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001de4:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001de8:	2104      	movs	r1, #4
 8001dea:	5499      	strb	r1, [r3, r2]
    packet[idx++] = 0xC0;  // Flags: username, password, clean session
 8001dec:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001df0:	1c5a      	adds	r2, r3, #1
 8001df2:	f8a7 212a 	strh.w	r2, [r7, #298]	@ 0x12a
 8001df6:	461a      	mov	r2, r3
 8001df8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001dfc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e00:	21c0      	movs	r1, #192	@ 0xc0
 8001e02:	5499      	strb	r1, [r3, r2]
    packet[idx++] = 0x00; packet[idx++] = 0x3C;  // Keep Alive = 60
 8001e04:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001e08:	1c5a      	adds	r2, r3, #1
 8001e0a:	f8a7 212a 	strh.w	r2, [r7, #298]	@ 0x12a
 8001e0e:	461a      	mov	r2, r3
 8001e10:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001e14:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e18:	2100      	movs	r1, #0
 8001e1a:	5499      	strb	r1, [r3, r2]
 8001e1c:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001e20:	1c5a      	adds	r2, r3, #1
 8001e22:	f8a7 212a 	strh.w	r2, [r7, #298]	@ 0x12a
 8001e26:	461a      	mov	r2, r3
 8001e28:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001e2c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e30:	213c      	movs	r1, #60	@ 0x3c
 8001e32:	5499      	strb	r1, [r3, r2]

    // Payload
    uint16_t len;

    // Client ID
    len = strlen(clientId);
 8001e34:	f8d7 0134 	ldr.w	r0, [r7, #308]	@ 0x134
 8001e38:	f7fe fa22 	bl	8000280 <strlen>
 8001e3c:	4603      	mov	r3, r0
 8001e3e:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
    packet[idx++] = len >> 8; packet[idx++] = len & 0xFF;
 8001e42:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8001e46:	0a1b      	lsrs	r3, r3, #8
 8001e48:	b299      	uxth	r1, r3
 8001e4a:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001e4e:	1c5a      	adds	r2, r3, #1
 8001e50:	f8a7 212a 	strh.w	r2, [r7, #298]	@ 0x12a
 8001e54:	461a      	mov	r2, r3
 8001e56:	b2c9      	uxtb	r1, r1
 8001e58:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001e5c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e60:	5499      	strb	r1, [r3, r2]
 8001e62:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001e66:	1c5a      	adds	r2, r3, #1
 8001e68:	f8a7 212a 	strh.w	r2, [r7, #298]	@ 0x12a
 8001e6c:	461a      	mov	r2, r3
 8001e6e:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8001e72:	b2d9      	uxtb	r1, r3
 8001e74:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001e78:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001e7c:	5499      	strb	r1, [r3, r2]
    memcpy(&packet[idx], clientId, len); idx += len;
 8001e7e:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001e82:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001e86:	4413      	add	r3, r2
 8001e88:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8001e8c:	f8d7 1134 	ldr.w	r1, [r7, #308]	@ 0x134
 8001e90:	4618      	mov	r0, r3
 8001e92:	f006 f974 	bl	800817e <memcpy>
 8001e96:	f8b7 212a 	ldrh.w	r2, [r7, #298]	@ 0x12a
 8001e9a:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8001e9e:	4413      	add	r3, r2
 8001ea0:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a

    // Username
    len = strlen(username);
 8001ea4:	f8d7 0130 	ldr.w	r0, [r7, #304]	@ 0x130
 8001ea8:	f7fe f9ea 	bl	8000280 <strlen>
 8001eac:	4603      	mov	r3, r0
 8001eae:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
    packet[idx++] = len >> 8; packet[idx++] = len & 0xFF;
 8001eb2:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8001eb6:	0a1b      	lsrs	r3, r3, #8
 8001eb8:	b299      	uxth	r1, r3
 8001eba:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001ebe:	1c5a      	adds	r2, r3, #1
 8001ec0:	f8a7 212a 	strh.w	r2, [r7, #298]	@ 0x12a
 8001ec4:	461a      	mov	r2, r3
 8001ec6:	b2c9      	uxtb	r1, r1
 8001ec8:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001ecc:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001ed0:	5499      	strb	r1, [r3, r2]
 8001ed2:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001ed6:	1c5a      	adds	r2, r3, #1
 8001ed8:	f8a7 212a 	strh.w	r2, [r7, #298]	@ 0x12a
 8001edc:	461a      	mov	r2, r3
 8001ede:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8001ee2:	b2d9      	uxtb	r1, r3
 8001ee4:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001ee8:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001eec:	5499      	strb	r1, [r3, r2]
    memcpy(&packet[idx], username, len); idx += len;
 8001eee:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001ef2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001ef6:	4413      	add	r3, r2
 8001ef8:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8001efc:	f8d7 1130 	ldr.w	r1, [r7, #304]	@ 0x130
 8001f00:	4618      	mov	r0, r3
 8001f02:	f006 f93c 	bl	800817e <memcpy>
 8001f06:	f8b7 212a 	ldrh.w	r2, [r7, #298]	@ 0x12a
 8001f0a:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8001f0e:	4413      	add	r3, r2
 8001f10:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a

    // Password
    len = strlen(password);
 8001f14:	f8d7 012c 	ldr.w	r0, [r7, #300]	@ 0x12c
 8001f18:	f7fe f9b2 	bl	8000280 <strlen>
 8001f1c:	4603      	mov	r3, r0
 8001f1e:	f8a7 3126 	strh.w	r3, [r7, #294]	@ 0x126
    packet[idx++] = len >> 8; packet[idx++] = len & 0xFF;
 8001f22:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8001f26:	0a1b      	lsrs	r3, r3, #8
 8001f28:	b299      	uxth	r1, r3
 8001f2a:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001f2e:	1c5a      	adds	r2, r3, #1
 8001f30:	f8a7 212a 	strh.w	r2, [r7, #298]	@ 0x12a
 8001f34:	461a      	mov	r2, r3
 8001f36:	b2c9      	uxtb	r1, r1
 8001f38:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001f3c:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f40:	5499      	strb	r1, [r3, r2]
 8001f42:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001f46:	1c5a      	adds	r2, r3, #1
 8001f48:	f8a7 212a 	strh.w	r2, [r7, #298]	@ 0x12a
 8001f4c:	461a      	mov	r2, r3
 8001f4e:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8001f52:	b2d9      	uxtb	r1, r3
 8001f54:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001f58:	f5a3 738e 	sub.w	r3, r3, #284	@ 0x11c
 8001f5c:	5499      	strb	r1, [r3, r2]
    memcpy(&packet[idx], password, len); idx += len;
 8001f5e:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8001f62:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001f66:	4413      	add	r3, r2
 8001f68:	f8b7 2126 	ldrh.w	r2, [r7, #294]	@ 0x126
 8001f6c:	f8d7 112c 	ldr.w	r1, [r7, #300]	@ 0x12c
 8001f70:	4618      	mov	r0, r3
 8001f72:	f006 f904 	bl	800817e <memcpy>
 8001f76:	f8b7 212a 	ldrh.w	r2, [r7, #298]	@ 0x12a
 8001f7a:	f8b7 3126 	ldrh.w	r3, [r7, #294]	@ 0x126
 8001f7e:	4413      	add	r3, r2
 8001f80:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a

    // Calcular Remaining Length
    uint32_t rem_len = idx - rem_len_pos - 4;
 8001f84:	f8b7 212a 	ldrh.w	r2, [r7, #298]	@ 0x12a
 8001f88:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8001f8c:	1ad3      	subs	r3, r2, r3
 8001f8e:	3b04      	subs	r3, #4
 8001f90:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
    uint8_t rem_encoded[4];
    uint8_t rem_size = 0;
 8001f94:	2300      	movs	r3, #0
 8001f96:	f887 313b 	strb.w	r3, [r7, #315]	@ 0x13b

    do {
        uint8_t byte = rem_len % 128;
 8001f9a:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001f9e:	b2db      	uxtb	r3, r3
 8001fa0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001fa4:	f887 313a 	strb.w	r3, [r7, #314]	@ 0x13a
        rem_len /= 128;
 8001fa8:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001fac:	09db      	lsrs	r3, r3, #7
 8001fae:	f8c7 313c 	str.w	r3, [r7, #316]	@ 0x13c
        if (rem_len > 0) byte |= 0x80;
 8001fb2:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001fb6:	2b00      	cmp	r3, #0
 8001fb8:	d005      	beq.n	8001fc6 <mqtt_send_connect_packet+0x2ca>
 8001fba:	f897 313a 	ldrb.w	r3, [r7, #314]	@ 0x13a
 8001fbe:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001fc2:	f887 313a 	strb.w	r3, [r7, #314]	@ 0x13a
        rem_encoded[rem_size++] = byte;
 8001fc6:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8001fca:	1c5a      	adds	r2, r3, #1
 8001fcc:	f887 213b 	strb.w	r2, [r7, #315]	@ 0x13b
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	f507 73a0 	add.w	r3, r7, #320	@ 0x140
 8001fd6:	f5a3 7390 	sub.w	r3, r3, #288	@ 0x120
 8001fda:	f897 213a 	ldrb.w	r2, [r7, #314]	@ 0x13a
 8001fde:	545a      	strb	r2, [r3, r1]
    } while (rem_len > 0);
 8001fe0:	f8d7 313c 	ldr.w	r3, [r7, #316]	@ 0x13c
 8001fe4:	2b00      	cmp	r3, #0
 8001fe6:	d1d8      	bne.n	8001f9a <mqtt_send_connect_packet+0x29e>

    // Mover datos para insertar Remaining Length
    memmove(&packet[rem_len_pos + rem_size], &packet[rem_len_pos + 4], idx - (rem_len_pos + 4));
 8001fe8:	f8b7 2128 	ldrh.w	r2, [r7, #296]	@ 0x128
 8001fec:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8001ff0:	4413      	add	r3, r2
 8001ff2:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8001ff6:	18d0      	adds	r0, r2, r3
 8001ff8:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 8001ffc:	3304      	adds	r3, #4
 8001ffe:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 8002002:	18d1      	adds	r1, r2, r3
 8002004:	f8b7 212a 	ldrh.w	r2, [r7, #298]	@ 0x12a
 8002008:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800200c:	3304      	adds	r3, #4
 800200e:	1ad3      	subs	r3, r2, r3
 8002010:	461a      	mov	r2, r3
 8002012:	f006 f805 	bl	8008020 <memmove>
    memcpy(&packet[rem_len_pos], rem_encoded, rem_size);
 8002016:	f8b7 3128 	ldrh.w	r3, [r7, #296]	@ 0x128
 800201a:	f107 0224 	add.w	r2, r7, #36	@ 0x24
 800201e:	4413      	add	r3, r2
 8002020:	f897 213b 	ldrb.w	r2, [r7, #315]	@ 0x13b
 8002024:	f107 0120 	add.w	r1, r7, #32
 8002028:	4618      	mov	r0, r3
 800202a:	f006 f8a8 	bl	800817e <memcpy>
    idx = idx - 4 + rem_size;
 800202e:	f897 313b 	ldrb.w	r3, [r7, #315]	@ 0x13b
 8002032:	b29a      	uxth	r2, r3
 8002034:	f8b7 312a 	ldrh.w	r3, [r7, #298]	@ 0x12a
 8002038:	4413      	add	r3, r2
 800203a:	b29b      	uxth	r3, r3
 800203c:	3b04      	subs	r3, #4
 800203e:	f8a7 312a 	strh.w	r3, [r7, #298]	@ 0x12a

    // Enviar comando AT+CIPSEND
    char cmd[32];
    sprintf(cmd, "AT+CIPSEND=%d\r\n", idx);
 8002042:	f8b7 212a 	ldrh.w	r2, [r7, #298]	@ 0x12a
 8002046:	463b      	mov	r3, r7
 8002048:	490f      	ldr	r1, [pc, #60]	@ (8002088 <mqtt_send_connect_packet+0x38c>)
 800204a:	4618      	mov	r0, r3
 800204c:	f005 feee 	bl	8007e2c <siprintf>
    esp8266_send_command(cmd);
 8002050:	463b      	mov	r3, r7
 8002052:	4618      	mov	r0, r3
 8002054:	f7ff f848 	bl	80010e8 <esp8266_send_command>
    esp8266_wait_response_timeout(3000);
 8002058:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 800205c:	f7ff f87c 	bl	8001158 <esp8266_wait_response_timeout>

    // Enviar paquete MQTT
    HAL_UART_Transmit(&huart2, packet, idx, HAL_MAX_DELAY);
 8002060:	f8b7 212a 	ldrh.w	r2, [r7, #298]	@ 0x12a
 8002064:	f107 0124 	add.w	r1, r7, #36	@ 0x24
 8002068:	f04f 33ff 	mov.w	r3, #4294967295
 800206c:	4807      	ldr	r0, [pc, #28]	@ (800208c <mqtt_send_connect_packet+0x390>)
 800206e:	f003 fde2 	bl	8005c36 <HAL_UART_Transmit>
}
 8002072:	bf00      	nop
 8002074:	f507 77a0 	add.w	r7, r7, #320	@ 0x140
 8002078:	46bd      	mov	sp, r7
 800207a:	bd80      	pop	{r7, pc}
 800207c:	0800b7c0 	.word	0x0800b7c0
 8002080:	0800b7c8 	.word	0x0800b7c8
 8002084:	0800b7d0 	.word	0x0800b7d0
 8002088:	0800b7d4 	.word	0x0800b7d4
 800208c:	20000514 	.word	0x20000514

08002090 <mqtt_publish_unified_json>:


static void mqtt_publish_unified_json(const char* topic) {
 8002090:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002094:	b0b6      	sub	sp, #216	@ 0xd8
 8002096:	af04      	add	r7, sp, #16
 8002098:	6078      	str	r0, [r7, #4]
    char payload[128];
    sprintf(payload, "{\"temp\":%.2f,\"hum\":%.2f,\"lux\":%.2f}", lastTemp, lastHum, lastLux);
 800209a:	4b59      	ldr	r3, [pc, #356]	@ (8002200 <mqtt_publish_unified_json+0x170>)
 800209c:	681b      	ldr	r3, [r3, #0]
 800209e:	4618      	mov	r0, r3
 80020a0:	f7fe fa5a 	bl	8000558 <__aeabi_f2d>
 80020a4:	4680      	mov	r8, r0
 80020a6:	4689      	mov	r9, r1
 80020a8:	4b56      	ldr	r3, [pc, #344]	@ (8002204 <mqtt_publish_unified_json+0x174>)
 80020aa:	681b      	ldr	r3, [r3, #0]
 80020ac:	4618      	mov	r0, r3
 80020ae:	f7fe fa53 	bl	8000558 <__aeabi_f2d>
 80020b2:	4604      	mov	r4, r0
 80020b4:	460d      	mov	r5, r1
 80020b6:	4b54      	ldr	r3, [pc, #336]	@ (8002208 <mqtt_publish_unified_json+0x178>)
 80020b8:	681b      	ldr	r3, [r3, #0]
 80020ba:	4618      	mov	r0, r3
 80020bc:	f7fe fa4c 	bl	8000558 <__aeabi_f2d>
 80020c0:	4602      	mov	r2, r0
 80020c2:	460b      	mov	r3, r1
 80020c4:	f107 0038 	add.w	r0, r7, #56	@ 0x38
 80020c8:	e9cd 2302 	strd	r2, r3, [sp, #8]
 80020cc:	e9cd 4500 	strd	r4, r5, [sp]
 80020d0:	4642      	mov	r2, r8
 80020d2:	464b      	mov	r3, r9
 80020d4:	494d      	ldr	r1, [pc, #308]	@ (800220c <mqtt_publish_unified_json+0x17c>)
 80020d6:	f005 fea9 	bl	8007e2c <siprintf>

    uint16_t topicLen = strlen(topic);
 80020da:	6878      	ldr	r0, [r7, #4]
 80020dc:	f7fe f8d0 	bl	8000280 <strlen>
 80020e0:	4603      	mov	r3, r0
 80020e2:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
    uint16_t payloadLen = strlen(payload);
 80020e6:	f107 0338 	add.w	r3, r7, #56	@ 0x38
 80020ea:	4618      	mov	r0, r3
 80020ec:	f7fe f8c8 	bl	8000280 <strlen>
 80020f0:	4603      	mov	r3, r0
 80020f2:	f8a7 30ba 	strh.w	r3, [r7, #186]	@ 0xba
    uint16_t msgLen = 2 + topicLen + payloadLen;
 80020f6:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	@ 0xbc
 80020fa:	f8b7 30ba 	ldrh.w	r3, [r7, #186]	@ 0xba
 80020fe:	4413      	add	r3, r2
 8002100:	b29b      	uxth	r3, r3
 8002102:	3302      	adds	r3, #2
 8002104:	f8a7 30b8 	strh.w	r3, [r7, #184]	@ 0xb8

    uint8_t header[5];
    uint8_t hdrLen = 0;
 8002108:	2300      	movs	r3, #0
 800210a:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
    header[hdrLen++] = 0x30;  // PUBLISH, QoS 0
 800210e:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8002112:	1c5a      	adds	r2, r3, #1
 8002114:	f887 20c7 	strb.w	r2, [r7, #199]	@ 0xc7
 8002118:	33c8      	adds	r3, #200	@ 0xc8
 800211a:	443b      	add	r3, r7
 800211c:	2230      	movs	r2, #48	@ 0x30
 800211e:	f803 2c98 	strb.w	r2, [r3, #-152]

    uint32_t len = msgLen;
 8002122:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 8002126:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    do {
        uint8_t byte = len % 128;
 800212a:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800212e:	b2db      	uxtb	r3, r3
 8002130:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8002134:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
        len /= 128;
 8002138:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 800213c:	09db      	lsrs	r3, r3, #7
 800213e:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
        if (len > 0) byte |= 0x80;
 8002142:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002146:	2b00      	cmp	r3, #0
 8002148:	d005      	beq.n	8002156 <mqtt_publish_unified_json+0xc6>
 800214a:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 800214e:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8002152:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
        header[hdrLen++] = byte;
 8002156:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 800215a:	1c5a      	adds	r2, r3, #1
 800215c:	f887 20c7 	strb.w	r2, [r7, #199]	@ 0xc7
 8002160:	33c8      	adds	r3, #200	@ 0xc8
 8002162:	443b      	add	r3, r7
 8002164:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 8002168:	f803 2c98 	strb.w	r2, [r3, #-152]
    } while (len > 0);
 800216c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8002170:	2b00      	cmp	r3, #0
 8002172:	d1da      	bne.n	800212a <mqtt_publish_unified_json+0x9a>

    char cipCmd[32];
    sprintf(cipCmd, "AT+CIPSEND=%d\r\n", hdrLen + msgLen);
 8002174:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8002178:	f8b7 30b8 	ldrh.w	r3, [r7, #184]	@ 0xb8
 800217c:	441a      	add	r2, r3
 800217e:	f107 0310 	add.w	r3, r7, #16
 8002182:	4923      	ldr	r1, [pc, #140]	@ (8002210 <mqtt_publish_unified_json+0x180>)
 8002184:	4618      	mov	r0, r3
 8002186:	f005 fe51 	bl	8007e2c <siprintf>
    esp8266_send_command(cipCmd);
 800218a:	f107 0310 	add.w	r3, r7, #16
 800218e:	4618      	mov	r0, r3
 8002190:	f7fe ffaa 	bl	80010e8 <esp8266_send_command>
    esp8266_wait_response_timeout(3000);
 8002194:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8002198:	f7fe ffde 	bl	8001158 <esp8266_wait_response_timeout>

    HAL_UART_Transmit(&huart2, header, hdrLen, HAL_MAX_DELAY);
 800219c:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 80021a0:	b29a      	uxth	r2, r3
 80021a2:	f107 0130 	add.w	r1, r7, #48	@ 0x30
 80021a6:	f04f 33ff 	mov.w	r3, #4294967295
 80021aa:	481a      	ldr	r0, [pc, #104]	@ (8002214 <mqtt_publish_unified_json+0x184>)
 80021ac:	f003 fd43 	bl	8005c36 <HAL_UART_Transmit>

    uint8_t topicLenBytes[2] = { topicLen >> 8, topicLen & 0xFF };
 80021b0:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 80021b4:	0a1b      	lsrs	r3, r3, #8
 80021b6:	b29b      	uxth	r3, r3
 80021b8:	b2db      	uxtb	r3, r3
 80021ba:	733b      	strb	r3, [r7, #12]
 80021bc:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 80021c0:	b2db      	uxtb	r3, r3
 80021c2:	737b      	strb	r3, [r7, #13]
    HAL_UART_Transmit(&huart2, topicLenBytes, 2, HAL_MAX_DELAY);
 80021c4:	f107 010c 	add.w	r1, r7, #12
 80021c8:	f04f 33ff 	mov.w	r3, #4294967295
 80021cc:	2202      	movs	r2, #2
 80021ce:	4811      	ldr	r0, [pc, #68]	@ (8002214 <mqtt_publish_unified_json+0x184>)
 80021d0:	f003 fd31 	bl	8005c36 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)topic, topicLen, HAL_MAX_DELAY);
 80021d4:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	@ 0xbc
 80021d8:	f04f 33ff 	mov.w	r3, #4294967295
 80021dc:	6879      	ldr	r1, [r7, #4]
 80021de:	480d      	ldr	r0, [pc, #52]	@ (8002214 <mqtt_publish_unified_json+0x184>)
 80021e0:	f003 fd29 	bl	8005c36 <HAL_UART_Transmit>
    HAL_UART_Transmit(&huart2, (uint8_t*)payload, payloadLen, HAL_MAX_DELAY);
 80021e4:	f8b7 20ba 	ldrh.w	r2, [r7, #186]	@ 0xba
 80021e8:	f107 0138 	add.w	r1, r7, #56	@ 0x38
 80021ec:	f04f 33ff 	mov.w	r3, #4294967295
 80021f0:	4808      	ldr	r0, [pc, #32]	@ (8002214 <mqtt_publish_unified_json+0x184>)
 80021f2:	f003 fd20 	bl	8005c36 <HAL_UART_Transmit>
}
 80021f6:	bf00      	nop
 80021f8:	37c8      	adds	r7, #200	@ 0xc8
 80021fa:	46bd      	mov	sp, r7
 80021fc:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002200:	200005ac 	.word	0x200005ac
 8002204:	200005b0 	.word	0x200005b0
 8002208:	200005b4 	.word	0x200005b4
 800220c:	0800b7e4 	.word	0x0800b7e4
 8002210:	0800b7d4 	.word	0x0800b7d4
 8002214:	20000514 	.word	0x20000514

08002218 <mqtt_wait_connack>:

// Espera y lee 4 bytes del CONNACK MQTT (binario, no texto)
static uint8_t mqtt_wait_connack(void) {
 8002218:	b580      	push	{r7, lr}
 800221a:	b082      	sub	sp, #8
 800221c:	af00      	add	r7, sp, #0
    uint8_t connack[4] = {0};
 800221e:	2300      	movs	r3, #0
 8002220:	607b      	str	r3, [r7, #4]
    // Espera hasta 1 segundo a recibir el CONNACK
    if (HAL_UART_Receive(&huart2, connack, 4, 1000) == HAL_OK) {
 8002222:	1d39      	adds	r1, r7, #4
 8002224:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002228:	2204      	movs	r2, #4
 800222a:	480b      	ldr	r0, [pc, #44]	@ (8002258 <mqtt_wait_connack+0x40>)
 800222c:	f003 fd8e 	bl	8005d4c <HAL_UART_Receive>
 8002230:	4603      	mov	r3, r0
 8002232:	2b00      	cmp	r3, #0
 8002234:	d10a      	bne.n	800224c <mqtt_wait_connack+0x34>
        // CONNACK esperado: 0x20 0x02 0x00 0x00 (aceptado)
        if (connack[0] == 0x20 && connack[1] == 0x02 && connack[3] == 0x00) {
 8002236:	793b      	ldrb	r3, [r7, #4]
 8002238:	2b20      	cmp	r3, #32
 800223a:	d107      	bne.n	800224c <mqtt_wait_connack+0x34>
 800223c:	797b      	ldrb	r3, [r7, #5]
 800223e:	2b02      	cmp	r3, #2
 8002240:	d104      	bne.n	800224c <mqtt_wait_connack+0x34>
 8002242:	79fb      	ldrb	r3, [r7, #7]
 8002244:	2b00      	cmp	r3, #0
 8002246:	d101      	bne.n	800224c <mqtt_wait_connack+0x34>
            return 1;
 8002248:	2301      	movs	r3, #1
 800224a:	e000      	b.n	800224e <mqtt_wait_connack+0x36>
        }
    }
    return 0;
 800224c:	2300      	movs	r3, #0
}
 800224e:	4618      	mov	r0, r3
 8002250:	3708      	adds	r7, #8
 8002252:	46bd      	mov	sp, r7
 8002254:	bd80      	pop	{r7, pc}
 8002256:	bf00      	nop
 8002258:	20000514 	.word	0x20000514

0800225c <mqtt_raspberry_process>:

void mqtt_raspberry_process(void) {
 800225c:	b580      	push	{r7, lr}
 800225e:	b092      	sub	sp, #72	@ 0x48
 8002260:	af00      	add	r7, sp, #0
    if (!mqttEnabled) return;
 8002262:	4b7a      	ldr	r3, [pc, #488]	@ (800244c <mqtt_raspberry_process+0x1f0>)
 8002264:	781b      	ldrb	r3, [r3, #0]
 8002266:	b2db      	uxtb	r3, r3
 8002268:	2b00      	cmp	r3, #0
 800226a:	f000 80e4 	beq.w	8002436 <mqtt_raspberry_process+0x1da>

    static uint32_t stateTimeout = 0;

    switch (mqttState) {
 800226e:	4b78      	ldr	r3, [pc, #480]	@ (8002450 <mqtt_raspberry_process+0x1f4>)
 8002270:	781b      	ldrb	r3, [r3, #0]
 8002272:	b2db      	uxtb	r3, r3
 8002274:	3b01      	subs	r3, #1
 8002276:	2b05      	cmp	r3, #5
 8002278:	f200 80d6 	bhi.w	8002428 <mqtt_raspberry_process+0x1cc>
 800227c:	a201      	add	r2, pc, #4	@ (adr r2, 8002284 <mqtt_raspberry_process+0x28>)
 800227e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002282:	bf00      	nop
 8002284:	0800229d 	.word	0x0800229d
 8002288:	080022d7 	.word	0x080022d7
 800228c:	08002341 	.word	0x08002341
 8002290:	0800235b 	.word	0x0800235b
 8002294:	080023af 	.word	0x080023af
 8002298:	080023cb 	.word	0x080023cb
        case 1: {
            // Cierra cualquier conexión previa (mejor limpieza)
            esp8266_send_command("AT+CIPCLOSE\r\n");
 800229c:	486d      	ldr	r0, [pc, #436]	@ (8002454 <mqtt_raspberry_process+0x1f8>)
 800229e:	f7fe ff23 	bl	80010e8 <esp8266_send_command>
            esp8266_wait_response_timeout(1500);
 80022a2:	f240 50dc 	movw	r0, #1500	@ 0x5dc
 80022a6:	f7fe ff57 	bl	8001158 <esp8266_wait_response_timeout>

            char cmd[64];
            sprintf(cmd, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", MQTT_BROKER_IP, MQTT_BROKER_PORT);
 80022aa:	1d38      	adds	r0, r7, #4
 80022ac:	f240 735b 	movw	r3, #1883	@ 0x75b
 80022b0:	4a69      	ldr	r2, [pc, #420]	@ (8002458 <mqtt_raspberry_process+0x1fc>)
 80022b2:	496a      	ldr	r1, [pc, #424]	@ (800245c <mqtt_raspberry_process+0x200>)
 80022b4:	f005 fdba 	bl	8007e2c <siprintf>
            esp8266_send_command(cmd);
 80022b8:	1d3b      	adds	r3, r7, #4
 80022ba:	4618      	mov	r0, r3
 80022bc:	f7fe ff14 	bl	80010e8 <esp8266_send_command>
            esp8266_receive_response_IT();
 80022c0:	f7fe feee 	bl	80010a0 <esp8266_receive_response_IT>
            stateTimeout = HAL_GetTick();
 80022c4:	f000 ff30 	bl	8003128 <HAL_GetTick>
 80022c8:	4603      	mov	r3, r0
 80022ca:	4a65      	ldr	r2, [pc, #404]	@ (8002460 <mqtt_raspberry_process+0x204>)
 80022cc:	6013      	str	r3, [r2, #0]
            mqttState = 2;
 80022ce:	4b60      	ldr	r3, [pc, #384]	@ (8002450 <mqtt_raspberry_process+0x1f4>)
 80022d0:	2202      	movs	r2, #2
 80022d2:	701a      	strb	r2, [r3, #0]
            break;
 80022d4:	e0b6      	b.n	8002444 <mqtt_raspberry_process+0x1e8>
        }
        case 2: {
            if (esp8266_is_response_ready()) {
 80022d6:	f7fe ff1d 	bl	8001114 <esp8266_is_response_ready>
 80022da:	4603      	mov	r3, r0
 80022dc:	2b00      	cmp	r3, #0
 80022de:	d01d      	beq.n	800231c <mqtt_raspberry_process+0xc0>
                esp8266_clear_response_flag();
 80022e0:	f7fe ff2e 	bl	8001140 <esp8266_clear_response_flag>
                char* resp = esp8266_get_response();
 80022e4:	f7fe ff22 	bl	800112c <esp8266_get_response>
 80022e8:	6478      	str	r0, [r7, #68]	@ 0x44
                if (strstr(resp, "CONNECT") || strstr(resp, "ALREADY CONNECTED")) {
 80022ea:	495e      	ldr	r1, [pc, #376]	@ (8002464 <mqtt_raspberry_process+0x208>)
 80022ec:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80022ee:	f005 feb9 	bl	8008064 <strstr>
 80022f2:	4603      	mov	r3, r0
 80022f4:	2b00      	cmp	r3, #0
 80022f6:	d106      	bne.n	8002306 <mqtt_raspberry_process+0xaa>
 80022f8:	495b      	ldr	r1, [pc, #364]	@ (8002468 <mqtt_raspberry_process+0x20c>)
 80022fa:	6c78      	ldr	r0, [r7, #68]	@ 0x44
 80022fc:	f005 feb2 	bl	8008064 <strstr>
 8002300:	4603      	mov	r3, r0
 8002302:	2b00      	cmp	r3, #0
 8002304:	d003      	beq.n	800230e <mqtt_raspberry_process+0xb2>
                    mqttState = 3;
 8002306:	4b52      	ldr	r3, [pc, #328]	@ (8002450 <mqtt_raspberry_process+0x1f4>)
 8002308:	2203      	movs	r2, #3
 800230a:	701a      	strb	r2, [r3, #0]
                }
            } else if (HAL_GetTick() - stateTimeout > 5000) {
                printf("Timeout en conexión TCP\r\n");
                mqttState = 0;
            }
            break;
 800230c:	e095      	b.n	800243a <mqtt_raspberry_process+0x1de>
                    printf("Error conectando al broker\r\n");
 800230e:	4857      	ldr	r0, [pc, #348]	@ (800246c <mqtt_raspberry_process+0x210>)
 8002310:	f005 fd84 	bl	8007e1c <puts>
                    mqttState = 0;
 8002314:	4b4e      	ldr	r3, [pc, #312]	@ (8002450 <mqtt_raspberry_process+0x1f4>)
 8002316:	2200      	movs	r2, #0
 8002318:	701a      	strb	r2, [r3, #0]
            break;
 800231a:	e08e      	b.n	800243a <mqtt_raspberry_process+0x1de>
            } else if (HAL_GetTick() - stateTimeout > 5000) {
 800231c:	f000 ff04 	bl	8003128 <HAL_GetTick>
 8002320:	4602      	mov	r2, r0
 8002322:	4b4f      	ldr	r3, [pc, #316]	@ (8002460 <mqtt_raspberry_process+0x204>)
 8002324:	681b      	ldr	r3, [r3, #0]
 8002326:	1ad3      	subs	r3, r2, r3
 8002328:	f241 3288 	movw	r2, #5000	@ 0x1388
 800232c:	4293      	cmp	r3, r2
 800232e:	f240 8084 	bls.w	800243a <mqtt_raspberry_process+0x1de>
                printf("Timeout en conexión TCP\r\n");
 8002332:	484f      	ldr	r0, [pc, #316]	@ (8002470 <mqtt_raspberry_process+0x214>)
 8002334:	f005 fd72 	bl	8007e1c <puts>
                mqttState = 0;
 8002338:	4b45      	ldr	r3, [pc, #276]	@ (8002450 <mqtt_raspberry_process+0x1f4>)
 800233a:	2200      	movs	r2, #0
 800233c:	701a      	strb	r2, [r3, #0]
            break;
 800233e:	e07c      	b.n	800243a <mqtt_raspberry_process+0x1de>
        }
        case 3: {
            mqtt_send_connect_packet();
 8002340:	f7ff fcdc 	bl	8001cfc <mqtt_send_connect_packet>
            // Espera a que el ESP8266 mande "SEND OK" antes de leer CONNACK
            esp8266_receive_response_IT();
 8002344:	f7fe feac 	bl	80010a0 <esp8266_receive_response_IT>
            stateTimeout = HAL_GetTick();
 8002348:	f000 feee 	bl	8003128 <HAL_GetTick>
 800234c:	4603      	mov	r3, r0
 800234e:	4a44      	ldr	r2, [pc, #272]	@ (8002460 <mqtt_raspberry_process+0x204>)
 8002350:	6013      	str	r3, [r2, #0]
            mqttState = 4;
 8002352:	4b3f      	ldr	r3, [pc, #252]	@ (8002450 <mqtt_raspberry_process+0x1f4>)
 8002354:	2204      	movs	r2, #4
 8002356:	701a      	strb	r2, [r3, #0]
            break;
 8002358:	e074      	b.n	8002444 <mqtt_raspberry_process+0x1e8>
        }
        case 4: {
            if (esp8266_is_response_ready()) {
 800235a:	f7fe fedb 	bl	8001114 <esp8266_is_response_ready>
 800235e:	4603      	mov	r3, r0
 8002360:	2b00      	cmp	r3, #0
 8002362:	d014      	beq.n	800238e <mqtt_raspberry_process+0x132>
                esp8266_clear_response_flag();
 8002364:	f7fe feec 	bl	8001140 <esp8266_clear_response_flag>
                // Importante: leer CONNACK binario MQTT
                if (mqtt_wait_connack()) {
 8002368:	f7ff ff56 	bl	8002218 <mqtt_wait_connack>
 800236c:	4603      	mov	r3, r0
 800236e:	2b00      	cmp	r3, #0
 8002370:	d006      	beq.n	8002380 <mqtt_raspberry_process+0x124>
                    printf("MQTT conectado\r\n");
 8002372:	4840      	ldr	r0, [pc, #256]	@ (8002474 <mqtt_raspberry_process+0x218>)
 8002374:	f005 fd52 	bl	8007e1c <puts>
                    mqttState = 5;
 8002378:	4b35      	ldr	r3, [pc, #212]	@ (8002450 <mqtt_raspberry_process+0x1f4>)
 800237a:	2205      	movs	r2, #5
 800237c:	701a      	strb	r2, [r3, #0]
                }
            } else if (HAL_GetTick() - stateTimeout > 2000) {
                printf("Timeout esperando CONNACK\r\n");
                mqttState = 0;
            }
            break;
 800237e:	e05e      	b.n	800243e <mqtt_raspberry_process+0x1e2>
                    printf("CONNACK inválido\r\n");
 8002380:	483d      	ldr	r0, [pc, #244]	@ (8002478 <mqtt_raspberry_process+0x21c>)
 8002382:	f005 fd4b 	bl	8007e1c <puts>
                    mqttState = 0;
 8002386:	4b32      	ldr	r3, [pc, #200]	@ (8002450 <mqtt_raspberry_process+0x1f4>)
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
            break;
 800238c:	e057      	b.n	800243e <mqtt_raspberry_process+0x1e2>
            } else if (HAL_GetTick() - stateTimeout > 2000) {
 800238e:	f000 fecb 	bl	8003128 <HAL_GetTick>
 8002392:	4602      	mov	r2, r0
 8002394:	4b32      	ldr	r3, [pc, #200]	@ (8002460 <mqtt_raspberry_process+0x204>)
 8002396:	681b      	ldr	r3, [r3, #0]
 8002398:	1ad3      	subs	r3, r2, r3
 800239a:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800239e:	d94e      	bls.n	800243e <mqtt_raspberry_process+0x1e2>
                printf("Timeout esperando CONNACK\r\n");
 80023a0:	4836      	ldr	r0, [pc, #216]	@ (800247c <mqtt_raspberry_process+0x220>)
 80023a2:	f005 fd3b 	bl	8007e1c <puts>
                mqttState = 0;
 80023a6:	4b2a      	ldr	r3, [pc, #168]	@ (8002450 <mqtt_raspberry_process+0x1f4>)
 80023a8:	2200      	movs	r2, #0
 80023aa:	701a      	strb	r2, [r3, #0]
            break;
 80023ac:	e047      	b.n	800243e <mqtt_raspberry_process+0x1e2>
        }
        case 5: {
            mqtt_publish_unified_json(MQTT_TOPIC_JSON);
 80023ae:	4834      	ldr	r0, [pc, #208]	@ (8002480 <mqtt_raspberry_process+0x224>)
 80023b0:	f7ff fe6e 	bl	8002090 <mqtt_publish_unified_json>
            esp8266_receive_response_IT(); // Espera a "SEND OK"
 80023b4:	f7fe fe74 	bl	80010a0 <esp8266_receive_response_IT>
            mqttState = 6;
 80023b8:	4b25      	ldr	r3, [pc, #148]	@ (8002450 <mqtt_raspberry_process+0x1f4>)
 80023ba:	2206      	movs	r2, #6
 80023bc:	701a      	strb	r2, [r3, #0]
            stateTimeout = HAL_GetTick();
 80023be:	f000 feb3 	bl	8003128 <HAL_GetTick>
 80023c2:	4603      	mov	r3, r0
 80023c4:	4a26      	ldr	r2, [pc, #152]	@ (8002460 <mqtt_raspberry_process+0x204>)
 80023c6:	6013      	str	r3, [r2, #0]
            break;
 80023c8:	e03c      	b.n	8002444 <mqtt_raspberry_process+0x1e8>
        }
        case 6: {
            if (esp8266_is_response_ready()) {
 80023ca:	f7fe fea3 	bl	8001114 <esp8266_is_response_ready>
 80023ce:	4603      	mov	r3, r0
 80023d0:	2b00      	cmp	r3, #0
 80023d2:	d012      	beq.n	80023fa <mqtt_raspberry_process+0x19e>
                esp8266_clear_response_flag();
 80023d4:	f7fe feb4 	bl	8001140 <esp8266_clear_response_flag>
                // Da tiempo a que el broker procese el publish antes de cerrar
                HAL_Delay(150);
 80023d8:	2096      	movs	r0, #150	@ 0x96
 80023da:	f000 feb1 	bl	8003140 <HAL_Delay>
                esp8266_send_command("AT+CIPCLOSE\r\n");
 80023de:	481d      	ldr	r0, [pc, #116]	@ (8002454 <mqtt_raspberry_process+0x1f8>)
 80023e0:	f7fe fe82 	bl	80010e8 <esp8266_send_command>
                esp8266_wait_response_timeout(2000);
 80023e4:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80023e8:	f7fe feb6 	bl	8001158 <esp8266_wait_response_timeout>
                mqttEnabled = 0;
 80023ec:	4b17      	ldr	r3, [pc, #92]	@ (800244c <mqtt_raspberry_process+0x1f0>)
 80023ee:	2200      	movs	r2, #0
 80023f0:	701a      	strb	r2, [r3, #0]
                mqttState = 0;
 80023f2:	4b17      	ldr	r3, [pc, #92]	@ (8002450 <mqtt_raspberry_process+0x1f4>)
 80023f4:	2200      	movs	r2, #0
 80023f6:	701a      	strb	r2, [r3, #0]
                esp8266_send_command("AT+CIPCLOSE\r\n");
                esp8266_wait_response_timeout(2000);
                mqttEnabled = 0;
                mqttState = 0;
            }
            break;
 80023f8:	e023      	b.n	8002442 <mqtt_raspberry_process+0x1e6>
            } else if (HAL_GetTick() - stateTimeout > 2000) {
 80023fa:	f000 fe95 	bl	8003128 <HAL_GetTick>
 80023fe:	4602      	mov	r2, r0
 8002400:	4b17      	ldr	r3, [pc, #92]	@ (8002460 <mqtt_raspberry_process+0x204>)
 8002402:	681b      	ldr	r3, [r3, #0]
 8002404:	1ad3      	subs	r3, r2, r3
 8002406:	f5b3 6ffa 	cmp.w	r3, #2000	@ 0x7d0
 800240a:	d91a      	bls.n	8002442 <mqtt_raspberry_process+0x1e6>
                esp8266_send_command("AT+CIPCLOSE\r\n");
 800240c:	4811      	ldr	r0, [pc, #68]	@ (8002454 <mqtt_raspberry_process+0x1f8>)
 800240e:	f7fe fe6b 	bl	80010e8 <esp8266_send_command>
                esp8266_wait_response_timeout(2000);
 8002412:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8002416:	f7fe fe9f 	bl	8001158 <esp8266_wait_response_timeout>
                mqttEnabled = 0;
 800241a:	4b0c      	ldr	r3, [pc, #48]	@ (800244c <mqtt_raspberry_process+0x1f0>)
 800241c:	2200      	movs	r2, #0
 800241e:	701a      	strb	r2, [r3, #0]
                mqttState = 0;
 8002420:	4b0b      	ldr	r3, [pc, #44]	@ (8002450 <mqtt_raspberry_process+0x1f4>)
 8002422:	2200      	movs	r2, #0
 8002424:	701a      	strb	r2, [r3, #0]
            break;
 8002426:	e00c      	b.n	8002442 <mqtt_raspberry_process+0x1e6>
        }
        default:
            mqttState = 0;
 8002428:	4b09      	ldr	r3, [pc, #36]	@ (8002450 <mqtt_raspberry_process+0x1f4>)
 800242a:	2200      	movs	r2, #0
 800242c:	701a      	strb	r2, [r3, #0]
            mqttEnabled = 0;
 800242e:	4b07      	ldr	r3, [pc, #28]	@ (800244c <mqtt_raspberry_process+0x1f0>)
 8002430:	2200      	movs	r2, #0
 8002432:	701a      	strb	r2, [r3, #0]
            break;
 8002434:	e006      	b.n	8002444 <mqtt_raspberry_process+0x1e8>
    if (!mqttEnabled) return;
 8002436:	bf00      	nop
 8002438:	e004      	b.n	8002444 <mqtt_raspberry_process+0x1e8>
            break;
 800243a:	bf00      	nop
 800243c:	e002      	b.n	8002444 <mqtt_raspberry_process+0x1e8>
            break;
 800243e:	bf00      	nop
 8002440:	e000      	b.n	8002444 <mqtt_raspberry_process+0x1e8>
            break;
 8002442:	bf00      	nop
    }
}
 8002444:	3748      	adds	r7, #72	@ 0x48
 8002446:	46bd      	mov	sp, r7
 8002448:	bd80      	pop	{r7, pc}
 800244a:	bf00      	nop
 800244c:	200005a8 	.word	0x200005a8
 8002450:	200005a9 	.word	0x200005a9
 8002454:	0800b808 	.word	0x0800b808
 8002458:	0800b818 	.word	0x0800b818
 800245c:	0800b828 	.word	0x0800b828
 8002460:	200005b8 	.word	0x200005b8
 8002464:	0800b844 	.word	0x0800b844
 8002468:	0800b84c 	.word	0x0800b84c
 800246c:	0800b860 	.word	0x0800b860
 8002470:	0800b87c 	.word	0x0800b87c
 8002474:	0800b898 	.word	0x0800b898
 8002478:	0800b8a8 	.word	0x0800b8a8
 800247c:	0800b8bc 	.word	0x0800b8bc
 8002480:	0800b8d8 	.word	0x0800b8d8

08002484 <mqtt_raspberry_is_busy>:

uint8_t mqtt_raspberry_is_busy(void) {
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
    return mqttEnabled;
 8002488:	4b03      	ldr	r3, [pc, #12]	@ (8002498 <mqtt_raspberry_is_busy+0x14>)
 800248a:	781b      	ldrb	r3, [r3, #0]
 800248c:	b2db      	uxtb	r3, r3
}
 800248e:	4618      	mov	r0, r3
 8002490:	46bd      	mov	sp, r7
 8002492:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002496:	4770      	bx	lr
 8002498:	200005a8 	.word	0x200005a8

0800249c <Rele_On>:

#include "rele.h"

extern volatile bool releOn; // Declarar la variable global

void Rele_On(void) {
 800249c:	b580      	push	{r7, lr}
 800249e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RELE_GPIO_PORT, RELE_PIN, GPIO_PIN_SET);
 80024a0:	2201      	movs	r2, #1
 80024a2:	2120      	movs	r1, #32
 80024a4:	4803      	ldr	r0, [pc, #12]	@ (80024b4 <Rele_On+0x18>)
 80024a6:	f001 f997 	bl	80037d8 <HAL_GPIO_WritePin>
    releOn = true; // Actualizar el estado del relé
 80024aa:	4b03      	ldr	r3, [pc, #12]	@ (80024b8 <Rele_On+0x1c>)
 80024ac:	2201      	movs	r2, #1
 80024ae:	701a      	strb	r2, [r3, #0]
}
 80024b0:	bf00      	nop
 80024b2:	bd80      	pop	{r7, pc}
 80024b4:	40020400 	.word	0x40020400
 80024b8:	2000058c 	.word	0x2000058c

080024bc <Rele_Off>:

void Rele_Off(void) {
 80024bc:	b580      	push	{r7, lr}
 80024be:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RELE_GPIO_PORT, RELE_PIN, GPIO_PIN_RESET);
 80024c0:	2200      	movs	r2, #0
 80024c2:	2120      	movs	r1, #32
 80024c4:	4803      	ldr	r0, [pc, #12]	@ (80024d4 <Rele_Off+0x18>)
 80024c6:	f001 f987 	bl	80037d8 <HAL_GPIO_WritePin>
    releOn = false; // Actualizar el estado del relé
 80024ca:	4b03      	ldr	r3, [pc, #12]	@ (80024d8 <Rele_Off+0x1c>)
 80024cc:	2200      	movs	r2, #0
 80024ce:	701a      	strb	r2, [r3, #0]
}
 80024d0:	bf00      	nop
 80024d2:	bd80      	pop	{r7, pc}
 80024d4:	40020400 	.word	0x40020400
 80024d8:	2000058c 	.word	0x2000058c

080024dc <Control_Rele>:

void Control_Rele(float luminosity) {
 80024dc:	b580      	push	{r7, lr}
 80024de:	b082      	sub	sp, #8
 80024e0:	af00      	add	r7, sp, #0
 80024e2:	ed87 0a01 	vstr	s0, [r7, #4]
    if (luminosity > 5.5) {
 80024e6:	edd7 7a01 	vldr	s15, [r7, #4]
 80024ea:	eeb1 7a06 	vmov.f32	s14, #22	@ 0x40b00000  5.5
 80024ee:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f6:	dd02      	ble.n	80024fe <Control_Rele+0x22>
        Rele_On();
 80024f8:	f7ff ffd0 	bl	800249c <Rele_On>
    } else {
        Rele_Off();
    }
}
 80024fc:	e001      	b.n	8002502 <Control_Rele+0x26>
        Rele_Off();
 80024fe:	f7ff ffdd 	bl	80024bc <Rele_Off>
}
 8002502:	bf00      	nop
 8002504:	3708      	adds	r7, #8
 8002506:	46bd      	mov	sp, r7
 8002508:	bd80      	pop	{r7, pc}

0800250a <SHT85_Init>:
float totalTemperature = 0.0f;
uint8_t sampleCountTemp = 0;
float totalHumidity = 0.0f;
uint8_t sampleCountHum = 0;

void SHT85_Init() {
 800250a:	b580      	push	{r7, lr}
 800250c:	af00      	add	r7, sp, #0
    // No se requiere inicialización en modo single shot, pero puede hacerse un soft reset por seguridad
    ResetSHT85();
 800250e:	f000 f8f7 	bl	8002700 <ResetSHT85>
}
 8002512:	bf00      	nop
 8002514:	bd80      	pop	{r7, pc}

08002516 <SHT85_CalculateCRC>:

uint8_t SHT85_CalculateCRC(uint8_t* data, uint8_t len) {
 8002516:	b480      	push	{r7}
 8002518:	b085      	sub	sp, #20
 800251a:	af00      	add	r7, sp, #0
 800251c:	6078      	str	r0, [r7, #4]
 800251e:	460b      	mov	r3, r1
 8002520:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 8002522:	23ff      	movs	r3, #255	@ 0xff
 8002524:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++) {
 8002526:	2300      	movs	r3, #0
 8002528:	73bb      	strb	r3, [r7, #14]
 800252a:	e022      	b.n	8002572 <SHT85_CalculateCRC+0x5c>
        crc ^= data[i];
 800252c:	7bbb      	ldrb	r3, [r7, #14]
 800252e:	687a      	ldr	r2, [r7, #4]
 8002530:	4413      	add	r3, r2
 8002532:	781a      	ldrb	r2, [r3, #0]
 8002534:	7bfb      	ldrb	r3, [r7, #15]
 8002536:	4053      	eors	r3, r2
 8002538:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 800253a:	2300      	movs	r3, #0
 800253c:	737b      	strb	r3, [r7, #13]
 800253e:	e012      	b.n	8002566 <SHT85_CalculateCRC+0x50>
            if (crc & 0x80)
 8002540:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002544:	2b00      	cmp	r3, #0
 8002546:	da08      	bge.n	800255a <SHT85_CalculateCRC+0x44>
                crc = (crc << 1) ^ 0x31;
 8002548:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800254c:	005b      	lsls	r3, r3, #1
 800254e:	b25b      	sxtb	r3, r3
 8002550:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8002554:	b25b      	sxtb	r3, r3
 8002556:	73fb      	strb	r3, [r7, #15]
 8002558:	e002      	b.n	8002560 <SHT85_CalculateCRC+0x4a>
            else
                crc <<= 1;
 800255a:	7bfb      	ldrb	r3, [r7, #15]
 800255c:	005b      	lsls	r3, r3, #1
 800255e:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 8002560:	7b7b      	ldrb	r3, [r7, #13]
 8002562:	3301      	adds	r3, #1
 8002564:	737b      	strb	r3, [r7, #13]
 8002566:	7b7b      	ldrb	r3, [r7, #13]
 8002568:	2b07      	cmp	r3, #7
 800256a:	d9e9      	bls.n	8002540 <SHT85_CalculateCRC+0x2a>
    for (uint8_t i = 0; i < len; i++) {
 800256c:	7bbb      	ldrb	r3, [r7, #14]
 800256e:	3301      	adds	r3, #1
 8002570:	73bb      	strb	r3, [r7, #14]
 8002572:	7bba      	ldrb	r2, [r7, #14]
 8002574:	78fb      	ldrb	r3, [r7, #3]
 8002576:	429a      	cmp	r2, r3
 8002578:	d3d8      	bcc.n	800252c <SHT85_CalculateCRC+0x16>
        }
    }
    return crc;
 800257a:	7bfb      	ldrb	r3, [r7, #15]
}
 800257c:	4618      	mov	r0, r3
 800257e:	3714      	adds	r7, #20
 8002580:	46bd      	mov	sp, r7
 8002582:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002586:	4770      	bx	lr

08002588 <SHT85_ReadSingleShot>:

void SHT85_ReadSingleShot(float* temperature, float* humidity) {
 8002588:	b580      	push	{r7, lr}
 800258a:	b088      	sub	sp, #32
 800258c:	af02      	add	r7, sp, #8
 800258e:	6078      	str	r0, [r7, #4]
 8002590:	6039      	str	r1, [r7, #0]
    uint8_t cmd[2] = {0x24, 0x00};  // High repeatability, no clock stretching
 8002592:	2324      	movs	r3, #36	@ 0x24
 8002594:	82bb      	strh	r3, [r7, #20]
    uint8_t data[6];

    HAL_I2C_Master_Transmit(&hi2c1, SHT85_I2C_ADDR, cmd, 2, HAL_MAX_DELAY);
 8002596:	f107 0214 	add.w	r2, r7, #20
 800259a:	f04f 33ff 	mov.w	r3, #4294967295
 800259e:	9300      	str	r3, [sp, #0]
 80025a0:	2302      	movs	r3, #2
 80025a2:	2188      	movs	r1, #136	@ 0x88
 80025a4:	4834      	ldr	r0, [pc, #208]	@ (8002678 <SHT85_ReadSingleShot+0xf0>)
 80025a6:	f001 fa75 	bl	8003a94 <HAL_I2C_Master_Transmit>
    HAL_Delay(20);  // Tiempo típico de conversión (~15 ms para alta repetibilidad)
 80025aa:	2014      	movs	r0, #20
 80025ac:	f000 fdc8 	bl	8003140 <HAL_Delay>

    HAL_I2C_Master_Receive(&hi2c1, SHT85_I2C_ADDR, data, 6, HAL_MAX_DELAY);
 80025b0:	f107 020c 	add.w	r2, r7, #12
 80025b4:	f04f 33ff 	mov.w	r3, #4294967295
 80025b8:	9300      	str	r3, [sp, #0]
 80025ba:	2306      	movs	r3, #6
 80025bc:	2188      	movs	r1, #136	@ 0x88
 80025be:	482e      	ldr	r0, [pc, #184]	@ (8002678 <SHT85_ReadSingleShot+0xf0>)
 80025c0:	f001 fb66 	bl	8003c90 <HAL_I2C_Master_Receive>

    // Validar CRC
    if (SHT85_CalculateCRC(&data[0], 2) != data[2]) return;
 80025c4:	f107 030c 	add.w	r3, r7, #12
 80025c8:	2102      	movs	r1, #2
 80025ca:	4618      	mov	r0, r3
 80025cc:	f7ff ffa3 	bl	8002516 <SHT85_CalculateCRC>
 80025d0:	4603      	mov	r3, r0
 80025d2:	461a      	mov	r2, r3
 80025d4:	7bbb      	ldrb	r3, [r7, #14]
 80025d6:	429a      	cmp	r2, r3
 80025d8:	d148      	bne.n	800266c <SHT85_ReadSingleShot+0xe4>
    if (SHT85_CalculateCRC(&data[3], 2) != data[5]) return;
 80025da:	f107 030c 	add.w	r3, r7, #12
 80025de:	3303      	adds	r3, #3
 80025e0:	2102      	movs	r1, #2
 80025e2:	4618      	mov	r0, r3
 80025e4:	f7ff ff97 	bl	8002516 <SHT85_CalculateCRC>
 80025e8:	4603      	mov	r3, r0
 80025ea:	461a      	mov	r2, r3
 80025ec:	7c7b      	ldrb	r3, [r7, #17]
 80025ee:	429a      	cmp	r2, r3
 80025f0:	d13e      	bne.n	8002670 <SHT85_ReadSingleShot+0xe8>

    temp_raw = (data[0] << 8) | data[1];
 80025f2:	7b3b      	ldrb	r3, [r7, #12]
 80025f4:	b21b      	sxth	r3, r3
 80025f6:	021b      	lsls	r3, r3, #8
 80025f8:	b21a      	sxth	r2, r3
 80025fa:	7b7b      	ldrb	r3, [r7, #13]
 80025fc:	b21b      	sxth	r3, r3
 80025fe:	4313      	orrs	r3, r2
 8002600:	b21b      	sxth	r3, r3
 8002602:	b29a      	uxth	r2, r3
 8002604:	4b1d      	ldr	r3, [pc, #116]	@ (800267c <SHT85_ReadSingleShot+0xf4>)
 8002606:	801a      	strh	r2, [r3, #0]
    hum_raw  = (data[3] << 8) | data[4];
 8002608:	7bfb      	ldrb	r3, [r7, #15]
 800260a:	b21b      	sxth	r3, r3
 800260c:	021b      	lsls	r3, r3, #8
 800260e:	b21a      	sxth	r2, r3
 8002610:	7c3b      	ldrb	r3, [r7, #16]
 8002612:	b21b      	sxth	r3, r3
 8002614:	4313      	orrs	r3, r2
 8002616:	b21b      	sxth	r3, r3
 8002618:	b29a      	uxth	r2, r3
 800261a:	4b19      	ldr	r3, [pc, #100]	@ (8002680 <SHT85_ReadSingleShot+0xf8>)
 800261c:	801a      	strh	r2, [r3, #0]

    *temperature = -45 + 175 * (float)temp_raw / 65535.0f;
 800261e:	4b17      	ldr	r3, [pc, #92]	@ (800267c <SHT85_ReadSingleShot+0xf4>)
 8002620:	881b      	ldrh	r3, [r3, #0]
 8002622:	ee07 3a90 	vmov	s15, r3
 8002626:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800262a:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002684 <SHT85_ReadSingleShot+0xfc>
 800262e:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002632:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8002688 <SHT85_ReadSingleShot+0x100>
 8002636:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800263a:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800268c <SHT85_ReadSingleShot+0x104>
 800263e:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	edc3 7a00 	vstr	s15, [r3]
    *humidity    = 100 * (float)hum_raw / 65535.0f;
 8002648:	4b0d      	ldr	r3, [pc, #52]	@ (8002680 <SHT85_ReadSingleShot+0xf8>)
 800264a:	881b      	ldrh	r3, [r3, #0]
 800264c:	ee07 3a90 	vmov	s15, r3
 8002650:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002654:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002690 <SHT85_ReadSingleShot+0x108>
 8002658:	ee27 7a87 	vmul.f32	s14, s15, s14
 800265c:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8002688 <SHT85_ReadSingleShot+0x100>
 8002660:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002664:	683b      	ldr	r3, [r7, #0]
 8002666:	edc3 7a00 	vstr	s15, [r3]
 800266a:	e002      	b.n	8002672 <SHT85_ReadSingleShot+0xea>
    if (SHT85_CalculateCRC(&data[0], 2) != data[2]) return;
 800266c:	bf00      	nop
 800266e:	e000      	b.n	8002672 <SHT85_ReadSingleShot+0xea>
    if (SHT85_CalculateCRC(&data[3], 2) != data[5]) return;
 8002670:	bf00      	nop
}
 8002672:	3718      	adds	r7, #24
 8002674:	46bd      	mov	sp, r7
 8002676:	bd80      	pop	{r7, pc}
 8002678:	20000414 	.word	0x20000414
 800267c:	200005bc 	.word	0x200005bc
 8002680:	200005be 	.word	0x200005be
 8002684:	432f0000 	.word	0x432f0000
 8002688:	477fff00 	.word	0x477fff00
 800268c:	42340000 	.word	0x42340000
 8002690:	42c80000 	.word	0x42c80000

08002694 <SHT85_ErrorReset>:

void SHT85_ErrorReset(float* temperature, float* humidity) {
 8002694:	b580      	push	{r7, lr}
 8002696:	b082      	sub	sp, #8
 8002698:	af00      	add	r7, sp, #0
 800269a:	6078      	str	r0, [r7, #4]
 800269c:	6039      	str	r1, [r7, #0]
    static uint8_t out_of_range_count = 0;

    if (*temperature <= -44.0f || *humidity <= 1) {
 800269e:	687b      	ldr	r3, [r7, #4]
 80026a0:	edd3 7a00 	vldr	s15, [r3]
 80026a4:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 80026f8 <SHT85_ErrorReset+0x64>
 80026a8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026ac:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026b0:	d909      	bls.n	80026c6 <SHT85_ErrorReset+0x32>
 80026b2:	683b      	ldr	r3, [r7, #0]
 80026b4:	edd3 7a00 	vldr	s15, [r3]
 80026b8:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 80026bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c4:	d810      	bhi.n	80026e8 <SHT85_ErrorReset+0x54>
        if (out_of_range_count > 5) {
 80026c6:	4b0d      	ldr	r3, [pc, #52]	@ (80026fc <SHT85_ErrorReset+0x68>)
 80026c8:	781b      	ldrb	r3, [r3, #0]
 80026ca:	2b05      	cmp	r3, #5
 80026cc:	d905      	bls.n	80026da <SHT85_ErrorReset+0x46>
            ResetSHT85();
 80026ce:	f000 f817 	bl	8002700 <ResetSHT85>
            out_of_range_count = 0;
 80026d2:	4b0a      	ldr	r3, [pc, #40]	@ (80026fc <SHT85_ErrorReset+0x68>)
 80026d4:	2200      	movs	r2, #0
 80026d6:	701a      	strb	r2, [r3, #0]
        if (out_of_range_count > 5) {
 80026d8:	e00a      	b.n	80026f0 <SHT85_ErrorReset+0x5c>
        } else {
            out_of_range_count++;
 80026da:	4b08      	ldr	r3, [pc, #32]	@ (80026fc <SHT85_ErrorReset+0x68>)
 80026dc:	781b      	ldrb	r3, [r3, #0]
 80026de:	3301      	adds	r3, #1
 80026e0:	b2da      	uxtb	r2, r3
 80026e2:	4b06      	ldr	r3, [pc, #24]	@ (80026fc <SHT85_ErrorReset+0x68>)
 80026e4:	701a      	strb	r2, [r3, #0]
        if (out_of_range_count > 5) {
 80026e6:	e003      	b.n	80026f0 <SHT85_ErrorReset+0x5c>
        }
    } else {
        out_of_range_count = 0;
 80026e8:	4b04      	ldr	r3, [pc, #16]	@ (80026fc <SHT85_ErrorReset+0x68>)
 80026ea:	2200      	movs	r2, #0
 80026ec:	701a      	strb	r2, [r3, #0]
    }
}
 80026ee:	bf00      	nop
 80026f0:	bf00      	nop
 80026f2:	3708      	adds	r7, #8
 80026f4:	46bd      	mov	sp, r7
 80026f6:	bd80      	pop	{r7, pc}
 80026f8:	c2300000 	.word	0xc2300000
 80026fc:	200005c0 	.word	0x200005c0

08002700 <ResetSHT85>:

void ResetSHT85() {
 8002700:	b580      	push	{r7, lr}
 8002702:	b084      	sub	sp, #16
 8002704:	af02      	add	r7, sp, #8
    uint8_t reset_command[2] = {0x30, 0xA2};
 8002706:	f24a 2330 	movw	r3, #41520	@ 0xa230
 800270a:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&hi2c1, SHT85_I2C_ADDR, reset_command, 2, HAL_MAX_DELAY);
 800270c:	1d3a      	adds	r2, r7, #4
 800270e:	f04f 33ff 	mov.w	r3, #4294967295
 8002712:	9300      	str	r3, [sp, #0]
 8002714:	2302      	movs	r3, #2
 8002716:	2188      	movs	r1, #136	@ 0x88
 8002718:	4804      	ldr	r0, [pc, #16]	@ (800272c <ResetSHT85+0x2c>)
 800271a:	f001 f9bb 	bl	8003a94 <HAL_I2C_Master_Transmit>
    HAL_Delay(50);
 800271e:	2032      	movs	r0, #50	@ 0x32
 8002720:	f000 fd0e 	bl	8003140 <HAL_Delay>
}
 8002724:	bf00      	nop
 8002726:	3708      	adds	r7, #8
 8002728:	46bd      	mov	sp, r7
 800272a:	bd80      	pop	{r7, pc}
 800272c:	20000414 	.word	0x20000414

08002730 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002730:	b580      	push	{r7, lr}
 8002732:	b082      	sub	sp, #8
 8002734:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002736:	2300      	movs	r3, #0
 8002738:	607b      	str	r3, [r7, #4]
 800273a:	4b10      	ldr	r3, [pc, #64]	@ (800277c <HAL_MspInit+0x4c>)
 800273c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800273e:	4a0f      	ldr	r2, [pc, #60]	@ (800277c <HAL_MspInit+0x4c>)
 8002740:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002744:	6453      	str	r3, [r2, #68]	@ 0x44
 8002746:	4b0d      	ldr	r3, [pc, #52]	@ (800277c <HAL_MspInit+0x4c>)
 8002748:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800274a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800274e:	607b      	str	r3, [r7, #4]
 8002750:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002752:	2300      	movs	r3, #0
 8002754:	603b      	str	r3, [r7, #0]
 8002756:	4b09      	ldr	r3, [pc, #36]	@ (800277c <HAL_MspInit+0x4c>)
 8002758:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800275a:	4a08      	ldr	r2, [pc, #32]	@ (800277c <HAL_MspInit+0x4c>)
 800275c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8002760:	6413      	str	r3, [r2, #64]	@ 0x40
 8002762:	4b06      	ldr	r3, [pc, #24]	@ (800277c <HAL_MspInit+0x4c>)
 8002764:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002766:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 800276a:	603b      	str	r3, [r7, #0]
 800276c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800276e:	2007      	movs	r0, #7
 8002770:	f000 fdda 	bl	8003328 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002774:	bf00      	nop
 8002776:	3708      	adds	r7, #8
 8002778:	46bd      	mov	sp, r7
 800277a:	bd80      	pop	{r7, pc}
 800277c:	40023800 	.word	0x40023800

08002780 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002780:	b580      	push	{r7, lr}
 8002782:	b08c      	sub	sp, #48	@ 0x30
 8002784:	af00      	add	r7, sp, #0
 8002786:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002788:	f107 031c 	add.w	r3, r7, #28
 800278c:	2200      	movs	r2, #0
 800278e:	601a      	str	r2, [r3, #0]
 8002790:	605a      	str	r2, [r3, #4]
 8002792:	609a      	str	r2, [r3, #8]
 8002794:	60da      	str	r2, [r3, #12]
 8002796:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	4a3a      	ldr	r2, [pc, #232]	@ (8002888 <HAL_I2C_MspInit+0x108>)
 800279e:	4293      	cmp	r3, r2
 80027a0:	d12c      	bne.n	80027fc <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80027a2:	2300      	movs	r3, #0
 80027a4:	61bb      	str	r3, [r7, #24]
 80027a6:	4b39      	ldr	r3, [pc, #228]	@ (800288c <HAL_I2C_MspInit+0x10c>)
 80027a8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027aa:	4a38      	ldr	r2, [pc, #224]	@ (800288c <HAL_I2C_MspInit+0x10c>)
 80027ac:	f043 0302 	orr.w	r3, r3, #2
 80027b0:	6313      	str	r3, [r2, #48]	@ 0x30
 80027b2:	4b36      	ldr	r3, [pc, #216]	@ (800288c <HAL_I2C_MspInit+0x10c>)
 80027b4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027b6:	f003 0302 	and.w	r3, r3, #2
 80027ba:	61bb      	str	r3, [r7, #24]
 80027bc:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80027be:	23c0      	movs	r3, #192	@ 0xc0
 80027c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80027c2:	2312      	movs	r3, #18
 80027c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027c6:	2300      	movs	r3, #0
 80027c8:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80027ca:	2303      	movs	r3, #3
 80027cc:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80027ce:	2304      	movs	r3, #4
 80027d0:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80027d2:	f107 031c 	add.w	r3, r7, #28
 80027d6:	4619      	mov	r1, r3
 80027d8:	482d      	ldr	r0, [pc, #180]	@ (8002890 <HAL_I2C_MspInit+0x110>)
 80027da:	f000 fe79 	bl	80034d0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80027de:	2300      	movs	r3, #0
 80027e0:	617b      	str	r3, [r7, #20]
 80027e2:	4b2a      	ldr	r3, [pc, #168]	@ (800288c <HAL_I2C_MspInit+0x10c>)
 80027e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027e6:	4a29      	ldr	r2, [pc, #164]	@ (800288c <HAL_I2C_MspInit+0x10c>)
 80027e8:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 80027ec:	6413      	str	r3, [r2, #64]	@ 0x40
 80027ee:	4b27      	ldr	r3, [pc, #156]	@ (800288c <HAL_I2C_MspInit+0x10c>)
 80027f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80027f2:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 80027f6:	617b      	str	r3, [r7, #20]
 80027f8:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 80027fa:	e041      	b.n	8002880 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a24      	ldr	r2, [pc, #144]	@ (8002894 <HAL_I2C_MspInit+0x114>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d13c      	bne.n	8002880 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	4b20      	ldr	r3, [pc, #128]	@ (800288c <HAL_I2C_MspInit+0x10c>)
 800280c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800280e:	4a1f      	ldr	r2, [pc, #124]	@ (800288c <HAL_I2C_MspInit+0x10c>)
 8002810:	f043 0302 	orr.w	r3, r3, #2
 8002814:	6313      	str	r3, [r2, #48]	@ 0x30
 8002816:	4b1d      	ldr	r3, [pc, #116]	@ (800288c <HAL_I2C_MspInit+0x10c>)
 8002818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800281a:	f003 0302 	and.w	r3, r3, #2
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8002822:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8002826:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002828:	2312      	movs	r3, #18
 800282a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800282c:	2301      	movs	r3, #1
 800282e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002830:	2303      	movs	r3, #3
 8002832:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8002834:	2304      	movs	r3, #4
 8002836:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002838:	f107 031c 	add.w	r3, r7, #28
 800283c:	4619      	mov	r1, r3
 800283e:	4814      	ldr	r0, [pc, #80]	@ (8002890 <HAL_I2C_MspInit+0x110>)
 8002840:	f000 fe46 	bl	80034d0 <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8002844:	2308      	movs	r3, #8
 8002846:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002848:	2312      	movs	r3, #18
 800284a:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800284c:	2301      	movs	r3, #1
 800284e:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002850:	2303      	movs	r3, #3
 8002852:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8002854:	2309      	movs	r3, #9
 8002856:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002858:	f107 031c 	add.w	r3, r7, #28
 800285c:	4619      	mov	r1, r3
 800285e:	480c      	ldr	r0, [pc, #48]	@ (8002890 <HAL_I2C_MspInit+0x110>)
 8002860:	f000 fe36 	bl	80034d0 <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8002864:	2300      	movs	r3, #0
 8002866:	60fb      	str	r3, [r7, #12]
 8002868:	4b08      	ldr	r3, [pc, #32]	@ (800288c <HAL_I2C_MspInit+0x10c>)
 800286a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800286c:	4a07      	ldr	r2, [pc, #28]	@ (800288c <HAL_I2C_MspInit+0x10c>)
 800286e:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8002872:	6413      	str	r3, [r2, #64]	@ 0x40
 8002874:	4b05      	ldr	r3, [pc, #20]	@ (800288c <HAL_I2C_MspInit+0x10c>)
 8002876:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002878:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	68fb      	ldr	r3, [r7, #12]
}
 8002880:	bf00      	nop
 8002882:	3730      	adds	r7, #48	@ 0x30
 8002884:	46bd      	mov	sp, r7
 8002886:	bd80      	pop	{r7, pc}
 8002888:	40005400 	.word	0x40005400
 800288c:	40023800 	.word	0x40023800
 8002890:	40020400 	.word	0x40020400
 8002894:	40005800 	.word	0x40005800

08002898 <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 8002898:	b580      	push	{r7, lr}
 800289a:	b08a      	sub	sp, #40	@ 0x28
 800289c:	af00      	add	r7, sp, #0
 800289e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028a0:	f107 0314 	add.w	r3, r7, #20
 80028a4:	2200      	movs	r2, #0
 80028a6:	601a      	str	r2, [r3, #0]
 80028a8:	605a      	str	r2, [r3, #4]
 80028aa:	609a      	str	r2, [r3, #8]
 80028ac:	60da      	str	r2, [r3, #12]
 80028ae:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 80028b0:	687b      	ldr	r3, [r7, #4]
 80028b2:	681b      	ldr	r3, [r3, #0]
 80028b4:	4a19      	ldr	r2, [pc, #100]	@ (800291c <HAL_SPI_MspInit+0x84>)
 80028b6:	4293      	cmp	r3, r2
 80028b8:	d12b      	bne.n	8002912 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 80028ba:	2300      	movs	r3, #0
 80028bc:	613b      	str	r3, [r7, #16]
 80028be:	4b18      	ldr	r3, [pc, #96]	@ (8002920 <HAL_SPI_MspInit+0x88>)
 80028c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028c2:	4a17      	ldr	r2, [pc, #92]	@ (8002920 <HAL_SPI_MspInit+0x88>)
 80028c4:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 80028c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80028ca:	4b15      	ldr	r3, [pc, #84]	@ (8002920 <HAL_SPI_MspInit+0x88>)
 80028cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80028ce:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 80028d2:	613b      	str	r3, [r7, #16]
 80028d4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80028d6:	2300      	movs	r3, #0
 80028d8:	60fb      	str	r3, [r7, #12]
 80028da:	4b11      	ldr	r3, [pc, #68]	@ (8002920 <HAL_SPI_MspInit+0x88>)
 80028dc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028de:	4a10      	ldr	r2, [pc, #64]	@ (8002920 <HAL_SPI_MspInit+0x88>)
 80028e0:	f043 0301 	orr.w	r3, r3, #1
 80028e4:	6313      	str	r3, [r2, #48]	@ 0x30
 80028e6:	4b0e      	ldr	r3, [pc, #56]	@ (8002920 <HAL_SPI_MspInit+0x88>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80028ea:	f003 0301 	and.w	r3, r3, #1
 80028ee:	60fb      	str	r3, [r7, #12]
 80028f0:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 80028f2:	23e0      	movs	r3, #224	@ 0xe0
 80028f4:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80028f6:	2302      	movs	r3, #2
 80028f8:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80028fa:	2300      	movs	r3, #0
 80028fc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80028fe:	2303      	movs	r3, #3
 8002900:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002902:	2305      	movs	r3, #5
 8002904:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002906:	f107 0314 	add.w	r3, r7, #20
 800290a:	4619      	mov	r1, r3
 800290c:	4805      	ldr	r0, [pc, #20]	@ (8002924 <HAL_SPI_MspInit+0x8c>)
 800290e:	f000 fddf 	bl	80034d0 <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002912:	bf00      	nop
 8002914:	3728      	adds	r7, #40	@ 0x28
 8002916:	46bd      	mov	sp, r7
 8002918:	bd80      	pop	{r7, pc}
 800291a:	bf00      	nop
 800291c:	40013000 	.word	0x40013000
 8002920:	40023800 	.word	0x40023800
 8002924:	40020000 	.word	0x40020000

08002928 <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002928:	b580      	push	{r7, lr}
 800292a:	b08a      	sub	sp, #40	@ 0x28
 800292c:	af00      	add	r7, sp, #0
 800292e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002930:	f107 0314 	add.w	r3, r7, #20
 8002934:	2200      	movs	r2, #0
 8002936:	601a      	str	r2, [r3, #0]
 8002938:	605a      	str	r2, [r3, #4]
 800293a:	609a      	str	r2, [r3, #8]
 800293c:	60da      	str	r2, [r3, #12]
 800293e:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002940:	687b      	ldr	r3, [r7, #4]
 8002942:	681b      	ldr	r3, [r3, #0]
 8002944:	4a1d      	ldr	r2, [pc, #116]	@ (80029bc <HAL_UART_MspInit+0x94>)
 8002946:	4293      	cmp	r3, r2
 8002948:	d133      	bne.n	80029b2 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 800294a:	2300      	movs	r3, #0
 800294c:	613b      	str	r3, [r7, #16]
 800294e:	4b1c      	ldr	r3, [pc, #112]	@ (80029c0 <HAL_UART_MspInit+0x98>)
 8002950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002952:	4a1b      	ldr	r2, [pc, #108]	@ (80029c0 <HAL_UART_MspInit+0x98>)
 8002954:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002958:	6413      	str	r3, [r2, #64]	@ 0x40
 800295a:	4b19      	ldr	r3, [pc, #100]	@ (80029c0 <HAL_UART_MspInit+0x98>)
 800295c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800295e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002962:	613b      	str	r3, [r7, #16]
 8002964:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002966:	2300      	movs	r3, #0
 8002968:	60fb      	str	r3, [r7, #12]
 800296a:	4b15      	ldr	r3, [pc, #84]	@ (80029c0 <HAL_UART_MspInit+0x98>)
 800296c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800296e:	4a14      	ldr	r2, [pc, #80]	@ (80029c0 <HAL_UART_MspInit+0x98>)
 8002970:	f043 0301 	orr.w	r3, r3, #1
 8002974:	6313      	str	r3, [r2, #48]	@ 0x30
 8002976:	4b12      	ldr	r3, [pc, #72]	@ (80029c0 <HAL_UART_MspInit+0x98>)
 8002978:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800297a:	f003 0301 	and.w	r3, r3, #1
 800297e:	60fb      	str	r3, [r7, #12]
 8002980:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 8002982:	230c      	movs	r3, #12
 8002984:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002986:	2302      	movs	r3, #2
 8002988:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800298a:	2300      	movs	r3, #0
 800298c:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800298e:	2303      	movs	r3, #3
 8002990:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002992:	2307      	movs	r3, #7
 8002994:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002996:	f107 0314 	add.w	r3, r7, #20
 800299a:	4619      	mov	r1, r3
 800299c:	4809      	ldr	r0, [pc, #36]	@ (80029c4 <HAL_UART_MspInit+0x9c>)
 800299e:	f000 fd97 	bl	80034d0 <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80029a2:	2200      	movs	r2, #0
 80029a4:	2100      	movs	r1, #0
 80029a6:	2026      	movs	r0, #38	@ 0x26
 80029a8:	f000 fcc9 	bl	800333e <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80029ac:	2026      	movs	r0, #38	@ 0x26
 80029ae:	f000 fce2 	bl	8003376 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 80029b2:	bf00      	nop
 80029b4:	3728      	adds	r7, #40	@ 0x28
 80029b6:	46bd      	mov	sp, r7
 80029b8:	bd80      	pop	{r7, pc}
 80029ba:	bf00      	nop
 80029bc:	40004400 	.word	0x40004400
 80029c0:	40023800 	.word	0x40023800
 80029c4:	40020000 	.word	0x40020000

080029c8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80029c8:	b480      	push	{r7}
 80029ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 80029cc:	bf00      	nop
 80029ce:	e7fd      	b.n	80029cc <NMI_Handler+0x4>

080029d0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80029d0:	b480      	push	{r7}
 80029d2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80029d4:	bf00      	nop
 80029d6:	e7fd      	b.n	80029d4 <HardFault_Handler+0x4>

080029d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80029d8:	b480      	push	{r7}
 80029da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80029dc:	bf00      	nop
 80029de:	e7fd      	b.n	80029dc <MemManage_Handler+0x4>

080029e0 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80029e0:	b480      	push	{r7}
 80029e2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80029e4:	bf00      	nop
 80029e6:	e7fd      	b.n	80029e4 <BusFault_Handler+0x4>

080029e8 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80029e8:	b480      	push	{r7}
 80029ea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80029ec:	bf00      	nop
 80029ee:	e7fd      	b.n	80029ec <UsageFault_Handler+0x4>

080029f0 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80029f0:	b480      	push	{r7}
 80029f2:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80029f4:	bf00      	nop
 80029f6:	46bd      	mov	sp, r7
 80029f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029fc:	4770      	bx	lr

080029fe <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80029fe:	b480      	push	{r7}
 8002a00:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a02:	bf00      	nop
 8002a04:	46bd      	mov	sp, r7
 8002a06:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a0a:	4770      	bx	lr

08002a0c <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a0c:	b480      	push	{r7}
 8002a0e:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a10:	bf00      	nop
 8002a12:	46bd      	mov	sp, r7
 8002a14:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a18:	4770      	bx	lr

08002a1a <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002a1a:	b580      	push	{r7, lr}
 8002a1c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002a1e:	f000 fb6f 	bl	8003100 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002a22:	bf00      	nop
 8002a24:	bd80      	pop	{r7, pc}
	...

08002a28 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002a28:	b580      	push	{r7, lr}
 8002a2a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002a2c:	4802      	ldr	r0, [pc, #8]	@ (8002a38 <USART2_IRQHandler+0x10>)
 8002a2e:	f003 fa49 	bl	8005ec4 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002a32:	bf00      	nop
 8002a34:	bd80      	pop	{r7, pc}
 8002a36:	bf00      	nop
 8002a38:	20000514 	.word	0x20000514

08002a3c <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002a3c:	b480      	push	{r7}
 8002a3e:	af00      	add	r7, sp, #0
  return 1;
 8002a40:	2301      	movs	r3, #1
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	46bd      	mov	sp, r7
 8002a46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4a:	4770      	bx	lr

08002a4c <_kill>:

int _kill(int pid, int sig)
{
 8002a4c:	b580      	push	{r7, lr}
 8002a4e:	b082      	sub	sp, #8
 8002a50:	af00      	add	r7, sp, #0
 8002a52:	6078      	str	r0, [r7, #4]
 8002a54:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 8002a56:	f005 fb65 	bl	8008124 <__errno>
 8002a5a:	4603      	mov	r3, r0
 8002a5c:	2216      	movs	r2, #22
 8002a5e:	601a      	str	r2, [r3, #0]
  return -1;
 8002a60:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002a64:	4618      	mov	r0, r3
 8002a66:	3708      	adds	r7, #8
 8002a68:	46bd      	mov	sp, r7
 8002a6a:	bd80      	pop	{r7, pc}

08002a6c <_exit>:

void _exit (int status)
{
 8002a6c:	b580      	push	{r7, lr}
 8002a6e:	b082      	sub	sp, #8
 8002a70:	af00      	add	r7, sp, #0
 8002a72:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 8002a74:	f04f 31ff 	mov.w	r1, #4294967295
 8002a78:	6878      	ldr	r0, [r7, #4]
 8002a7a:	f7ff ffe7 	bl	8002a4c <_kill>
  while (1) {}    /* Make sure we hang here */
 8002a7e:	bf00      	nop
 8002a80:	e7fd      	b.n	8002a7e <_exit+0x12>

08002a82 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 8002a82:	b580      	push	{r7, lr}
 8002a84:	b086      	sub	sp, #24
 8002a86:	af00      	add	r7, sp, #0
 8002a88:	60f8      	str	r0, [r7, #12]
 8002a8a:	60b9      	str	r1, [r7, #8]
 8002a8c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002a8e:	2300      	movs	r3, #0
 8002a90:	617b      	str	r3, [r7, #20]
 8002a92:	e00a      	b.n	8002aaa <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002a94:	f3af 8000 	nop.w
 8002a98:	4601      	mov	r1, r0
 8002a9a:	68bb      	ldr	r3, [r7, #8]
 8002a9c:	1c5a      	adds	r2, r3, #1
 8002a9e:	60ba      	str	r2, [r7, #8]
 8002aa0:	b2ca      	uxtb	r2, r1
 8002aa2:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002aa4:	697b      	ldr	r3, [r7, #20]
 8002aa6:	3301      	adds	r3, #1
 8002aa8:	617b      	str	r3, [r7, #20]
 8002aaa:	697a      	ldr	r2, [r7, #20]
 8002aac:	687b      	ldr	r3, [r7, #4]
 8002aae:	429a      	cmp	r2, r3
 8002ab0:	dbf0      	blt.n	8002a94 <_read+0x12>
  }

  return len;
 8002ab2:	687b      	ldr	r3, [r7, #4]
}
 8002ab4:	4618      	mov	r0, r3
 8002ab6:	3718      	adds	r7, #24
 8002ab8:	46bd      	mov	sp, r7
 8002aba:	bd80      	pop	{r7, pc}

08002abc <_close>:
  }
  return len;
}

int _close(int file)
{
 8002abc:	b480      	push	{r7}
 8002abe:	b083      	sub	sp, #12
 8002ac0:	af00      	add	r7, sp, #0
 8002ac2:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002ac4:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002ac8:	4618      	mov	r0, r3
 8002aca:	370c      	adds	r7, #12
 8002acc:	46bd      	mov	sp, r7
 8002ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ad2:	4770      	bx	lr

08002ad4 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002ad4:	b480      	push	{r7}
 8002ad6:	b083      	sub	sp, #12
 8002ad8:	af00      	add	r7, sp, #0
 8002ada:	6078      	str	r0, [r7, #4]
 8002adc:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002ae4:	605a      	str	r2, [r3, #4]
  return 0;
 8002ae6:	2300      	movs	r3, #0
}
 8002ae8:	4618      	mov	r0, r3
 8002aea:	370c      	adds	r7, #12
 8002aec:	46bd      	mov	sp, r7
 8002aee:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002af2:	4770      	bx	lr

08002af4 <_isatty>:

int _isatty(int file)
{
 8002af4:	b480      	push	{r7}
 8002af6:	b083      	sub	sp, #12
 8002af8:	af00      	add	r7, sp, #0
 8002afa:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002afc:	2301      	movs	r3, #1
}
 8002afe:	4618      	mov	r0, r3
 8002b00:	370c      	adds	r7, #12
 8002b02:	46bd      	mov	sp, r7
 8002b04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b08:	4770      	bx	lr

08002b0a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8002b0a:	b480      	push	{r7}
 8002b0c:	b085      	sub	sp, #20
 8002b0e:	af00      	add	r7, sp, #0
 8002b10:	60f8      	str	r0, [r7, #12]
 8002b12:	60b9      	str	r1, [r7, #8]
 8002b14:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8002b16:	2300      	movs	r3, #0
}
 8002b18:	4618      	mov	r0, r3
 8002b1a:	3714      	adds	r7, #20
 8002b1c:	46bd      	mov	sp, r7
 8002b1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b22:	4770      	bx	lr

08002b24 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002b24:	b580      	push	{r7, lr}
 8002b26:	b086      	sub	sp, #24
 8002b28:	af00      	add	r7, sp, #0
 8002b2a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002b2c:	4a14      	ldr	r2, [pc, #80]	@ (8002b80 <_sbrk+0x5c>)
 8002b2e:	4b15      	ldr	r3, [pc, #84]	@ (8002b84 <_sbrk+0x60>)
 8002b30:	1ad3      	subs	r3, r2, r3
 8002b32:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002b34:	697b      	ldr	r3, [r7, #20]
 8002b36:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002b38:	4b13      	ldr	r3, [pc, #76]	@ (8002b88 <_sbrk+0x64>)
 8002b3a:	681b      	ldr	r3, [r3, #0]
 8002b3c:	2b00      	cmp	r3, #0
 8002b3e:	d102      	bne.n	8002b46 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002b40:	4b11      	ldr	r3, [pc, #68]	@ (8002b88 <_sbrk+0x64>)
 8002b42:	4a12      	ldr	r2, [pc, #72]	@ (8002b8c <_sbrk+0x68>)
 8002b44:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002b46:	4b10      	ldr	r3, [pc, #64]	@ (8002b88 <_sbrk+0x64>)
 8002b48:	681a      	ldr	r2, [r3, #0]
 8002b4a:	687b      	ldr	r3, [r7, #4]
 8002b4c:	4413      	add	r3, r2
 8002b4e:	693a      	ldr	r2, [r7, #16]
 8002b50:	429a      	cmp	r2, r3
 8002b52:	d207      	bcs.n	8002b64 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002b54:	f005 fae6 	bl	8008124 <__errno>
 8002b58:	4603      	mov	r3, r0
 8002b5a:	220c      	movs	r2, #12
 8002b5c:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002b5e:	f04f 33ff 	mov.w	r3, #4294967295
 8002b62:	e009      	b.n	8002b78 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002b64:	4b08      	ldr	r3, [pc, #32]	@ (8002b88 <_sbrk+0x64>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002b6a:	4b07      	ldr	r3, [pc, #28]	@ (8002b88 <_sbrk+0x64>)
 8002b6c:	681a      	ldr	r2, [r3, #0]
 8002b6e:	687b      	ldr	r3, [r7, #4]
 8002b70:	4413      	add	r3, r2
 8002b72:	4a05      	ldr	r2, [pc, #20]	@ (8002b88 <_sbrk+0x64>)
 8002b74:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002b76:	68fb      	ldr	r3, [r7, #12]
}
 8002b78:	4618      	mov	r0, r3
 8002b7a:	3718      	adds	r7, #24
 8002b7c:	46bd      	mov	sp, r7
 8002b7e:	bd80      	pop	{r7, pc}
 8002b80:	20020000 	.word	0x20020000
 8002b84:	00000400 	.word	0x00000400
 8002b88:	200005c4 	.word	0x200005c4
 8002b8c:	20000948 	.word	0x20000948

08002b90 <__NVIC_SetPriority>:
{
 8002b90:	b480      	push	{r7}
 8002b92:	b083      	sub	sp, #12
 8002b94:	af00      	add	r7, sp, #0
 8002b96:	4603      	mov	r3, r0
 8002b98:	6039      	str	r1, [r7, #0]
 8002b9a:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b9c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ba0:	2b00      	cmp	r3, #0
 8002ba2:	db0a      	blt.n	8002bba <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ba4:	683b      	ldr	r3, [r7, #0]
 8002ba6:	b2da      	uxtb	r2, r3
 8002ba8:	490c      	ldr	r1, [pc, #48]	@ (8002bdc <__NVIC_SetPriority+0x4c>)
 8002baa:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002bae:	0112      	lsls	r2, r2, #4
 8002bb0:	b2d2      	uxtb	r2, r2
 8002bb2:	440b      	add	r3, r1
 8002bb4:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8002bb8:	e00a      	b.n	8002bd0 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002bba:	683b      	ldr	r3, [r7, #0]
 8002bbc:	b2da      	uxtb	r2, r3
 8002bbe:	4908      	ldr	r1, [pc, #32]	@ (8002be0 <__NVIC_SetPriority+0x50>)
 8002bc0:	79fb      	ldrb	r3, [r7, #7]
 8002bc2:	f003 030f 	and.w	r3, r3, #15
 8002bc6:	3b04      	subs	r3, #4
 8002bc8:	0112      	lsls	r2, r2, #4
 8002bca:	b2d2      	uxtb	r2, r2
 8002bcc:	440b      	add	r3, r1
 8002bce:	761a      	strb	r2, [r3, #24]
}
 8002bd0:	bf00      	nop
 8002bd2:	370c      	adds	r7, #12
 8002bd4:	46bd      	mov	sp, r7
 8002bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002bda:	4770      	bx	lr
 8002bdc:	e000e100 	.word	0xe000e100
 8002be0:	e000ed00 	.word	0xe000ed00

08002be4 <SysTick_Config>:
{
 8002be4:	b580      	push	{r7, lr}
 8002be6:	b082      	sub	sp, #8
 8002be8:	af00      	add	r7, sp, #0
 8002bea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002bec:	687b      	ldr	r3, [r7, #4]
 8002bee:	3b01      	subs	r3, #1
 8002bf0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002bf4:	d301      	bcc.n	8002bfa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002bf6:	2301      	movs	r3, #1
 8002bf8:	e00f      	b.n	8002c1a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002bfa:	4a0a      	ldr	r2, [pc, #40]	@ (8002c24 <SysTick_Config+0x40>)
 8002bfc:	687b      	ldr	r3, [r7, #4]
 8002bfe:	3b01      	subs	r3, #1
 8002c00:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c02:	210f      	movs	r1, #15
 8002c04:	f04f 30ff 	mov.w	r0, #4294967295
 8002c08:	f7ff ffc2 	bl	8002b90 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c0c:	4b05      	ldr	r3, [pc, #20]	@ (8002c24 <SysTick_Config+0x40>)
 8002c0e:	2200      	movs	r2, #0
 8002c10:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c12:	4b04      	ldr	r3, [pc, #16]	@ (8002c24 <SysTick_Config+0x40>)
 8002c14:	2207      	movs	r2, #7
 8002c16:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002c18:	2300      	movs	r3, #0
}
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	3708      	adds	r7, #8
 8002c1e:	46bd      	mov	sp, r7
 8002c20:	bd80      	pop	{r7, pc}
 8002c22:	bf00      	nop
 8002c24:	e000e010 	.word	0xe000e010

08002c28 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002c28:	b580      	push	{r7, lr}
 8002c2a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002c2c:	4b09      	ldr	r3, [pc, #36]	@ (8002c54 <SystemInit+0x2c>)
 8002c2e:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8002c32:	4a08      	ldr	r2, [pc, #32]	@ (8002c54 <SystemInit+0x2c>)
 8002c34:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8002c38:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  // Agregado manualmente
  SysTick_Config(SystemCoreClock / 1000);
 8002c3c:	4b06      	ldr	r3, [pc, #24]	@ (8002c58 <SystemInit+0x30>)
 8002c3e:	681b      	ldr	r3, [r3, #0]
 8002c40:	4a06      	ldr	r2, [pc, #24]	@ (8002c5c <SystemInit+0x34>)
 8002c42:	fba2 2303 	umull	r2, r3, r2, r3
 8002c46:	099b      	lsrs	r3, r3, #6
 8002c48:	4618      	mov	r0, r3
 8002c4a:	f7ff ffcb 	bl	8002be4 <SysTick_Config>

}
 8002c4e:	bf00      	nop
 8002c50:	bd80      	pop	{r7, pc}
 8002c52:	bf00      	nop
 8002c54:	e000ed00 	.word	0xe000ed00
 8002c58:	20000008 	.word	0x20000008
 8002c5c:	10624dd3 	.word	0x10624dd3

08002c60 <VEML7700_Init>:
//float luminosity = 0.0;
float totalLuminosity = 0.0f;
uint8_t sampleCountLight = 0;

// Configuración del sensor
void VEML7700_Init(void) {
 8002c60:	b580      	push	{r7, lr}
 8002c62:	b086      	sub	sp, #24
 8002c64:	af04      	add	r7, sp, #16
    uint8_t config[2] = { 0x00, 0x00 };  // GAIN x1, IT 100ms, sensor encendido
 8002c66:	2300      	movs	r3, #0
 8002c68:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Write(&hi2c2, VEML7700_I2C_ADDR, VEML7700_REG_CONF, I2C_MEMADD_SIZE_8BIT, config, 2, HAL_MAX_DELAY);
 8002c6a:	f04f 33ff 	mov.w	r3, #4294967295
 8002c6e:	9302      	str	r3, [sp, #8]
 8002c70:	2302      	movs	r3, #2
 8002c72:	9301      	str	r3, [sp, #4]
 8002c74:	1d3b      	adds	r3, r7, #4
 8002c76:	9300      	str	r3, [sp, #0]
 8002c78:	2301      	movs	r3, #1
 8002c7a:	2200      	movs	r2, #0
 8002c7c:	2120      	movs	r1, #32
 8002c7e:	4805      	ldr	r0, [pc, #20]	@ (8002c94 <VEML7700_Init+0x34>)
 8002c80:	f001 fa38 	bl	80040f4 <HAL_I2C_Mem_Write>
    HAL_Delay(5);
 8002c84:	2005      	movs	r0, #5
 8002c86:	f000 fa5b 	bl	8003140 <HAL_Delay>
}
 8002c8a:	bf00      	nop
 8002c8c:	3708      	adds	r7, #8
 8002c8e:	46bd      	mov	sp, r7
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000468 	.word	0x20000468

08002c98 <ReadVEML7700>:

// Lectura de luminosidad
void ReadVEML7700(float *lux) {
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	b088      	sub	sp, #32
 8002c9c:	af04      	add	r7, sp, #16
 8002c9e:	6078      	str	r0, [r7, #4]
    uint8_t buffer[2] = { 0x00, 0x00 };
 8002ca0:	2300      	movs	r3, #0
 8002ca2:	81bb      	strh	r3, [r7, #12]
    HAL_I2C_Mem_Read(&hi2c2, VEML7700_I2C_ADDR, VEML7700_REG_ALS, I2C_MEMADD_SIZE_8BIT, buffer, 2, HAL_MAX_DELAY);
 8002ca4:	f04f 33ff 	mov.w	r3, #4294967295
 8002ca8:	9302      	str	r3, [sp, #8]
 8002caa:	2302      	movs	r3, #2
 8002cac:	9301      	str	r3, [sp, #4]
 8002cae:	f107 030c 	add.w	r3, r7, #12
 8002cb2:	9300      	str	r3, [sp, #0]
 8002cb4:	2301      	movs	r3, #1
 8002cb6:	2204      	movs	r2, #4
 8002cb8:	2120      	movs	r1, #32
 8002cba:	4815      	ldr	r0, [pc, #84]	@ (8002d10 <ReadVEML7700+0x78>)
 8002cbc:	f001 fb14 	bl	80042e8 <HAL_I2C_Mem_Read>

    lux_raw = (buffer[1] << 8) | buffer[0]; // Convertir a 16 bits
 8002cc0:	7b7b      	ldrb	r3, [r7, #13]
 8002cc2:	b21b      	sxth	r3, r3
 8002cc4:	021b      	lsls	r3, r3, #8
 8002cc6:	b21a      	sxth	r2, r3
 8002cc8:	7b3b      	ldrb	r3, [r7, #12]
 8002cca:	b21b      	sxth	r3, r3
 8002ccc:	4313      	orrs	r3, r2
 8002cce:	b21b      	sxth	r3, r3
 8002cd0:	b29a      	uxth	r2, r3
 8002cd2:	4b10      	ldr	r3, [pc, #64]	@ (8002d14 <ReadVEML7700+0x7c>)
 8002cd4:	801a      	strh	r2, [r3, #0]
    *lux = lux_raw * 0.0036; // Factor de conversión del datasheet
 8002cd6:	4b0f      	ldr	r3, [pc, #60]	@ (8002d14 <ReadVEML7700+0x7c>)
 8002cd8:	881b      	ldrh	r3, [r3, #0]
 8002cda:	4618      	mov	r0, r3
 8002cdc:	f7fd fc2a 	bl	8000534 <__aeabi_i2d>
 8002ce0:	a309      	add	r3, pc, #36	@ (adr r3, 8002d08 <ReadVEML7700+0x70>)
 8002ce2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ce6:	f7fd fc8f 	bl	8000608 <__aeabi_dmul>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4610      	mov	r0, r2
 8002cf0:	4619      	mov	r1, r3
 8002cf2:	f7fd ff81 	bl	8000bf8 <__aeabi_d2f>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	687b      	ldr	r3, [r7, #4]
 8002cfa:	601a      	str	r2, [r3, #0]
}
 8002cfc:	bf00      	nop
 8002cfe:	3710      	adds	r7, #16
 8002d00:	46bd      	mov	sp, r7
 8002d02:	bd80      	pop	{r7, pc}
 8002d04:	f3af 8000 	nop.w
 8002d08:	487fcb92 	.word	0x487fcb92
 8002d0c:	3f6d7dbf 	.word	0x3f6d7dbf
 8002d10:	20000468 	.word	0x20000468
 8002d14:	200005c8 	.word	0x200005c8

08002d18 <connectToWiFi>:
uint32_t marblack5 = 0;

//static uint8_t conf = 0; // Bandera de recepción completa


void connectToWiFi(const char* ssid, const char* password) {	// Configura y conecta el ESP8266 a una red WiFi utilizando el comando AT
 8002d18:	b580      	push	{r7, lr}
 8002d1a:	b09c      	sub	sp, #112	@ 0x70
 8002d1c:	af00      	add	r7, sp, #0
 8002d1e:	6078      	str	r0, [r7, #4]
 8002d20:	6039      	str	r1, [r7, #0]
    // Enviar comando AT y esperar respuesta con interrupciones
	esp8266_send_command("AT\r\n");
 8002d22:	4814      	ldr	r0, [pc, #80]	@ (8002d74 <connectToWiFi+0x5c>)
 8002d24:	f7fe f9e0 	bl	80010e8 <esp8266_send_command>
	esp8266_receive_response_IT();
 8002d28:	f7fe f9ba 	bl	80010a0 <esp8266_receive_response_IT>
	esp8266_clear_response_flag();	// rxComplete = 0;
 8002d2c:	f7fe fa08 	bl	8001140 <esp8266_clear_response_flag>


    // Reiniciar el ESP8266
	esp8266_send_command("AT+RST\r\n");
 8002d30:	4811      	ldr	r0, [pc, #68]	@ (8002d78 <connectToWiFi+0x60>)
 8002d32:	f7fe f9d9 	bl	80010e8 <esp8266_send_command>
	esp8266_receive_response_IT();
 8002d36:	f7fe f9b3 	bl	80010a0 <esp8266_receive_response_IT>
	esp8266_clear_response_flag();	// rxComplete = 0;
 8002d3a:	f7fe fa01 	bl	8001140 <esp8266_clear_response_flag>


    // Configurar modo Station
	esp8266_send_command("AT+CWMODE=1\r\n");
 8002d3e:	480f      	ldr	r0, [pc, #60]	@ (8002d7c <connectToWiFi+0x64>)
 8002d40:	f7fe f9d2 	bl	80010e8 <esp8266_send_command>
	esp8266_receive_response_IT();
 8002d44:	f7fe f9ac 	bl	80010a0 <esp8266_receive_response_IT>
	esp8266_clear_response_flag();	// rxComplete = 0;
 8002d48:	f7fe f9fa 	bl	8001140 <esp8266_clear_response_flag>

    // Conectar a WiFi
	char connectCmd[100];
	sprintf(connectCmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 8002d4c:	f107 000c 	add.w	r0, r7, #12
 8002d50:	683b      	ldr	r3, [r7, #0]
 8002d52:	687a      	ldr	r2, [r7, #4]
 8002d54:	490a      	ldr	r1, [pc, #40]	@ (8002d80 <connectToWiFi+0x68>)
 8002d56:	f005 f869 	bl	8007e2c <siprintf>
	esp8266_send_command(connectCmd);
 8002d5a:	f107 030c 	add.w	r3, r7, #12
 8002d5e:	4618      	mov	r0, r3
 8002d60:	f7fe f9c2 	bl	80010e8 <esp8266_send_command>
	esp8266_receive_response_IT();
 8002d64:	f7fe f99c 	bl	80010a0 <esp8266_receive_response_IT>
	esp8266_clear_response_flag();	// rxComplete = 0;
 8002d68:	f7fe f9ea 	bl	8001140 <esp8266_clear_response_flag>
}
 8002d6c:	bf00      	nop
 8002d6e:	3770      	adds	r7, #112	@ 0x70
 8002d70:	46bd      	mov	sp, r7
 8002d72:	bd80      	pop	{r7, pc}
 8002d74:	0800b8f0 	.word	0x0800b8f0
 8002d78:	0800b8f8 	.word	0x0800b8f8
 8002d7c:	0800b904 	.word	0x0800b904
 8002d80:	0800b914 	.word	0x0800b914

08002d84 <isWiFiConnected>:

uint8_t isWiFiConnected() {	// Verifica si el ESP8266 está conectado a una red WiFi comprobando el estado de la conexión
 8002d84:	b580      	push	{r7, lr}
 8002d86:	af00      	add	r7, sp, #0
	esp8266_send_command("AT+CWJAP?\r\n");
 8002d88:	480a      	ldr	r0, [pc, #40]	@ (8002db4 <isWiFiConnected+0x30>)
 8002d8a:	f7fe f9ad 	bl	80010e8 <esp8266_send_command>
	esp8266_receive_response_IT();
 8002d8e:	f7fe f987 	bl	80010a0 <esp8266_receive_response_IT>
	esp8266_clear_response_flag();	// rxComplete = 0;
 8002d92:	f7fe f9d5 	bl	8001140 <esp8266_clear_response_flag>
	// Comprobar si la respuesta contiene el SSID
	return (strstr(esp8266_get_response(), "No AP") == NULL); // No Access Point
 8002d96:	f7fe f9c9 	bl	800112c <esp8266_get_response>
 8002d9a:	4603      	mov	r3, r0
 8002d9c:	4906      	ldr	r1, [pc, #24]	@ (8002db8 <isWiFiConnected+0x34>)
 8002d9e:	4618      	mov	r0, r3
 8002da0:	f005 f960 	bl	8008064 <strstr>
 8002da4:	4603      	mov	r3, r0
 8002da6:	2b00      	cmp	r3, #0
 8002da8:	bf0c      	ite	eq
 8002daa:	2301      	moveq	r3, #1
 8002dac:	2300      	movne	r3, #0
 8002dae:	b2db      	uxtb	r3, r3
}
 8002db0:	4618      	mov	r0, r3
 8002db2:	bd80      	pop	{r7, pc}
 8002db4:	0800b92c 	.word	0x0800b92c
 8002db8:	0800b938 	.word	0x0800b938

08002dbc <sendDataToThingSpeak>:

void sendDataToThingSpeak(const char* apiKey, float averageTemperature, float humidity, float luminosity) {	// Almacena los datos a enviar a ThingSpeak y establece el estado para iniciar la máquina de estados
 8002dbc:	b480      	push	{r7}
 8002dbe:	b085      	sub	sp, #20
 8002dc0:	af00      	add	r7, sp, #0
 8002dc2:	60f8      	str	r0, [r7, #12]
 8002dc4:	ed87 0a02 	vstr	s0, [r7, #8]
 8002dc8:	edc7 0a01 	vstr	s1, [r7, #4]
 8002dcc:	ed87 1a00 	vstr	s2, [r7]
    wifiApiKey = apiKey;
 8002dd0:	4a0a      	ldr	r2, [pc, #40]	@ (8002dfc <sendDataToThingSpeak+0x40>)
 8002dd2:	68fb      	ldr	r3, [r7, #12]
 8002dd4:	6013      	str	r3, [r2, #0]
    wifiTemperature = averageTemperature;
 8002dd6:	4a0a      	ldr	r2, [pc, #40]	@ (8002e00 <sendDataToThingSpeak+0x44>)
 8002dd8:	68bb      	ldr	r3, [r7, #8]
 8002dda:	6013      	str	r3, [r2, #0]
    wifiHumidity = humidity;
 8002ddc:	4a09      	ldr	r2, [pc, #36]	@ (8002e04 <sendDataToThingSpeak+0x48>)
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	6013      	str	r3, [r2, #0]
    wifiLuminosity = luminosity;
 8002de2:	4a09      	ldr	r2, [pc, #36]	@ (8002e08 <sendDataToThingSpeak+0x4c>)
 8002de4:	683b      	ldr	r3, [r7, #0]
 8002de6:	6013      	str	r3, [r2, #0]
    state = 1; // Iniciar la máquina de estados
 8002de8:	4b08      	ldr	r3, [pc, #32]	@ (8002e0c <sendDataToThingSpeak+0x50>)
 8002dea:	2201      	movs	r2, #1
 8002dec:	701a      	strb	r2, [r3, #0]
}
 8002dee:	bf00      	nop
 8002df0:	3714      	adds	r7, #20
 8002df2:	46bd      	mov	sp, r7
 8002df4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002df8:	4770      	bx	lr
 8002dfa:	bf00      	nop
 8002dfc:	200007d0 	.word	0x200007d0
 8002e00:	200007d4 	.word	0x200007d4
 8002e04:	200007d8 	.word	0x200007d8
 8002e08:	200007dc 	.word	0x200007dc
 8002e0c:	200007cc 	.word	0x200007cc

08002e10 <processThingSpeakStateMachine>:




void processThingSpeakStateMachine() {	// Maneja el proceso de comunicación con ThingSpeak a través de comandos AT y gestiona las respuestas del ESP8266 en una máquina de estados
 8002e10:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002e14:	b0d3      	sub	sp, #332	@ 0x14c
 8002e16:	af06      	add	r7, sp, #24
    switch (state) {
 8002e18:	4b6e      	ldr	r3, [pc, #440]	@ (8002fd4 <processThingSpeakStateMachine+0x1c4>)
 8002e1a:	781b      	ldrb	r3, [r3, #0]
 8002e1c:	b2db      	uxtb	r3, r3
 8002e1e:	3b01      	subs	r3, #1
 8002e20:	2b04      	cmp	r3, #4
 8002e22:	f200 80d0 	bhi.w	8002fc6 <processThingSpeakStateMachine+0x1b6>
 8002e26:	a201      	add	r2, pc, #4	@ (adr r2, 8002e2c <processThingSpeakStateMachine+0x1c>)
 8002e28:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002e2c:	08002e41 	.word	0x08002e41
 8002e30:	08002e75 	.word	0x08002e75
 8002e34:	08002f01 	.word	0x08002f01
 8002e38:	08002f6b 	.word	0x08002f6b
 8002e3c:	08002f81 	.word	0x08002f81
        case 1: {
        	printf("Dentro de la maquina de estados \r\n");
 8002e40:	4865      	ldr	r0, [pc, #404]	@ (8002fd8 <processThingSpeakStateMachine+0x1c8>)
 8002e42:	f004 ffeb 	bl	8007e1c <puts>
            char cmd[100];
            sprintf(cmd, "AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 8002e46:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e4a:	4964      	ldr	r1, [pc, #400]	@ (8002fdc <processThingSpeakStateMachine+0x1cc>)
 8002e4c:	4618      	mov	r0, r3
 8002e4e:	f004 ffed 	bl	8007e2c <siprintf>
            esp8266_send_command(cmd);
 8002e52:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002e56:	4618      	mov	r0, r3
 8002e58:	f7fe f946 	bl	80010e8 <esp8266_send_command>
			esp8266_receive_response_IT();
 8002e5c:	f7fe f920 	bl	80010a0 <esp8266_receive_response_IT>
            state = 2;
 8002e60:	4b5c      	ldr	r3, [pc, #368]	@ (8002fd4 <processThingSpeakStateMachine+0x1c4>)
 8002e62:	2202      	movs	r2, #2
 8002e64:	701a      	strb	r2, [r3, #0]
            memset(response, 0, sizeof(response));  // Limpiar el buffer
 8002e66:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002e6a:	2100      	movs	r1, #0
 8002e6c:	485c      	ldr	r0, [pc, #368]	@ (8002fe0 <processThingSpeakStateMachine+0x1d0>)
 8002e6e:	f005 f8f1 	bl	8008054 <memset>
            break;
 8002e72:	e0a8      	b.n	8002fc6 <processThingSpeakStateMachine+0x1b6>
        }
        case 2: {
            if (esp8266_is_response_ready()) {
 8002e74:	f7fe f94e 	bl	8001114 <esp8266_is_response_ready>
 8002e78:	4603      	mov	r3, r0
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	f000 809e 	beq.w	8002fbc <processThingSpeakStateMachine+0x1ac>
            	esp8266_clear_response_flag();	//rxComplete = 0;
 8002e80:	f7fe f95e 	bl	8001140 <esp8266_clear_response_flag>
                char http_request[250];
                sprintf(http_request, "GET /update?api_key=%s&field1=%.2f&field2=%.2f&field3=%.2f HTTP/1.1\r\nHost: api.thingspeak.com\r\nConnection: close\r\n\r\n", wifiApiKey, wifiTemperature, wifiHumidity, wifiLuminosity);
 8002e84:	4b57      	ldr	r3, [pc, #348]	@ (8002fe4 <processThingSpeakStateMachine+0x1d4>)
 8002e86:	681e      	ldr	r6, [r3, #0]
 8002e88:	4b57      	ldr	r3, [pc, #348]	@ (8002fe8 <processThingSpeakStateMachine+0x1d8>)
 8002e8a:	681b      	ldr	r3, [r3, #0]
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7fd fb63 	bl	8000558 <__aeabi_f2d>
 8002e92:	4604      	mov	r4, r0
 8002e94:	460d      	mov	r5, r1
 8002e96:	4b55      	ldr	r3, [pc, #340]	@ (8002fec <processThingSpeakStateMachine+0x1dc>)
 8002e98:	681b      	ldr	r3, [r3, #0]
 8002e9a:	4618      	mov	r0, r3
 8002e9c:	f7fd fb5c 	bl	8000558 <__aeabi_f2d>
 8002ea0:	4680      	mov	r8, r0
 8002ea2:	4689      	mov	r9, r1
 8002ea4:	4b52      	ldr	r3, [pc, #328]	@ (8002ff0 <processThingSpeakStateMachine+0x1e0>)
 8002ea6:	681b      	ldr	r3, [r3, #0]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7fd fb55 	bl	8000558 <__aeabi_f2d>
 8002eae:	4602      	mov	r2, r0
 8002eb0:	460b      	mov	r3, r1
 8002eb2:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002eb6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002eba:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002ebe:	e9cd 4500 	strd	r4, r5, [sp]
 8002ec2:	4632      	mov	r2, r6
 8002ec4:	494b      	ldr	r1, [pc, #300]	@ (8002ff4 <processThingSpeakStateMachine+0x1e4>)
 8002ec6:	f004 ffb1 	bl	8007e2c <siprintf>

                char http_cmd[50];
                sprintf(http_cmd, "AT+CIPSEND=%d\r\n", strlen(http_request));	// Envio longitud del mensaje
 8002eca:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd f9d6 	bl	8000280 <strlen>
 8002ed4:	4602      	mov	r2, r0
 8002ed6:	463b      	mov	r3, r7
 8002ed8:	4947      	ldr	r1, [pc, #284]	@ (8002ff8 <processThingSpeakStateMachine+0x1e8>)
 8002eda:	4618      	mov	r0, r3
 8002edc:	f004 ffa6 	bl	8007e2c <siprintf>
                esp8266_send_command(http_cmd);
 8002ee0:	463b      	mov	r3, r7
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	f7fe f900 	bl	80010e8 <esp8266_send_command>
				esp8266_receive_response_IT();
 8002ee8:	f7fe f8da 	bl	80010a0 <esp8266_receive_response_IT>
                state = 3;
 8002eec:	4b39      	ldr	r3, [pc, #228]	@ (8002fd4 <processThingSpeakStateMachine+0x1c4>)
 8002eee:	2203      	movs	r2, #3
 8002ef0:	701a      	strb	r2, [r3, #0]
                memset(response, 0, sizeof(response));  // Limpiar el buffer
 8002ef2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002ef6:	2100      	movs	r1, #0
 8002ef8:	4839      	ldr	r0, [pc, #228]	@ (8002fe0 <processThingSpeakStateMachine+0x1d0>)
 8002efa:	f005 f8ab 	bl	8008054 <memset>
            }
            break;
 8002efe:	e05d      	b.n	8002fbc <processThingSpeakStateMachine+0x1ac>
        }
        case 3: {				// Envio mensaje con los campos
            if (esp8266_is_response_ready()) {
 8002f00:	f7fe f908 	bl	8001114 <esp8266_is_response_ready>
 8002f04:	4603      	mov	r3, r0
 8002f06:	2b00      	cmp	r3, #0
 8002f08:	d05a      	beq.n	8002fc0 <processThingSpeakStateMachine+0x1b0>
            	esp8266_clear_response_flag();	//rxComplete = 0;
 8002f0a:	f7fe f919 	bl	8001140 <esp8266_clear_response_flag>
                char http_request[250];
                sprintf(http_request, "GET /update?api_key=%s&field1=%.2f&field2=%.2f&field3=%.2f HTTP/1.1\r\nHost: api.thingspeak.com\r\nConnection: close\r\n\r\n", wifiApiKey, wifiTemperature, wifiHumidity, wifiLuminosity);
 8002f0e:	4b35      	ldr	r3, [pc, #212]	@ (8002fe4 <processThingSpeakStateMachine+0x1d4>)
 8002f10:	681e      	ldr	r6, [r3, #0]
 8002f12:	4b35      	ldr	r3, [pc, #212]	@ (8002fe8 <processThingSpeakStateMachine+0x1d8>)
 8002f14:	681b      	ldr	r3, [r3, #0]
 8002f16:	4618      	mov	r0, r3
 8002f18:	f7fd fb1e 	bl	8000558 <__aeabi_f2d>
 8002f1c:	4604      	mov	r4, r0
 8002f1e:	460d      	mov	r5, r1
 8002f20:	4b32      	ldr	r3, [pc, #200]	@ (8002fec <processThingSpeakStateMachine+0x1dc>)
 8002f22:	681b      	ldr	r3, [r3, #0]
 8002f24:	4618      	mov	r0, r3
 8002f26:	f7fd fb17 	bl	8000558 <__aeabi_f2d>
 8002f2a:	4680      	mov	r8, r0
 8002f2c:	4689      	mov	r9, r1
 8002f2e:	4b30      	ldr	r3, [pc, #192]	@ (8002ff0 <processThingSpeakStateMachine+0x1e0>)
 8002f30:	681b      	ldr	r3, [r3, #0]
 8002f32:	4618      	mov	r0, r3
 8002f34:	f7fd fb10 	bl	8000558 <__aeabi_f2d>
 8002f38:	4602      	mov	r2, r0
 8002f3a:	460b      	mov	r3, r1
 8002f3c:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002f40:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002f44:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002f48:	e9cd 4500 	strd	r4, r5, [sp]
 8002f4c:	4632      	mov	r2, r6
 8002f4e:	4929      	ldr	r1, [pc, #164]	@ (8002ff4 <processThingSpeakStateMachine+0x1e4>)
 8002f50:	f004 ff6c 	bl	8007e2c <siprintf>
                esp8266_send_command(http_request);
 8002f54:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002f58:	4618      	mov	r0, r3
 8002f5a:	f7fe f8c5 	bl	80010e8 <esp8266_send_command>
				esp8266_receive_response_IT();
 8002f5e:	f7fe f89f 	bl	80010a0 <esp8266_receive_response_IT>
                state = 4;
 8002f62:	4b1c      	ldr	r3, [pc, #112]	@ (8002fd4 <processThingSpeakStateMachine+0x1c4>)
 8002f64:	2204      	movs	r2, #4
 8002f66:	701a      	strb	r2, [r3, #0]
            }
            break;
 8002f68:	e02a      	b.n	8002fc0 <processThingSpeakStateMachine+0x1b0>
        }
        case 4: {
			if (esp8266_is_response_ready()) {
 8002f6a:	f7fe f8d3 	bl	8001114 <esp8266_is_response_ready>
 8002f6e:	4603      	mov	r3, r0
 8002f70:	2b00      	cmp	r3, #0
 8002f72:	d027      	beq.n	8002fc4 <processThingSpeakStateMachine+0x1b4>
				esp8266_clear_response_flag();	//rxComplete = 0;
 8002f74:	f7fe f8e4 	bl	8001140 <esp8266_clear_response_flag>
				state = 5; // Comprobación de conexión WiFi
 8002f78:	4b16      	ldr	r3, [pc, #88]	@ (8002fd4 <processThingSpeakStateMachine+0x1c4>)
 8002f7a:	2205      	movs	r2, #5
 8002f7c:	701a      	strb	r2, [r3, #0]
			}
			break;
 8002f7e:	e021      	b.n	8002fc4 <processThingSpeakStateMachine+0x1b4>
		}
		case 5: {
			if (isWiFiConnected()) {
 8002f80:	f7ff ff00 	bl	8002d84 <isWiFiConnected>
 8002f84:	4603      	mov	r3, r0
 8002f86:	2b00      	cmp	r3, #0
 8002f88:	d006      	beq.n	8002f98 <processThingSpeakStateMachine+0x188>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);	// DEPURACIÓN
 8002f8a:	2200      	movs	r2, #0
 8002f8c:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8002f90:	481a      	ldr	r0, [pc, #104]	@ (8002ffc <processThingSpeakStateMachine+0x1ec>)
 8002f92:	f000 fc21 	bl	80037d8 <HAL_GPIO_WritePin>
 8002f96:	e00d      	b.n	8002fb4 <processThingSpeakStateMachine+0x1a4>
				//esp8266_deep_sleep(20000); // Poner el ESP8266 en deep sleep durante 20 segundos (ajustable)
				// Reiniar el módulo ESP8266 después de deep sleep para asegurar que esté disponible
				//esp8266_reset_and_reconnect(WIFI_SSID, WIFI_PASS); // Agregar esta línea para reiniciar y reconectar
			} else {

				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_SET);	// DEPURACIÓN
 8002f98:	2201      	movs	r2, #1
 8002f9a:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8002f9e:	4817      	ldr	r0, [pc, #92]	@ (8002ffc <processThingSpeakStateMachine+0x1ec>)
 8002fa0:	f000 fc1a 	bl	80037d8 <HAL_GPIO_WritePin>

				connectToWiFi(WIFI_SSID, WIFI_PASS); // Reintentar conexión
 8002fa4:	4b16      	ldr	r3, [pc, #88]	@ (8003000 <processThingSpeakStateMachine+0x1f0>)
 8002fa6:	681b      	ldr	r3, [r3, #0]
 8002fa8:	4a16      	ldr	r2, [pc, #88]	@ (8003004 <processThingSpeakStateMachine+0x1f4>)
 8002faa:	6812      	ldr	r2, [r2, #0]
 8002fac:	4611      	mov	r1, r2
 8002fae:	4618      	mov	r0, r3
 8002fb0:	f7ff feb2 	bl	8002d18 <connectToWiFi>
			}
			state = 0; // Finalizar la máquina de estados
 8002fb4:	4b07      	ldr	r3, [pc, #28]	@ (8002fd4 <processThingSpeakStateMachine+0x1c4>)
 8002fb6:	2200      	movs	r2, #0
 8002fb8:	701a      	strb	r2, [r3, #0]

			break;
 8002fba:	e004      	b.n	8002fc6 <processThingSpeakStateMachine+0x1b6>
            break;
 8002fbc:	bf00      	nop
 8002fbe:	e002      	b.n	8002fc6 <processThingSpeakStateMachine+0x1b6>
            break;
 8002fc0:	bf00      	nop
 8002fc2:	e000      	b.n	8002fc6 <processThingSpeakStateMachine+0x1b6>
			break;
 8002fc4:	bf00      	nop
		}
    }
}
 8002fc6:	bf00      	nop
 8002fc8:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 8002fcc:	46bd      	mov	sp, r7
 8002fce:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002fd2:	bf00      	nop
 8002fd4:	200007cc 	.word	0x200007cc
 8002fd8:	0800b940 	.word	0x0800b940
 8002fdc:	0800b964 	.word	0x0800b964
 8002fe0:	200005cc 	.word	0x200005cc
 8002fe4:	200007d0 	.word	0x200007d0
 8002fe8:	200007d4 	.word	0x200007d4
 8002fec:	200007d8 	.word	0x200007d8
 8002ff0:	200007dc 	.word	0x200007dc
 8002ff4:	0800b990 	.word	0x0800b990
 8002ff8:	0800ba08 	.word	0x0800ba08
 8002ffc:	40020c00 	.word	0x40020c00
 8003000:	20000000 	.word	0x20000000
 8003004:	20000004 	.word	0x20000004

08003008 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003008:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8003040 <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 800300c:	f7ff fe0c 	bl	8002c28 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003010:	480c      	ldr	r0, [pc, #48]	@ (8003044 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8003012:	490d      	ldr	r1, [pc, #52]	@ (8003048 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8003014:	4a0d      	ldr	r2, [pc, #52]	@ (800304c <LoopFillZerobss+0x1a>)
  movs r3, #0
 8003016:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003018:	e002      	b.n	8003020 <LoopCopyDataInit>

0800301a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800301a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800301c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800301e:	3304      	adds	r3, #4

08003020 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003020:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003022:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003024:	d3f9      	bcc.n	800301a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003026:	4a0a      	ldr	r2, [pc, #40]	@ (8003050 <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8003028:	4c0a      	ldr	r4, [pc, #40]	@ (8003054 <LoopFillZerobss+0x22>)
  movs r3, #0
 800302a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800302c:	e001      	b.n	8003032 <LoopFillZerobss>

0800302e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800302e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003030:	3204      	adds	r2, #4

08003032 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003032:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003034:	d3fb      	bcc.n	800302e <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8003036:	f005 f87b 	bl	8008130 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800303a:	f7fe fabf 	bl	80015bc <main>
  bx  lr    
 800303e:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003040:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003044:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003048:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 800304c:	0800be6c 	.word	0x0800be6c
  ldr r2, =_sbss
 8003050:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 8003054:	20000944 	.word	0x20000944

08003058 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003058:	e7fe      	b.n	8003058 <ADC_IRQHandler>
	...

0800305c <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800305c:	b580      	push	{r7, lr}
 800305e:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003060:	4b0e      	ldr	r3, [pc, #56]	@ (800309c <HAL_Init+0x40>)
 8003062:	681b      	ldr	r3, [r3, #0]
 8003064:	4a0d      	ldr	r2, [pc, #52]	@ (800309c <HAL_Init+0x40>)
 8003066:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 800306a:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 800306c:	4b0b      	ldr	r3, [pc, #44]	@ (800309c <HAL_Init+0x40>)
 800306e:	681b      	ldr	r3, [r3, #0]
 8003070:	4a0a      	ldr	r2, [pc, #40]	@ (800309c <HAL_Init+0x40>)
 8003072:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8003076:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003078:	4b08      	ldr	r3, [pc, #32]	@ (800309c <HAL_Init+0x40>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4a07      	ldr	r2, [pc, #28]	@ (800309c <HAL_Init+0x40>)
 800307e:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8003082:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003084:	2003      	movs	r0, #3
 8003086:	f000 f94f 	bl	8003328 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 800308a:	2000      	movs	r0, #0
 800308c:	f000 f808 	bl	80030a0 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003090:	f7ff fb4e 	bl	8002730 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003094:	2300      	movs	r3, #0
}
 8003096:	4618      	mov	r0, r3
 8003098:	bd80      	pop	{r7, pc}
 800309a:	bf00      	nop
 800309c:	40023c00 	.word	0x40023c00

080030a0 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030a0:	b580      	push	{r7, lr}
 80030a2:	b082      	sub	sp, #8
 80030a4:	af00      	add	r7, sp, #0
 80030a6:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030a8:	4b12      	ldr	r3, [pc, #72]	@ (80030f4 <HAL_InitTick+0x54>)
 80030aa:	681a      	ldr	r2, [r3, #0]
 80030ac:	4b12      	ldr	r3, [pc, #72]	@ (80030f8 <HAL_InitTick+0x58>)
 80030ae:	781b      	ldrb	r3, [r3, #0]
 80030b0:	4619      	mov	r1, r3
 80030b2:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 80030b6:	fbb3 f3f1 	udiv	r3, r3, r1
 80030ba:	fbb2 f3f3 	udiv	r3, r2, r3
 80030be:	4618      	mov	r0, r3
 80030c0:	f000 f967 	bl	8003392 <HAL_SYSTICK_Config>
 80030c4:	4603      	mov	r3, r0
 80030c6:	2b00      	cmp	r3, #0
 80030c8:	d001      	beq.n	80030ce <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030ca:	2301      	movs	r3, #1
 80030cc:	e00e      	b.n	80030ec <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	2b0f      	cmp	r3, #15
 80030d2:	d80a      	bhi.n	80030ea <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030d4:	2200      	movs	r2, #0
 80030d6:	6879      	ldr	r1, [r7, #4]
 80030d8:	f04f 30ff 	mov.w	r0, #4294967295
 80030dc:	f000 f92f 	bl	800333e <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030e0:	4a06      	ldr	r2, [pc, #24]	@ (80030fc <HAL_InitTick+0x5c>)
 80030e2:	687b      	ldr	r3, [r7, #4]
 80030e4:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 80030e6:	2300      	movs	r3, #0
 80030e8:	e000      	b.n	80030ec <HAL_InitTick+0x4c>
    return HAL_ERROR;
 80030ea:	2301      	movs	r3, #1
}
 80030ec:	4618      	mov	r0, r3
 80030ee:	3708      	adds	r7, #8
 80030f0:	46bd      	mov	sp, r7
 80030f2:	bd80      	pop	{r7, pc}
 80030f4:	20000008 	.word	0x20000008
 80030f8:	20000010 	.word	0x20000010
 80030fc:	2000000c 	.word	0x2000000c

08003100 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003100:	b480      	push	{r7}
 8003102:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003104:	4b06      	ldr	r3, [pc, #24]	@ (8003120 <HAL_IncTick+0x20>)
 8003106:	781b      	ldrb	r3, [r3, #0]
 8003108:	461a      	mov	r2, r3
 800310a:	4b06      	ldr	r3, [pc, #24]	@ (8003124 <HAL_IncTick+0x24>)
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	4413      	add	r3, r2
 8003110:	4a04      	ldr	r2, [pc, #16]	@ (8003124 <HAL_IncTick+0x24>)
 8003112:	6013      	str	r3, [r2, #0]
}
 8003114:	bf00      	nop
 8003116:	46bd      	mov	sp, r7
 8003118:	f85d 7b04 	ldr.w	r7, [sp], #4
 800311c:	4770      	bx	lr
 800311e:	bf00      	nop
 8003120:	20000010 	.word	0x20000010
 8003124:	200007e0 	.word	0x200007e0

08003128 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003128:	b480      	push	{r7}
 800312a:	af00      	add	r7, sp, #0
  return uwTick;
 800312c:	4b03      	ldr	r3, [pc, #12]	@ (800313c <HAL_GetTick+0x14>)
 800312e:	681b      	ldr	r3, [r3, #0]
}
 8003130:	4618      	mov	r0, r3
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	200007e0 	.word	0x200007e0

08003140 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003140:	b580      	push	{r7, lr}
 8003142:	b084      	sub	sp, #16
 8003144:	af00      	add	r7, sp, #0
 8003146:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003148:	f7ff ffee 	bl	8003128 <HAL_GetTick>
 800314c:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 800314e:	687b      	ldr	r3, [r7, #4]
 8003150:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003152:	68fb      	ldr	r3, [r7, #12]
 8003154:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003158:	d005      	beq.n	8003166 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800315a:	4b0a      	ldr	r3, [pc, #40]	@ (8003184 <HAL_Delay+0x44>)
 800315c:	781b      	ldrb	r3, [r3, #0]
 800315e:	461a      	mov	r2, r3
 8003160:	68fb      	ldr	r3, [r7, #12]
 8003162:	4413      	add	r3, r2
 8003164:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003166:	bf00      	nop
 8003168:	f7ff ffde 	bl	8003128 <HAL_GetTick>
 800316c:	4602      	mov	r2, r0
 800316e:	68bb      	ldr	r3, [r7, #8]
 8003170:	1ad3      	subs	r3, r2, r3
 8003172:	68fa      	ldr	r2, [r7, #12]
 8003174:	429a      	cmp	r2, r3
 8003176:	d8f7      	bhi.n	8003168 <HAL_Delay+0x28>
  {
  }
}
 8003178:	bf00      	nop
 800317a:	bf00      	nop
 800317c:	3710      	adds	r7, #16
 800317e:	46bd      	mov	sp, r7
 8003180:	bd80      	pop	{r7, pc}
 8003182:	bf00      	nop
 8003184:	20000010 	.word	0x20000010

08003188 <__NVIC_SetPriorityGrouping>:
{
 8003188:	b480      	push	{r7}
 800318a:	b085      	sub	sp, #20
 800318c:	af00      	add	r7, sp, #0
 800318e:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003190:	687b      	ldr	r3, [r7, #4]
 8003192:	f003 0307 	and.w	r3, r3, #7
 8003196:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003198:	4b0c      	ldr	r3, [pc, #48]	@ (80031cc <__NVIC_SetPriorityGrouping+0x44>)
 800319a:	68db      	ldr	r3, [r3, #12]
 800319c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800319e:	68ba      	ldr	r2, [r7, #8]
 80031a0:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 80031a4:	4013      	ands	r3, r2
 80031a6:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 80031ac:	68bb      	ldr	r3, [r7, #8]
 80031ae:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 80031b0:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 80031b4:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80031b8:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 80031ba:	4a04      	ldr	r2, [pc, #16]	@ (80031cc <__NVIC_SetPriorityGrouping+0x44>)
 80031bc:	68bb      	ldr	r3, [r7, #8]
 80031be:	60d3      	str	r3, [r2, #12]
}
 80031c0:	bf00      	nop
 80031c2:	3714      	adds	r7, #20
 80031c4:	46bd      	mov	sp, r7
 80031c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ca:	4770      	bx	lr
 80031cc:	e000ed00 	.word	0xe000ed00

080031d0 <__NVIC_GetPriorityGrouping>:
{
 80031d0:	b480      	push	{r7}
 80031d2:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031d4:	4b04      	ldr	r3, [pc, #16]	@ (80031e8 <__NVIC_GetPriorityGrouping+0x18>)
 80031d6:	68db      	ldr	r3, [r3, #12]
 80031d8:	0a1b      	lsrs	r3, r3, #8
 80031da:	f003 0307 	and.w	r3, r3, #7
}
 80031de:	4618      	mov	r0, r3
 80031e0:	46bd      	mov	sp, r7
 80031e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031e6:	4770      	bx	lr
 80031e8:	e000ed00 	.word	0xe000ed00

080031ec <__NVIC_EnableIRQ>:
{
 80031ec:	b480      	push	{r7}
 80031ee:	b083      	sub	sp, #12
 80031f0:	af00      	add	r7, sp, #0
 80031f2:	4603      	mov	r3, r0
 80031f4:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031f6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031fa:	2b00      	cmp	r3, #0
 80031fc:	db0b      	blt.n	8003216 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031fe:	79fb      	ldrb	r3, [r7, #7]
 8003200:	f003 021f 	and.w	r2, r3, #31
 8003204:	4907      	ldr	r1, [pc, #28]	@ (8003224 <__NVIC_EnableIRQ+0x38>)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	095b      	lsrs	r3, r3, #5
 800320c:	2001      	movs	r0, #1
 800320e:	fa00 f202 	lsl.w	r2, r0, r2
 8003212:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8003216:	bf00      	nop
 8003218:	370c      	adds	r7, #12
 800321a:	46bd      	mov	sp, r7
 800321c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003220:	4770      	bx	lr
 8003222:	bf00      	nop
 8003224:	e000e100 	.word	0xe000e100

08003228 <__NVIC_SetPriority>:
{
 8003228:	b480      	push	{r7}
 800322a:	b083      	sub	sp, #12
 800322c:	af00      	add	r7, sp, #0
 800322e:	4603      	mov	r3, r0
 8003230:	6039      	str	r1, [r7, #0]
 8003232:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003234:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003238:	2b00      	cmp	r3, #0
 800323a:	db0a      	blt.n	8003252 <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800323c:	683b      	ldr	r3, [r7, #0]
 800323e:	b2da      	uxtb	r2, r3
 8003240:	490c      	ldr	r1, [pc, #48]	@ (8003274 <__NVIC_SetPriority+0x4c>)
 8003242:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003246:	0112      	lsls	r2, r2, #4
 8003248:	b2d2      	uxtb	r2, r2
 800324a:	440b      	add	r3, r1
 800324c:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 8003250:	e00a      	b.n	8003268 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003252:	683b      	ldr	r3, [r7, #0]
 8003254:	b2da      	uxtb	r2, r3
 8003256:	4908      	ldr	r1, [pc, #32]	@ (8003278 <__NVIC_SetPriority+0x50>)
 8003258:	79fb      	ldrb	r3, [r7, #7]
 800325a:	f003 030f 	and.w	r3, r3, #15
 800325e:	3b04      	subs	r3, #4
 8003260:	0112      	lsls	r2, r2, #4
 8003262:	b2d2      	uxtb	r2, r2
 8003264:	440b      	add	r3, r1
 8003266:	761a      	strb	r2, [r3, #24]
}
 8003268:	bf00      	nop
 800326a:	370c      	adds	r7, #12
 800326c:	46bd      	mov	sp, r7
 800326e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003272:	4770      	bx	lr
 8003274:	e000e100 	.word	0xe000e100
 8003278:	e000ed00 	.word	0xe000ed00

0800327c <NVIC_EncodePriority>:
{
 800327c:	b480      	push	{r7}
 800327e:	b089      	sub	sp, #36	@ 0x24
 8003280:	af00      	add	r7, sp, #0
 8003282:	60f8      	str	r0, [r7, #12]
 8003284:	60b9      	str	r1, [r7, #8]
 8003286:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003288:	68fb      	ldr	r3, [r7, #12]
 800328a:	f003 0307 	and.w	r3, r3, #7
 800328e:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003290:	69fb      	ldr	r3, [r7, #28]
 8003292:	f1c3 0307 	rsb	r3, r3, #7
 8003296:	2b04      	cmp	r3, #4
 8003298:	bf28      	it	cs
 800329a:	2304      	movcs	r3, #4
 800329c:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 800329e:	69fb      	ldr	r3, [r7, #28]
 80032a0:	3304      	adds	r3, #4
 80032a2:	2b06      	cmp	r3, #6
 80032a4:	d902      	bls.n	80032ac <NVIC_EncodePriority+0x30>
 80032a6:	69fb      	ldr	r3, [r7, #28]
 80032a8:	3b03      	subs	r3, #3
 80032aa:	e000      	b.n	80032ae <NVIC_EncodePriority+0x32>
 80032ac:	2300      	movs	r3, #0
 80032ae:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032b0:	f04f 32ff 	mov.w	r2, #4294967295
 80032b4:	69bb      	ldr	r3, [r7, #24]
 80032b6:	fa02 f303 	lsl.w	r3, r2, r3
 80032ba:	43da      	mvns	r2, r3
 80032bc:	68bb      	ldr	r3, [r7, #8]
 80032be:	401a      	ands	r2, r3
 80032c0:	697b      	ldr	r3, [r7, #20]
 80032c2:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032c4:	f04f 31ff 	mov.w	r1, #4294967295
 80032c8:	697b      	ldr	r3, [r7, #20]
 80032ca:	fa01 f303 	lsl.w	r3, r1, r3
 80032ce:	43d9      	mvns	r1, r3
 80032d0:	687b      	ldr	r3, [r7, #4]
 80032d2:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032d4:	4313      	orrs	r3, r2
}
 80032d6:	4618      	mov	r0, r3
 80032d8:	3724      	adds	r7, #36	@ 0x24
 80032da:	46bd      	mov	sp, r7
 80032dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032e0:	4770      	bx	lr
	...

080032e4 <SysTick_Config>:
{
 80032e4:	b580      	push	{r7, lr}
 80032e6:	b082      	sub	sp, #8
 80032e8:	af00      	add	r7, sp, #0
 80032ea:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	3b01      	subs	r3, #1
 80032f0:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 80032f4:	d301      	bcc.n	80032fa <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 80032f6:	2301      	movs	r3, #1
 80032f8:	e00f      	b.n	800331a <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 80032fa:	4a0a      	ldr	r2, [pc, #40]	@ (8003324 <SysTick_Config+0x40>)
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	3b01      	subs	r3, #1
 8003300:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003302:	210f      	movs	r1, #15
 8003304:	f04f 30ff 	mov.w	r0, #4294967295
 8003308:	f7ff ff8e 	bl	8003228 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800330c:	4b05      	ldr	r3, [pc, #20]	@ (8003324 <SysTick_Config+0x40>)
 800330e:	2200      	movs	r2, #0
 8003310:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003312:	4b04      	ldr	r3, [pc, #16]	@ (8003324 <SysTick_Config+0x40>)
 8003314:	2207      	movs	r2, #7
 8003316:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8003318:	2300      	movs	r3, #0
}
 800331a:	4618      	mov	r0, r3
 800331c:	3708      	adds	r7, #8
 800331e:	46bd      	mov	sp, r7
 8003320:	bd80      	pop	{r7, pc}
 8003322:	bf00      	nop
 8003324:	e000e010 	.word	0xe000e010

08003328 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003328:	b580      	push	{r7, lr}
 800332a:	b082      	sub	sp, #8
 800332c:	af00      	add	r7, sp, #0
 800332e:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003330:	6878      	ldr	r0, [r7, #4]
 8003332:	f7ff ff29 	bl	8003188 <__NVIC_SetPriorityGrouping>
}
 8003336:	bf00      	nop
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}

0800333e <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800333e:	b580      	push	{r7, lr}
 8003340:	b086      	sub	sp, #24
 8003342:	af00      	add	r7, sp, #0
 8003344:	4603      	mov	r3, r0
 8003346:	60b9      	str	r1, [r7, #8]
 8003348:	607a      	str	r2, [r7, #4]
 800334a:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 800334c:	2300      	movs	r3, #0
 800334e:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003350:	f7ff ff3e 	bl	80031d0 <__NVIC_GetPriorityGrouping>
 8003354:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003356:	687a      	ldr	r2, [r7, #4]
 8003358:	68b9      	ldr	r1, [r7, #8]
 800335a:	6978      	ldr	r0, [r7, #20]
 800335c:	f7ff ff8e 	bl	800327c <NVIC_EncodePriority>
 8003360:	4602      	mov	r2, r0
 8003362:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003366:	4611      	mov	r1, r2
 8003368:	4618      	mov	r0, r3
 800336a:	f7ff ff5d 	bl	8003228 <__NVIC_SetPriority>
}
 800336e:	bf00      	nop
 8003370:	3718      	adds	r7, #24
 8003372:	46bd      	mov	sp, r7
 8003374:	bd80      	pop	{r7, pc}

08003376 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003376:	b580      	push	{r7, lr}
 8003378:	b082      	sub	sp, #8
 800337a:	af00      	add	r7, sp, #0
 800337c:	4603      	mov	r3, r0
 800337e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003380:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff ff31 	bl	80031ec <__NVIC_EnableIRQ>
}
 800338a:	bf00      	nop
 800338c:	3708      	adds	r7, #8
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800339a:	6878      	ldr	r0, [r7, #4]
 800339c:	f7ff ffa2 	bl	80032e4 <SysTick_Config>
 80033a0:	4603      	mov	r3, r0
}
 80033a2:	4618      	mov	r0, r3
 80033a4:	3708      	adds	r7, #8
 80033a6:	46bd      	mov	sp, r7
 80033a8:	bd80      	pop	{r7, pc}

080033aa <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80033aa:	b580      	push	{r7, lr}
 80033ac:	b084      	sub	sp, #16
 80033ae:	af00      	add	r7, sp, #0
 80033b0:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80033b2:	687b      	ldr	r3, [r7, #4]
 80033b4:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 80033b6:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80033b8:	f7ff feb6 	bl	8003128 <HAL_GetTick>
 80033bc:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80033be:	687b      	ldr	r3, [r7, #4]
 80033c0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 80033c4:	b2db      	uxtb	r3, r3
 80033c6:	2b02      	cmp	r3, #2
 80033c8:	d008      	beq.n	80033dc <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80033ca:	687b      	ldr	r3, [r7, #4]
 80033cc:	2280      	movs	r2, #128	@ 0x80
 80033ce:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	2200      	movs	r2, #0
 80033d4:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 80033d8:	2301      	movs	r3, #1
 80033da:	e052      	b.n	8003482 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80033dc:	687b      	ldr	r3, [r7, #4]
 80033de:	681b      	ldr	r3, [r3, #0]
 80033e0:	681a      	ldr	r2, [r3, #0]
 80033e2:	687b      	ldr	r3, [r7, #4]
 80033e4:	681b      	ldr	r3, [r3, #0]
 80033e6:	f022 0216 	bic.w	r2, r2, #22
 80033ea:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 80033ec:	687b      	ldr	r3, [r7, #4]
 80033ee:	681b      	ldr	r3, [r3, #0]
 80033f0:	695a      	ldr	r2, [r3, #20]
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	681b      	ldr	r3, [r3, #0]
 80033f6:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80033fa:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80033fc:	687b      	ldr	r3, [r7, #4]
 80033fe:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003400:	2b00      	cmp	r3, #0
 8003402:	d103      	bne.n	800340c <HAL_DMA_Abort+0x62>
 8003404:	687b      	ldr	r3, [r7, #4]
 8003406:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8003408:	2b00      	cmp	r3, #0
 800340a:	d007      	beq.n	800341c <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 800340c:	687b      	ldr	r3, [r7, #4]
 800340e:	681b      	ldr	r3, [r3, #0]
 8003410:	681a      	ldr	r2, [r3, #0]
 8003412:	687b      	ldr	r3, [r7, #4]
 8003414:	681b      	ldr	r3, [r3, #0]
 8003416:	f022 0208 	bic.w	r2, r2, #8
 800341a:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800341c:	687b      	ldr	r3, [r7, #4]
 800341e:	681b      	ldr	r3, [r3, #0]
 8003420:	681a      	ldr	r2, [r3, #0]
 8003422:	687b      	ldr	r3, [r7, #4]
 8003424:	681b      	ldr	r3, [r3, #0]
 8003426:	f022 0201 	bic.w	r2, r2, #1
 800342a:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800342c:	e013      	b.n	8003456 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 800342e:	f7ff fe7b 	bl	8003128 <HAL_GetTick>
 8003432:	4602      	mov	r2, r0
 8003434:	68bb      	ldr	r3, [r7, #8]
 8003436:	1ad3      	subs	r3, r2, r3
 8003438:	2b05      	cmp	r3, #5
 800343a:	d90c      	bls.n	8003456 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	2220      	movs	r2, #32
 8003440:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	2203      	movs	r2, #3
 8003446:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800344a:	687b      	ldr	r3, [r7, #4]
 800344c:	2200      	movs	r2, #0
 800344e:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8003452:	2303      	movs	r3, #3
 8003454:	e015      	b.n	8003482 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003456:	687b      	ldr	r3, [r7, #4]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	681b      	ldr	r3, [r3, #0]
 800345c:	f003 0301 	and.w	r3, r3, #1
 8003460:	2b00      	cmp	r3, #0
 8003462:	d1e4      	bne.n	800342e <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8003468:	223f      	movs	r2, #63	@ 0x3f
 800346a:	409a      	lsls	r2, r3
 800346c:	68fb      	ldr	r3, [r7, #12]
 800346e:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	2201      	movs	r2, #1
 8003474:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	2200      	movs	r2, #0
 800347c:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8003480:	2300      	movs	r3, #0
}
 8003482:	4618      	mov	r0, r3
 8003484:	3710      	adds	r7, #16
 8003486:	46bd      	mov	sp, r7
 8003488:	bd80      	pop	{r7, pc}

0800348a <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800348a:	b480      	push	{r7}
 800348c:	b083      	sub	sp, #12
 800348e:	af00      	add	r7, sp, #0
 8003490:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003492:	687b      	ldr	r3, [r7, #4]
 8003494:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8003498:	b2db      	uxtb	r3, r3
 800349a:	2b02      	cmp	r3, #2
 800349c:	d004      	beq.n	80034a8 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800349e:	687b      	ldr	r3, [r7, #4]
 80034a0:	2280      	movs	r2, #128	@ 0x80
 80034a2:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 80034a4:	2301      	movs	r3, #1
 80034a6:	e00c      	b.n	80034c2 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80034a8:	687b      	ldr	r3, [r7, #4]
 80034aa:	2205      	movs	r2, #5
 80034ac:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f022 0201 	bic.w	r2, r2, #1
 80034be:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80034c0:	2300      	movs	r3, #0
}
 80034c2:	4618      	mov	r0, r3
 80034c4:	370c      	adds	r7, #12
 80034c6:	46bd      	mov	sp, r7
 80034c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80034cc:	4770      	bx	lr
	...

080034d0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80034d0:	b480      	push	{r7}
 80034d2:	b089      	sub	sp, #36	@ 0x24
 80034d4:	af00      	add	r7, sp, #0
 80034d6:	6078      	str	r0, [r7, #4]
 80034d8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80034da:	2300      	movs	r3, #0
 80034dc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80034de:	2300      	movs	r3, #0
 80034e0:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 80034e2:	2300      	movs	r3, #0
 80034e4:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 80034e6:	2300      	movs	r3, #0
 80034e8:	61fb      	str	r3, [r7, #28]
 80034ea:	e159      	b.n	80037a0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80034ec:	2201      	movs	r2, #1
 80034ee:	69fb      	ldr	r3, [r7, #28]
 80034f0:	fa02 f303 	lsl.w	r3, r2, r3
 80034f4:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80034f6:	683b      	ldr	r3, [r7, #0]
 80034f8:	681b      	ldr	r3, [r3, #0]
 80034fa:	697a      	ldr	r2, [r7, #20]
 80034fc:	4013      	ands	r3, r2
 80034fe:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003500:	693a      	ldr	r2, [r7, #16]
 8003502:	697b      	ldr	r3, [r7, #20]
 8003504:	429a      	cmp	r2, r3
 8003506:	f040 8148 	bne.w	800379a <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800350a:	683b      	ldr	r3, [r7, #0]
 800350c:	685b      	ldr	r3, [r3, #4]
 800350e:	f003 0303 	and.w	r3, r3, #3
 8003512:	2b01      	cmp	r3, #1
 8003514:	d005      	beq.n	8003522 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003516:	683b      	ldr	r3, [r7, #0]
 8003518:	685b      	ldr	r3, [r3, #4]
 800351a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800351e:	2b02      	cmp	r3, #2
 8003520:	d130      	bne.n	8003584 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003522:	687b      	ldr	r3, [r7, #4]
 8003524:	689b      	ldr	r3, [r3, #8]
 8003526:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003528:	69fb      	ldr	r3, [r7, #28]
 800352a:	005b      	lsls	r3, r3, #1
 800352c:	2203      	movs	r2, #3
 800352e:	fa02 f303 	lsl.w	r3, r2, r3
 8003532:	43db      	mvns	r3, r3
 8003534:	69ba      	ldr	r2, [r7, #24]
 8003536:	4013      	ands	r3, r2
 8003538:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800353a:	683b      	ldr	r3, [r7, #0]
 800353c:	68da      	ldr	r2, [r3, #12]
 800353e:	69fb      	ldr	r3, [r7, #28]
 8003540:	005b      	lsls	r3, r3, #1
 8003542:	fa02 f303 	lsl.w	r3, r2, r3
 8003546:	69ba      	ldr	r2, [r7, #24]
 8003548:	4313      	orrs	r3, r2
 800354a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	69ba      	ldr	r2, [r7, #24]
 8003550:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003552:	687b      	ldr	r3, [r7, #4]
 8003554:	685b      	ldr	r3, [r3, #4]
 8003556:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003558:	2201      	movs	r2, #1
 800355a:	69fb      	ldr	r3, [r7, #28]
 800355c:	fa02 f303 	lsl.w	r3, r2, r3
 8003560:	43db      	mvns	r3, r3
 8003562:	69ba      	ldr	r2, [r7, #24]
 8003564:	4013      	ands	r3, r2
 8003566:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8003568:	683b      	ldr	r3, [r7, #0]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	091b      	lsrs	r3, r3, #4
 800356e:	f003 0201 	and.w	r2, r3, #1
 8003572:	69fb      	ldr	r3, [r7, #28]
 8003574:	fa02 f303 	lsl.w	r3, r2, r3
 8003578:	69ba      	ldr	r2, [r7, #24]
 800357a:	4313      	orrs	r3, r2
 800357c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800357e:	687b      	ldr	r3, [r7, #4]
 8003580:	69ba      	ldr	r2, [r7, #24]
 8003582:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003584:	683b      	ldr	r3, [r7, #0]
 8003586:	685b      	ldr	r3, [r3, #4]
 8003588:	f003 0303 	and.w	r3, r3, #3
 800358c:	2b03      	cmp	r3, #3
 800358e:	d017      	beq.n	80035c0 <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003590:	687b      	ldr	r3, [r7, #4]
 8003592:	68db      	ldr	r3, [r3, #12]
 8003594:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003596:	69fb      	ldr	r3, [r7, #28]
 8003598:	005b      	lsls	r3, r3, #1
 800359a:	2203      	movs	r2, #3
 800359c:	fa02 f303 	lsl.w	r3, r2, r3
 80035a0:	43db      	mvns	r3, r3
 80035a2:	69ba      	ldr	r2, [r7, #24]
 80035a4:	4013      	ands	r3, r2
 80035a6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80035a8:	683b      	ldr	r3, [r7, #0]
 80035aa:	689a      	ldr	r2, [r3, #8]
 80035ac:	69fb      	ldr	r3, [r7, #28]
 80035ae:	005b      	lsls	r3, r3, #1
 80035b0:	fa02 f303 	lsl.w	r3, r2, r3
 80035b4:	69ba      	ldr	r2, [r7, #24]
 80035b6:	4313      	orrs	r3, r2
 80035b8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80035ba:	687b      	ldr	r3, [r7, #4]
 80035bc:	69ba      	ldr	r2, [r7, #24]
 80035be:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80035c0:	683b      	ldr	r3, [r7, #0]
 80035c2:	685b      	ldr	r3, [r3, #4]
 80035c4:	f003 0303 	and.w	r3, r3, #3
 80035c8:	2b02      	cmp	r3, #2
 80035ca:	d123      	bne.n	8003614 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80035cc:	69fb      	ldr	r3, [r7, #28]
 80035ce:	08da      	lsrs	r2, r3, #3
 80035d0:	687b      	ldr	r3, [r7, #4]
 80035d2:	3208      	adds	r2, #8
 80035d4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80035d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80035da:	69fb      	ldr	r3, [r7, #28]
 80035dc:	f003 0307 	and.w	r3, r3, #7
 80035e0:	009b      	lsls	r3, r3, #2
 80035e2:	220f      	movs	r2, #15
 80035e4:	fa02 f303 	lsl.w	r3, r2, r3
 80035e8:	43db      	mvns	r3, r3
 80035ea:	69ba      	ldr	r2, [r7, #24]
 80035ec:	4013      	ands	r3, r2
 80035ee:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80035f0:	683b      	ldr	r3, [r7, #0]
 80035f2:	691a      	ldr	r2, [r3, #16]
 80035f4:	69fb      	ldr	r3, [r7, #28]
 80035f6:	f003 0307 	and.w	r3, r3, #7
 80035fa:	009b      	lsls	r3, r3, #2
 80035fc:	fa02 f303 	lsl.w	r3, r2, r3
 8003600:	69ba      	ldr	r2, [r7, #24]
 8003602:	4313      	orrs	r3, r2
 8003604:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003606:	69fb      	ldr	r3, [r7, #28]
 8003608:	08da      	lsrs	r2, r3, #3
 800360a:	687b      	ldr	r3, [r7, #4]
 800360c:	3208      	adds	r2, #8
 800360e:	69b9      	ldr	r1, [r7, #24]
 8003610:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003614:	687b      	ldr	r3, [r7, #4]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800361a:	69fb      	ldr	r3, [r7, #28]
 800361c:	005b      	lsls	r3, r3, #1
 800361e:	2203      	movs	r2, #3
 8003620:	fa02 f303 	lsl.w	r3, r2, r3
 8003624:	43db      	mvns	r3, r3
 8003626:	69ba      	ldr	r2, [r7, #24]
 8003628:	4013      	ands	r3, r2
 800362a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800362c:	683b      	ldr	r3, [r7, #0]
 800362e:	685b      	ldr	r3, [r3, #4]
 8003630:	f003 0203 	and.w	r2, r3, #3
 8003634:	69fb      	ldr	r3, [r7, #28]
 8003636:	005b      	lsls	r3, r3, #1
 8003638:	fa02 f303 	lsl.w	r3, r2, r3
 800363c:	69ba      	ldr	r2, [r7, #24]
 800363e:	4313      	orrs	r3, r2
 8003640:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	69ba      	ldr	r2, [r7, #24]
 8003646:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8003648:	683b      	ldr	r3, [r7, #0]
 800364a:	685b      	ldr	r3, [r3, #4]
 800364c:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8003650:	2b00      	cmp	r3, #0
 8003652:	f000 80a2 	beq.w	800379a <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003656:	2300      	movs	r3, #0
 8003658:	60fb      	str	r3, [r7, #12]
 800365a:	4b57      	ldr	r3, [pc, #348]	@ (80037b8 <HAL_GPIO_Init+0x2e8>)
 800365c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800365e:	4a56      	ldr	r2, [pc, #344]	@ (80037b8 <HAL_GPIO_Init+0x2e8>)
 8003660:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8003664:	6453      	str	r3, [r2, #68]	@ 0x44
 8003666:	4b54      	ldr	r3, [pc, #336]	@ (80037b8 <HAL_GPIO_Init+0x2e8>)
 8003668:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800366a:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 800366e:	60fb      	str	r3, [r7, #12]
 8003670:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003672:	4a52      	ldr	r2, [pc, #328]	@ (80037bc <HAL_GPIO_Init+0x2ec>)
 8003674:	69fb      	ldr	r3, [r7, #28]
 8003676:	089b      	lsrs	r3, r3, #2
 8003678:	3302      	adds	r3, #2
 800367a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800367e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003680:	69fb      	ldr	r3, [r7, #28]
 8003682:	f003 0303 	and.w	r3, r3, #3
 8003686:	009b      	lsls	r3, r3, #2
 8003688:	220f      	movs	r2, #15
 800368a:	fa02 f303 	lsl.w	r3, r2, r3
 800368e:	43db      	mvns	r3, r3
 8003690:	69ba      	ldr	r2, [r7, #24]
 8003692:	4013      	ands	r3, r2
 8003694:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003696:	687b      	ldr	r3, [r7, #4]
 8003698:	4a49      	ldr	r2, [pc, #292]	@ (80037c0 <HAL_GPIO_Init+0x2f0>)
 800369a:	4293      	cmp	r3, r2
 800369c:	d019      	beq.n	80036d2 <HAL_GPIO_Init+0x202>
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	4a48      	ldr	r2, [pc, #288]	@ (80037c4 <HAL_GPIO_Init+0x2f4>)
 80036a2:	4293      	cmp	r3, r2
 80036a4:	d013      	beq.n	80036ce <HAL_GPIO_Init+0x1fe>
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	4a47      	ldr	r2, [pc, #284]	@ (80037c8 <HAL_GPIO_Init+0x2f8>)
 80036aa:	4293      	cmp	r3, r2
 80036ac:	d00d      	beq.n	80036ca <HAL_GPIO_Init+0x1fa>
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	4a46      	ldr	r2, [pc, #280]	@ (80037cc <HAL_GPIO_Init+0x2fc>)
 80036b2:	4293      	cmp	r3, r2
 80036b4:	d007      	beq.n	80036c6 <HAL_GPIO_Init+0x1f6>
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	4a45      	ldr	r2, [pc, #276]	@ (80037d0 <HAL_GPIO_Init+0x300>)
 80036ba:	4293      	cmp	r3, r2
 80036bc:	d101      	bne.n	80036c2 <HAL_GPIO_Init+0x1f2>
 80036be:	2304      	movs	r3, #4
 80036c0:	e008      	b.n	80036d4 <HAL_GPIO_Init+0x204>
 80036c2:	2307      	movs	r3, #7
 80036c4:	e006      	b.n	80036d4 <HAL_GPIO_Init+0x204>
 80036c6:	2303      	movs	r3, #3
 80036c8:	e004      	b.n	80036d4 <HAL_GPIO_Init+0x204>
 80036ca:	2302      	movs	r3, #2
 80036cc:	e002      	b.n	80036d4 <HAL_GPIO_Init+0x204>
 80036ce:	2301      	movs	r3, #1
 80036d0:	e000      	b.n	80036d4 <HAL_GPIO_Init+0x204>
 80036d2:	2300      	movs	r3, #0
 80036d4:	69fa      	ldr	r2, [r7, #28]
 80036d6:	f002 0203 	and.w	r2, r2, #3
 80036da:	0092      	lsls	r2, r2, #2
 80036dc:	4093      	lsls	r3, r2
 80036de:	69ba      	ldr	r2, [r7, #24]
 80036e0:	4313      	orrs	r3, r2
 80036e2:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 80036e4:	4935      	ldr	r1, [pc, #212]	@ (80037bc <HAL_GPIO_Init+0x2ec>)
 80036e6:	69fb      	ldr	r3, [r7, #28]
 80036e8:	089b      	lsrs	r3, r3, #2
 80036ea:	3302      	adds	r3, #2
 80036ec:	69ba      	ldr	r2, [r7, #24]
 80036ee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80036f2:	4b38      	ldr	r3, [pc, #224]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 80036f4:	689b      	ldr	r3, [r3, #8]
 80036f6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80036f8:	693b      	ldr	r3, [r7, #16]
 80036fa:	43db      	mvns	r3, r3
 80036fc:	69ba      	ldr	r2, [r7, #24]
 80036fe:	4013      	ands	r3, r2
 8003700:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8003702:	683b      	ldr	r3, [r7, #0]
 8003704:	685b      	ldr	r3, [r3, #4]
 8003706:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 800370a:	2b00      	cmp	r3, #0
 800370c:	d003      	beq.n	8003716 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800370e:	69ba      	ldr	r2, [r7, #24]
 8003710:	693b      	ldr	r3, [r7, #16]
 8003712:	4313      	orrs	r3, r2
 8003714:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003716:	4a2f      	ldr	r2, [pc, #188]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 8003718:	69bb      	ldr	r3, [r7, #24]
 800371a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 800371c:	4b2d      	ldr	r3, [pc, #180]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 800371e:	68db      	ldr	r3, [r3, #12]
 8003720:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003722:	693b      	ldr	r3, [r7, #16]
 8003724:	43db      	mvns	r3, r3
 8003726:	69ba      	ldr	r2, [r7, #24]
 8003728:	4013      	ands	r3, r2
 800372a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800372c:	683b      	ldr	r3, [r7, #0]
 800372e:	685b      	ldr	r3, [r3, #4]
 8003730:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8003734:	2b00      	cmp	r3, #0
 8003736:	d003      	beq.n	8003740 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003738:	69ba      	ldr	r2, [r7, #24]
 800373a:	693b      	ldr	r3, [r7, #16]
 800373c:	4313      	orrs	r3, r2
 800373e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003740:	4a24      	ldr	r2, [pc, #144]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 8003742:	69bb      	ldr	r3, [r7, #24]
 8003744:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8003746:	4b23      	ldr	r3, [pc, #140]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 8003748:	685b      	ldr	r3, [r3, #4]
 800374a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800374c:	693b      	ldr	r3, [r7, #16]
 800374e:	43db      	mvns	r3, r3
 8003750:	69ba      	ldr	r2, [r7, #24]
 8003752:	4013      	ands	r3, r2
 8003754:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8003756:	683b      	ldr	r3, [r7, #0]
 8003758:	685b      	ldr	r3, [r3, #4]
 800375a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800375e:	2b00      	cmp	r3, #0
 8003760:	d003      	beq.n	800376a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003762:	69ba      	ldr	r2, [r7, #24]
 8003764:	693b      	ldr	r3, [r7, #16]
 8003766:	4313      	orrs	r3, r2
 8003768:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 800376a:	4a1a      	ldr	r2, [pc, #104]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 800376c:	69bb      	ldr	r3, [r7, #24]
 800376e:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003770:	4b18      	ldr	r3, [pc, #96]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 8003772:	681b      	ldr	r3, [r3, #0]
 8003774:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003776:	693b      	ldr	r3, [r7, #16]
 8003778:	43db      	mvns	r3, r3
 800377a:	69ba      	ldr	r2, [r7, #24]
 800377c:	4013      	ands	r3, r2
 800377e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8003780:	683b      	ldr	r3, [r7, #0]
 8003782:	685b      	ldr	r3, [r3, #4]
 8003784:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003788:	2b00      	cmp	r3, #0
 800378a:	d003      	beq.n	8003794 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 800378c:	69ba      	ldr	r2, [r7, #24]
 800378e:	693b      	ldr	r3, [r7, #16]
 8003790:	4313      	orrs	r3, r2
 8003792:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003794:	4a0f      	ldr	r2, [pc, #60]	@ (80037d4 <HAL_GPIO_Init+0x304>)
 8003796:	69bb      	ldr	r3, [r7, #24]
 8003798:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800379a:	69fb      	ldr	r3, [r7, #28]
 800379c:	3301      	adds	r3, #1
 800379e:	61fb      	str	r3, [r7, #28]
 80037a0:	69fb      	ldr	r3, [r7, #28]
 80037a2:	2b0f      	cmp	r3, #15
 80037a4:	f67f aea2 	bls.w	80034ec <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80037a8:	bf00      	nop
 80037aa:	bf00      	nop
 80037ac:	3724      	adds	r7, #36	@ 0x24
 80037ae:	46bd      	mov	sp, r7
 80037b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037b4:	4770      	bx	lr
 80037b6:	bf00      	nop
 80037b8:	40023800 	.word	0x40023800
 80037bc:	40013800 	.word	0x40013800
 80037c0:	40020000 	.word	0x40020000
 80037c4:	40020400 	.word	0x40020400
 80037c8:	40020800 	.word	0x40020800
 80037cc:	40020c00 	.word	0x40020c00
 80037d0:	40021000 	.word	0x40021000
 80037d4:	40013c00 	.word	0x40013c00

080037d8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80037d8:	b480      	push	{r7}
 80037da:	b083      	sub	sp, #12
 80037dc:	af00      	add	r7, sp, #0
 80037de:	6078      	str	r0, [r7, #4]
 80037e0:	460b      	mov	r3, r1
 80037e2:	807b      	strh	r3, [r7, #2]
 80037e4:	4613      	mov	r3, r2
 80037e6:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 80037e8:	787b      	ldrb	r3, [r7, #1]
 80037ea:	2b00      	cmp	r3, #0
 80037ec:	d003      	beq.n	80037f6 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80037ee:	887a      	ldrh	r2, [r7, #2]
 80037f0:	687b      	ldr	r3, [r7, #4]
 80037f2:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80037f4:	e003      	b.n	80037fe <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80037f6:	887b      	ldrh	r3, [r7, #2]
 80037f8:	041a      	lsls	r2, r3, #16
 80037fa:	687b      	ldr	r3, [r7, #4]
 80037fc:	619a      	str	r2, [r3, #24]
}
 80037fe:	bf00      	nop
 8003800:	370c      	adds	r7, #12
 8003802:	46bd      	mov	sp, r7
 8003804:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003808:	4770      	bx	lr
	...

0800380c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800380c:	b580      	push	{r7, lr}
 800380e:	b084      	sub	sp, #16
 8003810:	af00      	add	r7, sp, #0
 8003812:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003814:	687b      	ldr	r3, [r7, #4]
 8003816:	2b00      	cmp	r3, #0
 8003818:	d101      	bne.n	800381e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800381a:	2301      	movs	r3, #1
 800381c:	e12b      	b.n	8003a76 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800381e:	687b      	ldr	r3, [r7, #4]
 8003820:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003824:	b2db      	uxtb	r3, r3
 8003826:	2b00      	cmp	r3, #0
 8003828:	d106      	bne.n	8003838 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800382a:	687b      	ldr	r3, [r7, #4]
 800382c:	2200      	movs	r2, #0
 800382e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003832:	6878      	ldr	r0, [r7, #4]
 8003834:	f7fe ffa4 	bl	8002780 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003838:	687b      	ldr	r3, [r7, #4]
 800383a:	2224      	movs	r2, #36	@ 0x24
 800383c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003840:	687b      	ldr	r3, [r7, #4]
 8003842:	681b      	ldr	r3, [r3, #0]
 8003844:	681a      	ldr	r2, [r3, #0]
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	f022 0201 	bic.w	r2, r2, #1
 800384e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	681a      	ldr	r2, [r3, #0]
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 800385e:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003860:	687b      	ldr	r3, [r7, #4]
 8003862:	681b      	ldr	r3, [r3, #0]
 8003864:	681a      	ldr	r2, [r3, #0]
 8003866:	687b      	ldr	r3, [r7, #4]
 8003868:	681b      	ldr	r3, [r3, #0]
 800386a:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 800386e:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003870:	f002 f8e0 	bl	8005a34 <HAL_RCC_GetPCLK1Freq>
 8003874:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003876:	687b      	ldr	r3, [r7, #4]
 8003878:	685b      	ldr	r3, [r3, #4]
 800387a:	4a81      	ldr	r2, [pc, #516]	@ (8003a80 <HAL_I2C_Init+0x274>)
 800387c:	4293      	cmp	r3, r2
 800387e:	d807      	bhi.n	8003890 <HAL_I2C_Init+0x84>
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	4a80      	ldr	r2, [pc, #512]	@ (8003a84 <HAL_I2C_Init+0x278>)
 8003884:	4293      	cmp	r3, r2
 8003886:	bf94      	ite	ls
 8003888:	2301      	movls	r3, #1
 800388a:	2300      	movhi	r3, #0
 800388c:	b2db      	uxtb	r3, r3
 800388e:	e006      	b.n	800389e <HAL_I2C_Init+0x92>
 8003890:	68fb      	ldr	r3, [r7, #12]
 8003892:	4a7d      	ldr	r2, [pc, #500]	@ (8003a88 <HAL_I2C_Init+0x27c>)
 8003894:	4293      	cmp	r3, r2
 8003896:	bf94      	ite	ls
 8003898:	2301      	movls	r3, #1
 800389a:	2300      	movhi	r3, #0
 800389c:	b2db      	uxtb	r3, r3
 800389e:	2b00      	cmp	r3, #0
 80038a0:	d001      	beq.n	80038a6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80038a2:	2301      	movs	r3, #1
 80038a4:	e0e7      	b.n	8003a76 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	4a78      	ldr	r2, [pc, #480]	@ (8003a8c <HAL_I2C_Init+0x280>)
 80038aa:	fba2 2303 	umull	r2, r3, r2, r3
 80038ae:	0c9b      	lsrs	r3, r3, #18
 80038b0:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	681b      	ldr	r3, [r3, #0]
 80038b6:	685b      	ldr	r3, [r3, #4]
 80038b8:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038bc:	687b      	ldr	r3, [r7, #4]
 80038be:	681b      	ldr	r3, [r3, #0]
 80038c0:	68ba      	ldr	r2, [r7, #8]
 80038c2:	430a      	orrs	r2, r1
 80038c4:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80038c6:	687b      	ldr	r3, [r7, #4]
 80038c8:	681b      	ldr	r3, [r3, #0]
 80038ca:	6a1b      	ldr	r3, [r3, #32]
 80038cc:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	685b      	ldr	r3, [r3, #4]
 80038d4:	4a6a      	ldr	r2, [pc, #424]	@ (8003a80 <HAL_I2C_Init+0x274>)
 80038d6:	4293      	cmp	r3, r2
 80038d8:	d802      	bhi.n	80038e0 <HAL_I2C_Init+0xd4>
 80038da:	68bb      	ldr	r3, [r7, #8]
 80038dc:	3301      	adds	r3, #1
 80038de:	e009      	b.n	80038f4 <HAL_I2C_Init+0xe8>
 80038e0:	68bb      	ldr	r3, [r7, #8]
 80038e2:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 80038e6:	fb02 f303 	mul.w	r3, r2, r3
 80038ea:	4a69      	ldr	r2, [pc, #420]	@ (8003a90 <HAL_I2C_Init+0x284>)
 80038ec:	fba2 2303 	umull	r2, r3, r2, r3
 80038f0:	099b      	lsrs	r3, r3, #6
 80038f2:	3301      	adds	r3, #1
 80038f4:	687a      	ldr	r2, [r7, #4]
 80038f6:	6812      	ldr	r2, [r2, #0]
 80038f8:	430b      	orrs	r3, r1
 80038fa:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80038fc:	687b      	ldr	r3, [r7, #4]
 80038fe:	681b      	ldr	r3, [r3, #0]
 8003900:	69db      	ldr	r3, [r3, #28]
 8003902:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003906:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	685b      	ldr	r3, [r3, #4]
 800390e:	495c      	ldr	r1, [pc, #368]	@ (8003a80 <HAL_I2C_Init+0x274>)
 8003910:	428b      	cmp	r3, r1
 8003912:	d819      	bhi.n	8003948 <HAL_I2C_Init+0x13c>
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	1e59      	subs	r1, r3, #1
 8003918:	687b      	ldr	r3, [r7, #4]
 800391a:	685b      	ldr	r3, [r3, #4]
 800391c:	005b      	lsls	r3, r3, #1
 800391e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003922:	1c59      	adds	r1, r3, #1
 8003924:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003928:	400b      	ands	r3, r1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d00a      	beq.n	8003944 <HAL_I2C_Init+0x138>
 800392e:	68fb      	ldr	r3, [r7, #12]
 8003930:	1e59      	subs	r1, r3, #1
 8003932:	687b      	ldr	r3, [r7, #4]
 8003934:	685b      	ldr	r3, [r3, #4]
 8003936:	005b      	lsls	r3, r3, #1
 8003938:	fbb1 f3f3 	udiv	r3, r1, r3
 800393c:	3301      	adds	r3, #1
 800393e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003942:	e051      	b.n	80039e8 <HAL_I2C_Init+0x1dc>
 8003944:	2304      	movs	r3, #4
 8003946:	e04f      	b.n	80039e8 <HAL_I2C_Init+0x1dc>
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	689b      	ldr	r3, [r3, #8]
 800394c:	2b00      	cmp	r3, #0
 800394e:	d111      	bne.n	8003974 <HAL_I2C_Init+0x168>
 8003950:	68fb      	ldr	r3, [r7, #12]
 8003952:	1e58      	subs	r0, r3, #1
 8003954:	687b      	ldr	r3, [r7, #4]
 8003956:	6859      	ldr	r1, [r3, #4]
 8003958:	460b      	mov	r3, r1
 800395a:	005b      	lsls	r3, r3, #1
 800395c:	440b      	add	r3, r1
 800395e:	fbb0 f3f3 	udiv	r3, r0, r3
 8003962:	3301      	adds	r3, #1
 8003964:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003968:	2b00      	cmp	r3, #0
 800396a:	bf0c      	ite	eq
 800396c:	2301      	moveq	r3, #1
 800396e:	2300      	movne	r3, #0
 8003970:	b2db      	uxtb	r3, r3
 8003972:	e012      	b.n	800399a <HAL_I2C_Init+0x18e>
 8003974:	68fb      	ldr	r3, [r7, #12]
 8003976:	1e58      	subs	r0, r3, #1
 8003978:	687b      	ldr	r3, [r7, #4]
 800397a:	6859      	ldr	r1, [r3, #4]
 800397c:	460b      	mov	r3, r1
 800397e:	009b      	lsls	r3, r3, #2
 8003980:	440b      	add	r3, r1
 8003982:	0099      	lsls	r1, r3, #2
 8003984:	440b      	add	r3, r1
 8003986:	fbb0 f3f3 	udiv	r3, r0, r3
 800398a:	3301      	adds	r3, #1
 800398c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003990:	2b00      	cmp	r3, #0
 8003992:	bf0c      	ite	eq
 8003994:	2301      	moveq	r3, #1
 8003996:	2300      	movne	r3, #0
 8003998:	b2db      	uxtb	r3, r3
 800399a:	2b00      	cmp	r3, #0
 800399c:	d001      	beq.n	80039a2 <HAL_I2C_Init+0x196>
 800399e:	2301      	movs	r3, #1
 80039a0:	e022      	b.n	80039e8 <HAL_I2C_Init+0x1dc>
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	689b      	ldr	r3, [r3, #8]
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d10e      	bne.n	80039c8 <HAL_I2C_Init+0x1bc>
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	1e58      	subs	r0, r3, #1
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	6859      	ldr	r1, [r3, #4]
 80039b2:	460b      	mov	r3, r1
 80039b4:	005b      	lsls	r3, r3, #1
 80039b6:	440b      	add	r3, r1
 80039b8:	fbb0 f3f3 	udiv	r3, r0, r3
 80039bc:	3301      	adds	r3, #1
 80039be:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039c2:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 80039c6:	e00f      	b.n	80039e8 <HAL_I2C_Init+0x1dc>
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	1e58      	subs	r0, r3, #1
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	6859      	ldr	r1, [r3, #4]
 80039d0:	460b      	mov	r3, r1
 80039d2:	009b      	lsls	r3, r3, #2
 80039d4:	440b      	add	r3, r1
 80039d6:	0099      	lsls	r1, r3, #2
 80039d8:	440b      	add	r3, r1
 80039da:	fbb0 f3f3 	udiv	r3, r0, r3
 80039de:	3301      	adds	r3, #1
 80039e0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80039e4:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80039e8:	6879      	ldr	r1, [r7, #4]
 80039ea:	6809      	ldr	r1, [r1, #0]
 80039ec:	4313      	orrs	r3, r2
 80039ee:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 80039f0:	687b      	ldr	r3, [r7, #4]
 80039f2:	681b      	ldr	r3, [r3, #0]
 80039f4:	681b      	ldr	r3, [r3, #0]
 80039f6:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 80039fa:	687b      	ldr	r3, [r7, #4]
 80039fc:	69da      	ldr	r2, [r3, #28]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	6a1b      	ldr	r3, [r3, #32]
 8003a02:	431a      	orrs	r2, r3
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	681b      	ldr	r3, [r3, #0]
 8003a08:	430a      	orrs	r2, r1
 8003a0a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	681b      	ldr	r3, [r3, #0]
 8003a10:	689b      	ldr	r3, [r3, #8]
 8003a12:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003a16:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003a1a:	687a      	ldr	r2, [r7, #4]
 8003a1c:	6911      	ldr	r1, [r2, #16]
 8003a1e:	687a      	ldr	r2, [r7, #4]
 8003a20:	68d2      	ldr	r2, [r2, #12]
 8003a22:	4311      	orrs	r1, r2
 8003a24:	687a      	ldr	r2, [r7, #4]
 8003a26:	6812      	ldr	r2, [r2, #0]
 8003a28:	430b      	orrs	r3, r1
 8003a2a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	68db      	ldr	r3, [r3, #12]
 8003a32:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	695a      	ldr	r2, [r3, #20]
 8003a3a:	687b      	ldr	r3, [r7, #4]
 8003a3c:	699b      	ldr	r3, [r3, #24]
 8003a3e:	431a      	orrs	r2, r3
 8003a40:	687b      	ldr	r3, [r7, #4]
 8003a42:	681b      	ldr	r3, [r3, #0]
 8003a44:	430a      	orrs	r2, r1
 8003a46:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003a48:	687b      	ldr	r3, [r7, #4]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	681b      	ldr	r3, [r3, #0]
 8003a52:	f042 0201 	orr.w	r2, r2, #1
 8003a56:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003a58:	687b      	ldr	r3, [r7, #4]
 8003a5a:	2200      	movs	r2, #0
 8003a5c:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8003a5e:	687b      	ldr	r3, [r7, #4]
 8003a60:	2220      	movs	r2, #32
 8003a62:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003a66:	687b      	ldr	r3, [r7, #4]
 8003a68:	2200      	movs	r2, #0
 8003a6a:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a6c:	687b      	ldr	r3, [r7, #4]
 8003a6e:	2200      	movs	r2, #0
 8003a70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 8003a74:	2300      	movs	r3, #0
}
 8003a76:	4618      	mov	r0, r3
 8003a78:	3710      	adds	r7, #16
 8003a7a:	46bd      	mov	sp, r7
 8003a7c:	bd80      	pop	{r7, pc}
 8003a7e:	bf00      	nop
 8003a80:	000186a0 	.word	0x000186a0
 8003a84:	001e847f 	.word	0x001e847f
 8003a88:	003d08ff 	.word	0x003d08ff
 8003a8c:	431bde83 	.word	0x431bde83
 8003a90:	10624dd3 	.word	0x10624dd3

08003a94 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b088      	sub	sp, #32
 8003a98:	af02      	add	r7, sp, #8
 8003a9a:	60f8      	str	r0, [r7, #12]
 8003a9c:	607a      	str	r2, [r7, #4]
 8003a9e:	461a      	mov	r2, r3
 8003aa0:	460b      	mov	r3, r1
 8003aa2:	817b      	strh	r3, [r7, #10]
 8003aa4:	4613      	mov	r3, r2
 8003aa6:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003aa8:	f7ff fb3e 	bl	8003128 <HAL_GetTick>
 8003aac:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003ab4:	b2db      	uxtb	r3, r3
 8003ab6:	2b20      	cmp	r3, #32
 8003ab8:	f040 80e0 	bne.w	8003c7c <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003abc:	697b      	ldr	r3, [r7, #20]
 8003abe:	9300      	str	r3, [sp, #0]
 8003ac0:	2319      	movs	r3, #25
 8003ac2:	2201      	movs	r2, #1
 8003ac4:	4970      	ldr	r1, [pc, #448]	@ (8003c88 <HAL_I2C_Master_Transmit+0x1f4>)
 8003ac6:	68f8      	ldr	r0, [r7, #12]
 8003ac8:	f001 f90e 	bl	8004ce8 <I2C_WaitOnFlagUntilTimeout>
 8003acc:	4603      	mov	r3, r0
 8003ace:	2b00      	cmp	r3, #0
 8003ad0:	d001      	beq.n	8003ad6 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 8003ad2:	2302      	movs	r3, #2
 8003ad4:	e0d3      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003adc:	2b01      	cmp	r3, #1
 8003ade:	d101      	bne.n	8003ae4 <HAL_I2C_Master_Transmit+0x50>
 8003ae0:	2302      	movs	r3, #2
 8003ae2:	e0cc      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x1ea>
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	2201      	movs	r2, #1
 8003ae8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681b      	ldr	r3, [r3, #0]
 8003af2:	f003 0301 	and.w	r3, r3, #1
 8003af6:	2b01      	cmp	r3, #1
 8003af8:	d007      	beq.n	8003b0a <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003afa:	68fb      	ldr	r3, [r7, #12]
 8003afc:	681b      	ldr	r3, [r3, #0]
 8003afe:	681a      	ldr	r2, [r3, #0]
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	f042 0201 	orr.w	r2, r2, #1
 8003b08:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003b0a:	68fb      	ldr	r3, [r7, #12]
 8003b0c:	681b      	ldr	r3, [r3, #0]
 8003b0e:	681a      	ldr	r2, [r3, #0]
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	681b      	ldr	r3, [r3, #0]
 8003b14:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003b18:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003b1a:	68fb      	ldr	r3, [r7, #12]
 8003b1c:	2221      	movs	r2, #33	@ 0x21
 8003b1e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003b22:	68fb      	ldr	r3, [r7, #12]
 8003b24:	2210      	movs	r2, #16
 8003b26:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003b2a:	68fb      	ldr	r3, [r7, #12]
 8003b2c:	2200      	movs	r2, #0
 8003b2e:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003b30:	68fb      	ldr	r3, [r7, #12]
 8003b32:	687a      	ldr	r2, [r7, #4]
 8003b34:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003b36:	68fb      	ldr	r3, [r7, #12]
 8003b38:	893a      	ldrh	r2, [r7, #8]
 8003b3a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b3c:	68fb      	ldr	r3, [r7, #12]
 8003b3e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b40:	b29a      	uxth	r2, r3
 8003b42:	68fb      	ldr	r3, [r7, #12]
 8003b44:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	4a50      	ldr	r2, [pc, #320]	@ (8003c8c <HAL_I2C_Master_Transmit+0x1f8>)
 8003b4a:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003b4c:	8979      	ldrh	r1, [r7, #10]
 8003b4e:	697b      	ldr	r3, [r7, #20]
 8003b50:	6a3a      	ldr	r2, [r7, #32]
 8003b52:	68f8      	ldr	r0, [r7, #12]
 8003b54:	f000 fdfa 	bl	800474c <I2C_MasterRequestWrite>
 8003b58:	4603      	mov	r3, r0
 8003b5a:	2b00      	cmp	r3, #0
 8003b5c:	d001      	beq.n	8003b62 <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 8003b5e:	2301      	movs	r3, #1
 8003b60:	e08d      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b62:	2300      	movs	r3, #0
 8003b64:	613b      	str	r3, [r7, #16]
 8003b66:	68fb      	ldr	r3, [r7, #12]
 8003b68:	681b      	ldr	r3, [r3, #0]
 8003b6a:	695b      	ldr	r3, [r3, #20]
 8003b6c:	613b      	str	r3, [r7, #16]
 8003b6e:	68fb      	ldr	r3, [r7, #12]
 8003b70:	681b      	ldr	r3, [r3, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	613b      	str	r3, [r7, #16]
 8003b76:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 8003b78:	e066      	b.n	8003c48 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003b7a:	697a      	ldr	r2, [r7, #20]
 8003b7c:	6a39      	ldr	r1, [r7, #32]
 8003b7e:	68f8      	ldr	r0, [r7, #12]
 8003b80:	f001 f9cc 	bl	8004f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8003b84:	4603      	mov	r3, r0
 8003b86:	2b00      	cmp	r3, #0
 8003b88:	d00d      	beq.n	8003ba6 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003b8a:	68fb      	ldr	r3, [r7, #12]
 8003b8c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003b8e:	2b04      	cmp	r3, #4
 8003b90:	d107      	bne.n	8003ba2 <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b92:	68fb      	ldr	r3, [r7, #12]
 8003b94:	681b      	ldr	r3, [r3, #0]
 8003b96:	681a      	ldr	r2, [r3, #0]
 8003b98:	68fb      	ldr	r3, [r7, #12]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ba0:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003ba2:	2301      	movs	r3, #1
 8003ba4:	e06b      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ba6:	68fb      	ldr	r3, [r7, #12]
 8003ba8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003baa:	781a      	ldrb	r2, [r3, #0]
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bb6:	1c5a      	adds	r2, r3, #1
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bc0:	b29b      	uxth	r3, r3
 8003bc2:	3b01      	subs	r3, #1
 8003bc4:	b29a      	uxth	r2, r3
 8003bc6:	68fb      	ldr	r3, [r7, #12]
 8003bc8:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003bca:	68fb      	ldr	r3, [r7, #12]
 8003bcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bce:	3b01      	subs	r3, #1
 8003bd0:	b29a      	uxth	r2, r3
 8003bd2:	68fb      	ldr	r3, [r7, #12]
 8003bd4:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	695b      	ldr	r3, [r3, #20]
 8003bdc:	f003 0304 	and.w	r3, r3, #4
 8003be0:	2b04      	cmp	r3, #4
 8003be2:	d11b      	bne.n	8003c1c <HAL_I2C_Master_Transmit+0x188>
 8003be4:	68fb      	ldr	r3, [r7, #12]
 8003be6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003be8:	2b00      	cmp	r3, #0
 8003bea:	d017      	beq.n	8003c1c <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003bec:	68fb      	ldr	r3, [r7, #12]
 8003bee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bf0:	781a      	ldrb	r2, [r3, #0]
 8003bf2:	68fb      	ldr	r3, [r7, #12]
 8003bf4:	681b      	ldr	r3, [r3, #0]
 8003bf6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003bfc:	1c5a      	adds	r2, r3, #1
 8003bfe:	68fb      	ldr	r3, [r7, #12]
 8003c00:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 8003c02:	68fb      	ldr	r3, [r7, #12]
 8003c04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c06:	b29b      	uxth	r3, r3
 8003c08:	3b01      	subs	r3, #1
 8003c0a:	b29a      	uxth	r2, r3
 8003c0c:	68fb      	ldr	r3, [r7, #12]
 8003c0e:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003c10:	68fb      	ldr	r3, [r7, #12]
 8003c12:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c14:	3b01      	subs	r3, #1
 8003c16:	b29a      	uxth	r2, r3
 8003c18:	68fb      	ldr	r3, [r7, #12]
 8003c1a:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c1c:	697a      	ldr	r2, [r7, #20]
 8003c1e:	6a39      	ldr	r1, [r7, #32]
 8003c20:	68f8      	ldr	r0, [r7, #12]
 8003c22:	f001 f9c3 	bl	8004fac <I2C_WaitOnBTFFlagUntilTimeout>
 8003c26:	4603      	mov	r3, r0
 8003c28:	2b00      	cmp	r3, #0
 8003c2a:	d00d      	beq.n	8003c48 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003c2c:	68fb      	ldr	r3, [r7, #12]
 8003c2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003c30:	2b04      	cmp	r3, #4
 8003c32:	d107      	bne.n	8003c44 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	681b      	ldr	r3, [r3, #0]
 8003c38:	681a      	ldr	r2, [r3, #0]
 8003c3a:	68fb      	ldr	r3, [r7, #12]
 8003c3c:	681b      	ldr	r3, [r3, #0]
 8003c3e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c42:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003c44:	2301      	movs	r3, #1
 8003c46:	e01a      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 8003c48:	68fb      	ldr	r3, [r7, #12]
 8003c4a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c4c:	2b00      	cmp	r3, #0
 8003c4e:	d194      	bne.n	8003b7a <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c50:	68fb      	ldr	r3, [r7, #12]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	681a      	ldr	r2, [r3, #0]
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c5e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003c60:	68fb      	ldr	r3, [r7, #12]
 8003c62:	2220      	movs	r2, #32
 8003c64:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c68:	68fb      	ldr	r3, [r7, #12]
 8003c6a:	2200      	movs	r2, #0
 8003c6c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003c70:	68fb      	ldr	r3, [r7, #12]
 8003c72:	2200      	movs	r2, #0
 8003c74:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003c78:	2300      	movs	r3, #0
 8003c7a:	e000      	b.n	8003c7e <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 8003c7c:	2302      	movs	r3, #2
  }
}
 8003c7e:	4618      	mov	r0, r3
 8003c80:	3718      	adds	r7, #24
 8003c82:	46bd      	mov	sp, r7
 8003c84:	bd80      	pop	{r7, pc}
 8003c86:	bf00      	nop
 8003c88:	00100002 	.word	0x00100002
 8003c8c:	ffff0000 	.word	0xffff0000

08003c90 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003c90:	b580      	push	{r7, lr}
 8003c92:	b08c      	sub	sp, #48	@ 0x30
 8003c94:	af02      	add	r7, sp, #8
 8003c96:	60f8      	str	r0, [r7, #12]
 8003c98:	607a      	str	r2, [r7, #4]
 8003c9a:	461a      	mov	r2, r3
 8003c9c:	460b      	mov	r3, r1
 8003c9e:	817b      	strh	r3, [r7, #10]
 8003ca0:	4613      	mov	r3, r2
 8003ca2:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003ca4:	f7ff fa40 	bl	8003128 <HAL_GetTick>
 8003ca8:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003caa:	68fb      	ldr	r3, [r7, #12]
 8003cac:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003cb0:	b2db      	uxtb	r3, r3
 8003cb2:	2b20      	cmp	r3, #32
 8003cb4:	f040 8217 	bne.w	80040e6 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003cb8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cba:	9300      	str	r3, [sp, #0]
 8003cbc:	2319      	movs	r3, #25
 8003cbe:	2201      	movs	r2, #1
 8003cc0:	497c      	ldr	r1, [pc, #496]	@ (8003eb4 <HAL_I2C_Master_Receive+0x224>)
 8003cc2:	68f8      	ldr	r0, [r7, #12]
 8003cc4:	f001 f810 	bl	8004ce8 <I2C_WaitOnFlagUntilTimeout>
 8003cc8:	4603      	mov	r3, r0
 8003cca:	2b00      	cmp	r3, #0
 8003ccc:	d001      	beq.n	8003cd2 <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003cce:	2302      	movs	r3, #2
 8003cd0:	e20a      	b.n	80040e8 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003cd8:	2b01      	cmp	r3, #1
 8003cda:	d101      	bne.n	8003ce0 <HAL_I2C_Master_Receive+0x50>
 8003cdc:	2302      	movs	r3, #2
 8003cde:	e203      	b.n	80040e8 <HAL_I2C_Master_Receive+0x458>
 8003ce0:	68fb      	ldr	r3, [r7, #12]
 8003ce2:	2201      	movs	r2, #1
 8003ce4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ce8:	68fb      	ldr	r3, [r7, #12]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	681b      	ldr	r3, [r3, #0]
 8003cee:	f003 0301 	and.w	r3, r3, #1
 8003cf2:	2b01      	cmp	r3, #1
 8003cf4:	d007      	beq.n	8003d06 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003cf6:	68fb      	ldr	r3, [r7, #12]
 8003cf8:	681b      	ldr	r3, [r3, #0]
 8003cfa:	681a      	ldr	r2, [r3, #0]
 8003cfc:	68fb      	ldr	r3, [r7, #12]
 8003cfe:	681b      	ldr	r3, [r3, #0]
 8003d00:	f042 0201 	orr.w	r2, r2, #1
 8003d04:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003d06:	68fb      	ldr	r3, [r7, #12]
 8003d08:	681b      	ldr	r3, [r3, #0]
 8003d0a:	681a      	ldr	r2, [r3, #0]
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003d14:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003d16:	68fb      	ldr	r3, [r7, #12]
 8003d18:	2222      	movs	r2, #34	@ 0x22
 8003d1a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003d1e:	68fb      	ldr	r3, [r7, #12]
 8003d20:	2210      	movs	r2, #16
 8003d22:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003d26:	68fb      	ldr	r3, [r7, #12]
 8003d28:	2200      	movs	r2, #0
 8003d2a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	687a      	ldr	r2, [r7, #4]
 8003d30:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	893a      	ldrh	r2, [r7, #8]
 8003d36:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d3c:	b29a      	uxth	r2, r3
 8003d3e:	68fb      	ldr	r3, [r7, #12]
 8003d40:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003d42:	68fb      	ldr	r3, [r7, #12]
 8003d44:	4a5c      	ldr	r2, [pc, #368]	@ (8003eb8 <HAL_I2C_Master_Receive+0x228>)
 8003d46:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 8003d48:	8979      	ldrh	r1, [r7, #10]
 8003d4a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003d4e:	68f8      	ldr	r0, [r7, #12]
 8003d50:	f000 fd7e 	bl	8004850 <I2C_MasterRequestRead>
 8003d54:	4603      	mov	r3, r0
 8003d56:	2b00      	cmp	r3, #0
 8003d58:	d001      	beq.n	8003d5e <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 8003d5a:	2301      	movs	r3, #1
 8003d5c:	e1c4      	b.n	80040e8 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	d113      	bne.n	8003d8e <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003d66:	2300      	movs	r3, #0
 8003d68:	623b      	str	r3, [r7, #32]
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	681b      	ldr	r3, [r3, #0]
 8003d6e:	695b      	ldr	r3, [r3, #20]
 8003d70:	623b      	str	r3, [r7, #32]
 8003d72:	68fb      	ldr	r3, [r7, #12]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	699b      	ldr	r3, [r3, #24]
 8003d78:	623b      	str	r3, [r7, #32]
 8003d7a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d7c:	68fb      	ldr	r3, [r7, #12]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	681a      	ldr	r2, [r3, #0]
 8003d82:	68fb      	ldr	r3, [r7, #12]
 8003d84:	681b      	ldr	r3, [r3, #0]
 8003d86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d8a:	601a      	str	r2, [r3, #0]
 8003d8c:	e198      	b.n	80040c0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d92:	2b01      	cmp	r3, #1
 8003d94:	d11b      	bne.n	8003dce <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d96:	68fb      	ldr	r3, [r7, #12]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	681a      	ldr	r2, [r3, #0]
 8003d9c:	68fb      	ldr	r3, [r7, #12]
 8003d9e:	681b      	ldr	r3, [r3, #0]
 8003da0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003da4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003da6:	2300      	movs	r3, #0
 8003da8:	61fb      	str	r3, [r7, #28]
 8003daa:	68fb      	ldr	r3, [r7, #12]
 8003dac:	681b      	ldr	r3, [r3, #0]
 8003dae:	695b      	ldr	r3, [r3, #20]
 8003db0:	61fb      	str	r3, [r7, #28]
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	699b      	ldr	r3, [r3, #24]
 8003db8:	61fb      	str	r3, [r7, #28]
 8003dba:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003dbc:	68fb      	ldr	r3, [r7, #12]
 8003dbe:	681b      	ldr	r3, [r3, #0]
 8003dc0:	681a      	ldr	r2, [r3, #0]
 8003dc2:	68fb      	ldr	r3, [r7, #12]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003dca:	601a      	str	r2, [r3, #0]
 8003dcc:	e178      	b.n	80040c0 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003dce:	68fb      	ldr	r3, [r7, #12]
 8003dd0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dd2:	2b02      	cmp	r3, #2
 8003dd4:	d11b      	bne.n	8003e0e <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	681b      	ldr	r3, [r3, #0]
 8003dda:	681a      	ldr	r2, [r3, #0]
 8003ddc:	68fb      	ldr	r3, [r7, #12]
 8003dde:	681b      	ldr	r3, [r3, #0]
 8003de0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003de4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003de6:	68fb      	ldr	r3, [r7, #12]
 8003de8:	681b      	ldr	r3, [r3, #0]
 8003dea:	681a      	ldr	r2, [r3, #0]
 8003dec:	68fb      	ldr	r3, [r7, #12]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003df4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003df6:	2300      	movs	r3, #0
 8003df8:	61bb      	str	r3, [r7, #24]
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	695b      	ldr	r3, [r3, #20]
 8003e00:	61bb      	str	r3, [r7, #24]
 8003e02:	68fb      	ldr	r3, [r7, #12]
 8003e04:	681b      	ldr	r3, [r3, #0]
 8003e06:	699b      	ldr	r3, [r3, #24]
 8003e08:	61bb      	str	r3, [r7, #24]
 8003e0a:	69bb      	ldr	r3, [r7, #24]
 8003e0c:	e158      	b.n	80040c0 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	681b      	ldr	r3, [r3, #0]
 8003e12:	681a      	ldr	r2, [r3, #0]
 8003e14:	68fb      	ldr	r3, [r7, #12]
 8003e16:	681b      	ldr	r3, [r3, #0]
 8003e18:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003e1c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003e1e:	2300      	movs	r3, #0
 8003e20:	617b      	str	r3, [r7, #20]
 8003e22:	68fb      	ldr	r3, [r7, #12]
 8003e24:	681b      	ldr	r3, [r3, #0]
 8003e26:	695b      	ldr	r3, [r3, #20]
 8003e28:	617b      	str	r3, [r7, #20]
 8003e2a:	68fb      	ldr	r3, [r7, #12]
 8003e2c:	681b      	ldr	r3, [r3, #0]
 8003e2e:	699b      	ldr	r3, [r3, #24]
 8003e30:	617b      	str	r3, [r7, #20]
 8003e32:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003e34:	e144      	b.n	80040c0 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003e36:	68fb      	ldr	r3, [r7, #12]
 8003e38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3a:	2b03      	cmp	r3, #3
 8003e3c:	f200 80f1 	bhi.w	8004022 <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003e40:	68fb      	ldr	r3, [r7, #12]
 8003e42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e44:	2b01      	cmp	r3, #1
 8003e46:	d123      	bne.n	8003e90 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003e48:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003e4a:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f001 f8f5 	bl	800503c <I2C_WaitOnRXNEFlagUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e145      	b.n	80040e8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	691a      	ldr	r2, [r3, #16]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e66:	b2d2      	uxtb	r2, r2
 8003e68:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e6e:	1c5a      	adds	r2, r3, #1
 8003e70:	68fb      	ldr	r3, [r7, #12]
 8003e72:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e74:	68fb      	ldr	r3, [r7, #12]
 8003e76:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e78:	3b01      	subs	r3, #1
 8003e7a:	b29a      	uxth	r2, r3
 8003e7c:	68fb      	ldr	r3, [r7, #12]
 8003e7e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e84:	b29b      	uxth	r3, r3
 8003e86:	3b01      	subs	r3, #1
 8003e88:	b29a      	uxth	r2, r3
 8003e8a:	68fb      	ldr	r3, [r7, #12]
 8003e8c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003e8e:	e117      	b.n	80040c0 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e94:	2b02      	cmp	r3, #2
 8003e96:	d14e      	bne.n	8003f36 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e98:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e9a:	9300      	str	r3, [sp, #0]
 8003e9c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003e9e:	2200      	movs	r2, #0
 8003ea0:	4906      	ldr	r1, [pc, #24]	@ (8003ebc <HAL_I2C_Master_Receive+0x22c>)
 8003ea2:	68f8      	ldr	r0, [r7, #12]
 8003ea4:	f000 ff20 	bl	8004ce8 <I2C_WaitOnFlagUntilTimeout>
 8003ea8:	4603      	mov	r3, r0
 8003eaa:	2b00      	cmp	r3, #0
 8003eac:	d008      	beq.n	8003ec0 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003eae:	2301      	movs	r3, #1
 8003eb0:	e11a      	b.n	80040e8 <HAL_I2C_Master_Receive+0x458>
 8003eb2:	bf00      	nop
 8003eb4:	00100002 	.word	0x00100002
 8003eb8:	ffff0000 	.word	0xffff0000
 8003ebc:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ec0:	68fb      	ldr	r3, [r7, #12]
 8003ec2:	681b      	ldr	r3, [r3, #0]
 8003ec4:	681a      	ldr	r2, [r3, #0]
 8003ec6:	68fb      	ldr	r3, [r7, #12]
 8003ec8:	681b      	ldr	r3, [r3, #0]
 8003eca:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003ece:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ed0:	68fb      	ldr	r3, [r7, #12]
 8003ed2:	681b      	ldr	r3, [r3, #0]
 8003ed4:	691a      	ldr	r2, [r3, #16]
 8003ed6:	68fb      	ldr	r3, [r7, #12]
 8003ed8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eda:	b2d2      	uxtb	r2, r2
 8003edc:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ede:	68fb      	ldr	r3, [r7, #12]
 8003ee0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ee2:	1c5a      	adds	r2, r3, #1
 8003ee4:	68fb      	ldr	r3, [r7, #12]
 8003ee6:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eec:	3b01      	subs	r3, #1
 8003eee:	b29a      	uxth	r2, r3
 8003ef0:	68fb      	ldr	r3, [r7, #12]
 8003ef2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ef8:	b29b      	uxth	r3, r3
 8003efa:	3b01      	subs	r3, #1
 8003efc:	b29a      	uxth	r2, r3
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	691a      	ldr	r2, [r3, #16]
 8003f08:	68fb      	ldr	r3, [r7, #12]
 8003f0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f0c:	b2d2      	uxtb	r2, r2
 8003f0e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f14:	1c5a      	adds	r2, r3, #1
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f1a:	68fb      	ldr	r3, [r7, #12]
 8003f1c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f1e:	3b01      	subs	r3, #1
 8003f20:	b29a      	uxth	r2, r3
 8003f22:	68fb      	ldr	r3, [r7, #12]
 8003f24:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f2a:	b29b      	uxth	r3, r3
 8003f2c:	3b01      	subs	r3, #1
 8003f2e:	b29a      	uxth	r2, r3
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003f34:	e0c4      	b.n	80040c0 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f38:	9300      	str	r3, [sp, #0]
 8003f3a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f3c:	2200      	movs	r2, #0
 8003f3e:	496c      	ldr	r1, [pc, #432]	@ (80040f0 <HAL_I2C_Master_Receive+0x460>)
 8003f40:	68f8      	ldr	r0, [r7, #12]
 8003f42:	f000 fed1 	bl	8004ce8 <I2C_WaitOnFlagUntilTimeout>
 8003f46:	4603      	mov	r3, r0
 8003f48:	2b00      	cmp	r3, #0
 8003f4a:	d001      	beq.n	8003f50 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 8003f4c:	2301      	movs	r3, #1
 8003f4e:	e0cb      	b.n	80040e8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	681a      	ldr	r2, [r3, #0]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f5e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	691a      	ldr	r2, [r3, #16]
 8003f66:	68fb      	ldr	r3, [r7, #12]
 8003f68:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f6a:	b2d2      	uxtb	r2, r2
 8003f6c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f72:	1c5a      	adds	r2, r3, #1
 8003f74:	68fb      	ldr	r3, [r7, #12]
 8003f76:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f7c:	3b01      	subs	r3, #1
 8003f7e:	b29a      	uxth	r2, r3
 8003f80:	68fb      	ldr	r3, [r7, #12]
 8003f82:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f84:	68fb      	ldr	r3, [r7, #12]
 8003f86:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f88:	b29b      	uxth	r3, r3
 8003f8a:	3b01      	subs	r3, #1
 8003f8c:	b29a      	uxth	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003f92:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003f94:	9300      	str	r3, [sp, #0]
 8003f96:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003f98:	2200      	movs	r2, #0
 8003f9a:	4955      	ldr	r1, [pc, #340]	@ (80040f0 <HAL_I2C_Master_Receive+0x460>)
 8003f9c:	68f8      	ldr	r0, [r7, #12]
 8003f9e:	f000 fea3 	bl	8004ce8 <I2C_WaitOnFlagUntilTimeout>
 8003fa2:	4603      	mov	r3, r0
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d001      	beq.n	8003fac <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003fa8:	2301      	movs	r3, #1
 8003faa:	e09d      	b.n	80040e8 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	681a      	ldr	r2, [r3, #0]
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003fba:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fbc:	68fb      	ldr	r3, [r7, #12]
 8003fbe:	681b      	ldr	r3, [r3, #0]
 8003fc0:	691a      	ldr	r2, [r3, #16]
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fc6:	b2d2      	uxtb	r2, r2
 8003fc8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003fca:	68fb      	ldr	r3, [r7, #12]
 8003fcc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003fce:	1c5a      	adds	r2, r3, #1
 8003fd0:	68fb      	ldr	r3, [r7, #12]
 8003fd2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003fd8:	3b01      	subs	r3, #1
 8003fda:	b29a      	uxth	r2, r3
 8003fdc:	68fb      	ldr	r3, [r7, #12]
 8003fde:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	68fb      	ldr	r3, [r7, #12]
 8003fec:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004006:	68fb      	ldr	r3, [r7, #12]
 8004008:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800400a:	3b01      	subs	r3, #1
 800400c:	b29a      	uxth	r2, r3
 800400e:	68fb      	ldr	r3, [r7, #12]
 8004010:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004012:	68fb      	ldr	r3, [r7, #12]
 8004014:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004016:	b29b      	uxth	r3, r3
 8004018:	3b01      	subs	r3, #1
 800401a:	b29a      	uxth	r2, r3
 800401c:	68fb      	ldr	r3, [r7, #12]
 800401e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004020:	e04e      	b.n	80040c0 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8004022:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004024:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8004026:	68f8      	ldr	r0, [r7, #12]
 8004028:	f001 f808 	bl	800503c <I2C_WaitOnRXNEFlagUntilTimeout>
 800402c:	4603      	mov	r3, r0
 800402e:	2b00      	cmp	r3, #0
 8004030:	d001      	beq.n	8004036 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 8004032:	2301      	movs	r3, #1
 8004034:	e058      	b.n	80040e8 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004036:	68fb      	ldr	r3, [r7, #12]
 8004038:	681b      	ldr	r3, [r3, #0]
 800403a:	691a      	ldr	r2, [r3, #16]
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004040:	b2d2      	uxtb	r2, r2
 8004042:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004048:	1c5a      	adds	r2, r3, #1
 800404a:	68fb      	ldr	r3, [r7, #12]
 800404c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800404e:	68fb      	ldr	r3, [r7, #12]
 8004050:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004052:	3b01      	subs	r3, #1
 8004054:	b29a      	uxth	r2, r3
 8004056:	68fb      	ldr	r3, [r7, #12]
 8004058:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800405e:	b29b      	uxth	r3, r3
 8004060:	3b01      	subs	r3, #1
 8004062:	b29a      	uxth	r2, r3
 8004064:	68fb      	ldr	r3, [r7, #12]
 8004066:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	695b      	ldr	r3, [r3, #20]
 800406e:	f003 0304 	and.w	r3, r3, #4
 8004072:	2b04      	cmp	r3, #4
 8004074:	d124      	bne.n	80040c0 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 8004076:	68fb      	ldr	r3, [r7, #12]
 8004078:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800407a:	2b03      	cmp	r3, #3
 800407c:	d107      	bne.n	800408e <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800407e:	68fb      	ldr	r3, [r7, #12]
 8004080:	681b      	ldr	r3, [r3, #0]
 8004082:	681a      	ldr	r2, [r3, #0]
 8004084:	68fb      	ldr	r3, [r7, #12]
 8004086:	681b      	ldr	r3, [r3, #0]
 8004088:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800408c:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408e:	68fb      	ldr	r3, [r7, #12]
 8004090:	681b      	ldr	r3, [r3, #0]
 8004092:	691a      	ldr	r2, [r3, #16]
 8004094:	68fb      	ldr	r3, [r7, #12]
 8004096:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004098:	b2d2      	uxtb	r2, r2
 800409a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800409c:	68fb      	ldr	r3, [r7, #12]
 800409e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80040a0:	1c5a      	adds	r2, r3, #1
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80040a6:	68fb      	ldr	r3, [r7, #12]
 80040a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	68fb      	ldr	r3, [r7, #12]
 80040b0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80040b2:	68fb      	ldr	r3, [r7, #12]
 80040b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80040b6:	b29b      	uxth	r3, r3
 80040b8:	3b01      	subs	r3, #1
 80040ba:	b29a      	uxth	r2, r3
 80040bc:	68fb      	ldr	r3, [r7, #12]
 80040be:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80040c0:	68fb      	ldr	r3, [r7, #12]
 80040c2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80040c4:	2b00      	cmp	r3, #0
 80040c6:	f47f aeb6 	bne.w	8003e36 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	2220      	movs	r2, #32
 80040ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2200      	movs	r2, #0
 80040d6:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80040e2:	2300      	movs	r3, #0
 80040e4:	e000      	b.n	80040e8 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 80040e6:	2302      	movs	r3, #2
  }
}
 80040e8:	4618      	mov	r0, r3
 80040ea:	3728      	adds	r7, #40	@ 0x28
 80040ec:	46bd      	mov	sp, r7
 80040ee:	bd80      	pop	{r7, pc}
 80040f0:	00010004 	.word	0x00010004

080040f4 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80040f4:	b580      	push	{r7, lr}
 80040f6:	b088      	sub	sp, #32
 80040f8:	af02      	add	r7, sp, #8
 80040fa:	60f8      	str	r0, [r7, #12]
 80040fc:	4608      	mov	r0, r1
 80040fe:	4611      	mov	r1, r2
 8004100:	461a      	mov	r2, r3
 8004102:	4603      	mov	r3, r0
 8004104:	817b      	strh	r3, [r7, #10]
 8004106:	460b      	mov	r3, r1
 8004108:	813b      	strh	r3, [r7, #8]
 800410a:	4613      	mov	r3, r2
 800410c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800410e:	f7ff f80b 	bl	8003128 <HAL_GetTick>
 8004112:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004114:	68fb      	ldr	r3, [r7, #12]
 8004116:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800411a:	b2db      	uxtb	r3, r3
 800411c:	2b20      	cmp	r3, #32
 800411e:	f040 80d9 	bne.w	80042d4 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004122:	697b      	ldr	r3, [r7, #20]
 8004124:	9300      	str	r3, [sp, #0]
 8004126:	2319      	movs	r3, #25
 8004128:	2201      	movs	r2, #1
 800412a:	496d      	ldr	r1, [pc, #436]	@ (80042e0 <HAL_I2C_Mem_Write+0x1ec>)
 800412c:	68f8      	ldr	r0, [r7, #12]
 800412e:	f000 fddb 	bl	8004ce8 <I2C_WaitOnFlagUntilTimeout>
 8004132:	4603      	mov	r3, r0
 8004134:	2b00      	cmp	r3, #0
 8004136:	d001      	beq.n	800413c <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8004138:	2302      	movs	r3, #2
 800413a:	e0cc      	b.n	80042d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800413c:	68fb      	ldr	r3, [r7, #12]
 800413e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004142:	2b01      	cmp	r3, #1
 8004144:	d101      	bne.n	800414a <HAL_I2C_Mem_Write+0x56>
 8004146:	2302      	movs	r3, #2
 8004148:	e0c5      	b.n	80042d6 <HAL_I2C_Mem_Write+0x1e2>
 800414a:	68fb      	ldr	r3, [r7, #12]
 800414c:	2201      	movs	r2, #1
 800414e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004152:	68fb      	ldr	r3, [r7, #12]
 8004154:	681b      	ldr	r3, [r3, #0]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	f003 0301 	and.w	r3, r3, #1
 800415c:	2b01      	cmp	r3, #1
 800415e:	d007      	beq.n	8004170 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004160:	68fb      	ldr	r3, [r7, #12]
 8004162:	681b      	ldr	r3, [r3, #0]
 8004164:	681a      	ldr	r2, [r3, #0]
 8004166:	68fb      	ldr	r3, [r7, #12]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	f042 0201 	orr.w	r2, r2, #1
 800416e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004170:	68fb      	ldr	r3, [r7, #12]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	681a      	ldr	r2, [r3, #0]
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	681b      	ldr	r3, [r3, #0]
 800417a:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800417e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004180:	68fb      	ldr	r3, [r7, #12]
 8004182:	2221      	movs	r2, #33	@ 0x21
 8004184:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8004188:	68fb      	ldr	r3, [r7, #12]
 800418a:	2240      	movs	r2, #64	@ 0x40
 800418c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004190:	68fb      	ldr	r3, [r7, #12]
 8004192:	2200      	movs	r2, #0
 8004194:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004196:	68fb      	ldr	r3, [r7, #12]
 8004198:	6a3a      	ldr	r2, [r7, #32]
 800419a:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800419c:	68fb      	ldr	r3, [r7, #12]
 800419e:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80041a0:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80041a2:	68fb      	ldr	r3, [r7, #12]
 80041a4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80041a6:	b29a      	uxth	r2, r3
 80041a8:	68fb      	ldr	r3, [r7, #12]
 80041aa:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80041ac:	68fb      	ldr	r3, [r7, #12]
 80041ae:	4a4d      	ldr	r2, [pc, #308]	@ (80042e4 <HAL_I2C_Mem_Write+0x1f0>)
 80041b0:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80041b2:	88f8      	ldrh	r0, [r7, #6]
 80041b4:	893a      	ldrh	r2, [r7, #8]
 80041b6:	8979      	ldrh	r1, [r7, #10]
 80041b8:	697b      	ldr	r3, [r7, #20]
 80041ba:	9301      	str	r3, [sp, #4]
 80041bc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80041be:	9300      	str	r3, [sp, #0]
 80041c0:	4603      	mov	r3, r0
 80041c2:	68f8      	ldr	r0, [r7, #12]
 80041c4:	f000 fc12 	bl	80049ec <I2C_RequestMemoryWrite>
 80041c8:	4603      	mov	r3, r0
 80041ca:	2b00      	cmp	r3, #0
 80041cc:	d052      	beq.n	8004274 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 80041ce:	2301      	movs	r3, #1
 80041d0:	e081      	b.n	80042d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80041d2:	697a      	ldr	r2, [r7, #20]
 80041d4:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80041d6:	68f8      	ldr	r0, [r7, #12]
 80041d8:	f000 fea0 	bl	8004f1c <I2C_WaitOnTXEFlagUntilTimeout>
 80041dc:	4603      	mov	r3, r0
 80041de:	2b00      	cmp	r3, #0
 80041e0:	d00d      	beq.n	80041fe <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80041e2:	68fb      	ldr	r3, [r7, #12]
 80041e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80041e6:	2b04      	cmp	r3, #4
 80041e8:	d107      	bne.n	80041fa <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	681a      	ldr	r2, [r3, #0]
 80041f0:	68fb      	ldr	r3, [r7, #12]
 80041f2:	681b      	ldr	r3, [r3, #0]
 80041f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80041f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80041fa:	2301      	movs	r3, #1
 80041fc:	e06b      	b.n	80042d6 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80041fe:	68fb      	ldr	r3, [r7, #12]
 8004200:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004202:	781a      	ldrb	r2, [r3, #0]
 8004204:	68fb      	ldr	r3, [r7, #12]
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800420e:	1c5a      	adds	r2, r3, #1
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8004214:	68fb      	ldr	r3, [r7, #12]
 8004216:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004218:	3b01      	subs	r3, #1
 800421a:	b29a      	uxth	r2, r3
 800421c:	68fb      	ldr	r3, [r7, #12]
 800421e:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8004220:	68fb      	ldr	r3, [r7, #12]
 8004222:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004224:	b29b      	uxth	r3, r3
 8004226:	3b01      	subs	r3, #1
 8004228:	b29a      	uxth	r2, r3
 800422a:	68fb      	ldr	r3, [r7, #12]
 800422c:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800422e:	68fb      	ldr	r3, [r7, #12]
 8004230:	681b      	ldr	r3, [r3, #0]
 8004232:	695b      	ldr	r3, [r3, #20]
 8004234:	f003 0304 	and.w	r3, r3, #4
 8004238:	2b04      	cmp	r3, #4
 800423a:	d11b      	bne.n	8004274 <HAL_I2C_Mem_Write+0x180>
 800423c:	68fb      	ldr	r3, [r7, #12]
 800423e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004240:	2b00      	cmp	r3, #0
 8004242:	d017      	beq.n	8004274 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004248:	781a      	ldrb	r2, [r3, #0]
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	681b      	ldr	r3, [r3, #0]
 800424e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8004250:	68fb      	ldr	r3, [r7, #12]
 8004252:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004254:	1c5a      	adds	r2, r3, #1
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800425e:	3b01      	subs	r3, #1
 8004260:	b29a      	uxth	r2, r3
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800426a:	b29b      	uxth	r3, r3
 800426c:	3b01      	subs	r3, #1
 800426e:	b29a      	uxth	r2, r3
 8004270:	68fb      	ldr	r3, [r7, #12]
 8004272:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004274:	68fb      	ldr	r3, [r7, #12]
 8004276:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004278:	2b00      	cmp	r3, #0
 800427a:	d1aa      	bne.n	80041d2 <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800427c:	697a      	ldr	r2, [r7, #20]
 800427e:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8004280:	68f8      	ldr	r0, [r7, #12]
 8004282:	f000 fe93 	bl	8004fac <I2C_WaitOnBTFFlagUntilTimeout>
 8004286:	4603      	mov	r3, r0
 8004288:	2b00      	cmp	r3, #0
 800428a:	d00d      	beq.n	80042a8 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800428c:	68fb      	ldr	r3, [r7, #12]
 800428e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004290:	2b04      	cmp	r3, #4
 8004292:	d107      	bne.n	80042a4 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004294:	68fb      	ldr	r3, [r7, #12]
 8004296:	681b      	ldr	r3, [r3, #0]
 8004298:	681a      	ldr	r2, [r3, #0]
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042a2:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80042a4:	2301      	movs	r3, #1
 80042a6:	e016      	b.n	80042d6 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	681a      	ldr	r2, [r3, #0]
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80042b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80042b8:	68fb      	ldr	r3, [r7, #12]
 80042ba:	2220      	movs	r2, #32
 80042bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80042c0:	68fb      	ldr	r3, [r7, #12]
 80042c2:	2200      	movs	r2, #0
 80042c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80042c8:	68fb      	ldr	r3, [r7, #12]
 80042ca:	2200      	movs	r2, #0
 80042cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80042d0:	2300      	movs	r3, #0
 80042d2:	e000      	b.n	80042d6 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 80042d4:	2302      	movs	r3, #2
  }
}
 80042d6:	4618      	mov	r0, r3
 80042d8:	3718      	adds	r7, #24
 80042da:	46bd      	mov	sp, r7
 80042dc:	bd80      	pop	{r7, pc}
 80042de:	bf00      	nop
 80042e0:	00100002 	.word	0x00100002
 80042e4:	ffff0000 	.word	0xffff0000

080042e8 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80042e8:	b580      	push	{r7, lr}
 80042ea:	b08c      	sub	sp, #48	@ 0x30
 80042ec:	af02      	add	r7, sp, #8
 80042ee:	60f8      	str	r0, [r7, #12]
 80042f0:	4608      	mov	r0, r1
 80042f2:	4611      	mov	r1, r2
 80042f4:	461a      	mov	r2, r3
 80042f6:	4603      	mov	r3, r0
 80042f8:	817b      	strh	r3, [r7, #10]
 80042fa:	460b      	mov	r3, r1
 80042fc:	813b      	strh	r3, [r7, #8]
 80042fe:	4613      	mov	r3, r2
 8004300:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8004302:	f7fe ff11 	bl	8003128 <HAL_GetTick>
 8004306:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004308:	68fb      	ldr	r3, [r7, #12]
 800430a:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800430e:	b2db      	uxtb	r3, r3
 8004310:	2b20      	cmp	r3, #32
 8004312:	f040 8214 	bne.w	800473e <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8004316:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004318:	9300      	str	r3, [sp, #0]
 800431a:	2319      	movs	r3, #25
 800431c:	2201      	movs	r2, #1
 800431e:	497b      	ldr	r1, [pc, #492]	@ (800450c <HAL_I2C_Mem_Read+0x224>)
 8004320:	68f8      	ldr	r0, [r7, #12]
 8004322:	f000 fce1 	bl	8004ce8 <I2C_WaitOnFlagUntilTimeout>
 8004326:	4603      	mov	r3, r0
 8004328:	2b00      	cmp	r3, #0
 800432a:	d001      	beq.n	8004330 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 800432c:	2302      	movs	r3, #2
 800432e:	e207      	b.n	8004740 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004330:	68fb      	ldr	r3, [r7, #12]
 8004332:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8004336:	2b01      	cmp	r3, #1
 8004338:	d101      	bne.n	800433e <HAL_I2C_Mem_Read+0x56>
 800433a:	2302      	movs	r3, #2
 800433c:	e200      	b.n	8004740 <HAL_I2C_Mem_Read+0x458>
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	2201      	movs	r2, #1
 8004342:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f003 0301 	and.w	r3, r3, #1
 8004350:	2b01      	cmp	r3, #1
 8004352:	d007      	beq.n	8004364 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004354:	68fb      	ldr	r3, [r7, #12]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681a      	ldr	r2, [r3, #0]
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	f042 0201 	orr.w	r2, r2, #1
 8004362:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	681a      	ldr	r2, [r3, #0]
 800436a:	68fb      	ldr	r3, [r7, #12]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8004372:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	2222      	movs	r2, #34	@ 0x22
 8004378:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 800437c:	68fb      	ldr	r3, [r7, #12]
 800437e:	2240      	movs	r2, #64	@ 0x40
 8004380:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004384:	68fb      	ldr	r3, [r7, #12]
 8004386:	2200      	movs	r2, #0
 8004388:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800438e:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8004394:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004396:	68fb      	ldr	r3, [r7, #12]
 8004398:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800439a:	b29a      	uxth	r2, r3
 800439c:	68fb      	ldr	r3, [r7, #12]
 800439e:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	4a5b      	ldr	r2, [pc, #364]	@ (8004510 <HAL_I2C_Mem_Read+0x228>)
 80043a4:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 80043a6:	88f8      	ldrh	r0, [r7, #6]
 80043a8:	893a      	ldrh	r2, [r7, #8]
 80043aa:	8979      	ldrh	r1, [r7, #10]
 80043ac:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ae:	9301      	str	r3, [sp, #4]
 80043b0:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80043b2:	9300      	str	r3, [sp, #0]
 80043b4:	4603      	mov	r3, r0
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 fbae 	bl	8004b18 <I2C_RequestMemoryRead>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d001      	beq.n	80043c6 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 80043c2:	2301      	movs	r3, #1
 80043c4:	e1bc      	b.n	8004740 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 80043c6:	68fb      	ldr	r3, [r7, #12]
 80043c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043ca:	2b00      	cmp	r3, #0
 80043cc:	d113      	bne.n	80043f6 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043ce:	2300      	movs	r3, #0
 80043d0:	623b      	str	r3, [r7, #32]
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	695b      	ldr	r3, [r3, #20]
 80043d8:	623b      	str	r3, [r7, #32]
 80043da:	68fb      	ldr	r3, [r7, #12]
 80043dc:	681b      	ldr	r3, [r3, #0]
 80043de:	699b      	ldr	r3, [r3, #24]
 80043e0:	623b      	str	r3, [r7, #32]
 80043e2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	681a      	ldr	r2, [r3, #0]
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	681b      	ldr	r3, [r3, #0]
 80043ee:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043f2:	601a      	str	r2, [r3, #0]
 80043f4:	e190      	b.n	8004718 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80043f6:	68fb      	ldr	r3, [r7, #12]
 80043f8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80043fa:	2b01      	cmp	r3, #1
 80043fc:	d11b      	bne.n	8004436 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043fe:	68fb      	ldr	r3, [r7, #12]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	681a      	ldr	r2, [r3, #0]
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800440c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800440e:	2300      	movs	r3, #0
 8004410:	61fb      	str	r3, [r7, #28]
 8004412:	68fb      	ldr	r3, [r7, #12]
 8004414:	681b      	ldr	r3, [r3, #0]
 8004416:	695b      	ldr	r3, [r3, #20]
 8004418:	61fb      	str	r3, [r7, #28]
 800441a:	68fb      	ldr	r3, [r7, #12]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	699b      	ldr	r3, [r3, #24]
 8004420:	61fb      	str	r3, [r7, #28]
 8004422:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004424:	68fb      	ldr	r3, [r7, #12]
 8004426:	681b      	ldr	r3, [r3, #0]
 8004428:	681a      	ldr	r2, [r3, #0]
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004432:	601a      	str	r2, [r3, #0]
 8004434:	e170      	b.n	8004718 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8004436:	68fb      	ldr	r3, [r7, #12]
 8004438:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800443a:	2b02      	cmp	r3, #2
 800443c:	d11b      	bne.n	8004476 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800443e:	68fb      	ldr	r3, [r7, #12]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	681a      	ldr	r2, [r3, #0]
 8004444:	68fb      	ldr	r3, [r7, #12]
 8004446:	681b      	ldr	r3, [r3, #0]
 8004448:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800444c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800444e:	68fb      	ldr	r3, [r7, #12]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	681a      	ldr	r2, [r3, #0]
 8004454:	68fb      	ldr	r3, [r7, #12]
 8004456:	681b      	ldr	r3, [r3, #0]
 8004458:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800445c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800445e:	2300      	movs	r3, #0
 8004460:	61bb      	str	r3, [r7, #24]
 8004462:	68fb      	ldr	r3, [r7, #12]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	695b      	ldr	r3, [r3, #20]
 8004468:	61bb      	str	r3, [r7, #24]
 800446a:	68fb      	ldr	r3, [r7, #12]
 800446c:	681b      	ldr	r3, [r3, #0]
 800446e:	699b      	ldr	r3, [r3, #24]
 8004470:	61bb      	str	r3, [r7, #24]
 8004472:	69bb      	ldr	r3, [r7, #24]
 8004474:	e150      	b.n	8004718 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004476:	2300      	movs	r3, #0
 8004478:	617b      	str	r3, [r7, #20]
 800447a:	68fb      	ldr	r3, [r7, #12]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	695b      	ldr	r3, [r3, #20]
 8004480:	617b      	str	r3, [r7, #20]
 8004482:	68fb      	ldr	r3, [r7, #12]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	699b      	ldr	r3, [r3, #24]
 8004488:	617b      	str	r3, [r7, #20]
 800448a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800448c:	e144      	b.n	8004718 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004492:	2b03      	cmp	r3, #3
 8004494:	f200 80f1 	bhi.w	800467a <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8004498:	68fb      	ldr	r3, [r7, #12]
 800449a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800449c:	2b01      	cmp	r3, #1
 800449e:	d123      	bne.n	80044e8 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80044a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80044a2:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 80044a4:	68f8      	ldr	r0, [r7, #12]
 80044a6:	f000 fdc9 	bl	800503c <I2C_WaitOnRXNEFlagUntilTimeout>
 80044aa:	4603      	mov	r3, r0
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d001      	beq.n	80044b4 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 80044b0:	2301      	movs	r3, #1
 80044b2:	e145      	b.n	8004740 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	691a      	ldr	r2, [r3, #16]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044be:	b2d2      	uxtb	r2, r2
 80044c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80044c2:	68fb      	ldr	r3, [r7, #12]
 80044c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80044c6:	1c5a      	adds	r2, r3, #1
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80044cc:	68fb      	ldr	r3, [r7, #12]
 80044ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044d0:	3b01      	subs	r3, #1
 80044d2:	b29a      	uxth	r2, r3
 80044d4:	68fb      	ldr	r3, [r7, #12]
 80044d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80044dc:	b29b      	uxth	r3, r3
 80044de:	3b01      	subs	r3, #1
 80044e0:	b29a      	uxth	r2, r3
 80044e2:	68fb      	ldr	r3, [r7, #12]
 80044e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80044e6:	e117      	b.n	8004718 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80044ec:	2b02      	cmp	r3, #2
 80044ee:	d14e      	bne.n	800458e <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80044f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044f2:	9300      	str	r3, [sp, #0]
 80044f4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80044f6:	2200      	movs	r2, #0
 80044f8:	4906      	ldr	r1, [pc, #24]	@ (8004514 <HAL_I2C_Mem_Read+0x22c>)
 80044fa:	68f8      	ldr	r0, [r7, #12]
 80044fc:	f000 fbf4 	bl	8004ce8 <I2C_WaitOnFlagUntilTimeout>
 8004500:	4603      	mov	r3, r0
 8004502:	2b00      	cmp	r3, #0
 8004504:	d008      	beq.n	8004518 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8004506:	2301      	movs	r3, #1
 8004508:	e11a      	b.n	8004740 <HAL_I2C_Mem_Read+0x458>
 800450a:	bf00      	nop
 800450c:	00100002 	.word	0x00100002
 8004510:	ffff0000 	.word	0xffff0000
 8004514:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004518:	68fb      	ldr	r3, [r7, #12]
 800451a:	681b      	ldr	r3, [r3, #0]
 800451c:	681a      	ldr	r2, [r3, #0]
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004526:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004528:	68fb      	ldr	r3, [r7, #12]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	691a      	ldr	r2, [r3, #16]
 800452e:	68fb      	ldr	r3, [r7, #12]
 8004530:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004532:	b2d2      	uxtb	r2, r2
 8004534:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004536:	68fb      	ldr	r3, [r7, #12]
 8004538:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800453a:	1c5a      	adds	r2, r3, #1
 800453c:	68fb      	ldr	r3, [r7, #12]
 800453e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004540:	68fb      	ldr	r3, [r7, #12]
 8004542:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004544:	3b01      	subs	r3, #1
 8004546:	b29a      	uxth	r2, r3
 8004548:	68fb      	ldr	r3, [r7, #12]
 800454a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800454c:	68fb      	ldr	r3, [r7, #12]
 800454e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004550:	b29b      	uxth	r3, r3
 8004552:	3b01      	subs	r3, #1
 8004554:	b29a      	uxth	r2, r3
 8004556:	68fb      	ldr	r3, [r7, #12]
 8004558:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800455a:	68fb      	ldr	r3, [r7, #12]
 800455c:	681b      	ldr	r3, [r3, #0]
 800455e:	691a      	ldr	r2, [r3, #16]
 8004560:	68fb      	ldr	r3, [r7, #12]
 8004562:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004564:	b2d2      	uxtb	r2, r2
 8004566:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800456c:	1c5a      	adds	r2, r3, #1
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8004572:	68fb      	ldr	r3, [r7, #12]
 8004574:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004576:	3b01      	subs	r3, #1
 8004578:	b29a      	uxth	r2, r3
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800457e:	68fb      	ldr	r3, [r7, #12]
 8004580:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8004582:	b29b      	uxth	r3, r3
 8004584:	3b01      	subs	r3, #1
 8004586:	b29a      	uxth	r2, r3
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800458c:	e0c4      	b.n	8004718 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800458e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004590:	9300      	str	r3, [sp, #0]
 8004592:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004594:	2200      	movs	r2, #0
 8004596:	496c      	ldr	r1, [pc, #432]	@ (8004748 <HAL_I2C_Mem_Read+0x460>)
 8004598:	68f8      	ldr	r0, [r7, #12]
 800459a:	f000 fba5 	bl	8004ce8 <I2C_WaitOnFlagUntilTimeout>
 800459e:	4603      	mov	r3, r0
 80045a0:	2b00      	cmp	r3, #0
 80045a2:	d001      	beq.n	80045a8 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 80045a4:	2301      	movs	r3, #1
 80045a6:	e0cb      	b.n	8004740 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045a8:	68fb      	ldr	r3, [r7, #12]
 80045aa:	681b      	ldr	r3, [r3, #0]
 80045ac:	681a      	ldr	r2, [r3, #0]
 80045ae:	68fb      	ldr	r3, [r7, #12]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80045b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045b8:	68fb      	ldr	r3, [r7, #12]
 80045ba:	681b      	ldr	r3, [r3, #0]
 80045bc:	691a      	ldr	r2, [r3, #16]
 80045be:	68fb      	ldr	r3, [r7, #12]
 80045c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045c2:	b2d2      	uxtb	r2, r2
 80045c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80045c6:	68fb      	ldr	r3, [r7, #12]
 80045c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80045ca:	1c5a      	adds	r2, r3, #1
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80045d0:	68fb      	ldr	r3, [r7, #12]
 80045d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80045d4:	3b01      	subs	r3, #1
 80045d6:	b29a      	uxth	r2, r3
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80045e0:	b29b      	uxth	r3, r3
 80045e2:	3b01      	subs	r3, #1
 80045e4:	b29a      	uxth	r2, r3
 80045e6:	68fb      	ldr	r3, [r7, #12]
 80045e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80045ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80045ec:	9300      	str	r3, [sp, #0]
 80045ee:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80045f0:	2200      	movs	r2, #0
 80045f2:	4955      	ldr	r1, [pc, #340]	@ (8004748 <HAL_I2C_Mem_Read+0x460>)
 80045f4:	68f8      	ldr	r0, [r7, #12]
 80045f6:	f000 fb77 	bl	8004ce8 <I2C_WaitOnFlagUntilTimeout>
 80045fa:	4603      	mov	r3, r0
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	d001      	beq.n	8004604 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8004600:	2301      	movs	r3, #1
 8004602:	e09d      	b.n	8004740 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004604:	68fb      	ldr	r3, [r7, #12]
 8004606:	681b      	ldr	r3, [r3, #0]
 8004608:	681a      	ldr	r2, [r3, #0]
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004612:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	691a      	ldr	r2, [r3, #16]
 800461a:	68fb      	ldr	r3, [r7, #12]
 800461c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800461e:	b2d2      	uxtb	r2, r2
 8004620:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004626:	1c5a      	adds	r2, r3, #1
 8004628:	68fb      	ldr	r3, [r7, #12]
 800462a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004630:	3b01      	subs	r3, #1
 8004632:	b29a      	uxth	r2, r3
 8004634:	68fb      	ldr	r3, [r7, #12]
 8004636:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8004638:	68fb      	ldr	r3, [r7, #12]
 800463a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800463c:	b29b      	uxth	r3, r3
 800463e:	3b01      	subs	r3, #1
 8004640:	b29a      	uxth	r2, r3
 8004642:	68fb      	ldr	r3, [r7, #12]
 8004644:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	691a      	ldr	r2, [r3, #16]
 800464c:	68fb      	ldr	r3, [r7, #12]
 800464e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004650:	b2d2      	uxtb	r2, r2
 8004652:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004658:	1c5a      	adds	r2, r3, #1
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800465e:	68fb      	ldr	r3, [r7, #12]
 8004660:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004662:	3b01      	subs	r3, #1
 8004664:	b29a      	uxth	r2, r3
 8004666:	68fb      	ldr	r3, [r7, #12]
 8004668:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800466a:	68fb      	ldr	r3, [r7, #12]
 800466c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800466e:	b29b      	uxth	r3, r3
 8004670:	3b01      	subs	r3, #1
 8004672:	b29a      	uxth	r2, r3
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8004678:	e04e      	b.n	8004718 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800467a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800467c:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 800467e:	68f8      	ldr	r0, [r7, #12]
 8004680:	f000 fcdc 	bl	800503c <I2C_WaitOnRXNEFlagUntilTimeout>
 8004684:	4603      	mov	r3, r0
 8004686:	2b00      	cmp	r3, #0
 8004688:	d001      	beq.n	800468e <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 800468a:	2301      	movs	r3, #1
 800468c:	e058      	b.n	8004740 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800468e:	68fb      	ldr	r3, [r7, #12]
 8004690:	681b      	ldr	r3, [r3, #0]
 8004692:	691a      	ldr	r2, [r3, #16]
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004698:	b2d2      	uxtb	r2, r2
 800469a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046a0:	1c5a      	adds	r2, r3, #1
 80046a2:	68fb      	ldr	r3, [r7, #12]
 80046a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80046a6:	68fb      	ldr	r3, [r7, #12]
 80046a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046aa:	3b01      	subs	r3, #1
 80046ac:	b29a      	uxth	r2, r3
 80046ae:	68fb      	ldr	r3, [r7, #12]
 80046b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80046b2:	68fb      	ldr	r3, [r7, #12]
 80046b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	3b01      	subs	r3, #1
 80046ba:	b29a      	uxth	r2, r3
 80046bc:	68fb      	ldr	r3, [r7, #12]
 80046be:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80046c0:	68fb      	ldr	r3, [r7, #12]
 80046c2:	681b      	ldr	r3, [r3, #0]
 80046c4:	695b      	ldr	r3, [r3, #20]
 80046c6:	f003 0304 	and.w	r3, r3, #4
 80046ca:	2b04      	cmp	r3, #4
 80046cc:	d124      	bne.n	8004718 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 80046ce:	68fb      	ldr	r3, [r7, #12]
 80046d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80046d2:	2b03      	cmp	r3, #3
 80046d4:	d107      	bne.n	80046e6 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80046d6:	68fb      	ldr	r3, [r7, #12]
 80046d8:	681b      	ldr	r3, [r3, #0]
 80046da:	681a      	ldr	r2, [r3, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	681b      	ldr	r3, [r3, #0]
 80046e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80046e4:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	681b      	ldr	r3, [r3, #0]
 80046ea:	691a      	ldr	r2, [r3, #16]
 80046ec:	68fb      	ldr	r3, [r7, #12]
 80046ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f0:	b2d2      	uxtb	r2, r2
 80046f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80046f8:	1c5a      	adds	r2, r3, #1
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80046fe:	68fb      	ldr	r3, [r7, #12]
 8004700:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8004702:	3b01      	subs	r3, #1
 8004704:	b29a      	uxth	r2, r3
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800470a:	68fb      	ldr	r3, [r7, #12]
 800470c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800470e:	b29b      	uxth	r3, r3
 8004710:	3b01      	subs	r3, #1
 8004712:	b29a      	uxth	r2, r3
 8004714:	68fb      	ldr	r3, [r7, #12]
 8004716:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800471c:	2b00      	cmp	r3, #0
 800471e:	f47f aeb6 	bne.w	800448e <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8004722:	68fb      	ldr	r3, [r7, #12]
 8004724:	2220      	movs	r2, #32
 8004726:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800472a:	68fb      	ldr	r3, [r7, #12]
 800472c:	2200      	movs	r2, #0
 800472e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	2200      	movs	r2, #0
 8004736:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800473a:	2300      	movs	r3, #0
 800473c:	e000      	b.n	8004740 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 800473e:	2302      	movs	r3, #2
  }
}
 8004740:	4618      	mov	r0, r3
 8004742:	3728      	adds	r7, #40	@ 0x28
 8004744:	46bd      	mov	sp, r7
 8004746:	bd80      	pop	{r7, pc}
 8004748:	00010004 	.word	0x00010004

0800474c <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 800474c:	b580      	push	{r7, lr}
 800474e:	b088      	sub	sp, #32
 8004750:	af02      	add	r7, sp, #8
 8004752:	60f8      	str	r0, [r7, #12]
 8004754:	607a      	str	r2, [r7, #4]
 8004756:	603b      	str	r3, [r7, #0]
 8004758:	460b      	mov	r3, r1
 800475a:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004760:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004762:	697b      	ldr	r3, [r7, #20]
 8004764:	2b08      	cmp	r3, #8
 8004766:	d006      	beq.n	8004776 <I2C_MasterRequestWrite+0x2a>
 8004768:	697b      	ldr	r3, [r7, #20]
 800476a:	2b01      	cmp	r3, #1
 800476c:	d003      	beq.n	8004776 <I2C_MasterRequestWrite+0x2a>
 800476e:	697b      	ldr	r3, [r7, #20]
 8004770:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004774:	d108      	bne.n	8004788 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004776:	68fb      	ldr	r3, [r7, #12]
 8004778:	681b      	ldr	r3, [r3, #0]
 800477a:	681a      	ldr	r2, [r3, #0]
 800477c:	68fb      	ldr	r3, [r7, #12]
 800477e:	681b      	ldr	r3, [r3, #0]
 8004780:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004784:	601a      	str	r2, [r3, #0]
 8004786:	e00b      	b.n	80047a0 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8004788:	68fb      	ldr	r3, [r7, #12]
 800478a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800478c:	2b12      	cmp	r3, #18
 800478e:	d107      	bne.n	80047a0 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	681a      	ldr	r2, [r3, #0]
 8004796:	68fb      	ldr	r3, [r7, #12]
 8004798:	681b      	ldr	r3, [r3, #0]
 800479a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800479e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80047a0:	683b      	ldr	r3, [r7, #0]
 80047a2:	9300      	str	r3, [sp, #0]
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2200      	movs	r2, #0
 80047a8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80047ac:	68f8      	ldr	r0, [r7, #12]
 80047ae:	f000 fa9b 	bl	8004ce8 <I2C_WaitOnFlagUntilTimeout>
 80047b2:	4603      	mov	r3, r0
 80047b4:	2b00      	cmp	r3, #0
 80047b6:	d00d      	beq.n	80047d4 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80047b8:	68fb      	ldr	r3, [r7, #12]
 80047ba:	681b      	ldr	r3, [r3, #0]
 80047bc:	681b      	ldr	r3, [r3, #0]
 80047be:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80047c2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80047c6:	d103      	bne.n	80047d0 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80047c8:	68fb      	ldr	r3, [r7, #12]
 80047ca:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80047ce:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80047d0:	2303      	movs	r3, #3
 80047d2:	e035      	b.n	8004840 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	691b      	ldr	r3, [r3, #16]
 80047d8:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80047dc:	d108      	bne.n	80047f0 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80047de:	897b      	ldrh	r3, [r7, #10]
 80047e0:	b2db      	uxtb	r3, r3
 80047e2:	461a      	mov	r2, r3
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	681b      	ldr	r3, [r3, #0]
 80047e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80047ec:	611a      	str	r2, [r3, #16]
 80047ee:	e01b      	b.n	8004828 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 80047f0:	897b      	ldrh	r3, [r7, #10]
 80047f2:	11db      	asrs	r3, r3, #7
 80047f4:	b2db      	uxtb	r3, r3
 80047f6:	f003 0306 	and.w	r3, r3, #6
 80047fa:	b2db      	uxtb	r3, r3
 80047fc:	f063 030f 	orn	r3, r3, #15
 8004800:	b2da      	uxtb	r2, r3
 8004802:	68fb      	ldr	r3, [r7, #12]
 8004804:	681b      	ldr	r3, [r3, #0]
 8004806:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004808:	683b      	ldr	r3, [r7, #0]
 800480a:	687a      	ldr	r2, [r7, #4]
 800480c:	490e      	ldr	r1, [pc, #56]	@ (8004848 <I2C_MasterRequestWrite+0xfc>)
 800480e:	68f8      	ldr	r0, [r7, #12]
 8004810:	f000 fae4 	bl	8004ddc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004814:	4603      	mov	r3, r0
 8004816:	2b00      	cmp	r3, #0
 8004818:	d001      	beq.n	800481e <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 800481a:	2301      	movs	r3, #1
 800481c:	e010      	b.n	8004840 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800481e:	897b      	ldrh	r3, [r7, #10]
 8004820:	b2da      	uxtb	r2, r3
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	681b      	ldr	r3, [r3, #0]
 8004826:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004828:	683b      	ldr	r3, [r7, #0]
 800482a:	687a      	ldr	r2, [r7, #4]
 800482c:	4907      	ldr	r1, [pc, #28]	@ (800484c <I2C_MasterRequestWrite+0x100>)
 800482e:	68f8      	ldr	r0, [r7, #12]
 8004830:	f000 fad4 	bl	8004ddc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004834:	4603      	mov	r3, r0
 8004836:	2b00      	cmp	r3, #0
 8004838:	d001      	beq.n	800483e <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 800483a:	2301      	movs	r3, #1
 800483c:	e000      	b.n	8004840 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 800483e:	2300      	movs	r3, #0
}
 8004840:	4618      	mov	r0, r3
 8004842:	3718      	adds	r7, #24
 8004844:	46bd      	mov	sp, r7
 8004846:	bd80      	pop	{r7, pc}
 8004848:	00010008 	.word	0x00010008
 800484c:	00010002 	.word	0x00010002

08004850 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8004850:	b580      	push	{r7, lr}
 8004852:	b088      	sub	sp, #32
 8004854:	af02      	add	r7, sp, #8
 8004856:	60f8      	str	r0, [r7, #12]
 8004858:	607a      	str	r2, [r7, #4]
 800485a:	603b      	str	r3, [r7, #0]
 800485c:	460b      	mov	r3, r1
 800485e:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004860:	68fb      	ldr	r3, [r7, #12]
 8004862:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004864:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004866:	68fb      	ldr	r3, [r7, #12]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	681a      	ldr	r2, [r3, #0]
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	681b      	ldr	r3, [r3, #0]
 8004870:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004874:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8004876:	697b      	ldr	r3, [r7, #20]
 8004878:	2b08      	cmp	r3, #8
 800487a:	d006      	beq.n	800488a <I2C_MasterRequestRead+0x3a>
 800487c:	697b      	ldr	r3, [r7, #20]
 800487e:	2b01      	cmp	r3, #1
 8004880:	d003      	beq.n	800488a <I2C_MasterRequestRead+0x3a>
 8004882:	697b      	ldr	r3, [r7, #20]
 8004884:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8004888:	d108      	bne.n	800489c <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800488a:	68fb      	ldr	r3, [r7, #12]
 800488c:	681b      	ldr	r3, [r3, #0]
 800488e:	681a      	ldr	r2, [r3, #0]
 8004890:	68fb      	ldr	r3, [r7, #12]
 8004892:	681b      	ldr	r3, [r3, #0]
 8004894:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004898:	601a      	str	r2, [r3, #0]
 800489a:	e00b      	b.n	80048b4 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 800489c:	68fb      	ldr	r3, [r7, #12]
 800489e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80048a0:	2b11      	cmp	r3, #17
 80048a2:	d107      	bne.n	80048b4 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80048a4:	68fb      	ldr	r3, [r7, #12]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	681a      	ldr	r2, [r3, #0]
 80048aa:	68fb      	ldr	r3, [r7, #12]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80048b2:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80048b4:	683b      	ldr	r3, [r7, #0]
 80048b6:	9300      	str	r3, [sp, #0]
 80048b8:	687b      	ldr	r3, [r7, #4]
 80048ba:	2200      	movs	r2, #0
 80048bc:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80048c0:	68f8      	ldr	r0, [r7, #12]
 80048c2:	f000 fa11 	bl	8004ce8 <I2C_WaitOnFlagUntilTimeout>
 80048c6:	4603      	mov	r3, r0
 80048c8:	2b00      	cmp	r3, #0
 80048ca:	d00d      	beq.n	80048e8 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80048cc:	68fb      	ldr	r3, [r7, #12]
 80048ce:	681b      	ldr	r3, [r3, #0]
 80048d0:	681b      	ldr	r3, [r3, #0]
 80048d2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80048d6:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80048da:	d103      	bne.n	80048e4 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80048dc:	68fb      	ldr	r3, [r7, #12]
 80048de:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80048e2:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80048e4:	2303      	movs	r3, #3
 80048e6:	e079      	b.n	80049dc <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80048e8:	68fb      	ldr	r3, [r7, #12]
 80048ea:	691b      	ldr	r3, [r3, #16]
 80048ec:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 80048f0:	d108      	bne.n	8004904 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 80048f2:	897b      	ldrh	r3, [r7, #10]
 80048f4:	b2db      	uxtb	r3, r3
 80048f6:	f043 0301 	orr.w	r3, r3, #1
 80048fa:	b2da      	uxtb	r2, r3
 80048fc:	68fb      	ldr	r3, [r7, #12]
 80048fe:	681b      	ldr	r3, [r3, #0]
 8004900:	611a      	str	r2, [r3, #16]
 8004902:	e05f      	b.n	80049c4 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004904:	897b      	ldrh	r3, [r7, #10]
 8004906:	11db      	asrs	r3, r3, #7
 8004908:	b2db      	uxtb	r3, r3
 800490a:	f003 0306 	and.w	r3, r3, #6
 800490e:	b2db      	uxtb	r3, r3
 8004910:	f063 030f 	orn	r3, r3, #15
 8004914:	b2da      	uxtb	r2, r3
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	681b      	ldr	r3, [r3, #0]
 800491a:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 800491c:	683b      	ldr	r3, [r7, #0]
 800491e:	687a      	ldr	r2, [r7, #4]
 8004920:	4930      	ldr	r1, [pc, #192]	@ (80049e4 <I2C_MasterRequestRead+0x194>)
 8004922:	68f8      	ldr	r0, [r7, #12]
 8004924:	f000 fa5a 	bl	8004ddc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004928:	4603      	mov	r3, r0
 800492a:	2b00      	cmp	r3, #0
 800492c:	d001      	beq.n	8004932 <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800492e:	2301      	movs	r3, #1
 8004930:	e054      	b.n	80049dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004932:	897b      	ldrh	r3, [r7, #10]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800493c:	683b      	ldr	r3, [r7, #0]
 800493e:	687a      	ldr	r2, [r7, #4]
 8004940:	4929      	ldr	r1, [pc, #164]	@ (80049e8 <I2C_MasterRequestRead+0x198>)
 8004942:	68f8      	ldr	r0, [r7, #12]
 8004944:	f000 fa4a 	bl	8004ddc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004948:	4603      	mov	r3, r0
 800494a:	2b00      	cmp	r3, #0
 800494c:	d001      	beq.n	8004952 <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 800494e:	2301      	movs	r3, #1
 8004950:	e044      	b.n	80049dc <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004952:	2300      	movs	r3, #0
 8004954:	613b      	str	r3, [r7, #16]
 8004956:	68fb      	ldr	r3, [r7, #12]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	613b      	str	r3, [r7, #16]
 800495e:	68fb      	ldr	r3, [r7, #12]
 8004960:	681b      	ldr	r3, [r3, #0]
 8004962:	699b      	ldr	r3, [r3, #24]
 8004964:	613b      	str	r3, [r7, #16]
 8004966:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004968:	68fb      	ldr	r3, [r7, #12]
 800496a:	681b      	ldr	r3, [r3, #0]
 800496c:	681a      	ldr	r2, [r3, #0]
 800496e:	68fb      	ldr	r3, [r7, #12]
 8004970:	681b      	ldr	r3, [r3, #0]
 8004972:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004976:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004978:	683b      	ldr	r3, [r7, #0]
 800497a:	9300      	str	r3, [sp, #0]
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	2200      	movs	r2, #0
 8004980:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004984:	68f8      	ldr	r0, [r7, #12]
 8004986:	f000 f9af 	bl	8004ce8 <I2C_WaitOnFlagUntilTimeout>
 800498a:	4603      	mov	r3, r0
 800498c:	2b00      	cmp	r3, #0
 800498e:	d00d      	beq.n	80049ac <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004990:	68fb      	ldr	r3, [r7, #12]
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800499a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800499e:	d103      	bne.n	80049a8 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80049a0:	68fb      	ldr	r3, [r7, #12]
 80049a2:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80049a6:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 80049a8:	2303      	movs	r3, #3
 80049aa:	e017      	b.n	80049dc <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 80049ac:	897b      	ldrh	r3, [r7, #10]
 80049ae:	11db      	asrs	r3, r3, #7
 80049b0:	b2db      	uxtb	r3, r3
 80049b2:	f003 0306 	and.w	r3, r3, #6
 80049b6:	b2db      	uxtb	r3, r3
 80049b8:	f063 030e 	orn	r3, r3, #14
 80049bc:	b2da      	uxtb	r2, r3
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80049c4:	683b      	ldr	r3, [r7, #0]
 80049c6:	687a      	ldr	r2, [r7, #4]
 80049c8:	4907      	ldr	r1, [pc, #28]	@ (80049e8 <I2C_MasterRequestRead+0x198>)
 80049ca:	68f8      	ldr	r0, [r7, #12]
 80049cc:	f000 fa06 	bl	8004ddc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80049d0:	4603      	mov	r3, r0
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d001      	beq.n	80049da <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 80049d6:	2301      	movs	r3, #1
 80049d8:	e000      	b.n	80049dc <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 80049da:	2300      	movs	r3, #0
}
 80049dc:	4618      	mov	r0, r3
 80049de:	3718      	adds	r7, #24
 80049e0:	46bd      	mov	sp, r7
 80049e2:	bd80      	pop	{r7, pc}
 80049e4:	00010008 	.word	0x00010008
 80049e8:	00010002 	.word	0x00010002

080049ec <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 80049ec:	b580      	push	{r7, lr}
 80049ee:	b088      	sub	sp, #32
 80049f0:	af02      	add	r7, sp, #8
 80049f2:	60f8      	str	r0, [r7, #12]
 80049f4:	4608      	mov	r0, r1
 80049f6:	4611      	mov	r1, r2
 80049f8:	461a      	mov	r2, r3
 80049fa:	4603      	mov	r3, r0
 80049fc:	817b      	strh	r3, [r7, #10]
 80049fe:	460b      	mov	r3, r1
 8004a00:	813b      	strh	r3, [r7, #8]
 8004a02:	4613      	mov	r3, r2
 8004a04:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004a06:	68fb      	ldr	r3, [r7, #12]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	681a      	ldr	r2, [r3, #0]
 8004a0c:	68fb      	ldr	r3, [r7, #12]
 8004a0e:	681b      	ldr	r3, [r3, #0]
 8004a10:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004a14:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004a16:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a18:	9300      	str	r3, [sp, #0]
 8004a1a:	6a3b      	ldr	r3, [r7, #32]
 8004a1c:	2200      	movs	r2, #0
 8004a1e:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004a22:	68f8      	ldr	r0, [r7, #12]
 8004a24:	f000 f960 	bl	8004ce8 <I2C_WaitOnFlagUntilTimeout>
 8004a28:	4603      	mov	r3, r0
 8004a2a:	2b00      	cmp	r3, #0
 8004a2c:	d00d      	beq.n	8004a4a <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004a2e:	68fb      	ldr	r3, [r7, #12]
 8004a30:	681b      	ldr	r3, [r3, #0]
 8004a32:	681b      	ldr	r3, [r3, #0]
 8004a34:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004a38:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004a3c:	d103      	bne.n	8004a46 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004a3e:	68fb      	ldr	r3, [r7, #12]
 8004a40:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004a44:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004a46:	2303      	movs	r3, #3
 8004a48:	e05f      	b.n	8004b0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004a4a:	897b      	ldrh	r3, [r7, #10]
 8004a4c:	b2db      	uxtb	r3, r3
 8004a4e:	461a      	mov	r2, r3
 8004a50:	68fb      	ldr	r3, [r7, #12]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004a58:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004a5a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004a5c:	6a3a      	ldr	r2, [r7, #32]
 8004a5e:	492d      	ldr	r1, [pc, #180]	@ (8004b14 <I2C_RequestMemoryWrite+0x128>)
 8004a60:	68f8      	ldr	r0, [r7, #12]
 8004a62:	f000 f9bb 	bl	8004ddc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004a66:	4603      	mov	r3, r0
 8004a68:	2b00      	cmp	r3, #0
 8004a6a:	d001      	beq.n	8004a70 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 8004a6c:	2301      	movs	r3, #1
 8004a6e:	e04c      	b.n	8004b0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004a70:	2300      	movs	r3, #0
 8004a72:	617b      	str	r3, [r7, #20]
 8004a74:	68fb      	ldr	r3, [r7, #12]
 8004a76:	681b      	ldr	r3, [r3, #0]
 8004a78:	695b      	ldr	r3, [r3, #20]
 8004a7a:	617b      	str	r3, [r7, #20]
 8004a7c:	68fb      	ldr	r3, [r7, #12]
 8004a7e:	681b      	ldr	r3, [r3, #0]
 8004a80:	699b      	ldr	r3, [r3, #24]
 8004a82:	617b      	str	r3, [r7, #20]
 8004a84:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004a86:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004a88:	6a39      	ldr	r1, [r7, #32]
 8004a8a:	68f8      	ldr	r0, [r7, #12]
 8004a8c:	f000 fa46 	bl	8004f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004a90:	4603      	mov	r3, r0
 8004a92:	2b00      	cmp	r3, #0
 8004a94:	d00d      	beq.n	8004ab2 <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004a96:	68fb      	ldr	r3, [r7, #12]
 8004a98:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004a9a:	2b04      	cmp	r3, #4
 8004a9c:	d107      	bne.n	8004aae <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a9e:	68fb      	ldr	r3, [r7, #12]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	681a      	ldr	r2, [r3, #0]
 8004aa4:	68fb      	ldr	r3, [r7, #12]
 8004aa6:	681b      	ldr	r3, [r3, #0]
 8004aa8:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004aac:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004aae:	2301      	movs	r3, #1
 8004ab0:	e02b      	b.n	8004b0a <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004ab2:	88fb      	ldrh	r3, [r7, #6]
 8004ab4:	2b01      	cmp	r3, #1
 8004ab6:	d105      	bne.n	8004ac4 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004ab8:	893b      	ldrh	r3, [r7, #8]
 8004aba:	b2da      	uxtb	r2, r3
 8004abc:	68fb      	ldr	r3, [r7, #12]
 8004abe:	681b      	ldr	r3, [r3, #0]
 8004ac0:	611a      	str	r2, [r3, #16]
 8004ac2:	e021      	b.n	8004b08 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004ac4:	893b      	ldrh	r3, [r7, #8]
 8004ac6:	0a1b      	lsrs	r3, r3, #8
 8004ac8:	b29b      	uxth	r3, r3
 8004aca:	b2da      	uxtb	r2, r3
 8004acc:	68fb      	ldr	r3, [r7, #12]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004ad2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004ad4:	6a39      	ldr	r1, [r7, #32]
 8004ad6:	68f8      	ldr	r0, [r7, #12]
 8004ad8:	f000 fa20 	bl	8004f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004adc:	4603      	mov	r3, r0
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d00d      	beq.n	8004afe <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004ae2:	68fb      	ldr	r3, [r7, #12]
 8004ae4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ae6:	2b04      	cmp	r3, #4
 8004ae8:	d107      	bne.n	8004afa <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004aea:	68fb      	ldr	r3, [r7, #12]
 8004aec:	681b      	ldr	r3, [r3, #0]
 8004aee:	681a      	ldr	r2, [r3, #0]
 8004af0:	68fb      	ldr	r3, [r7, #12]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004af8:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e005      	b.n	8004b0a <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004afe:	893b      	ldrh	r3, [r7, #8]
 8004b00:	b2da      	uxtb	r2, r3
 8004b02:	68fb      	ldr	r3, [r7, #12]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004b08:	2300      	movs	r3, #0
}
 8004b0a:	4618      	mov	r0, r3
 8004b0c:	3718      	adds	r7, #24
 8004b0e:	46bd      	mov	sp, r7
 8004b10:	bd80      	pop	{r7, pc}
 8004b12:	bf00      	nop
 8004b14:	00010002 	.word	0x00010002

08004b18 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004b18:	b580      	push	{r7, lr}
 8004b1a:	b088      	sub	sp, #32
 8004b1c:	af02      	add	r7, sp, #8
 8004b1e:	60f8      	str	r0, [r7, #12]
 8004b20:	4608      	mov	r0, r1
 8004b22:	4611      	mov	r1, r2
 8004b24:	461a      	mov	r2, r3
 8004b26:	4603      	mov	r3, r0
 8004b28:	817b      	strh	r3, [r7, #10]
 8004b2a:	460b      	mov	r3, r1
 8004b2c:	813b      	strh	r3, [r7, #8]
 8004b2e:	4613      	mov	r3, r2
 8004b30:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b32:	68fb      	ldr	r3, [r7, #12]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	681a      	ldr	r2, [r3, #0]
 8004b38:	68fb      	ldr	r3, [r7, #12]
 8004b3a:	681b      	ldr	r3, [r3, #0]
 8004b3c:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004b40:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004b42:	68fb      	ldr	r3, [r7, #12]
 8004b44:	681b      	ldr	r3, [r3, #0]
 8004b46:	681a      	ldr	r2, [r3, #0]
 8004b48:	68fb      	ldr	r3, [r7, #12]
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004b50:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004b52:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b54:	9300      	str	r3, [sp, #0]
 8004b56:	6a3b      	ldr	r3, [r7, #32]
 8004b58:	2200      	movs	r2, #0
 8004b5a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004b5e:	68f8      	ldr	r0, [r7, #12]
 8004b60:	f000 f8c2 	bl	8004ce8 <I2C_WaitOnFlagUntilTimeout>
 8004b64:	4603      	mov	r3, r0
 8004b66:	2b00      	cmp	r3, #0
 8004b68:	d00d      	beq.n	8004b86 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004b6a:	68fb      	ldr	r3, [r7, #12]
 8004b6c:	681b      	ldr	r3, [r3, #0]
 8004b6e:	681b      	ldr	r3, [r3, #0]
 8004b70:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b74:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004b78:	d103      	bne.n	8004b82 <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004b7a:	68fb      	ldr	r3, [r7, #12]
 8004b7c:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004b80:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004b82:	2303      	movs	r3, #3
 8004b84:	e0aa      	b.n	8004cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004b86:	897b      	ldrh	r3, [r7, #10]
 8004b88:	b2db      	uxtb	r3, r3
 8004b8a:	461a      	mov	r2, r3
 8004b8c:	68fb      	ldr	r3, [r7, #12]
 8004b8e:	681b      	ldr	r3, [r3, #0]
 8004b90:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004b94:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004b96:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004b98:	6a3a      	ldr	r2, [r7, #32]
 8004b9a:	4952      	ldr	r1, [pc, #328]	@ (8004ce4 <I2C_RequestMemoryRead+0x1cc>)
 8004b9c:	68f8      	ldr	r0, [r7, #12]
 8004b9e:	f000 f91d 	bl	8004ddc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004ba2:	4603      	mov	r3, r0
 8004ba4:	2b00      	cmp	r3, #0
 8004ba6:	d001      	beq.n	8004bac <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004ba8:	2301      	movs	r3, #1
 8004baa:	e097      	b.n	8004cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004bac:	2300      	movs	r3, #0
 8004bae:	617b      	str	r3, [r7, #20]
 8004bb0:	68fb      	ldr	r3, [r7, #12]
 8004bb2:	681b      	ldr	r3, [r3, #0]
 8004bb4:	695b      	ldr	r3, [r3, #20]
 8004bb6:	617b      	str	r3, [r7, #20]
 8004bb8:	68fb      	ldr	r3, [r7, #12]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	699b      	ldr	r3, [r3, #24]
 8004bbe:	617b      	str	r3, [r7, #20]
 8004bc0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004bc2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004bc4:	6a39      	ldr	r1, [r7, #32]
 8004bc6:	68f8      	ldr	r0, [r7, #12]
 8004bc8:	f000 f9a8 	bl	8004f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004bcc:	4603      	mov	r3, r0
 8004bce:	2b00      	cmp	r3, #0
 8004bd0:	d00d      	beq.n	8004bee <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004bd6:	2b04      	cmp	r3, #4
 8004bd8:	d107      	bne.n	8004bea <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	681a      	ldr	r2, [r3, #0]
 8004be0:	68fb      	ldr	r3, [r7, #12]
 8004be2:	681b      	ldr	r3, [r3, #0]
 8004be4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004be8:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004bea:	2301      	movs	r3, #1
 8004bec:	e076      	b.n	8004cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004bee:	88fb      	ldrh	r3, [r7, #6]
 8004bf0:	2b01      	cmp	r3, #1
 8004bf2:	d105      	bne.n	8004c00 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004bf4:	893b      	ldrh	r3, [r7, #8]
 8004bf6:	b2da      	uxtb	r2, r3
 8004bf8:	68fb      	ldr	r3, [r7, #12]
 8004bfa:	681b      	ldr	r3, [r3, #0]
 8004bfc:	611a      	str	r2, [r3, #16]
 8004bfe:	e021      	b.n	8004c44 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004c00:	893b      	ldrh	r3, [r7, #8]
 8004c02:	0a1b      	lsrs	r3, r3, #8
 8004c04:	b29b      	uxth	r3, r3
 8004c06:	b2da      	uxtb	r2, r3
 8004c08:	68fb      	ldr	r3, [r7, #12]
 8004c0a:	681b      	ldr	r3, [r3, #0]
 8004c0c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c0e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c10:	6a39      	ldr	r1, [r7, #32]
 8004c12:	68f8      	ldr	r0, [r7, #12]
 8004c14:	f000 f982 	bl	8004f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c18:	4603      	mov	r3, r0
 8004c1a:	2b00      	cmp	r3, #0
 8004c1c:	d00d      	beq.n	8004c3a <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c1e:	68fb      	ldr	r3, [r7, #12]
 8004c20:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c22:	2b04      	cmp	r3, #4
 8004c24:	d107      	bne.n	8004c36 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c26:	68fb      	ldr	r3, [r7, #12]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	681a      	ldr	r2, [r3, #0]
 8004c2c:	68fb      	ldr	r3, [r7, #12]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c34:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004c36:	2301      	movs	r3, #1
 8004c38:	e050      	b.n	8004cdc <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004c3a:	893b      	ldrh	r3, [r7, #8]
 8004c3c:	b2da      	uxtb	r2, r3
 8004c3e:	68fb      	ldr	r3, [r7, #12]
 8004c40:	681b      	ldr	r3, [r3, #0]
 8004c42:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004c44:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004c46:	6a39      	ldr	r1, [r7, #32]
 8004c48:	68f8      	ldr	r0, [r7, #12]
 8004c4a:	f000 f967 	bl	8004f1c <I2C_WaitOnTXEFlagUntilTimeout>
 8004c4e:	4603      	mov	r3, r0
 8004c50:	2b00      	cmp	r3, #0
 8004c52:	d00d      	beq.n	8004c70 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c58:	2b04      	cmp	r3, #4
 8004c5a:	d107      	bne.n	8004c6c <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004c5c:	68fb      	ldr	r3, [r7, #12]
 8004c5e:	681b      	ldr	r3, [r3, #0]
 8004c60:	681a      	ldr	r2, [r3, #0]
 8004c62:	68fb      	ldr	r3, [r7, #12]
 8004c64:	681b      	ldr	r3, [r3, #0]
 8004c66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004c6a:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004c6c:	2301      	movs	r3, #1
 8004c6e:	e035      	b.n	8004cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	681a      	ldr	r2, [r3, #0]
 8004c76:	68fb      	ldr	r3, [r7, #12]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004c7e:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004c80:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004c82:	9300      	str	r3, [sp, #0]
 8004c84:	6a3b      	ldr	r3, [r7, #32]
 8004c86:	2200      	movs	r2, #0
 8004c88:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004c8c:	68f8      	ldr	r0, [r7, #12]
 8004c8e:	f000 f82b 	bl	8004ce8 <I2C_WaitOnFlagUntilTimeout>
 8004c92:	4603      	mov	r3, r0
 8004c94:	2b00      	cmp	r3, #0
 8004c96:	d00d      	beq.n	8004cb4 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004c98:	68fb      	ldr	r3, [r7, #12]
 8004c9a:	681b      	ldr	r3, [r3, #0]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004ca2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004ca6:	d103      	bne.n	8004cb0 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004ca8:	68fb      	ldr	r3, [r7, #12]
 8004caa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004cae:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004cb0:	2303      	movs	r3, #3
 8004cb2:	e013      	b.n	8004cdc <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004cb4:	897b      	ldrh	r3, [r7, #10]
 8004cb6:	b2db      	uxtb	r3, r3
 8004cb8:	f043 0301 	orr.w	r3, r3, #1
 8004cbc:	b2da      	uxtb	r2, r3
 8004cbe:	68fb      	ldr	r3, [r7, #12]
 8004cc0:	681b      	ldr	r3, [r3, #0]
 8004cc2:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004cc4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004cc6:	6a3a      	ldr	r2, [r7, #32]
 8004cc8:	4906      	ldr	r1, [pc, #24]	@ (8004ce4 <I2C_RequestMemoryRead+0x1cc>)
 8004cca:	68f8      	ldr	r0, [r7, #12]
 8004ccc:	f000 f886 	bl	8004ddc <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004cd0:	4603      	mov	r3, r0
 8004cd2:	2b00      	cmp	r3, #0
 8004cd4:	d001      	beq.n	8004cda <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004cd6:	2301      	movs	r3, #1
 8004cd8:	e000      	b.n	8004cdc <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004cda:	2300      	movs	r3, #0
}
 8004cdc:	4618      	mov	r0, r3
 8004cde:	3718      	adds	r7, #24
 8004ce0:	46bd      	mov	sp, r7
 8004ce2:	bd80      	pop	{r7, pc}
 8004ce4:	00010002 	.word	0x00010002

08004ce8 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004ce8:	b580      	push	{r7, lr}
 8004cea:	b084      	sub	sp, #16
 8004cec:	af00      	add	r7, sp, #0
 8004cee:	60f8      	str	r0, [r7, #12]
 8004cf0:	60b9      	str	r1, [r7, #8]
 8004cf2:	603b      	str	r3, [r7, #0]
 8004cf4:	4613      	mov	r3, r2
 8004cf6:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004cf8:	e048      	b.n	8004d8c <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004cfa:	683b      	ldr	r3, [r7, #0]
 8004cfc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004d00:	d044      	beq.n	8004d8c <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004d02:	f7fe fa11 	bl	8003128 <HAL_GetTick>
 8004d06:	4602      	mov	r2, r0
 8004d08:	69bb      	ldr	r3, [r7, #24]
 8004d0a:	1ad3      	subs	r3, r2, r3
 8004d0c:	683a      	ldr	r2, [r7, #0]
 8004d0e:	429a      	cmp	r2, r3
 8004d10:	d302      	bcc.n	8004d18 <I2C_WaitOnFlagUntilTimeout+0x30>
 8004d12:	683b      	ldr	r3, [r7, #0]
 8004d14:	2b00      	cmp	r3, #0
 8004d16:	d139      	bne.n	8004d8c <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004d18:	68bb      	ldr	r3, [r7, #8]
 8004d1a:	0c1b      	lsrs	r3, r3, #16
 8004d1c:	b2db      	uxtb	r3, r3
 8004d1e:	2b01      	cmp	r3, #1
 8004d20:	d10d      	bne.n	8004d3e <I2C_WaitOnFlagUntilTimeout+0x56>
 8004d22:	68fb      	ldr	r3, [r7, #12]
 8004d24:	681b      	ldr	r3, [r3, #0]
 8004d26:	695b      	ldr	r3, [r3, #20]
 8004d28:	43da      	mvns	r2, r3
 8004d2a:	68bb      	ldr	r3, [r7, #8]
 8004d2c:	4013      	ands	r3, r2
 8004d2e:	b29b      	uxth	r3, r3
 8004d30:	2b00      	cmp	r3, #0
 8004d32:	bf0c      	ite	eq
 8004d34:	2301      	moveq	r3, #1
 8004d36:	2300      	movne	r3, #0
 8004d38:	b2db      	uxtb	r3, r3
 8004d3a:	461a      	mov	r2, r3
 8004d3c:	e00c      	b.n	8004d58 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	43da      	mvns	r2, r3
 8004d46:	68bb      	ldr	r3, [r7, #8]
 8004d48:	4013      	ands	r3, r2
 8004d4a:	b29b      	uxth	r3, r3
 8004d4c:	2b00      	cmp	r3, #0
 8004d4e:	bf0c      	ite	eq
 8004d50:	2301      	moveq	r3, #1
 8004d52:	2300      	movne	r3, #0
 8004d54:	b2db      	uxtb	r3, r3
 8004d56:	461a      	mov	r2, r3
 8004d58:	79fb      	ldrb	r3, [r7, #7]
 8004d5a:	429a      	cmp	r2, r3
 8004d5c:	d116      	bne.n	8004d8c <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 8004d5e:	68fb      	ldr	r3, [r7, #12]
 8004d60:	2200      	movs	r2, #0
 8004d62:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 8004d64:	68fb      	ldr	r3, [r7, #12]
 8004d66:	2220      	movs	r2, #32
 8004d68:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 8004d6c:	68fb      	ldr	r3, [r7, #12]
 8004d6e:	2200      	movs	r2, #0
 8004d70:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 8004d74:	68fb      	ldr	r3, [r7, #12]
 8004d76:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d78:	f043 0220 	orr.w	r2, r3, #32
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	2200      	movs	r2, #0
 8004d84:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004d88:	2301      	movs	r3, #1
 8004d8a:	e023      	b.n	8004dd4 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004d8c:	68bb      	ldr	r3, [r7, #8]
 8004d8e:	0c1b      	lsrs	r3, r3, #16
 8004d90:	b2db      	uxtb	r3, r3
 8004d92:	2b01      	cmp	r3, #1
 8004d94:	d10d      	bne.n	8004db2 <I2C_WaitOnFlagUntilTimeout+0xca>
 8004d96:	68fb      	ldr	r3, [r7, #12]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	695b      	ldr	r3, [r3, #20]
 8004d9c:	43da      	mvns	r2, r3
 8004d9e:	68bb      	ldr	r3, [r7, #8]
 8004da0:	4013      	ands	r3, r2
 8004da2:	b29b      	uxth	r3, r3
 8004da4:	2b00      	cmp	r3, #0
 8004da6:	bf0c      	ite	eq
 8004da8:	2301      	moveq	r3, #1
 8004daa:	2300      	movne	r3, #0
 8004dac:	b2db      	uxtb	r3, r3
 8004dae:	461a      	mov	r2, r3
 8004db0:	e00c      	b.n	8004dcc <I2C_WaitOnFlagUntilTimeout+0xe4>
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	681b      	ldr	r3, [r3, #0]
 8004db6:	699b      	ldr	r3, [r3, #24]
 8004db8:	43da      	mvns	r2, r3
 8004dba:	68bb      	ldr	r3, [r7, #8]
 8004dbc:	4013      	ands	r3, r2
 8004dbe:	b29b      	uxth	r3, r3
 8004dc0:	2b00      	cmp	r3, #0
 8004dc2:	bf0c      	ite	eq
 8004dc4:	2301      	moveq	r3, #1
 8004dc6:	2300      	movne	r3, #0
 8004dc8:	b2db      	uxtb	r3, r3
 8004dca:	461a      	mov	r2, r3
 8004dcc:	79fb      	ldrb	r3, [r7, #7]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d093      	beq.n	8004cfa <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8004dd2:	2300      	movs	r3, #0
}
 8004dd4:	4618      	mov	r0, r3
 8004dd6:	3710      	adds	r7, #16
 8004dd8:	46bd      	mov	sp, r7
 8004dda:	bd80      	pop	{r7, pc}

08004ddc <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004ddc:	b580      	push	{r7, lr}
 8004dde:	b084      	sub	sp, #16
 8004de0:	af00      	add	r7, sp, #0
 8004de2:	60f8      	str	r0, [r7, #12]
 8004de4:	60b9      	str	r1, [r7, #8]
 8004de6:	607a      	str	r2, [r7, #4]
 8004de8:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004dea:	e071      	b.n	8004ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004dec:	68fb      	ldr	r3, [r7, #12]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	695b      	ldr	r3, [r3, #20]
 8004df2:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004df6:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004dfa:	d123      	bne.n	8004e44 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dfc:	68fb      	ldr	r3, [r7, #12]
 8004dfe:	681b      	ldr	r3, [r3, #0]
 8004e00:	681a      	ldr	r2, [r3, #0]
 8004e02:	68fb      	ldr	r3, [r7, #12]
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004e0a:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004e0c:	68fb      	ldr	r3, [r7, #12]
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004e14:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004e16:	68fb      	ldr	r3, [r7, #12]
 8004e18:	2200      	movs	r2, #0
 8004e1a:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004e1c:	68fb      	ldr	r3, [r7, #12]
 8004e1e:	2220      	movs	r2, #32
 8004e20:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e24:	68fb      	ldr	r3, [r7, #12]
 8004e26:	2200      	movs	r2, #0
 8004e28:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004e2c:	68fb      	ldr	r3, [r7, #12]
 8004e2e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004e30:	f043 0204 	orr.w	r2, r3, #4
 8004e34:	68fb      	ldr	r3, [r7, #12]
 8004e36:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004e38:	68fb      	ldr	r3, [r7, #12]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004e40:	2301      	movs	r3, #1
 8004e42:	e067      	b.n	8004f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004e44:	687b      	ldr	r3, [r7, #4]
 8004e46:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004e4a:	d041      	beq.n	8004ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004e4c:	f7fe f96c 	bl	8003128 <HAL_GetTick>
 8004e50:	4602      	mov	r2, r0
 8004e52:	683b      	ldr	r3, [r7, #0]
 8004e54:	1ad3      	subs	r3, r2, r3
 8004e56:	687a      	ldr	r2, [r7, #4]
 8004e58:	429a      	cmp	r2, r3
 8004e5a:	d302      	bcc.n	8004e62 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2b00      	cmp	r3, #0
 8004e60:	d136      	bne.n	8004ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 8004e62:	68bb      	ldr	r3, [r7, #8]
 8004e64:	0c1b      	lsrs	r3, r3, #16
 8004e66:	b2db      	uxtb	r3, r3
 8004e68:	2b01      	cmp	r3, #1
 8004e6a:	d10c      	bne.n	8004e86 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 8004e6c:	68fb      	ldr	r3, [r7, #12]
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	695b      	ldr	r3, [r3, #20]
 8004e72:	43da      	mvns	r2, r3
 8004e74:	68bb      	ldr	r3, [r7, #8]
 8004e76:	4013      	ands	r3, r2
 8004e78:	b29b      	uxth	r3, r3
 8004e7a:	2b00      	cmp	r3, #0
 8004e7c:	bf14      	ite	ne
 8004e7e:	2301      	movne	r3, #1
 8004e80:	2300      	moveq	r3, #0
 8004e82:	b2db      	uxtb	r3, r3
 8004e84:	e00b      	b.n	8004e9e <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 8004e86:	68fb      	ldr	r3, [r7, #12]
 8004e88:	681b      	ldr	r3, [r3, #0]
 8004e8a:	699b      	ldr	r3, [r3, #24]
 8004e8c:	43da      	mvns	r2, r3
 8004e8e:	68bb      	ldr	r3, [r7, #8]
 8004e90:	4013      	ands	r3, r2
 8004e92:	b29b      	uxth	r3, r3
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	bf14      	ite	ne
 8004e98:	2301      	movne	r3, #1
 8004e9a:	2300      	moveq	r3, #0
 8004e9c:	b2db      	uxtb	r3, r3
 8004e9e:	2b00      	cmp	r3, #0
 8004ea0:	d016      	beq.n	8004ed0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ea2:	68fb      	ldr	r3, [r7, #12]
 8004ea4:	2200      	movs	r2, #0
 8004ea6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ea8:	68fb      	ldr	r3, [r7, #12]
 8004eaa:	2220      	movs	r2, #32
 8004eac:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004eb0:	68fb      	ldr	r3, [r7, #12]
 8004eb2:	2200      	movs	r2, #0
 8004eb4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004eb8:	68fb      	ldr	r3, [r7, #12]
 8004eba:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004ebc:	f043 0220 	orr.w	r2, r3, #32
 8004ec0:	68fb      	ldr	r3, [r7, #12]
 8004ec2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	2200      	movs	r2, #0
 8004ec8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004ecc:	2301      	movs	r3, #1
 8004ece:	e021      	b.n	8004f14 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004ed0:	68bb      	ldr	r3, [r7, #8]
 8004ed2:	0c1b      	lsrs	r3, r3, #16
 8004ed4:	b2db      	uxtb	r3, r3
 8004ed6:	2b01      	cmp	r3, #1
 8004ed8:	d10c      	bne.n	8004ef4 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004eda:	68fb      	ldr	r3, [r7, #12]
 8004edc:	681b      	ldr	r3, [r3, #0]
 8004ede:	695b      	ldr	r3, [r3, #20]
 8004ee0:	43da      	mvns	r2, r3
 8004ee2:	68bb      	ldr	r3, [r7, #8]
 8004ee4:	4013      	ands	r3, r2
 8004ee6:	b29b      	uxth	r3, r3
 8004ee8:	2b00      	cmp	r3, #0
 8004eea:	bf14      	ite	ne
 8004eec:	2301      	movne	r3, #1
 8004eee:	2300      	moveq	r3, #0
 8004ef0:	b2db      	uxtb	r3, r3
 8004ef2:	e00b      	b.n	8004f0c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004ef4:	68fb      	ldr	r3, [r7, #12]
 8004ef6:	681b      	ldr	r3, [r3, #0]
 8004ef8:	699b      	ldr	r3, [r3, #24]
 8004efa:	43da      	mvns	r2, r3
 8004efc:	68bb      	ldr	r3, [r7, #8]
 8004efe:	4013      	ands	r3, r2
 8004f00:	b29b      	uxth	r3, r3
 8004f02:	2b00      	cmp	r3, #0
 8004f04:	bf14      	ite	ne
 8004f06:	2301      	movne	r3, #1
 8004f08:	2300      	moveq	r3, #0
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	f47f af6d 	bne.w	8004dec <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 8004f12:	2300      	movs	r3, #0
}
 8004f14:	4618      	mov	r0, r3
 8004f16:	3710      	adds	r7, #16
 8004f18:	46bd      	mov	sp, r7
 8004f1a:	bd80      	pop	{r7, pc}

08004f1c <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004f1c:	b580      	push	{r7, lr}
 8004f1e:	b084      	sub	sp, #16
 8004f20:	af00      	add	r7, sp, #0
 8004f22:	60f8      	str	r0, [r7, #12]
 8004f24:	60b9      	str	r1, [r7, #8]
 8004f26:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f28:	e034      	b.n	8004f94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004f2a:	68f8      	ldr	r0, [r7, #12]
 8004f2c:	f000 f8e3 	bl	80050f6 <I2C_IsAcknowledgeFailed>
 8004f30:	4603      	mov	r3, r0
 8004f32:	2b00      	cmp	r3, #0
 8004f34:	d001      	beq.n	8004f3a <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004f36:	2301      	movs	r3, #1
 8004f38:	e034      	b.n	8004fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004f3a:	68bb      	ldr	r3, [r7, #8]
 8004f3c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004f40:	d028      	beq.n	8004f94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004f42:	f7fe f8f1 	bl	8003128 <HAL_GetTick>
 8004f46:	4602      	mov	r2, r0
 8004f48:	687b      	ldr	r3, [r7, #4]
 8004f4a:	1ad3      	subs	r3, r2, r3
 8004f4c:	68ba      	ldr	r2, [r7, #8]
 8004f4e:	429a      	cmp	r2, r3
 8004f50:	d302      	bcc.n	8004f58 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 8004f52:	68bb      	ldr	r3, [r7, #8]
 8004f54:	2b00      	cmp	r3, #0
 8004f56:	d11d      	bne.n	8004f94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 8004f58:	68fb      	ldr	r3, [r7, #12]
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	695b      	ldr	r3, [r3, #20]
 8004f5e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f62:	2b80      	cmp	r3, #128	@ 0x80
 8004f64:	d016      	beq.n	8004f94 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004f66:	68fb      	ldr	r3, [r7, #12]
 8004f68:	2200      	movs	r2, #0
 8004f6a:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004f6c:	68fb      	ldr	r3, [r7, #12]
 8004f6e:	2220      	movs	r2, #32
 8004f70:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004f74:	68fb      	ldr	r3, [r7, #12]
 8004f76:	2200      	movs	r2, #0
 8004f78:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004f7c:	68fb      	ldr	r3, [r7, #12]
 8004f7e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004f80:	f043 0220 	orr.w	r2, r3, #32
 8004f84:	68fb      	ldr	r3, [r7, #12]
 8004f86:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004f88:	68fb      	ldr	r3, [r7, #12]
 8004f8a:	2200      	movs	r2, #0
 8004f8c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004f90:	2301      	movs	r3, #1
 8004f92:	e007      	b.n	8004fa4 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004f94:	68fb      	ldr	r3, [r7, #12]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8004f9e:	2b80      	cmp	r3, #128	@ 0x80
 8004fa0:	d1c3      	bne.n	8004f2a <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8004fa2:	2300      	movs	r3, #0
}
 8004fa4:	4618      	mov	r0, r3
 8004fa6:	3710      	adds	r7, #16
 8004fa8:	46bd      	mov	sp, r7
 8004faa:	bd80      	pop	{r7, pc}

08004fac <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004fac:	b580      	push	{r7, lr}
 8004fae:	b084      	sub	sp, #16
 8004fb0:	af00      	add	r7, sp, #0
 8004fb2:	60f8      	str	r0, [r7, #12]
 8004fb4:	60b9      	str	r1, [r7, #8]
 8004fb6:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004fb8:	e034      	b.n	8005024 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004fba:	68f8      	ldr	r0, [r7, #12]
 8004fbc:	f000 f89b 	bl	80050f6 <I2C_IsAcknowledgeFailed>
 8004fc0:	4603      	mov	r3, r0
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d001      	beq.n	8004fca <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004fc6:	2301      	movs	r3, #1
 8004fc8:	e034      	b.n	8005034 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004fca:	68bb      	ldr	r3, [r7, #8]
 8004fcc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004fd0:	d028      	beq.n	8005024 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8004fd2:	f7fe f8a9 	bl	8003128 <HAL_GetTick>
 8004fd6:	4602      	mov	r2, r0
 8004fd8:	687b      	ldr	r3, [r7, #4]
 8004fda:	1ad3      	subs	r3, r2, r3
 8004fdc:	68ba      	ldr	r2, [r7, #8]
 8004fde:	429a      	cmp	r2, r3
 8004fe0:	d302      	bcc.n	8004fe8 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 8004fe2:	68bb      	ldr	r3, [r7, #8]
 8004fe4:	2b00      	cmp	r3, #0
 8004fe6:	d11d      	bne.n	8005024 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004fe8:	68fb      	ldr	r3, [r7, #12]
 8004fea:	681b      	ldr	r3, [r3, #0]
 8004fec:	695b      	ldr	r3, [r3, #20]
 8004fee:	f003 0304 	and.w	r3, r3, #4
 8004ff2:	2b04      	cmp	r3, #4
 8004ff4:	d016      	beq.n	8005024 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004ff6:	68fb      	ldr	r3, [r7, #12]
 8004ff8:	2200      	movs	r2, #0
 8004ffa:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004ffc:	68fb      	ldr	r3, [r7, #12]
 8004ffe:	2220      	movs	r2, #32
 8005000:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005004:	68fb      	ldr	r3, [r7, #12]
 8005006:	2200      	movs	r2, #0
 8005008:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800500c:	68fb      	ldr	r3, [r7, #12]
 800500e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005010:	f043 0220 	orr.w	r2, r3, #32
 8005014:	68fb      	ldr	r3, [r7, #12]
 8005016:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8005018:	68fb      	ldr	r3, [r7, #12]
 800501a:	2200      	movs	r2, #0
 800501c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8005020:	2301      	movs	r3, #1
 8005022:	e007      	b.n	8005034 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8005024:	68fb      	ldr	r3, [r7, #12]
 8005026:	681b      	ldr	r3, [r3, #0]
 8005028:	695b      	ldr	r3, [r3, #20]
 800502a:	f003 0304 	and.w	r3, r3, #4
 800502e:	2b04      	cmp	r3, #4
 8005030:	d1c3      	bne.n	8004fba <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 8005032:	2300      	movs	r3, #0
}
 8005034:	4618      	mov	r0, r3
 8005036:	3710      	adds	r7, #16
 8005038:	46bd      	mov	sp, r7
 800503a:	bd80      	pop	{r7, pc}

0800503c <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 800503c:	b580      	push	{r7, lr}
 800503e:	b084      	sub	sp, #16
 8005040:	af00      	add	r7, sp, #0
 8005042:	60f8      	str	r0, [r7, #12]
 8005044:	60b9      	str	r1, [r7, #8]
 8005046:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8005048:	e049      	b.n	80050de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800504a:	68fb      	ldr	r3, [r7, #12]
 800504c:	681b      	ldr	r3, [r3, #0]
 800504e:	695b      	ldr	r3, [r3, #20]
 8005050:	f003 0310 	and.w	r3, r3, #16
 8005054:	2b10      	cmp	r3, #16
 8005056:	d119      	bne.n	800508c <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 8005058:	68fb      	ldr	r3, [r7, #12]
 800505a:	681b      	ldr	r3, [r3, #0]
 800505c:	f06f 0210 	mvn.w	r2, #16
 8005060:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8005062:	68fb      	ldr	r3, [r7, #12]
 8005064:	2200      	movs	r2, #0
 8005066:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8005068:	68fb      	ldr	r3, [r7, #12]
 800506a:	2220      	movs	r2, #32
 800506c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005070:	68fb      	ldr	r3, [r7, #12]
 8005072:	2200      	movs	r2, #0
 8005074:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 8005078:	68fb      	ldr	r3, [r7, #12]
 800507a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 800507c:	68fb      	ldr	r3, [r7, #12]
 800507e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8005080:	68fb      	ldr	r3, [r7, #12]
 8005082:	2200      	movs	r2, #0
 8005084:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8005088:	2301      	movs	r3, #1
 800508a:	e030      	b.n	80050ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800508c:	f7fe f84c 	bl	8003128 <HAL_GetTick>
 8005090:	4602      	mov	r2, r0
 8005092:	687b      	ldr	r3, [r7, #4]
 8005094:	1ad3      	subs	r3, r2, r3
 8005096:	68ba      	ldr	r2, [r7, #8]
 8005098:	429a      	cmp	r2, r3
 800509a:	d302      	bcc.n	80050a2 <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 800509c:	68bb      	ldr	r3, [r7, #8]
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d11d      	bne.n	80050de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80050a2:	68fb      	ldr	r3, [r7, #12]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	695b      	ldr	r3, [r3, #20]
 80050a8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050ac:	2b40      	cmp	r3, #64	@ 0x40
 80050ae:	d016      	beq.n	80050de <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 80050b0:	68fb      	ldr	r3, [r7, #12]
 80050b2:	2200      	movs	r2, #0
 80050b4:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 80050b6:	68fb      	ldr	r3, [r7, #12]
 80050b8:	2220      	movs	r2, #32
 80050ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 80050be:	68fb      	ldr	r3, [r7, #12]
 80050c0:	2200      	movs	r2, #0
 80050c2:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80050c6:	68fb      	ldr	r3, [r7, #12]
 80050c8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80050ca:	f043 0220 	orr.w	r2, r3, #32
 80050ce:	68fb      	ldr	r3, [r7, #12]
 80050d0:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80050d2:	68fb      	ldr	r3, [r7, #12]
 80050d4:	2200      	movs	r2, #0
 80050d6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 80050da:	2301      	movs	r3, #1
 80050dc:	e007      	b.n	80050ee <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80050de:	68fb      	ldr	r3, [r7, #12]
 80050e0:	681b      	ldr	r3, [r3, #0]
 80050e2:	695b      	ldr	r3, [r3, #20]
 80050e4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80050e8:	2b40      	cmp	r3, #64	@ 0x40
 80050ea:	d1ae      	bne.n	800504a <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 80050ec:	2300      	movs	r3, #0
}
 80050ee:	4618      	mov	r0, r3
 80050f0:	3710      	adds	r7, #16
 80050f2:	46bd      	mov	sp, r7
 80050f4:	bd80      	pop	{r7, pc}

080050f6 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 80050f6:	b480      	push	{r7}
 80050f8:	b083      	sub	sp, #12
 80050fa:	af00      	add	r7, sp, #0
 80050fc:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 80050fe:	687b      	ldr	r3, [r7, #4]
 8005100:	681b      	ldr	r3, [r3, #0]
 8005102:	695b      	ldr	r3, [r3, #20]
 8005104:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8005108:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 800510c:	d11b      	bne.n	8005146 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8005116:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	2200      	movs	r2, #0
 800511c:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	2220      	movs	r2, #32
 8005122:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8005126:	687b      	ldr	r3, [r7, #4]
 8005128:	2200      	movs	r2, #0
 800512a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800512e:	687b      	ldr	r3, [r7, #4]
 8005130:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8005132:	f043 0204 	orr.w	r2, r3, #4
 8005136:	687b      	ldr	r3, [r7, #4]
 8005138:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	2200      	movs	r2, #0
 800513e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 8005142:	2301      	movs	r3, #1
 8005144:	e000      	b.n	8005148 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 8005146:	2300      	movs	r3, #0
}
 8005148:	4618      	mov	r0, r3
 800514a:	370c      	adds	r7, #12
 800514c:	46bd      	mov	sp, r7
 800514e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005152:	4770      	bx	lr

08005154 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005154:	b580      	push	{r7, lr}
 8005156:	b086      	sub	sp, #24
 8005158:	af00      	add	r7, sp, #0
 800515a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 800515c:	687b      	ldr	r3, [r7, #4]
 800515e:	2b00      	cmp	r3, #0
 8005160:	d101      	bne.n	8005166 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005162:	2301      	movs	r3, #1
 8005164:	e267      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	681b      	ldr	r3, [r3, #0]
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d075      	beq.n	800525e <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005172:	4b88      	ldr	r3, [pc, #544]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 030c 	and.w	r3, r3, #12
 800517a:	2b04      	cmp	r3, #4
 800517c:	d00c      	beq.n	8005198 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800517e:	4b85      	ldr	r3, [pc, #532]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 8005180:	689b      	ldr	r3, [r3, #8]
 8005182:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8005186:	2b08      	cmp	r3, #8
 8005188:	d112      	bne.n	80051b0 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800518a:	4b82      	ldr	r3, [pc, #520]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 800518c:	685b      	ldr	r3, [r3, #4]
 800518e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005192:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8005196:	d10b      	bne.n	80051b0 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005198:	4b7e      	ldr	r3, [pc, #504]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 800519a:	681b      	ldr	r3, [r3, #0]
 800519c:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80051a0:	2b00      	cmp	r3, #0
 80051a2:	d05b      	beq.n	800525c <HAL_RCC_OscConfig+0x108>
 80051a4:	687b      	ldr	r3, [r7, #4]
 80051a6:	685b      	ldr	r3, [r3, #4]
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d157      	bne.n	800525c <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80051ac:	2301      	movs	r3, #1
 80051ae:	e242      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	685b      	ldr	r3, [r3, #4]
 80051b4:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80051b8:	d106      	bne.n	80051c8 <HAL_RCC_OscConfig+0x74>
 80051ba:	4b76      	ldr	r3, [pc, #472]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80051bc:	681b      	ldr	r3, [r3, #0]
 80051be:	4a75      	ldr	r2, [pc, #468]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80051c0:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051c4:	6013      	str	r3, [r2, #0]
 80051c6:	e01d      	b.n	8005204 <HAL_RCC_OscConfig+0xb0>
 80051c8:	687b      	ldr	r3, [r7, #4]
 80051ca:	685b      	ldr	r3, [r3, #4]
 80051cc:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80051d0:	d10c      	bne.n	80051ec <HAL_RCC_OscConfig+0x98>
 80051d2:	4b70      	ldr	r3, [pc, #448]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80051d4:	681b      	ldr	r3, [r3, #0]
 80051d6:	4a6f      	ldr	r2, [pc, #444]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80051d8:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80051dc:	6013      	str	r3, [r2, #0]
 80051de:	4b6d      	ldr	r3, [pc, #436]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80051e0:	681b      	ldr	r3, [r3, #0]
 80051e2:	4a6c      	ldr	r2, [pc, #432]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80051e4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80051e8:	6013      	str	r3, [r2, #0]
 80051ea:	e00b      	b.n	8005204 <HAL_RCC_OscConfig+0xb0>
 80051ec:	4b69      	ldr	r3, [pc, #420]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	4a68      	ldr	r2, [pc, #416]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80051f2:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80051f6:	6013      	str	r3, [r2, #0]
 80051f8:	4b66      	ldr	r3, [pc, #408]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80051fa:	681b      	ldr	r3, [r3, #0]
 80051fc:	4a65      	ldr	r2, [pc, #404]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80051fe:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8005202:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	685b      	ldr	r3, [r3, #4]
 8005208:	2b00      	cmp	r3, #0
 800520a:	d013      	beq.n	8005234 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800520c:	f7fd ff8c 	bl	8003128 <HAL_GetTick>
 8005210:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005212:	e008      	b.n	8005226 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8005214:	f7fd ff88 	bl	8003128 <HAL_GetTick>
 8005218:	4602      	mov	r2, r0
 800521a:	693b      	ldr	r3, [r7, #16]
 800521c:	1ad3      	subs	r3, r2, r3
 800521e:	2b64      	cmp	r3, #100	@ 0x64
 8005220:	d901      	bls.n	8005226 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005222:	2303      	movs	r3, #3
 8005224:	e207      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005226:	4b5b      	ldr	r3, [pc, #364]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800522e:	2b00      	cmp	r3, #0
 8005230:	d0f0      	beq.n	8005214 <HAL_RCC_OscConfig+0xc0>
 8005232:	e014      	b.n	800525e <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005234:	f7fd ff78 	bl	8003128 <HAL_GetTick>
 8005238:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800523a:	e008      	b.n	800524e <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 800523c:	f7fd ff74 	bl	8003128 <HAL_GetTick>
 8005240:	4602      	mov	r2, r0
 8005242:	693b      	ldr	r3, [r7, #16]
 8005244:	1ad3      	subs	r3, r2, r3
 8005246:	2b64      	cmp	r3, #100	@ 0x64
 8005248:	d901      	bls.n	800524e <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800524a:	2303      	movs	r3, #3
 800524c:	e1f3      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800524e:	4b51      	ldr	r3, [pc, #324]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 8005250:	681b      	ldr	r3, [r3, #0]
 8005252:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8005256:	2b00      	cmp	r3, #0
 8005258:	d1f0      	bne.n	800523c <HAL_RCC_OscConfig+0xe8>
 800525a:	e000      	b.n	800525e <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800525c:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800525e:	687b      	ldr	r3, [r7, #4]
 8005260:	681b      	ldr	r3, [r3, #0]
 8005262:	f003 0302 	and.w	r3, r3, #2
 8005266:	2b00      	cmp	r3, #0
 8005268:	d063      	beq.n	8005332 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800526a:	4b4a      	ldr	r3, [pc, #296]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 800526c:	689b      	ldr	r3, [r3, #8]
 800526e:	f003 030c 	and.w	r3, r3, #12
 8005272:	2b00      	cmp	r3, #0
 8005274:	d00b      	beq.n	800528e <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005276:	4b47      	ldr	r3, [pc, #284]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 8005278:	689b      	ldr	r3, [r3, #8]
 800527a:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800527e:	2b08      	cmp	r3, #8
 8005280:	d11c      	bne.n	80052bc <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005282:	4b44      	ldr	r3, [pc, #272]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 8005284:	685b      	ldr	r3, [r3, #4]
 8005286:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800528a:	2b00      	cmp	r3, #0
 800528c:	d116      	bne.n	80052bc <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800528e:	4b41      	ldr	r3, [pc, #260]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f003 0302 	and.w	r3, r3, #2
 8005296:	2b00      	cmp	r3, #0
 8005298:	d005      	beq.n	80052a6 <HAL_RCC_OscConfig+0x152>
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	68db      	ldr	r3, [r3, #12]
 800529e:	2b01      	cmp	r3, #1
 80052a0:	d001      	beq.n	80052a6 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80052a2:	2301      	movs	r3, #1
 80052a4:	e1c7      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052a6:	4b3b      	ldr	r3, [pc, #236]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80052a8:	681b      	ldr	r3, [r3, #0]
 80052aa:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052ae:	687b      	ldr	r3, [r7, #4]
 80052b0:	691b      	ldr	r3, [r3, #16]
 80052b2:	00db      	lsls	r3, r3, #3
 80052b4:	4937      	ldr	r1, [pc, #220]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80052b6:	4313      	orrs	r3, r2
 80052b8:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80052ba:	e03a      	b.n	8005332 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	68db      	ldr	r3, [r3, #12]
 80052c0:	2b00      	cmp	r3, #0
 80052c2:	d020      	beq.n	8005306 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80052c4:	4b34      	ldr	r3, [pc, #208]	@ (8005398 <HAL_RCC_OscConfig+0x244>)
 80052c6:	2201      	movs	r2, #1
 80052c8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80052ca:	f7fd ff2d 	bl	8003128 <HAL_GetTick>
 80052ce:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052d0:	e008      	b.n	80052e4 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80052d2:	f7fd ff29 	bl	8003128 <HAL_GetTick>
 80052d6:	4602      	mov	r2, r0
 80052d8:	693b      	ldr	r3, [r7, #16]
 80052da:	1ad3      	subs	r3, r2, r3
 80052dc:	2b02      	cmp	r3, #2
 80052de:	d901      	bls.n	80052e4 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80052e0:	2303      	movs	r3, #3
 80052e2:	e1a8      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80052e4:	4b2b      	ldr	r3, [pc, #172]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d0f0      	beq.n	80052d2 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80052f0:	4b28      	ldr	r3, [pc, #160]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80052f8:	687b      	ldr	r3, [r7, #4]
 80052fa:	691b      	ldr	r3, [r3, #16]
 80052fc:	00db      	lsls	r3, r3, #3
 80052fe:	4925      	ldr	r1, [pc, #148]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 8005300:	4313      	orrs	r3, r2
 8005302:	600b      	str	r3, [r1, #0]
 8005304:	e015      	b.n	8005332 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005306:	4b24      	ldr	r3, [pc, #144]	@ (8005398 <HAL_RCC_OscConfig+0x244>)
 8005308:	2200      	movs	r2, #0
 800530a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 800530c:	f7fd ff0c 	bl	8003128 <HAL_GetTick>
 8005310:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005312:	e008      	b.n	8005326 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8005314:	f7fd ff08 	bl	8003128 <HAL_GetTick>
 8005318:	4602      	mov	r2, r0
 800531a:	693b      	ldr	r3, [r7, #16]
 800531c:	1ad3      	subs	r3, r2, r3
 800531e:	2b02      	cmp	r3, #2
 8005320:	d901      	bls.n	8005326 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005322:	2303      	movs	r3, #3
 8005324:	e187      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005326:	4b1b      	ldr	r3, [pc, #108]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	f003 0302 	and.w	r3, r3, #2
 800532e:	2b00      	cmp	r3, #0
 8005330:	d1f0      	bne.n	8005314 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0308 	and.w	r3, r3, #8
 800533a:	2b00      	cmp	r3, #0
 800533c:	d036      	beq.n	80053ac <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	695b      	ldr	r3, [r3, #20]
 8005342:	2b00      	cmp	r3, #0
 8005344:	d016      	beq.n	8005374 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005346:	4b15      	ldr	r3, [pc, #84]	@ (800539c <HAL_RCC_OscConfig+0x248>)
 8005348:	2201      	movs	r2, #1
 800534a:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800534c:	f7fd feec 	bl	8003128 <HAL_GetTick>
 8005350:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005352:	e008      	b.n	8005366 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005354:	f7fd fee8 	bl	8003128 <HAL_GetTick>
 8005358:	4602      	mov	r2, r0
 800535a:	693b      	ldr	r3, [r7, #16]
 800535c:	1ad3      	subs	r3, r2, r3
 800535e:	2b02      	cmp	r3, #2
 8005360:	d901      	bls.n	8005366 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005362:	2303      	movs	r3, #3
 8005364:	e167      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005366:	4b0b      	ldr	r3, [pc, #44]	@ (8005394 <HAL_RCC_OscConfig+0x240>)
 8005368:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800536a:	f003 0302 	and.w	r3, r3, #2
 800536e:	2b00      	cmp	r3, #0
 8005370:	d0f0      	beq.n	8005354 <HAL_RCC_OscConfig+0x200>
 8005372:	e01b      	b.n	80053ac <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005374:	4b09      	ldr	r3, [pc, #36]	@ (800539c <HAL_RCC_OscConfig+0x248>)
 8005376:	2200      	movs	r2, #0
 8005378:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800537a:	f7fd fed5 	bl	8003128 <HAL_GetTick>
 800537e:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005380:	e00e      	b.n	80053a0 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8005382:	f7fd fed1 	bl	8003128 <HAL_GetTick>
 8005386:	4602      	mov	r2, r0
 8005388:	693b      	ldr	r3, [r7, #16]
 800538a:	1ad3      	subs	r3, r2, r3
 800538c:	2b02      	cmp	r3, #2
 800538e:	d907      	bls.n	80053a0 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8005390:	2303      	movs	r3, #3
 8005392:	e150      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
 8005394:	40023800 	.word	0x40023800
 8005398:	42470000 	.word	0x42470000
 800539c:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80053a0:	4b88      	ldr	r3, [pc, #544]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80053a2:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d1ea      	bne.n	8005382 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	f003 0304 	and.w	r3, r3, #4
 80053b4:	2b00      	cmp	r3, #0
 80053b6:	f000 8097 	beq.w	80054e8 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80053ba:	2300      	movs	r3, #0
 80053bc:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80053be:	4b81      	ldr	r3, [pc, #516]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80053c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053c2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053c6:	2b00      	cmp	r3, #0
 80053c8:	d10f      	bne.n	80053ea <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80053ca:	2300      	movs	r3, #0
 80053cc:	60bb      	str	r3, [r7, #8]
 80053ce:	4b7d      	ldr	r3, [pc, #500]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80053d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053d2:	4a7c      	ldr	r2, [pc, #496]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80053d4:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80053d8:	6413      	str	r3, [r2, #64]	@ 0x40
 80053da:	4b7a      	ldr	r3, [pc, #488]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80053dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80053de:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80053e2:	60bb      	str	r3, [r7, #8]
 80053e4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80053e6:	2301      	movs	r3, #1
 80053e8:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80053ea:	4b77      	ldr	r3, [pc, #476]	@ (80055c8 <HAL_RCC_OscConfig+0x474>)
 80053ec:	681b      	ldr	r3, [r3, #0]
 80053ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80053f2:	2b00      	cmp	r3, #0
 80053f4:	d118      	bne.n	8005428 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80053f6:	4b74      	ldr	r3, [pc, #464]	@ (80055c8 <HAL_RCC_OscConfig+0x474>)
 80053f8:	681b      	ldr	r3, [r3, #0]
 80053fa:	4a73      	ldr	r2, [pc, #460]	@ (80055c8 <HAL_RCC_OscConfig+0x474>)
 80053fc:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8005400:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005402:	f7fd fe91 	bl	8003128 <HAL_GetTick>
 8005406:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005408:	e008      	b.n	800541c <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800540a:	f7fd fe8d 	bl	8003128 <HAL_GetTick>
 800540e:	4602      	mov	r2, r0
 8005410:	693b      	ldr	r3, [r7, #16]
 8005412:	1ad3      	subs	r3, r2, r3
 8005414:	2b02      	cmp	r3, #2
 8005416:	d901      	bls.n	800541c <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8005418:	2303      	movs	r3, #3
 800541a:	e10c      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800541c:	4b6a      	ldr	r3, [pc, #424]	@ (80055c8 <HAL_RCC_OscConfig+0x474>)
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005424:	2b00      	cmp	r3, #0
 8005426:	d0f0      	beq.n	800540a <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	689b      	ldr	r3, [r3, #8]
 800542c:	2b01      	cmp	r3, #1
 800542e:	d106      	bne.n	800543e <HAL_RCC_OscConfig+0x2ea>
 8005430:	4b64      	ldr	r3, [pc, #400]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 8005432:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005434:	4a63      	ldr	r2, [pc, #396]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 8005436:	f043 0301 	orr.w	r3, r3, #1
 800543a:	6713      	str	r3, [r2, #112]	@ 0x70
 800543c:	e01c      	b.n	8005478 <HAL_RCC_OscConfig+0x324>
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	689b      	ldr	r3, [r3, #8]
 8005442:	2b05      	cmp	r3, #5
 8005444:	d10c      	bne.n	8005460 <HAL_RCC_OscConfig+0x30c>
 8005446:	4b5f      	ldr	r3, [pc, #380]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 8005448:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800544a:	4a5e      	ldr	r2, [pc, #376]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 800544c:	f043 0304 	orr.w	r3, r3, #4
 8005450:	6713      	str	r3, [r2, #112]	@ 0x70
 8005452:	4b5c      	ldr	r3, [pc, #368]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 8005454:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005456:	4a5b      	ldr	r2, [pc, #364]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 8005458:	f043 0301 	orr.w	r3, r3, #1
 800545c:	6713      	str	r3, [r2, #112]	@ 0x70
 800545e:	e00b      	b.n	8005478 <HAL_RCC_OscConfig+0x324>
 8005460:	4b58      	ldr	r3, [pc, #352]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 8005462:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005464:	4a57      	ldr	r2, [pc, #348]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 8005466:	f023 0301 	bic.w	r3, r3, #1
 800546a:	6713      	str	r3, [r2, #112]	@ 0x70
 800546c:	4b55      	ldr	r3, [pc, #340]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 800546e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8005470:	4a54      	ldr	r2, [pc, #336]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 8005472:	f023 0304 	bic.w	r3, r3, #4
 8005476:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	689b      	ldr	r3, [r3, #8]
 800547c:	2b00      	cmp	r3, #0
 800547e:	d015      	beq.n	80054ac <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005480:	f7fd fe52 	bl	8003128 <HAL_GetTick>
 8005484:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005486:	e00a      	b.n	800549e <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8005488:	f7fd fe4e 	bl	8003128 <HAL_GetTick>
 800548c:	4602      	mov	r2, r0
 800548e:	693b      	ldr	r3, [r7, #16]
 8005490:	1ad3      	subs	r3, r2, r3
 8005492:	f241 3288 	movw	r2, #5000	@ 0x1388
 8005496:	4293      	cmp	r3, r2
 8005498:	d901      	bls.n	800549e <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800549a:	2303      	movs	r3, #3
 800549c:	e0cb      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800549e:	4b49      	ldr	r3, [pc, #292]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80054a0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054a2:	f003 0302 	and.w	r3, r3, #2
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	d0ee      	beq.n	8005488 <HAL_RCC_OscConfig+0x334>
 80054aa:	e014      	b.n	80054d6 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80054ac:	f7fd fe3c 	bl	8003128 <HAL_GetTick>
 80054b0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054b2:	e00a      	b.n	80054ca <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80054b4:	f7fd fe38 	bl	8003128 <HAL_GetTick>
 80054b8:	4602      	mov	r2, r0
 80054ba:	693b      	ldr	r3, [r7, #16]
 80054bc:	1ad3      	subs	r3, r2, r3
 80054be:	f241 3288 	movw	r2, #5000	@ 0x1388
 80054c2:	4293      	cmp	r3, r2
 80054c4:	d901      	bls.n	80054ca <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80054c6:	2303      	movs	r3, #3
 80054c8:	e0b5      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80054ca:	4b3e      	ldr	r3, [pc, #248]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80054cc:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80054ce:	f003 0302 	and.w	r3, r3, #2
 80054d2:	2b00      	cmp	r3, #0
 80054d4:	d1ee      	bne.n	80054b4 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80054d6:	7dfb      	ldrb	r3, [r7, #23]
 80054d8:	2b01      	cmp	r3, #1
 80054da:	d105      	bne.n	80054e8 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80054dc:	4b39      	ldr	r3, [pc, #228]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80054de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80054e0:	4a38      	ldr	r2, [pc, #224]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80054e2:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80054e6:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	2b00      	cmp	r3, #0
 80054ee:	f000 80a1 	beq.w	8005634 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80054f2:	4b34      	ldr	r3, [pc, #208]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80054f4:	689b      	ldr	r3, [r3, #8]
 80054f6:	f003 030c 	and.w	r3, r3, #12
 80054fa:	2b08      	cmp	r3, #8
 80054fc:	d05c      	beq.n	80055b8 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 80054fe:	687b      	ldr	r3, [r7, #4]
 8005500:	699b      	ldr	r3, [r3, #24]
 8005502:	2b02      	cmp	r3, #2
 8005504:	d141      	bne.n	800558a <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005506:	4b31      	ldr	r3, [pc, #196]	@ (80055cc <HAL_RCC_OscConfig+0x478>)
 8005508:	2200      	movs	r2, #0
 800550a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800550c:	f7fd fe0c 	bl	8003128 <HAL_GetTick>
 8005510:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005512:	e008      	b.n	8005526 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005514:	f7fd fe08 	bl	8003128 <HAL_GetTick>
 8005518:	4602      	mov	r2, r0
 800551a:	693b      	ldr	r3, [r7, #16]
 800551c:	1ad3      	subs	r3, r2, r3
 800551e:	2b02      	cmp	r3, #2
 8005520:	d901      	bls.n	8005526 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8005522:	2303      	movs	r3, #3
 8005524:	e087      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005526:	4b27      	ldr	r3, [pc, #156]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 8005528:	681b      	ldr	r3, [r3, #0]
 800552a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800552e:	2b00      	cmp	r3, #0
 8005530:	d1f0      	bne.n	8005514 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005532:	687b      	ldr	r3, [r7, #4]
 8005534:	69da      	ldr	r2, [r3, #28]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	6a1b      	ldr	r3, [r3, #32]
 800553a:	431a      	orrs	r2, r3
 800553c:	687b      	ldr	r3, [r7, #4]
 800553e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005540:	019b      	lsls	r3, r3, #6
 8005542:	431a      	orrs	r2, r3
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005548:	085b      	lsrs	r3, r3, #1
 800554a:	3b01      	subs	r3, #1
 800554c:	041b      	lsls	r3, r3, #16
 800554e:	431a      	orrs	r2, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8005554:	061b      	lsls	r3, r3, #24
 8005556:	491b      	ldr	r1, [pc, #108]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 8005558:	4313      	orrs	r3, r2
 800555a:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800555c:	4b1b      	ldr	r3, [pc, #108]	@ (80055cc <HAL_RCC_OscConfig+0x478>)
 800555e:	2201      	movs	r2, #1
 8005560:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005562:	f7fd fde1 	bl	8003128 <HAL_GetTick>
 8005566:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005568:	e008      	b.n	800557c <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800556a:	f7fd fddd 	bl	8003128 <HAL_GetTick>
 800556e:	4602      	mov	r2, r0
 8005570:	693b      	ldr	r3, [r7, #16]
 8005572:	1ad3      	subs	r3, r2, r3
 8005574:	2b02      	cmp	r3, #2
 8005576:	d901      	bls.n	800557c <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8005578:	2303      	movs	r3, #3
 800557a:	e05c      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800557c:	4b11      	ldr	r3, [pc, #68]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8005584:	2b00      	cmp	r3, #0
 8005586:	d0f0      	beq.n	800556a <HAL_RCC_OscConfig+0x416>
 8005588:	e054      	b.n	8005634 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800558a:	4b10      	ldr	r3, [pc, #64]	@ (80055cc <HAL_RCC_OscConfig+0x478>)
 800558c:	2200      	movs	r2, #0
 800558e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005590:	f7fd fdca 	bl	8003128 <HAL_GetTick>
 8005594:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005596:	e008      	b.n	80055aa <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8005598:	f7fd fdc6 	bl	8003128 <HAL_GetTick>
 800559c:	4602      	mov	r2, r0
 800559e:	693b      	ldr	r3, [r7, #16]
 80055a0:	1ad3      	subs	r3, r2, r3
 80055a2:	2b02      	cmp	r3, #2
 80055a4:	d901      	bls.n	80055aa <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80055a6:	2303      	movs	r3, #3
 80055a8:	e045      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80055aa:	4b06      	ldr	r3, [pc, #24]	@ (80055c4 <HAL_RCC_OscConfig+0x470>)
 80055ac:	681b      	ldr	r3, [r3, #0]
 80055ae:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80055b2:	2b00      	cmp	r3, #0
 80055b4:	d1f0      	bne.n	8005598 <HAL_RCC_OscConfig+0x444>
 80055b6:	e03d      	b.n	8005634 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	699b      	ldr	r3, [r3, #24]
 80055bc:	2b01      	cmp	r3, #1
 80055be:	d107      	bne.n	80055d0 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80055c0:	2301      	movs	r3, #1
 80055c2:	e038      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
 80055c4:	40023800 	.word	0x40023800
 80055c8:	40007000 	.word	0x40007000
 80055cc:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80055d0:	4b1b      	ldr	r3, [pc, #108]	@ (8005640 <HAL_RCC_OscConfig+0x4ec>)
 80055d2:	685b      	ldr	r3, [r3, #4]
 80055d4:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	699b      	ldr	r3, [r3, #24]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d028      	beq.n	8005630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80055e8:	429a      	cmp	r2, r3
 80055ea:	d121      	bne.n	8005630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80055ec:	68fb      	ldr	r3, [r7, #12]
 80055ee:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80055f6:	429a      	cmp	r2, r3
 80055f8:	d11a      	bne.n	8005630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80055fa:	68fa      	ldr	r2, [r7, #12]
 80055fc:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8005600:	4013      	ands	r3, r2
 8005602:	687a      	ldr	r2, [r7, #4]
 8005604:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8005606:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8005608:	4293      	cmp	r3, r2
 800560a:	d111      	bne.n	8005630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800560c:	68fb      	ldr	r3, [r7, #12]
 800560e:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8005612:	687b      	ldr	r3, [r7, #4]
 8005614:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005616:	085b      	lsrs	r3, r3, #1
 8005618:	3b01      	subs	r3, #1
 800561a:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 800561c:	429a      	cmp	r2, r3
 800561e:	d107      	bne.n	8005630 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005620:	68fb      	ldr	r3, [r7, #12]
 8005622:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800562a:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 800562c:	429a      	cmp	r2, r3
 800562e:	d001      	beq.n	8005634 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8005630:	2301      	movs	r3, #1
 8005632:	e000      	b.n	8005636 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8005634:	2300      	movs	r3, #0
}
 8005636:	4618      	mov	r0, r3
 8005638:	3718      	adds	r7, #24
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}
 800563e:	bf00      	nop
 8005640:	40023800 	.word	0x40023800

08005644 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005644:	b580      	push	{r7, lr}
 8005646:	b084      	sub	sp, #16
 8005648:	af00      	add	r7, sp, #0
 800564a:	6078      	str	r0, [r7, #4]
 800564c:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 800564e:	687b      	ldr	r3, [r7, #4]
 8005650:	2b00      	cmp	r3, #0
 8005652:	d101      	bne.n	8005658 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005654:	2301      	movs	r3, #1
 8005656:	e0cc      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8005658:	4b68      	ldr	r3, [pc, #416]	@ (80057fc <HAL_RCC_ClockConfig+0x1b8>)
 800565a:	681b      	ldr	r3, [r3, #0]
 800565c:	f003 0307 	and.w	r3, r3, #7
 8005660:	683a      	ldr	r2, [r7, #0]
 8005662:	429a      	cmp	r2, r3
 8005664:	d90c      	bls.n	8005680 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005666:	4b65      	ldr	r3, [pc, #404]	@ (80057fc <HAL_RCC_ClockConfig+0x1b8>)
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	b2d2      	uxtb	r2, r2
 800566c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800566e:	4b63      	ldr	r3, [pc, #396]	@ (80057fc <HAL_RCC_ClockConfig+0x1b8>)
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	f003 0307 	and.w	r3, r3, #7
 8005676:	683a      	ldr	r2, [r7, #0]
 8005678:	429a      	cmp	r2, r3
 800567a:	d001      	beq.n	8005680 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 800567c:	2301      	movs	r3, #1
 800567e:	e0b8      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	681b      	ldr	r3, [r3, #0]
 8005684:	f003 0302 	and.w	r3, r3, #2
 8005688:	2b00      	cmp	r3, #0
 800568a:	d020      	beq.n	80056ce <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	f003 0304 	and.w	r3, r3, #4
 8005694:	2b00      	cmp	r3, #0
 8005696:	d005      	beq.n	80056a4 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005698:	4b59      	ldr	r3, [pc, #356]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 800569a:	689b      	ldr	r3, [r3, #8]
 800569c:	4a58      	ldr	r2, [pc, #352]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 800569e:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80056a2:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	681b      	ldr	r3, [r3, #0]
 80056a8:	f003 0308 	and.w	r3, r3, #8
 80056ac:	2b00      	cmp	r3, #0
 80056ae:	d005      	beq.n	80056bc <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80056b0:	4b53      	ldr	r3, [pc, #332]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 80056b2:	689b      	ldr	r3, [r3, #8]
 80056b4:	4a52      	ldr	r2, [pc, #328]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 80056b6:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80056ba:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80056bc:	4b50      	ldr	r3, [pc, #320]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 80056be:	689b      	ldr	r3, [r3, #8]
 80056c0:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	689b      	ldr	r3, [r3, #8]
 80056c8:	494d      	ldr	r1, [pc, #308]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 80056ca:	4313      	orrs	r3, r2
 80056cc:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80056ce:	687b      	ldr	r3, [r7, #4]
 80056d0:	681b      	ldr	r3, [r3, #0]
 80056d2:	f003 0301 	and.w	r3, r3, #1
 80056d6:	2b00      	cmp	r3, #0
 80056d8:	d044      	beq.n	8005764 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80056da:	687b      	ldr	r3, [r7, #4]
 80056dc:	685b      	ldr	r3, [r3, #4]
 80056de:	2b01      	cmp	r3, #1
 80056e0:	d107      	bne.n	80056f2 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80056e2:	4b47      	ldr	r3, [pc, #284]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d119      	bne.n	8005722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80056ee:	2301      	movs	r3, #1
 80056f0:	e07f      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056f2:	687b      	ldr	r3, [r7, #4]
 80056f4:	685b      	ldr	r3, [r3, #4]
 80056f6:	2b02      	cmp	r3, #2
 80056f8:	d003      	beq.n	8005702 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80056fe:	2b03      	cmp	r3, #3
 8005700:	d107      	bne.n	8005712 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005702:	4b3f      	ldr	r3, [pc, #252]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 8005704:	681b      	ldr	r3, [r3, #0]
 8005706:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800570a:	2b00      	cmp	r3, #0
 800570c:	d109      	bne.n	8005722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800570e:	2301      	movs	r3, #1
 8005710:	e06f      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005712:	4b3b      	ldr	r3, [pc, #236]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 8005714:	681b      	ldr	r3, [r3, #0]
 8005716:	f003 0302 	and.w	r3, r3, #2
 800571a:	2b00      	cmp	r3, #0
 800571c:	d101      	bne.n	8005722 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800571e:	2301      	movs	r3, #1
 8005720:	e067      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005722:	4b37      	ldr	r3, [pc, #220]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 8005724:	689b      	ldr	r3, [r3, #8]
 8005726:	f023 0203 	bic.w	r2, r3, #3
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	685b      	ldr	r3, [r3, #4]
 800572e:	4934      	ldr	r1, [pc, #208]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 8005730:	4313      	orrs	r3, r2
 8005732:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005734:	f7fd fcf8 	bl	8003128 <HAL_GetTick>
 8005738:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800573a:	e00a      	b.n	8005752 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 800573c:	f7fd fcf4 	bl	8003128 <HAL_GetTick>
 8005740:	4602      	mov	r2, r0
 8005742:	68fb      	ldr	r3, [r7, #12]
 8005744:	1ad3      	subs	r3, r2, r3
 8005746:	f241 3288 	movw	r2, #5000	@ 0x1388
 800574a:	4293      	cmp	r3, r2
 800574c:	d901      	bls.n	8005752 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800574e:	2303      	movs	r3, #3
 8005750:	e04f      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005752:	4b2b      	ldr	r3, [pc, #172]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 8005754:	689b      	ldr	r3, [r3, #8]
 8005756:	f003 020c 	and.w	r2, r3, #12
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	685b      	ldr	r3, [r3, #4]
 800575e:	009b      	lsls	r3, r3, #2
 8005760:	429a      	cmp	r2, r3
 8005762:	d1eb      	bne.n	800573c <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8005764:	4b25      	ldr	r3, [pc, #148]	@ (80057fc <HAL_RCC_ClockConfig+0x1b8>)
 8005766:	681b      	ldr	r3, [r3, #0]
 8005768:	f003 0307 	and.w	r3, r3, #7
 800576c:	683a      	ldr	r2, [r7, #0]
 800576e:	429a      	cmp	r2, r3
 8005770:	d20c      	bcs.n	800578c <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005772:	4b22      	ldr	r3, [pc, #136]	@ (80057fc <HAL_RCC_ClockConfig+0x1b8>)
 8005774:	683a      	ldr	r2, [r7, #0]
 8005776:	b2d2      	uxtb	r2, r2
 8005778:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800577a:	4b20      	ldr	r3, [pc, #128]	@ (80057fc <HAL_RCC_ClockConfig+0x1b8>)
 800577c:	681b      	ldr	r3, [r3, #0]
 800577e:	f003 0307 	and.w	r3, r3, #7
 8005782:	683a      	ldr	r2, [r7, #0]
 8005784:	429a      	cmp	r2, r3
 8005786:	d001      	beq.n	800578c <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005788:	2301      	movs	r3, #1
 800578a:	e032      	b.n	80057f2 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 800578c:	687b      	ldr	r3, [r7, #4]
 800578e:	681b      	ldr	r3, [r3, #0]
 8005790:	f003 0304 	and.w	r3, r3, #4
 8005794:	2b00      	cmp	r3, #0
 8005796:	d008      	beq.n	80057aa <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005798:	4b19      	ldr	r3, [pc, #100]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 800579a:	689b      	ldr	r3, [r3, #8]
 800579c:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	68db      	ldr	r3, [r3, #12]
 80057a4:	4916      	ldr	r1, [pc, #88]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 80057a6:	4313      	orrs	r3, r2
 80057a8:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	681b      	ldr	r3, [r3, #0]
 80057ae:	f003 0308 	and.w	r3, r3, #8
 80057b2:	2b00      	cmp	r3, #0
 80057b4:	d009      	beq.n	80057ca <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80057b6:	4b12      	ldr	r3, [pc, #72]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 80057b8:	689b      	ldr	r3, [r3, #8]
 80057ba:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	691b      	ldr	r3, [r3, #16]
 80057c2:	00db      	lsls	r3, r3, #3
 80057c4:	490e      	ldr	r1, [pc, #56]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 80057c6:	4313      	orrs	r3, r2
 80057c8:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80057ca:	f000 f821 	bl	8005810 <HAL_RCC_GetSysClockFreq>
 80057ce:	4602      	mov	r2, r0
 80057d0:	4b0b      	ldr	r3, [pc, #44]	@ (8005800 <HAL_RCC_ClockConfig+0x1bc>)
 80057d2:	689b      	ldr	r3, [r3, #8]
 80057d4:	091b      	lsrs	r3, r3, #4
 80057d6:	f003 030f 	and.w	r3, r3, #15
 80057da:	490a      	ldr	r1, [pc, #40]	@ (8005804 <HAL_RCC_ClockConfig+0x1c0>)
 80057dc:	5ccb      	ldrb	r3, [r1, r3]
 80057de:	fa22 f303 	lsr.w	r3, r2, r3
 80057e2:	4a09      	ldr	r2, [pc, #36]	@ (8005808 <HAL_RCC_ClockConfig+0x1c4>)
 80057e4:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80057e6:	4b09      	ldr	r3, [pc, #36]	@ (800580c <HAL_RCC_ClockConfig+0x1c8>)
 80057e8:	681b      	ldr	r3, [r3, #0]
 80057ea:	4618      	mov	r0, r3
 80057ec:	f7fd fc58 	bl	80030a0 <HAL_InitTick>

  return HAL_OK;
 80057f0:	2300      	movs	r3, #0
}
 80057f2:	4618      	mov	r0, r3
 80057f4:	3710      	adds	r7, #16
 80057f6:	46bd      	mov	sp, r7
 80057f8:	bd80      	pop	{r7, pc}
 80057fa:	bf00      	nop
 80057fc:	40023c00 	.word	0x40023c00
 8005800:	40023800 	.word	0x40023800
 8005804:	0800ba18 	.word	0x0800ba18
 8005808:	20000008 	.word	0x20000008
 800580c:	2000000c 	.word	0x2000000c

08005810 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005810:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005814:	b094      	sub	sp, #80	@ 0x50
 8005816:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005818:	2300      	movs	r3, #0
 800581a:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 800581c:	2300      	movs	r3, #0
 800581e:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005820:	2300      	movs	r3, #0
 8005822:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8005824:	2300      	movs	r3, #0
 8005826:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005828:	4b79      	ldr	r3, [pc, #484]	@ (8005a10 <HAL_RCC_GetSysClockFreq+0x200>)
 800582a:	689b      	ldr	r3, [r3, #8]
 800582c:	f003 030c 	and.w	r3, r3, #12
 8005830:	2b08      	cmp	r3, #8
 8005832:	d00d      	beq.n	8005850 <HAL_RCC_GetSysClockFreq+0x40>
 8005834:	2b08      	cmp	r3, #8
 8005836:	f200 80e1 	bhi.w	80059fc <HAL_RCC_GetSysClockFreq+0x1ec>
 800583a:	2b00      	cmp	r3, #0
 800583c:	d002      	beq.n	8005844 <HAL_RCC_GetSysClockFreq+0x34>
 800583e:	2b04      	cmp	r3, #4
 8005840:	d003      	beq.n	800584a <HAL_RCC_GetSysClockFreq+0x3a>
 8005842:	e0db      	b.n	80059fc <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005844:	4b73      	ldr	r3, [pc, #460]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x204>)
 8005846:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005848:	e0db      	b.n	8005a02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800584a:	4b73      	ldr	r3, [pc, #460]	@ (8005a18 <HAL_RCC_GetSysClockFreq+0x208>)
 800584c:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800584e:	e0d8      	b.n	8005a02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8005850:	4b6f      	ldr	r3, [pc, #444]	@ (8005a10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005852:	685b      	ldr	r3, [r3, #4]
 8005854:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8005858:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800585a:	4b6d      	ldr	r3, [pc, #436]	@ (8005a10 <HAL_RCC_GetSysClockFreq+0x200>)
 800585c:	685b      	ldr	r3, [r3, #4]
 800585e:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8005862:	2b00      	cmp	r3, #0
 8005864:	d063      	beq.n	800592e <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005866:	4b6a      	ldr	r3, [pc, #424]	@ (8005a10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005868:	685b      	ldr	r3, [r3, #4]
 800586a:	099b      	lsrs	r3, r3, #6
 800586c:	2200      	movs	r2, #0
 800586e:	63bb      	str	r3, [r7, #56]	@ 0x38
 8005870:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8005872:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005874:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005878:	633b      	str	r3, [r7, #48]	@ 0x30
 800587a:	2300      	movs	r3, #0
 800587c:	637b      	str	r3, [r7, #52]	@ 0x34
 800587e:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8005882:	4622      	mov	r2, r4
 8005884:	462b      	mov	r3, r5
 8005886:	f04f 0000 	mov.w	r0, #0
 800588a:	f04f 0100 	mov.w	r1, #0
 800588e:	0159      	lsls	r1, r3, #5
 8005890:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005894:	0150      	lsls	r0, r2, #5
 8005896:	4602      	mov	r2, r0
 8005898:	460b      	mov	r3, r1
 800589a:	4621      	mov	r1, r4
 800589c:	1a51      	subs	r1, r2, r1
 800589e:	6139      	str	r1, [r7, #16]
 80058a0:	4629      	mov	r1, r5
 80058a2:	eb63 0301 	sbc.w	r3, r3, r1
 80058a6:	617b      	str	r3, [r7, #20]
 80058a8:	f04f 0200 	mov.w	r2, #0
 80058ac:	f04f 0300 	mov.w	r3, #0
 80058b0:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 80058b4:	4659      	mov	r1, fp
 80058b6:	018b      	lsls	r3, r1, #6
 80058b8:	4651      	mov	r1, sl
 80058ba:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 80058be:	4651      	mov	r1, sl
 80058c0:	018a      	lsls	r2, r1, #6
 80058c2:	4651      	mov	r1, sl
 80058c4:	ebb2 0801 	subs.w	r8, r2, r1
 80058c8:	4659      	mov	r1, fp
 80058ca:	eb63 0901 	sbc.w	r9, r3, r1
 80058ce:	f04f 0200 	mov.w	r2, #0
 80058d2:	f04f 0300 	mov.w	r3, #0
 80058d6:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80058da:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80058de:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80058e2:	4690      	mov	r8, r2
 80058e4:	4699      	mov	r9, r3
 80058e6:	4623      	mov	r3, r4
 80058e8:	eb18 0303 	adds.w	r3, r8, r3
 80058ec:	60bb      	str	r3, [r7, #8]
 80058ee:	462b      	mov	r3, r5
 80058f0:	eb49 0303 	adc.w	r3, r9, r3
 80058f4:	60fb      	str	r3, [r7, #12]
 80058f6:	f04f 0200 	mov.w	r2, #0
 80058fa:	f04f 0300 	mov.w	r3, #0
 80058fe:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8005902:	4629      	mov	r1, r5
 8005904:	024b      	lsls	r3, r1, #9
 8005906:	4621      	mov	r1, r4
 8005908:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 800590c:	4621      	mov	r1, r4
 800590e:	024a      	lsls	r2, r1, #9
 8005910:	4610      	mov	r0, r2
 8005912:	4619      	mov	r1, r3
 8005914:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005916:	2200      	movs	r2, #0
 8005918:	62bb      	str	r3, [r7, #40]	@ 0x28
 800591a:	62fa      	str	r2, [r7, #44]	@ 0x2c
 800591c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005920:	f7fb f9ba 	bl	8000c98 <__aeabi_uldivmod>
 8005924:	4602      	mov	r2, r0
 8005926:	460b      	mov	r3, r1
 8005928:	4613      	mov	r3, r2
 800592a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800592c:	e058      	b.n	80059e0 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800592e:	4b38      	ldr	r3, [pc, #224]	@ (8005a10 <HAL_RCC_GetSysClockFreq+0x200>)
 8005930:	685b      	ldr	r3, [r3, #4]
 8005932:	099b      	lsrs	r3, r3, #6
 8005934:	2200      	movs	r2, #0
 8005936:	4618      	mov	r0, r3
 8005938:	4611      	mov	r1, r2
 800593a:	f3c0 0308 	ubfx	r3, r0, #0, #9
 800593e:	623b      	str	r3, [r7, #32]
 8005940:	2300      	movs	r3, #0
 8005942:	627b      	str	r3, [r7, #36]	@ 0x24
 8005944:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8005948:	4642      	mov	r2, r8
 800594a:	464b      	mov	r3, r9
 800594c:	f04f 0000 	mov.w	r0, #0
 8005950:	f04f 0100 	mov.w	r1, #0
 8005954:	0159      	lsls	r1, r3, #5
 8005956:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 800595a:	0150      	lsls	r0, r2, #5
 800595c:	4602      	mov	r2, r0
 800595e:	460b      	mov	r3, r1
 8005960:	4641      	mov	r1, r8
 8005962:	ebb2 0a01 	subs.w	sl, r2, r1
 8005966:	4649      	mov	r1, r9
 8005968:	eb63 0b01 	sbc.w	fp, r3, r1
 800596c:	f04f 0200 	mov.w	r2, #0
 8005970:	f04f 0300 	mov.w	r3, #0
 8005974:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8005978:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 800597c:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8005980:	ebb2 040a 	subs.w	r4, r2, sl
 8005984:	eb63 050b 	sbc.w	r5, r3, fp
 8005988:	f04f 0200 	mov.w	r2, #0
 800598c:	f04f 0300 	mov.w	r3, #0
 8005990:	00eb      	lsls	r3, r5, #3
 8005992:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005996:	00e2      	lsls	r2, r4, #3
 8005998:	4614      	mov	r4, r2
 800599a:	461d      	mov	r5, r3
 800599c:	4643      	mov	r3, r8
 800599e:	18e3      	adds	r3, r4, r3
 80059a0:	603b      	str	r3, [r7, #0]
 80059a2:	464b      	mov	r3, r9
 80059a4:	eb45 0303 	adc.w	r3, r5, r3
 80059a8:	607b      	str	r3, [r7, #4]
 80059aa:	f04f 0200 	mov.w	r2, #0
 80059ae:	f04f 0300 	mov.w	r3, #0
 80059b2:	e9d7 4500 	ldrd	r4, r5, [r7]
 80059b6:	4629      	mov	r1, r5
 80059b8:	028b      	lsls	r3, r1, #10
 80059ba:	4621      	mov	r1, r4
 80059bc:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 80059c0:	4621      	mov	r1, r4
 80059c2:	028a      	lsls	r2, r1, #10
 80059c4:	4610      	mov	r0, r2
 80059c6:	4619      	mov	r1, r3
 80059c8:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80059ca:	2200      	movs	r2, #0
 80059cc:	61bb      	str	r3, [r7, #24]
 80059ce:	61fa      	str	r2, [r7, #28]
 80059d0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80059d4:	f7fb f960 	bl	8000c98 <__aeabi_uldivmod>
 80059d8:	4602      	mov	r2, r0
 80059da:	460b      	mov	r3, r1
 80059dc:	4613      	mov	r3, r2
 80059de:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 80059e0:	4b0b      	ldr	r3, [pc, #44]	@ (8005a10 <HAL_RCC_GetSysClockFreq+0x200>)
 80059e2:	685b      	ldr	r3, [r3, #4]
 80059e4:	0c1b      	lsrs	r3, r3, #16
 80059e6:	f003 0303 	and.w	r3, r3, #3
 80059ea:	3301      	adds	r3, #1
 80059ec:	005b      	lsls	r3, r3, #1
 80059ee:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 80059f0:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80059f2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80059f4:	fbb2 f3f3 	udiv	r3, r2, r3
 80059f8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80059fa:	e002      	b.n	8005a02 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80059fc:	4b05      	ldr	r3, [pc, #20]	@ (8005a14 <HAL_RCC_GetSysClockFreq+0x204>)
 80059fe:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005a00:	bf00      	nop
    }
  }
  return sysclockfreq;
 8005a02:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005a04:	4618      	mov	r0, r3
 8005a06:	3750      	adds	r7, #80	@ 0x50
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005a0e:	bf00      	nop
 8005a10:	40023800 	.word	0x40023800
 8005a14:	00f42400 	.word	0x00f42400
 8005a18:	007a1200 	.word	0x007a1200

08005a1c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005a1c:	b480      	push	{r7}
 8005a1e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005a20:	4b03      	ldr	r3, [pc, #12]	@ (8005a30 <HAL_RCC_GetHCLKFreq+0x14>)
 8005a22:	681b      	ldr	r3, [r3, #0]
}
 8005a24:	4618      	mov	r0, r3
 8005a26:	46bd      	mov	sp, r7
 8005a28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a2c:	4770      	bx	lr
 8005a2e:	bf00      	nop
 8005a30:	20000008 	.word	0x20000008

08005a34 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005a34:	b580      	push	{r7, lr}
 8005a36:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005a38:	f7ff fff0 	bl	8005a1c <HAL_RCC_GetHCLKFreq>
 8005a3c:	4602      	mov	r2, r0
 8005a3e:	4b05      	ldr	r3, [pc, #20]	@ (8005a54 <HAL_RCC_GetPCLK1Freq+0x20>)
 8005a40:	689b      	ldr	r3, [r3, #8]
 8005a42:	0a9b      	lsrs	r3, r3, #10
 8005a44:	f003 0307 	and.w	r3, r3, #7
 8005a48:	4903      	ldr	r1, [pc, #12]	@ (8005a58 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005a4a:	5ccb      	ldrb	r3, [r1, r3]
 8005a4c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a50:	4618      	mov	r0, r3
 8005a52:	bd80      	pop	{r7, pc}
 8005a54:	40023800 	.word	0x40023800
 8005a58:	0800ba28 	.word	0x0800ba28

08005a5c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005a5c:	b580      	push	{r7, lr}
 8005a5e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8005a60:	f7ff ffdc 	bl	8005a1c <HAL_RCC_GetHCLKFreq>
 8005a64:	4602      	mov	r2, r0
 8005a66:	4b05      	ldr	r3, [pc, #20]	@ (8005a7c <HAL_RCC_GetPCLK2Freq+0x20>)
 8005a68:	689b      	ldr	r3, [r3, #8]
 8005a6a:	0b5b      	lsrs	r3, r3, #13
 8005a6c:	f003 0307 	and.w	r3, r3, #7
 8005a70:	4903      	ldr	r1, [pc, #12]	@ (8005a80 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005a72:	5ccb      	ldrb	r3, [r1, r3]
 8005a74:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005a78:	4618      	mov	r0, r3
 8005a7a:	bd80      	pop	{r7, pc}
 8005a7c:	40023800 	.word	0x40023800
 8005a80:	0800ba28 	.word	0x0800ba28

08005a84 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 8005a84:	b580      	push	{r7, lr}
 8005a86:	b082      	sub	sp, #8
 8005a88:	af00      	add	r7, sp, #0
 8005a8a:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 8005a8c:	687b      	ldr	r3, [r7, #4]
 8005a8e:	2b00      	cmp	r3, #0
 8005a90:	d101      	bne.n	8005a96 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 8005a92:	2301      	movs	r3, #1
 8005a94:	e07b      	b.n	8005b8e <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005a9a:	2b00      	cmp	r3, #0
 8005a9c:	d108      	bne.n	8005ab0 <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	685b      	ldr	r3, [r3, #4]
 8005aa2:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005aa6:	d009      	beq.n	8005abc <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005aa8:	687b      	ldr	r3, [r7, #4]
 8005aaa:	2200      	movs	r2, #0
 8005aac:	61da      	str	r2, [r3, #28]
 8005aae:	e005      	b.n	8005abc <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	2200      	movs	r2, #0
 8005ab4:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005ab6:	687b      	ldr	r3, [r7, #4]
 8005ab8:	2200      	movs	r2, #0
 8005aba:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	2200      	movs	r2, #0
 8005ac0:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	2b00      	cmp	r3, #0
 8005acc:	d106      	bne.n	8005adc <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	2200      	movs	r2, #0
 8005ad2:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005ad6:	6878      	ldr	r0, [r7, #4]
 8005ad8:	f7fc fede 	bl	8002898 <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	2202      	movs	r2, #2
 8005ae0:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	681a      	ldr	r2, [r3, #0]
 8005aea:	687b      	ldr	r3, [r7, #4]
 8005aec:	681b      	ldr	r3, [r3, #0]
 8005aee:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005af2:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005af4:	687b      	ldr	r3, [r7, #4]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005afc:	687b      	ldr	r3, [r7, #4]
 8005afe:	689b      	ldr	r3, [r3, #8]
 8005b00:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005b04:	431a      	orrs	r2, r3
 8005b06:	687b      	ldr	r3, [r7, #4]
 8005b08:	68db      	ldr	r3, [r3, #12]
 8005b0a:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 8005b0e:	431a      	orrs	r2, r3
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	691b      	ldr	r3, [r3, #16]
 8005b14:	f003 0302 	and.w	r3, r3, #2
 8005b18:	431a      	orrs	r2, r3
 8005b1a:	687b      	ldr	r3, [r7, #4]
 8005b1c:	695b      	ldr	r3, [r3, #20]
 8005b1e:	f003 0301 	and.w	r3, r3, #1
 8005b22:	431a      	orrs	r2, r3
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	699b      	ldr	r3, [r3, #24]
 8005b28:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005b2c:	431a      	orrs	r2, r3
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	69db      	ldr	r3, [r3, #28]
 8005b32:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 8005b36:	431a      	orrs	r2, r3
 8005b38:	687b      	ldr	r3, [r7, #4]
 8005b3a:	6a1b      	ldr	r3, [r3, #32]
 8005b3c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005b40:	ea42 0103 	orr.w	r1, r2, r3
 8005b44:	687b      	ldr	r3, [r7, #4]
 8005b46:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b48:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	430a      	orrs	r2, r1
 8005b52:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 8005b54:	687b      	ldr	r3, [r7, #4]
 8005b56:	699b      	ldr	r3, [r3, #24]
 8005b58:	0c1b      	lsrs	r3, r3, #16
 8005b5a:	f003 0104 	and.w	r1, r3, #4
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005b62:	f003 0210 	and.w	r2, r3, #16
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	430a      	orrs	r2, r1
 8005b6c:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	681b      	ldr	r3, [r3, #0]
 8005b72:	69da      	ldr	r2, [r3, #28]
 8005b74:	687b      	ldr	r3, [r7, #4]
 8005b76:	681b      	ldr	r3, [r3, #0]
 8005b78:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8005b7c:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 8005b7e:	687b      	ldr	r3, [r7, #4]
 8005b80:	2200      	movs	r2, #0
 8005b82:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	2201      	movs	r2, #1
 8005b88:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 8005b8c:	2300      	movs	r3, #0
}
 8005b8e:	4618      	mov	r0, r3
 8005b90:	3708      	adds	r7, #8
 8005b92:	46bd      	mov	sp, r7
 8005b94:	bd80      	pop	{r7, pc}

08005b96 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005b96:	b580      	push	{r7, lr}
 8005b98:	b082      	sub	sp, #8
 8005b9a:	af00      	add	r7, sp, #0
 8005b9c:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	2b00      	cmp	r3, #0
 8005ba2:	d101      	bne.n	8005ba8 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005ba4:	2301      	movs	r3, #1
 8005ba6:	e042      	b.n	8005c2e <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005ba8:	687b      	ldr	r3, [r7, #4]
 8005baa:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005bae:	b2db      	uxtb	r3, r3
 8005bb0:	2b00      	cmp	r3, #0
 8005bb2:	d106      	bne.n	8005bc2 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2200      	movs	r2, #0
 8005bb8:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005bbc:	6878      	ldr	r0, [r7, #4]
 8005bbe:	f7fc feb3 	bl	8002928 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	2224      	movs	r2, #36	@ 0x24
 8005bc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	68da      	ldr	r2, [r3, #12]
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	681b      	ldr	r3, [r3, #0]
 8005bd4:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005bd8:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005bda:	6878      	ldr	r0, [r7, #4]
 8005bdc:	f000 fe6a 	bl	80068b4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	691a      	ldr	r2, [r3, #16]
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005bee:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005bf0:	687b      	ldr	r3, [r7, #4]
 8005bf2:	681b      	ldr	r3, [r3, #0]
 8005bf4:	695a      	ldr	r2, [r3, #20]
 8005bf6:	687b      	ldr	r3, [r7, #4]
 8005bf8:	681b      	ldr	r3, [r3, #0]
 8005bfa:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005bfe:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005c00:	687b      	ldr	r3, [r7, #4]
 8005c02:	681b      	ldr	r3, [r3, #0]
 8005c04:	68da      	ldr	r2, [r3, #12]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005c0e:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	2200      	movs	r2, #0
 8005c14:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	2220      	movs	r2, #32
 8005c1a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	2220      	movs	r2, #32
 8005c22:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	2200      	movs	r2, #0
 8005c2a:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005c2c:	2300      	movs	r3, #0
}
 8005c2e:	4618      	mov	r0, r3
 8005c30:	3708      	adds	r7, #8
 8005c32:	46bd      	mov	sp, r7
 8005c34:	bd80      	pop	{r7, pc}

08005c36 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005c36:	b580      	push	{r7, lr}
 8005c38:	b08a      	sub	sp, #40	@ 0x28
 8005c3a:	af02      	add	r7, sp, #8
 8005c3c:	60f8      	str	r0, [r7, #12]
 8005c3e:	60b9      	str	r1, [r7, #8]
 8005c40:	603b      	str	r3, [r7, #0]
 8005c42:	4613      	mov	r3, r2
 8005c44:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005c46:	2300      	movs	r3, #0
 8005c48:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8005c4a:	68fb      	ldr	r3, [r7, #12]
 8005c4c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c50:	b2db      	uxtb	r3, r3
 8005c52:	2b20      	cmp	r3, #32
 8005c54:	d175      	bne.n	8005d42 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8005c56:	68bb      	ldr	r3, [r7, #8]
 8005c58:	2b00      	cmp	r3, #0
 8005c5a:	d002      	beq.n	8005c62 <HAL_UART_Transmit+0x2c>
 8005c5c:	88fb      	ldrh	r3, [r7, #6]
 8005c5e:	2b00      	cmp	r3, #0
 8005c60:	d101      	bne.n	8005c66 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8005c62:	2301      	movs	r3, #1
 8005c64:	e06e      	b.n	8005d44 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005c66:	68fb      	ldr	r3, [r7, #12]
 8005c68:	2200      	movs	r2, #0
 8005c6a:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8005c6c:	68fb      	ldr	r3, [r7, #12]
 8005c6e:	2221      	movs	r2, #33	@ 0x21
 8005c70:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005c74:	f7fd fa58 	bl	8003128 <HAL_GetTick>
 8005c78:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8005c7a:	68fb      	ldr	r3, [r7, #12]
 8005c7c:	88fa      	ldrh	r2, [r7, #6]
 8005c7e:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	88fa      	ldrh	r2, [r7, #6]
 8005c84:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	689b      	ldr	r3, [r3, #8]
 8005c8a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c8e:	d108      	bne.n	8005ca2 <HAL_UART_Transmit+0x6c>
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	691b      	ldr	r3, [r3, #16]
 8005c94:	2b00      	cmp	r3, #0
 8005c96:	d104      	bne.n	8005ca2 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005c98:	2300      	movs	r3, #0
 8005c9a:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005c9c:	68bb      	ldr	r3, [r7, #8]
 8005c9e:	61bb      	str	r3, [r7, #24]
 8005ca0:	e003      	b.n	8005caa <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8005ca2:	68bb      	ldr	r3, [r7, #8]
 8005ca4:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005ca6:	2300      	movs	r3, #0
 8005ca8:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005caa:	e02e      	b.n	8005d0a <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005cac:	683b      	ldr	r3, [r7, #0]
 8005cae:	9300      	str	r3, [sp, #0]
 8005cb0:	697b      	ldr	r3, [r7, #20]
 8005cb2:	2200      	movs	r2, #0
 8005cb4:	2180      	movs	r1, #128	@ 0x80
 8005cb6:	68f8      	ldr	r0, [r7, #12]
 8005cb8:	f000 fbce 	bl	8006458 <UART_WaitOnFlagUntilTimeout>
 8005cbc:	4603      	mov	r3, r0
 8005cbe:	2b00      	cmp	r3, #0
 8005cc0:	d005      	beq.n	8005cce <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8005cc2:	68fb      	ldr	r3, [r7, #12]
 8005cc4:	2220      	movs	r2, #32
 8005cc6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005cca:	2303      	movs	r3, #3
 8005ccc:	e03a      	b.n	8005d44 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8005cce:	69fb      	ldr	r3, [r7, #28]
 8005cd0:	2b00      	cmp	r3, #0
 8005cd2:	d10b      	bne.n	8005cec <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005cd4:	69bb      	ldr	r3, [r7, #24]
 8005cd6:	881b      	ldrh	r3, [r3, #0]
 8005cd8:	461a      	mov	r2, r3
 8005cda:	68fb      	ldr	r3, [r7, #12]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005ce2:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005ce4:	69bb      	ldr	r3, [r7, #24]
 8005ce6:	3302      	adds	r3, #2
 8005ce8:	61bb      	str	r3, [r7, #24]
 8005cea:	e007      	b.n	8005cfc <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005cec:	69fb      	ldr	r3, [r7, #28]
 8005cee:	781a      	ldrb	r2, [r3, #0]
 8005cf0:	68fb      	ldr	r3, [r7, #12]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005cf6:	69fb      	ldr	r3, [r7, #28]
 8005cf8:	3301      	adds	r3, #1
 8005cfa:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005cfc:	68fb      	ldr	r3, [r7, #12]
 8005cfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d00:	b29b      	uxth	r3, r3
 8005d02:	3b01      	subs	r3, #1
 8005d04:	b29a      	uxth	r2, r3
 8005d06:	68fb      	ldr	r3, [r7, #12]
 8005d08:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005d0a:	68fb      	ldr	r3, [r7, #12]
 8005d0c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005d0e:	b29b      	uxth	r3, r3
 8005d10:	2b00      	cmp	r3, #0
 8005d12:	d1cb      	bne.n	8005cac <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005d14:	683b      	ldr	r3, [r7, #0]
 8005d16:	9300      	str	r3, [sp, #0]
 8005d18:	697b      	ldr	r3, [r7, #20]
 8005d1a:	2200      	movs	r2, #0
 8005d1c:	2140      	movs	r1, #64	@ 0x40
 8005d1e:	68f8      	ldr	r0, [r7, #12]
 8005d20:	f000 fb9a 	bl	8006458 <UART_WaitOnFlagUntilTimeout>
 8005d24:	4603      	mov	r3, r0
 8005d26:	2b00      	cmp	r3, #0
 8005d28:	d005      	beq.n	8005d36 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005d2a:	68fb      	ldr	r3, [r7, #12]
 8005d2c:	2220      	movs	r2, #32
 8005d2e:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8005d32:	2303      	movs	r3, #3
 8005d34:	e006      	b.n	8005d44 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8005d36:	68fb      	ldr	r3, [r7, #12]
 8005d38:	2220      	movs	r2, #32
 8005d3a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8005d3e:	2300      	movs	r3, #0
 8005d40:	e000      	b.n	8005d44 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8005d42:	2302      	movs	r3, #2
  }
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3720      	adds	r7, #32
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <HAL_UART_Receive>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08a      	sub	sp, #40	@ 0x28
 8005d50:	af02      	add	r7, sp, #8
 8005d52:	60f8      	str	r0, [r7, #12]
 8005d54:	60b9      	str	r1, [r7, #8]
 8005d56:	603b      	str	r3, [r7, #0]
 8005d58:	4613      	mov	r3, r2
 8005d5a:	80fb      	strh	r3, [r7, #6]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8005d5c:	2300      	movs	r3, #0
 8005d5e:	617b      	str	r3, [r7, #20]

  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005d60:	68fb      	ldr	r3, [r7, #12]
 8005d62:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d66:	b2db      	uxtb	r3, r3
 8005d68:	2b20      	cmp	r3, #32
 8005d6a:	f040 8081 	bne.w	8005e70 <HAL_UART_Receive+0x124>
  {
    if ((pData == NULL) || (Size == 0U))
 8005d6e:	68bb      	ldr	r3, [r7, #8]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d002      	beq.n	8005d7a <HAL_UART_Receive+0x2e>
 8005d74:	88fb      	ldrh	r3, [r7, #6]
 8005d76:	2b00      	cmp	r3, #0
 8005d78:	d101      	bne.n	8005d7e <HAL_UART_Receive+0x32>
    {
      return  HAL_ERROR;
 8005d7a:	2301      	movs	r3, #1
 8005d7c:	e079      	b.n	8005e72 <HAL_UART_Receive+0x126>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005d7e:	68fb      	ldr	r3, [r7, #12]
 8005d80:	2200      	movs	r2, #0
 8005d82:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005d84:	68fb      	ldr	r3, [r7, #12]
 8005d86:	2222      	movs	r2, #34	@ 0x22
 8005d88:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005d8c:	68fb      	ldr	r3, [r7, #12]
 8005d8e:	2200      	movs	r2, #0
 8005d90:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8005d92:	f7fd f9c9 	bl	8003128 <HAL_GetTick>
 8005d96:	6178      	str	r0, [r7, #20]

    huart->RxXferSize = Size;
 8005d98:	68fb      	ldr	r3, [r7, #12]
 8005d9a:	88fa      	ldrh	r2, [r7, #6]
 8005d9c:	859a      	strh	r2, [r3, #44]	@ 0x2c
    huart->RxXferCount = Size;
 8005d9e:	68fb      	ldr	r3, [r7, #12]
 8005da0:	88fa      	ldrh	r2, [r7, #6]
 8005da2:	85da      	strh	r2, [r3, #46]	@ 0x2e

    /* In case of 9bits/No Parity transfer, pRxData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005da4:	68fb      	ldr	r3, [r7, #12]
 8005da6:	689b      	ldr	r3, [r3, #8]
 8005da8:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dac:	d108      	bne.n	8005dc0 <HAL_UART_Receive+0x74>
 8005dae:	68fb      	ldr	r3, [r7, #12]
 8005db0:	691b      	ldr	r3, [r3, #16]
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d104      	bne.n	8005dc0 <HAL_UART_Receive+0x74>
    {
      pdata8bits  = NULL;
 8005db6:	2300      	movs	r3, #0
 8005db8:	61fb      	str	r3, [r7, #28]
      pdata16bits = (uint16_t *) pData;
 8005dba:	68bb      	ldr	r3, [r7, #8]
 8005dbc:	61bb      	str	r3, [r7, #24]
 8005dbe:	e003      	b.n	8005dc8 <HAL_UART_Receive+0x7c>
    }
    else
    {
      pdata8bits  = pData;
 8005dc0:	68bb      	ldr	r3, [r7, #8]
 8005dc2:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005dc4:	2300      	movs	r3, #0
 8005dc6:	61bb      	str	r3, [r7, #24]
    }

    /* Check the remain data to be received */
    while (huart->RxXferCount > 0U)
 8005dc8:	e047      	b.n	8005e5a <HAL_UART_Receive+0x10e>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_RXNE, RESET, tickstart, Timeout) != HAL_OK)
 8005dca:	683b      	ldr	r3, [r7, #0]
 8005dcc:	9300      	str	r3, [sp, #0]
 8005dce:	697b      	ldr	r3, [r7, #20]
 8005dd0:	2200      	movs	r2, #0
 8005dd2:	2120      	movs	r1, #32
 8005dd4:	68f8      	ldr	r0, [r7, #12]
 8005dd6:	f000 fb3f 	bl	8006458 <UART_WaitOnFlagUntilTimeout>
 8005dda:	4603      	mov	r3, r0
 8005ddc:	2b00      	cmp	r3, #0
 8005dde:	d005      	beq.n	8005dec <HAL_UART_Receive+0xa0>
      {
        huart->RxState = HAL_UART_STATE_READY;
 8005de0:	68fb      	ldr	r3, [r7, #12]
 8005de2:	2220      	movs	r2, #32
 8005de4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

        return HAL_TIMEOUT;
 8005de8:	2303      	movs	r3, #3
 8005dea:	e042      	b.n	8005e72 <HAL_UART_Receive+0x126>
      }
      if (pdata8bits == NULL)
 8005dec:	69fb      	ldr	r3, [r7, #28]
 8005dee:	2b00      	cmp	r3, #0
 8005df0:	d10c      	bne.n	8005e0c <HAL_UART_Receive+0xc0>
      {
        *pdata16bits = (uint16_t)(huart->Instance->DR & 0x01FF);
 8005df2:	68fb      	ldr	r3, [r7, #12]
 8005df4:	681b      	ldr	r3, [r3, #0]
 8005df6:	685b      	ldr	r3, [r3, #4]
 8005df8:	b29b      	uxth	r3, r3
 8005dfa:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005dfe:	b29a      	uxth	r2, r3
 8005e00:	69bb      	ldr	r3, [r7, #24]
 8005e02:	801a      	strh	r2, [r3, #0]
        pdata16bits++;
 8005e04:	69bb      	ldr	r3, [r7, #24]
 8005e06:	3302      	adds	r3, #2
 8005e08:	61bb      	str	r3, [r7, #24]
 8005e0a:	e01f      	b.n	8005e4c <HAL_UART_Receive+0x100>
      }
      else
      {
        if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005e0c:	68fb      	ldr	r3, [r7, #12]
 8005e0e:	689b      	ldr	r3, [r3, #8]
 8005e10:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005e14:	d007      	beq.n	8005e26 <HAL_UART_Receive+0xda>
 8005e16:	68fb      	ldr	r3, [r7, #12]
 8005e18:	689b      	ldr	r3, [r3, #8]
 8005e1a:	2b00      	cmp	r3, #0
 8005e1c:	d10a      	bne.n	8005e34 <HAL_UART_Receive+0xe8>
 8005e1e:	68fb      	ldr	r3, [r7, #12]
 8005e20:	691b      	ldr	r3, [r3, #16]
 8005e22:	2b00      	cmp	r3, #0
 8005e24:	d106      	bne.n	8005e34 <HAL_UART_Receive+0xe8>
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005e26:	68fb      	ldr	r3, [r7, #12]
 8005e28:	681b      	ldr	r3, [r3, #0]
 8005e2a:	685b      	ldr	r3, [r3, #4]
 8005e2c:	b2da      	uxtb	r2, r3
 8005e2e:	69fb      	ldr	r3, [r7, #28]
 8005e30:	701a      	strb	r2, [r3, #0]
 8005e32:	e008      	b.n	8005e46 <HAL_UART_Receive+0xfa>
        }
        else
        {
          *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005e34:	68fb      	ldr	r3, [r7, #12]
 8005e36:	681b      	ldr	r3, [r3, #0]
 8005e38:	685b      	ldr	r3, [r3, #4]
 8005e3a:	b2db      	uxtb	r3, r3
 8005e3c:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005e40:	b2da      	uxtb	r2, r3
 8005e42:	69fb      	ldr	r3, [r7, #28]
 8005e44:	701a      	strb	r2, [r3, #0]
        }
        pdata8bits++;
 8005e46:	69fb      	ldr	r3, [r7, #28]
 8005e48:	3301      	adds	r3, #1
 8005e4a:	61fb      	str	r3, [r7, #28]
      }
      huart->RxXferCount--;
 8005e4c:	68fb      	ldr	r3, [r7, #12]
 8005e4e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e50:	b29b      	uxth	r3, r3
 8005e52:	3b01      	subs	r3, #1
 8005e54:	b29a      	uxth	r2, r3
 8005e56:	68fb      	ldr	r3, [r7, #12]
 8005e58:	85da      	strh	r2, [r3, #46]	@ 0x2e
    while (huart->RxXferCount > 0U)
 8005e5a:	68fb      	ldr	r3, [r7, #12]
 8005e5c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005e5e:	b29b      	uxth	r3, r3
 8005e60:	2b00      	cmp	r3, #0
 8005e62:	d1b2      	bne.n	8005dca <HAL_UART_Receive+0x7e>
    }

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8005e64:	68fb      	ldr	r3, [r7, #12]
 8005e66:	2220      	movs	r2, #32
 8005e68:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

    return HAL_OK;
 8005e6c:	2300      	movs	r3, #0
 8005e6e:	e000      	b.n	8005e72 <HAL_UART_Receive+0x126>
  }
  else
  {
    return HAL_BUSY;
 8005e70:	2302      	movs	r3, #2
  }
}
 8005e72:	4618      	mov	r0, r3
 8005e74:	3720      	adds	r7, #32
 8005e76:	46bd      	mov	sp, r7
 8005e78:	bd80      	pop	{r7, pc}

08005e7a <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005e7a:	b580      	push	{r7, lr}
 8005e7c:	b084      	sub	sp, #16
 8005e7e:	af00      	add	r7, sp, #0
 8005e80:	60f8      	str	r0, [r7, #12]
 8005e82:	60b9      	str	r1, [r7, #8]
 8005e84:	4613      	mov	r3, r2
 8005e86:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8005e88:	68fb      	ldr	r3, [r7, #12]
 8005e8a:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005e8e:	b2db      	uxtb	r3, r3
 8005e90:	2b20      	cmp	r3, #32
 8005e92:	d112      	bne.n	8005eba <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8005e94:	68bb      	ldr	r3, [r7, #8]
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d002      	beq.n	8005ea0 <HAL_UART_Receive_IT+0x26>
 8005e9a:	88fb      	ldrh	r3, [r7, #6]
 8005e9c:	2b00      	cmp	r3, #0
 8005e9e:	d101      	bne.n	8005ea4 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8005ea0:	2301      	movs	r3, #1
 8005ea2:	e00b      	b.n	8005ebc <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005ea4:	68fb      	ldr	r3, [r7, #12]
 8005ea6:	2200      	movs	r2, #0
 8005ea8:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8005eaa:	88fb      	ldrh	r3, [r7, #6]
 8005eac:	461a      	mov	r2, r3
 8005eae:	68b9      	ldr	r1, [r7, #8]
 8005eb0:	68f8      	ldr	r0, [r7, #12]
 8005eb2:	f000 fb2a 	bl	800650a <UART_Start_Receive_IT>
 8005eb6:	4603      	mov	r3, r0
 8005eb8:	e000      	b.n	8005ebc <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8005eba:	2302      	movs	r3, #2
  }
}
 8005ebc:	4618      	mov	r0, r3
 8005ebe:	3710      	adds	r7, #16
 8005ec0:	46bd      	mov	sp, r7
 8005ec2:	bd80      	pop	{r7, pc}

08005ec4 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005ec4:	b580      	push	{r7, lr}
 8005ec6:	b0ba      	sub	sp, #232	@ 0xe8
 8005ec8:	af00      	add	r7, sp, #0
 8005eca:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	681b      	ldr	r3, [r3, #0]
 8005ed2:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005ed6:	687b      	ldr	r3, [r7, #4]
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	68db      	ldr	r3, [r3, #12]
 8005edc:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	681b      	ldr	r3, [r3, #0]
 8005ee4:	695b      	ldr	r3, [r3, #20]
 8005ee6:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8005eea:	2300      	movs	r3, #0
 8005eec:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005ef0:	2300      	movs	r3, #0
 8005ef2:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005efa:	f003 030f 	and.w	r3, r3, #15
 8005efe:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005f02:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f06:	2b00      	cmp	r3, #0
 8005f08:	d10f      	bne.n	8005f2a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005f0a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f0e:	f003 0320 	and.w	r3, r3, #32
 8005f12:	2b00      	cmp	r3, #0
 8005f14:	d009      	beq.n	8005f2a <HAL_UART_IRQHandler+0x66>
 8005f16:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f1a:	f003 0320 	and.w	r3, r3, #32
 8005f1e:	2b00      	cmp	r3, #0
 8005f20:	d003      	beq.n	8005f2a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005f22:	6878      	ldr	r0, [r7, #4]
 8005f24:	f000 fc07 	bl	8006736 <UART_Receive_IT>
      return;
 8005f28:	e273      	b.n	8006412 <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8005f2a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005f2e:	2b00      	cmp	r3, #0
 8005f30:	f000 80de 	beq.w	80060f0 <HAL_UART_IRQHandler+0x22c>
 8005f34:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f38:	f003 0301 	and.w	r3, r3, #1
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d106      	bne.n	8005f4e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005f40:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f44:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005f48:	2b00      	cmp	r3, #0
 8005f4a:	f000 80d1 	beq.w	80060f0 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005f4e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f52:	f003 0301 	and.w	r3, r3, #1
 8005f56:	2b00      	cmp	r3, #0
 8005f58:	d00b      	beq.n	8005f72 <HAL_UART_IRQHandler+0xae>
 8005f5a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005f5e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8005f62:	2b00      	cmp	r3, #0
 8005f64:	d005      	beq.n	8005f72 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f6a:	f043 0201 	orr.w	r2, r3, #1
 8005f6e:	687b      	ldr	r3, [r7, #4]
 8005f70:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f72:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f76:	f003 0304 	and.w	r3, r3, #4
 8005f7a:	2b00      	cmp	r3, #0
 8005f7c:	d00b      	beq.n	8005f96 <HAL_UART_IRQHandler+0xd2>
 8005f7e:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005f82:	f003 0301 	and.w	r3, r3, #1
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d005      	beq.n	8005f96 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005f8e:	f043 0202 	orr.w	r2, r3, #2
 8005f92:	687b      	ldr	r3, [r7, #4]
 8005f94:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8005f96:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005f9a:	f003 0302 	and.w	r3, r3, #2
 8005f9e:	2b00      	cmp	r3, #0
 8005fa0:	d00b      	beq.n	8005fba <HAL_UART_IRQHandler+0xf6>
 8005fa2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fa6:	f003 0301 	and.w	r3, r3, #1
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d005      	beq.n	8005fba <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fb2:	f043 0204 	orr.w	r2, r3, #4
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005fba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005fbe:	f003 0308 	and.w	r3, r3, #8
 8005fc2:	2b00      	cmp	r3, #0
 8005fc4:	d011      	beq.n	8005fea <HAL_UART_IRQHandler+0x126>
 8005fc6:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005fca:	f003 0320 	and.w	r3, r3, #32
 8005fce:	2b00      	cmp	r3, #0
 8005fd0:	d105      	bne.n	8005fde <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005fd2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005fd6:	f003 0301 	and.w	r3, r3, #1
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d005      	beq.n	8005fea <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fe2:	f043 0208 	orr.w	r2, r3, #8
 8005fe6:	687b      	ldr	r3, [r7, #4]
 8005fe8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	f000 820a 	beq.w	8006408 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005ff4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005ff8:	f003 0320 	and.w	r3, r3, #32
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d008      	beq.n	8006012 <HAL_UART_IRQHandler+0x14e>
 8006000:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8006004:	f003 0320 	and.w	r3, r3, #32
 8006008:	2b00      	cmp	r3, #0
 800600a:	d002      	beq.n	8006012 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800600c:	6878      	ldr	r0, [r7, #4]
 800600e:	f000 fb92 	bl	8006736 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	695b      	ldr	r3, [r3, #20]
 8006018:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800601c:	2b40      	cmp	r3, #64	@ 0x40
 800601e:	bf0c      	ite	eq
 8006020:	2301      	moveq	r3, #1
 8006022:	2300      	movne	r3, #0
 8006024:	b2db      	uxtb	r3, r3
 8006026:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800602a:	687b      	ldr	r3, [r7, #4]
 800602c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800602e:	f003 0308 	and.w	r3, r3, #8
 8006032:	2b00      	cmp	r3, #0
 8006034:	d103      	bne.n	800603e <HAL_UART_IRQHandler+0x17a>
 8006036:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800603a:	2b00      	cmp	r3, #0
 800603c:	d04f      	beq.n	80060de <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800603e:	6878      	ldr	r0, [r7, #4]
 8006040:	f000 fa9d 	bl	800657e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	695b      	ldr	r3, [r3, #20]
 800604a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800604e:	2b40      	cmp	r3, #64	@ 0x40
 8006050:	d141      	bne.n	80060d6 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8006052:	687b      	ldr	r3, [r7, #4]
 8006054:	681b      	ldr	r3, [r3, #0]
 8006056:	3314      	adds	r3, #20
 8006058:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800605c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8006060:	e853 3f00 	ldrex	r3, [r3]
 8006064:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8006068:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 800606c:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006070:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	3314      	adds	r3, #20
 800607a:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 800607e:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8006082:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006086:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800608a:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 800608e:	e841 2300 	strex	r3, r2, [r1]
 8006092:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 8006096:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800609a:	2b00      	cmp	r3, #0
 800609c:	d1d9      	bne.n	8006052 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060a2:	2b00      	cmp	r3, #0
 80060a4:	d013      	beq.n	80060ce <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060aa:	4a8a      	ldr	r2, [pc, #552]	@ (80062d4 <HAL_UART_IRQHandler+0x410>)
 80060ac:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060b2:	4618      	mov	r0, r3
 80060b4:	f7fd f9e9 	bl	800348a <HAL_DMA_Abort_IT>
 80060b8:	4603      	mov	r3, r0
 80060ba:	2b00      	cmp	r3, #0
 80060bc:	d016      	beq.n	80060ec <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80060be:	687b      	ldr	r3, [r7, #4]
 80060c0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80060c2:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80060c4:	687a      	ldr	r2, [r7, #4]
 80060c6:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 80060c8:	4610      	mov	r0, r2
 80060ca:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060cc:	e00e      	b.n	80060ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80060ce:	6878      	ldr	r0, [r7, #4]
 80060d0:	f000 f9ac 	bl	800642c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060d4:	e00a      	b.n	80060ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80060d6:	6878      	ldr	r0, [r7, #4]
 80060d8:	f000 f9a8 	bl	800642c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060dc:	e006      	b.n	80060ec <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80060de:	6878      	ldr	r0, [r7, #4]
 80060e0:	f000 f9a4 	bl	800642c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80060e4:	687b      	ldr	r3, [r7, #4]
 80060e6:	2200      	movs	r2, #0
 80060e8:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80060ea:	e18d      	b.n	8006408 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80060ec:	bf00      	nop
    return;
 80060ee:	e18b      	b.n	8006408 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80060f4:	2b01      	cmp	r3, #1
 80060f6:	f040 8167 	bne.w	80063c8 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80060fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80060fe:	f003 0310 	and.w	r3, r3, #16
 8006102:	2b00      	cmp	r3, #0
 8006104:	f000 8160 	beq.w	80063c8 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 8006108:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800610c:	f003 0310 	and.w	r3, r3, #16
 8006110:	2b00      	cmp	r3, #0
 8006112:	f000 8159 	beq.w	80063c8 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006116:	2300      	movs	r3, #0
 8006118:	60bb      	str	r3, [r7, #8]
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	681b      	ldr	r3, [r3, #0]
 800611e:	681b      	ldr	r3, [r3, #0]
 8006120:	60bb      	str	r3, [r7, #8]
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	681b      	ldr	r3, [r3, #0]
 8006126:	685b      	ldr	r3, [r3, #4]
 8006128:	60bb      	str	r3, [r7, #8]
 800612a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	681b      	ldr	r3, [r3, #0]
 8006130:	695b      	ldr	r3, [r3, #20]
 8006132:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8006136:	2b40      	cmp	r3, #64	@ 0x40
 8006138:	f040 80ce 	bne.w	80062d8 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800613c:	687b      	ldr	r3, [r7, #4]
 800613e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006140:	681b      	ldr	r3, [r3, #0]
 8006142:	685b      	ldr	r3, [r3, #4]
 8006144:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8006148:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800614c:	2b00      	cmp	r3, #0
 800614e:	f000 80a9 	beq.w	80062a4 <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006156:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800615a:	429a      	cmp	r2, r3
 800615c:	f080 80a2 	bcs.w	80062a4 <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8006166:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800616c:	69db      	ldr	r3, [r3, #28]
 800616e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8006172:	f000 8088 	beq.w	8006286 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8006176:	687b      	ldr	r3, [r7, #4]
 8006178:	681b      	ldr	r3, [r3, #0]
 800617a:	330c      	adds	r3, #12
 800617c:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006180:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8006184:	e853 3f00 	ldrex	r3, [r3]
 8006188:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 800618c:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8006190:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006194:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	330c      	adds	r3, #12
 800619e:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80061a2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80061a6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061aa:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80061ae:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80061b2:	e841 2300 	strex	r3, r2, [r1]
 80061b6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80061ba:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80061be:	2b00      	cmp	r3, #0
 80061c0:	d1d9      	bne.n	8006176 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80061c2:	687b      	ldr	r3, [r7, #4]
 80061c4:	681b      	ldr	r3, [r3, #0]
 80061c6:	3314      	adds	r3, #20
 80061c8:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80061ca:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 80061cc:	e853 3f00 	ldrex	r3, [r3]
 80061d0:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 80061d2:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80061d4:	f023 0301 	bic.w	r3, r3, #1
 80061d8:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	3314      	adds	r3, #20
 80061e2:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80061e6:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80061ea:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80061ec:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80061ee:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80061f2:	e841 2300 	strex	r3, r2, [r1]
 80061f6:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80061f8:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80061fa:	2b00      	cmp	r3, #0
 80061fc:	d1e1      	bne.n	80061c2 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	681b      	ldr	r3, [r3, #0]
 8006202:	3314      	adds	r3, #20
 8006204:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006206:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8006208:	e853 3f00 	ldrex	r3, [r3]
 800620c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800620e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8006210:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8006214:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006218:	687b      	ldr	r3, [r7, #4]
 800621a:	681b      	ldr	r3, [r3, #0]
 800621c:	3314      	adds	r3, #20
 800621e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8006222:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8006224:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006226:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8006228:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800622a:	e841 2300 	strex	r3, r2, [r1]
 800622e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8006230:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8006232:	2b00      	cmp	r3, #0
 8006234:	d1e3      	bne.n	80061fe <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	330c      	adds	r3, #12
 800624a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800624c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800624e:	e853 3f00 	ldrex	r3, [r3]
 8006252:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8006254:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8006256:	f023 0310 	bic.w	r3, r3, #16
 800625a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800625e:	687b      	ldr	r3, [r7, #4]
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	330c      	adds	r3, #12
 8006264:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8006268:	65ba      	str	r2, [r7, #88]	@ 0x58
 800626a:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800626c:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 800626e:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8006270:	e841 2300 	strex	r3, r2, [r1]
 8006274:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 8006276:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8006278:	2b00      	cmp	r3, #0
 800627a:	d1e3      	bne.n	8006244 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8006280:	4618      	mov	r0, r3
 8006282:	f7fd f892 	bl	80033aa <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2202      	movs	r2, #2
 800628a:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8006294:	b29b      	uxth	r3, r3
 8006296:	1ad3      	subs	r3, r2, r3
 8006298:	b29b      	uxth	r3, r3
 800629a:	4619      	mov	r1, r3
 800629c:	6878      	ldr	r0, [r7, #4]
 800629e:	f000 f8cf 	bl	8006440 <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 80062a2:	e0b3      	b.n	800640c <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80062a8:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80062ac:	429a      	cmp	r2, r3
 80062ae:	f040 80ad 	bne.w	800640c <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80062b6:	69db      	ldr	r3, [r3, #28]
 80062b8:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80062bc:	f040 80a6 	bne.w	800640c <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	2202      	movs	r2, #2
 80062c4:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 80062ca:	4619      	mov	r1, r3
 80062cc:	6878      	ldr	r0, [r7, #4]
 80062ce:	f000 f8b7 	bl	8006440 <HAL_UARTEx_RxEventCallback>
      return;
 80062d2:	e09b      	b.n	800640c <HAL_UART_IRQHandler+0x548>
 80062d4:	08006645 	.word	0x08006645
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80062dc:	687b      	ldr	r3, [r7, #4]
 80062de:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062e0:	b29b      	uxth	r3, r3
 80062e2:	1ad3      	subs	r3, r2, r3
 80062e4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80062ec:	b29b      	uxth	r3, r3
 80062ee:	2b00      	cmp	r3, #0
 80062f0:	f000 808e 	beq.w	8006410 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80062f4:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80062f8:	2b00      	cmp	r3, #0
 80062fa:	f000 8089 	beq.w	8006410 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80062fe:	687b      	ldr	r3, [r7, #4]
 8006300:	681b      	ldr	r3, [r3, #0]
 8006302:	330c      	adds	r3, #12
 8006304:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006306:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8006308:	e853 3f00 	ldrex	r3, [r3]
 800630c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800630e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006310:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8006314:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	681b      	ldr	r3, [r3, #0]
 800631c:	330c      	adds	r3, #12
 800631e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8006322:	647a      	str	r2, [r7, #68]	@ 0x44
 8006324:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006326:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8006328:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800632a:	e841 2300 	strex	r3, r2, [r1]
 800632e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8006330:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8006332:	2b00      	cmp	r3, #0
 8006334:	d1e3      	bne.n	80062fe <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8006336:	687b      	ldr	r3, [r7, #4]
 8006338:	681b      	ldr	r3, [r3, #0]
 800633a:	3314      	adds	r3, #20
 800633c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800633e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8006340:	e853 3f00 	ldrex	r3, [r3]
 8006344:	623b      	str	r3, [r7, #32]
   return(result);
 8006346:	6a3b      	ldr	r3, [r7, #32]
 8006348:	f023 0301 	bic.w	r3, r3, #1
 800634c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8006350:	687b      	ldr	r3, [r7, #4]
 8006352:	681b      	ldr	r3, [r3, #0]
 8006354:	3314      	adds	r3, #20
 8006356:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800635a:	633a      	str	r2, [r7, #48]	@ 0x30
 800635c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800635e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8006360:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8006362:	e841 2300 	strex	r3, r2, [r1]
 8006366:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8006368:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800636a:	2b00      	cmp	r3, #0
 800636c:	d1e3      	bne.n	8006336 <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800636e:	687b      	ldr	r3, [r7, #4]
 8006370:	2220      	movs	r2, #32
 8006372:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006376:	687b      	ldr	r3, [r7, #4]
 8006378:	2200      	movs	r2, #0
 800637a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800637c:	687b      	ldr	r3, [r7, #4]
 800637e:	681b      	ldr	r3, [r3, #0]
 8006380:	330c      	adds	r3, #12
 8006382:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8006384:	693b      	ldr	r3, [r7, #16]
 8006386:	e853 3f00 	ldrex	r3, [r3]
 800638a:	60fb      	str	r3, [r7, #12]
   return(result);
 800638c:	68fb      	ldr	r3, [r7, #12]
 800638e:	f023 0310 	bic.w	r3, r3, #16
 8006392:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	681b      	ldr	r3, [r3, #0]
 800639a:	330c      	adds	r3, #12
 800639c:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80063a0:	61fa      	str	r2, [r7, #28]
 80063a2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80063a4:	69b9      	ldr	r1, [r7, #24]
 80063a6:	69fa      	ldr	r2, [r7, #28]
 80063a8:	e841 2300 	strex	r3, r2, [r1]
 80063ac:	617b      	str	r3, [r7, #20]
   return(result);
 80063ae:	697b      	ldr	r3, [r7, #20]
 80063b0:	2b00      	cmp	r3, #0
 80063b2:	d1e3      	bne.n	800637c <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80063b4:	687b      	ldr	r3, [r7, #4]
 80063b6:	2202      	movs	r2, #2
 80063b8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80063ba:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80063be:	4619      	mov	r1, r3
 80063c0:	6878      	ldr	r0, [r7, #4]
 80063c2:	f000 f83d 	bl	8006440 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80063c6:	e023      	b.n	8006410 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80063c8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063cc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063d0:	2b00      	cmp	r3, #0
 80063d2:	d009      	beq.n	80063e8 <HAL_UART_IRQHandler+0x524>
 80063d4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063d8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80063dc:	2b00      	cmp	r3, #0
 80063de:	d003      	beq.n	80063e8 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 80063e0:	6878      	ldr	r0, [r7, #4]
 80063e2:	f000 f940 	bl	8006666 <UART_Transmit_IT>
    return;
 80063e6:	e014      	b.n	8006412 <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80063e8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80063ec:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d00e      	beq.n	8006412 <HAL_UART_IRQHandler+0x54e>
 80063f4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80063f8:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80063fc:	2b00      	cmp	r3, #0
 80063fe:	d008      	beq.n	8006412 <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 8006400:	6878      	ldr	r0, [r7, #4]
 8006402:	f000 f980 	bl	8006706 <UART_EndTransmit_IT>
    return;
 8006406:	e004      	b.n	8006412 <HAL_UART_IRQHandler+0x54e>
    return;
 8006408:	bf00      	nop
 800640a:	e002      	b.n	8006412 <HAL_UART_IRQHandler+0x54e>
      return;
 800640c:	bf00      	nop
 800640e:	e000      	b.n	8006412 <HAL_UART_IRQHandler+0x54e>
      return;
 8006410:	bf00      	nop
  }
}
 8006412:	37e8      	adds	r7, #232	@ 0xe8
 8006414:	46bd      	mov	sp, r7
 8006416:	bd80      	pop	{r7, pc}

08006418 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8006418:	b480      	push	{r7}
 800641a:	b083      	sub	sp, #12
 800641c:	af00      	add	r7, sp, #0
 800641e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8006420:	bf00      	nop
 8006422:	370c      	adds	r7, #12
 8006424:	46bd      	mov	sp, r7
 8006426:	f85d 7b04 	ldr.w	r7, [sp], #4
 800642a:	4770      	bx	lr

0800642c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 800642c:	b480      	push	{r7}
 800642e:	b083      	sub	sp, #12
 8006430:	af00      	add	r7, sp, #0
 8006432:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8006434:	bf00      	nop
 8006436:	370c      	adds	r7, #12
 8006438:	46bd      	mov	sp, r7
 800643a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800643e:	4770      	bx	lr

08006440 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8006440:	b480      	push	{r7}
 8006442:	b083      	sub	sp, #12
 8006444:	af00      	add	r7, sp, #0
 8006446:	6078      	str	r0, [r7, #4]
 8006448:	460b      	mov	r3, r1
 800644a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 800644c:	bf00      	nop
 800644e:	370c      	adds	r7, #12
 8006450:	46bd      	mov	sp, r7
 8006452:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006456:	4770      	bx	lr

08006458 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8006458:	b580      	push	{r7, lr}
 800645a:	b086      	sub	sp, #24
 800645c:	af00      	add	r7, sp, #0
 800645e:	60f8      	str	r0, [r7, #12]
 8006460:	60b9      	str	r1, [r7, #8]
 8006462:	603b      	str	r3, [r7, #0]
 8006464:	4613      	mov	r3, r2
 8006466:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8006468:	e03b      	b.n	80064e2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800646a:	6a3b      	ldr	r3, [r7, #32]
 800646c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8006470:	d037      	beq.n	80064e2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8006472:	f7fc fe59 	bl	8003128 <HAL_GetTick>
 8006476:	4602      	mov	r2, r0
 8006478:	683b      	ldr	r3, [r7, #0]
 800647a:	1ad3      	subs	r3, r2, r3
 800647c:	6a3a      	ldr	r2, [r7, #32]
 800647e:	429a      	cmp	r2, r3
 8006480:	d302      	bcc.n	8006488 <UART_WaitOnFlagUntilTimeout+0x30>
 8006482:	6a3b      	ldr	r3, [r7, #32]
 8006484:	2b00      	cmp	r3, #0
 8006486:	d101      	bne.n	800648c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8006488:	2303      	movs	r3, #3
 800648a:	e03a      	b.n	8006502 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 800648c:	68fb      	ldr	r3, [r7, #12]
 800648e:	681b      	ldr	r3, [r3, #0]
 8006490:	68db      	ldr	r3, [r3, #12]
 8006492:	f003 0304 	and.w	r3, r3, #4
 8006496:	2b00      	cmp	r3, #0
 8006498:	d023      	beq.n	80064e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 800649a:	68bb      	ldr	r3, [r7, #8]
 800649c:	2b80      	cmp	r3, #128	@ 0x80
 800649e:	d020      	beq.n	80064e2 <UART_WaitOnFlagUntilTimeout+0x8a>
 80064a0:	68bb      	ldr	r3, [r7, #8]
 80064a2:	2b40      	cmp	r3, #64	@ 0x40
 80064a4:	d01d      	beq.n	80064e2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 80064a6:	68fb      	ldr	r3, [r7, #12]
 80064a8:	681b      	ldr	r3, [r3, #0]
 80064aa:	681b      	ldr	r3, [r3, #0]
 80064ac:	f003 0308 	and.w	r3, r3, #8
 80064b0:	2b08      	cmp	r3, #8
 80064b2:	d116      	bne.n	80064e2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 80064b4:	2300      	movs	r3, #0
 80064b6:	617b      	str	r3, [r7, #20]
 80064b8:	68fb      	ldr	r3, [r7, #12]
 80064ba:	681b      	ldr	r3, [r3, #0]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	617b      	str	r3, [r7, #20]
 80064c0:	68fb      	ldr	r3, [r7, #12]
 80064c2:	681b      	ldr	r3, [r3, #0]
 80064c4:	685b      	ldr	r3, [r3, #4]
 80064c6:	617b      	str	r3, [r7, #20]
 80064c8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 80064ca:	68f8      	ldr	r0, [r7, #12]
 80064cc:	f000 f857 	bl	800657e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	2208      	movs	r2, #8
 80064d4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80064d6:	68fb      	ldr	r3, [r7, #12]
 80064d8:	2200      	movs	r2, #0
 80064da:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 80064de:	2301      	movs	r3, #1
 80064e0:	e00f      	b.n	8006502 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	681b      	ldr	r3, [r3, #0]
 80064e6:	681a      	ldr	r2, [r3, #0]
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	4013      	ands	r3, r2
 80064ec:	68ba      	ldr	r2, [r7, #8]
 80064ee:	429a      	cmp	r2, r3
 80064f0:	bf0c      	ite	eq
 80064f2:	2301      	moveq	r3, #1
 80064f4:	2300      	movne	r3, #0
 80064f6:	b2db      	uxtb	r3, r3
 80064f8:	461a      	mov	r2, r3
 80064fa:	79fb      	ldrb	r3, [r7, #7]
 80064fc:	429a      	cmp	r2, r3
 80064fe:	d0b4      	beq.n	800646a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8006500:	2300      	movs	r3, #0
}
 8006502:	4618      	mov	r0, r3
 8006504:	3718      	adds	r7, #24
 8006506:	46bd      	mov	sp, r7
 8006508:	bd80      	pop	{r7, pc}

0800650a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800650a:	b480      	push	{r7}
 800650c:	b085      	sub	sp, #20
 800650e:	af00      	add	r7, sp, #0
 8006510:	60f8      	str	r0, [r7, #12]
 8006512:	60b9      	str	r1, [r7, #8]
 8006514:	4613      	mov	r3, r2
 8006516:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	68ba      	ldr	r2, [r7, #8]
 800651c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 800651e:	68fb      	ldr	r3, [r7, #12]
 8006520:	88fa      	ldrh	r2, [r7, #6]
 8006522:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8006524:	68fb      	ldr	r3, [r7, #12]
 8006526:	88fa      	ldrh	r2, [r7, #6]
 8006528:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800652a:	68fb      	ldr	r3, [r7, #12]
 800652c:	2200      	movs	r2, #0
 800652e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8006530:	68fb      	ldr	r3, [r7, #12]
 8006532:	2222      	movs	r2, #34	@ 0x22
 8006534:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8006538:	68fb      	ldr	r3, [r7, #12]
 800653a:	691b      	ldr	r3, [r3, #16]
 800653c:	2b00      	cmp	r3, #0
 800653e:	d007      	beq.n	8006550 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8006540:	68fb      	ldr	r3, [r7, #12]
 8006542:	681b      	ldr	r3, [r3, #0]
 8006544:	68da      	ldr	r2, [r3, #12]
 8006546:	68fb      	ldr	r3, [r7, #12]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800654e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8006550:	68fb      	ldr	r3, [r7, #12]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	695a      	ldr	r2, [r3, #20]
 8006556:	68fb      	ldr	r3, [r7, #12]
 8006558:	681b      	ldr	r3, [r3, #0]
 800655a:	f042 0201 	orr.w	r2, r2, #1
 800655e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8006560:	68fb      	ldr	r3, [r7, #12]
 8006562:	681b      	ldr	r3, [r3, #0]
 8006564:	68da      	ldr	r2, [r3, #12]
 8006566:	68fb      	ldr	r3, [r7, #12]
 8006568:	681b      	ldr	r3, [r3, #0]
 800656a:	f042 0220 	orr.w	r2, r2, #32
 800656e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8006570:	2300      	movs	r3, #0
}
 8006572:	4618      	mov	r0, r3
 8006574:	3714      	adds	r7, #20
 8006576:	46bd      	mov	sp, r7
 8006578:	f85d 7b04 	ldr.w	r7, [sp], #4
 800657c:	4770      	bx	lr

0800657e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 800657e:	b480      	push	{r7}
 8006580:	b095      	sub	sp, #84	@ 0x54
 8006582:	af00      	add	r7, sp, #0
 8006584:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	330c      	adds	r3, #12
 800658c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800658e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8006590:	e853 3f00 	ldrex	r3, [r3]
 8006594:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8006596:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8006598:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 800659c:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	330c      	adds	r3, #12
 80065a4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 80065a6:	643a      	str	r2, [r7, #64]	@ 0x40
 80065a8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065aa:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 80065ac:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 80065ae:	e841 2300 	strex	r3, r2, [r1]
 80065b2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 80065b4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80065b6:	2b00      	cmp	r3, #0
 80065b8:	d1e5      	bne.n	8006586 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80065ba:	687b      	ldr	r3, [r7, #4]
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	3314      	adds	r3, #20
 80065c0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065c2:	6a3b      	ldr	r3, [r7, #32]
 80065c4:	e853 3f00 	ldrex	r3, [r3]
 80065c8:	61fb      	str	r3, [r7, #28]
   return(result);
 80065ca:	69fb      	ldr	r3, [r7, #28]
 80065cc:	f023 0301 	bic.w	r3, r3, #1
 80065d0:	64bb      	str	r3, [r7, #72]	@ 0x48
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	681b      	ldr	r3, [r3, #0]
 80065d6:	3314      	adds	r3, #20
 80065d8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 80065da:	62fa      	str	r2, [r7, #44]	@ 0x2c
 80065dc:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80065de:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80065e0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80065e2:	e841 2300 	strex	r3, r2, [r1]
 80065e6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 80065e8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80065ea:	2b00      	cmp	r3, #0
 80065ec:	d1e5      	bne.n	80065ba <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80065f2:	2b01      	cmp	r3, #1
 80065f4:	d119      	bne.n	800662a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80065f6:	687b      	ldr	r3, [r7, #4]
 80065f8:	681b      	ldr	r3, [r3, #0]
 80065fa:	330c      	adds	r3, #12
 80065fc:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80065fe:	68fb      	ldr	r3, [r7, #12]
 8006600:	e853 3f00 	ldrex	r3, [r3]
 8006604:	60bb      	str	r3, [r7, #8]
   return(result);
 8006606:	68bb      	ldr	r3, [r7, #8]
 8006608:	f023 0310 	bic.w	r3, r3, #16
 800660c:	647b      	str	r3, [r7, #68]	@ 0x44
 800660e:	687b      	ldr	r3, [r7, #4]
 8006610:	681b      	ldr	r3, [r3, #0]
 8006612:	330c      	adds	r3, #12
 8006614:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8006616:	61ba      	str	r2, [r7, #24]
 8006618:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800661a:	6979      	ldr	r1, [r7, #20]
 800661c:	69ba      	ldr	r2, [r7, #24]
 800661e:	e841 2300 	strex	r3, r2, [r1]
 8006622:	613b      	str	r3, [r7, #16]
   return(result);
 8006624:	693b      	ldr	r3, [r7, #16]
 8006626:	2b00      	cmp	r3, #0
 8006628:	d1e5      	bne.n	80065f6 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 800662a:	687b      	ldr	r3, [r7, #4]
 800662c:	2220      	movs	r2, #32
 800662e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	2200      	movs	r2, #0
 8006636:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8006638:	bf00      	nop
 800663a:	3754      	adds	r7, #84	@ 0x54
 800663c:	46bd      	mov	sp, r7
 800663e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006642:	4770      	bx	lr

08006644 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8006644:	b580      	push	{r7, lr}
 8006646:	b084      	sub	sp, #16
 8006648:	af00      	add	r7, sp, #0
 800664a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8006650:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8006652:	68fb      	ldr	r3, [r7, #12]
 8006654:	2200      	movs	r2, #0
 8006656:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8006658:	68f8      	ldr	r0, [r7, #12]
 800665a:	f7ff fee7 	bl	800642c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 800665e:	bf00      	nop
 8006660:	3710      	adds	r7, #16
 8006662:	46bd      	mov	sp, r7
 8006664:	bd80      	pop	{r7, pc}

08006666 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8006666:	b480      	push	{r7}
 8006668:	b085      	sub	sp, #20
 800666a:	af00      	add	r7, sp, #0
 800666c:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 800666e:	687b      	ldr	r3, [r7, #4]
 8006670:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8006674:	b2db      	uxtb	r3, r3
 8006676:	2b21      	cmp	r3, #33	@ 0x21
 8006678:	d13e      	bne.n	80066f8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800667a:	687b      	ldr	r3, [r7, #4]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006682:	d114      	bne.n	80066ae <UART_Transmit_IT+0x48>
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	691b      	ldr	r3, [r3, #16]
 8006688:	2b00      	cmp	r3, #0
 800668a:	d110      	bne.n	80066ae <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6a1b      	ldr	r3, [r3, #32]
 8006690:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8006692:	68fb      	ldr	r3, [r7, #12]
 8006694:	881b      	ldrh	r3, [r3, #0]
 8006696:	461a      	mov	r2, r3
 8006698:	687b      	ldr	r3, [r7, #4]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80066a0:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	6a1b      	ldr	r3, [r3, #32]
 80066a6:	1c9a      	adds	r2, r3, #2
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	621a      	str	r2, [r3, #32]
 80066ac:	e008      	b.n	80066c0 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	6a1b      	ldr	r3, [r3, #32]
 80066b2:	1c59      	adds	r1, r3, #1
 80066b4:	687a      	ldr	r2, [r7, #4]
 80066b6:	6211      	str	r1, [r2, #32]
 80066b8:	781a      	ldrb	r2, [r3, #0]
 80066ba:	687b      	ldr	r3, [r7, #4]
 80066bc:	681b      	ldr	r3, [r3, #0]
 80066be:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 80066c0:	687b      	ldr	r3, [r7, #4]
 80066c2:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 80066c4:	b29b      	uxth	r3, r3
 80066c6:	3b01      	subs	r3, #1
 80066c8:	b29b      	uxth	r3, r3
 80066ca:	687a      	ldr	r2, [r7, #4]
 80066cc:	4619      	mov	r1, r3
 80066ce:	84d1      	strh	r1, [r2, #38]	@ 0x26
 80066d0:	2b00      	cmp	r3, #0
 80066d2:	d10f      	bne.n	80066f4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 80066d4:	687b      	ldr	r3, [r7, #4]
 80066d6:	681b      	ldr	r3, [r3, #0]
 80066d8:	68da      	ldr	r2, [r3, #12]
 80066da:	687b      	ldr	r3, [r7, #4]
 80066dc:	681b      	ldr	r3, [r3, #0]
 80066de:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80066e2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 80066e4:	687b      	ldr	r3, [r7, #4]
 80066e6:	681b      	ldr	r3, [r3, #0]
 80066e8:	68da      	ldr	r2, [r3, #12]
 80066ea:	687b      	ldr	r3, [r7, #4]
 80066ec:	681b      	ldr	r3, [r3, #0]
 80066ee:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 80066f2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80066f4:	2300      	movs	r3, #0
 80066f6:	e000      	b.n	80066fa <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80066f8:	2302      	movs	r3, #2
  }
}
 80066fa:	4618      	mov	r0, r3
 80066fc:	3714      	adds	r7, #20
 80066fe:	46bd      	mov	sp, r7
 8006700:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006704:	4770      	bx	lr

08006706 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8006706:	b580      	push	{r7, lr}
 8006708:	b082      	sub	sp, #8
 800670a:	af00      	add	r7, sp, #0
 800670c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	681b      	ldr	r3, [r3, #0]
 8006712:	68da      	ldr	r2, [r3, #12]
 8006714:	687b      	ldr	r3, [r7, #4]
 8006716:	681b      	ldr	r3, [r3, #0]
 8006718:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800671c:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	2220      	movs	r2, #32
 8006722:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8006726:	6878      	ldr	r0, [r7, #4]
 8006728:	f7ff fe76 	bl	8006418 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 800672c:	2300      	movs	r3, #0
}
 800672e:	4618      	mov	r0, r3
 8006730:	3708      	adds	r7, #8
 8006732:	46bd      	mov	sp, r7
 8006734:	bd80      	pop	{r7, pc}

08006736 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8006736:	b580      	push	{r7, lr}
 8006738:	b08c      	sub	sp, #48	@ 0x30
 800673a:	af00      	add	r7, sp, #0
 800673c:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 800673e:	2300      	movs	r3, #0
 8006740:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8006742:	2300      	movs	r3, #0
 8006744:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8006746:	687b      	ldr	r3, [r7, #4]
 8006748:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 800674c:	b2db      	uxtb	r3, r3
 800674e:	2b22      	cmp	r3, #34	@ 0x22
 8006750:	f040 80aa 	bne.w	80068a8 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	689b      	ldr	r3, [r3, #8]
 8006758:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800675c:	d115      	bne.n	800678a <UART_Receive_IT+0x54>
 800675e:	687b      	ldr	r3, [r7, #4]
 8006760:	691b      	ldr	r3, [r3, #16]
 8006762:	2b00      	cmp	r3, #0
 8006764:	d111      	bne.n	800678a <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800676a:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	681b      	ldr	r3, [r3, #0]
 8006770:	685b      	ldr	r3, [r3, #4]
 8006772:	b29b      	uxth	r3, r3
 8006774:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8006778:	b29a      	uxth	r2, r3
 800677a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800677c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800677e:	687b      	ldr	r3, [r7, #4]
 8006780:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8006782:	1c9a      	adds	r2, r3, #2
 8006784:	687b      	ldr	r3, [r7, #4]
 8006786:	629a      	str	r2, [r3, #40]	@ 0x28
 8006788:	e024      	b.n	80067d4 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800678a:	687b      	ldr	r3, [r7, #4]
 800678c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800678e:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8006790:	687b      	ldr	r3, [r7, #4]
 8006792:	689b      	ldr	r3, [r3, #8]
 8006794:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8006798:	d007      	beq.n	80067aa <UART_Receive_IT+0x74>
 800679a:	687b      	ldr	r3, [r7, #4]
 800679c:	689b      	ldr	r3, [r3, #8]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	d10a      	bne.n	80067b8 <UART_Receive_IT+0x82>
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	691b      	ldr	r3, [r3, #16]
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d106      	bne.n	80067b8 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 80067aa:	687b      	ldr	r3, [r7, #4]
 80067ac:	681b      	ldr	r3, [r3, #0]
 80067ae:	685b      	ldr	r3, [r3, #4]
 80067b0:	b2da      	uxtb	r2, r3
 80067b2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067b4:	701a      	strb	r2, [r3, #0]
 80067b6:	e008      	b.n	80067ca <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	681b      	ldr	r3, [r3, #0]
 80067bc:	685b      	ldr	r3, [r3, #4]
 80067be:	b2db      	uxtb	r3, r3
 80067c0:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 80067c4:	b2da      	uxtb	r2, r3
 80067c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80067c8:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80067ce:	1c5a      	adds	r2, r3, #1
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 80067d4:	687b      	ldr	r3, [r7, #4]
 80067d6:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80067d8:	b29b      	uxth	r3, r3
 80067da:	3b01      	subs	r3, #1
 80067dc:	b29b      	uxth	r3, r3
 80067de:	687a      	ldr	r2, [r7, #4]
 80067e0:	4619      	mov	r1, r3
 80067e2:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 80067e4:	2b00      	cmp	r3, #0
 80067e6:	d15d      	bne.n	80068a4 <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	681b      	ldr	r3, [r3, #0]
 80067ec:	68da      	ldr	r2, [r3, #12]
 80067ee:	687b      	ldr	r3, [r7, #4]
 80067f0:	681b      	ldr	r3, [r3, #0]
 80067f2:	f022 0220 	bic.w	r2, r2, #32
 80067f6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80067f8:	687b      	ldr	r3, [r7, #4]
 80067fa:	681b      	ldr	r3, [r3, #0]
 80067fc:	68da      	ldr	r2, [r3, #12]
 80067fe:	687b      	ldr	r3, [r7, #4]
 8006800:	681b      	ldr	r3, [r3, #0]
 8006802:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8006806:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8006808:	687b      	ldr	r3, [r7, #4]
 800680a:	681b      	ldr	r3, [r3, #0]
 800680c:	695a      	ldr	r2, [r3, #20]
 800680e:	687b      	ldr	r3, [r7, #4]
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f022 0201 	bic.w	r2, r2, #1
 8006816:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8006818:	687b      	ldr	r3, [r7, #4]
 800681a:	2220      	movs	r2, #32
 800681c:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8006820:	687b      	ldr	r3, [r7, #4]
 8006822:	2200      	movs	r2, #0
 8006824:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8006826:	687b      	ldr	r3, [r7, #4]
 8006828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800682a:	2b01      	cmp	r3, #1
 800682c:	d135      	bne.n	800689a <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800682e:	687b      	ldr	r3, [r7, #4]
 8006830:	2200      	movs	r2, #0
 8006832:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	681b      	ldr	r3, [r3, #0]
 8006838:	330c      	adds	r3, #12
 800683a:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800683c:	697b      	ldr	r3, [r7, #20]
 800683e:	e853 3f00 	ldrex	r3, [r3]
 8006842:	613b      	str	r3, [r7, #16]
   return(result);
 8006844:	693b      	ldr	r3, [r7, #16]
 8006846:	f023 0310 	bic.w	r3, r3, #16
 800684a:	627b      	str	r3, [r7, #36]	@ 0x24
 800684c:	687b      	ldr	r3, [r7, #4]
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	330c      	adds	r3, #12
 8006852:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8006854:	623a      	str	r2, [r7, #32]
 8006856:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8006858:	69f9      	ldr	r1, [r7, #28]
 800685a:	6a3a      	ldr	r2, [r7, #32]
 800685c:	e841 2300 	strex	r3, r2, [r1]
 8006860:	61bb      	str	r3, [r7, #24]
   return(result);
 8006862:	69bb      	ldr	r3, [r7, #24]
 8006864:	2b00      	cmp	r3, #0
 8006866:	d1e5      	bne.n	8006834 <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8006868:	687b      	ldr	r3, [r7, #4]
 800686a:	681b      	ldr	r3, [r3, #0]
 800686c:	681b      	ldr	r3, [r3, #0]
 800686e:	f003 0310 	and.w	r3, r3, #16
 8006872:	2b10      	cmp	r3, #16
 8006874:	d10a      	bne.n	800688c <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8006876:	2300      	movs	r3, #0
 8006878:	60fb      	str	r3, [r7, #12]
 800687a:	687b      	ldr	r3, [r7, #4]
 800687c:	681b      	ldr	r3, [r3, #0]
 800687e:	681b      	ldr	r3, [r3, #0]
 8006880:	60fb      	str	r3, [r7, #12]
 8006882:	687b      	ldr	r3, [r7, #4]
 8006884:	681b      	ldr	r3, [r3, #0]
 8006886:	685b      	ldr	r3, [r3, #4]
 8006888:	60fb      	str	r3, [r7, #12]
 800688a:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800688c:	687b      	ldr	r3, [r7, #4]
 800688e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8006890:	4619      	mov	r1, r3
 8006892:	6878      	ldr	r0, [r7, #4]
 8006894:	f7ff fdd4 	bl	8006440 <HAL_UARTEx_RxEventCallback>
 8006898:	e002      	b.n	80068a0 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 800689a:	6878      	ldr	r0, [r7, #4]
 800689c:	f7fa fbc8 	bl	8001030 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 80068a0:	2300      	movs	r3, #0
 80068a2:	e002      	b.n	80068aa <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 80068a4:	2300      	movs	r3, #0
 80068a6:	e000      	b.n	80068aa <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 80068a8:	2302      	movs	r3, #2
  }
}
 80068aa:	4618      	mov	r0, r3
 80068ac:	3730      	adds	r7, #48	@ 0x30
 80068ae:	46bd      	mov	sp, r7
 80068b0:	bd80      	pop	{r7, pc}
	...

080068b4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 80068b4:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 80068b8:	b0c0      	sub	sp, #256	@ 0x100
 80068ba:	af00      	add	r7, sp, #0
 80068bc:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80068c0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068c4:	681b      	ldr	r3, [r3, #0]
 80068c6:	691b      	ldr	r3, [r3, #16]
 80068c8:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 80068cc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d0:	68d9      	ldr	r1, [r3, #12]
 80068d2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068d6:	681a      	ldr	r2, [r3, #0]
 80068d8:	ea40 0301 	orr.w	r3, r0, r1
 80068dc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80068de:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e2:	689a      	ldr	r2, [r3, #8]
 80068e4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	431a      	orrs	r2, r3
 80068ec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068f0:	695b      	ldr	r3, [r3, #20]
 80068f2:	431a      	orrs	r2, r3
 80068f4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80068f8:	69db      	ldr	r3, [r3, #28]
 80068fa:	4313      	orrs	r3, r2
 80068fc:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8006900:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006904:	681b      	ldr	r3, [r3, #0]
 8006906:	68db      	ldr	r3, [r3, #12]
 8006908:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 800690c:	f021 010c 	bic.w	r1, r1, #12
 8006910:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006914:	681a      	ldr	r2, [r3, #0]
 8006916:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 800691a:	430b      	orrs	r3, r1
 800691c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800691e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006922:	681b      	ldr	r3, [r3, #0]
 8006924:	695b      	ldr	r3, [r3, #20]
 8006926:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 800692a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800692e:	6999      	ldr	r1, [r3, #24]
 8006930:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006934:	681a      	ldr	r2, [r3, #0]
 8006936:	ea40 0301 	orr.w	r3, r0, r1
 800693a:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800693c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006940:	681a      	ldr	r2, [r3, #0]
 8006942:	4b8f      	ldr	r3, [pc, #572]	@ (8006b80 <UART_SetConfig+0x2cc>)
 8006944:	429a      	cmp	r2, r3
 8006946:	d005      	beq.n	8006954 <UART_SetConfig+0xa0>
 8006948:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800694c:	681a      	ldr	r2, [r3, #0]
 800694e:	4b8d      	ldr	r3, [pc, #564]	@ (8006b84 <UART_SetConfig+0x2d0>)
 8006950:	429a      	cmp	r2, r3
 8006952:	d104      	bne.n	800695e <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006954:	f7ff f882 	bl	8005a5c <HAL_RCC_GetPCLK2Freq>
 8006958:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 800695c:	e003      	b.n	8006966 <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800695e:	f7ff f869 	bl	8005a34 <HAL_RCC_GetPCLK1Freq>
 8006962:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800696a:	69db      	ldr	r3, [r3, #28]
 800696c:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8006970:	f040 810c 	bne.w	8006b8c <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006974:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006978:	2200      	movs	r2, #0
 800697a:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 800697e:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8006982:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8006986:	4622      	mov	r2, r4
 8006988:	462b      	mov	r3, r5
 800698a:	1891      	adds	r1, r2, r2
 800698c:	65b9      	str	r1, [r7, #88]	@ 0x58
 800698e:	415b      	adcs	r3, r3
 8006990:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8006992:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8006996:	4621      	mov	r1, r4
 8006998:	eb12 0801 	adds.w	r8, r2, r1
 800699c:	4629      	mov	r1, r5
 800699e:	eb43 0901 	adc.w	r9, r3, r1
 80069a2:	f04f 0200 	mov.w	r2, #0
 80069a6:	f04f 0300 	mov.w	r3, #0
 80069aa:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 80069ae:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 80069b2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 80069b6:	4690      	mov	r8, r2
 80069b8:	4699      	mov	r9, r3
 80069ba:	4623      	mov	r3, r4
 80069bc:	eb18 0303 	adds.w	r3, r8, r3
 80069c0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 80069c4:	462b      	mov	r3, r5
 80069c6:	eb49 0303 	adc.w	r3, r9, r3
 80069ca:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 80069ce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80069d2:	685b      	ldr	r3, [r3, #4]
 80069d4:	2200      	movs	r2, #0
 80069d6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 80069da:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 80069de:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 80069e2:	460b      	mov	r3, r1
 80069e4:	18db      	adds	r3, r3, r3
 80069e6:	653b      	str	r3, [r7, #80]	@ 0x50
 80069e8:	4613      	mov	r3, r2
 80069ea:	eb42 0303 	adc.w	r3, r2, r3
 80069ee:	657b      	str	r3, [r7, #84]	@ 0x54
 80069f0:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 80069f4:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 80069f8:	f7fa f94e 	bl	8000c98 <__aeabi_uldivmod>
 80069fc:	4602      	mov	r2, r0
 80069fe:	460b      	mov	r3, r1
 8006a00:	4b61      	ldr	r3, [pc, #388]	@ (8006b88 <UART_SetConfig+0x2d4>)
 8006a02:	fba3 2302 	umull	r2, r3, r3, r2
 8006a06:	095b      	lsrs	r3, r3, #5
 8006a08:	011c      	lsls	r4, r3, #4
 8006a0a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006a0e:	2200      	movs	r2, #0
 8006a10:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006a14:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8006a18:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006a1c:	4642      	mov	r2, r8
 8006a1e:	464b      	mov	r3, r9
 8006a20:	1891      	adds	r1, r2, r2
 8006a22:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006a24:	415b      	adcs	r3, r3
 8006a26:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8006a28:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006a2c:	4641      	mov	r1, r8
 8006a2e:	eb12 0a01 	adds.w	sl, r2, r1
 8006a32:	4649      	mov	r1, r9
 8006a34:	eb43 0b01 	adc.w	fp, r3, r1
 8006a38:	f04f 0200 	mov.w	r2, #0
 8006a3c:	f04f 0300 	mov.w	r3, #0
 8006a40:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006a44:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8006a48:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006a4c:	4692      	mov	sl, r2
 8006a4e:	469b      	mov	fp, r3
 8006a50:	4643      	mov	r3, r8
 8006a52:	eb1a 0303 	adds.w	r3, sl, r3
 8006a56:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8006a5a:	464b      	mov	r3, r9
 8006a5c:	eb4b 0303 	adc.w	r3, fp, r3
 8006a60:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006a64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006a68:	685b      	ldr	r3, [r3, #4]
 8006a6a:	2200      	movs	r2, #0
 8006a6c:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006a70:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006a74:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8006a78:	460b      	mov	r3, r1
 8006a7a:	18db      	adds	r3, r3, r3
 8006a7c:	643b      	str	r3, [r7, #64]	@ 0x40
 8006a7e:	4613      	mov	r3, r2
 8006a80:	eb42 0303 	adc.w	r3, r2, r3
 8006a84:	647b      	str	r3, [r7, #68]	@ 0x44
 8006a86:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8006a8a:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8006a8e:	f7fa f903 	bl	8000c98 <__aeabi_uldivmod>
 8006a92:	4602      	mov	r2, r0
 8006a94:	460b      	mov	r3, r1
 8006a96:	4611      	mov	r1, r2
 8006a98:	4b3b      	ldr	r3, [pc, #236]	@ (8006b88 <UART_SetConfig+0x2d4>)
 8006a9a:	fba3 2301 	umull	r2, r3, r3, r1
 8006a9e:	095b      	lsrs	r3, r3, #5
 8006aa0:	2264      	movs	r2, #100	@ 0x64
 8006aa2:	fb02 f303 	mul.w	r3, r2, r3
 8006aa6:	1acb      	subs	r3, r1, r3
 8006aa8:	00db      	lsls	r3, r3, #3
 8006aaa:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8006aae:	4b36      	ldr	r3, [pc, #216]	@ (8006b88 <UART_SetConfig+0x2d4>)
 8006ab0:	fba3 2302 	umull	r2, r3, r3, r2
 8006ab4:	095b      	lsrs	r3, r3, #5
 8006ab6:	005b      	lsls	r3, r3, #1
 8006ab8:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8006abc:	441c      	add	r4, r3
 8006abe:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006ac2:	2200      	movs	r2, #0
 8006ac4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8006ac8:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8006acc:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8006ad0:	4642      	mov	r2, r8
 8006ad2:	464b      	mov	r3, r9
 8006ad4:	1891      	adds	r1, r2, r2
 8006ad6:	63b9      	str	r1, [r7, #56]	@ 0x38
 8006ad8:	415b      	adcs	r3, r3
 8006ada:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8006adc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8006ae0:	4641      	mov	r1, r8
 8006ae2:	1851      	adds	r1, r2, r1
 8006ae4:	6339      	str	r1, [r7, #48]	@ 0x30
 8006ae6:	4649      	mov	r1, r9
 8006ae8:	414b      	adcs	r3, r1
 8006aea:	637b      	str	r3, [r7, #52]	@ 0x34
 8006aec:	f04f 0200 	mov.w	r2, #0
 8006af0:	f04f 0300 	mov.w	r3, #0
 8006af4:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8006af8:	4659      	mov	r1, fp
 8006afa:	00cb      	lsls	r3, r1, #3
 8006afc:	4651      	mov	r1, sl
 8006afe:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006b02:	4651      	mov	r1, sl
 8006b04:	00ca      	lsls	r2, r1, #3
 8006b06:	4610      	mov	r0, r2
 8006b08:	4619      	mov	r1, r3
 8006b0a:	4603      	mov	r3, r0
 8006b0c:	4642      	mov	r2, r8
 8006b0e:	189b      	adds	r3, r3, r2
 8006b10:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006b14:	464b      	mov	r3, r9
 8006b16:	460a      	mov	r2, r1
 8006b18:	eb42 0303 	adc.w	r3, r2, r3
 8006b1c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006b20:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b24:	685b      	ldr	r3, [r3, #4]
 8006b26:	2200      	movs	r2, #0
 8006b28:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006b2c:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006b30:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006b34:	460b      	mov	r3, r1
 8006b36:	18db      	adds	r3, r3, r3
 8006b38:	62bb      	str	r3, [r7, #40]	@ 0x28
 8006b3a:	4613      	mov	r3, r2
 8006b3c:	eb42 0303 	adc.w	r3, r2, r3
 8006b40:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006b42:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8006b46:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8006b4a:	f7fa f8a5 	bl	8000c98 <__aeabi_uldivmod>
 8006b4e:	4602      	mov	r2, r0
 8006b50:	460b      	mov	r3, r1
 8006b52:	4b0d      	ldr	r3, [pc, #52]	@ (8006b88 <UART_SetConfig+0x2d4>)
 8006b54:	fba3 1302 	umull	r1, r3, r3, r2
 8006b58:	095b      	lsrs	r3, r3, #5
 8006b5a:	2164      	movs	r1, #100	@ 0x64
 8006b5c:	fb01 f303 	mul.w	r3, r1, r3
 8006b60:	1ad3      	subs	r3, r2, r3
 8006b62:	00db      	lsls	r3, r3, #3
 8006b64:	3332      	adds	r3, #50	@ 0x32
 8006b66:	4a08      	ldr	r2, [pc, #32]	@ (8006b88 <UART_SetConfig+0x2d4>)
 8006b68:	fba2 2303 	umull	r2, r3, r2, r3
 8006b6c:	095b      	lsrs	r3, r3, #5
 8006b6e:	f003 0207 	and.w	r2, r3, #7
 8006b72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006b76:	681b      	ldr	r3, [r3, #0]
 8006b78:	4422      	add	r2, r4
 8006b7a:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006b7c:	e106      	b.n	8006d8c <UART_SetConfig+0x4d8>
 8006b7e:	bf00      	nop
 8006b80:	40011000 	.word	0x40011000
 8006b84:	40011400 	.word	0x40011400
 8006b88:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006b8c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006b90:	2200      	movs	r2, #0
 8006b92:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8006b96:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8006b9a:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8006b9e:	4642      	mov	r2, r8
 8006ba0:	464b      	mov	r3, r9
 8006ba2:	1891      	adds	r1, r2, r2
 8006ba4:	6239      	str	r1, [r7, #32]
 8006ba6:	415b      	adcs	r3, r3
 8006ba8:	627b      	str	r3, [r7, #36]	@ 0x24
 8006baa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006bae:	4641      	mov	r1, r8
 8006bb0:	1854      	adds	r4, r2, r1
 8006bb2:	4649      	mov	r1, r9
 8006bb4:	eb43 0501 	adc.w	r5, r3, r1
 8006bb8:	f04f 0200 	mov.w	r2, #0
 8006bbc:	f04f 0300 	mov.w	r3, #0
 8006bc0:	00eb      	lsls	r3, r5, #3
 8006bc2:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8006bc6:	00e2      	lsls	r2, r4, #3
 8006bc8:	4614      	mov	r4, r2
 8006bca:	461d      	mov	r5, r3
 8006bcc:	4643      	mov	r3, r8
 8006bce:	18e3      	adds	r3, r4, r3
 8006bd0:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8006bd4:	464b      	mov	r3, r9
 8006bd6:	eb45 0303 	adc.w	r3, r5, r3
 8006bda:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8006bde:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006be2:	685b      	ldr	r3, [r3, #4]
 8006be4:	2200      	movs	r2, #0
 8006be6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8006bea:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006bee:	f04f 0200 	mov.w	r2, #0
 8006bf2:	f04f 0300 	mov.w	r3, #0
 8006bf6:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8006bfa:	4629      	mov	r1, r5
 8006bfc:	008b      	lsls	r3, r1, #2
 8006bfe:	4621      	mov	r1, r4
 8006c00:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006c04:	4621      	mov	r1, r4
 8006c06:	008a      	lsls	r2, r1, #2
 8006c08:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006c0c:	f7fa f844 	bl	8000c98 <__aeabi_uldivmod>
 8006c10:	4602      	mov	r2, r0
 8006c12:	460b      	mov	r3, r1
 8006c14:	4b60      	ldr	r3, [pc, #384]	@ (8006d98 <UART_SetConfig+0x4e4>)
 8006c16:	fba3 2302 	umull	r2, r3, r3, r2
 8006c1a:	095b      	lsrs	r3, r3, #5
 8006c1c:	011c      	lsls	r4, r3, #4
 8006c1e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006c22:	2200      	movs	r2, #0
 8006c24:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8006c28:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006c2c:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006c30:	4642      	mov	r2, r8
 8006c32:	464b      	mov	r3, r9
 8006c34:	1891      	adds	r1, r2, r2
 8006c36:	61b9      	str	r1, [r7, #24]
 8006c38:	415b      	adcs	r3, r3
 8006c3a:	61fb      	str	r3, [r7, #28]
 8006c3c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006c40:	4641      	mov	r1, r8
 8006c42:	1851      	adds	r1, r2, r1
 8006c44:	6139      	str	r1, [r7, #16]
 8006c46:	4649      	mov	r1, r9
 8006c48:	414b      	adcs	r3, r1
 8006c4a:	617b      	str	r3, [r7, #20]
 8006c4c:	f04f 0200 	mov.w	r2, #0
 8006c50:	f04f 0300 	mov.w	r3, #0
 8006c54:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8006c58:	4659      	mov	r1, fp
 8006c5a:	00cb      	lsls	r3, r1, #3
 8006c5c:	4651      	mov	r1, sl
 8006c5e:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006c62:	4651      	mov	r1, sl
 8006c64:	00ca      	lsls	r2, r1, #3
 8006c66:	4610      	mov	r0, r2
 8006c68:	4619      	mov	r1, r3
 8006c6a:	4603      	mov	r3, r0
 8006c6c:	4642      	mov	r2, r8
 8006c6e:	189b      	adds	r3, r3, r2
 8006c70:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006c74:	464b      	mov	r3, r9
 8006c76:	460a      	mov	r2, r1
 8006c78:	eb42 0303 	adc.w	r3, r2, r3
 8006c7c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006c80:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006c84:	685b      	ldr	r3, [r3, #4]
 8006c86:	2200      	movs	r2, #0
 8006c88:	67bb      	str	r3, [r7, #120]	@ 0x78
 8006c8a:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006c8c:	f04f 0200 	mov.w	r2, #0
 8006c90:	f04f 0300 	mov.w	r3, #0
 8006c94:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8006c98:	4649      	mov	r1, r9
 8006c9a:	008b      	lsls	r3, r1, #2
 8006c9c:	4641      	mov	r1, r8
 8006c9e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006ca2:	4641      	mov	r1, r8
 8006ca4:	008a      	lsls	r2, r1, #2
 8006ca6:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8006caa:	f7f9 fff5 	bl	8000c98 <__aeabi_uldivmod>
 8006cae:	4602      	mov	r2, r0
 8006cb0:	460b      	mov	r3, r1
 8006cb2:	4611      	mov	r1, r2
 8006cb4:	4b38      	ldr	r3, [pc, #224]	@ (8006d98 <UART_SetConfig+0x4e4>)
 8006cb6:	fba3 2301 	umull	r2, r3, r3, r1
 8006cba:	095b      	lsrs	r3, r3, #5
 8006cbc:	2264      	movs	r2, #100	@ 0x64
 8006cbe:	fb02 f303 	mul.w	r3, r2, r3
 8006cc2:	1acb      	subs	r3, r1, r3
 8006cc4:	011b      	lsls	r3, r3, #4
 8006cc6:	3332      	adds	r3, #50	@ 0x32
 8006cc8:	4a33      	ldr	r2, [pc, #204]	@ (8006d98 <UART_SetConfig+0x4e4>)
 8006cca:	fba2 2303 	umull	r2, r3, r2, r3
 8006cce:	095b      	lsrs	r3, r3, #5
 8006cd0:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006cd4:	441c      	add	r4, r3
 8006cd6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006cda:	2200      	movs	r2, #0
 8006cdc:	673b      	str	r3, [r7, #112]	@ 0x70
 8006cde:	677a      	str	r2, [r7, #116]	@ 0x74
 8006ce0:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006ce4:	4642      	mov	r2, r8
 8006ce6:	464b      	mov	r3, r9
 8006ce8:	1891      	adds	r1, r2, r2
 8006cea:	60b9      	str	r1, [r7, #8]
 8006cec:	415b      	adcs	r3, r3
 8006cee:	60fb      	str	r3, [r7, #12]
 8006cf0:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cf4:	4641      	mov	r1, r8
 8006cf6:	1851      	adds	r1, r2, r1
 8006cf8:	6039      	str	r1, [r7, #0]
 8006cfa:	4649      	mov	r1, r9
 8006cfc:	414b      	adcs	r3, r1
 8006cfe:	607b      	str	r3, [r7, #4]
 8006d00:	f04f 0200 	mov.w	r2, #0
 8006d04:	f04f 0300 	mov.w	r3, #0
 8006d08:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006d0c:	4659      	mov	r1, fp
 8006d0e:	00cb      	lsls	r3, r1, #3
 8006d10:	4651      	mov	r1, sl
 8006d12:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006d16:	4651      	mov	r1, sl
 8006d18:	00ca      	lsls	r2, r1, #3
 8006d1a:	4610      	mov	r0, r2
 8006d1c:	4619      	mov	r1, r3
 8006d1e:	4603      	mov	r3, r0
 8006d20:	4642      	mov	r2, r8
 8006d22:	189b      	adds	r3, r3, r2
 8006d24:	66bb      	str	r3, [r7, #104]	@ 0x68
 8006d26:	464b      	mov	r3, r9
 8006d28:	460a      	mov	r2, r1
 8006d2a:	eb42 0303 	adc.w	r3, r2, r3
 8006d2e:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006d30:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d34:	685b      	ldr	r3, [r3, #4]
 8006d36:	2200      	movs	r2, #0
 8006d38:	663b      	str	r3, [r7, #96]	@ 0x60
 8006d3a:	667a      	str	r2, [r7, #100]	@ 0x64
 8006d3c:	f04f 0200 	mov.w	r2, #0
 8006d40:	f04f 0300 	mov.w	r3, #0
 8006d44:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8006d48:	4649      	mov	r1, r9
 8006d4a:	008b      	lsls	r3, r1, #2
 8006d4c:	4641      	mov	r1, r8
 8006d4e:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006d52:	4641      	mov	r1, r8
 8006d54:	008a      	lsls	r2, r1, #2
 8006d56:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8006d5a:	f7f9 ff9d 	bl	8000c98 <__aeabi_uldivmod>
 8006d5e:	4602      	mov	r2, r0
 8006d60:	460b      	mov	r3, r1
 8006d62:	4b0d      	ldr	r3, [pc, #52]	@ (8006d98 <UART_SetConfig+0x4e4>)
 8006d64:	fba3 1302 	umull	r1, r3, r3, r2
 8006d68:	095b      	lsrs	r3, r3, #5
 8006d6a:	2164      	movs	r1, #100	@ 0x64
 8006d6c:	fb01 f303 	mul.w	r3, r1, r3
 8006d70:	1ad3      	subs	r3, r2, r3
 8006d72:	011b      	lsls	r3, r3, #4
 8006d74:	3332      	adds	r3, #50	@ 0x32
 8006d76:	4a08      	ldr	r2, [pc, #32]	@ (8006d98 <UART_SetConfig+0x4e4>)
 8006d78:	fba2 2303 	umull	r2, r3, r2, r3
 8006d7c:	095b      	lsrs	r3, r3, #5
 8006d7e:	f003 020f 	and.w	r2, r3, #15
 8006d82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	4422      	add	r2, r4
 8006d8a:	609a      	str	r2, [r3, #8]
}
 8006d8c:	bf00      	nop
 8006d8e:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006d92:	46bd      	mov	sp, r7
 8006d94:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8006d98:	51eb851f 	.word	0x51eb851f

08006d9c <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 8006d9c:	b580      	push	{r7, lr}
 8006d9e:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 8006da0:	4904      	ldr	r1, [pc, #16]	@ (8006db4 <MX_FATFS_Init+0x18>)
 8006da2:	4805      	ldr	r0, [pc, #20]	@ (8006db8 <MX_FATFS_Init+0x1c>)
 8006da4:	f000 f8b0 	bl	8006f08 <FATFS_LinkDriver>
 8006da8:	4603      	mov	r3, r0
 8006daa:	461a      	mov	r2, r3
 8006dac:	4b03      	ldr	r3, [pc, #12]	@ (8006dbc <MX_FATFS_Init+0x20>)
 8006dae:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 8006db0:	bf00      	nop
 8006db2:	bd80      	pop	{r7, pc}
 8006db4:	200007e8 	.word	0x200007e8
 8006db8:	20000014 	.word	0x20000014
 8006dbc:	200007e4 	.word	0x200007e4

08006dc0 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 8006dc0:	b480      	push	{r7}
 8006dc2:	b083      	sub	sp, #12
 8006dc4:	af00      	add	r7, sp, #0
 8006dc6:	4603      	mov	r3, r0
 8006dc8:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 8006dca:	4b06      	ldr	r3, [pc, #24]	@ (8006de4 <USER_initialize+0x24>)
 8006dcc:	2201      	movs	r2, #1
 8006dce:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006dd0:	4b04      	ldr	r3, [pc, #16]	@ (8006de4 <USER_initialize+0x24>)
 8006dd2:	781b      	ldrb	r3, [r3, #0]
 8006dd4:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 8006dd6:	4618      	mov	r0, r3
 8006dd8:	370c      	adds	r7, #12
 8006dda:	46bd      	mov	sp, r7
 8006ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006de0:	4770      	bx	lr
 8006de2:	bf00      	nop
 8006de4:	20000011 	.word	0x20000011

08006de8 <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 8006de8:	b480      	push	{r7}
 8006dea:	b083      	sub	sp, #12
 8006dec:	af00      	add	r7, sp, #0
 8006dee:	4603      	mov	r3, r0
 8006df0:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006df2:	4b06      	ldr	r3, [pc, #24]	@ (8006e0c <USER_status+0x24>)
 8006df4:	2201      	movs	r2, #1
 8006df6:	701a      	strb	r2, [r3, #0]
    return Stat;
 8006df8:	4b04      	ldr	r3, [pc, #16]	@ (8006e0c <USER_status+0x24>)
 8006dfa:	781b      	ldrb	r3, [r3, #0]
 8006dfc:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006dfe:	4618      	mov	r0, r3
 8006e00:	370c      	adds	r7, #12
 8006e02:	46bd      	mov	sp, r7
 8006e04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e08:	4770      	bx	lr
 8006e0a:	bf00      	nop
 8006e0c:	20000011 	.word	0x20000011

08006e10 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006e10:	b480      	push	{r7}
 8006e12:	b085      	sub	sp, #20
 8006e14:	af00      	add	r7, sp, #0
 8006e16:	60b9      	str	r1, [r7, #8]
 8006e18:	607a      	str	r2, [r7, #4]
 8006e1a:	603b      	str	r3, [r7, #0]
 8006e1c:	4603      	mov	r3, r0
 8006e1e:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006e20:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8006e22:	4618      	mov	r0, r3
 8006e24:	3714      	adds	r7, #20
 8006e26:	46bd      	mov	sp, r7
 8006e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e2c:	4770      	bx	lr

08006e2e <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006e2e:	b480      	push	{r7}
 8006e30:	b085      	sub	sp, #20
 8006e32:	af00      	add	r7, sp, #0
 8006e34:	60b9      	str	r1, [r7, #8]
 8006e36:	607a      	str	r2, [r7, #4]
 8006e38:	603b      	str	r3, [r7, #0]
 8006e3a:	4603      	mov	r3, r0
 8006e3c:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8006e3e:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8006e40:	4618      	mov	r0, r3
 8006e42:	3714      	adds	r7, #20
 8006e44:	46bd      	mov	sp, r7
 8006e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e4a:	4770      	bx	lr

08006e4c <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006e4c:	b480      	push	{r7}
 8006e4e:	b085      	sub	sp, #20
 8006e50:	af00      	add	r7, sp, #0
 8006e52:	4603      	mov	r3, r0
 8006e54:	603a      	str	r2, [r7, #0]
 8006e56:	71fb      	strb	r3, [r7, #7]
 8006e58:	460b      	mov	r3, r1
 8006e5a:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006e5c:	2301      	movs	r3, #1
 8006e5e:	73fb      	strb	r3, [r7, #15]
    return res;
 8006e60:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8006e62:	4618      	mov	r0, r3
 8006e64:	3714      	adds	r7, #20
 8006e66:	46bd      	mov	sp, r7
 8006e68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006e6c:	4770      	bx	lr
	...

08006e70 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006e70:	b480      	push	{r7}
 8006e72:	b087      	sub	sp, #28
 8006e74:	af00      	add	r7, sp, #0
 8006e76:	60f8      	str	r0, [r7, #12]
 8006e78:	60b9      	str	r1, [r7, #8]
 8006e7a:	4613      	mov	r3, r2
 8006e7c:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006e7e:	2301      	movs	r3, #1
 8006e80:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006e82:	2300      	movs	r3, #0
 8006e84:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 8006e86:	4b1f      	ldr	r3, [pc, #124]	@ (8006f04 <FATFS_LinkDriverEx+0x94>)
 8006e88:	7a5b      	ldrb	r3, [r3, #9]
 8006e8a:	b2db      	uxtb	r3, r3
 8006e8c:	2b00      	cmp	r3, #0
 8006e8e:	d131      	bne.n	8006ef4 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 8006e90:	4b1c      	ldr	r3, [pc, #112]	@ (8006f04 <FATFS_LinkDriverEx+0x94>)
 8006e92:	7a5b      	ldrb	r3, [r3, #9]
 8006e94:	b2db      	uxtb	r3, r3
 8006e96:	461a      	mov	r2, r3
 8006e98:	4b1a      	ldr	r3, [pc, #104]	@ (8006f04 <FATFS_LinkDriverEx+0x94>)
 8006e9a:	2100      	movs	r1, #0
 8006e9c:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 8006e9e:	4b19      	ldr	r3, [pc, #100]	@ (8006f04 <FATFS_LinkDriverEx+0x94>)
 8006ea0:	7a5b      	ldrb	r3, [r3, #9]
 8006ea2:	b2db      	uxtb	r3, r3
 8006ea4:	4a17      	ldr	r2, [pc, #92]	@ (8006f04 <FATFS_LinkDriverEx+0x94>)
 8006ea6:	009b      	lsls	r3, r3, #2
 8006ea8:	4413      	add	r3, r2
 8006eaa:	68fa      	ldr	r2, [r7, #12]
 8006eac:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 8006eae:	4b15      	ldr	r3, [pc, #84]	@ (8006f04 <FATFS_LinkDriverEx+0x94>)
 8006eb0:	7a5b      	ldrb	r3, [r3, #9]
 8006eb2:	b2db      	uxtb	r3, r3
 8006eb4:	461a      	mov	r2, r3
 8006eb6:	4b13      	ldr	r3, [pc, #76]	@ (8006f04 <FATFS_LinkDriverEx+0x94>)
 8006eb8:	4413      	add	r3, r2
 8006eba:	79fa      	ldrb	r2, [r7, #7]
 8006ebc:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 8006ebe:	4b11      	ldr	r3, [pc, #68]	@ (8006f04 <FATFS_LinkDriverEx+0x94>)
 8006ec0:	7a5b      	ldrb	r3, [r3, #9]
 8006ec2:	b2db      	uxtb	r3, r3
 8006ec4:	1c5a      	adds	r2, r3, #1
 8006ec6:	b2d1      	uxtb	r1, r2
 8006ec8:	4a0e      	ldr	r2, [pc, #56]	@ (8006f04 <FATFS_LinkDriverEx+0x94>)
 8006eca:	7251      	strb	r1, [r2, #9]
 8006ecc:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 8006ece:	7dbb      	ldrb	r3, [r7, #22]
 8006ed0:	3330      	adds	r3, #48	@ 0x30
 8006ed2:	b2da      	uxtb	r2, r3
 8006ed4:	68bb      	ldr	r3, [r7, #8]
 8006ed6:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 8006ed8:	68bb      	ldr	r3, [r7, #8]
 8006eda:	3301      	adds	r3, #1
 8006edc:	223a      	movs	r2, #58	@ 0x3a
 8006ede:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 8006ee0:	68bb      	ldr	r3, [r7, #8]
 8006ee2:	3302      	adds	r3, #2
 8006ee4:	222f      	movs	r2, #47	@ 0x2f
 8006ee6:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 8006ee8:	68bb      	ldr	r3, [r7, #8]
 8006eea:	3303      	adds	r3, #3
 8006eec:	2200      	movs	r2, #0
 8006eee:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006ef0:	2300      	movs	r3, #0
 8006ef2:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006ef4:	7dfb      	ldrb	r3, [r7, #23]
}
 8006ef6:	4618      	mov	r0, r3
 8006ef8:	371c      	adds	r7, #28
 8006efa:	46bd      	mov	sp, r7
 8006efc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f00:	4770      	bx	lr
 8006f02:	bf00      	nop
 8006f04:	200007ec 	.word	0x200007ec

08006f08 <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 8006f08:	b580      	push	{r7, lr}
 8006f0a:	b082      	sub	sp, #8
 8006f0c:	af00      	add	r7, sp, #0
 8006f0e:	6078      	str	r0, [r7, #4]
 8006f10:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006f12:	2200      	movs	r2, #0
 8006f14:	6839      	ldr	r1, [r7, #0]
 8006f16:	6878      	ldr	r0, [r7, #4]
 8006f18:	f7ff ffaa 	bl	8006e70 <FATFS_LinkDriverEx>
 8006f1c:	4603      	mov	r3, r0
}
 8006f1e:	4618      	mov	r0, r3
 8006f20:	3708      	adds	r7, #8
 8006f22:	46bd      	mov	sp, r7
 8006f24:	bd80      	pop	{r7, pc}

08006f26 <__cvt>:
 8006f26:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006f2a:	ec57 6b10 	vmov	r6, r7, d0
 8006f2e:	2f00      	cmp	r7, #0
 8006f30:	460c      	mov	r4, r1
 8006f32:	4619      	mov	r1, r3
 8006f34:	463b      	mov	r3, r7
 8006f36:	bfbb      	ittet	lt
 8006f38:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006f3c:	461f      	movlt	r7, r3
 8006f3e:	2300      	movge	r3, #0
 8006f40:	232d      	movlt	r3, #45	@ 0x2d
 8006f42:	700b      	strb	r3, [r1, #0]
 8006f44:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006f46:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006f4a:	4691      	mov	r9, r2
 8006f4c:	f023 0820 	bic.w	r8, r3, #32
 8006f50:	bfbc      	itt	lt
 8006f52:	4632      	movlt	r2, r6
 8006f54:	4616      	movlt	r6, r2
 8006f56:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006f5a:	d005      	beq.n	8006f68 <__cvt+0x42>
 8006f5c:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006f60:	d100      	bne.n	8006f64 <__cvt+0x3e>
 8006f62:	3401      	adds	r4, #1
 8006f64:	2102      	movs	r1, #2
 8006f66:	e000      	b.n	8006f6a <__cvt+0x44>
 8006f68:	2103      	movs	r1, #3
 8006f6a:	ab03      	add	r3, sp, #12
 8006f6c:	9301      	str	r3, [sp, #4]
 8006f6e:	ab02      	add	r3, sp, #8
 8006f70:	9300      	str	r3, [sp, #0]
 8006f72:	ec47 6b10 	vmov	d0, r6, r7
 8006f76:	4653      	mov	r3, sl
 8006f78:	4622      	mov	r2, r4
 8006f7a:	f001 f99d 	bl	80082b8 <_dtoa_r>
 8006f7e:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006f82:	4605      	mov	r5, r0
 8006f84:	d119      	bne.n	8006fba <__cvt+0x94>
 8006f86:	f019 0f01 	tst.w	r9, #1
 8006f8a:	d00e      	beq.n	8006faa <__cvt+0x84>
 8006f8c:	eb00 0904 	add.w	r9, r0, r4
 8006f90:	2200      	movs	r2, #0
 8006f92:	2300      	movs	r3, #0
 8006f94:	4630      	mov	r0, r6
 8006f96:	4639      	mov	r1, r7
 8006f98:	f7f9 fd9e 	bl	8000ad8 <__aeabi_dcmpeq>
 8006f9c:	b108      	cbz	r0, 8006fa2 <__cvt+0x7c>
 8006f9e:	f8cd 900c 	str.w	r9, [sp, #12]
 8006fa2:	2230      	movs	r2, #48	@ 0x30
 8006fa4:	9b03      	ldr	r3, [sp, #12]
 8006fa6:	454b      	cmp	r3, r9
 8006fa8:	d31e      	bcc.n	8006fe8 <__cvt+0xc2>
 8006faa:	9b03      	ldr	r3, [sp, #12]
 8006fac:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 8006fae:	1b5b      	subs	r3, r3, r5
 8006fb0:	4628      	mov	r0, r5
 8006fb2:	6013      	str	r3, [r2, #0]
 8006fb4:	b004      	add	sp, #16
 8006fb6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006fba:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006fbe:	eb00 0904 	add.w	r9, r0, r4
 8006fc2:	d1e5      	bne.n	8006f90 <__cvt+0x6a>
 8006fc4:	7803      	ldrb	r3, [r0, #0]
 8006fc6:	2b30      	cmp	r3, #48	@ 0x30
 8006fc8:	d10a      	bne.n	8006fe0 <__cvt+0xba>
 8006fca:	2200      	movs	r2, #0
 8006fcc:	2300      	movs	r3, #0
 8006fce:	4630      	mov	r0, r6
 8006fd0:	4639      	mov	r1, r7
 8006fd2:	f7f9 fd81 	bl	8000ad8 <__aeabi_dcmpeq>
 8006fd6:	b918      	cbnz	r0, 8006fe0 <__cvt+0xba>
 8006fd8:	f1c4 0401 	rsb	r4, r4, #1
 8006fdc:	f8ca 4000 	str.w	r4, [sl]
 8006fe0:	f8da 3000 	ldr.w	r3, [sl]
 8006fe4:	4499      	add	r9, r3
 8006fe6:	e7d3      	b.n	8006f90 <__cvt+0x6a>
 8006fe8:	1c59      	adds	r1, r3, #1
 8006fea:	9103      	str	r1, [sp, #12]
 8006fec:	701a      	strb	r2, [r3, #0]
 8006fee:	e7d9      	b.n	8006fa4 <__cvt+0x7e>

08006ff0 <__exponent>:
 8006ff0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006ff2:	2900      	cmp	r1, #0
 8006ff4:	bfba      	itte	lt
 8006ff6:	4249      	neglt	r1, r1
 8006ff8:	232d      	movlt	r3, #45	@ 0x2d
 8006ffa:	232b      	movge	r3, #43	@ 0x2b
 8006ffc:	2909      	cmp	r1, #9
 8006ffe:	7002      	strb	r2, [r0, #0]
 8007000:	7043      	strb	r3, [r0, #1]
 8007002:	dd29      	ble.n	8007058 <__exponent+0x68>
 8007004:	f10d 0307 	add.w	r3, sp, #7
 8007008:	461d      	mov	r5, r3
 800700a:	270a      	movs	r7, #10
 800700c:	461a      	mov	r2, r3
 800700e:	fbb1 f6f7 	udiv	r6, r1, r7
 8007012:	fb07 1416 	mls	r4, r7, r6, r1
 8007016:	3430      	adds	r4, #48	@ 0x30
 8007018:	f802 4c01 	strb.w	r4, [r2, #-1]
 800701c:	460c      	mov	r4, r1
 800701e:	2c63      	cmp	r4, #99	@ 0x63
 8007020:	f103 33ff 	add.w	r3, r3, #4294967295
 8007024:	4631      	mov	r1, r6
 8007026:	dcf1      	bgt.n	800700c <__exponent+0x1c>
 8007028:	3130      	adds	r1, #48	@ 0x30
 800702a:	1e94      	subs	r4, r2, #2
 800702c:	f803 1c01 	strb.w	r1, [r3, #-1]
 8007030:	1c41      	adds	r1, r0, #1
 8007032:	4623      	mov	r3, r4
 8007034:	42ab      	cmp	r3, r5
 8007036:	d30a      	bcc.n	800704e <__exponent+0x5e>
 8007038:	f10d 0309 	add.w	r3, sp, #9
 800703c:	1a9b      	subs	r3, r3, r2
 800703e:	42ac      	cmp	r4, r5
 8007040:	bf88      	it	hi
 8007042:	2300      	movhi	r3, #0
 8007044:	3302      	adds	r3, #2
 8007046:	4403      	add	r3, r0
 8007048:	1a18      	subs	r0, r3, r0
 800704a:	b003      	add	sp, #12
 800704c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800704e:	f813 6b01 	ldrb.w	r6, [r3], #1
 8007052:	f801 6f01 	strb.w	r6, [r1, #1]!
 8007056:	e7ed      	b.n	8007034 <__exponent+0x44>
 8007058:	2330      	movs	r3, #48	@ 0x30
 800705a:	3130      	adds	r1, #48	@ 0x30
 800705c:	7083      	strb	r3, [r0, #2]
 800705e:	70c1      	strb	r1, [r0, #3]
 8007060:	1d03      	adds	r3, r0, #4
 8007062:	e7f1      	b.n	8007048 <__exponent+0x58>

08007064 <_printf_float>:
 8007064:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007068:	b08d      	sub	sp, #52	@ 0x34
 800706a:	460c      	mov	r4, r1
 800706c:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8007070:	4616      	mov	r6, r2
 8007072:	461f      	mov	r7, r3
 8007074:	4605      	mov	r5, r0
 8007076:	f001 f80b 	bl	8008090 <_localeconv_r>
 800707a:	6803      	ldr	r3, [r0, #0]
 800707c:	9304      	str	r3, [sp, #16]
 800707e:	4618      	mov	r0, r3
 8007080:	f7f9 f8fe 	bl	8000280 <strlen>
 8007084:	2300      	movs	r3, #0
 8007086:	930a      	str	r3, [sp, #40]	@ 0x28
 8007088:	f8d8 3000 	ldr.w	r3, [r8]
 800708c:	9005      	str	r0, [sp, #20]
 800708e:	3307      	adds	r3, #7
 8007090:	f023 0307 	bic.w	r3, r3, #7
 8007094:	f103 0208 	add.w	r2, r3, #8
 8007098:	f894 a018 	ldrb.w	sl, [r4, #24]
 800709c:	f8d4 b000 	ldr.w	fp, [r4]
 80070a0:	f8c8 2000 	str.w	r2, [r8]
 80070a4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80070a8:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80070ac:	9307      	str	r3, [sp, #28]
 80070ae:	f8cd 8018 	str.w	r8, [sp, #24]
 80070b2:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80070b6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070ba:	4b9c      	ldr	r3, [pc, #624]	@ (800732c <_printf_float+0x2c8>)
 80070bc:	f04f 32ff 	mov.w	r2, #4294967295
 80070c0:	f7f9 fd3c 	bl	8000b3c <__aeabi_dcmpun>
 80070c4:	bb70      	cbnz	r0, 8007124 <_printf_float+0xc0>
 80070c6:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80070ca:	4b98      	ldr	r3, [pc, #608]	@ (800732c <_printf_float+0x2c8>)
 80070cc:	f04f 32ff 	mov.w	r2, #4294967295
 80070d0:	f7f9 fd16 	bl	8000b00 <__aeabi_dcmple>
 80070d4:	bb30      	cbnz	r0, 8007124 <_printf_float+0xc0>
 80070d6:	2200      	movs	r2, #0
 80070d8:	2300      	movs	r3, #0
 80070da:	4640      	mov	r0, r8
 80070dc:	4649      	mov	r1, r9
 80070de:	f7f9 fd05 	bl	8000aec <__aeabi_dcmplt>
 80070e2:	b110      	cbz	r0, 80070ea <_printf_float+0x86>
 80070e4:	232d      	movs	r3, #45	@ 0x2d
 80070e6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80070ea:	4a91      	ldr	r2, [pc, #580]	@ (8007330 <_printf_float+0x2cc>)
 80070ec:	4b91      	ldr	r3, [pc, #580]	@ (8007334 <_printf_float+0x2d0>)
 80070ee:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 80070f2:	bf8c      	ite	hi
 80070f4:	4690      	movhi	r8, r2
 80070f6:	4698      	movls	r8, r3
 80070f8:	2303      	movs	r3, #3
 80070fa:	6123      	str	r3, [r4, #16]
 80070fc:	f02b 0304 	bic.w	r3, fp, #4
 8007100:	6023      	str	r3, [r4, #0]
 8007102:	f04f 0900 	mov.w	r9, #0
 8007106:	9700      	str	r7, [sp, #0]
 8007108:	4633      	mov	r3, r6
 800710a:	aa0b      	add	r2, sp, #44	@ 0x2c
 800710c:	4621      	mov	r1, r4
 800710e:	4628      	mov	r0, r5
 8007110:	f000 f9d2 	bl	80074b8 <_printf_common>
 8007114:	3001      	adds	r0, #1
 8007116:	f040 808d 	bne.w	8007234 <_printf_float+0x1d0>
 800711a:	f04f 30ff 	mov.w	r0, #4294967295
 800711e:	b00d      	add	sp, #52	@ 0x34
 8007120:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007124:	4642      	mov	r2, r8
 8007126:	464b      	mov	r3, r9
 8007128:	4640      	mov	r0, r8
 800712a:	4649      	mov	r1, r9
 800712c:	f7f9 fd06 	bl	8000b3c <__aeabi_dcmpun>
 8007130:	b140      	cbz	r0, 8007144 <_printf_float+0xe0>
 8007132:	464b      	mov	r3, r9
 8007134:	2b00      	cmp	r3, #0
 8007136:	bfbc      	itt	lt
 8007138:	232d      	movlt	r3, #45	@ 0x2d
 800713a:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800713e:	4a7e      	ldr	r2, [pc, #504]	@ (8007338 <_printf_float+0x2d4>)
 8007140:	4b7e      	ldr	r3, [pc, #504]	@ (800733c <_printf_float+0x2d8>)
 8007142:	e7d4      	b.n	80070ee <_printf_float+0x8a>
 8007144:	6863      	ldr	r3, [r4, #4]
 8007146:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800714a:	9206      	str	r2, [sp, #24]
 800714c:	1c5a      	adds	r2, r3, #1
 800714e:	d13b      	bne.n	80071c8 <_printf_float+0x164>
 8007150:	2306      	movs	r3, #6
 8007152:	6063      	str	r3, [r4, #4]
 8007154:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8007158:	2300      	movs	r3, #0
 800715a:	6022      	str	r2, [r4, #0]
 800715c:	9303      	str	r3, [sp, #12]
 800715e:	ab0a      	add	r3, sp, #40	@ 0x28
 8007160:	e9cd a301 	strd	sl, r3, [sp, #4]
 8007164:	ab09      	add	r3, sp, #36	@ 0x24
 8007166:	9300      	str	r3, [sp, #0]
 8007168:	6861      	ldr	r1, [r4, #4]
 800716a:	ec49 8b10 	vmov	d0, r8, r9
 800716e:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8007172:	4628      	mov	r0, r5
 8007174:	f7ff fed7 	bl	8006f26 <__cvt>
 8007178:	9b06      	ldr	r3, [sp, #24]
 800717a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800717c:	2b47      	cmp	r3, #71	@ 0x47
 800717e:	4680      	mov	r8, r0
 8007180:	d129      	bne.n	80071d6 <_printf_float+0x172>
 8007182:	1cc8      	adds	r0, r1, #3
 8007184:	db02      	blt.n	800718c <_printf_float+0x128>
 8007186:	6863      	ldr	r3, [r4, #4]
 8007188:	4299      	cmp	r1, r3
 800718a:	dd41      	ble.n	8007210 <_printf_float+0x1ac>
 800718c:	f1aa 0a02 	sub.w	sl, sl, #2
 8007190:	fa5f fa8a 	uxtb.w	sl, sl
 8007194:	3901      	subs	r1, #1
 8007196:	4652      	mov	r2, sl
 8007198:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 800719c:	9109      	str	r1, [sp, #36]	@ 0x24
 800719e:	f7ff ff27 	bl	8006ff0 <__exponent>
 80071a2:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80071a4:	1813      	adds	r3, r2, r0
 80071a6:	2a01      	cmp	r2, #1
 80071a8:	4681      	mov	r9, r0
 80071aa:	6123      	str	r3, [r4, #16]
 80071ac:	dc02      	bgt.n	80071b4 <_printf_float+0x150>
 80071ae:	6822      	ldr	r2, [r4, #0]
 80071b0:	07d2      	lsls	r2, r2, #31
 80071b2:	d501      	bpl.n	80071b8 <_printf_float+0x154>
 80071b4:	3301      	adds	r3, #1
 80071b6:	6123      	str	r3, [r4, #16]
 80071b8:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80071bc:	2b00      	cmp	r3, #0
 80071be:	d0a2      	beq.n	8007106 <_printf_float+0xa2>
 80071c0:	232d      	movs	r3, #45	@ 0x2d
 80071c2:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80071c6:	e79e      	b.n	8007106 <_printf_float+0xa2>
 80071c8:	9a06      	ldr	r2, [sp, #24]
 80071ca:	2a47      	cmp	r2, #71	@ 0x47
 80071cc:	d1c2      	bne.n	8007154 <_printf_float+0xf0>
 80071ce:	2b00      	cmp	r3, #0
 80071d0:	d1c0      	bne.n	8007154 <_printf_float+0xf0>
 80071d2:	2301      	movs	r3, #1
 80071d4:	e7bd      	b.n	8007152 <_printf_float+0xee>
 80071d6:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80071da:	d9db      	bls.n	8007194 <_printf_float+0x130>
 80071dc:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80071e0:	d118      	bne.n	8007214 <_printf_float+0x1b0>
 80071e2:	2900      	cmp	r1, #0
 80071e4:	6863      	ldr	r3, [r4, #4]
 80071e6:	dd0b      	ble.n	8007200 <_printf_float+0x19c>
 80071e8:	6121      	str	r1, [r4, #16]
 80071ea:	b913      	cbnz	r3, 80071f2 <_printf_float+0x18e>
 80071ec:	6822      	ldr	r2, [r4, #0]
 80071ee:	07d0      	lsls	r0, r2, #31
 80071f0:	d502      	bpl.n	80071f8 <_printf_float+0x194>
 80071f2:	3301      	adds	r3, #1
 80071f4:	440b      	add	r3, r1
 80071f6:	6123      	str	r3, [r4, #16]
 80071f8:	65a1      	str	r1, [r4, #88]	@ 0x58
 80071fa:	f04f 0900 	mov.w	r9, #0
 80071fe:	e7db      	b.n	80071b8 <_printf_float+0x154>
 8007200:	b913      	cbnz	r3, 8007208 <_printf_float+0x1a4>
 8007202:	6822      	ldr	r2, [r4, #0]
 8007204:	07d2      	lsls	r2, r2, #31
 8007206:	d501      	bpl.n	800720c <_printf_float+0x1a8>
 8007208:	3302      	adds	r3, #2
 800720a:	e7f4      	b.n	80071f6 <_printf_float+0x192>
 800720c:	2301      	movs	r3, #1
 800720e:	e7f2      	b.n	80071f6 <_printf_float+0x192>
 8007210:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8007214:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8007216:	4299      	cmp	r1, r3
 8007218:	db05      	blt.n	8007226 <_printf_float+0x1c2>
 800721a:	6823      	ldr	r3, [r4, #0]
 800721c:	6121      	str	r1, [r4, #16]
 800721e:	07d8      	lsls	r0, r3, #31
 8007220:	d5ea      	bpl.n	80071f8 <_printf_float+0x194>
 8007222:	1c4b      	adds	r3, r1, #1
 8007224:	e7e7      	b.n	80071f6 <_printf_float+0x192>
 8007226:	2900      	cmp	r1, #0
 8007228:	bfd4      	ite	le
 800722a:	f1c1 0202 	rsble	r2, r1, #2
 800722e:	2201      	movgt	r2, #1
 8007230:	4413      	add	r3, r2
 8007232:	e7e0      	b.n	80071f6 <_printf_float+0x192>
 8007234:	6823      	ldr	r3, [r4, #0]
 8007236:	055a      	lsls	r2, r3, #21
 8007238:	d407      	bmi.n	800724a <_printf_float+0x1e6>
 800723a:	6923      	ldr	r3, [r4, #16]
 800723c:	4642      	mov	r2, r8
 800723e:	4631      	mov	r1, r6
 8007240:	4628      	mov	r0, r5
 8007242:	47b8      	blx	r7
 8007244:	3001      	adds	r0, #1
 8007246:	d12b      	bne.n	80072a0 <_printf_float+0x23c>
 8007248:	e767      	b.n	800711a <_printf_float+0xb6>
 800724a:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800724e:	f240 80dd 	bls.w	800740c <_printf_float+0x3a8>
 8007252:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8007256:	2200      	movs	r2, #0
 8007258:	2300      	movs	r3, #0
 800725a:	f7f9 fc3d 	bl	8000ad8 <__aeabi_dcmpeq>
 800725e:	2800      	cmp	r0, #0
 8007260:	d033      	beq.n	80072ca <_printf_float+0x266>
 8007262:	4a37      	ldr	r2, [pc, #220]	@ (8007340 <_printf_float+0x2dc>)
 8007264:	2301      	movs	r3, #1
 8007266:	4631      	mov	r1, r6
 8007268:	4628      	mov	r0, r5
 800726a:	47b8      	blx	r7
 800726c:	3001      	adds	r0, #1
 800726e:	f43f af54 	beq.w	800711a <_printf_float+0xb6>
 8007272:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8007276:	4543      	cmp	r3, r8
 8007278:	db02      	blt.n	8007280 <_printf_float+0x21c>
 800727a:	6823      	ldr	r3, [r4, #0]
 800727c:	07d8      	lsls	r0, r3, #31
 800727e:	d50f      	bpl.n	80072a0 <_printf_float+0x23c>
 8007280:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007284:	4631      	mov	r1, r6
 8007286:	4628      	mov	r0, r5
 8007288:	47b8      	blx	r7
 800728a:	3001      	adds	r0, #1
 800728c:	f43f af45 	beq.w	800711a <_printf_float+0xb6>
 8007290:	f04f 0900 	mov.w	r9, #0
 8007294:	f108 38ff 	add.w	r8, r8, #4294967295
 8007298:	f104 0a1a 	add.w	sl, r4, #26
 800729c:	45c8      	cmp	r8, r9
 800729e:	dc09      	bgt.n	80072b4 <_printf_float+0x250>
 80072a0:	6823      	ldr	r3, [r4, #0]
 80072a2:	079b      	lsls	r3, r3, #30
 80072a4:	f100 8103 	bmi.w	80074ae <_printf_float+0x44a>
 80072a8:	68e0      	ldr	r0, [r4, #12]
 80072aa:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80072ac:	4298      	cmp	r0, r3
 80072ae:	bfb8      	it	lt
 80072b0:	4618      	movlt	r0, r3
 80072b2:	e734      	b.n	800711e <_printf_float+0xba>
 80072b4:	2301      	movs	r3, #1
 80072b6:	4652      	mov	r2, sl
 80072b8:	4631      	mov	r1, r6
 80072ba:	4628      	mov	r0, r5
 80072bc:	47b8      	blx	r7
 80072be:	3001      	adds	r0, #1
 80072c0:	f43f af2b 	beq.w	800711a <_printf_float+0xb6>
 80072c4:	f109 0901 	add.w	r9, r9, #1
 80072c8:	e7e8      	b.n	800729c <_printf_float+0x238>
 80072ca:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80072cc:	2b00      	cmp	r3, #0
 80072ce:	dc39      	bgt.n	8007344 <_printf_float+0x2e0>
 80072d0:	4a1b      	ldr	r2, [pc, #108]	@ (8007340 <_printf_float+0x2dc>)
 80072d2:	2301      	movs	r3, #1
 80072d4:	4631      	mov	r1, r6
 80072d6:	4628      	mov	r0, r5
 80072d8:	47b8      	blx	r7
 80072da:	3001      	adds	r0, #1
 80072dc:	f43f af1d 	beq.w	800711a <_printf_float+0xb6>
 80072e0:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80072e4:	ea59 0303 	orrs.w	r3, r9, r3
 80072e8:	d102      	bne.n	80072f0 <_printf_float+0x28c>
 80072ea:	6823      	ldr	r3, [r4, #0]
 80072ec:	07d9      	lsls	r1, r3, #31
 80072ee:	d5d7      	bpl.n	80072a0 <_printf_float+0x23c>
 80072f0:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80072f4:	4631      	mov	r1, r6
 80072f6:	4628      	mov	r0, r5
 80072f8:	47b8      	blx	r7
 80072fa:	3001      	adds	r0, #1
 80072fc:	f43f af0d 	beq.w	800711a <_printf_float+0xb6>
 8007300:	f04f 0a00 	mov.w	sl, #0
 8007304:	f104 0b1a 	add.w	fp, r4, #26
 8007308:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800730a:	425b      	negs	r3, r3
 800730c:	4553      	cmp	r3, sl
 800730e:	dc01      	bgt.n	8007314 <_printf_float+0x2b0>
 8007310:	464b      	mov	r3, r9
 8007312:	e793      	b.n	800723c <_printf_float+0x1d8>
 8007314:	2301      	movs	r3, #1
 8007316:	465a      	mov	r2, fp
 8007318:	4631      	mov	r1, r6
 800731a:	4628      	mov	r0, r5
 800731c:	47b8      	blx	r7
 800731e:	3001      	adds	r0, #1
 8007320:	f43f aefb 	beq.w	800711a <_printf_float+0xb6>
 8007324:	f10a 0a01 	add.w	sl, sl, #1
 8007328:	e7ee      	b.n	8007308 <_printf_float+0x2a4>
 800732a:	bf00      	nop
 800732c:	7fefffff 	.word	0x7fefffff
 8007330:	0800ba34 	.word	0x0800ba34
 8007334:	0800ba30 	.word	0x0800ba30
 8007338:	0800ba3c 	.word	0x0800ba3c
 800733c:	0800ba38 	.word	0x0800ba38
 8007340:	0800ba40 	.word	0x0800ba40
 8007344:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007346:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800734a:	4553      	cmp	r3, sl
 800734c:	bfa8      	it	ge
 800734e:	4653      	movge	r3, sl
 8007350:	2b00      	cmp	r3, #0
 8007352:	4699      	mov	r9, r3
 8007354:	dc36      	bgt.n	80073c4 <_printf_float+0x360>
 8007356:	f04f 0b00 	mov.w	fp, #0
 800735a:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800735e:	f104 021a 	add.w	r2, r4, #26
 8007362:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8007364:	9306      	str	r3, [sp, #24]
 8007366:	eba3 0309 	sub.w	r3, r3, r9
 800736a:	455b      	cmp	r3, fp
 800736c:	dc31      	bgt.n	80073d2 <_printf_float+0x36e>
 800736e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007370:	459a      	cmp	sl, r3
 8007372:	dc3a      	bgt.n	80073ea <_printf_float+0x386>
 8007374:	6823      	ldr	r3, [r4, #0]
 8007376:	07da      	lsls	r2, r3, #31
 8007378:	d437      	bmi.n	80073ea <_printf_float+0x386>
 800737a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800737c:	ebaa 0903 	sub.w	r9, sl, r3
 8007380:	9b06      	ldr	r3, [sp, #24]
 8007382:	ebaa 0303 	sub.w	r3, sl, r3
 8007386:	4599      	cmp	r9, r3
 8007388:	bfa8      	it	ge
 800738a:	4699      	movge	r9, r3
 800738c:	f1b9 0f00 	cmp.w	r9, #0
 8007390:	dc33      	bgt.n	80073fa <_printf_float+0x396>
 8007392:	f04f 0800 	mov.w	r8, #0
 8007396:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800739a:	f104 0b1a 	add.w	fp, r4, #26
 800739e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80073a0:	ebaa 0303 	sub.w	r3, sl, r3
 80073a4:	eba3 0309 	sub.w	r3, r3, r9
 80073a8:	4543      	cmp	r3, r8
 80073aa:	f77f af79 	ble.w	80072a0 <_printf_float+0x23c>
 80073ae:	2301      	movs	r3, #1
 80073b0:	465a      	mov	r2, fp
 80073b2:	4631      	mov	r1, r6
 80073b4:	4628      	mov	r0, r5
 80073b6:	47b8      	blx	r7
 80073b8:	3001      	adds	r0, #1
 80073ba:	f43f aeae 	beq.w	800711a <_printf_float+0xb6>
 80073be:	f108 0801 	add.w	r8, r8, #1
 80073c2:	e7ec      	b.n	800739e <_printf_float+0x33a>
 80073c4:	4642      	mov	r2, r8
 80073c6:	4631      	mov	r1, r6
 80073c8:	4628      	mov	r0, r5
 80073ca:	47b8      	blx	r7
 80073cc:	3001      	adds	r0, #1
 80073ce:	d1c2      	bne.n	8007356 <_printf_float+0x2f2>
 80073d0:	e6a3      	b.n	800711a <_printf_float+0xb6>
 80073d2:	2301      	movs	r3, #1
 80073d4:	4631      	mov	r1, r6
 80073d6:	4628      	mov	r0, r5
 80073d8:	9206      	str	r2, [sp, #24]
 80073da:	47b8      	blx	r7
 80073dc:	3001      	adds	r0, #1
 80073de:	f43f ae9c 	beq.w	800711a <_printf_float+0xb6>
 80073e2:	9a06      	ldr	r2, [sp, #24]
 80073e4:	f10b 0b01 	add.w	fp, fp, #1
 80073e8:	e7bb      	b.n	8007362 <_printf_float+0x2fe>
 80073ea:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80073ee:	4631      	mov	r1, r6
 80073f0:	4628      	mov	r0, r5
 80073f2:	47b8      	blx	r7
 80073f4:	3001      	adds	r0, #1
 80073f6:	d1c0      	bne.n	800737a <_printf_float+0x316>
 80073f8:	e68f      	b.n	800711a <_printf_float+0xb6>
 80073fa:	9a06      	ldr	r2, [sp, #24]
 80073fc:	464b      	mov	r3, r9
 80073fe:	4442      	add	r2, r8
 8007400:	4631      	mov	r1, r6
 8007402:	4628      	mov	r0, r5
 8007404:	47b8      	blx	r7
 8007406:	3001      	adds	r0, #1
 8007408:	d1c3      	bne.n	8007392 <_printf_float+0x32e>
 800740a:	e686      	b.n	800711a <_printf_float+0xb6>
 800740c:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8007410:	f1ba 0f01 	cmp.w	sl, #1
 8007414:	dc01      	bgt.n	800741a <_printf_float+0x3b6>
 8007416:	07db      	lsls	r3, r3, #31
 8007418:	d536      	bpl.n	8007488 <_printf_float+0x424>
 800741a:	2301      	movs	r3, #1
 800741c:	4642      	mov	r2, r8
 800741e:	4631      	mov	r1, r6
 8007420:	4628      	mov	r0, r5
 8007422:	47b8      	blx	r7
 8007424:	3001      	adds	r0, #1
 8007426:	f43f ae78 	beq.w	800711a <_printf_float+0xb6>
 800742a:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800742e:	4631      	mov	r1, r6
 8007430:	4628      	mov	r0, r5
 8007432:	47b8      	blx	r7
 8007434:	3001      	adds	r0, #1
 8007436:	f43f ae70 	beq.w	800711a <_printf_float+0xb6>
 800743a:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800743e:	2200      	movs	r2, #0
 8007440:	2300      	movs	r3, #0
 8007442:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007446:	f7f9 fb47 	bl	8000ad8 <__aeabi_dcmpeq>
 800744a:	b9c0      	cbnz	r0, 800747e <_printf_float+0x41a>
 800744c:	4653      	mov	r3, sl
 800744e:	f108 0201 	add.w	r2, r8, #1
 8007452:	4631      	mov	r1, r6
 8007454:	4628      	mov	r0, r5
 8007456:	47b8      	blx	r7
 8007458:	3001      	adds	r0, #1
 800745a:	d10c      	bne.n	8007476 <_printf_float+0x412>
 800745c:	e65d      	b.n	800711a <_printf_float+0xb6>
 800745e:	2301      	movs	r3, #1
 8007460:	465a      	mov	r2, fp
 8007462:	4631      	mov	r1, r6
 8007464:	4628      	mov	r0, r5
 8007466:	47b8      	blx	r7
 8007468:	3001      	adds	r0, #1
 800746a:	f43f ae56 	beq.w	800711a <_printf_float+0xb6>
 800746e:	f108 0801 	add.w	r8, r8, #1
 8007472:	45d0      	cmp	r8, sl
 8007474:	dbf3      	blt.n	800745e <_printf_float+0x3fa>
 8007476:	464b      	mov	r3, r9
 8007478:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 800747c:	e6df      	b.n	800723e <_printf_float+0x1da>
 800747e:	f04f 0800 	mov.w	r8, #0
 8007482:	f104 0b1a 	add.w	fp, r4, #26
 8007486:	e7f4      	b.n	8007472 <_printf_float+0x40e>
 8007488:	2301      	movs	r3, #1
 800748a:	4642      	mov	r2, r8
 800748c:	e7e1      	b.n	8007452 <_printf_float+0x3ee>
 800748e:	2301      	movs	r3, #1
 8007490:	464a      	mov	r2, r9
 8007492:	4631      	mov	r1, r6
 8007494:	4628      	mov	r0, r5
 8007496:	47b8      	blx	r7
 8007498:	3001      	adds	r0, #1
 800749a:	f43f ae3e 	beq.w	800711a <_printf_float+0xb6>
 800749e:	f108 0801 	add.w	r8, r8, #1
 80074a2:	68e3      	ldr	r3, [r4, #12]
 80074a4:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80074a6:	1a5b      	subs	r3, r3, r1
 80074a8:	4543      	cmp	r3, r8
 80074aa:	dcf0      	bgt.n	800748e <_printf_float+0x42a>
 80074ac:	e6fc      	b.n	80072a8 <_printf_float+0x244>
 80074ae:	f04f 0800 	mov.w	r8, #0
 80074b2:	f104 0919 	add.w	r9, r4, #25
 80074b6:	e7f4      	b.n	80074a2 <_printf_float+0x43e>

080074b8 <_printf_common>:
 80074b8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80074bc:	4616      	mov	r6, r2
 80074be:	4698      	mov	r8, r3
 80074c0:	688a      	ldr	r2, [r1, #8]
 80074c2:	690b      	ldr	r3, [r1, #16]
 80074c4:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80074c8:	4293      	cmp	r3, r2
 80074ca:	bfb8      	it	lt
 80074cc:	4613      	movlt	r3, r2
 80074ce:	6033      	str	r3, [r6, #0]
 80074d0:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80074d4:	4607      	mov	r7, r0
 80074d6:	460c      	mov	r4, r1
 80074d8:	b10a      	cbz	r2, 80074de <_printf_common+0x26>
 80074da:	3301      	adds	r3, #1
 80074dc:	6033      	str	r3, [r6, #0]
 80074de:	6823      	ldr	r3, [r4, #0]
 80074e0:	0699      	lsls	r1, r3, #26
 80074e2:	bf42      	ittt	mi
 80074e4:	6833      	ldrmi	r3, [r6, #0]
 80074e6:	3302      	addmi	r3, #2
 80074e8:	6033      	strmi	r3, [r6, #0]
 80074ea:	6825      	ldr	r5, [r4, #0]
 80074ec:	f015 0506 	ands.w	r5, r5, #6
 80074f0:	d106      	bne.n	8007500 <_printf_common+0x48>
 80074f2:	f104 0a19 	add.w	sl, r4, #25
 80074f6:	68e3      	ldr	r3, [r4, #12]
 80074f8:	6832      	ldr	r2, [r6, #0]
 80074fa:	1a9b      	subs	r3, r3, r2
 80074fc:	42ab      	cmp	r3, r5
 80074fe:	dc26      	bgt.n	800754e <_printf_common+0x96>
 8007500:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8007504:	6822      	ldr	r2, [r4, #0]
 8007506:	3b00      	subs	r3, #0
 8007508:	bf18      	it	ne
 800750a:	2301      	movne	r3, #1
 800750c:	0692      	lsls	r2, r2, #26
 800750e:	d42b      	bmi.n	8007568 <_printf_common+0xb0>
 8007510:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8007514:	4641      	mov	r1, r8
 8007516:	4638      	mov	r0, r7
 8007518:	47c8      	blx	r9
 800751a:	3001      	adds	r0, #1
 800751c:	d01e      	beq.n	800755c <_printf_common+0xa4>
 800751e:	6823      	ldr	r3, [r4, #0]
 8007520:	6922      	ldr	r2, [r4, #16]
 8007522:	f003 0306 	and.w	r3, r3, #6
 8007526:	2b04      	cmp	r3, #4
 8007528:	bf02      	ittt	eq
 800752a:	68e5      	ldreq	r5, [r4, #12]
 800752c:	6833      	ldreq	r3, [r6, #0]
 800752e:	1aed      	subeq	r5, r5, r3
 8007530:	68a3      	ldr	r3, [r4, #8]
 8007532:	bf0c      	ite	eq
 8007534:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8007538:	2500      	movne	r5, #0
 800753a:	4293      	cmp	r3, r2
 800753c:	bfc4      	itt	gt
 800753e:	1a9b      	subgt	r3, r3, r2
 8007540:	18ed      	addgt	r5, r5, r3
 8007542:	2600      	movs	r6, #0
 8007544:	341a      	adds	r4, #26
 8007546:	42b5      	cmp	r5, r6
 8007548:	d11a      	bne.n	8007580 <_printf_common+0xc8>
 800754a:	2000      	movs	r0, #0
 800754c:	e008      	b.n	8007560 <_printf_common+0xa8>
 800754e:	2301      	movs	r3, #1
 8007550:	4652      	mov	r2, sl
 8007552:	4641      	mov	r1, r8
 8007554:	4638      	mov	r0, r7
 8007556:	47c8      	blx	r9
 8007558:	3001      	adds	r0, #1
 800755a:	d103      	bne.n	8007564 <_printf_common+0xac>
 800755c:	f04f 30ff 	mov.w	r0, #4294967295
 8007560:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8007564:	3501      	adds	r5, #1
 8007566:	e7c6      	b.n	80074f6 <_printf_common+0x3e>
 8007568:	18e1      	adds	r1, r4, r3
 800756a:	1c5a      	adds	r2, r3, #1
 800756c:	2030      	movs	r0, #48	@ 0x30
 800756e:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8007572:	4422      	add	r2, r4
 8007574:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8007578:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 800757c:	3302      	adds	r3, #2
 800757e:	e7c7      	b.n	8007510 <_printf_common+0x58>
 8007580:	2301      	movs	r3, #1
 8007582:	4622      	mov	r2, r4
 8007584:	4641      	mov	r1, r8
 8007586:	4638      	mov	r0, r7
 8007588:	47c8      	blx	r9
 800758a:	3001      	adds	r0, #1
 800758c:	d0e6      	beq.n	800755c <_printf_common+0xa4>
 800758e:	3601      	adds	r6, #1
 8007590:	e7d9      	b.n	8007546 <_printf_common+0x8e>
	...

08007594 <_printf_i>:
 8007594:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8007598:	7e0f      	ldrb	r7, [r1, #24]
 800759a:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 800759c:	2f78      	cmp	r7, #120	@ 0x78
 800759e:	4691      	mov	r9, r2
 80075a0:	4680      	mov	r8, r0
 80075a2:	460c      	mov	r4, r1
 80075a4:	469a      	mov	sl, r3
 80075a6:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80075aa:	d807      	bhi.n	80075bc <_printf_i+0x28>
 80075ac:	2f62      	cmp	r7, #98	@ 0x62
 80075ae:	d80a      	bhi.n	80075c6 <_printf_i+0x32>
 80075b0:	2f00      	cmp	r7, #0
 80075b2:	f000 80d1 	beq.w	8007758 <_printf_i+0x1c4>
 80075b6:	2f58      	cmp	r7, #88	@ 0x58
 80075b8:	f000 80b8 	beq.w	800772c <_printf_i+0x198>
 80075bc:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80075c0:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80075c4:	e03a      	b.n	800763c <_printf_i+0xa8>
 80075c6:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80075ca:	2b15      	cmp	r3, #21
 80075cc:	d8f6      	bhi.n	80075bc <_printf_i+0x28>
 80075ce:	a101      	add	r1, pc, #4	@ (adr r1, 80075d4 <_printf_i+0x40>)
 80075d0:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80075d4:	0800762d 	.word	0x0800762d
 80075d8:	08007641 	.word	0x08007641
 80075dc:	080075bd 	.word	0x080075bd
 80075e0:	080075bd 	.word	0x080075bd
 80075e4:	080075bd 	.word	0x080075bd
 80075e8:	080075bd 	.word	0x080075bd
 80075ec:	08007641 	.word	0x08007641
 80075f0:	080075bd 	.word	0x080075bd
 80075f4:	080075bd 	.word	0x080075bd
 80075f8:	080075bd 	.word	0x080075bd
 80075fc:	080075bd 	.word	0x080075bd
 8007600:	0800773f 	.word	0x0800773f
 8007604:	0800766b 	.word	0x0800766b
 8007608:	080076f9 	.word	0x080076f9
 800760c:	080075bd 	.word	0x080075bd
 8007610:	080075bd 	.word	0x080075bd
 8007614:	08007761 	.word	0x08007761
 8007618:	080075bd 	.word	0x080075bd
 800761c:	0800766b 	.word	0x0800766b
 8007620:	080075bd 	.word	0x080075bd
 8007624:	080075bd 	.word	0x080075bd
 8007628:	08007701 	.word	0x08007701
 800762c:	6833      	ldr	r3, [r6, #0]
 800762e:	1d1a      	adds	r2, r3, #4
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	6032      	str	r2, [r6, #0]
 8007634:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8007638:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 800763c:	2301      	movs	r3, #1
 800763e:	e09c      	b.n	800777a <_printf_i+0x1e6>
 8007640:	6833      	ldr	r3, [r6, #0]
 8007642:	6820      	ldr	r0, [r4, #0]
 8007644:	1d19      	adds	r1, r3, #4
 8007646:	6031      	str	r1, [r6, #0]
 8007648:	0606      	lsls	r6, r0, #24
 800764a:	d501      	bpl.n	8007650 <_printf_i+0xbc>
 800764c:	681d      	ldr	r5, [r3, #0]
 800764e:	e003      	b.n	8007658 <_printf_i+0xc4>
 8007650:	0645      	lsls	r5, r0, #25
 8007652:	d5fb      	bpl.n	800764c <_printf_i+0xb8>
 8007654:	f9b3 5000 	ldrsh.w	r5, [r3]
 8007658:	2d00      	cmp	r5, #0
 800765a:	da03      	bge.n	8007664 <_printf_i+0xd0>
 800765c:	232d      	movs	r3, #45	@ 0x2d
 800765e:	426d      	negs	r5, r5
 8007660:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007664:	4858      	ldr	r0, [pc, #352]	@ (80077c8 <_printf_i+0x234>)
 8007666:	230a      	movs	r3, #10
 8007668:	e011      	b.n	800768e <_printf_i+0xfa>
 800766a:	6821      	ldr	r1, [r4, #0]
 800766c:	6833      	ldr	r3, [r6, #0]
 800766e:	0608      	lsls	r0, r1, #24
 8007670:	f853 5b04 	ldr.w	r5, [r3], #4
 8007674:	d402      	bmi.n	800767c <_printf_i+0xe8>
 8007676:	0649      	lsls	r1, r1, #25
 8007678:	bf48      	it	mi
 800767a:	b2ad      	uxthmi	r5, r5
 800767c:	2f6f      	cmp	r7, #111	@ 0x6f
 800767e:	4852      	ldr	r0, [pc, #328]	@ (80077c8 <_printf_i+0x234>)
 8007680:	6033      	str	r3, [r6, #0]
 8007682:	bf14      	ite	ne
 8007684:	230a      	movne	r3, #10
 8007686:	2308      	moveq	r3, #8
 8007688:	2100      	movs	r1, #0
 800768a:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 800768e:	6866      	ldr	r6, [r4, #4]
 8007690:	60a6      	str	r6, [r4, #8]
 8007692:	2e00      	cmp	r6, #0
 8007694:	db05      	blt.n	80076a2 <_printf_i+0x10e>
 8007696:	6821      	ldr	r1, [r4, #0]
 8007698:	432e      	orrs	r6, r5
 800769a:	f021 0104 	bic.w	r1, r1, #4
 800769e:	6021      	str	r1, [r4, #0]
 80076a0:	d04b      	beq.n	800773a <_printf_i+0x1a6>
 80076a2:	4616      	mov	r6, r2
 80076a4:	fbb5 f1f3 	udiv	r1, r5, r3
 80076a8:	fb03 5711 	mls	r7, r3, r1, r5
 80076ac:	5dc7      	ldrb	r7, [r0, r7]
 80076ae:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80076b2:	462f      	mov	r7, r5
 80076b4:	42bb      	cmp	r3, r7
 80076b6:	460d      	mov	r5, r1
 80076b8:	d9f4      	bls.n	80076a4 <_printf_i+0x110>
 80076ba:	2b08      	cmp	r3, #8
 80076bc:	d10b      	bne.n	80076d6 <_printf_i+0x142>
 80076be:	6823      	ldr	r3, [r4, #0]
 80076c0:	07df      	lsls	r7, r3, #31
 80076c2:	d508      	bpl.n	80076d6 <_printf_i+0x142>
 80076c4:	6923      	ldr	r3, [r4, #16]
 80076c6:	6861      	ldr	r1, [r4, #4]
 80076c8:	4299      	cmp	r1, r3
 80076ca:	bfde      	ittt	le
 80076cc:	2330      	movle	r3, #48	@ 0x30
 80076ce:	f806 3c01 	strble.w	r3, [r6, #-1]
 80076d2:	f106 36ff 	addle.w	r6, r6, #4294967295
 80076d6:	1b92      	subs	r2, r2, r6
 80076d8:	6122      	str	r2, [r4, #16]
 80076da:	f8cd a000 	str.w	sl, [sp]
 80076de:	464b      	mov	r3, r9
 80076e0:	aa03      	add	r2, sp, #12
 80076e2:	4621      	mov	r1, r4
 80076e4:	4640      	mov	r0, r8
 80076e6:	f7ff fee7 	bl	80074b8 <_printf_common>
 80076ea:	3001      	adds	r0, #1
 80076ec:	d14a      	bne.n	8007784 <_printf_i+0x1f0>
 80076ee:	f04f 30ff 	mov.w	r0, #4294967295
 80076f2:	b004      	add	sp, #16
 80076f4:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80076f8:	6823      	ldr	r3, [r4, #0]
 80076fa:	f043 0320 	orr.w	r3, r3, #32
 80076fe:	6023      	str	r3, [r4, #0]
 8007700:	4832      	ldr	r0, [pc, #200]	@ (80077cc <_printf_i+0x238>)
 8007702:	2778      	movs	r7, #120	@ 0x78
 8007704:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8007708:	6823      	ldr	r3, [r4, #0]
 800770a:	6831      	ldr	r1, [r6, #0]
 800770c:	061f      	lsls	r7, r3, #24
 800770e:	f851 5b04 	ldr.w	r5, [r1], #4
 8007712:	d402      	bmi.n	800771a <_printf_i+0x186>
 8007714:	065f      	lsls	r7, r3, #25
 8007716:	bf48      	it	mi
 8007718:	b2ad      	uxthmi	r5, r5
 800771a:	6031      	str	r1, [r6, #0]
 800771c:	07d9      	lsls	r1, r3, #31
 800771e:	bf44      	itt	mi
 8007720:	f043 0320 	orrmi.w	r3, r3, #32
 8007724:	6023      	strmi	r3, [r4, #0]
 8007726:	b11d      	cbz	r5, 8007730 <_printf_i+0x19c>
 8007728:	2310      	movs	r3, #16
 800772a:	e7ad      	b.n	8007688 <_printf_i+0xf4>
 800772c:	4826      	ldr	r0, [pc, #152]	@ (80077c8 <_printf_i+0x234>)
 800772e:	e7e9      	b.n	8007704 <_printf_i+0x170>
 8007730:	6823      	ldr	r3, [r4, #0]
 8007732:	f023 0320 	bic.w	r3, r3, #32
 8007736:	6023      	str	r3, [r4, #0]
 8007738:	e7f6      	b.n	8007728 <_printf_i+0x194>
 800773a:	4616      	mov	r6, r2
 800773c:	e7bd      	b.n	80076ba <_printf_i+0x126>
 800773e:	6833      	ldr	r3, [r6, #0]
 8007740:	6825      	ldr	r5, [r4, #0]
 8007742:	6961      	ldr	r1, [r4, #20]
 8007744:	1d18      	adds	r0, r3, #4
 8007746:	6030      	str	r0, [r6, #0]
 8007748:	062e      	lsls	r6, r5, #24
 800774a:	681b      	ldr	r3, [r3, #0]
 800774c:	d501      	bpl.n	8007752 <_printf_i+0x1be>
 800774e:	6019      	str	r1, [r3, #0]
 8007750:	e002      	b.n	8007758 <_printf_i+0x1c4>
 8007752:	0668      	lsls	r0, r5, #25
 8007754:	d5fb      	bpl.n	800774e <_printf_i+0x1ba>
 8007756:	8019      	strh	r1, [r3, #0]
 8007758:	2300      	movs	r3, #0
 800775a:	6123      	str	r3, [r4, #16]
 800775c:	4616      	mov	r6, r2
 800775e:	e7bc      	b.n	80076da <_printf_i+0x146>
 8007760:	6833      	ldr	r3, [r6, #0]
 8007762:	1d1a      	adds	r2, r3, #4
 8007764:	6032      	str	r2, [r6, #0]
 8007766:	681e      	ldr	r6, [r3, #0]
 8007768:	6862      	ldr	r2, [r4, #4]
 800776a:	2100      	movs	r1, #0
 800776c:	4630      	mov	r0, r6
 800776e:	f7f8 fd37 	bl	80001e0 <memchr>
 8007772:	b108      	cbz	r0, 8007778 <_printf_i+0x1e4>
 8007774:	1b80      	subs	r0, r0, r6
 8007776:	6060      	str	r0, [r4, #4]
 8007778:	6863      	ldr	r3, [r4, #4]
 800777a:	6123      	str	r3, [r4, #16]
 800777c:	2300      	movs	r3, #0
 800777e:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8007782:	e7aa      	b.n	80076da <_printf_i+0x146>
 8007784:	6923      	ldr	r3, [r4, #16]
 8007786:	4632      	mov	r2, r6
 8007788:	4649      	mov	r1, r9
 800778a:	4640      	mov	r0, r8
 800778c:	47d0      	blx	sl
 800778e:	3001      	adds	r0, #1
 8007790:	d0ad      	beq.n	80076ee <_printf_i+0x15a>
 8007792:	6823      	ldr	r3, [r4, #0]
 8007794:	079b      	lsls	r3, r3, #30
 8007796:	d413      	bmi.n	80077c0 <_printf_i+0x22c>
 8007798:	68e0      	ldr	r0, [r4, #12]
 800779a:	9b03      	ldr	r3, [sp, #12]
 800779c:	4298      	cmp	r0, r3
 800779e:	bfb8      	it	lt
 80077a0:	4618      	movlt	r0, r3
 80077a2:	e7a6      	b.n	80076f2 <_printf_i+0x15e>
 80077a4:	2301      	movs	r3, #1
 80077a6:	4632      	mov	r2, r6
 80077a8:	4649      	mov	r1, r9
 80077aa:	4640      	mov	r0, r8
 80077ac:	47d0      	blx	sl
 80077ae:	3001      	adds	r0, #1
 80077b0:	d09d      	beq.n	80076ee <_printf_i+0x15a>
 80077b2:	3501      	adds	r5, #1
 80077b4:	68e3      	ldr	r3, [r4, #12]
 80077b6:	9903      	ldr	r1, [sp, #12]
 80077b8:	1a5b      	subs	r3, r3, r1
 80077ba:	42ab      	cmp	r3, r5
 80077bc:	dcf2      	bgt.n	80077a4 <_printf_i+0x210>
 80077be:	e7eb      	b.n	8007798 <_printf_i+0x204>
 80077c0:	2500      	movs	r5, #0
 80077c2:	f104 0619 	add.w	r6, r4, #25
 80077c6:	e7f5      	b.n	80077b4 <_printf_i+0x220>
 80077c8:	0800ba42 	.word	0x0800ba42
 80077cc:	0800ba53 	.word	0x0800ba53

080077d0 <_scanf_float>:
 80077d0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80077d4:	b087      	sub	sp, #28
 80077d6:	4691      	mov	r9, r2
 80077d8:	9303      	str	r3, [sp, #12]
 80077da:	688b      	ldr	r3, [r1, #8]
 80077dc:	1e5a      	subs	r2, r3, #1
 80077de:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 80077e2:	bf81      	itttt	hi
 80077e4:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 80077e8:	eb03 0b05 	addhi.w	fp, r3, r5
 80077ec:	f240 135d 	movwhi	r3, #349	@ 0x15d
 80077f0:	608b      	strhi	r3, [r1, #8]
 80077f2:	680b      	ldr	r3, [r1, #0]
 80077f4:	460a      	mov	r2, r1
 80077f6:	f04f 0500 	mov.w	r5, #0
 80077fa:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 80077fe:	f842 3b1c 	str.w	r3, [r2], #28
 8007802:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8007806:	4680      	mov	r8, r0
 8007808:	460c      	mov	r4, r1
 800780a:	bf98      	it	ls
 800780c:	f04f 0b00 	movls.w	fp, #0
 8007810:	9201      	str	r2, [sp, #4]
 8007812:	4616      	mov	r6, r2
 8007814:	46aa      	mov	sl, r5
 8007816:	462f      	mov	r7, r5
 8007818:	9502      	str	r5, [sp, #8]
 800781a:	68a2      	ldr	r2, [r4, #8]
 800781c:	b15a      	cbz	r2, 8007836 <_scanf_float+0x66>
 800781e:	f8d9 3000 	ldr.w	r3, [r9]
 8007822:	781b      	ldrb	r3, [r3, #0]
 8007824:	2b4e      	cmp	r3, #78	@ 0x4e
 8007826:	d863      	bhi.n	80078f0 <_scanf_float+0x120>
 8007828:	2b40      	cmp	r3, #64	@ 0x40
 800782a:	d83b      	bhi.n	80078a4 <_scanf_float+0xd4>
 800782c:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8007830:	b2c8      	uxtb	r0, r1
 8007832:	280e      	cmp	r0, #14
 8007834:	d939      	bls.n	80078aa <_scanf_float+0xda>
 8007836:	b11f      	cbz	r7, 8007840 <_scanf_float+0x70>
 8007838:	6823      	ldr	r3, [r4, #0]
 800783a:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800783e:	6023      	str	r3, [r4, #0]
 8007840:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007844:	f1ba 0f01 	cmp.w	sl, #1
 8007848:	f200 8114 	bhi.w	8007a74 <_scanf_float+0x2a4>
 800784c:	9b01      	ldr	r3, [sp, #4]
 800784e:	429e      	cmp	r6, r3
 8007850:	f200 8105 	bhi.w	8007a5e <_scanf_float+0x28e>
 8007854:	2001      	movs	r0, #1
 8007856:	b007      	add	sp, #28
 8007858:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800785c:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8007860:	2a0d      	cmp	r2, #13
 8007862:	d8e8      	bhi.n	8007836 <_scanf_float+0x66>
 8007864:	a101      	add	r1, pc, #4	@ (adr r1, 800786c <_scanf_float+0x9c>)
 8007866:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 800786a:	bf00      	nop
 800786c:	080079b5 	.word	0x080079b5
 8007870:	08007837 	.word	0x08007837
 8007874:	08007837 	.word	0x08007837
 8007878:	08007837 	.word	0x08007837
 800787c:	08007a11 	.word	0x08007a11
 8007880:	080079eb 	.word	0x080079eb
 8007884:	08007837 	.word	0x08007837
 8007888:	08007837 	.word	0x08007837
 800788c:	080079c3 	.word	0x080079c3
 8007890:	08007837 	.word	0x08007837
 8007894:	08007837 	.word	0x08007837
 8007898:	08007837 	.word	0x08007837
 800789c:	08007837 	.word	0x08007837
 80078a0:	0800797f 	.word	0x0800797f
 80078a4:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 80078a8:	e7da      	b.n	8007860 <_scanf_float+0x90>
 80078aa:	290e      	cmp	r1, #14
 80078ac:	d8c3      	bhi.n	8007836 <_scanf_float+0x66>
 80078ae:	a001      	add	r0, pc, #4	@ (adr r0, 80078b4 <_scanf_float+0xe4>)
 80078b0:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 80078b4:	0800796f 	.word	0x0800796f
 80078b8:	08007837 	.word	0x08007837
 80078bc:	0800796f 	.word	0x0800796f
 80078c0:	080079ff 	.word	0x080079ff
 80078c4:	08007837 	.word	0x08007837
 80078c8:	08007911 	.word	0x08007911
 80078cc:	08007955 	.word	0x08007955
 80078d0:	08007955 	.word	0x08007955
 80078d4:	08007955 	.word	0x08007955
 80078d8:	08007955 	.word	0x08007955
 80078dc:	08007955 	.word	0x08007955
 80078e0:	08007955 	.word	0x08007955
 80078e4:	08007955 	.word	0x08007955
 80078e8:	08007955 	.word	0x08007955
 80078ec:	08007955 	.word	0x08007955
 80078f0:	2b6e      	cmp	r3, #110	@ 0x6e
 80078f2:	d809      	bhi.n	8007908 <_scanf_float+0x138>
 80078f4:	2b60      	cmp	r3, #96	@ 0x60
 80078f6:	d8b1      	bhi.n	800785c <_scanf_float+0x8c>
 80078f8:	2b54      	cmp	r3, #84	@ 0x54
 80078fa:	d07b      	beq.n	80079f4 <_scanf_float+0x224>
 80078fc:	2b59      	cmp	r3, #89	@ 0x59
 80078fe:	d19a      	bne.n	8007836 <_scanf_float+0x66>
 8007900:	2d07      	cmp	r5, #7
 8007902:	d198      	bne.n	8007836 <_scanf_float+0x66>
 8007904:	2508      	movs	r5, #8
 8007906:	e02f      	b.n	8007968 <_scanf_float+0x198>
 8007908:	2b74      	cmp	r3, #116	@ 0x74
 800790a:	d073      	beq.n	80079f4 <_scanf_float+0x224>
 800790c:	2b79      	cmp	r3, #121	@ 0x79
 800790e:	e7f6      	b.n	80078fe <_scanf_float+0x12e>
 8007910:	6821      	ldr	r1, [r4, #0]
 8007912:	05c8      	lsls	r0, r1, #23
 8007914:	d51e      	bpl.n	8007954 <_scanf_float+0x184>
 8007916:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 800791a:	6021      	str	r1, [r4, #0]
 800791c:	3701      	adds	r7, #1
 800791e:	f1bb 0f00 	cmp.w	fp, #0
 8007922:	d003      	beq.n	800792c <_scanf_float+0x15c>
 8007924:	3201      	adds	r2, #1
 8007926:	f10b 3bff 	add.w	fp, fp, #4294967295
 800792a:	60a2      	str	r2, [r4, #8]
 800792c:	68a3      	ldr	r3, [r4, #8]
 800792e:	3b01      	subs	r3, #1
 8007930:	60a3      	str	r3, [r4, #8]
 8007932:	6923      	ldr	r3, [r4, #16]
 8007934:	3301      	adds	r3, #1
 8007936:	6123      	str	r3, [r4, #16]
 8007938:	f8d9 3004 	ldr.w	r3, [r9, #4]
 800793c:	3b01      	subs	r3, #1
 800793e:	2b00      	cmp	r3, #0
 8007940:	f8c9 3004 	str.w	r3, [r9, #4]
 8007944:	f340 8082 	ble.w	8007a4c <_scanf_float+0x27c>
 8007948:	f8d9 3000 	ldr.w	r3, [r9]
 800794c:	3301      	adds	r3, #1
 800794e:	f8c9 3000 	str.w	r3, [r9]
 8007952:	e762      	b.n	800781a <_scanf_float+0x4a>
 8007954:	eb1a 0105 	adds.w	r1, sl, r5
 8007958:	f47f af6d 	bne.w	8007836 <_scanf_float+0x66>
 800795c:	6822      	ldr	r2, [r4, #0]
 800795e:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8007962:	6022      	str	r2, [r4, #0]
 8007964:	460d      	mov	r5, r1
 8007966:	468a      	mov	sl, r1
 8007968:	f806 3b01 	strb.w	r3, [r6], #1
 800796c:	e7de      	b.n	800792c <_scanf_float+0x15c>
 800796e:	6822      	ldr	r2, [r4, #0]
 8007970:	0610      	lsls	r0, r2, #24
 8007972:	f57f af60 	bpl.w	8007836 <_scanf_float+0x66>
 8007976:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800797a:	6022      	str	r2, [r4, #0]
 800797c:	e7f4      	b.n	8007968 <_scanf_float+0x198>
 800797e:	f1ba 0f00 	cmp.w	sl, #0
 8007982:	d10c      	bne.n	800799e <_scanf_float+0x1ce>
 8007984:	b977      	cbnz	r7, 80079a4 <_scanf_float+0x1d4>
 8007986:	6822      	ldr	r2, [r4, #0]
 8007988:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 800798c:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8007990:	d108      	bne.n	80079a4 <_scanf_float+0x1d4>
 8007992:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007996:	6022      	str	r2, [r4, #0]
 8007998:	f04f 0a01 	mov.w	sl, #1
 800799c:	e7e4      	b.n	8007968 <_scanf_float+0x198>
 800799e:	f1ba 0f02 	cmp.w	sl, #2
 80079a2:	d050      	beq.n	8007a46 <_scanf_float+0x276>
 80079a4:	2d01      	cmp	r5, #1
 80079a6:	d002      	beq.n	80079ae <_scanf_float+0x1de>
 80079a8:	2d04      	cmp	r5, #4
 80079aa:	f47f af44 	bne.w	8007836 <_scanf_float+0x66>
 80079ae:	3501      	adds	r5, #1
 80079b0:	b2ed      	uxtb	r5, r5
 80079b2:	e7d9      	b.n	8007968 <_scanf_float+0x198>
 80079b4:	f1ba 0f01 	cmp.w	sl, #1
 80079b8:	f47f af3d 	bne.w	8007836 <_scanf_float+0x66>
 80079bc:	f04f 0a02 	mov.w	sl, #2
 80079c0:	e7d2      	b.n	8007968 <_scanf_float+0x198>
 80079c2:	b975      	cbnz	r5, 80079e2 <_scanf_float+0x212>
 80079c4:	2f00      	cmp	r7, #0
 80079c6:	f47f af37 	bne.w	8007838 <_scanf_float+0x68>
 80079ca:	6822      	ldr	r2, [r4, #0]
 80079cc:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 80079d0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 80079d4:	f040 8103 	bne.w	8007bde <_scanf_float+0x40e>
 80079d8:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 80079dc:	6022      	str	r2, [r4, #0]
 80079de:	2501      	movs	r5, #1
 80079e0:	e7c2      	b.n	8007968 <_scanf_float+0x198>
 80079e2:	2d03      	cmp	r5, #3
 80079e4:	d0e3      	beq.n	80079ae <_scanf_float+0x1de>
 80079e6:	2d05      	cmp	r5, #5
 80079e8:	e7df      	b.n	80079aa <_scanf_float+0x1da>
 80079ea:	2d02      	cmp	r5, #2
 80079ec:	f47f af23 	bne.w	8007836 <_scanf_float+0x66>
 80079f0:	2503      	movs	r5, #3
 80079f2:	e7b9      	b.n	8007968 <_scanf_float+0x198>
 80079f4:	2d06      	cmp	r5, #6
 80079f6:	f47f af1e 	bne.w	8007836 <_scanf_float+0x66>
 80079fa:	2507      	movs	r5, #7
 80079fc:	e7b4      	b.n	8007968 <_scanf_float+0x198>
 80079fe:	6822      	ldr	r2, [r4, #0]
 8007a00:	0591      	lsls	r1, r2, #22
 8007a02:	f57f af18 	bpl.w	8007836 <_scanf_float+0x66>
 8007a06:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 8007a0a:	6022      	str	r2, [r4, #0]
 8007a0c:	9702      	str	r7, [sp, #8]
 8007a0e:	e7ab      	b.n	8007968 <_scanf_float+0x198>
 8007a10:	6822      	ldr	r2, [r4, #0]
 8007a12:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 8007a16:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 8007a1a:	d005      	beq.n	8007a28 <_scanf_float+0x258>
 8007a1c:	0550      	lsls	r0, r2, #21
 8007a1e:	f57f af0a 	bpl.w	8007836 <_scanf_float+0x66>
 8007a22:	2f00      	cmp	r7, #0
 8007a24:	f000 80db 	beq.w	8007bde <_scanf_float+0x40e>
 8007a28:	0591      	lsls	r1, r2, #22
 8007a2a:	bf58      	it	pl
 8007a2c:	9902      	ldrpl	r1, [sp, #8]
 8007a2e:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007a32:	bf58      	it	pl
 8007a34:	1a79      	subpl	r1, r7, r1
 8007a36:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 8007a3a:	bf58      	it	pl
 8007a3c:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007a40:	6022      	str	r2, [r4, #0]
 8007a42:	2700      	movs	r7, #0
 8007a44:	e790      	b.n	8007968 <_scanf_float+0x198>
 8007a46:	f04f 0a03 	mov.w	sl, #3
 8007a4a:	e78d      	b.n	8007968 <_scanf_float+0x198>
 8007a4c:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007a50:	4649      	mov	r1, r9
 8007a52:	4640      	mov	r0, r8
 8007a54:	4798      	blx	r3
 8007a56:	2800      	cmp	r0, #0
 8007a58:	f43f aedf 	beq.w	800781a <_scanf_float+0x4a>
 8007a5c:	e6eb      	b.n	8007836 <_scanf_float+0x66>
 8007a5e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a62:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a66:	464a      	mov	r2, r9
 8007a68:	4640      	mov	r0, r8
 8007a6a:	4798      	blx	r3
 8007a6c:	6923      	ldr	r3, [r4, #16]
 8007a6e:	3b01      	subs	r3, #1
 8007a70:	6123      	str	r3, [r4, #16]
 8007a72:	e6eb      	b.n	800784c <_scanf_float+0x7c>
 8007a74:	1e6b      	subs	r3, r5, #1
 8007a76:	2b06      	cmp	r3, #6
 8007a78:	d824      	bhi.n	8007ac4 <_scanf_float+0x2f4>
 8007a7a:	2d02      	cmp	r5, #2
 8007a7c:	d836      	bhi.n	8007aec <_scanf_float+0x31c>
 8007a7e:	9b01      	ldr	r3, [sp, #4]
 8007a80:	429e      	cmp	r6, r3
 8007a82:	f67f aee7 	bls.w	8007854 <_scanf_float+0x84>
 8007a86:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007a8a:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007a8e:	464a      	mov	r2, r9
 8007a90:	4640      	mov	r0, r8
 8007a92:	4798      	blx	r3
 8007a94:	6923      	ldr	r3, [r4, #16]
 8007a96:	3b01      	subs	r3, #1
 8007a98:	6123      	str	r3, [r4, #16]
 8007a9a:	e7f0      	b.n	8007a7e <_scanf_float+0x2ae>
 8007a9c:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007aa0:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 8007aa4:	464a      	mov	r2, r9
 8007aa6:	4640      	mov	r0, r8
 8007aa8:	4798      	blx	r3
 8007aaa:	6923      	ldr	r3, [r4, #16]
 8007aac:	3b01      	subs	r3, #1
 8007aae:	6123      	str	r3, [r4, #16]
 8007ab0:	f10a 3aff 	add.w	sl, sl, #4294967295
 8007ab4:	fa5f fa8a 	uxtb.w	sl, sl
 8007ab8:	f1ba 0f02 	cmp.w	sl, #2
 8007abc:	d1ee      	bne.n	8007a9c <_scanf_float+0x2cc>
 8007abe:	3d03      	subs	r5, #3
 8007ac0:	b2ed      	uxtb	r5, r5
 8007ac2:	1b76      	subs	r6, r6, r5
 8007ac4:	6823      	ldr	r3, [r4, #0]
 8007ac6:	05da      	lsls	r2, r3, #23
 8007ac8:	d530      	bpl.n	8007b2c <_scanf_float+0x35c>
 8007aca:	055b      	lsls	r3, r3, #21
 8007acc:	d511      	bpl.n	8007af2 <_scanf_float+0x322>
 8007ace:	9b01      	ldr	r3, [sp, #4]
 8007ad0:	429e      	cmp	r6, r3
 8007ad2:	f67f aebf 	bls.w	8007854 <_scanf_float+0x84>
 8007ad6:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007ada:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 8007ade:	464a      	mov	r2, r9
 8007ae0:	4640      	mov	r0, r8
 8007ae2:	4798      	blx	r3
 8007ae4:	6923      	ldr	r3, [r4, #16]
 8007ae6:	3b01      	subs	r3, #1
 8007ae8:	6123      	str	r3, [r4, #16]
 8007aea:	e7f0      	b.n	8007ace <_scanf_float+0x2fe>
 8007aec:	46aa      	mov	sl, r5
 8007aee:	46b3      	mov	fp, r6
 8007af0:	e7de      	b.n	8007ab0 <_scanf_float+0x2e0>
 8007af2:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 8007af6:	6923      	ldr	r3, [r4, #16]
 8007af8:	2965      	cmp	r1, #101	@ 0x65
 8007afa:	f103 33ff 	add.w	r3, r3, #4294967295
 8007afe:	f106 35ff 	add.w	r5, r6, #4294967295
 8007b02:	6123      	str	r3, [r4, #16]
 8007b04:	d00c      	beq.n	8007b20 <_scanf_float+0x350>
 8007b06:	2945      	cmp	r1, #69	@ 0x45
 8007b08:	d00a      	beq.n	8007b20 <_scanf_float+0x350>
 8007b0a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b0e:	464a      	mov	r2, r9
 8007b10:	4640      	mov	r0, r8
 8007b12:	4798      	blx	r3
 8007b14:	6923      	ldr	r3, [r4, #16]
 8007b16:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 8007b1a:	3b01      	subs	r3, #1
 8007b1c:	1eb5      	subs	r5, r6, #2
 8007b1e:	6123      	str	r3, [r4, #16]
 8007b20:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007b24:	464a      	mov	r2, r9
 8007b26:	4640      	mov	r0, r8
 8007b28:	4798      	blx	r3
 8007b2a:	462e      	mov	r6, r5
 8007b2c:	6822      	ldr	r2, [r4, #0]
 8007b2e:	f012 0210 	ands.w	r2, r2, #16
 8007b32:	d001      	beq.n	8007b38 <_scanf_float+0x368>
 8007b34:	2000      	movs	r0, #0
 8007b36:	e68e      	b.n	8007856 <_scanf_float+0x86>
 8007b38:	7032      	strb	r2, [r6, #0]
 8007b3a:	6823      	ldr	r3, [r4, #0]
 8007b3c:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007b40:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007b44:	d125      	bne.n	8007b92 <_scanf_float+0x3c2>
 8007b46:	9b02      	ldr	r3, [sp, #8]
 8007b48:	429f      	cmp	r7, r3
 8007b4a:	d00a      	beq.n	8007b62 <_scanf_float+0x392>
 8007b4c:	1bda      	subs	r2, r3, r7
 8007b4e:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007b52:	429e      	cmp	r6, r3
 8007b54:	bf28      	it	cs
 8007b56:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 8007b5a:	4922      	ldr	r1, [pc, #136]	@ (8007be4 <_scanf_float+0x414>)
 8007b5c:	4630      	mov	r0, r6
 8007b5e:	f000 f965 	bl	8007e2c <siprintf>
 8007b62:	9901      	ldr	r1, [sp, #4]
 8007b64:	2200      	movs	r2, #0
 8007b66:	4640      	mov	r0, r8
 8007b68:	f002 fd22 	bl	800a5b0 <_strtod_r>
 8007b6c:	9b03      	ldr	r3, [sp, #12]
 8007b6e:	6821      	ldr	r1, [r4, #0]
 8007b70:	681b      	ldr	r3, [r3, #0]
 8007b72:	f011 0f02 	tst.w	r1, #2
 8007b76:	ec57 6b10 	vmov	r6, r7, d0
 8007b7a:	f103 0204 	add.w	r2, r3, #4
 8007b7e:	d015      	beq.n	8007bac <_scanf_float+0x3dc>
 8007b80:	9903      	ldr	r1, [sp, #12]
 8007b82:	600a      	str	r2, [r1, #0]
 8007b84:	681b      	ldr	r3, [r3, #0]
 8007b86:	e9c3 6700 	strd	r6, r7, [r3]
 8007b8a:	68e3      	ldr	r3, [r4, #12]
 8007b8c:	3301      	adds	r3, #1
 8007b8e:	60e3      	str	r3, [r4, #12]
 8007b90:	e7d0      	b.n	8007b34 <_scanf_float+0x364>
 8007b92:	9b04      	ldr	r3, [sp, #16]
 8007b94:	2b00      	cmp	r3, #0
 8007b96:	d0e4      	beq.n	8007b62 <_scanf_float+0x392>
 8007b98:	9905      	ldr	r1, [sp, #20]
 8007b9a:	230a      	movs	r3, #10
 8007b9c:	3101      	adds	r1, #1
 8007b9e:	4640      	mov	r0, r8
 8007ba0:	f002 fd86 	bl	800a6b0 <_strtol_r>
 8007ba4:	9b04      	ldr	r3, [sp, #16]
 8007ba6:	9e05      	ldr	r6, [sp, #20]
 8007ba8:	1ac2      	subs	r2, r0, r3
 8007baa:	e7d0      	b.n	8007b4e <_scanf_float+0x37e>
 8007bac:	f011 0f04 	tst.w	r1, #4
 8007bb0:	9903      	ldr	r1, [sp, #12]
 8007bb2:	600a      	str	r2, [r1, #0]
 8007bb4:	d1e6      	bne.n	8007b84 <_scanf_float+0x3b4>
 8007bb6:	681d      	ldr	r5, [r3, #0]
 8007bb8:	4632      	mov	r2, r6
 8007bba:	463b      	mov	r3, r7
 8007bbc:	4630      	mov	r0, r6
 8007bbe:	4639      	mov	r1, r7
 8007bc0:	f7f8 ffbc 	bl	8000b3c <__aeabi_dcmpun>
 8007bc4:	b128      	cbz	r0, 8007bd2 <_scanf_float+0x402>
 8007bc6:	4808      	ldr	r0, [pc, #32]	@ (8007be8 <_scanf_float+0x418>)
 8007bc8:	f000 fae8 	bl	800819c <nanf>
 8007bcc:	ed85 0a00 	vstr	s0, [r5]
 8007bd0:	e7db      	b.n	8007b8a <_scanf_float+0x3ba>
 8007bd2:	4630      	mov	r0, r6
 8007bd4:	4639      	mov	r1, r7
 8007bd6:	f7f9 f80f 	bl	8000bf8 <__aeabi_d2f>
 8007bda:	6028      	str	r0, [r5, #0]
 8007bdc:	e7d5      	b.n	8007b8a <_scanf_float+0x3ba>
 8007bde:	2700      	movs	r7, #0
 8007be0:	e62e      	b.n	8007840 <_scanf_float+0x70>
 8007be2:	bf00      	nop
 8007be4:	0800ba64 	.word	0x0800ba64
 8007be8:	0800bba5 	.word	0x0800bba5

08007bec <std>:
 8007bec:	2300      	movs	r3, #0
 8007bee:	b510      	push	{r4, lr}
 8007bf0:	4604      	mov	r4, r0
 8007bf2:	e9c0 3300 	strd	r3, r3, [r0]
 8007bf6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8007bfa:	6083      	str	r3, [r0, #8]
 8007bfc:	8181      	strh	r1, [r0, #12]
 8007bfe:	6643      	str	r3, [r0, #100]	@ 0x64
 8007c00:	81c2      	strh	r2, [r0, #14]
 8007c02:	6183      	str	r3, [r0, #24]
 8007c04:	4619      	mov	r1, r3
 8007c06:	2208      	movs	r2, #8
 8007c08:	305c      	adds	r0, #92	@ 0x5c
 8007c0a:	f000 fa23 	bl	8008054 <memset>
 8007c0e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c44 <std+0x58>)
 8007c10:	6263      	str	r3, [r4, #36]	@ 0x24
 8007c12:	4b0d      	ldr	r3, [pc, #52]	@ (8007c48 <std+0x5c>)
 8007c14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8007c16:	4b0d      	ldr	r3, [pc, #52]	@ (8007c4c <std+0x60>)
 8007c18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8007c1a:	4b0d      	ldr	r3, [pc, #52]	@ (8007c50 <std+0x64>)
 8007c1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8007c1e:	4b0d      	ldr	r3, [pc, #52]	@ (8007c54 <std+0x68>)
 8007c20:	6224      	str	r4, [r4, #32]
 8007c22:	429c      	cmp	r4, r3
 8007c24:	d006      	beq.n	8007c34 <std+0x48>
 8007c26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8007c2a:	4294      	cmp	r4, r2
 8007c2c:	d002      	beq.n	8007c34 <std+0x48>
 8007c2e:	33d0      	adds	r3, #208	@ 0xd0
 8007c30:	429c      	cmp	r4, r3
 8007c32:	d105      	bne.n	8007c40 <std+0x54>
 8007c34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8007c38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c3c:	f000 ba9c 	b.w	8008178 <__retarget_lock_init_recursive>
 8007c40:	bd10      	pop	{r4, pc}
 8007c42:	bf00      	nop
 8007c44:	08007e71 	.word	0x08007e71
 8007c48:	08007e93 	.word	0x08007e93
 8007c4c:	08007ecb 	.word	0x08007ecb
 8007c50:	08007eef 	.word	0x08007eef
 8007c54:	200007f8 	.word	0x200007f8

08007c58 <stdio_exit_handler>:
 8007c58:	4a02      	ldr	r2, [pc, #8]	@ (8007c64 <stdio_exit_handler+0xc>)
 8007c5a:	4903      	ldr	r1, [pc, #12]	@ (8007c68 <stdio_exit_handler+0x10>)
 8007c5c:	4803      	ldr	r0, [pc, #12]	@ (8007c6c <stdio_exit_handler+0x14>)
 8007c5e:	f000 b869 	b.w	8007d34 <_fwalk_sglue>
 8007c62:	bf00      	nop
 8007c64:	20000028 	.word	0x20000028
 8007c68:	0800aa6d 	.word	0x0800aa6d
 8007c6c:	20000038 	.word	0x20000038

08007c70 <cleanup_stdio>:
 8007c70:	6841      	ldr	r1, [r0, #4]
 8007c72:	4b0c      	ldr	r3, [pc, #48]	@ (8007ca4 <cleanup_stdio+0x34>)
 8007c74:	4299      	cmp	r1, r3
 8007c76:	b510      	push	{r4, lr}
 8007c78:	4604      	mov	r4, r0
 8007c7a:	d001      	beq.n	8007c80 <cleanup_stdio+0x10>
 8007c7c:	f002 fef6 	bl	800aa6c <_fflush_r>
 8007c80:	68a1      	ldr	r1, [r4, #8]
 8007c82:	4b09      	ldr	r3, [pc, #36]	@ (8007ca8 <cleanup_stdio+0x38>)
 8007c84:	4299      	cmp	r1, r3
 8007c86:	d002      	beq.n	8007c8e <cleanup_stdio+0x1e>
 8007c88:	4620      	mov	r0, r4
 8007c8a:	f002 feef 	bl	800aa6c <_fflush_r>
 8007c8e:	68e1      	ldr	r1, [r4, #12]
 8007c90:	4b06      	ldr	r3, [pc, #24]	@ (8007cac <cleanup_stdio+0x3c>)
 8007c92:	4299      	cmp	r1, r3
 8007c94:	d004      	beq.n	8007ca0 <cleanup_stdio+0x30>
 8007c96:	4620      	mov	r0, r4
 8007c98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007c9c:	f002 bee6 	b.w	800aa6c <_fflush_r>
 8007ca0:	bd10      	pop	{r4, pc}
 8007ca2:	bf00      	nop
 8007ca4:	200007f8 	.word	0x200007f8
 8007ca8:	20000860 	.word	0x20000860
 8007cac:	200008c8 	.word	0x200008c8

08007cb0 <global_stdio_init.part.0>:
 8007cb0:	b510      	push	{r4, lr}
 8007cb2:	4b0b      	ldr	r3, [pc, #44]	@ (8007ce0 <global_stdio_init.part.0+0x30>)
 8007cb4:	4c0b      	ldr	r4, [pc, #44]	@ (8007ce4 <global_stdio_init.part.0+0x34>)
 8007cb6:	4a0c      	ldr	r2, [pc, #48]	@ (8007ce8 <global_stdio_init.part.0+0x38>)
 8007cb8:	601a      	str	r2, [r3, #0]
 8007cba:	4620      	mov	r0, r4
 8007cbc:	2200      	movs	r2, #0
 8007cbe:	2104      	movs	r1, #4
 8007cc0:	f7ff ff94 	bl	8007bec <std>
 8007cc4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8007cc8:	2201      	movs	r2, #1
 8007cca:	2109      	movs	r1, #9
 8007ccc:	f7ff ff8e 	bl	8007bec <std>
 8007cd0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8007cd4:	2202      	movs	r2, #2
 8007cd6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007cda:	2112      	movs	r1, #18
 8007cdc:	f7ff bf86 	b.w	8007bec <std>
 8007ce0:	20000930 	.word	0x20000930
 8007ce4:	200007f8 	.word	0x200007f8
 8007ce8:	08007c59 	.word	0x08007c59

08007cec <__sfp_lock_acquire>:
 8007cec:	4801      	ldr	r0, [pc, #4]	@ (8007cf4 <__sfp_lock_acquire+0x8>)
 8007cee:	f000 ba44 	b.w	800817a <__retarget_lock_acquire_recursive>
 8007cf2:	bf00      	nop
 8007cf4:	20000939 	.word	0x20000939

08007cf8 <__sfp_lock_release>:
 8007cf8:	4801      	ldr	r0, [pc, #4]	@ (8007d00 <__sfp_lock_release+0x8>)
 8007cfa:	f000 ba3f 	b.w	800817c <__retarget_lock_release_recursive>
 8007cfe:	bf00      	nop
 8007d00:	20000939 	.word	0x20000939

08007d04 <__sinit>:
 8007d04:	b510      	push	{r4, lr}
 8007d06:	4604      	mov	r4, r0
 8007d08:	f7ff fff0 	bl	8007cec <__sfp_lock_acquire>
 8007d0c:	6a23      	ldr	r3, [r4, #32]
 8007d0e:	b11b      	cbz	r3, 8007d18 <__sinit+0x14>
 8007d10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007d14:	f7ff bff0 	b.w	8007cf8 <__sfp_lock_release>
 8007d18:	4b04      	ldr	r3, [pc, #16]	@ (8007d2c <__sinit+0x28>)
 8007d1a:	6223      	str	r3, [r4, #32]
 8007d1c:	4b04      	ldr	r3, [pc, #16]	@ (8007d30 <__sinit+0x2c>)
 8007d1e:	681b      	ldr	r3, [r3, #0]
 8007d20:	2b00      	cmp	r3, #0
 8007d22:	d1f5      	bne.n	8007d10 <__sinit+0xc>
 8007d24:	f7ff ffc4 	bl	8007cb0 <global_stdio_init.part.0>
 8007d28:	e7f2      	b.n	8007d10 <__sinit+0xc>
 8007d2a:	bf00      	nop
 8007d2c:	08007c71 	.word	0x08007c71
 8007d30:	20000930 	.word	0x20000930

08007d34 <_fwalk_sglue>:
 8007d34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d38:	4607      	mov	r7, r0
 8007d3a:	4688      	mov	r8, r1
 8007d3c:	4614      	mov	r4, r2
 8007d3e:	2600      	movs	r6, #0
 8007d40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007d44:	f1b9 0901 	subs.w	r9, r9, #1
 8007d48:	d505      	bpl.n	8007d56 <_fwalk_sglue+0x22>
 8007d4a:	6824      	ldr	r4, [r4, #0]
 8007d4c:	2c00      	cmp	r4, #0
 8007d4e:	d1f7      	bne.n	8007d40 <_fwalk_sglue+0xc>
 8007d50:	4630      	mov	r0, r6
 8007d52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d56:	89ab      	ldrh	r3, [r5, #12]
 8007d58:	2b01      	cmp	r3, #1
 8007d5a:	d907      	bls.n	8007d6c <_fwalk_sglue+0x38>
 8007d5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007d60:	3301      	adds	r3, #1
 8007d62:	d003      	beq.n	8007d6c <_fwalk_sglue+0x38>
 8007d64:	4629      	mov	r1, r5
 8007d66:	4638      	mov	r0, r7
 8007d68:	47c0      	blx	r8
 8007d6a:	4306      	orrs	r6, r0
 8007d6c:	3568      	adds	r5, #104	@ 0x68
 8007d6e:	e7e9      	b.n	8007d44 <_fwalk_sglue+0x10>

08007d70 <_puts_r>:
 8007d70:	6a03      	ldr	r3, [r0, #32]
 8007d72:	b570      	push	{r4, r5, r6, lr}
 8007d74:	6884      	ldr	r4, [r0, #8]
 8007d76:	4605      	mov	r5, r0
 8007d78:	460e      	mov	r6, r1
 8007d7a:	b90b      	cbnz	r3, 8007d80 <_puts_r+0x10>
 8007d7c:	f7ff ffc2 	bl	8007d04 <__sinit>
 8007d80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007d82:	07db      	lsls	r3, r3, #31
 8007d84:	d405      	bmi.n	8007d92 <_puts_r+0x22>
 8007d86:	89a3      	ldrh	r3, [r4, #12]
 8007d88:	0598      	lsls	r0, r3, #22
 8007d8a:	d402      	bmi.n	8007d92 <_puts_r+0x22>
 8007d8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007d8e:	f000 f9f4 	bl	800817a <__retarget_lock_acquire_recursive>
 8007d92:	89a3      	ldrh	r3, [r4, #12]
 8007d94:	0719      	lsls	r1, r3, #28
 8007d96:	d502      	bpl.n	8007d9e <_puts_r+0x2e>
 8007d98:	6923      	ldr	r3, [r4, #16]
 8007d9a:	2b00      	cmp	r3, #0
 8007d9c:	d135      	bne.n	8007e0a <_puts_r+0x9a>
 8007d9e:	4621      	mov	r1, r4
 8007da0:	4628      	mov	r0, r5
 8007da2:	f000 f8e7 	bl	8007f74 <__swsetup_r>
 8007da6:	b380      	cbz	r0, 8007e0a <_puts_r+0x9a>
 8007da8:	f04f 35ff 	mov.w	r5, #4294967295
 8007dac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8007dae:	07da      	lsls	r2, r3, #31
 8007db0:	d405      	bmi.n	8007dbe <_puts_r+0x4e>
 8007db2:	89a3      	ldrh	r3, [r4, #12]
 8007db4:	059b      	lsls	r3, r3, #22
 8007db6:	d402      	bmi.n	8007dbe <_puts_r+0x4e>
 8007db8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8007dba:	f000 f9df 	bl	800817c <__retarget_lock_release_recursive>
 8007dbe:	4628      	mov	r0, r5
 8007dc0:	bd70      	pop	{r4, r5, r6, pc}
 8007dc2:	2b00      	cmp	r3, #0
 8007dc4:	da04      	bge.n	8007dd0 <_puts_r+0x60>
 8007dc6:	69a2      	ldr	r2, [r4, #24]
 8007dc8:	429a      	cmp	r2, r3
 8007dca:	dc17      	bgt.n	8007dfc <_puts_r+0x8c>
 8007dcc:	290a      	cmp	r1, #10
 8007dce:	d015      	beq.n	8007dfc <_puts_r+0x8c>
 8007dd0:	6823      	ldr	r3, [r4, #0]
 8007dd2:	1c5a      	adds	r2, r3, #1
 8007dd4:	6022      	str	r2, [r4, #0]
 8007dd6:	7019      	strb	r1, [r3, #0]
 8007dd8:	68a3      	ldr	r3, [r4, #8]
 8007dda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007dde:	3b01      	subs	r3, #1
 8007de0:	60a3      	str	r3, [r4, #8]
 8007de2:	2900      	cmp	r1, #0
 8007de4:	d1ed      	bne.n	8007dc2 <_puts_r+0x52>
 8007de6:	2b00      	cmp	r3, #0
 8007de8:	da11      	bge.n	8007e0e <_puts_r+0x9e>
 8007dea:	4622      	mov	r2, r4
 8007dec:	210a      	movs	r1, #10
 8007dee:	4628      	mov	r0, r5
 8007df0:	f000 f881 	bl	8007ef6 <__swbuf_r>
 8007df4:	3001      	adds	r0, #1
 8007df6:	d0d7      	beq.n	8007da8 <_puts_r+0x38>
 8007df8:	250a      	movs	r5, #10
 8007dfa:	e7d7      	b.n	8007dac <_puts_r+0x3c>
 8007dfc:	4622      	mov	r2, r4
 8007dfe:	4628      	mov	r0, r5
 8007e00:	f000 f879 	bl	8007ef6 <__swbuf_r>
 8007e04:	3001      	adds	r0, #1
 8007e06:	d1e7      	bne.n	8007dd8 <_puts_r+0x68>
 8007e08:	e7ce      	b.n	8007da8 <_puts_r+0x38>
 8007e0a:	3e01      	subs	r6, #1
 8007e0c:	e7e4      	b.n	8007dd8 <_puts_r+0x68>
 8007e0e:	6823      	ldr	r3, [r4, #0]
 8007e10:	1c5a      	adds	r2, r3, #1
 8007e12:	6022      	str	r2, [r4, #0]
 8007e14:	220a      	movs	r2, #10
 8007e16:	701a      	strb	r2, [r3, #0]
 8007e18:	e7ee      	b.n	8007df8 <_puts_r+0x88>
	...

08007e1c <puts>:
 8007e1c:	4b02      	ldr	r3, [pc, #8]	@ (8007e28 <puts+0xc>)
 8007e1e:	4601      	mov	r1, r0
 8007e20:	6818      	ldr	r0, [r3, #0]
 8007e22:	f7ff bfa5 	b.w	8007d70 <_puts_r>
 8007e26:	bf00      	nop
 8007e28:	20000034 	.word	0x20000034

08007e2c <siprintf>:
 8007e2c:	b40e      	push	{r1, r2, r3}
 8007e2e:	b510      	push	{r4, lr}
 8007e30:	b09d      	sub	sp, #116	@ 0x74
 8007e32:	ab1f      	add	r3, sp, #124	@ 0x7c
 8007e34:	9002      	str	r0, [sp, #8]
 8007e36:	9006      	str	r0, [sp, #24]
 8007e38:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007e3c:	480a      	ldr	r0, [pc, #40]	@ (8007e68 <siprintf+0x3c>)
 8007e3e:	9107      	str	r1, [sp, #28]
 8007e40:	9104      	str	r1, [sp, #16]
 8007e42:	490a      	ldr	r1, [pc, #40]	@ (8007e6c <siprintf+0x40>)
 8007e44:	f853 2b04 	ldr.w	r2, [r3], #4
 8007e48:	9105      	str	r1, [sp, #20]
 8007e4a:	2400      	movs	r4, #0
 8007e4c:	a902      	add	r1, sp, #8
 8007e4e:	6800      	ldr	r0, [r0, #0]
 8007e50:	9301      	str	r3, [sp, #4]
 8007e52:	941b      	str	r4, [sp, #108]	@ 0x6c
 8007e54:	f002 fc8a 	bl	800a76c <_svfiprintf_r>
 8007e58:	9b02      	ldr	r3, [sp, #8]
 8007e5a:	701c      	strb	r4, [r3, #0]
 8007e5c:	b01d      	add	sp, #116	@ 0x74
 8007e5e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007e62:	b003      	add	sp, #12
 8007e64:	4770      	bx	lr
 8007e66:	bf00      	nop
 8007e68:	20000034 	.word	0x20000034
 8007e6c:	ffff0208 	.word	0xffff0208

08007e70 <__sread>:
 8007e70:	b510      	push	{r4, lr}
 8007e72:	460c      	mov	r4, r1
 8007e74:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007e78:	f000 f930 	bl	80080dc <_read_r>
 8007e7c:	2800      	cmp	r0, #0
 8007e7e:	bfab      	itete	ge
 8007e80:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8007e82:	89a3      	ldrhlt	r3, [r4, #12]
 8007e84:	181b      	addge	r3, r3, r0
 8007e86:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8007e8a:	bfac      	ite	ge
 8007e8c:	6563      	strge	r3, [r4, #84]	@ 0x54
 8007e8e:	81a3      	strhlt	r3, [r4, #12]
 8007e90:	bd10      	pop	{r4, pc}

08007e92 <__swrite>:
 8007e92:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007e96:	461f      	mov	r7, r3
 8007e98:	898b      	ldrh	r3, [r1, #12]
 8007e9a:	05db      	lsls	r3, r3, #23
 8007e9c:	4605      	mov	r5, r0
 8007e9e:	460c      	mov	r4, r1
 8007ea0:	4616      	mov	r6, r2
 8007ea2:	d505      	bpl.n	8007eb0 <__swrite+0x1e>
 8007ea4:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ea8:	2302      	movs	r3, #2
 8007eaa:	2200      	movs	r2, #0
 8007eac:	f000 f904 	bl	80080b8 <_lseek_r>
 8007eb0:	89a3      	ldrh	r3, [r4, #12]
 8007eb2:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8007eb6:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8007eba:	81a3      	strh	r3, [r4, #12]
 8007ebc:	4632      	mov	r2, r6
 8007ebe:	463b      	mov	r3, r7
 8007ec0:	4628      	mov	r0, r5
 8007ec2:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8007ec6:	f000 b91b 	b.w	8008100 <_write_r>

08007eca <__sseek>:
 8007eca:	b510      	push	{r4, lr}
 8007ecc:	460c      	mov	r4, r1
 8007ece:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ed2:	f000 f8f1 	bl	80080b8 <_lseek_r>
 8007ed6:	1c43      	adds	r3, r0, #1
 8007ed8:	89a3      	ldrh	r3, [r4, #12]
 8007eda:	bf15      	itete	ne
 8007edc:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007ede:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8007ee2:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8007ee6:	81a3      	strheq	r3, [r4, #12]
 8007ee8:	bf18      	it	ne
 8007eea:	81a3      	strhne	r3, [r4, #12]
 8007eec:	bd10      	pop	{r4, pc}

08007eee <__sclose>:
 8007eee:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8007ef2:	f000 b8d1 	b.w	8008098 <_close_r>

08007ef6 <__swbuf_r>:
 8007ef6:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007ef8:	460e      	mov	r6, r1
 8007efa:	4614      	mov	r4, r2
 8007efc:	4605      	mov	r5, r0
 8007efe:	b118      	cbz	r0, 8007f08 <__swbuf_r+0x12>
 8007f00:	6a03      	ldr	r3, [r0, #32]
 8007f02:	b90b      	cbnz	r3, 8007f08 <__swbuf_r+0x12>
 8007f04:	f7ff fefe 	bl	8007d04 <__sinit>
 8007f08:	69a3      	ldr	r3, [r4, #24]
 8007f0a:	60a3      	str	r3, [r4, #8]
 8007f0c:	89a3      	ldrh	r3, [r4, #12]
 8007f0e:	071a      	lsls	r2, r3, #28
 8007f10:	d501      	bpl.n	8007f16 <__swbuf_r+0x20>
 8007f12:	6923      	ldr	r3, [r4, #16]
 8007f14:	b943      	cbnz	r3, 8007f28 <__swbuf_r+0x32>
 8007f16:	4621      	mov	r1, r4
 8007f18:	4628      	mov	r0, r5
 8007f1a:	f000 f82b 	bl	8007f74 <__swsetup_r>
 8007f1e:	b118      	cbz	r0, 8007f28 <__swbuf_r+0x32>
 8007f20:	f04f 37ff 	mov.w	r7, #4294967295
 8007f24:	4638      	mov	r0, r7
 8007f26:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007f28:	6823      	ldr	r3, [r4, #0]
 8007f2a:	6922      	ldr	r2, [r4, #16]
 8007f2c:	1a98      	subs	r0, r3, r2
 8007f2e:	6963      	ldr	r3, [r4, #20]
 8007f30:	b2f6      	uxtb	r6, r6
 8007f32:	4283      	cmp	r3, r0
 8007f34:	4637      	mov	r7, r6
 8007f36:	dc05      	bgt.n	8007f44 <__swbuf_r+0x4e>
 8007f38:	4621      	mov	r1, r4
 8007f3a:	4628      	mov	r0, r5
 8007f3c:	f002 fd96 	bl	800aa6c <_fflush_r>
 8007f40:	2800      	cmp	r0, #0
 8007f42:	d1ed      	bne.n	8007f20 <__swbuf_r+0x2a>
 8007f44:	68a3      	ldr	r3, [r4, #8]
 8007f46:	3b01      	subs	r3, #1
 8007f48:	60a3      	str	r3, [r4, #8]
 8007f4a:	6823      	ldr	r3, [r4, #0]
 8007f4c:	1c5a      	adds	r2, r3, #1
 8007f4e:	6022      	str	r2, [r4, #0]
 8007f50:	701e      	strb	r6, [r3, #0]
 8007f52:	6962      	ldr	r2, [r4, #20]
 8007f54:	1c43      	adds	r3, r0, #1
 8007f56:	429a      	cmp	r2, r3
 8007f58:	d004      	beq.n	8007f64 <__swbuf_r+0x6e>
 8007f5a:	89a3      	ldrh	r3, [r4, #12]
 8007f5c:	07db      	lsls	r3, r3, #31
 8007f5e:	d5e1      	bpl.n	8007f24 <__swbuf_r+0x2e>
 8007f60:	2e0a      	cmp	r6, #10
 8007f62:	d1df      	bne.n	8007f24 <__swbuf_r+0x2e>
 8007f64:	4621      	mov	r1, r4
 8007f66:	4628      	mov	r0, r5
 8007f68:	f002 fd80 	bl	800aa6c <_fflush_r>
 8007f6c:	2800      	cmp	r0, #0
 8007f6e:	d0d9      	beq.n	8007f24 <__swbuf_r+0x2e>
 8007f70:	e7d6      	b.n	8007f20 <__swbuf_r+0x2a>
	...

08007f74 <__swsetup_r>:
 8007f74:	b538      	push	{r3, r4, r5, lr}
 8007f76:	4b29      	ldr	r3, [pc, #164]	@ (800801c <__swsetup_r+0xa8>)
 8007f78:	4605      	mov	r5, r0
 8007f7a:	6818      	ldr	r0, [r3, #0]
 8007f7c:	460c      	mov	r4, r1
 8007f7e:	b118      	cbz	r0, 8007f88 <__swsetup_r+0x14>
 8007f80:	6a03      	ldr	r3, [r0, #32]
 8007f82:	b90b      	cbnz	r3, 8007f88 <__swsetup_r+0x14>
 8007f84:	f7ff febe 	bl	8007d04 <__sinit>
 8007f88:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007f8c:	0719      	lsls	r1, r3, #28
 8007f8e:	d422      	bmi.n	8007fd6 <__swsetup_r+0x62>
 8007f90:	06da      	lsls	r2, r3, #27
 8007f92:	d407      	bmi.n	8007fa4 <__swsetup_r+0x30>
 8007f94:	2209      	movs	r2, #9
 8007f96:	602a      	str	r2, [r5, #0]
 8007f98:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8007f9c:	81a3      	strh	r3, [r4, #12]
 8007f9e:	f04f 30ff 	mov.w	r0, #4294967295
 8007fa2:	e033      	b.n	800800c <__swsetup_r+0x98>
 8007fa4:	0758      	lsls	r0, r3, #29
 8007fa6:	d512      	bpl.n	8007fce <__swsetup_r+0x5a>
 8007fa8:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8007faa:	b141      	cbz	r1, 8007fbe <__swsetup_r+0x4a>
 8007fac:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8007fb0:	4299      	cmp	r1, r3
 8007fb2:	d002      	beq.n	8007fba <__swsetup_r+0x46>
 8007fb4:	4628      	mov	r0, r5
 8007fb6:	f000 ff4f 	bl	8008e58 <_free_r>
 8007fba:	2300      	movs	r3, #0
 8007fbc:	6363      	str	r3, [r4, #52]	@ 0x34
 8007fbe:	89a3      	ldrh	r3, [r4, #12]
 8007fc0:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8007fc4:	81a3      	strh	r3, [r4, #12]
 8007fc6:	2300      	movs	r3, #0
 8007fc8:	6063      	str	r3, [r4, #4]
 8007fca:	6923      	ldr	r3, [r4, #16]
 8007fcc:	6023      	str	r3, [r4, #0]
 8007fce:	89a3      	ldrh	r3, [r4, #12]
 8007fd0:	f043 0308 	orr.w	r3, r3, #8
 8007fd4:	81a3      	strh	r3, [r4, #12]
 8007fd6:	6923      	ldr	r3, [r4, #16]
 8007fd8:	b94b      	cbnz	r3, 8007fee <__swsetup_r+0x7a>
 8007fda:	89a3      	ldrh	r3, [r4, #12]
 8007fdc:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007fe0:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8007fe4:	d003      	beq.n	8007fee <__swsetup_r+0x7a>
 8007fe6:	4621      	mov	r1, r4
 8007fe8:	4628      	mov	r0, r5
 8007fea:	f002 fd8d 	bl	800ab08 <__smakebuf_r>
 8007fee:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8007ff2:	f013 0201 	ands.w	r2, r3, #1
 8007ff6:	d00a      	beq.n	800800e <__swsetup_r+0x9a>
 8007ff8:	2200      	movs	r2, #0
 8007ffa:	60a2      	str	r2, [r4, #8]
 8007ffc:	6962      	ldr	r2, [r4, #20]
 8007ffe:	4252      	negs	r2, r2
 8008000:	61a2      	str	r2, [r4, #24]
 8008002:	6922      	ldr	r2, [r4, #16]
 8008004:	b942      	cbnz	r2, 8008018 <__swsetup_r+0xa4>
 8008006:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 800800a:	d1c5      	bne.n	8007f98 <__swsetup_r+0x24>
 800800c:	bd38      	pop	{r3, r4, r5, pc}
 800800e:	0799      	lsls	r1, r3, #30
 8008010:	bf58      	it	pl
 8008012:	6962      	ldrpl	r2, [r4, #20]
 8008014:	60a2      	str	r2, [r4, #8]
 8008016:	e7f4      	b.n	8008002 <__swsetup_r+0x8e>
 8008018:	2000      	movs	r0, #0
 800801a:	e7f7      	b.n	800800c <__swsetup_r+0x98>
 800801c:	20000034 	.word	0x20000034

08008020 <memmove>:
 8008020:	4288      	cmp	r0, r1
 8008022:	b510      	push	{r4, lr}
 8008024:	eb01 0402 	add.w	r4, r1, r2
 8008028:	d902      	bls.n	8008030 <memmove+0x10>
 800802a:	4284      	cmp	r4, r0
 800802c:	4623      	mov	r3, r4
 800802e:	d807      	bhi.n	8008040 <memmove+0x20>
 8008030:	1e43      	subs	r3, r0, #1
 8008032:	42a1      	cmp	r1, r4
 8008034:	d008      	beq.n	8008048 <memmove+0x28>
 8008036:	f811 2b01 	ldrb.w	r2, [r1], #1
 800803a:	f803 2f01 	strb.w	r2, [r3, #1]!
 800803e:	e7f8      	b.n	8008032 <memmove+0x12>
 8008040:	4402      	add	r2, r0
 8008042:	4601      	mov	r1, r0
 8008044:	428a      	cmp	r2, r1
 8008046:	d100      	bne.n	800804a <memmove+0x2a>
 8008048:	bd10      	pop	{r4, pc}
 800804a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800804e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008052:	e7f7      	b.n	8008044 <memmove+0x24>

08008054 <memset>:
 8008054:	4402      	add	r2, r0
 8008056:	4603      	mov	r3, r0
 8008058:	4293      	cmp	r3, r2
 800805a:	d100      	bne.n	800805e <memset+0xa>
 800805c:	4770      	bx	lr
 800805e:	f803 1b01 	strb.w	r1, [r3], #1
 8008062:	e7f9      	b.n	8008058 <memset+0x4>

08008064 <strstr>:
 8008064:	780a      	ldrb	r2, [r1, #0]
 8008066:	b570      	push	{r4, r5, r6, lr}
 8008068:	b96a      	cbnz	r2, 8008086 <strstr+0x22>
 800806a:	bd70      	pop	{r4, r5, r6, pc}
 800806c:	429a      	cmp	r2, r3
 800806e:	d109      	bne.n	8008084 <strstr+0x20>
 8008070:	460c      	mov	r4, r1
 8008072:	4605      	mov	r5, r0
 8008074:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 8008078:	2b00      	cmp	r3, #0
 800807a:	d0f6      	beq.n	800806a <strstr+0x6>
 800807c:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8008080:	429e      	cmp	r6, r3
 8008082:	d0f7      	beq.n	8008074 <strstr+0x10>
 8008084:	3001      	adds	r0, #1
 8008086:	7803      	ldrb	r3, [r0, #0]
 8008088:	2b00      	cmp	r3, #0
 800808a:	d1ef      	bne.n	800806c <strstr+0x8>
 800808c:	4618      	mov	r0, r3
 800808e:	e7ec      	b.n	800806a <strstr+0x6>

08008090 <_localeconv_r>:
 8008090:	4800      	ldr	r0, [pc, #0]	@ (8008094 <_localeconv_r+0x4>)
 8008092:	4770      	bx	lr
 8008094:	20000174 	.word	0x20000174

08008098 <_close_r>:
 8008098:	b538      	push	{r3, r4, r5, lr}
 800809a:	4d06      	ldr	r5, [pc, #24]	@ (80080b4 <_close_r+0x1c>)
 800809c:	2300      	movs	r3, #0
 800809e:	4604      	mov	r4, r0
 80080a0:	4608      	mov	r0, r1
 80080a2:	602b      	str	r3, [r5, #0]
 80080a4:	f7fa fd0a 	bl	8002abc <_close>
 80080a8:	1c43      	adds	r3, r0, #1
 80080aa:	d102      	bne.n	80080b2 <_close_r+0x1a>
 80080ac:	682b      	ldr	r3, [r5, #0]
 80080ae:	b103      	cbz	r3, 80080b2 <_close_r+0x1a>
 80080b0:	6023      	str	r3, [r4, #0]
 80080b2:	bd38      	pop	{r3, r4, r5, pc}
 80080b4:	20000934 	.word	0x20000934

080080b8 <_lseek_r>:
 80080b8:	b538      	push	{r3, r4, r5, lr}
 80080ba:	4d07      	ldr	r5, [pc, #28]	@ (80080d8 <_lseek_r+0x20>)
 80080bc:	4604      	mov	r4, r0
 80080be:	4608      	mov	r0, r1
 80080c0:	4611      	mov	r1, r2
 80080c2:	2200      	movs	r2, #0
 80080c4:	602a      	str	r2, [r5, #0]
 80080c6:	461a      	mov	r2, r3
 80080c8:	f7fa fd1f 	bl	8002b0a <_lseek>
 80080cc:	1c43      	adds	r3, r0, #1
 80080ce:	d102      	bne.n	80080d6 <_lseek_r+0x1e>
 80080d0:	682b      	ldr	r3, [r5, #0]
 80080d2:	b103      	cbz	r3, 80080d6 <_lseek_r+0x1e>
 80080d4:	6023      	str	r3, [r4, #0]
 80080d6:	bd38      	pop	{r3, r4, r5, pc}
 80080d8:	20000934 	.word	0x20000934

080080dc <_read_r>:
 80080dc:	b538      	push	{r3, r4, r5, lr}
 80080de:	4d07      	ldr	r5, [pc, #28]	@ (80080fc <_read_r+0x20>)
 80080e0:	4604      	mov	r4, r0
 80080e2:	4608      	mov	r0, r1
 80080e4:	4611      	mov	r1, r2
 80080e6:	2200      	movs	r2, #0
 80080e8:	602a      	str	r2, [r5, #0]
 80080ea:	461a      	mov	r2, r3
 80080ec:	f7fa fcc9 	bl	8002a82 <_read>
 80080f0:	1c43      	adds	r3, r0, #1
 80080f2:	d102      	bne.n	80080fa <_read_r+0x1e>
 80080f4:	682b      	ldr	r3, [r5, #0]
 80080f6:	b103      	cbz	r3, 80080fa <_read_r+0x1e>
 80080f8:	6023      	str	r3, [r4, #0]
 80080fa:	bd38      	pop	{r3, r4, r5, pc}
 80080fc:	20000934 	.word	0x20000934

08008100 <_write_r>:
 8008100:	b538      	push	{r3, r4, r5, lr}
 8008102:	4d07      	ldr	r5, [pc, #28]	@ (8008120 <_write_r+0x20>)
 8008104:	4604      	mov	r4, r0
 8008106:	4608      	mov	r0, r1
 8008108:	4611      	mov	r1, r2
 800810a:	2200      	movs	r2, #0
 800810c:	602a      	str	r2, [r5, #0]
 800810e:	461a      	mov	r2, r3
 8008110:	f7f9 f9c9 	bl	80014a6 <_write>
 8008114:	1c43      	adds	r3, r0, #1
 8008116:	d102      	bne.n	800811e <_write_r+0x1e>
 8008118:	682b      	ldr	r3, [r5, #0]
 800811a:	b103      	cbz	r3, 800811e <_write_r+0x1e>
 800811c:	6023      	str	r3, [r4, #0]
 800811e:	bd38      	pop	{r3, r4, r5, pc}
 8008120:	20000934 	.word	0x20000934

08008124 <__errno>:
 8008124:	4b01      	ldr	r3, [pc, #4]	@ (800812c <__errno+0x8>)
 8008126:	6818      	ldr	r0, [r3, #0]
 8008128:	4770      	bx	lr
 800812a:	bf00      	nop
 800812c:	20000034 	.word	0x20000034

08008130 <__libc_init_array>:
 8008130:	b570      	push	{r4, r5, r6, lr}
 8008132:	4d0d      	ldr	r5, [pc, #52]	@ (8008168 <__libc_init_array+0x38>)
 8008134:	4c0d      	ldr	r4, [pc, #52]	@ (800816c <__libc_init_array+0x3c>)
 8008136:	1b64      	subs	r4, r4, r5
 8008138:	10a4      	asrs	r4, r4, #2
 800813a:	2600      	movs	r6, #0
 800813c:	42a6      	cmp	r6, r4
 800813e:	d109      	bne.n	8008154 <__libc_init_array+0x24>
 8008140:	4d0b      	ldr	r5, [pc, #44]	@ (8008170 <__libc_init_array+0x40>)
 8008142:	4c0c      	ldr	r4, [pc, #48]	@ (8008174 <__libc_init_array+0x44>)
 8008144:	f003 fac6 	bl	800b6d4 <_init>
 8008148:	1b64      	subs	r4, r4, r5
 800814a:	10a4      	asrs	r4, r4, #2
 800814c:	2600      	movs	r6, #0
 800814e:	42a6      	cmp	r6, r4
 8008150:	d105      	bne.n	800815e <__libc_init_array+0x2e>
 8008152:	bd70      	pop	{r4, r5, r6, pc}
 8008154:	f855 3b04 	ldr.w	r3, [r5], #4
 8008158:	4798      	blx	r3
 800815a:	3601      	adds	r6, #1
 800815c:	e7ee      	b.n	800813c <__libc_init_array+0xc>
 800815e:	f855 3b04 	ldr.w	r3, [r5], #4
 8008162:	4798      	blx	r3
 8008164:	3601      	adds	r6, #1
 8008166:	e7f2      	b.n	800814e <__libc_init_array+0x1e>
 8008168:	0800be64 	.word	0x0800be64
 800816c:	0800be64 	.word	0x0800be64
 8008170:	0800be64 	.word	0x0800be64
 8008174:	0800be68 	.word	0x0800be68

08008178 <__retarget_lock_init_recursive>:
 8008178:	4770      	bx	lr

0800817a <__retarget_lock_acquire_recursive>:
 800817a:	4770      	bx	lr

0800817c <__retarget_lock_release_recursive>:
 800817c:	4770      	bx	lr

0800817e <memcpy>:
 800817e:	440a      	add	r2, r1
 8008180:	4291      	cmp	r1, r2
 8008182:	f100 33ff 	add.w	r3, r0, #4294967295
 8008186:	d100      	bne.n	800818a <memcpy+0xc>
 8008188:	4770      	bx	lr
 800818a:	b510      	push	{r4, lr}
 800818c:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008190:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008194:	4291      	cmp	r1, r2
 8008196:	d1f9      	bne.n	800818c <memcpy+0xe>
 8008198:	bd10      	pop	{r4, pc}
	...

0800819c <nanf>:
 800819c:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 80081a4 <nanf+0x8>
 80081a0:	4770      	bx	lr
 80081a2:	bf00      	nop
 80081a4:	7fc00000 	.word	0x7fc00000

080081a8 <quorem>:
 80081a8:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80081ac:	6903      	ldr	r3, [r0, #16]
 80081ae:	690c      	ldr	r4, [r1, #16]
 80081b0:	42a3      	cmp	r3, r4
 80081b2:	4607      	mov	r7, r0
 80081b4:	db7e      	blt.n	80082b4 <quorem+0x10c>
 80081b6:	3c01      	subs	r4, #1
 80081b8:	f101 0814 	add.w	r8, r1, #20
 80081bc:	00a3      	lsls	r3, r4, #2
 80081be:	f100 0514 	add.w	r5, r0, #20
 80081c2:	9300      	str	r3, [sp, #0]
 80081c4:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80081c8:	9301      	str	r3, [sp, #4]
 80081ca:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80081ce:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80081d2:	3301      	adds	r3, #1
 80081d4:	429a      	cmp	r2, r3
 80081d6:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80081da:	fbb2 f6f3 	udiv	r6, r2, r3
 80081de:	d32e      	bcc.n	800823e <quorem+0x96>
 80081e0:	f04f 0a00 	mov.w	sl, #0
 80081e4:	46c4      	mov	ip, r8
 80081e6:	46ae      	mov	lr, r5
 80081e8:	46d3      	mov	fp, sl
 80081ea:	f85c 3b04 	ldr.w	r3, [ip], #4
 80081ee:	b298      	uxth	r0, r3
 80081f0:	fb06 a000 	mla	r0, r6, r0, sl
 80081f4:	0c02      	lsrs	r2, r0, #16
 80081f6:	0c1b      	lsrs	r3, r3, #16
 80081f8:	fb06 2303 	mla	r3, r6, r3, r2
 80081fc:	f8de 2000 	ldr.w	r2, [lr]
 8008200:	b280      	uxth	r0, r0
 8008202:	b292      	uxth	r2, r2
 8008204:	1a12      	subs	r2, r2, r0
 8008206:	445a      	add	r2, fp
 8008208:	f8de 0000 	ldr.w	r0, [lr]
 800820c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008210:	b29b      	uxth	r3, r3
 8008212:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8008216:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 800821a:	b292      	uxth	r2, r2
 800821c:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8008220:	45e1      	cmp	r9, ip
 8008222:	f84e 2b04 	str.w	r2, [lr], #4
 8008226:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800822a:	d2de      	bcs.n	80081ea <quorem+0x42>
 800822c:	9b00      	ldr	r3, [sp, #0]
 800822e:	58eb      	ldr	r3, [r5, r3]
 8008230:	b92b      	cbnz	r3, 800823e <quorem+0x96>
 8008232:	9b01      	ldr	r3, [sp, #4]
 8008234:	3b04      	subs	r3, #4
 8008236:	429d      	cmp	r5, r3
 8008238:	461a      	mov	r2, r3
 800823a:	d32f      	bcc.n	800829c <quorem+0xf4>
 800823c:	613c      	str	r4, [r7, #16]
 800823e:	4638      	mov	r0, r7
 8008240:	f001 f9c6 	bl	80095d0 <__mcmp>
 8008244:	2800      	cmp	r0, #0
 8008246:	db25      	blt.n	8008294 <quorem+0xec>
 8008248:	4629      	mov	r1, r5
 800824a:	2000      	movs	r0, #0
 800824c:	f858 2b04 	ldr.w	r2, [r8], #4
 8008250:	f8d1 c000 	ldr.w	ip, [r1]
 8008254:	fa1f fe82 	uxth.w	lr, r2
 8008258:	fa1f f38c 	uxth.w	r3, ip
 800825c:	eba3 030e 	sub.w	r3, r3, lr
 8008260:	4403      	add	r3, r0
 8008262:	0c12      	lsrs	r2, r2, #16
 8008264:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8008268:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800826c:	b29b      	uxth	r3, r3
 800826e:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008272:	45c1      	cmp	r9, r8
 8008274:	f841 3b04 	str.w	r3, [r1], #4
 8008278:	ea4f 4022 	mov.w	r0, r2, asr #16
 800827c:	d2e6      	bcs.n	800824c <quorem+0xa4>
 800827e:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8008282:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8008286:	b922      	cbnz	r2, 8008292 <quorem+0xea>
 8008288:	3b04      	subs	r3, #4
 800828a:	429d      	cmp	r5, r3
 800828c:	461a      	mov	r2, r3
 800828e:	d30b      	bcc.n	80082a8 <quorem+0x100>
 8008290:	613c      	str	r4, [r7, #16]
 8008292:	3601      	adds	r6, #1
 8008294:	4630      	mov	r0, r6
 8008296:	b003      	add	sp, #12
 8008298:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800829c:	6812      	ldr	r2, [r2, #0]
 800829e:	3b04      	subs	r3, #4
 80082a0:	2a00      	cmp	r2, #0
 80082a2:	d1cb      	bne.n	800823c <quorem+0x94>
 80082a4:	3c01      	subs	r4, #1
 80082a6:	e7c6      	b.n	8008236 <quorem+0x8e>
 80082a8:	6812      	ldr	r2, [r2, #0]
 80082aa:	3b04      	subs	r3, #4
 80082ac:	2a00      	cmp	r2, #0
 80082ae:	d1ef      	bne.n	8008290 <quorem+0xe8>
 80082b0:	3c01      	subs	r4, #1
 80082b2:	e7ea      	b.n	800828a <quorem+0xe2>
 80082b4:	2000      	movs	r0, #0
 80082b6:	e7ee      	b.n	8008296 <quorem+0xee>

080082b8 <_dtoa_r>:
 80082b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80082bc:	69c7      	ldr	r7, [r0, #28]
 80082be:	b097      	sub	sp, #92	@ 0x5c
 80082c0:	ed8d 0b04 	vstr	d0, [sp, #16]
 80082c4:	ec55 4b10 	vmov	r4, r5, d0
 80082c8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80082ca:	9107      	str	r1, [sp, #28]
 80082cc:	4681      	mov	r9, r0
 80082ce:	920c      	str	r2, [sp, #48]	@ 0x30
 80082d0:	9311      	str	r3, [sp, #68]	@ 0x44
 80082d2:	b97f      	cbnz	r7, 80082f4 <_dtoa_r+0x3c>
 80082d4:	2010      	movs	r0, #16
 80082d6:	f000 fe09 	bl	8008eec <malloc>
 80082da:	4602      	mov	r2, r0
 80082dc:	f8c9 001c 	str.w	r0, [r9, #28]
 80082e0:	b920      	cbnz	r0, 80082ec <_dtoa_r+0x34>
 80082e2:	4ba9      	ldr	r3, [pc, #676]	@ (8008588 <_dtoa_r+0x2d0>)
 80082e4:	21ef      	movs	r1, #239	@ 0xef
 80082e6:	48a9      	ldr	r0, [pc, #676]	@ (800858c <_dtoa_r+0x2d4>)
 80082e8:	f002 fc96 	bl	800ac18 <__assert_func>
 80082ec:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80082f0:	6007      	str	r7, [r0, #0]
 80082f2:	60c7      	str	r7, [r0, #12]
 80082f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80082f8:	6819      	ldr	r1, [r3, #0]
 80082fa:	b159      	cbz	r1, 8008314 <_dtoa_r+0x5c>
 80082fc:	685a      	ldr	r2, [r3, #4]
 80082fe:	604a      	str	r2, [r1, #4]
 8008300:	2301      	movs	r3, #1
 8008302:	4093      	lsls	r3, r2
 8008304:	608b      	str	r3, [r1, #8]
 8008306:	4648      	mov	r0, r9
 8008308:	f000 fee6 	bl	80090d8 <_Bfree>
 800830c:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8008310:	2200      	movs	r2, #0
 8008312:	601a      	str	r2, [r3, #0]
 8008314:	1e2b      	subs	r3, r5, #0
 8008316:	bfb9      	ittee	lt
 8008318:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 800831c:	9305      	strlt	r3, [sp, #20]
 800831e:	2300      	movge	r3, #0
 8008320:	6033      	strge	r3, [r6, #0]
 8008322:	9f05      	ldr	r7, [sp, #20]
 8008324:	4b9a      	ldr	r3, [pc, #616]	@ (8008590 <_dtoa_r+0x2d8>)
 8008326:	bfbc      	itt	lt
 8008328:	2201      	movlt	r2, #1
 800832a:	6032      	strlt	r2, [r6, #0]
 800832c:	43bb      	bics	r3, r7
 800832e:	d112      	bne.n	8008356 <_dtoa_r+0x9e>
 8008330:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008332:	f242 730f 	movw	r3, #9999	@ 0x270f
 8008336:	6013      	str	r3, [r2, #0]
 8008338:	f3c7 0313 	ubfx	r3, r7, #0, #20
 800833c:	4323      	orrs	r3, r4
 800833e:	f000 855a 	beq.w	8008df6 <_dtoa_r+0xb3e>
 8008342:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008344:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 80085a4 <_dtoa_r+0x2ec>
 8008348:	2b00      	cmp	r3, #0
 800834a:	f000 855c 	beq.w	8008e06 <_dtoa_r+0xb4e>
 800834e:	f10a 0303 	add.w	r3, sl, #3
 8008352:	f000 bd56 	b.w	8008e02 <_dtoa_r+0xb4a>
 8008356:	ed9d 7b04 	vldr	d7, [sp, #16]
 800835a:	2200      	movs	r2, #0
 800835c:	ec51 0b17 	vmov	r0, r1, d7
 8008360:	2300      	movs	r3, #0
 8008362:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 8008366:	f7f8 fbb7 	bl	8000ad8 <__aeabi_dcmpeq>
 800836a:	4680      	mov	r8, r0
 800836c:	b158      	cbz	r0, 8008386 <_dtoa_r+0xce>
 800836e:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8008370:	2301      	movs	r3, #1
 8008372:	6013      	str	r3, [r2, #0]
 8008374:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008376:	b113      	cbz	r3, 800837e <_dtoa_r+0xc6>
 8008378:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 800837a:	4b86      	ldr	r3, [pc, #536]	@ (8008594 <_dtoa_r+0x2dc>)
 800837c:	6013      	str	r3, [r2, #0]
 800837e:	f8df a228 	ldr.w	sl, [pc, #552]	@ 80085a8 <_dtoa_r+0x2f0>
 8008382:	f000 bd40 	b.w	8008e06 <_dtoa_r+0xb4e>
 8008386:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 800838a:	aa14      	add	r2, sp, #80	@ 0x50
 800838c:	a915      	add	r1, sp, #84	@ 0x54
 800838e:	4648      	mov	r0, r9
 8008390:	f001 fa3e 	bl	8009810 <__d2b>
 8008394:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8008398:	9002      	str	r0, [sp, #8]
 800839a:	2e00      	cmp	r6, #0
 800839c:	d078      	beq.n	8008490 <_dtoa_r+0x1d8>
 800839e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80083a0:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 80083a4:	f3c3 0313 	ubfx	r3, r3, #0, #20
 80083a8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80083ac:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 80083b0:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 80083b4:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80083b8:	4619      	mov	r1, r3
 80083ba:	2200      	movs	r2, #0
 80083bc:	4b76      	ldr	r3, [pc, #472]	@ (8008598 <_dtoa_r+0x2e0>)
 80083be:	f7f7 ff6b 	bl	8000298 <__aeabi_dsub>
 80083c2:	a36b      	add	r3, pc, #428	@ (adr r3, 8008570 <_dtoa_r+0x2b8>)
 80083c4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083c8:	f7f8 f91e 	bl	8000608 <__aeabi_dmul>
 80083cc:	a36a      	add	r3, pc, #424	@ (adr r3, 8008578 <_dtoa_r+0x2c0>)
 80083ce:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083d2:	f7f7 ff63 	bl	800029c <__adddf3>
 80083d6:	4604      	mov	r4, r0
 80083d8:	4630      	mov	r0, r6
 80083da:	460d      	mov	r5, r1
 80083dc:	f7f8 f8aa 	bl	8000534 <__aeabi_i2d>
 80083e0:	a367      	add	r3, pc, #412	@ (adr r3, 8008580 <_dtoa_r+0x2c8>)
 80083e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80083e6:	f7f8 f90f 	bl	8000608 <__aeabi_dmul>
 80083ea:	4602      	mov	r2, r0
 80083ec:	460b      	mov	r3, r1
 80083ee:	4620      	mov	r0, r4
 80083f0:	4629      	mov	r1, r5
 80083f2:	f7f7 ff53 	bl	800029c <__adddf3>
 80083f6:	4604      	mov	r4, r0
 80083f8:	460d      	mov	r5, r1
 80083fa:	f7f8 fbb5 	bl	8000b68 <__aeabi_d2iz>
 80083fe:	2200      	movs	r2, #0
 8008400:	4607      	mov	r7, r0
 8008402:	2300      	movs	r3, #0
 8008404:	4620      	mov	r0, r4
 8008406:	4629      	mov	r1, r5
 8008408:	f7f8 fb70 	bl	8000aec <__aeabi_dcmplt>
 800840c:	b140      	cbz	r0, 8008420 <_dtoa_r+0x168>
 800840e:	4638      	mov	r0, r7
 8008410:	f7f8 f890 	bl	8000534 <__aeabi_i2d>
 8008414:	4622      	mov	r2, r4
 8008416:	462b      	mov	r3, r5
 8008418:	f7f8 fb5e 	bl	8000ad8 <__aeabi_dcmpeq>
 800841c:	b900      	cbnz	r0, 8008420 <_dtoa_r+0x168>
 800841e:	3f01      	subs	r7, #1
 8008420:	2f16      	cmp	r7, #22
 8008422:	d852      	bhi.n	80084ca <_dtoa_r+0x212>
 8008424:	4b5d      	ldr	r3, [pc, #372]	@ (800859c <_dtoa_r+0x2e4>)
 8008426:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 800842a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800842e:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008432:	f7f8 fb5b 	bl	8000aec <__aeabi_dcmplt>
 8008436:	2800      	cmp	r0, #0
 8008438:	d049      	beq.n	80084ce <_dtoa_r+0x216>
 800843a:	3f01      	subs	r7, #1
 800843c:	2300      	movs	r3, #0
 800843e:	9310      	str	r3, [sp, #64]	@ 0x40
 8008440:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008442:	1b9b      	subs	r3, r3, r6
 8008444:	1e5a      	subs	r2, r3, #1
 8008446:	bf45      	ittet	mi
 8008448:	f1c3 0301 	rsbmi	r3, r3, #1
 800844c:	9300      	strmi	r3, [sp, #0]
 800844e:	2300      	movpl	r3, #0
 8008450:	2300      	movmi	r3, #0
 8008452:	9206      	str	r2, [sp, #24]
 8008454:	bf54      	ite	pl
 8008456:	9300      	strpl	r3, [sp, #0]
 8008458:	9306      	strmi	r3, [sp, #24]
 800845a:	2f00      	cmp	r7, #0
 800845c:	db39      	blt.n	80084d2 <_dtoa_r+0x21a>
 800845e:	9b06      	ldr	r3, [sp, #24]
 8008460:	970d      	str	r7, [sp, #52]	@ 0x34
 8008462:	443b      	add	r3, r7
 8008464:	9306      	str	r3, [sp, #24]
 8008466:	2300      	movs	r3, #0
 8008468:	9308      	str	r3, [sp, #32]
 800846a:	9b07      	ldr	r3, [sp, #28]
 800846c:	2b09      	cmp	r3, #9
 800846e:	d863      	bhi.n	8008538 <_dtoa_r+0x280>
 8008470:	2b05      	cmp	r3, #5
 8008472:	bfc4      	itt	gt
 8008474:	3b04      	subgt	r3, #4
 8008476:	9307      	strgt	r3, [sp, #28]
 8008478:	9b07      	ldr	r3, [sp, #28]
 800847a:	f1a3 0302 	sub.w	r3, r3, #2
 800847e:	bfcc      	ite	gt
 8008480:	2400      	movgt	r4, #0
 8008482:	2401      	movle	r4, #1
 8008484:	2b03      	cmp	r3, #3
 8008486:	d863      	bhi.n	8008550 <_dtoa_r+0x298>
 8008488:	e8df f003 	tbb	[pc, r3]
 800848c:	2b375452 	.word	0x2b375452
 8008490:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8008494:	441e      	add	r6, r3
 8008496:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 800849a:	2b20      	cmp	r3, #32
 800849c:	bfc1      	itttt	gt
 800849e:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 80084a2:	409f      	lslgt	r7, r3
 80084a4:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 80084a8:	fa24 f303 	lsrgt.w	r3, r4, r3
 80084ac:	bfd6      	itet	le
 80084ae:	f1c3 0320 	rsble	r3, r3, #32
 80084b2:	ea47 0003 	orrgt.w	r0, r7, r3
 80084b6:	fa04 f003 	lslle.w	r0, r4, r3
 80084ba:	f7f8 f82b 	bl	8000514 <__aeabi_ui2d>
 80084be:	2201      	movs	r2, #1
 80084c0:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80084c4:	3e01      	subs	r6, #1
 80084c6:	9212      	str	r2, [sp, #72]	@ 0x48
 80084c8:	e776      	b.n	80083b8 <_dtoa_r+0x100>
 80084ca:	2301      	movs	r3, #1
 80084cc:	e7b7      	b.n	800843e <_dtoa_r+0x186>
 80084ce:	9010      	str	r0, [sp, #64]	@ 0x40
 80084d0:	e7b6      	b.n	8008440 <_dtoa_r+0x188>
 80084d2:	9b00      	ldr	r3, [sp, #0]
 80084d4:	1bdb      	subs	r3, r3, r7
 80084d6:	9300      	str	r3, [sp, #0]
 80084d8:	427b      	negs	r3, r7
 80084da:	9308      	str	r3, [sp, #32]
 80084dc:	2300      	movs	r3, #0
 80084de:	930d      	str	r3, [sp, #52]	@ 0x34
 80084e0:	e7c3      	b.n	800846a <_dtoa_r+0x1b2>
 80084e2:	2301      	movs	r3, #1
 80084e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80084e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80084e8:	eb07 0b03 	add.w	fp, r7, r3
 80084ec:	f10b 0301 	add.w	r3, fp, #1
 80084f0:	2b01      	cmp	r3, #1
 80084f2:	9303      	str	r3, [sp, #12]
 80084f4:	bfb8      	it	lt
 80084f6:	2301      	movlt	r3, #1
 80084f8:	e006      	b.n	8008508 <_dtoa_r+0x250>
 80084fa:	2301      	movs	r3, #1
 80084fc:	9309      	str	r3, [sp, #36]	@ 0x24
 80084fe:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008500:	2b00      	cmp	r3, #0
 8008502:	dd28      	ble.n	8008556 <_dtoa_r+0x29e>
 8008504:	469b      	mov	fp, r3
 8008506:	9303      	str	r3, [sp, #12]
 8008508:	f8d9 001c 	ldr.w	r0, [r9, #28]
 800850c:	2100      	movs	r1, #0
 800850e:	2204      	movs	r2, #4
 8008510:	f102 0514 	add.w	r5, r2, #20
 8008514:	429d      	cmp	r5, r3
 8008516:	d926      	bls.n	8008566 <_dtoa_r+0x2ae>
 8008518:	6041      	str	r1, [r0, #4]
 800851a:	4648      	mov	r0, r9
 800851c:	f000 fd9c 	bl	8009058 <_Balloc>
 8008520:	4682      	mov	sl, r0
 8008522:	2800      	cmp	r0, #0
 8008524:	d142      	bne.n	80085ac <_dtoa_r+0x2f4>
 8008526:	4b1e      	ldr	r3, [pc, #120]	@ (80085a0 <_dtoa_r+0x2e8>)
 8008528:	4602      	mov	r2, r0
 800852a:	f240 11af 	movw	r1, #431	@ 0x1af
 800852e:	e6da      	b.n	80082e6 <_dtoa_r+0x2e>
 8008530:	2300      	movs	r3, #0
 8008532:	e7e3      	b.n	80084fc <_dtoa_r+0x244>
 8008534:	2300      	movs	r3, #0
 8008536:	e7d5      	b.n	80084e4 <_dtoa_r+0x22c>
 8008538:	2401      	movs	r4, #1
 800853a:	2300      	movs	r3, #0
 800853c:	9307      	str	r3, [sp, #28]
 800853e:	9409      	str	r4, [sp, #36]	@ 0x24
 8008540:	f04f 3bff 	mov.w	fp, #4294967295
 8008544:	2200      	movs	r2, #0
 8008546:	f8cd b00c 	str.w	fp, [sp, #12]
 800854a:	2312      	movs	r3, #18
 800854c:	920c      	str	r2, [sp, #48]	@ 0x30
 800854e:	e7db      	b.n	8008508 <_dtoa_r+0x250>
 8008550:	2301      	movs	r3, #1
 8008552:	9309      	str	r3, [sp, #36]	@ 0x24
 8008554:	e7f4      	b.n	8008540 <_dtoa_r+0x288>
 8008556:	f04f 0b01 	mov.w	fp, #1
 800855a:	f8cd b00c 	str.w	fp, [sp, #12]
 800855e:	465b      	mov	r3, fp
 8008560:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8008564:	e7d0      	b.n	8008508 <_dtoa_r+0x250>
 8008566:	3101      	adds	r1, #1
 8008568:	0052      	lsls	r2, r2, #1
 800856a:	e7d1      	b.n	8008510 <_dtoa_r+0x258>
 800856c:	f3af 8000 	nop.w
 8008570:	636f4361 	.word	0x636f4361
 8008574:	3fd287a7 	.word	0x3fd287a7
 8008578:	8b60c8b3 	.word	0x8b60c8b3
 800857c:	3fc68a28 	.word	0x3fc68a28
 8008580:	509f79fb 	.word	0x509f79fb
 8008584:	3fd34413 	.word	0x3fd34413
 8008588:	0800ba76 	.word	0x0800ba76
 800858c:	0800ba8d 	.word	0x0800ba8d
 8008590:	7ff00000 	.word	0x7ff00000
 8008594:	0800ba41 	.word	0x0800ba41
 8008598:	3ff80000 	.word	0x3ff80000
 800859c:	0800bc40 	.word	0x0800bc40
 80085a0:	0800bae5 	.word	0x0800bae5
 80085a4:	0800ba72 	.word	0x0800ba72
 80085a8:	0800ba40 	.word	0x0800ba40
 80085ac:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80085b0:	6018      	str	r0, [r3, #0]
 80085b2:	9b03      	ldr	r3, [sp, #12]
 80085b4:	2b0e      	cmp	r3, #14
 80085b6:	f200 80a1 	bhi.w	80086fc <_dtoa_r+0x444>
 80085ba:	2c00      	cmp	r4, #0
 80085bc:	f000 809e 	beq.w	80086fc <_dtoa_r+0x444>
 80085c0:	2f00      	cmp	r7, #0
 80085c2:	dd33      	ble.n	800862c <_dtoa_r+0x374>
 80085c4:	4b9c      	ldr	r3, [pc, #624]	@ (8008838 <_dtoa_r+0x580>)
 80085c6:	f007 020f 	and.w	r2, r7, #15
 80085ca:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80085ce:	ed93 7b00 	vldr	d7, [r3]
 80085d2:	05f8      	lsls	r0, r7, #23
 80085d4:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80085d8:	ea4f 1427 	mov.w	r4, r7, asr #4
 80085dc:	d516      	bpl.n	800860c <_dtoa_r+0x354>
 80085de:	4b97      	ldr	r3, [pc, #604]	@ (800883c <_dtoa_r+0x584>)
 80085e0:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80085e4:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80085e8:	f7f8 f938 	bl	800085c <__aeabi_ddiv>
 80085ec:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80085f0:	f004 040f 	and.w	r4, r4, #15
 80085f4:	2603      	movs	r6, #3
 80085f6:	4d91      	ldr	r5, [pc, #580]	@ (800883c <_dtoa_r+0x584>)
 80085f8:	b954      	cbnz	r4, 8008610 <_dtoa_r+0x358>
 80085fa:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80085fe:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008602:	f7f8 f92b 	bl	800085c <__aeabi_ddiv>
 8008606:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800860a:	e028      	b.n	800865e <_dtoa_r+0x3a6>
 800860c:	2602      	movs	r6, #2
 800860e:	e7f2      	b.n	80085f6 <_dtoa_r+0x33e>
 8008610:	07e1      	lsls	r1, r4, #31
 8008612:	d508      	bpl.n	8008626 <_dtoa_r+0x36e>
 8008614:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008618:	e9d5 2300 	ldrd	r2, r3, [r5]
 800861c:	f7f7 fff4 	bl	8000608 <__aeabi_dmul>
 8008620:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008624:	3601      	adds	r6, #1
 8008626:	1064      	asrs	r4, r4, #1
 8008628:	3508      	adds	r5, #8
 800862a:	e7e5      	b.n	80085f8 <_dtoa_r+0x340>
 800862c:	f000 80af 	beq.w	800878e <_dtoa_r+0x4d6>
 8008630:	427c      	negs	r4, r7
 8008632:	4b81      	ldr	r3, [pc, #516]	@ (8008838 <_dtoa_r+0x580>)
 8008634:	4d81      	ldr	r5, [pc, #516]	@ (800883c <_dtoa_r+0x584>)
 8008636:	f004 020f 	and.w	r2, r4, #15
 800863a:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800863e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008642:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8008646:	f7f7 ffdf 	bl	8000608 <__aeabi_dmul>
 800864a:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800864e:	1124      	asrs	r4, r4, #4
 8008650:	2300      	movs	r3, #0
 8008652:	2602      	movs	r6, #2
 8008654:	2c00      	cmp	r4, #0
 8008656:	f040 808f 	bne.w	8008778 <_dtoa_r+0x4c0>
 800865a:	2b00      	cmp	r3, #0
 800865c:	d1d3      	bne.n	8008606 <_dtoa_r+0x34e>
 800865e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008660:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 8094 	beq.w	8008792 <_dtoa_r+0x4da>
 800866a:	4b75      	ldr	r3, [pc, #468]	@ (8008840 <_dtoa_r+0x588>)
 800866c:	2200      	movs	r2, #0
 800866e:	4620      	mov	r0, r4
 8008670:	4629      	mov	r1, r5
 8008672:	f7f8 fa3b 	bl	8000aec <__aeabi_dcmplt>
 8008676:	2800      	cmp	r0, #0
 8008678:	f000 808b 	beq.w	8008792 <_dtoa_r+0x4da>
 800867c:	9b03      	ldr	r3, [sp, #12]
 800867e:	2b00      	cmp	r3, #0
 8008680:	f000 8087 	beq.w	8008792 <_dtoa_r+0x4da>
 8008684:	f1bb 0f00 	cmp.w	fp, #0
 8008688:	dd34      	ble.n	80086f4 <_dtoa_r+0x43c>
 800868a:	4620      	mov	r0, r4
 800868c:	4b6d      	ldr	r3, [pc, #436]	@ (8008844 <_dtoa_r+0x58c>)
 800868e:	2200      	movs	r2, #0
 8008690:	4629      	mov	r1, r5
 8008692:	f7f7 ffb9 	bl	8000608 <__aeabi_dmul>
 8008696:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800869a:	f107 38ff 	add.w	r8, r7, #4294967295
 800869e:	3601      	adds	r6, #1
 80086a0:	465c      	mov	r4, fp
 80086a2:	4630      	mov	r0, r6
 80086a4:	f7f7 ff46 	bl	8000534 <__aeabi_i2d>
 80086a8:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80086ac:	f7f7 ffac 	bl	8000608 <__aeabi_dmul>
 80086b0:	4b65      	ldr	r3, [pc, #404]	@ (8008848 <_dtoa_r+0x590>)
 80086b2:	2200      	movs	r2, #0
 80086b4:	f7f7 fdf2 	bl	800029c <__adddf3>
 80086b8:	4605      	mov	r5, r0
 80086ba:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80086be:	2c00      	cmp	r4, #0
 80086c0:	d16a      	bne.n	8008798 <_dtoa_r+0x4e0>
 80086c2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086c6:	4b61      	ldr	r3, [pc, #388]	@ (800884c <_dtoa_r+0x594>)
 80086c8:	2200      	movs	r2, #0
 80086ca:	f7f7 fde5 	bl	8000298 <__aeabi_dsub>
 80086ce:	4602      	mov	r2, r0
 80086d0:	460b      	mov	r3, r1
 80086d2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80086d6:	462a      	mov	r2, r5
 80086d8:	4633      	mov	r3, r6
 80086da:	f7f8 fa25 	bl	8000b28 <__aeabi_dcmpgt>
 80086de:	2800      	cmp	r0, #0
 80086e0:	f040 8298 	bne.w	8008c14 <_dtoa_r+0x95c>
 80086e4:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80086e8:	462a      	mov	r2, r5
 80086ea:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80086ee:	f7f8 f9fd 	bl	8000aec <__aeabi_dcmplt>
 80086f2:	bb38      	cbnz	r0, 8008744 <_dtoa_r+0x48c>
 80086f4:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80086f8:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80086fc:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80086fe:	2b00      	cmp	r3, #0
 8008700:	f2c0 8157 	blt.w	80089b2 <_dtoa_r+0x6fa>
 8008704:	2f0e      	cmp	r7, #14
 8008706:	f300 8154 	bgt.w	80089b2 <_dtoa_r+0x6fa>
 800870a:	4b4b      	ldr	r3, [pc, #300]	@ (8008838 <_dtoa_r+0x580>)
 800870c:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8008710:	ed93 7b00 	vldr	d7, [r3]
 8008714:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8008716:	2b00      	cmp	r3, #0
 8008718:	ed8d 7b00 	vstr	d7, [sp]
 800871c:	f280 80e5 	bge.w	80088ea <_dtoa_r+0x632>
 8008720:	9b03      	ldr	r3, [sp, #12]
 8008722:	2b00      	cmp	r3, #0
 8008724:	f300 80e1 	bgt.w	80088ea <_dtoa_r+0x632>
 8008728:	d10c      	bne.n	8008744 <_dtoa_r+0x48c>
 800872a:	4b48      	ldr	r3, [pc, #288]	@ (800884c <_dtoa_r+0x594>)
 800872c:	2200      	movs	r2, #0
 800872e:	ec51 0b17 	vmov	r0, r1, d7
 8008732:	f7f7 ff69 	bl	8000608 <__aeabi_dmul>
 8008736:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800873a:	f7f8 f9eb 	bl	8000b14 <__aeabi_dcmpge>
 800873e:	2800      	cmp	r0, #0
 8008740:	f000 8266 	beq.w	8008c10 <_dtoa_r+0x958>
 8008744:	2400      	movs	r4, #0
 8008746:	4625      	mov	r5, r4
 8008748:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800874a:	4656      	mov	r6, sl
 800874c:	ea6f 0803 	mvn.w	r8, r3
 8008750:	2700      	movs	r7, #0
 8008752:	4621      	mov	r1, r4
 8008754:	4648      	mov	r0, r9
 8008756:	f000 fcbf 	bl	80090d8 <_Bfree>
 800875a:	2d00      	cmp	r5, #0
 800875c:	f000 80bd 	beq.w	80088da <_dtoa_r+0x622>
 8008760:	b12f      	cbz	r7, 800876e <_dtoa_r+0x4b6>
 8008762:	42af      	cmp	r7, r5
 8008764:	d003      	beq.n	800876e <_dtoa_r+0x4b6>
 8008766:	4639      	mov	r1, r7
 8008768:	4648      	mov	r0, r9
 800876a:	f000 fcb5 	bl	80090d8 <_Bfree>
 800876e:	4629      	mov	r1, r5
 8008770:	4648      	mov	r0, r9
 8008772:	f000 fcb1 	bl	80090d8 <_Bfree>
 8008776:	e0b0      	b.n	80088da <_dtoa_r+0x622>
 8008778:	07e2      	lsls	r2, r4, #31
 800877a:	d505      	bpl.n	8008788 <_dtoa_r+0x4d0>
 800877c:	e9d5 2300 	ldrd	r2, r3, [r5]
 8008780:	f7f7 ff42 	bl	8000608 <__aeabi_dmul>
 8008784:	3601      	adds	r6, #1
 8008786:	2301      	movs	r3, #1
 8008788:	1064      	asrs	r4, r4, #1
 800878a:	3508      	adds	r5, #8
 800878c:	e762      	b.n	8008654 <_dtoa_r+0x39c>
 800878e:	2602      	movs	r6, #2
 8008790:	e765      	b.n	800865e <_dtoa_r+0x3a6>
 8008792:	9c03      	ldr	r4, [sp, #12]
 8008794:	46b8      	mov	r8, r7
 8008796:	e784      	b.n	80086a2 <_dtoa_r+0x3ea>
 8008798:	4b27      	ldr	r3, [pc, #156]	@ (8008838 <_dtoa_r+0x580>)
 800879a:	9909      	ldr	r1, [sp, #36]	@ 0x24
 800879c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80087a0:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 80087a4:	4454      	add	r4, sl
 80087a6:	2900      	cmp	r1, #0
 80087a8:	d054      	beq.n	8008854 <_dtoa_r+0x59c>
 80087aa:	4929      	ldr	r1, [pc, #164]	@ (8008850 <_dtoa_r+0x598>)
 80087ac:	2000      	movs	r0, #0
 80087ae:	f7f8 f855 	bl	800085c <__aeabi_ddiv>
 80087b2:	4633      	mov	r3, r6
 80087b4:	462a      	mov	r2, r5
 80087b6:	f7f7 fd6f 	bl	8000298 <__aeabi_dsub>
 80087ba:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80087be:	4656      	mov	r6, sl
 80087c0:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087c4:	f7f8 f9d0 	bl	8000b68 <__aeabi_d2iz>
 80087c8:	4605      	mov	r5, r0
 80087ca:	f7f7 feb3 	bl	8000534 <__aeabi_i2d>
 80087ce:	4602      	mov	r2, r0
 80087d0:	460b      	mov	r3, r1
 80087d2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80087d6:	f7f7 fd5f 	bl	8000298 <__aeabi_dsub>
 80087da:	3530      	adds	r5, #48	@ 0x30
 80087dc:	4602      	mov	r2, r0
 80087de:	460b      	mov	r3, r1
 80087e0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80087e4:	f806 5b01 	strb.w	r5, [r6], #1
 80087e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80087ec:	f7f8 f97e 	bl	8000aec <__aeabi_dcmplt>
 80087f0:	2800      	cmp	r0, #0
 80087f2:	d172      	bne.n	80088da <_dtoa_r+0x622>
 80087f4:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80087f8:	4911      	ldr	r1, [pc, #68]	@ (8008840 <_dtoa_r+0x588>)
 80087fa:	2000      	movs	r0, #0
 80087fc:	f7f7 fd4c 	bl	8000298 <__aeabi_dsub>
 8008800:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8008804:	f7f8 f972 	bl	8000aec <__aeabi_dcmplt>
 8008808:	2800      	cmp	r0, #0
 800880a:	f040 80b4 	bne.w	8008976 <_dtoa_r+0x6be>
 800880e:	42a6      	cmp	r6, r4
 8008810:	f43f af70 	beq.w	80086f4 <_dtoa_r+0x43c>
 8008814:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8008818:	4b0a      	ldr	r3, [pc, #40]	@ (8008844 <_dtoa_r+0x58c>)
 800881a:	2200      	movs	r2, #0
 800881c:	f7f7 fef4 	bl	8000608 <__aeabi_dmul>
 8008820:	4b08      	ldr	r3, [pc, #32]	@ (8008844 <_dtoa_r+0x58c>)
 8008822:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008826:	2200      	movs	r2, #0
 8008828:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800882c:	f7f7 feec 	bl	8000608 <__aeabi_dmul>
 8008830:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8008834:	e7c4      	b.n	80087c0 <_dtoa_r+0x508>
 8008836:	bf00      	nop
 8008838:	0800bc40 	.word	0x0800bc40
 800883c:	0800bc18 	.word	0x0800bc18
 8008840:	3ff00000 	.word	0x3ff00000
 8008844:	40240000 	.word	0x40240000
 8008848:	401c0000 	.word	0x401c0000
 800884c:	40140000 	.word	0x40140000
 8008850:	3fe00000 	.word	0x3fe00000
 8008854:	4631      	mov	r1, r6
 8008856:	4628      	mov	r0, r5
 8008858:	f7f7 fed6 	bl	8000608 <__aeabi_dmul>
 800885c:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8008860:	9413      	str	r4, [sp, #76]	@ 0x4c
 8008862:	4656      	mov	r6, sl
 8008864:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8008868:	f7f8 f97e 	bl	8000b68 <__aeabi_d2iz>
 800886c:	4605      	mov	r5, r0
 800886e:	f7f7 fe61 	bl	8000534 <__aeabi_i2d>
 8008872:	4602      	mov	r2, r0
 8008874:	460b      	mov	r3, r1
 8008876:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800887a:	f7f7 fd0d 	bl	8000298 <__aeabi_dsub>
 800887e:	3530      	adds	r5, #48	@ 0x30
 8008880:	f806 5b01 	strb.w	r5, [r6], #1
 8008884:	4602      	mov	r2, r0
 8008886:	460b      	mov	r3, r1
 8008888:	42a6      	cmp	r6, r4
 800888a:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800888e:	f04f 0200 	mov.w	r2, #0
 8008892:	d124      	bne.n	80088de <_dtoa_r+0x626>
 8008894:	4baf      	ldr	r3, [pc, #700]	@ (8008b54 <_dtoa_r+0x89c>)
 8008896:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 800889a:	f7f7 fcff 	bl	800029c <__adddf3>
 800889e:	4602      	mov	r2, r0
 80088a0:	460b      	mov	r3, r1
 80088a2:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088a6:	f7f8 f93f 	bl	8000b28 <__aeabi_dcmpgt>
 80088aa:	2800      	cmp	r0, #0
 80088ac:	d163      	bne.n	8008976 <_dtoa_r+0x6be>
 80088ae:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80088b2:	49a8      	ldr	r1, [pc, #672]	@ (8008b54 <_dtoa_r+0x89c>)
 80088b4:	2000      	movs	r0, #0
 80088b6:	f7f7 fcef 	bl	8000298 <__aeabi_dsub>
 80088ba:	4602      	mov	r2, r0
 80088bc:	460b      	mov	r3, r1
 80088be:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80088c2:	f7f8 f913 	bl	8000aec <__aeabi_dcmplt>
 80088c6:	2800      	cmp	r0, #0
 80088c8:	f43f af14 	beq.w	80086f4 <_dtoa_r+0x43c>
 80088cc:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80088ce:	1e73      	subs	r3, r6, #1
 80088d0:	9313      	str	r3, [sp, #76]	@ 0x4c
 80088d2:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80088d6:	2b30      	cmp	r3, #48	@ 0x30
 80088d8:	d0f8      	beq.n	80088cc <_dtoa_r+0x614>
 80088da:	4647      	mov	r7, r8
 80088dc:	e03b      	b.n	8008956 <_dtoa_r+0x69e>
 80088de:	4b9e      	ldr	r3, [pc, #632]	@ (8008b58 <_dtoa_r+0x8a0>)
 80088e0:	f7f7 fe92 	bl	8000608 <__aeabi_dmul>
 80088e4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80088e8:	e7bc      	b.n	8008864 <_dtoa_r+0x5ac>
 80088ea:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80088ee:	4656      	mov	r6, sl
 80088f0:	e9dd 2300 	ldrd	r2, r3, [sp]
 80088f4:	4620      	mov	r0, r4
 80088f6:	4629      	mov	r1, r5
 80088f8:	f7f7 ffb0 	bl	800085c <__aeabi_ddiv>
 80088fc:	f7f8 f934 	bl	8000b68 <__aeabi_d2iz>
 8008900:	4680      	mov	r8, r0
 8008902:	f7f7 fe17 	bl	8000534 <__aeabi_i2d>
 8008906:	e9dd 2300 	ldrd	r2, r3, [sp]
 800890a:	f7f7 fe7d 	bl	8000608 <__aeabi_dmul>
 800890e:	4602      	mov	r2, r0
 8008910:	460b      	mov	r3, r1
 8008912:	4620      	mov	r0, r4
 8008914:	4629      	mov	r1, r5
 8008916:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 800891a:	f7f7 fcbd 	bl	8000298 <__aeabi_dsub>
 800891e:	f806 4b01 	strb.w	r4, [r6], #1
 8008922:	9d03      	ldr	r5, [sp, #12]
 8008924:	eba6 040a 	sub.w	r4, r6, sl
 8008928:	42a5      	cmp	r5, r4
 800892a:	4602      	mov	r2, r0
 800892c:	460b      	mov	r3, r1
 800892e:	d133      	bne.n	8008998 <_dtoa_r+0x6e0>
 8008930:	f7f7 fcb4 	bl	800029c <__adddf3>
 8008934:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008938:	4604      	mov	r4, r0
 800893a:	460d      	mov	r5, r1
 800893c:	f7f8 f8f4 	bl	8000b28 <__aeabi_dcmpgt>
 8008940:	b9c0      	cbnz	r0, 8008974 <_dtoa_r+0x6bc>
 8008942:	e9dd 2300 	ldrd	r2, r3, [sp]
 8008946:	4620      	mov	r0, r4
 8008948:	4629      	mov	r1, r5
 800894a:	f7f8 f8c5 	bl	8000ad8 <__aeabi_dcmpeq>
 800894e:	b110      	cbz	r0, 8008956 <_dtoa_r+0x69e>
 8008950:	f018 0f01 	tst.w	r8, #1
 8008954:	d10e      	bne.n	8008974 <_dtoa_r+0x6bc>
 8008956:	9902      	ldr	r1, [sp, #8]
 8008958:	4648      	mov	r0, r9
 800895a:	f000 fbbd 	bl	80090d8 <_Bfree>
 800895e:	2300      	movs	r3, #0
 8008960:	7033      	strb	r3, [r6, #0]
 8008962:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8008964:	3701      	adds	r7, #1
 8008966:	601f      	str	r7, [r3, #0]
 8008968:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800896a:	2b00      	cmp	r3, #0
 800896c:	f000 824b 	beq.w	8008e06 <_dtoa_r+0xb4e>
 8008970:	601e      	str	r6, [r3, #0]
 8008972:	e248      	b.n	8008e06 <_dtoa_r+0xb4e>
 8008974:	46b8      	mov	r8, r7
 8008976:	4633      	mov	r3, r6
 8008978:	461e      	mov	r6, r3
 800897a:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 800897e:	2a39      	cmp	r2, #57	@ 0x39
 8008980:	d106      	bne.n	8008990 <_dtoa_r+0x6d8>
 8008982:	459a      	cmp	sl, r3
 8008984:	d1f8      	bne.n	8008978 <_dtoa_r+0x6c0>
 8008986:	2230      	movs	r2, #48	@ 0x30
 8008988:	f108 0801 	add.w	r8, r8, #1
 800898c:	f88a 2000 	strb.w	r2, [sl]
 8008990:	781a      	ldrb	r2, [r3, #0]
 8008992:	3201      	adds	r2, #1
 8008994:	701a      	strb	r2, [r3, #0]
 8008996:	e7a0      	b.n	80088da <_dtoa_r+0x622>
 8008998:	4b6f      	ldr	r3, [pc, #444]	@ (8008b58 <_dtoa_r+0x8a0>)
 800899a:	2200      	movs	r2, #0
 800899c:	f7f7 fe34 	bl	8000608 <__aeabi_dmul>
 80089a0:	2200      	movs	r2, #0
 80089a2:	2300      	movs	r3, #0
 80089a4:	4604      	mov	r4, r0
 80089a6:	460d      	mov	r5, r1
 80089a8:	f7f8 f896 	bl	8000ad8 <__aeabi_dcmpeq>
 80089ac:	2800      	cmp	r0, #0
 80089ae:	d09f      	beq.n	80088f0 <_dtoa_r+0x638>
 80089b0:	e7d1      	b.n	8008956 <_dtoa_r+0x69e>
 80089b2:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80089b4:	2a00      	cmp	r2, #0
 80089b6:	f000 80ea 	beq.w	8008b8e <_dtoa_r+0x8d6>
 80089ba:	9a07      	ldr	r2, [sp, #28]
 80089bc:	2a01      	cmp	r2, #1
 80089be:	f300 80cd 	bgt.w	8008b5c <_dtoa_r+0x8a4>
 80089c2:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80089c4:	2a00      	cmp	r2, #0
 80089c6:	f000 80c1 	beq.w	8008b4c <_dtoa_r+0x894>
 80089ca:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80089ce:	9c08      	ldr	r4, [sp, #32]
 80089d0:	9e00      	ldr	r6, [sp, #0]
 80089d2:	9a00      	ldr	r2, [sp, #0]
 80089d4:	441a      	add	r2, r3
 80089d6:	9200      	str	r2, [sp, #0]
 80089d8:	9a06      	ldr	r2, [sp, #24]
 80089da:	2101      	movs	r1, #1
 80089dc:	441a      	add	r2, r3
 80089de:	4648      	mov	r0, r9
 80089e0:	9206      	str	r2, [sp, #24]
 80089e2:	f000 fc77 	bl	80092d4 <__i2b>
 80089e6:	4605      	mov	r5, r0
 80089e8:	b166      	cbz	r6, 8008a04 <_dtoa_r+0x74c>
 80089ea:	9b06      	ldr	r3, [sp, #24]
 80089ec:	2b00      	cmp	r3, #0
 80089ee:	dd09      	ble.n	8008a04 <_dtoa_r+0x74c>
 80089f0:	42b3      	cmp	r3, r6
 80089f2:	9a00      	ldr	r2, [sp, #0]
 80089f4:	bfa8      	it	ge
 80089f6:	4633      	movge	r3, r6
 80089f8:	1ad2      	subs	r2, r2, r3
 80089fa:	9200      	str	r2, [sp, #0]
 80089fc:	9a06      	ldr	r2, [sp, #24]
 80089fe:	1af6      	subs	r6, r6, r3
 8008a00:	1ad3      	subs	r3, r2, r3
 8008a02:	9306      	str	r3, [sp, #24]
 8008a04:	9b08      	ldr	r3, [sp, #32]
 8008a06:	b30b      	cbz	r3, 8008a4c <_dtoa_r+0x794>
 8008a08:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008a0a:	2b00      	cmp	r3, #0
 8008a0c:	f000 80c6 	beq.w	8008b9c <_dtoa_r+0x8e4>
 8008a10:	2c00      	cmp	r4, #0
 8008a12:	f000 80c0 	beq.w	8008b96 <_dtoa_r+0x8de>
 8008a16:	4629      	mov	r1, r5
 8008a18:	4622      	mov	r2, r4
 8008a1a:	4648      	mov	r0, r9
 8008a1c:	f000 fd12 	bl	8009444 <__pow5mult>
 8008a20:	9a02      	ldr	r2, [sp, #8]
 8008a22:	4601      	mov	r1, r0
 8008a24:	4605      	mov	r5, r0
 8008a26:	4648      	mov	r0, r9
 8008a28:	f000 fc6a 	bl	8009300 <__multiply>
 8008a2c:	9902      	ldr	r1, [sp, #8]
 8008a2e:	4680      	mov	r8, r0
 8008a30:	4648      	mov	r0, r9
 8008a32:	f000 fb51 	bl	80090d8 <_Bfree>
 8008a36:	9b08      	ldr	r3, [sp, #32]
 8008a38:	1b1b      	subs	r3, r3, r4
 8008a3a:	9308      	str	r3, [sp, #32]
 8008a3c:	f000 80b1 	beq.w	8008ba2 <_dtoa_r+0x8ea>
 8008a40:	9a08      	ldr	r2, [sp, #32]
 8008a42:	4641      	mov	r1, r8
 8008a44:	4648      	mov	r0, r9
 8008a46:	f000 fcfd 	bl	8009444 <__pow5mult>
 8008a4a:	9002      	str	r0, [sp, #8]
 8008a4c:	2101      	movs	r1, #1
 8008a4e:	4648      	mov	r0, r9
 8008a50:	f000 fc40 	bl	80092d4 <__i2b>
 8008a54:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008a56:	4604      	mov	r4, r0
 8008a58:	2b00      	cmp	r3, #0
 8008a5a:	f000 81d8 	beq.w	8008e0e <_dtoa_r+0xb56>
 8008a5e:	461a      	mov	r2, r3
 8008a60:	4601      	mov	r1, r0
 8008a62:	4648      	mov	r0, r9
 8008a64:	f000 fcee 	bl	8009444 <__pow5mult>
 8008a68:	9b07      	ldr	r3, [sp, #28]
 8008a6a:	2b01      	cmp	r3, #1
 8008a6c:	4604      	mov	r4, r0
 8008a6e:	f300 809f 	bgt.w	8008bb0 <_dtoa_r+0x8f8>
 8008a72:	9b04      	ldr	r3, [sp, #16]
 8008a74:	2b00      	cmp	r3, #0
 8008a76:	f040 8097 	bne.w	8008ba8 <_dtoa_r+0x8f0>
 8008a7a:	9b05      	ldr	r3, [sp, #20]
 8008a7c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008a80:	2b00      	cmp	r3, #0
 8008a82:	f040 8093 	bne.w	8008bac <_dtoa_r+0x8f4>
 8008a86:	9b05      	ldr	r3, [sp, #20]
 8008a88:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008a8c:	0d1b      	lsrs	r3, r3, #20
 8008a8e:	051b      	lsls	r3, r3, #20
 8008a90:	b133      	cbz	r3, 8008aa0 <_dtoa_r+0x7e8>
 8008a92:	9b00      	ldr	r3, [sp, #0]
 8008a94:	3301      	adds	r3, #1
 8008a96:	9300      	str	r3, [sp, #0]
 8008a98:	9b06      	ldr	r3, [sp, #24]
 8008a9a:	3301      	adds	r3, #1
 8008a9c:	9306      	str	r3, [sp, #24]
 8008a9e:	2301      	movs	r3, #1
 8008aa0:	9308      	str	r3, [sp, #32]
 8008aa2:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008aa4:	2b00      	cmp	r3, #0
 8008aa6:	f000 81b8 	beq.w	8008e1a <_dtoa_r+0xb62>
 8008aaa:	6923      	ldr	r3, [r4, #16]
 8008aac:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008ab0:	6918      	ldr	r0, [r3, #16]
 8008ab2:	f000 fbc3 	bl	800923c <__hi0bits>
 8008ab6:	f1c0 0020 	rsb	r0, r0, #32
 8008aba:	9b06      	ldr	r3, [sp, #24]
 8008abc:	4418      	add	r0, r3
 8008abe:	f010 001f 	ands.w	r0, r0, #31
 8008ac2:	f000 8082 	beq.w	8008bca <_dtoa_r+0x912>
 8008ac6:	f1c0 0320 	rsb	r3, r0, #32
 8008aca:	2b04      	cmp	r3, #4
 8008acc:	dd73      	ble.n	8008bb6 <_dtoa_r+0x8fe>
 8008ace:	9b00      	ldr	r3, [sp, #0]
 8008ad0:	f1c0 001c 	rsb	r0, r0, #28
 8008ad4:	4403      	add	r3, r0
 8008ad6:	9300      	str	r3, [sp, #0]
 8008ad8:	9b06      	ldr	r3, [sp, #24]
 8008ada:	4403      	add	r3, r0
 8008adc:	4406      	add	r6, r0
 8008ade:	9306      	str	r3, [sp, #24]
 8008ae0:	9b00      	ldr	r3, [sp, #0]
 8008ae2:	2b00      	cmp	r3, #0
 8008ae4:	dd05      	ble.n	8008af2 <_dtoa_r+0x83a>
 8008ae6:	9902      	ldr	r1, [sp, #8]
 8008ae8:	461a      	mov	r2, r3
 8008aea:	4648      	mov	r0, r9
 8008aec:	f000 fd04 	bl	80094f8 <__lshift>
 8008af0:	9002      	str	r0, [sp, #8]
 8008af2:	9b06      	ldr	r3, [sp, #24]
 8008af4:	2b00      	cmp	r3, #0
 8008af6:	dd05      	ble.n	8008b04 <_dtoa_r+0x84c>
 8008af8:	4621      	mov	r1, r4
 8008afa:	461a      	mov	r2, r3
 8008afc:	4648      	mov	r0, r9
 8008afe:	f000 fcfb 	bl	80094f8 <__lshift>
 8008b02:	4604      	mov	r4, r0
 8008b04:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8008b06:	2b00      	cmp	r3, #0
 8008b08:	d061      	beq.n	8008bce <_dtoa_r+0x916>
 8008b0a:	9802      	ldr	r0, [sp, #8]
 8008b0c:	4621      	mov	r1, r4
 8008b0e:	f000 fd5f 	bl	80095d0 <__mcmp>
 8008b12:	2800      	cmp	r0, #0
 8008b14:	da5b      	bge.n	8008bce <_dtoa_r+0x916>
 8008b16:	2300      	movs	r3, #0
 8008b18:	9902      	ldr	r1, [sp, #8]
 8008b1a:	220a      	movs	r2, #10
 8008b1c:	4648      	mov	r0, r9
 8008b1e:	f000 fafd 	bl	800911c <__multadd>
 8008b22:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008b24:	9002      	str	r0, [sp, #8]
 8008b26:	f107 38ff 	add.w	r8, r7, #4294967295
 8008b2a:	2b00      	cmp	r3, #0
 8008b2c:	f000 8177 	beq.w	8008e1e <_dtoa_r+0xb66>
 8008b30:	4629      	mov	r1, r5
 8008b32:	2300      	movs	r3, #0
 8008b34:	220a      	movs	r2, #10
 8008b36:	4648      	mov	r0, r9
 8008b38:	f000 faf0 	bl	800911c <__multadd>
 8008b3c:	f1bb 0f00 	cmp.w	fp, #0
 8008b40:	4605      	mov	r5, r0
 8008b42:	dc6f      	bgt.n	8008c24 <_dtoa_r+0x96c>
 8008b44:	9b07      	ldr	r3, [sp, #28]
 8008b46:	2b02      	cmp	r3, #2
 8008b48:	dc49      	bgt.n	8008bde <_dtoa_r+0x926>
 8008b4a:	e06b      	b.n	8008c24 <_dtoa_r+0x96c>
 8008b4c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008b4e:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 8008b52:	e73c      	b.n	80089ce <_dtoa_r+0x716>
 8008b54:	3fe00000 	.word	0x3fe00000
 8008b58:	40240000 	.word	0x40240000
 8008b5c:	9b03      	ldr	r3, [sp, #12]
 8008b5e:	1e5c      	subs	r4, r3, #1
 8008b60:	9b08      	ldr	r3, [sp, #32]
 8008b62:	42a3      	cmp	r3, r4
 8008b64:	db09      	blt.n	8008b7a <_dtoa_r+0x8c2>
 8008b66:	1b1c      	subs	r4, r3, r4
 8008b68:	9b03      	ldr	r3, [sp, #12]
 8008b6a:	2b00      	cmp	r3, #0
 8008b6c:	f6bf af30 	bge.w	80089d0 <_dtoa_r+0x718>
 8008b70:	9b00      	ldr	r3, [sp, #0]
 8008b72:	9a03      	ldr	r2, [sp, #12]
 8008b74:	1a9e      	subs	r6, r3, r2
 8008b76:	2300      	movs	r3, #0
 8008b78:	e72b      	b.n	80089d2 <_dtoa_r+0x71a>
 8008b7a:	9b08      	ldr	r3, [sp, #32]
 8008b7c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008b7e:	9408      	str	r4, [sp, #32]
 8008b80:	1ae3      	subs	r3, r4, r3
 8008b82:	441a      	add	r2, r3
 8008b84:	9e00      	ldr	r6, [sp, #0]
 8008b86:	9b03      	ldr	r3, [sp, #12]
 8008b88:	920d      	str	r2, [sp, #52]	@ 0x34
 8008b8a:	2400      	movs	r4, #0
 8008b8c:	e721      	b.n	80089d2 <_dtoa_r+0x71a>
 8008b8e:	9c08      	ldr	r4, [sp, #32]
 8008b90:	9e00      	ldr	r6, [sp, #0]
 8008b92:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 8008b94:	e728      	b.n	80089e8 <_dtoa_r+0x730>
 8008b96:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008b9a:	e751      	b.n	8008a40 <_dtoa_r+0x788>
 8008b9c:	9a08      	ldr	r2, [sp, #32]
 8008b9e:	9902      	ldr	r1, [sp, #8]
 8008ba0:	e750      	b.n	8008a44 <_dtoa_r+0x78c>
 8008ba2:	f8cd 8008 	str.w	r8, [sp, #8]
 8008ba6:	e751      	b.n	8008a4c <_dtoa_r+0x794>
 8008ba8:	2300      	movs	r3, #0
 8008baa:	e779      	b.n	8008aa0 <_dtoa_r+0x7e8>
 8008bac:	9b04      	ldr	r3, [sp, #16]
 8008bae:	e777      	b.n	8008aa0 <_dtoa_r+0x7e8>
 8008bb0:	2300      	movs	r3, #0
 8008bb2:	9308      	str	r3, [sp, #32]
 8008bb4:	e779      	b.n	8008aaa <_dtoa_r+0x7f2>
 8008bb6:	d093      	beq.n	8008ae0 <_dtoa_r+0x828>
 8008bb8:	9a00      	ldr	r2, [sp, #0]
 8008bba:	331c      	adds	r3, #28
 8008bbc:	441a      	add	r2, r3
 8008bbe:	9200      	str	r2, [sp, #0]
 8008bc0:	9a06      	ldr	r2, [sp, #24]
 8008bc2:	441a      	add	r2, r3
 8008bc4:	441e      	add	r6, r3
 8008bc6:	9206      	str	r2, [sp, #24]
 8008bc8:	e78a      	b.n	8008ae0 <_dtoa_r+0x828>
 8008bca:	4603      	mov	r3, r0
 8008bcc:	e7f4      	b.n	8008bb8 <_dtoa_r+0x900>
 8008bce:	9b03      	ldr	r3, [sp, #12]
 8008bd0:	2b00      	cmp	r3, #0
 8008bd2:	46b8      	mov	r8, r7
 8008bd4:	dc20      	bgt.n	8008c18 <_dtoa_r+0x960>
 8008bd6:	469b      	mov	fp, r3
 8008bd8:	9b07      	ldr	r3, [sp, #28]
 8008bda:	2b02      	cmp	r3, #2
 8008bdc:	dd1e      	ble.n	8008c1c <_dtoa_r+0x964>
 8008bde:	f1bb 0f00 	cmp.w	fp, #0
 8008be2:	f47f adb1 	bne.w	8008748 <_dtoa_r+0x490>
 8008be6:	4621      	mov	r1, r4
 8008be8:	465b      	mov	r3, fp
 8008bea:	2205      	movs	r2, #5
 8008bec:	4648      	mov	r0, r9
 8008bee:	f000 fa95 	bl	800911c <__multadd>
 8008bf2:	4601      	mov	r1, r0
 8008bf4:	4604      	mov	r4, r0
 8008bf6:	9802      	ldr	r0, [sp, #8]
 8008bf8:	f000 fcea 	bl	80095d0 <__mcmp>
 8008bfc:	2800      	cmp	r0, #0
 8008bfe:	f77f ada3 	ble.w	8008748 <_dtoa_r+0x490>
 8008c02:	4656      	mov	r6, sl
 8008c04:	2331      	movs	r3, #49	@ 0x31
 8008c06:	f806 3b01 	strb.w	r3, [r6], #1
 8008c0a:	f108 0801 	add.w	r8, r8, #1
 8008c0e:	e59f      	b.n	8008750 <_dtoa_r+0x498>
 8008c10:	9c03      	ldr	r4, [sp, #12]
 8008c12:	46b8      	mov	r8, r7
 8008c14:	4625      	mov	r5, r4
 8008c16:	e7f4      	b.n	8008c02 <_dtoa_r+0x94a>
 8008c18:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008c1c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008c1e:	2b00      	cmp	r3, #0
 8008c20:	f000 8101 	beq.w	8008e26 <_dtoa_r+0xb6e>
 8008c24:	2e00      	cmp	r6, #0
 8008c26:	dd05      	ble.n	8008c34 <_dtoa_r+0x97c>
 8008c28:	4629      	mov	r1, r5
 8008c2a:	4632      	mov	r2, r6
 8008c2c:	4648      	mov	r0, r9
 8008c2e:	f000 fc63 	bl	80094f8 <__lshift>
 8008c32:	4605      	mov	r5, r0
 8008c34:	9b08      	ldr	r3, [sp, #32]
 8008c36:	2b00      	cmp	r3, #0
 8008c38:	d05c      	beq.n	8008cf4 <_dtoa_r+0xa3c>
 8008c3a:	6869      	ldr	r1, [r5, #4]
 8008c3c:	4648      	mov	r0, r9
 8008c3e:	f000 fa0b 	bl	8009058 <_Balloc>
 8008c42:	4606      	mov	r6, r0
 8008c44:	b928      	cbnz	r0, 8008c52 <_dtoa_r+0x99a>
 8008c46:	4b82      	ldr	r3, [pc, #520]	@ (8008e50 <_dtoa_r+0xb98>)
 8008c48:	4602      	mov	r2, r0
 8008c4a:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008c4e:	f7ff bb4a 	b.w	80082e6 <_dtoa_r+0x2e>
 8008c52:	692a      	ldr	r2, [r5, #16]
 8008c54:	3202      	adds	r2, #2
 8008c56:	0092      	lsls	r2, r2, #2
 8008c58:	f105 010c 	add.w	r1, r5, #12
 8008c5c:	300c      	adds	r0, #12
 8008c5e:	f7ff fa8e 	bl	800817e <memcpy>
 8008c62:	2201      	movs	r2, #1
 8008c64:	4631      	mov	r1, r6
 8008c66:	4648      	mov	r0, r9
 8008c68:	f000 fc46 	bl	80094f8 <__lshift>
 8008c6c:	f10a 0301 	add.w	r3, sl, #1
 8008c70:	9300      	str	r3, [sp, #0]
 8008c72:	eb0a 030b 	add.w	r3, sl, fp
 8008c76:	9308      	str	r3, [sp, #32]
 8008c78:	9b04      	ldr	r3, [sp, #16]
 8008c7a:	f003 0301 	and.w	r3, r3, #1
 8008c7e:	462f      	mov	r7, r5
 8008c80:	9306      	str	r3, [sp, #24]
 8008c82:	4605      	mov	r5, r0
 8008c84:	9b00      	ldr	r3, [sp, #0]
 8008c86:	9802      	ldr	r0, [sp, #8]
 8008c88:	4621      	mov	r1, r4
 8008c8a:	f103 3bff 	add.w	fp, r3, #4294967295
 8008c8e:	f7ff fa8b 	bl	80081a8 <quorem>
 8008c92:	4603      	mov	r3, r0
 8008c94:	3330      	adds	r3, #48	@ 0x30
 8008c96:	9003      	str	r0, [sp, #12]
 8008c98:	4639      	mov	r1, r7
 8008c9a:	9802      	ldr	r0, [sp, #8]
 8008c9c:	9309      	str	r3, [sp, #36]	@ 0x24
 8008c9e:	f000 fc97 	bl	80095d0 <__mcmp>
 8008ca2:	462a      	mov	r2, r5
 8008ca4:	9004      	str	r0, [sp, #16]
 8008ca6:	4621      	mov	r1, r4
 8008ca8:	4648      	mov	r0, r9
 8008caa:	f000 fcad 	bl	8009608 <__mdiff>
 8008cae:	68c2      	ldr	r2, [r0, #12]
 8008cb0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cb2:	4606      	mov	r6, r0
 8008cb4:	bb02      	cbnz	r2, 8008cf8 <_dtoa_r+0xa40>
 8008cb6:	4601      	mov	r1, r0
 8008cb8:	9802      	ldr	r0, [sp, #8]
 8008cba:	f000 fc89 	bl	80095d0 <__mcmp>
 8008cbe:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	4631      	mov	r1, r6
 8008cc4:	4648      	mov	r0, r9
 8008cc6:	920c      	str	r2, [sp, #48]	@ 0x30
 8008cc8:	9309      	str	r3, [sp, #36]	@ 0x24
 8008cca:	f000 fa05 	bl	80090d8 <_Bfree>
 8008cce:	9b07      	ldr	r3, [sp, #28]
 8008cd0:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8008cd2:	9e00      	ldr	r6, [sp, #0]
 8008cd4:	ea42 0103 	orr.w	r1, r2, r3
 8008cd8:	9b06      	ldr	r3, [sp, #24]
 8008cda:	4319      	orrs	r1, r3
 8008cdc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008cde:	d10d      	bne.n	8008cfc <_dtoa_r+0xa44>
 8008ce0:	2b39      	cmp	r3, #57	@ 0x39
 8008ce2:	d027      	beq.n	8008d34 <_dtoa_r+0xa7c>
 8008ce4:	9a04      	ldr	r2, [sp, #16]
 8008ce6:	2a00      	cmp	r2, #0
 8008ce8:	dd01      	ble.n	8008cee <_dtoa_r+0xa36>
 8008cea:	9b03      	ldr	r3, [sp, #12]
 8008cec:	3331      	adds	r3, #49	@ 0x31
 8008cee:	f88b 3000 	strb.w	r3, [fp]
 8008cf2:	e52e      	b.n	8008752 <_dtoa_r+0x49a>
 8008cf4:	4628      	mov	r0, r5
 8008cf6:	e7b9      	b.n	8008c6c <_dtoa_r+0x9b4>
 8008cf8:	2201      	movs	r2, #1
 8008cfa:	e7e2      	b.n	8008cc2 <_dtoa_r+0xa0a>
 8008cfc:	9904      	ldr	r1, [sp, #16]
 8008cfe:	2900      	cmp	r1, #0
 8008d00:	db04      	blt.n	8008d0c <_dtoa_r+0xa54>
 8008d02:	9807      	ldr	r0, [sp, #28]
 8008d04:	4301      	orrs	r1, r0
 8008d06:	9806      	ldr	r0, [sp, #24]
 8008d08:	4301      	orrs	r1, r0
 8008d0a:	d120      	bne.n	8008d4e <_dtoa_r+0xa96>
 8008d0c:	2a00      	cmp	r2, #0
 8008d0e:	ddee      	ble.n	8008cee <_dtoa_r+0xa36>
 8008d10:	9902      	ldr	r1, [sp, #8]
 8008d12:	9300      	str	r3, [sp, #0]
 8008d14:	2201      	movs	r2, #1
 8008d16:	4648      	mov	r0, r9
 8008d18:	f000 fbee 	bl	80094f8 <__lshift>
 8008d1c:	4621      	mov	r1, r4
 8008d1e:	9002      	str	r0, [sp, #8]
 8008d20:	f000 fc56 	bl	80095d0 <__mcmp>
 8008d24:	2800      	cmp	r0, #0
 8008d26:	9b00      	ldr	r3, [sp, #0]
 8008d28:	dc02      	bgt.n	8008d30 <_dtoa_r+0xa78>
 8008d2a:	d1e0      	bne.n	8008cee <_dtoa_r+0xa36>
 8008d2c:	07da      	lsls	r2, r3, #31
 8008d2e:	d5de      	bpl.n	8008cee <_dtoa_r+0xa36>
 8008d30:	2b39      	cmp	r3, #57	@ 0x39
 8008d32:	d1da      	bne.n	8008cea <_dtoa_r+0xa32>
 8008d34:	2339      	movs	r3, #57	@ 0x39
 8008d36:	f88b 3000 	strb.w	r3, [fp]
 8008d3a:	4633      	mov	r3, r6
 8008d3c:	461e      	mov	r6, r3
 8008d3e:	3b01      	subs	r3, #1
 8008d40:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8008d44:	2a39      	cmp	r2, #57	@ 0x39
 8008d46:	d04e      	beq.n	8008de6 <_dtoa_r+0xb2e>
 8008d48:	3201      	adds	r2, #1
 8008d4a:	701a      	strb	r2, [r3, #0]
 8008d4c:	e501      	b.n	8008752 <_dtoa_r+0x49a>
 8008d4e:	2a00      	cmp	r2, #0
 8008d50:	dd03      	ble.n	8008d5a <_dtoa_r+0xaa2>
 8008d52:	2b39      	cmp	r3, #57	@ 0x39
 8008d54:	d0ee      	beq.n	8008d34 <_dtoa_r+0xa7c>
 8008d56:	3301      	adds	r3, #1
 8008d58:	e7c9      	b.n	8008cee <_dtoa_r+0xa36>
 8008d5a:	9a00      	ldr	r2, [sp, #0]
 8008d5c:	9908      	ldr	r1, [sp, #32]
 8008d5e:	f802 3c01 	strb.w	r3, [r2, #-1]
 8008d62:	428a      	cmp	r2, r1
 8008d64:	d028      	beq.n	8008db8 <_dtoa_r+0xb00>
 8008d66:	9902      	ldr	r1, [sp, #8]
 8008d68:	2300      	movs	r3, #0
 8008d6a:	220a      	movs	r2, #10
 8008d6c:	4648      	mov	r0, r9
 8008d6e:	f000 f9d5 	bl	800911c <__multadd>
 8008d72:	42af      	cmp	r7, r5
 8008d74:	9002      	str	r0, [sp, #8]
 8008d76:	f04f 0300 	mov.w	r3, #0
 8008d7a:	f04f 020a 	mov.w	r2, #10
 8008d7e:	4639      	mov	r1, r7
 8008d80:	4648      	mov	r0, r9
 8008d82:	d107      	bne.n	8008d94 <_dtoa_r+0xadc>
 8008d84:	f000 f9ca 	bl	800911c <__multadd>
 8008d88:	4607      	mov	r7, r0
 8008d8a:	4605      	mov	r5, r0
 8008d8c:	9b00      	ldr	r3, [sp, #0]
 8008d8e:	3301      	adds	r3, #1
 8008d90:	9300      	str	r3, [sp, #0]
 8008d92:	e777      	b.n	8008c84 <_dtoa_r+0x9cc>
 8008d94:	f000 f9c2 	bl	800911c <__multadd>
 8008d98:	4629      	mov	r1, r5
 8008d9a:	4607      	mov	r7, r0
 8008d9c:	2300      	movs	r3, #0
 8008d9e:	220a      	movs	r2, #10
 8008da0:	4648      	mov	r0, r9
 8008da2:	f000 f9bb 	bl	800911c <__multadd>
 8008da6:	4605      	mov	r5, r0
 8008da8:	e7f0      	b.n	8008d8c <_dtoa_r+0xad4>
 8008daa:	f1bb 0f00 	cmp.w	fp, #0
 8008dae:	bfcc      	ite	gt
 8008db0:	465e      	movgt	r6, fp
 8008db2:	2601      	movle	r6, #1
 8008db4:	4456      	add	r6, sl
 8008db6:	2700      	movs	r7, #0
 8008db8:	9902      	ldr	r1, [sp, #8]
 8008dba:	9300      	str	r3, [sp, #0]
 8008dbc:	2201      	movs	r2, #1
 8008dbe:	4648      	mov	r0, r9
 8008dc0:	f000 fb9a 	bl	80094f8 <__lshift>
 8008dc4:	4621      	mov	r1, r4
 8008dc6:	9002      	str	r0, [sp, #8]
 8008dc8:	f000 fc02 	bl	80095d0 <__mcmp>
 8008dcc:	2800      	cmp	r0, #0
 8008dce:	dcb4      	bgt.n	8008d3a <_dtoa_r+0xa82>
 8008dd0:	d102      	bne.n	8008dd8 <_dtoa_r+0xb20>
 8008dd2:	9b00      	ldr	r3, [sp, #0]
 8008dd4:	07db      	lsls	r3, r3, #31
 8008dd6:	d4b0      	bmi.n	8008d3a <_dtoa_r+0xa82>
 8008dd8:	4633      	mov	r3, r6
 8008dda:	461e      	mov	r6, r3
 8008ddc:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8008de0:	2a30      	cmp	r2, #48	@ 0x30
 8008de2:	d0fa      	beq.n	8008dda <_dtoa_r+0xb22>
 8008de4:	e4b5      	b.n	8008752 <_dtoa_r+0x49a>
 8008de6:	459a      	cmp	sl, r3
 8008de8:	d1a8      	bne.n	8008d3c <_dtoa_r+0xa84>
 8008dea:	2331      	movs	r3, #49	@ 0x31
 8008dec:	f108 0801 	add.w	r8, r8, #1
 8008df0:	f88a 3000 	strb.w	r3, [sl]
 8008df4:	e4ad      	b.n	8008752 <_dtoa_r+0x49a>
 8008df6:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8008df8:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8008e54 <_dtoa_r+0xb9c>
 8008dfc:	b11b      	cbz	r3, 8008e06 <_dtoa_r+0xb4e>
 8008dfe:	f10a 0308 	add.w	r3, sl, #8
 8008e02:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8008e04:	6013      	str	r3, [r2, #0]
 8008e06:	4650      	mov	r0, sl
 8008e08:	b017      	add	sp, #92	@ 0x5c
 8008e0a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008e0e:	9b07      	ldr	r3, [sp, #28]
 8008e10:	2b01      	cmp	r3, #1
 8008e12:	f77f ae2e 	ble.w	8008a72 <_dtoa_r+0x7ba>
 8008e16:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008e18:	9308      	str	r3, [sp, #32]
 8008e1a:	2001      	movs	r0, #1
 8008e1c:	e64d      	b.n	8008aba <_dtoa_r+0x802>
 8008e1e:	f1bb 0f00 	cmp.w	fp, #0
 8008e22:	f77f aed9 	ble.w	8008bd8 <_dtoa_r+0x920>
 8008e26:	4656      	mov	r6, sl
 8008e28:	9802      	ldr	r0, [sp, #8]
 8008e2a:	4621      	mov	r1, r4
 8008e2c:	f7ff f9bc 	bl	80081a8 <quorem>
 8008e30:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8008e34:	f806 3b01 	strb.w	r3, [r6], #1
 8008e38:	eba6 020a 	sub.w	r2, r6, sl
 8008e3c:	4593      	cmp	fp, r2
 8008e3e:	ddb4      	ble.n	8008daa <_dtoa_r+0xaf2>
 8008e40:	9902      	ldr	r1, [sp, #8]
 8008e42:	2300      	movs	r3, #0
 8008e44:	220a      	movs	r2, #10
 8008e46:	4648      	mov	r0, r9
 8008e48:	f000 f968 	bl	800911c <__multadd>
 8008e4c:	9002      	str	r0, [sp, #8]
 8008e4e:	e7eb      	b.n	8008e28 <_dtoa_r+0xb70>
 8008e50:	0800bae5 	.word	0x0800bae5
 8008e54:	0800ba69 	.word	0x0800ba69

08008e58 <_free_r>:
 8008e58:	b538      	push	{r3, r4, r5, lr}
 8008e5a:	4605      	mov	r5, r0
 8008e5c:	2900      	cmp	r1, #0
 8008e5e:	d041      	beq.n	8008ee4 <_free_r+0x8c>
 8008e60:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008e64:	1f0c      	subs	r4, r1, #4
 8008e66:	2b00      	cmp	r3, #0
 8008e68:	bfb8      	it	lt
 8008e6a:	18e4      	addlt	r4, r4, r3
 8008e6c:	f000 f8e8 	bl	8009040 <__malloc_lock>
 8008e70:	4a1d      	ldr	r2, [pc, #116]	@ (8008ee8 <_free_r+0x90>)
 8008e72:	6813      	ldr	r3, [r2, #0]
 8008e74:	b933      	cbnz	r3, 8008e84 <_free_r+0x2c>
 8008e76:	6063      	str	r3, [r4, #4]
 8008e78:	6014      	str	r4, [r2, #0]
 8008e7a:	4628      	mov	r0, r5
 8008e7c:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008e80:	f000 b8e4 	b.w	800904c <__malloc_unlock>
 8008e84:	42a3      	cmp	r3, r4
 8008e86:	d908      	bls.n	8008e9a <_free_r+0x42>
 8008e88:	6820      	ldr	r0, [r4, #0]
 8008e8a:	1821      	adds	r1, r4, r0
 8008e8c:	428b      	cmp	r3, r1
 8008e8e:	bf01      	itttt	eq
 8008e90:	6819      	ldreq	r1, [r3, #0]
 8008e92:	685b      	ldreq	r3, [r3, #4]
 8008e94:	1809      	addeq	r1, r1, r0
 8008e96:	6021      	streq	r1, [r4, #0]
 8008e98:	e7ed      	b.n	8008e76 <_free_r+0x1e>
 8008e9a:	461a      	mov	r2, r3
 8008e9c:	685b      	ldr	r3, [r3, #4]
 8008e9e:	b10b      	cbz	r3, 8008ea4 <_free_r+0x4c>
 8008ea0:	42a3      	cmp	r3, r4
 8008ea2:	d9fa      	bls.n	8008e9a <_free_r+0x42>
 8008ea4:	6811      	ldr	r1, [r2, #0]
 8008ea6:	1850      	adds	r0, r2, r1
 8008ea8:	42a0      	cmp	r0, r4
 8008eaa:	d10b      	bne.n	8008ec4 <_free_r+0x6c>
 8008eac:	6820      	ldr	r0, [r4, #0]
 8008eae:	4401      	add	r1, r0
 8008eb0:	1850      	adds	r0, r2, r1
 8008eb2:	4283      	cmp	r3, r0
 8008eb4:	6011      	str	r1, [r2, #0]
 8008eb6:	d1e0      	bne.n	8008e7a <_free_r+0x22>
 8008eb8:	6818      	ldr	r0, [r3, #0]
 8008eba:	685b      	ldr	r3, [r3, #4]
 8008ebc:	6053      	str	r3, [r2, #4]
 8008ebe:	4408      	add	r0, r1
 8008ec0:	6010      	str	r0, [r2, #0]
 8008ec2:	e7da      	b.n	8008e7a <_free_r+0x22>
 8008ec4:	d902      	bls.n	8008ecc <_free_r+0x74>
 8008ec6:	230c      	movs	r3, #12
 8008ec8:	602b      	str	r3, [r5, #0]
 8008eca:	e7d6      	b.n	8008e7a <_free_r+0x22>
 8008ecc:	6820      	ldr	r0, [r4, #0]
 8008ece:	1821      	adds	r1, r4, r0
 8008ed0:	428b      	cmp	r3, r1
 8008ed2:	bf04      	itt	eq
 8008ed4:	6819      	ldreq	r1, [r3, #0]
 8008ed6:	685b      	ldreq	r3, [r3, #4]
 8008ed8:	6063      	str	r3, [r4, #4]
 8008eda:	bf04      	itt	eq
 8008edc:	1809      	addeq	r1, r1, r0
 8008ede:	6021      	streq	r1, [r4, #0]
 8008ee0:	6054      	str	r4, [r2, #4]
 8008ee2:	e7ca      	b.n	8008e7a <_free_r+0x22>
 8008ee4:	bd38      	pop	{r3, r4, r5, pc}
 8008ee6:	bf00      	nop
 8008ee8:	20000940 	.word	0x20000940

08008eec <malloc>:
 8008eec:	4b02      	ldr	r3, [pc, #8]	@ (8008ef8 <malloc+0xc>)
 8008eee:	4601      	mov	r1, r0
 8008ef0:	6818      	ldr	r0, [r3, #0]
 8008ef2:	f000 b825 	b.w	8008f40 <_malloc_r>
 8008ef6:	bf00      	nop
 8008ef8:	20000034 	.word	0x20000034

08008efc <sbrk_aligned>:
 8008efc:	b570      	push	{r4, r5, r6, lr}
 8008efe:	4e0f      	ldr	r6, [pc, #60]	@ (8008f3c <sbrk_aligned+0x40>)
 8008f00:	460c      	mov	r4, r1
 8008f02:	6831      	ldr	r1, [r6, #0]
 8008f04:	4605      	mov	r5, r0
 8008f06:	b911      	cbnz	r1, 8008f0e <sbrk_aligned+0x12>
 8008f08:	f001 fe6e 	bl	800abe8 <_sbrk_r>
 8008f0c:	6030      	str	r0, [r6, #0]
 8008f0e:	4621      	mov	r1, r4
 8008f10:	4628      	mov	r0, r5
 8008f12:	f001 fe69 	bl	800abe8 <_sbrk_r>
 8008f16:	1c43      	adds	r3, r0, #1
 8008f18:	d103      	bne.n	8008f22 <sbrk_aligned+0x26>
 8008f1a:	f04f 34ff 	mov.w	r4, #4294967295
 8008f1e:	4620      	mov	r0, r4
 8008f20:	bd70      	pop	{r4, r5, r6, pc}
 8008f22:	1cc4      	adds	r4, r0, #3
 8008f24:	f024 0403 	bic.w	r4, r4, #3
 8008f28:	42a0      	cmp	r0, r4
 8008f2a:	d0f8      	beq.n	8008f1e <sbrk_aligned+0x22>
 8008f2c:	1a21      	subs	r1, r4, r0
 8008f2e:	4628      	mov	r0, r5
 8008f30:	f001 fe5a 	bl	800abe8 <_sbrk_r>
 8008f34:	3001      	adds	r0, #1
 8008f36:	d1f2      	bne.n	8008f1e <sbrk_aligned+0x22>
 8008f38:	e7ef      	b.n	8008f1a <sbrk_aligned+0x1e>
 8008f3a:	bf00      	nop
 8008f3c:	2000093c 	.word	0x2000093c

08008f40 <_malloc_r>:
 8008f40:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008f44:	1ccd      	adds	r5, r1, #3
 8008f46:	f025 0503 	bic.w	r5, r5, #3
 8008f4a:	3508      	adds	r5, #8
 8008f4c:	2d0c      	cmp	r5, #12
 8008f4e:	bf38      	it	cc
 8008f50:	250c      	movcc	r5, #12
 8008f52:	2d00      	cmp	r5, #0
 8008f54:	4606      	mov	r6, r0
 8008f56:	db01      	blt.n	8008f5c <_malloc_r+0x1c>
 8008f58:	42a9      	cmp	r1, r5
 8008f5a:	d904      	bls.n	8008f66 <_malloc_r+0x26>
 8008f5c:	230c      	movs	r3, #12
 8008f5e:	6033      	str	r3, [r6, #0]
 8008f60:	2000      	movs	r0, #0
 8008f62:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008f66:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 800903c <_malloc_r+0xfc>
 8008f6a:	f000 f869 	bl	8009040 <__malloc_lock>
 8008f6e:	f8d8 3000 	ldr.w	r3, [r8]
 8008f72:	461c      	mov	r4, r3
 8008f74:	bb44      	cbnz	r4, 8008fc8 <_malloc_r+0x88>
 8008f76:	4629      	mov	r1, r5
 8008f78:	4630      	mov	r0, r6
 8008f7a:	f7ff ffbf 	bl	8008efc <sbrk_aligned>
 8008f7e:	1c43      	adds	r3, r0, #1
 8008f80:	4604      	mov	r4, r0
 8008f82:	d158      	bne.n	8009036 <_malloc_r+0xf6>
 8008f84:	f8d8 4000 	ldr.w	r4, [r8]
 8008f88:	4627      	mov	r7, r4
 8008f8a:	2f00      	cmp	r7, #0
 8008f8c:	d143      	bne.n	8009016 <_malloc_r+0xd6>
 8008f8e:	2c00      	cmp	r4, #0
 8008f90:	d04b      	beq.n	800902a <_malloc_r+0xea>
 8008f92:	6823      	ldr	r3, [r4, #0]
 8008f94:	4639      	mov	r1, r7
 8008f96:	4630      	mov	r0, r6
 8008f98:	eb04 0903 	add.w	r9, r4, r3
 8008f9c:	f001 fe24 	bl	800abe8 <_sbrk_r>
 8008fa0:	4581      	cmp	r9, r0
 8008fa2:	d142      	bne.n	800902a <_malloc_r+0xea>
 8008fa4:	6821      	ldr	r1, [r4, #0]
 8008fa6:	1a6d      	subs	r5, r5, r1
 8008fa8:	4629      	mov	r1, r5
 8008faa:	4630      	mov	r0, r6
 8008fac:	f7ff ffa6 	bl	8008efc <sbrk_aligned>
 8008fb0:	3001      	adds	r0, #1
 8008fb2:	d03a      	beq.n	800902a <_malloc_r+0xea>
 8008fb4:	6823      	ldr	r3, [r4, #0]
 8008fb6:	442b      	add	r3, r5
 8008fb8:	6023      	str	r3, [r4, #0]
 8008fba:	f8d8 3000 	ldr.w	r3, [r8]
 8008fbe:	685a      	ldr	r2, [r3, #4]
 8008fc0:	bb62      	cbnz	r2, 800901c <_malloc_r+0xdc>
 8008fc2:	f8c8 7000 	str.w	r7, [r8]
 8008fc6:	e00f      	b.n	8008fe8 <_malloc_r+0xa8>
 8008fc8:	6822      	ldr	r2, [r4, #0]
 8008fca:	1b52      	subs	r2, r2, r5
 8008fcc:	d420      	bmi.n	8009010 <_malloc_r+0xd0>
 8008fce:	2a0b      	cmp	r2, #11
 8008fd0:	d917      	bls.n	8009002 <_malloc_r+0xc2>
 8008fd2:	1961      	adds	r1, r4, r5
 8008fd4:	42a3      	cmp	r3, r4
 8008fd6:	6025      	str	r5, [r4, #0]
 8008fd8:	bf18      	it	ne
 8008fda:	6059      	strne	r1, [r3, #4]
 8008fdc:	6863      	ldr	r3, [r4, #4]
 8008fde:	bf08      	it	eq
 8008fe0:	f8c8 1000 	streq.w	r1, [r8]
 8008fe4:	5162      	str	r2, [r4, r5]
 8008fe6:	604b      	str	r3, [r1, #4]
 8008fe8:	4630      	mov	r0, r6
 8008fea:	f000 f82f 	bl	800904c <__malloc_unlock>
 8008fee:	f104 000b 	add.w	r0, r4, #11
 8008ff2:	1d23      	adds	r3, r4, #4
 8008ff4:	f020 0007 	bic.w	r0, r0, #7
 8008ff8:	1ac2      	subs	r2, r0, r3
 8008ffa:	bf1c      	itt	ne
 8008ffc:	1a1b      	subne	r3, r3, r0
 8008ffe:	50a3      	strne	r3, [r4, r2]
 8009000:	e7af      	b.n	8008f62 <_malloc_r+0x22>
 8009002:	6862      	ldr	r2, [r4, #4]
 8009004:	42a3      	cmp	r3, r4
 8009006:	bf0c      	ite	eq
 8009008:	f8c8 2000 	streq.w	r2, [r8]
 800900c:	605a      	strne	r2, [r3, #4]
 800900e:	e7eb      	b.n	8008fe8 <_malloc_r+0xa8>
 8009010:	4623      	mov	r3, r4
 8009012:	6864      	ldr	r4, [r4, #4]
 8009014:	e7ae      	b.n	8008f74 <_malloc_r+0x34>
 8009016:	463c      	mov	r4, r7
 8009018:	687f      	ldr	r7, [r7, #4]
 800901a:	e7b6      	b.n	8008f8a <_malloc_r+0x4a>
 800901c:	461a      	mov	r2, r3
 800901e:	685b      	ldr	r3, [r3, #4]
 8009020:	42a3      	cmp	r3, r4
 8009022:	d1fb      	bne.n	800901c <_malloc_r+0xdc>
 8009024:	2300      	movs	r3, #0
 8009026:	6053      	str	r3, [r2, #4]
 8009028:	e7de      	b.n	8008fe8 <_malloc_r+0xa8>
 800902a:	230c      	movs	r3, #12
 800902c:	6033      	str	r3, [r6, #0]
 800902e:	4630      	mov	r0, r6
 8009030:	f000 f80c 	bl	800904c <__malloc_unlock>
 8009034:	e794      	b.n	8008f60 <_malloc_r+0x20>
 8009036:	6005      	str	r5, [r0, #0]
 8009038:	e7d6      	b.n	8008fe8 <_malloc_r+0xa8>
 800903a:	bf00      	nop
 800903c:	20000940 	.word	0x20000940

08009040 <__malloc_lock>:
 8009040:	4801      	ldr	r0, [pc, #4]	@ (8009048 <__malloc_lock+0x8>)
 8009042:	f7ff b89a 	b.w	800817a <__retarget_lock_acquire_recursive>
 8009046:	bf00      	nop
 8009048:	20000938 	.word	0x20000938

0800904c <__malloc_unlock>:
 800904c:	4801      	ldr	r0, [pc, #4]	@ (8009054 <__malloc_unlock+0x8>)
 800904e:	f7ff b895 	b.w	800817c <__retarget_lock_release_recursive>
 8009052:	bf00      	nop
 8009054:	20000938 	.word	0x20000938

08009058 <_Balloc>:
 8009058:	b570      	push	{r4, r5, r6, lr}
 800905a:	69c6      	ldr	r6, [r0, #28]
 800905c:	4604      	mov	r4, r0
 800905e:	460d      	mov	r5, r1
 8009060:	b976      	cbnz	r6, 8009080 <_Balloc+0x28>
 8009062:	2010      	movs	r0, #16
 8009064:	f7ff ff42 	bl	8008eec <malloc>
 8009068:	4602      	mov	r2, r0
 800906a:	61e0      	str	r0, [r4, #28]
 800906c:	b920      	cbnz	r0, 8009078 <_Balloc+0x20>
 800906e:	4b18      	ldr	r3, [pc, #96]	@ (80090d0 <_Balloc+0x78>)
 8009070:	4818      	ldr	r0, [pc, #96]	@ (80090d4 <_Balloc+0x7c>)
 8009072:	216b      	movs	r1, #107	@ 0x6b
 8009074:	f001 fdd0 	bl	800ac18 <__assert_func>
 8009078:	e9c0 6601 	strd	r6, r6, [r0, #4]
 800907c:	6006      	str	r6, [r0, #0]
 800907e:	60c6      	str	r6, [r0, #12]
 8009080:	69e6      	ldr	r6, [r4, #28]
 8009082:	68f3      	ldr	r3, [r6, #12]
 8009084:	b183      	cbz	r3, 80090a8 <_Balloc+0x50>
 8009086:	69e3      	ldr	r3, [r4, #28]
 8009088:	68db      	ldr	r3, [r3, #12]
 800908a:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 800908e:	b9b8      	cbnz	r0, 80090c0 <_Balloc+0x68>
 8009090:	2101      	movs	r1, #1
 8009092:	fa01 f605 	lsl.w	r6, r1, r5
 8009096:	1d72      	adds	r2, r6, #5
 8009098:	0092      	lsls	r2, r2, #2
 800909a:	4620      	mov	r0, r4
 800909c:	f001 fdda 	bl	800ac54 <_calloc_r>
 80090a0:	b160      	cbz	r0, 80090bc <_Balloc+0x64>
 80090a2:	e9c0 5601 	strd	r5, r6, [r0, #4]
 80090a6:	e00e      	b.n	80090c6 <_Balloc+0x6e>
 80090a8:	2221      	movs	r2, #33	@ 0x21
 80090aa:	2104      	movs	r1, #4
 80090ac:	4620      	mov	r0, r4
 80090ae:	f001 fdd1 	bl	800ac54 <_calloc_r>
 80090b2:	69e3      	ldr	r3, [r4, #28]
 80090b4:	60f0      	str	r0, [r6, #12]
 80090b6:	68db      	ldr	r3, [r3, #12]
 80090b8:	2b00      	cmp	r3, #0
 80090ba:	d1e4      	bne.n	8009086 <_Balloc+0x2e>
 80090bc:	2000      	movs	r0, #0
 80090be:	bd70      	pop	{r4, r5, r6, pc}
 80090c0:	6802      	ldr	r2, [r0, #0]
 80090c2:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80090c6:	2300      	movs	r3, #0
 80090c8:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80090cc:	e7f7      	b.n	80090be <_Balloc+0x66>
 80090ce:	bf00      	nop
 80090d0:	0800ba76 	.word	0x0800ba76
 80090d4:	0800baf6 	.word	0x0800baf6

080090d8 <_Bfree>:
 80090d8:	b570      	push	{r4, r5, r6, lr}
 80090da:	69c6      	ldr	r6, [r0, #28]
 80090dc:	4605      	mov	r5, r0
 80090de:	460c      	mov	r4, r1
 80090e0:	b976      	cbnz	r6, 8009100 <_Bfree+0x28>
 80090e2:	2010      	movs	r0, #16
 80090e4:	f7ff ff02 	bl	8008eec <malloc>
 80090e8:	4602      	mov	r2, r0
 80090ea:	61e8      	str	r0, [r5, #28]
 80090ec:	b920      	cbnz	r0, 80090f8 <_Bfree+0x20>
 80090ee:	4b09      	ldr	r3, [pc, #36]	@ (8009114 <_Bfree+0x3c>)
 80090f0:	4809      	ldr	r0, [pc, #36]	@ (8009118 <_Bfree+0x40>)
 80090f2:	218f      	movs	r1, #143	@ 0x8f
 80090f4:	f001 fd90 	bl	800ac18 <__assert_func>
 80090f8:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80090fc:	6006      	str	r6, [r0, #0]
 80090fe:	60c6      	str	r6, [r0, #12]
 8009100:	b13c      	cbz	r4, 8009112 <_Bfree+0x3a>
 8009102:	69eb      	ldr	r3, [r5, #28]
 8009104:	6862      	ldr	r2, [r4, #4]
 8009106:	68db      	ldr	r3, [r3, #12]
 8009108:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 800910c:	6021      	str	r1, [r4, #0]
 800910e:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8009112:	bd70      	pop	{r4, r5, r6, pc}
 8009114:	0800ba76 	.word	0x0800ba76
 8009118:	0800baf6 	.word	0x0800baf6

0800911c <__multadd>:
 800911c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009120:	690d      	ldr	r5, [r1, #16]
 8009122:	4607      	mov	r7, r0
 8009124:	460c      	mov	r4, r1
 8009126:	461e      	mov	r6, r3
 8009128:	f101 0c14 	add.w	ip, r1, #20
 800912c:	2000      	movs	r0, #0
 800912e:	f8dc 3000 	ldr.w	r3, [ip]
 8009132:	b299      	uxth	r1, r3
 8009134:	fb02 6101 	mla	r1, r2, r1, r6
 8009138:	0c1e      	lsrs	r6, r3, #16
 800913a:	0c0b      	lsrs	r3, r1, #16
 800913c:	fb02 3306 	mla	r3, r2, r6, r3
 8009140:	b289      	uxth	r1, r1
 8009142:	3001      	adds	r0, #1
 8009144:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8009148:	4285      	cmp	r5, r0
 800914a:	f84c 1b04 	str.w	r1, [ip], #4
 800914e:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8009152:	dcec      	bgt.n	800912e <__multadd+0x12>
 8009154:	b30e      	cbz	r6, 800919a <__multadd+0x7e>
 8009156:	68a3      	ldr	r3, [r4, #8]
 8009158:	42ab      	cmp	r3, r5
 800915a:	dc19      	bgt.n	8009190 <__multadd+0x74>
 800915c:	6861      	ldr	r1, [r4, #4]
 800915e:	4638      	mov	r0, r7
 8009160:	3101      	adds	r1, #1
 8009162:	f7ff ff79 	bl	8009058 <_Balloc>
 8009166:	4680      	mov	r8, r0
 8009168:	b928      	cbnz	r0, 8009176 <__multadd+0x5a>
 800916a:	4602      	mov	r2, r0
 800916c:	4b0c      	ldr	r3, [pc, #48]	@ (80091a0 <__multadd+0x84>)
 800916e:	480d      	ldr	r0, [pc, #52]	@ (80091a4 <__multadd+0x88>)
 8009170:	21ba      	movs	r1, #186	@ 0xba
 8009172:	f001 fd51 	bl	800ac18 <__assert_func>
 8009176:	6922      	ldr	r2, [r4, #16]
 8009178:	3202      	adds	r2, #2
 800917a:	f104 010c 	add.w	r1, r4, #12
 800917e:	0092      	lsls	r2, r2, #2
 8009180:	300c      	adds	r0, #12
 8009182:	f7fe fffc 	bl	800817e <memcpy>
 8009186:	4621      	mov	r1, r4
 8009188:	4638      	mov	r0, r7
 800918a:	f7ff ffa5 	bl	80090d8 <_Bfree>
 800918e:	4644      	mov	r4, r8
 8009190:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8009194:	3501      	adds	r5, #1
 8009196:	615e      	str	r6, [r3, #20]
 8009198:	6125      	str	r5, [r4, #16]
 800919a:	4620      	mov	r0, r4
 800919c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80091a0:	0800bae5 	.word	0x0800bae5
 80091a4:	0800baf6 	.word	0x0800baf6

080091a8 <__s2b>:
 80091a8:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80091ac:	460c      	mov	r4, r1
 80091ae:	4615      	mov	r5, r2
 80091b0:	461f      	mov	r7, r3
 80091b2:	2209      	movs	r2, #9
 80091b4:	3308      	adds	r3, #8
 80091b6:	4606      	mov	r6, r0
 80091b8:	fb93 f3f2 	sdiv	r3, r3, r2
 80091bc:	2100      	movs	r1, #0
 80091be:	2201      	movs	r2, #1
 80091c0:	429a      	cmp	r2, r3
 80091c2:	db09      	blt.n	80091d8 <__s2b+0x30>
 80091c4:	4630      	mov	r0, r6
 80091c6:	f7ff ff47 	bl	8009058 <_Balloc>
 80091ca:	b940      	cbnz	r0, 80091de <__s2b+0x36>
 80091cc:	4602      	mov	r2, r0
 80091ce:	4b19      	ldr	r3, [pc, #100]	@ (8009234 <__s2b+0x8c>)
 80091d0:	4819      	ldr	r0, [pc, #100]	@ (8009238 <__s2b+0x90>)
 80091d2:	21d3      	movs	r1, #211	@ 0xd3
 80091d4:	f001 fd20 	bl	800ac18 <__assert_func>
 80091d8:	0052      	lsls	r2, r2, #1
 80091da:	3101      	adds	r1, #1
 80091dc:	e7f0      	b.n	80091c0 <__s2b+0x18>
 80091de:	9b08      	ldr	r3, [sp, #32]
 80091e0:	6143      	str	r3, [r0, #20]
 80091e2:	2d09      	cmp	r5, #9
 80091e4:	f04f 0301 	mov.w	r3, #1
 80091e8:	6103      	str	r3, [r0, #16]
 80091ea:	dd16      	ble.n	800921a <__s2b+0x72>
 80091ec:	f104 0909 	add.w	r9, r4, #9
 80091f0:	46c8      	mov	r8, r9
 80091f2:	442c      	add	r4, r5
 80091f4:	f818 3b01 	ldrb.w	r3, [r8], #1
 80091f8:	4601      	mov	r1, r0
 80091fa:	3b30      	subs	r3, #48	@ 0x30
 80091fc:	220a      	movs	r2, #10
 80091fe:	4630      	mov	r0, r6
 8009200:	f7ff ff8c 	bl	800911c <__multadd>
 8009204:	45a0      	cmp	r8, r4
 8009206:	d1f5      	bne.n	80091f4 <__s2b+0x4c>
 8009208:	f1a5 0408 	sub.w	r4, r5, #8
 800920c:	444c      	add	r4, r9
 800920e:	1b2d      	subs	r5, r5, r4
 8009210:	1963      	adds	r3, r4, r5
 8009212:	42bb      	cmp	r3, r7
 8009214:	db04      	blt.n	8009220 <__s2b+0x78>
 8009216:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800921a:	340a      	adds	r4, #10
 800921c:	2509      	movs	r5, #9
 800921e:	e7f6      	b.n	800920e <__s2b+0x66>
 8009220:	f814 3b01 	ldrb.w	r3, [r4], #1
 8009224:	4601      	mov	r1, r0
 8009226:	3b30      	subs	r3, #48	@ 0x30
 8009228:	220a      	movs	r2, #10
 800922a:	4630      	mov	r0, r6
 800922c:	f7ff ff76 	bl	800911c <__multadd>
 8009230:	e7ee      	b.n	8009210 <__s2b+0x68>
 8009232:	bf00      	nop
 8009234:	0800bae5 	.word	0x0800bae5
 8009238:	0800baf6 	.word	0x0800baf6

0800923c <__hi0bits>:
 800923c:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8009240:	4603      	mov	r3, r0
 8009242:	bf36      	itet	cc
 8009244:	0403      	lslcc	r3, r0, #16
 8009246:	2000      	movcs	r0, #0
 8009248:	2010      	movcc	r0, #16
 800924a:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 800924e:	bf3c      	itt	cc
 8009250:	021b      	lslcc	r3, r3, #8
 8009252:	3008      	addcc	r0, #8
 8009254:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8009258:	bf3c      	itt	cc
 800925a:	011b      	lslcc	r3, r3, #4
 800925c:	3004      	addcc	r0, #4
 800925e:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8009262:	bf3c      	itt	cc
 8009264:	009b      	lslcc	r3, r3, #2
 8009266:	3002      	addcc	r0, #2
 8009268:	2b00      	cmp	r3, #0
 800926a:	db05      	blt.n	8009278 <__hi0bits+0x3c>
 800926c:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8009270:	f100 0001 	add.w	r0, r0, #1
 8009274:	bf08      	it	eq
 8009276:	2020      	moveq	r0, #32
 8009278:	4770      	bx	lr

0800927a <__lo0bits>:
 800927a:	6803      	ldr	r3, [r0, #0]
 800927c:	4602      	mov	r2, r0
 800927e:	f013 0007 	ands.w	r0, r3, #7
 8009282:	d00b      	beq.n	800929c <__lo0bits+0x22>
 8009284:	07d9      	lsls	r1, r3, #31
 8009286:	d421      	bmi.n	80092cc <__lo0bits+0x52>
 8009288:	0798      	lsls	r0, r3, #30
 800928a:	bf49      	itett	mi
 800928c:	085b      	lsrmi	r3, r3, #1
 800928e:	089b      	lsrpl	r3, r3, #2
 8009290:	2001      	movmi	r0, #1
 8009292:	6013      	strmi	r3, [r2, #0]
 8009294:	bf5c      	itt	pl
 8009296:	6013      	strpl	r3, [r2, #0]
 8009298:	2002      	movpl	r0, #2
 800929a:	4770      	bx	lr
 800929c:	b299      	uxth	r1, r3
 800929e:	b909      	cbnz	r1, 80092a4 <__lo0bits+0x2a>
 80092a0:	0c1b      	lsrs	r3, r3, #16
 80092a2:	2010      	movs	r0, #16
 80092a4:	b2d9      	uxtb	r1, r3
 80092a6:	b909      	cbnz	r1, 80092ac <__lo0bits+0x32>
 80092a8:	3008      	adds	r0, #8
 80092aa:	0a1b      	lsrs	r3, r3, #8
 80092ac:	0719      	lsls	r1, r3, #28
 80092ae:	bf04      	itt	eq
 80092b0:	091b      	lsreq	r3, r3, #4
 80092b2:	3004      	addeq	r0, #4
 80092b4:	0799      	lsls	r1, r3, #30
 80092b6:	bf04      	itt	eq
 80092b8:	089b      	lsreq	r3, r3, #2
 80092ba:	3002      	addeq	r0, #2
 80092bc:	07d9      	lsls	r1, r3, #31
 80092be:	d403      	bmi.n	80092c8 <__lo0bits+0x4e>
 80092c0:	085b      	lsrs	r3, r3, #1
 80092c2:	f100 0001 	add.w	r0, r0, #1
 80092c6:	d003      	beq.n	80092d0 <__lo0bits+0x56>
 80092c8:	6013      	str	r3, [r2, #0]
 80092ca:	4770      	bx	lr
 80092cc:	2000      	movs	r0, #0
 80092ce:	4770      	bx	lr
 80092d0:	2020      	movs	r0, #32
 80092d2:	4770      	bx	lr

080092d4 <__i2b>:
 80092d4:	b510      	push	{r4, lr}
 80092d6:	460c      	mov	r4, r1
 80092d8:	2101      	movs	r1, #1
 80092da:	f7ff febd 	bl	8009058 <_Balloc>
 80092de:	4602      	mov	r2, r0
 80092e0:	b928      	cbnz	r0, 80092ee <__i2b+0x1a>
 80092e2:	4b05      	ldr	r3, [pc, #20]	@ (80092f8 <__i2b+0x24>)
 80092e4:	4805      	ldr	r0, [pc, #20]	@ (80092fc <__i2b+0x28>)
 80092e6:	f240 1145 	movw	r1, #325	@ 0x145
 80092ea:	f001 fc95 	bl	800ac18 <__assert_func>
 80092ee:	2301      	movs	r3, #1
 80092f0:	6144      	str	r4, [r0, #20]
 80092f2:	6103      	str	r3, [r0, #16]
 80092f4:	bd10      	pop	{r4, pc}
 80092f6:	bf00      	nop
 80092f8:	0800bae5 	.word	0x0800bae5
 80092fc:	0800baf6 	.word	0x0800baf6

08009300 <__multiply>:
 8009300:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009304:	4617      	mov	r7, r2
 8009306:	690a      	ldr	r2, [r1, #16]
 8009308:	693b      	ldr	r3, [r7, #16]
 800930a:	429a      	cmp	r2, r3
 800930c:	bfa8      	it	ge
 800930e:	463b      	movge	r3, r7
 8009310:	4689      	mov	r9, r1
 8009312:	bfa4      	itt	ge
 8009314:	460f      	movge	r7, r1
 8009316:	4699      	movge	r9, r3
 8009318:	693d      	ldr	r5, [r7, #16]
 800931a:	f8d9 a010 	ldr.w	sl, [r9, #16]
 800931e:	68bb      	ldr	r3, [r7, #8]
 8009320:	6879      	ldr	r1, [r7, #4]
 8009322:	eb05 060a 	add.w	r6, r5, sl
 8009326:	42b3      	cmp	r3, r6
 8009328:	b085      	sub	sp, #20
 800932a:	bfb8      	it	lt
 800932c:	3101      	addlt	r1, #1
 800932e:	f7ff fe93 	bl	8009058 <_Balloc>
 8009332:	b930      	cbnz	r0, 8009342 <__multiply+0x42>
 8009334:	4602      	mov	r2, r0
 8009336:	4b41      	ldr	r3, [pc, #260]	@ (800943c <__multiply+0x13c>)
 8009338:	4841      	ldr	r0, [pc, #260]	@ (8009440 <__multiply+0x140>)
 800933a:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 800933e:	f001 fc6b 	bl	800ac18 <__assert_func>
 8009342:	f100 0414 	add.w	r4, r0, #20
 8009346:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800934a:	4623      	mov	r3, r4
 800934c:	2200      	movs	r2, #0
 800934e:	4573      	cmp	r3, lr
 8009350:	d320      	bcc.n	8009394 <__multiply+0x94>
 8009352:	f107 0814 	add.w	r8, r7, #20
 8009356:	f109 0114 	add.w	r1, r9, #20
 800935a:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 800935e:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 8009362:	9302      	str	r3, [sp, #8]
 8009364:	1beb      	subs	r3, r5, r7
 8009366:	3b15      	subs	r3, #21
 8009368:	f023 0303 	bic.w	r3, r3, #3
 800936c:	3304      	adds	r3, #4
 800936e:	3715      	adds	r7, #21
 8009370:	42bd      	cmp	r5, r7
 8009372:	bf38      	it	cc
 8009374:	2304      	movcc	r3, #4
 8009376:	9301      	str	r3, [sp, #4]
 8009378:	9b02      	ldr	r3, [sp, #8]
 800937a:	9103      	str	r1, [sp, #12]
 800937c:	428b      	cmp	r3, r1
 800937e:	d80c      	bhi.n	800939a <__multiply+0x9a>
 8009380:	2e00      	cmp	r6, #0
 8009382:	dd03      	ble.n	800938c <__multiply+0x8c>
 8009384:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8009388:	2b00      	cmp	r3, #0
 800938a:	d055      	beq.n	8009438 <__multiply+0x138>
 800938c:	6106      	str	r6, [r0, #16]
 800938e:	b005      	add	sp, #20
 8009390:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009394:	f843 2b04 	str.w	r2, [r3], #4
 8009398:	e7d9      	b.n	800934e <__multiply+0x4e>
 800939a:	f8b1 a000 	ldrh.w	sl, [r1]
 800939e:	f1ba 0f00 	cmp.w	sl, #0
 80093a2:	d01f      	beq.n	80093e4 <__multiply+0xe4>
 80093a4:	46c4      	mov	ip, r8
 80093a6:	46a1      	mov	r9, r4
 80093a8:	2700      	movs	r7, #0
 80093aa:	f85c 2b04 	ldr.w	r2, [ip], #4
 80093ae:	f8d9 3000 	ldr.w	r3, [r9]
 80093b2:	fa1f fb82 	uxth.w	fp, r2
 80093b6:	b29b      	uxth	r3, r3
 80093b8:	fb0a 330b 	mla	r3, sl, fp, r3
 80093bc:	443b      	add	r3, r7
 80093be:	f8d9 7000 	ldr.w	r7, [r9]
 80093c2:	0c12      	lsrs	r2, r2, #16
 80093c4:	0c3f      	lsrs	r7, r7, #16
 80093c6:	fb0a 7202 	mla	r2, sl, r2, r7
 80093ca:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80093ce:	b29b      	uxth	r3, r3
 80093d0:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80093d4:	4565      	cmp	r5, ip
 80093d6:	f849 3b04 	str.w	r3, [r9], #4
 80093da:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80093de:	d8e4      	bhi.n	80093aa <__multiply+0xaa>
 80093e0:	9b01      	ldr	r3, [sp, #4]
 80093e2:	50e7      	str	r7, [r4, r3]
 80093e4:	9b03      	ldr	r3, [sp, #12]
 80093e6:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80093ea:	3104      	adds	r1, #4
 80093ec:	f1b9 0f00 	cmp.w	r9, #0
 80093f0:	d020      	beq.n	8009434 <__multiply+0x134>
 80093f2:	6823      	ldr	r3, [r4, #0]
 80093f4:	4647      	mov	r7, r8
 80093f6:	46a4      	mov	ip, r4
 80093f8:	f04f 0a00 	mov.w	sl, #0
 80093fc:	f8b7 b000 	ldrh.w	fp, [r7]
 8009400:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8009404:	fb09 220b 	mla	r2, r9, fp, r2
 8009408:	4452      	add	r2, sl
 800940a:	b29b      	uxth	r3, r3
 800940c:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8009410:	f84c 3b04 	str.w	r3, [ip], #4
 8009414:	f857 3b04 	ldr.w	r3, [r7], #4
 8009418:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800941c:	f8bc 3000 	ldrh.w	r3, [ip]
 8009420:	fb09 330a 	mla	r3, r9, sl, r3
 8009424:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8009428:	42bd      	cmp	r5, r7
 800942a:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 800942e:	d8e5      	bhi.n	80093fc <__multiply+0xfc>
 8009430:	9a01      	ldr	r2, [sp, #4]
 8009432:	50a3      	str	r3, [r4, r2]
 8009434:	3404      	adds	r4, #4
 8009436:	e79f      	b.n	8009378 <__multiply+0x78>
 8009438:	3e01      	subs	r6, #1
 800943a:	e7a1      	b.n	8009380 <__multiply+0x80>
 800943c:	0800bae5 	.word	0x0800bae5
 8009440:	0800baf6 	.word	0x0800baf6

08009444 <__pow5mult>:
 8009444:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009448:	4615      	mov	r5, r2
 800944a:	f012 0203 	ands.w	r2, r2, #3
 800944e:	4607      	mov	r7, r0
 8009450:	460e      	mov	r6, r1
 8009452:	d007      	beq.n	8009464 <__pow5mult+0x20>
 8009454:	4c25      	ldr	r4, [pc, #148]	@ (80094ec <__pow5mult+0xa8>)
 8009456:	3a01      	subs	r2, #1
 8009458:	2300      	movs	r3, #0
 800945a:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 800945e:	f7ff fe5d 	bl	800911c <__multadd>
 8009462:	4606      	mov	r6, r0
 8009464:	10ad      	asrs	r5, r5, #2
 8009466:	d03d      	beq.n	80094e4 <__pow5mult+0xa0>
 8009468:	69fc      	ldr	r4, [r7, #28]
 800946a:	b97c      	cbnz	r4, 800948c <__pow5mult+0x48>
 800946c:	2010      	movs	r0, #16
 800946e:	f7ff fd3d 	bl	8008eec <malloc>
 8009472:	4602      	mov	r2, r0
 8009474:	61f8      	str	r0, [r7, #28]
 8009476:	b928      	cbnz	r0, 8009484 <__pow5mult+0x40>
 8009478:	4b1d      	ldr	r3, [pc, #116]	@ (80094f0 <__pow5mult+0xac>)
 800947a:	481e      	ldr	r0, [pc, #120]	@ (80094f4 <__pow5mult+0xb0>)
 800947c:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8009480:	f001 fbca 	bl	800ac18 <__assert_func>
 8009484:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8009488:	6004      	str	r4, [r0, #0]
 800948a:	60c4      	str	r4, [r0, #12]
 800948c:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8009490:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8009494:	b94c      	cbnz	r4, 80094aa <__pow5mult+0x66>
 8009496:	f240 2171 	movw	r1, #625	@ 0x271
 800949a:	4638      	mov	r0, r7
 800949c:	f7ff ff1a 	bl	80092d4 <__i2b>
 80094a0:	2300      	movs	r3, #0
 80094a2:	f8c8 0008 	str.w	r0, [r8, #8]
 80094a6:	4604      	mov	r4, r0
 80094a8:	6003      	str	r3, [r0, #0]
 80094aa:	f04f 0900 	mov.w	r9, #0
 80094ae:	07eb      	lsls	r3, r5, #31
 80094b0:	d50a      	bpl.n	80094c8 <__pow5mult+0x84>
 80094b2:	4631      	mov	r1, r6
 80094b4:	4622      	mov	r2, r4
 80094b6:	4638      	mov	r0, r7
 80094b8:	f7ff ff22 	bl	8009300 <__multiply>
 80094bc:	4631      	mov	r1, r6
 80094be:	4680      	mov	r8, r0
 80094c0:	4638      	mov	r0, r7
 80094c2:	f7ff fe09 	bl	80090d8 <_Bfree>
 80094c6:	4646      	mov	r6, r8
 80094c8:	106d      	asrs	r5, r5, #1
 80094ca:	d00b      	beq.n	80094e4 <__pow5mult+0xa0>
 80094cc:	6820      	ldr	r0, [r4, #0]
 80094ce:	b938      	cbnz	r0, 80094e0 <__pow5mult+0x9c>
 80094d0:	4622      	mov	r2, r4
 80094d2:	4621      	mov	r1, r4
 80094d4:	4638      	mov	r0, r7
 80094d6:	f7ff ff13 	bl	8009300 <__multiply>
 80094da:	6020      	str	r0, [r4, #0]
 80094dc:	f8c0 9000 	str.w	r9, [r0]
 80094e0:	4604      	mov	r4, r0
 80094e2:	e7e4      	b.n	80094ae <__pow5mult+0x6a>
 80094e4:	4630      	mov	r0, r6
 80094e6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094ea:	bf00      	nop
 80094ec:	0800bc08 	.word	0x0800bc08
 80094f0:	0800ba76 	.word	0x0800ba76
 80094f4:	0800baf6 	.word	0x0800baf6

080094f8 <__lshift>:
 80094f8:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80094fc:	460c      	mov	r4, r1
 80094fe:	6849      	ldr	r1, [r1, #4]
 8009500:	6923      	ldr	r3, [r4, #16]
 8009502:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8009506:	68a3      	ldr	r3, [r4, #8]
 8009508:	4607      	mov	r7, r0
 800950a:	4691      	mov	r9, r2
 800950c:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8009510:	f108 0601 	add.w	r6, r8, #1
 8009514:	42b3      	cmp	r3, r6
 8009516:	db0b      	blt.n	8009530 <__lshift+0x38>
 8009518:	4638      	mov	r0, r7
 800951a:	f7ff fd9d 	bl	8009058 <_Balloc>
 800951e:	4605      	mov	r5, r0
 8009520:	b948      	cbnz	r0, 8009536 <__lshift+0x3e>
 8009522:	4602      	mov	r2, r0
 8009524:	4b28      	ldr	r3, [pc, #160]	@ (80095c8 <__lshift+0xd0>)
 8009526:	4829      	ldr	r0, [pc, #164]	@ (80095cc <__lshift+0xd4>)
 8009528:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 800952c:	f001 fb74 	bl	800ac18 <__assert_func>
 8009530:	3101      	adds	r1, #1
 8009532:	005b      	lsls	r3, r3, #1
 8009534:	e7ee      	b.n	8009514 <__lshift+0x1c>
 8009536:	2300      	movs	r3, #0
 8009538:	f100 0114 	add.w	r1, r0, #20
 800953c:	f100 0210 	add.w	r2, r0, #16
 8009540:	4618      	mov	r0, r3
 8009542:	4553      	cmp	r3, sl
 8009544:	db33      	blt.n	80095ae <__lshift+0xb6>
 8009546:	6920      	ldr	r0, [r4, #16]
 8009548:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 800954c:	f104 0314 	add.w	r3, r4, #20
 8009550:	f019 091f 	ands.w	r9, r9, #31
 8009554:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8009558:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 800955c:	d02b      	beq.n	80095b6 <__lshift+0xbe>
 800955e:	f1c9 0e20 	rsb	lr, r9, #32
 8009562:	468a      	mov	sl, r1
 8009564:	2200      	movs	r2, #0
 8009566:	6818      	ldr	r0, [r3, #0]
 8009568:	fa00 f009 	lsl.w	r0, r0, r9
 800956c:	4310      	orrs	r0, r2
 800956e:	f84a 0b04 	str.w	r0, [sl], #4
 8009572:	f853 2b04 	ldr.w	r2, [r3], #4
 8009576:	459c      	cmp	ip, r3
 8009578:	fa22 f20e 	lsr.w	r2, r2, lr
 800957c:	d8f3      	bhi.n	8009566 <__lshift+0x6e>
 800957e:	ebac 0304 	sub.w	r3, ip, r4
 8009582:	3b15      	subs	r3, #21
 8009584:	f023 0303 	bic.w	r3, r3, #3
 8009588:	3304      	adds	r3, #4
 800958a:	f104 0015 	add.w	r0, r4, #21
 800958e:	4560      	cmp	r0, ip
 8009590:	bf88      	it	hi
 8009592:	2304      	movhi	r3, #4
 8009594:	50ca      	str	r2, [r1, r3]
 8009596:	b10a      	cbz	r2, 800959c <__lshift+0xa4>
 8009598:	f108 0602 	add.w	r6, r8, #2
 800959c:	3e01      	subs	r6, #1
 800959e:	4638      	mov	r0, r7
 80095a0:	612e      	str	r6, [r5, #16]
 80095a2:	4621      	mov	r1, r4
 80095a4:	f7ff fd98 	bl	80090d8 <_Bfree>
 80095a8:	4628      	mov	r0, r5
 80095aa:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80095ae:	f842 0f04 	str.w	r0, [r2, #4]!
 80095b2:	3301      	adds	r3, #1
 80095b4:	e7c5      	b.n	8009542 <__lshift+0x4a>
 80095b6:	3904      	subs	r1, #4
 80095b8:	f853 2b04 	ldr.w	r2, [r3], #4
 80095bc:	f841 2f04 	str.w	r2, [r1, #4]!
 80095c0:	459c      	cmp	ip, r3
 80095c2:	d8f9      	bhi.n	80095b8 <__lshift+0xc0>
 80095c4:	e7ea      	b.n	800959c <__lshift+0xa4>
 80095c6:	bf00      	nop
 80095c8:	0800bae5 	.word	0x0800bae5
 80095cc:	0800baf6 	.word	0x0800baf6

080095d0 <__mcmp>:
 80095d0:	690a      	ldr	r2, [r1, #16]
 80095d2:	4603      	mov	r3, r0
 80095d4:	6900      	ldr	r0, [r0, #16]
 80095d6:	1a80      	subs	r0, r0, r2
 80095d8:	b530      	push	{r4, r5, lr}
 80095da:	d10e      	bne.n	80095fa <__mcmp+0x2a>
 80095dc:	3314      	adds	r3, #20
 80095de:	3114      	adds	r1, #20
 80095e0:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 80095e4:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 80095e8:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 80095ec:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 80095f0:	4295      	cmp	r5, r2
 80095f2:	d003      	beq.n	80095fc <__mcmp+0x2c>
 80095f4:	d205      	bcs.n	8009602 <__mcmp+0x32>
 80095f6:	f04f 30ff 	mov.w	r0, #4294967295
 80095fa:	bd30      	pop	{r4, r5, pc}
 80095fc:	42a3      	cmp	r3, r4
 80095fe:	d3f3      	bcc.n	80095e8 <__mcmp+0x18>
 8009600:	e7fb      	b.n	80095fa <__mcmp+0x2a>
 8009602:	2001      	movs	r0, #1
 8009604:	e7f9      	b.n	80095fa <__mcmp+0x2a>
	...

08009608 <__mdiff>:
 8009608:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800960c:	4689      	mov	r9, r1
 800960e:	4606      	mov	r6, r0
 8009610:	4611      	mov	r1, r2
 8009612:	4648      	mov	r0, r9
 8009614:	4614      	mov	r4, r2
 8009616:	f7ff ffdb 	bl	80095d0 <__mcmp>
 800961a:	1e05      	subs	r5, r0, #0
 800961c:	d112      	bne.n	8009644 <__mdiff+0x3c>
 800961e:	4629      	mov	r1, r5
 8009620:	4630      	mov	r0, r6
 8009622:	f7ff fd19 	bl	8009058 <_Balloc>
 8009626:	4602      	mov	r2, r0
 8009628:	b928      	cbnz	r0, 8009636 <__mdiff+0x2e>
 800962a:	4b3f      	ldr	r3, [pc, #252]	@ (8009728 <__mdiff+0x120>)
 800962c:	f240 2137 	movw	r1, #567	@ 0x237
 8009630:	483e      	ldr	r0, [pc, #248]	@ (800972c <__mdiff+0x124>)
 8009632:	f001 faf1 	bl	800ac18 <__assert_func>
 8009636:	2301      	movs	r3, #1
 8009638:	e9c0 3504 	strd	r3, r5, [r0, #16]
 800963c:	4610      	mov	r0, r2
 800963e:	b003      	add	sp, #12
 8009640:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009644:	bfbc      	itt	lt
 8009646:	464b      	movlt	r3, r9
 8009648:	46a1      	movlt	r9, r4
 800964a:	4630      	mov	r0, r6
 800964c:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8009650:	bfba      	itte	lt
 8009652:	461c      	movlt	r4, r3
 8009654:	2501      	movlt	r5, #1
 8009656:	2500      	movge	r5, #0
 8009658:	f7ff fcfe 	bl	8009058 <_Balloc>
 800965c:	4602      	mov	r2, r0
 800965e:	b918      	cbnz	r0, 8009668 <__mdiff+0x60>
 8009660:	4b31      	ldr	r3, [pc, #196]	@ (8009728 <__mdiff+0x120>)
 8009662:	f240 2145 	movw	r1, #581	@ 0x245
 8009666:	e7e3      	b.n	8009630 <__mdiff+0x28>
 8009668:	f8d9 7010 	ldr.w	r7, [r9, #16]
 800966c:	6926      	ldr	r6, [r4, #16]
 800966e:	60c5      	str	r5, [r0, #12]
 8009670:	f109 0310 	add.w	r3, r9, #16
 8009674:	f109 0514 	add.w	r5, r9, #20
 8009678:	f104 0e14 	add.w	lr, r4, #20
 800967c:	f100 0b14 	add.w	fp, r0, #20
 8009680:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8009684:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8009688:	9301      	str	r3, [sp, #4]
 800968a:	46d9      	mov	r9, fp
 800968c:	f04f 0c00 	mov.w	ip, #0
 8009690:	9b01      	ldr	r3, [sp, #4]
 8009692:	f85e 0b04 	ldr.w	r0, [lr], #4
 8009696:	f853 af04 	ldr.w	sl, [r3, #4]!
 800969a:	9301      	str	r3, [sp, #4]
 800969c:	fa1f f38a 	uxth.w	r3, sl
 80096a0:	4619      	mov	r1, r3
 80096a2:	b283      	uxth	r3, r0
 80096a4:	1acb      	subs	r3, r1, r3
 80096a6:	0c00      	lsrs	r0, r0, #16
 80096a8:	4463      	add	r3, ip
 80096aa:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 80096ae:	eb00 4023 	add.w	r0, r0, r3, asr #16
 80096b2:	b29b      	uxth	r3, r3
 80096b4:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 80096b8:	4576      	cmp	r6, lr
 80096ba:	f849 3b04 	str.w	r3, [r9], #4
 80096be:	ea4f 4c20 	mov.w	ip, r0, asr #16
 80096c2:	d8e5      	bhi.n	8009690 <__mdiff+0x88>
 80096c4:	1b33      	subs	r3, r6, r4
 80096c6:	3b15      	subs	r3, #21
 80096c8:	f023 0303 	bic.w	r3, r3, #3
 80096cc:	3415      	adds	r4, #21
 80096ce:	3304      	adds	r3, #4
 80096d0:	42a6      	cmp	r6, r4
 80096d2:	bf38      	it	cc
 80096d4:	2304      	movcc	r3, #4
 80096d6:	441d      	add	r5, r3
 80096d8:	445b      	add	r3, fp
 80096da:	461e      	mov	r6, r3
 80096dc:	462c      	mov	r4, r5
 80096de:	4544      	cmp	r4, r8
 80096e0:	d30e      	bcc.n	8009700 <__mdiff+0xf8>
 80096e2:	f108 0103 	add.w	r1, r8, #3
 80096e6:	1b49      	subs	r1, r1, r5
 80096e8:	f021 0103 	bic.w	r1, r1, #3
 80096ec:	3d03      	subs	r5, #3
 80096ee:	45a8      	cmp	r8, r5
 80096f0:	bf38      	it	cc
 80096f2:	2100      	movcc	r1, #0
 80096f4:	440b      	add	r3, r1
 80096f6:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80096fa:	b191      	cbz	r1, 8009722 <__mdiff+0x11a>
 80096fc:	6117      	str	r7, [r2, #16]
 80096fe:	e79d      	b.n	800963c <__mdiff+0x34>
 8009700:	f854 1b04 	ldr.w	r1, [r4], #4
 8009704:	46e6      	mov	lr, ip
 8009706:	0c08      	lsrs	r0, r1, #16
 8009708:	fa1c fc81 	uxtah	ip, ip, r1
 800970c:	4471      	add	r1, lr
 800970e:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8009712:	b289      	uxth	r1, r1
 8009714:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8009718:	f846 1b04 	str.w	r1, [r6], #4
 800971c:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8009720:	e7dd      	b.n	80096de <__mdiff+0xd6>
 8009722:	3f01      	subs	r7, #1
 8009724:	e7e7      	b.n	80096f6 <__mdiff+0xee>
 8009726:	bf00      	nop
 8009728:	0800bae5 	.word	0x0800bae5
 800972c:	0800baf6 	.word	0x0800baf6

08009730 <__ulp>:
 8009730:	b082      	sub	sp, #8
 8009732:	ed8d 0b00 	vstr	d0, [sp]
 8009736:	9a01      	ldr	r2, [sp, #4]
 8009738:	4b0f      	ldr	r3, [pc, #60]	@ (8009778 <__ulp+0x48>)
 800973a:	4013      	ands	r3, r2
 800973c:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8009740:	2b00      	cmp	r3, #0
 8009742:	dc08      	bgt.n	8009756 <__ulp+0x26>
 8009744:	425b      	negs	r3, r3
 8009746:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 800974a:	ea4f 5223 	mov.w	r2, r3, asr #20
 800974e:	da04      	bge.n	800975a <__ulp+0x2a>
 8009750:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8009754:	4113      	asrs	r3, r2
 8009756:	2200      	movs	r2, #0
 8009758:	e008      	b.n	800976c <__ulp+0x3c>
 800975a:	f1a2 0314 	sub.w	r3, r2, #20
 800975e:	2b1e      	cmp	r3, #30
 8009760:	bfda      	itte	le
 8009762:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8009766:	40da      	lsrle	r2, r3
 8009768:	2201      	movgt	r2, #1
 800976a:	2300      	movs	r3, #0
 800976c:	4619      	mov	r1, r3
 800976e:	4610      	mov	r0, r2
 8009770:	ec41 0b10 	vmov	d0, r0, r1
 8009774:	b002      	add	sp, #8
 8009776:	4770      	bx	lr
 8009778:	7ff00000 	.word	0x7ff00000

0800977c <__b2d>:
 800977c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009780:	6906      	ldr	r6, [r0, #16]
 8009782:	f100 0814 	add.w	r8, r0, #20
 8009786:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 800978a:	1f37      	subs	r7, r6, #4
 800978c:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8009790:	4610      	mov	r0, r2
 8009792:	f7ff fd53 	bl	800923c <__hi0bits>
 8009796:	f1c0 0320 	rsb	r3, r0, #32
 800979a:	280a      	cmp	r0, #10
 800979c:	600b      	str	r3, [r1, #0]
 800979e:	491b      	ldr	r1, [pc, #108]	@ (800980c <__b2d+0x90>)
 80097a0:	dc15      	bgt.n	80097ce <__b2d+0x52>
 80097a2:	f1c0 0c0b 	rsb	ip, r0, #11
 80097a6:	fa22 f30c 	lsr.w	r3, r2, ip
 80097aa:	45b8      	cmp	r8, r7
 80097ac:	ea43 0501 	orr.w	r5, r3, r1
 80097b0:	bf34      	ite	cc
 80097b2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80097b6:	2300      	movcs	r3, #0
 80097b8:	3015      	adds	r0, #21
 80097ba:	fa02 f000 	lsl.w	r0, r2, r0
 80097be:	fa23 f30c 	lsr.w	r3, r3, ip
 80097c2:	4303      	orrs	r3, r0
 80097c4:	461c      	mov	r4, r3
 80097c6:	ec45 4b10 	vmov	d0, r4, r5
 80097ca:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80097ce:	45b8      	cmp	r8, r7
 80097d0:	bf3a      	itte	cc
 80097d2:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 80097d6:	f1a6 0708 	subcc.w	r7, r6, #8
 80097da:	2300      	movcs	r3, #0
 80097dc:	380b      	subs	r0, #11
 80097de:	d012      	beq.n	8009806 <__b2d+0x8a>
 80097e0:	f1c0 0120 	rsb	r1, r0, #32
 80097e4:	fa23 f401 	lsr.w	r4, r3, r1
 80097e8:	4082      	lsls	r2, r0
 80097ea:	4322      	orrs	r2, r4
 80097ec:	4547      	cmp	r7, r8
 80097ee:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 80097f2:	bf8c      	ite	hi
 80097f4:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 80097f8:	2200      	movls	r2, #0
 80097fa:	4083      	lsls	r3, r0
 80097fc:	40ca      	lsrs	r2, r1
 80097fe:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8009802:	4313      	orrs	r3, r2
 8009804:	e7de      	b.n	80097c4 <__b2d+0x48>
 8009806:	ea42 0501 	orr.w	r5, r2, r1
 800980a:	e7db      	b.n	80097c4 <__b2d+0x48>
 800980c:	3ff00000 	.word	0x3ff00000

08009810 <__d2b>:
 8009810:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8009814:	460f      	mov	r7, r1
 8009816:	2101      	movs	r1, #1
 8009818:	ec59 8b10 	vmov	r8, r9, d0
 800981c:	4616      	mov	r6, r2
 800981e:	f7ff fc1b 	bl	8009058 <_Balloc>
 8009822:	4604      	mov	r4, r0
 8009824:	b930      	cbnz	r0, 8009834 <__d2b+0x24>
 8009826:	4602      	mov	r2, r0
 8009828:	4b23      	ldr	r3, [pc, #140]	@ (80098b8 <__d2b+0xa8>)
 800982a:	4824      	ldr	r0, [pc, #144]	@ (80098bc <__d2b+0xac>)
 800982c:	f240 310f 	movw	r1, #783	@ 0x30f
 8009830:	f001 f9f2 	bl	800ac18 <__assert_func>
 8009834:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8009838:	f3c9 0313 	ubfx	r3, r9, #0, #20
 800983c:	b10d      	cbz	r5, 8009842 <__d2b+0x32>
 800983e:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8009842:	9301      	str	r3, [sp, #4]
 8009844:	f1b8 0300 	subs.w	r3, r8, #0
 8009848:	d023      	beq.n	8009892 <__d2b+0x82>
 800984a:	4668      	mov	r0, sp
 800984c:	9300      	str	r3, [sp, #0]
 800984e:	f7ff fd14 	bl	800927a <__lo0bits>
 8009852:	e9dd 1200 	ldrd	r1, r2, [sp]
 8009856:	b1d0      	cbz	r0, 800988e <__d2b+0x7e>
 8009858:	f1c0 0320 	rsb	r3, r0, #32
 800985c:	fa02 f303 	lsl.w	r3, r2, r3
 8009860:	430b      	orrs	r3, r1
 8009862:	40c2      	lsrs	r2, r0
 8009864:	6163      	str	r3, [r4, #20]
 8009866:	9201      	str	r2, [sp, #4]
 8009868:	9b01      	ldr	r3, [sp, #4]
 800986a:	61a3      	str	r3, [r4, #24]
 800986c:	2b00      	cmp	r3, #0
 800986e:	bf0c      	ite	eq
 8009870:	2201      	moveq	r2, #1
 8009872:	2202      	movne	r2, #2
 8009874:	6122      	str	r2, [r4, #16]
 8009876:	b1a5      	cbz	r5, 80098a2 <__d2b+0x92>
 8009878:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 800987c:	4405      	add	r5, r0
 800987e:	603d      	str	r5, [r7, #0]
 8009880:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8009884:	6030      	str	r0, [r6, #0]
 8009886:	4620      	mov	r0, r4
 8009888:	b003      	add	sp, #12
 800988a:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800988e:	6161      	str	r1, [r4, #20]
 8009890:	e7ea      	b.n	8009868 <__d2b+0x58>
 8009892:	a801      	add	r0, sp, #4
 8009894:	f7ff fcf1 	bl	800927a <__lo0bits>
 8009898:	9b01      	ldr	r3, [sp, #4]
 800989a:	6163      	str	r3, [r4, #20]
 800989c:	3020      	adds	r0, #32
 800989e:	2201      	movs	r2, #1
 80098a0:	e7e8      	b.n	8009874 <__d2b+0x64>
 80098a2:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 80098a6:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 80098aa:	6038      	str	r0, [r7, #0]
 80098ac:	6918      	ldr	r0, [r3, #16]
 80098ae:	f7ff fcc5 	bl	800923c <__hi0bits>
 80098b2:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 80098b6:	e7e5      	b.n	8009884 <__d2b+0x74>
 80098b8:	0800bae5 	.word	0x0800bae5
 80098bc:	0800baf6 	.word	0x0800baf6

080098c0 <__ratio>:
 80098c0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80098c4:	b085      	sub	sp, #20
 80098c6:	e9cd 1000 	strd	r1, r0, [sp]
 80098ca:	a902      	add	r1, sp, #8
 80098cc:	f7ff ff56 	bl	800977c <__b2d>
 80098d0:	9800      	ldr	r0, [sp, #0]
 80098d2:	a903      	add	r1, sp, #12
 80098d4:	ec55 4b10 	vmov	r4, r5, d0
 80098d8:	f7ff ff50 	bl	800977c <__b2d>
 80098dc:	9b01      	ldr	r3, [sp, #4]
 80098de:	6919      	ldr	r1, [r3, #16]
 80098e0:	9b00      	ldr	r3, [sp, #0]
 80098e2:	691b      	ldr	r3, [r3, #16]
 80098e4:	1ac9      	subs	r1, r1, r3
 80098e6:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 80098ea:	1a9b      	subs	r3, r3, r2
 80098ec:	ec5b ab10 	vmov	sl, fp, d0
 80098f0:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 80098f4:	2b00      	cmp	r3, #0
 80098f6:	bfce      	itee	gt
 80098f8:	462a      	movgt	r2, r5
 80098fa:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 80098fe:	465a      	movle	r2, fp
 8009900:	462f      	mov	r7, r5
 8009902:	46d9      	mov	r9, fp
 8009904:	bfcc      	ite	gt
 8009906:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 800990a:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 800990e:	464b      	mov	r3, r9
 8009910:	4652      	mov	r2, sl
 8009912:	4620      	mov	r0, r4
 8009914:	4639      	mov	r1, r7
 8009916:	f7f6 ffa1 	bl	800085c <__aeabi_ddiv>
 800991a:	ec41 0b10 	vmov	d0, r0, r1
 800991e:	b005      	add	sp, #20
 8009920:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08009924 <__copybits>:
 8009924:	3901      	subs	r1, #1
 8009926:	b570      	push	{r4, r5, r6, lr}
 8009928:	1149      	asrs	r1, r1, #5
 800992a:	6914      	ldr	r4, [r2, #16]
 800992c:	3101      	adds	r1, #1
 800992e:	f102 0314 	add.w	r3, r2, #20
 8009932:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8009936:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 800993a:	1f05      	subs	r5, r0, #4
 800993c:	42a3      	cmp	r3, r4
 800993e:	d30c      	bcc.n	800995a <__copybits+0x36>
 8009940:	1aa3      	subs	r3, r4, r2
 8009942:	3b11      	subs	r3, #17
 8009944:	f023 0303 	bic.w	r3, r3, #3
 8009948:	3211      	adds	r2, #17
 800994a:	42a2      	cmp	r2, r4
 800994c:	bf88      	it	hi
 800994e:	2300      	movhi	r3, #0
 8009950:	4418      	add	r0, r3
 8009952:	2300      	movs	r3, #0
 8009954:	4288      	cmp	r0, r1
 8009956:	d305      	bcc.n	8009964 <__copybits+0x40>
 8009958:	bd70      	pop	{r4, r5, r6, pc}
 800995a:	f853 6b04 	ldr.w	r6, [r3], #4
 800995e:	f845 6f04 	str.w	r6, [r5, #4]!
 8009962:	e7eb      	b.n	800993c <__copybits+0x18>
 8009964:	f840 3b04 	str.w	r3, [r0], #4
 8009968:	e7f4      	b.n	8009954 <__copybits+0x30>

0800996a <__any_on>:
 800996a:	f100 0214 	add.w	r2, r0, #20
 800996e:	6900      	ldr	r0, [r0, #16]
 8009970:	114b      	asrs	r3, r1, #5
 8009972:	4298      	cmp	r0, r3
 8009974:	b510      	push	{r4, lr}
 8009976:	db11      	blt.n	800999c <__any_on+0x32>
 8009978:	dd0a      	ble.n	8009990 <__any_on+0x26>
 800997a:	f011 011f 	ands.w	r1, r1, #31
 800997e:	d007      	beq.n	8009990 <__any_on+0x26>
 8009980:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8009984:	fa24 f001 	lsr.w	r0, r4, r1
 8009988:	fa00 f101 	lsl.w	r1, r0, r1
 800998c:	428c      	cmp	r4, r1
 800998e:	d10b      	bne.n	80099a8 <__any_on+0x3e>
 8009990:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8009994:	4293      	cmp	r3, r2
 8009996:	d803      	bhi.n	80099a0 <__any_on+0x36>
 8009998:	2000      	movs	r0, #0
 800999a:	bd10      	pop	{r4, pc}
 800999c:	4603      	mov	r3, r0
 800999e:	e7f7      	b.n	8009990 <__any_on+0x26>
 80099a0:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 80099a4:	2900      	cmp	r1, #0
 80099a6:	d0f5      	beq.n	8009994 <__any_on+0x2a>
 80099a8:	2001      	movs	r0, #1
 80099aa:	e7f6      	b.n	800999a <__any_on+0x30>

080099ac <sulp>:
 80099ac:	b570      	push	{r4, r5, r6, lr}
 80099ae:	4604      	mov	r4, r0
 80099b0:	460d      	mov	r5, r1
 80099b2:	ec45 4b10 	vmov	d0, r4, r5
 80099b6:	4616      	mov	r6, r2
 80099b8:	f7ff feba 	bl	8009730 <__ulp>
 80099bc:	ec51 0b10 	vmov	r0, r1, d0
 80099c0:	b17e      	cbz	r6, 80099e2 <sulp+0x36>
 80099c2:	f3c5 530a 	ubfx	r3, r5, #20, #11
 80099c6:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 80099ca:	2b00      	cmp	r3, #0
 80099cc:	dd09      	ble.n	80099e2 <sulp+0x36>
 80099ce:	051b      	lsls	r3, r3, #20
 80099d0:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 80099d4:	2400      	movs	r4, #0
 80099d6:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 80099da:	4622      	mov	r2, r4
 80099dc:	462b      	mov	r3, r5
 80099de:	f7f6 fe13 	bl	8000608 <__aeabi_dmul>
 80099e2:	ec41 0b10 	vmov	d0, r0, r1
 80099e6:	bd70      	pop	{r4, r5, r6, pc}

080099e8 <_strtod_l>:
 80099e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80099ec:	b09f      	sub	sp, #124	@ 0x7c
 80099ee:	460c      	mov	r4, r1
 80099f0:	9217      	str	r2, [sp, #92]	@ 0x5c
 80099f2:	2200      	movs	r2, #0
 80099f4:	921a      	str	r2, [sp, #104]	@ 0x68
 80099f6:	9005      	str	r0, [sp, #20]
 80099f8:	f04f 0a00 	mov.w	sl, #0
 80099fc:	f04f 0b00 	mov.w	fp, #0
 8009a00:	460a      	mov	r2, r1
 8009a02:	9219      	str	r2, [sp, #100]	@ 0x64
 8009a04:	7811      	ldrb	r1, [r2, #0]
 8009a06:	292b      	cmp	r1, #43	@ 0x2b
 8009a08:	d04a      	beq.n	8009aa0 <_strtod_l+0xb8>
 8009a0a:	d838      	bhi.n	8009a7e <_strtod_l+0x96>
 8009a0c:	290d      	cmp	r1, #13
 8009a0e:	d832      	bhi.n	8009a76 <_strtod_l+0x8e>
 8009a10:	2908      	cmp	r1, #8
 8009a12:	d832      	bhi.n	8009a7a <_strtod_l+0x92>
 8009a14:	2900      	cmp	r1, #0
 8009a16:	d03b      	beq.n	8009a90 <_strtod_l+0xa8>
 8009a18:	2200      	movs	r2, #0
 8009a1a:	920e      	str	r2, [sp, #56]	@ 0x38
 8009a1c:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009a1e:	782a      	ldrb	r2, [r5, #0]
 8009a20:	2a30      	cmp	r2, #48	@ 0x30
 8009a22:	f040 80b2 	bne.w	8009b8a <_strtod_l+0x1a2>
 8009a26:	786a      	ldrb	r2, [r5, #1]
 8009a28:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009a2c:	2a58      	cmp	r2, #88	@ 0x58
 8009a2e:	d16e      	bne.n	8009b0e <_strtod_l+0x126>
 8009a30:	9302      	str	r3, [sp, #8]
 8009a32:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a34:	9301      	str	r3, [sp, #4]
 8009a36:	ab1a      	add	r3, sp, #104	@ 0x68
 8009a38:	9300      	str	r3, [sp, #0]
 8009a3a:	4a8f      	ldr	r2, [pc, #572]	@ (8009c78 <_strtod_l+0x290>)
 8009a3c:	9805      	ldr	r0, [sp, #20]
 8009a3e:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009a40:	a919      	add	r1, sp, #100	@ 0x64
 8009a42:	f001 f983 	bl	800ad4c <__gethex>
 8009a46:	f010 060f 	ands.w	r6, r0, #15
 8009a4a:	4604      	mov	r4, r0
 8009a4c:	d005      	beq.n	8009a5a <_strtod_l+0x72>
 8009a4e:	2e06      	cmp	r6, #6
 8009a50:	d128      	bne.n	8009aa4 <_strtod_l+0xbc>
 8009a52:	3501      	adds	r5, #1
 8009a54:	2300      	movs	r3, #0
 8009a56:	9519      	str	r5, [sp, #100]	@ 0x64
 8009a58:	930e      	str	r3, [sp, #56]	@ 0x38
 8009a5a:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a5c:	2b00      	cmp	r3, #0
 8009a5e:	f040 858e 	bne.w	800a57e <_strtod_l+0xb96>
 8009a62:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 8009a64:	b1cb      	cbz	r3, 8009a9a <_strtod_l+0xb2>
 8009a66:	4652      	mov	r2, sl
 8009a68:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009a6c:	ec43 2b10 	vmov	d0, r2, r3
 8009a70:	b01f      	add	sp, #124	@ 0x7c
 8009a72:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009a76:	2920      	cmp	r1, #32
 8009a78:	d1ce      	bne.n	8009a18 <_strtod_l+0x30>
 8009a7a:	3201      	adds	r2, #1
 8009a7c:	e7c1      	b.n	8009a02 <_strtod_l+0x1a>
 8009a7e:	292d      	cmp	r1, #45	@ 0x2d
 8009a80:	d1ca      	bne.n	8009a18 <_strtod_l+0x30>
 8009a82:	2101      	movs	r1, #1
 8009a84:	910e      	str	r1, [sp, #56]	@ 0x38
 8009a86:	1c51      	adds	r1, r2, #1
 8009a88:	9119      	str	r1, [sp, #100]	@ 0x64
 8009a8a:	7852      	ldrb	r2, [r2, #1]
 8009a8c:	2a00      	cmp	r2, #0
 8009a8e:	d1c5      	bne.n	8009a1c <_strtod_l+0x34>
 8009a90:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009a92:	9419      	str	r4, [sp, #100]	@ 0x64
 8009a94:	2b00      	cmp	r3, #0
 8009a96:	f040 8570 	bne.w	800a57a <_strtod_l+0xb92>
 8009a9a:	4652      	mov	r2, sl
 8009a9c:	465b      	mov	r3, fp
 8009a9e:	e7e5      	b.n	8009a6c <_strtod_l+0x84>
 8009aa0:	2100      	movs	r1, #0
 8009aa2:	e7ef      	b.n	8009a84 <_strtod_l+0x9c>
 8009aa4:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 8009aa6:	b13a      	cbz	r2, 8009ab8 <_strtod_l+0xd0>
 8009aa8:	2135      	movs	r1, #53	@ 0x35
 8009aaa:	a81c      	add	r0, sp, #112	@ 0x70
 8009aac:	f7ff ff3a 	bl	8009924 <__copybits>
 8009ab0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009ab2:	9805      	ldr	r0, [sp, #20]
 8009ab4:	f7ff fb10 	bl	80090d8 <_Bfree>
 8009ab8:	3e01      	subs	r6, #1
 8009aba:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 8009abc:	2e04      	cmp	r6, #4
 8009abe:	d806      	bhi.n	8009ace <_strtod_l+0xe6>
 8009ac0:	e8df f006 	tbb	[pc, r6]
 8009ac4:	201d0314 	.word	0x201d0314
 8009ac8:	14          	.byte	0x14
 8009ac9:	00          	.byte	0x00
 8009aca:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 8009ace:	05e1      	lsls	r1, r4, #23
 8009ad0:	bf48      	it	mi
 8009ad2:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 8009ad6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009ada:	0d1b      	lsrs	r3, r3, #20
 8009adc:	051b      	lsls	r3, r3, #20
 8009ade:	2b00      	cmp	r3, #0
 8009ae0:	d1bb      	bne.n	8009a5a <_strtod_l+0x72>
 8009ae2:	f7fe fb1f 	bl	8008124 <__errno>
 8009ae6:	2322      	movs	r3, #34	@ 0x22
 8009ae8:	6003      	str	r3, [r0, #0]
 8009aea:	e7b6      	b.n	8009a5a <_strtod_l+0x72>
 8009aec:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 8009af0:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 8009af4:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 8009af8:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 8009afc:	e7e7      	b.n	8009ace <_strtod_l+0xe6>
 8009afe:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009c80 <_strtod_l+0x298>
 8009b02:	e7e4      	b.n	8009ace <_strtod_l+0xe6>
 8009b04:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 8009b08:	f04f 3aff 	mov.w	sl, #4294967295
 8009b0c:	e7df      	b.n	8009ace <_strtod_l+0xe6>
 8009b0e:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b10:	1c5a      	adds	r2, r3, #1
 8009b12:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b14:	785b      	ldrb	r3, [r3, #1]
 8009b16:	2b30      	cmp	r3, #48	@ 0x30
 8009b18:	d0f9      	beq.n	8009b0e <_strtod_l+0x126>
 8009b1a:	2b00      	cmp	r3, #0
 8009b1c:	d09d      	beq.n	8009a5a <_strtod_l+0x72>
 8009b1e:	2301      	movs	r3, #1
 8009b20:	2700      	movs	r7, #0
 8009b22:	9308      	str	r3, [sp, #32]
 8009b24:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b26:	930c      	str	r3, [sp, #48]	@ 0x30
 8009b28:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009b2a:	46b9      	mov	r9, r7
 8009b2c:	220a      	movs	r2, #10
 8009b2e:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009b30:	7805      	ldrb	r5, [r0, #0]
 8009b32:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 8009b36:	b2d9      	uxtb	r1, r3
 8009b38:	2909      	cmp	r1, #9
 8009b3a:	d928      	bls.n	8009b8e <_strtod_l+0x1a6>
 8009b3c:	494f      	ldr	r1, [pc, #316]	@ (8009c7c <_strtod_l+0x294>)
 8009b3e:	2201      	movs	r2, #1
 8009b40:	f001 f81e 	bl	800ab80 <strncmp>
 8009b44:	2800      	cmp	r0, #0
 8009b46:	d032      	beq.n	8009bae <_strtod_l+0x1c6>
 8009b48:	2000      	movs	r0, #0
 8009b4a:	462a      	mov	r2, r5
 8009b4c:	900a      	str	r0, [sp, #40]	@ 0x28
 8009b4e:	464d      	mov	r5, r9
 8009b50:	4603      	mov	r3, r0
 8009b52:	2a65      	cmp	r2, #101	@ 0x65
 8009b54:	d001      	beq.n	8009b5a <_strtod_l+0x172>
 8009b56:	2a45      	cmp	r2, #69	@ 0x45
 8009b58:	d114      	bne.n	8009b84 <_strtod_l+0x19c>
 8009b5a:	b91d      	cbnz	r5, 8009b64 <_strtod_l+0x17c>
 8009b5c:	9a08      	ldr	r2, [sp, #32]
 8009b5e:	4302      	orrs	r2, r0
 8009b60:	d096      	beq.n	8009a90 <_strtod_l+0xa8>
 8009b62:	2500      	movs	r5, #0
 8009b64:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 8009b66:	1c62      	adds	r2, r4, #1
 8009b68:	9219      	str	r2, [sp, #100]	@ 0x64
 8009b6a:	7862      	ldrb	r2, [r4, #1]
 8009b6c:	2a2b      	cmp	r2, #43	@ 0x2b
 8009b6e:	d07a      	beq.n	8009c66 <_strtod_l+0x27e>
 8009b70:	2a2d      	cmp	r2, #45	@ 0x2d
 8009b72:	d07e      	beq.n	8009c72 <_strtod_l+0x28a>
 8009b74:	f04f 0c00 	mov.w	ip, #0
 8009b78:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009b7c:	2909      	cmp	r1, #9
 8009b7e:	f240 8085 	bls.w	8009c8c <_strtod_l+0x2a4>
 8009b82:	9419      	str	r4, [sp, #100]	@ 0x64
 8009b84:	f04f 0800 	mov.w	r8, #0
 8009b88:	e0a5      	b.n	8009cd6 <_strtod_l+0x2ee>
 8009b8a:	2300      	movs	r3, #0
 8009b8c:	e7c8      	b.n	8009b20 <_strtod_l+0x138>
 8009b8e:	f1b9 0f08 	cmp.w	r9, #8
 8009b92:	bfd8      	it	le
 8009b94:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 8009b96:	f100 0001 	add.w	r0, r0, #1
 8009b9a:	bfda      	itte	le
 8009b9c:	fb02 3301 	mlale	r3, r2, r1, r3
 8009ba0:	930b      	strle	r3, [sp, #44]	@ 0x2c
 8009ba2:	fb02 3707 	mlagt	r7, r2, r7, r3
 8009ba6:	f109 0901 	add.w	r9, r9, #1
 8009baa:	9019      	str	r0, [sp, #100]	@ 0x64
 8009bac:	e7bf      	b.n	8009b2e <_strtod_l+0x146>
 8009bae:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bb0:	1c5a      	adds	r2, r3, #1
 8009bb2:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bb4:	785a      	ldrb	r2, [r3, #1]
 8009bb6:	f1b9 0f00 	cmp.w	r9, #0
 8009bba:	d03b      	beq.n	8009c34 <_strtod_l+0x24c>
 8009bbc:	900a      	str	r0, [sp, #40]	@ 0x28
 8009bbe:	464d      	mov	r5, r9
 8009bc0:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 8009bc4:	2b09      	cmp	r3, #9
 8009bc6:	d912      	bls.n	8009bee <_strtod_l+0x206>
 8009bc8:	2301      	movs	r3, #1
 8009bca:	e7c2      	b.n	8009b52 <_strtod_l+0x16a>
 8009bcc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009bce:	1c5a      	adds	r2, r3, #1
 8009bd0:	9219      	str	r2, [sp, #100]	@ 0x64
 8009bd2:	785a      	ldrb	r2, [r3, #1]
 8009bd4:	3001      	adds	r0, #1
 8009bd6:	2a30      	cmp	r2, #48	@ 0x30
 8009bd8:	d0f8      	beq.n	8009bcc <_strtod_l+0x1e4>
 8009bda:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 8009bde:	2b08      	cmp	r3, #8
 8009be0:	f200 84d2 	bhi.w	800a588 <_strtod_l+0xba0>
 8009be4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009be6:	900a      	str	r0, [sp, #40]	@ 0x28
 8009be8:	2000      	movs	r0, #0
 8009bea:	930c      	str	r3, [sp, #48]	@ 0x30
 8009bec:	4605      	mov	r5, r0
 8009bee:	3a30      	subs	r2, #48	@ 0x30
 8009bf0:	f100 0301 	add.w	r3, r0, #1
 8009bf4:	d018      	beq.n	8009c28 <_strtod_l+0x240>
 8009bf6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8009bf8:	4419      	add	r1, r3
 8009bfa:	910a      	str	r1, [sp, #40]	@ 0x28
 8009bfc:	462e      	mov	r6, r5
 8009bfe:	f04f 0e0a 	mov.w	lr, #10
 8009c02:	1c71      	adds	r1, r6, #1
 8009c04:	eba1 0c05 	sub.w	ip, r1, r5
 8009c08:	4563      	cmp	r3, ip
 8009c0a:	dc15      	bgt.n	8009c38 <_strtod_l+0x250>
 8009c0c:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 8009c10:	182b      	adds	r3, r5, r0
 8009c12:	2b08      	cmp	r3, #8
 8009c14:	f105 0501 	add.w	r5, r5, #1
 8009c18:	4405      	add	r5, r0
 8009c1a:	dc1a      	bgt.n	8009c52 <_strtod_l+0x26a>
 8009c1c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009c1e:	230a      	movs	r3, #10
 8009c20:	fb03 2301 	mla	r3, r3, r1, r2
 8009c24:	930b      	str	r3, [sp, #44]	@ 0x2c
 8009c26:	2300      	movs	r3, #0
 8009c28:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c2a:	1c51      	adds	r1, r2, #1
 8009c2c:	9119      	str	r1, [sp, #100]	@ 0x64
 8009c2e:	7852      	ldrb	r2, [r2, #1]
 8009c30:	4618      	mov	r0, r3
 8009c32:	e7c5      	b.n	8009bc0 <_strtod_l+0x1d8>
 8009c34:	4648      	mov	r0, r9
 8009c36:	e7ce      	b.n	8009bd6 <_strtod_l+0x1ee>
 8009c38:	2e08      	cmp	r6, #8
 8009c3a:	dc05      	bgt.n	8009c48 <_strtod_l+0x260>
 8009c3c:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009c3e:	fb0e f606 	mul.w	r6, lr, r6
 8009c42:	960b      	str	r6, [sp, #44]	@ 0x2c
 8009c44:	460e      	mov	r6, r1
 8009c46:	e7dc      	b.n	8009c02 <_strtod_l+0x21a>
 8009c48:	2910      	cmp	r1, #16
 8009c4a:	bfd8      	it	le
 8009c4c:	fb0e f707 	mulle.w	r7, lr, r7
 8009c50:	e7f8      	b.n	8009c44 <_strtod_l+0x25c>
 8009c52:	2b0f      	cmp	r3, #15
 8009c54:	bfdc      	itt	le
 8009c56:	230a      	movle	r3, #10
 8009c58:	fb03 2707 	mlale	r7, r3, r7, r2
 8009c5c:	e7e3      	b.n	8009c26 <_strtod_l+0x23e>
 8009c5e:	2300      	movs	r3, #0
 8009c60:	930a      	str	r3, [sp, #40]	@ 0x28
 8009c62:	2301      	movs	r3, #1
 8009c64:	e77a      	b.n	8009b5c <_strtod_l+0x174>
 8009c66:	f04f 0c00 	mov.w	ip, #0
 8009c6a:	1ca2      	adds	r2, r4, #2
 8009c6c:	9219      	str	r2, [sp, #100]	@ 0x64
 8009c6e:	78a2      	ldrb	r2, [r4, #2]
 8009c70:	e782      	b.n	8009b78 <_strtod_l+0x190>
 8009c72:	f04f 0c01 	mov.w	ip, #1
 8009c76:	e7f8      	b.n	8009c6a <_strtod_l+0x282>
 8009c78:	0800bd1c 	.word	0x0800bd1c
 8009c7c:	0800bb4f 	.word	0x0800bb4f
 8009c80:	7ff00000 	.word	0x7ff00000
 8009c84:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009c86:	1c51      	adds	r1, r2, #1
 8009c88:	9119      	str	r1, [sp, #100]	@ 0x64
 8009c8a:	7852      	ldrb	r2, [r2, #1]
 8009c8c:	2a30      	cmp	r2, #48	@ 0x30
 8009c8e:	d0f9      	beq.n	8009c84 <_strtod_l+0x29c>
 8009c90:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 8009c94:	2908      	cmp	r1, #8
 8009c96:	f63f af75 	bhi.w	8009b84 <_strtod_l+0x19c>
 8009c9a:	3a30      	subs	r2, #48	@ 0x30
 8009c9c:	9209      	str	r2, [sp, #36]	@ 0x24
 8009c9e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009ca0:	920f      	str	r2, [sp, #60]	@ 0x3c
 8009ca2:	f04f 080a 	mov.w	r8, #10
 8009ca6:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009ca8:	1c56      	adds	r6, r2, #1
 8009caa:	9619      	str	r6, [sp, #100]	@ 0x64
 8009cac:	7852      	ldrb	r2, [r2, #1]
 8009cae:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 8009cb2:	f1be 0f09 	cmp.w	lr, #9
 8009cb6:	d939      	bls.n	8009d2c <_strtod_l+0x344>
 8009cb8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 8009cba:	1a76      	subs	r6, r6, r1
 8009cbc:	2e08      	cmp	r6, #8
 8009cbe:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 8009cc2:	dc03      	bgt.n	8009ccc <_strtod_l+0x2e4>
 8009cc4:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009cc6:	4588      	cmp	r8, r1
 8009cc8:	bfa8      	it	ge
 8009cca:	4688      	movge	r8, r1
 8009ccc:	f1bc 0f00 	cmp.w	ip, #0
 8009cd0:	d001      	beq.n	8009cd6 <_strtod_l+0x2ee>
 8009cd2:	f1c8 0800 	rsb	r8, r8, #0
 8009cd6:	2d00      	cmp	r5, #0
 8009cd8:	d14e      	bne.n	8009d78 <_strtod_l+0x390>
 8009cda:	9908      	ldr	r1, [sp, #32]
 8009cdc:	4308      	orrs	r0, r1
 8009cde:	f47f aebc 	bne.w	8009a5a <_strtod_l+0x72>
 8009ce2:	2b00      	cmp	r3, #0
 8009ce4:	f47f aed4 	bne.w	8009a90 <_strtod_l+0xa8>
 8009ce8:	2a69      	cmp	r2, #105	@ 0x69
 8009cea:	d028      	beq.n	8009d3e <_strtod_l+0x356>
 8009cec:	dc25      	bgt.n	8009d3a <_strtod_l+0x352>
 8009cee:	2a49      	cmp	r2, #73	@ 0x49
 8009cf0:	d025      	beq.n	8009d3e <_strtod_l+0x356>
 8009cf2:	2a4e      	cmp	r2, #78	@ 0x4e
 8009cf4:	f47f aecc 	bne.w	8009a90 <_strtod_l+0xa8>
 8009cf8:	499a      	ldr	r1, [pc, #616]	@ (8009f64 <_strtod_l+0x57c>)
 8009cfa:	a819      	add	r0, sp, #100	@ 0x64
 8009cfc:	f001 fa48 	bl	800b190 <__match>
 8009d00:	2800      	cmp	r0, #0
 8009d02:	f43f aec5 	beq.w	8009a90 <_strtod_l+0xa8>
 8009d06:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d08:	781b      	ldrb	r3, [r3, #0]
 8009d0a:	2b28      	cmp	r3, #40	@ 0x28
 8009d0c:	d12e      	bne.n	8009d6c <_strtod_l+0x384>
 8009d0e:	4996      	ldr	r1, [pc, #600]	@ (8009f68 <_strtod_l+0x580>)
 8009d10:	aa1c      	add	r2, sp, #112	@ 0x70
 8009d12:	a819      	add	r0, sp, #100	@ 0x64
 8009d14:	f001 fa50 	bl	800b1b8 <__hexnan>
 8009d18:	2805      	cmp	r0, #5
 8009d1a:	d127      	bne.n	8009d6c <_strtod_l+0x384>
 8009d1c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009d1e:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 8009d22:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 8009d26:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009d2a:	e696      	b.n	8009a5a <_strtod_l+0x72>
 8009d2c:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009d2e:	fb08 2101 	mla	r1, r8, r1, r2
 8009d32:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 8009d36:	9209      	str	r2, [sp, #36]	@ 0x24
 8009d38:	e7b5      	b.n	8009ca6 <_strtod_l+0x2be>
 8009d3a:	2a6e      	cmp	r2, #110	@ 0x6e
 8009d3c:	e7da      	b.n	8009cf4 <_strtod_l+0x30c>
 8009d3e:	498b      	ldr	r1, [pc, #556]	@ (8009f6c <_strtod_l+0x584>)
 8009d40:	a819      	add	r0, sp, #100	@ 0x64
 8009d42:	f001 fa25 	bl	800b190 <__match>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	f43f aea2 	beq.w	8009a90 <_strtod_l+0xa8>
 8009d4c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d4e:	4988      	ldr	r1, [pc, #544]	@ (8009f70 <_strtod_l+0x588>)
 8009d50:	3b01      	subs	r3, #1
 8009d52:	a819      	add	r0, sp, #100	@ 0x64
 8009d54:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d56:	f001 fa1b 	bl	800b190 <__match>
 8009d5a:	b910      	cbnz	r0, 8009d62 <_strtod_l+0x37a>
 8009d5c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009d5e:	3301      	adds	r3, #1
 8009d60:	9319      	str	r3, [sp, #100]	@ 0x64
 8009d62:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009f80 <_strtod_l+0x598>
 8009d66:	f04f 0a00 	mov.w	sl, #0
 8009d6a:	e676      	b.n	8009a5a <_strtod_l+0x72>
 8009d6c:	4881      	ldr	r0, [pc, #516]	@ (8009f74 <_strtod_l+0x58c>)
 8009d6e:	f000 ff4b 	bl	800ac08 <nan>
 8009d72:	ec5b ab10 	vmov	sl, fp, d0
 8009d76:	e670      	b.n	8009a5a <_strtod_l+0x72>
 8009d78:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009d7a:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009d7c:	eba8 0303 	sub.w	r3, r8, r3
 8009d80:	f1b9 0f00 	cmp.w	r9, #0
 8009d84:	bf08      	it	eq
 8009d86:	46a9      	moveq	r9, r5
 8009d88:	2d10      	cmp	r5, #16
 8009d8a:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d8c:	462c      	mov	r4, r5
 8009d8e:	bfa8      	it	ge
 8009d90:	2410      	movge	r4, #16
 8009d92:	f7f6 fbbf 	bl	8000514 <__aeabi_ui2d>
 8009d96:	2d09      	cmp	r5, #9
 8009d98:	4682      	mov	sl, r0
 8009d9a:	468b      	mov	fp, r1
 8009d9c:	dc13      	bgt.n	8009dc6 <_strtod_l+0x3de>
 8009d9e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da0:	2b00      	cmp	r3, #0
 8009da2:	f43f ae5a 	beq.w	8009a5a <_strtod_l+0x72>
 8009da6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009da8:	dd78      	ble.n	8009e9c <_strtod_l+0x4b4>
 8009daa:	2b16      	cmp	r3, #22
 8009dac:	dc5f      	bgt.n	8009e6e <_strtod_l+0x486>
 8009dae:	4972      	ldr	r1, [pc, #456]	@ (8009f78 <_strtod_l+0x590>)
 8009db0:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009db4:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009db8:	4652      	mov	r2, sl
 8009dba:	465b      	mov	r3, fp
 8009dbc:	f7f6 fc24 	bl	8000608 <__aeabi_dmul>
 8009dc0:	4682      	mov	sl, r0
 8009dc2:	468b      	mov	fp, r1
 8009dc4:	e649      	b.n	8009a5a <_strtod_l+0x72>
 8009dc6:	4b6c      	ldr	r3, [pc, #432]	@ (8009f78 <_strtod_l+0x590>)
 8009dc8:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8009dcc:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 8009dd0:	f7f6 fc1a 	bl	8000608 <__aeabi_dmul>
 8009dd4:	4682      	mov	sl, r0
 8009dd6:	4638      	mov	r0, r7
 8009dd8:	468b      	mov	fp, r1
 8009dda:	f7f6 fb9b 	bl	8000514 <__aeabi_ui2d>
 8009dde:	4602      	mov	r2, r0
 8009de0:	460b      	mov	r3, r1
 8009de2:	4650      	mov	r0, sl
 8009de4:	4659      	mov	r1, fp
 8009de6:	f7f6 fa59 	bl	800029c <__adddf3>
 8009dea:	2d0f      	cmp	r5, #15
 8009dec:	4682      	mov	sl, r0
 8009dee:	468b      	mov	fp, r1
 8009df0:	ddd5      	ble.n	8009d9e <_strtod_l+0x3b6>
 8009df2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009df4:	1b2c      	subs	r4, r5, r4
 8009df6:	441c      	add	r4, r3
 8009df8:	2c00      	cmp	r4, #0
 8009dfa:	f340 8093 	ble.w	8009f24 <_strtod_l+0x53c>
 8009dfe:	f014 030f 	ands.w	r3, r4, #15
 8009e02:	d00a      	beq.n	8009e1a <_strtod_l+0x432>
 8009e04:	495c      	ldr	r1, [pc, #368]	@ (8009f78 <_strtod_l+0x590>)
 8009e06:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 8009e0a:	4652      	mov	r2, sl
 8009e0c:	465b      	mov	r3, fp
 8009e0e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e12:	f7f6 fbf9 	bl	8000608 <__aeabi_dmul>
 8009e16:	4682      	mov	sl, r0
 8009e18:	468b      	mov	fp, r1
 8009e1a:	f034 040f 	bics.w	r4, r4, #15
 8009e1e:	d073      	beq.n	8009f08 <_strtod_l+0x520>
 8009e20:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 8009e24:	dd49      	ble.n	8009eba <_strtod_l+0x4d2>
 8009e26:	2400      	movs	r4, #0
 8009e28:	46a0      	mov	r8, r4
 8009e2a:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009e2c:	46a1      	mov	r9, r4
 8009e2e:	9a05      	ldr	r2, [sp, #20]
 8009e30:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009f80 <_strtod_l+0x598>
 8009e34:	2322      	movs	r3, #34	@ 0x22
 8009e36:	6013      	str	r3, [r2, #0]
 8009e38:	f04f 0a00 	mov.w	sl, #0
 8009e3c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009e3e:	2b00      	cmp	r3, #0
 8009e40:	f43f ae0b 	beq.w	8009a5a <_strtod_l+0x72>
 8009e44:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009e46:	9805      	ldr	r0, [sp, #20]
 8009e48:	f7ff f946 	bl	80090d8 <_Bfree>
 8009e4c:	9805      	ldr	r0, [sp, #20]
 8009e4e:	4649      	mov	r1, r9
 8009e50:	f7ff f942 	bl	80090d8 <_Bfree>
 8009e54:	9805      	ldr	r0, [sp, #20]
 8009e56:	4641      	mov	r1, r8
 8009e58:	f7ff f93e 	bl	80090d8 <_Bfree>
 8009e5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009e5e:	9805      	ldr	r0, [sp, #20]
 8009e60:	f7ff f93a 	bl	80090d8 <_Bfree>
 8009e64:	9805      	ldr	r0, [sp, #20]
 8009e66:	4621      	mov	r1, r4
 8009e68:	f7ff f936 	bl	80090d8 <_Bfree>
 8009e6c:	e5f5      	b.n	8009a5a <_strtod_l+0x72>
 8009e6e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009e70:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 8009e74:	4293      	cmp	r3, r2
 8009e76:	dbbc      	blt.n	8009df2 <_strtod_l+0x40a>
 8009e78:	4c3f      	ldr	r4, [pc, #252]	@ (8009f78 <_strtod_l+0x590>)
 8009e7a:	f1c5 050f 	rsb	r5, r5, #15
 8009e7e:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 8009e82:	4652      	mov	r2, sl
 8009e84:	465b      	mov	r3, fp
 8009e86:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009e8a:	f7f6 fbbd 	bl	8000608 <__aeabi_dmul>
 8009e8e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009e90:	1b5d      	subs	r5, r3, r5
 8009e92:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 8009e96:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009e9a:	e78f      	b.n	8009dbc <_strtod_l+0x3d4>
 8009e9c:	3316      	adds	r3, #22
 8009e9e:	dba8      	blt.n	8009df2 <_strtod_l+0x40a>
 8009ea0:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009ea2:	eba3 0808 	sub.w	r8, r3, r8
 8009ea6:	4b34      	ldr	r3, [pc, #208]	@ (8009f78 <_strtod_l+0x590>)
 8009ea8:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009eac:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009eb0:	4650      	mov	r0, sl
 8009eb2:	4659      	mov	r1, fp
 8009eb4:	f7f6 fcd2 	bl	800085c <__aeabi_ddiv>
 8009eb8:	e782      	b.n	8009dc0 <_strtod_l+0x3d8>
 8009eba:	2300      	movs	r3, #0
 8009ebc:	4f2f      	ldr	r7, [pc, #188]	@ (8009f7c <_strtod_l+0x594>)
 8009ebe:	1124      	asrs	r4, r4, #4
 8009ec0:	4650      	mov	r0, sl
 8009ec2:	4659      	mov	r1, fp
 8009ec4:	461e      	mov	r6, r3
 8009ec6:	2c01      	cmp	r4, #1
 8009ec8:	dc21      	bgt.n	8009f0e <_strtod_l+0x526>
 8009eca:	b10b      	cbz	r3, 8009ed0 <_strtod_l+0x4e8>
 8009ecc:	4682      	mov	sl, r0
 8009ece:	468b      	mov	fp, r1
 8009ed0:	492a      	ldr	r1, [pc, #168]	@ (8009f7c <_strtod_l+0x594>)
 8009ed2:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 8009ed6:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 8009eda:	4652      	mov	r2, sl
 8009edc:	465b      	mov	r3, fp
 8009ede:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009ee2:	f7f6 fb91 	bl	8000608 <__aeabi_dmul>
 8009ee6:	4b26      	ldr	r3, [pc, #152]	@ (8009f80 <_strtod_l+0x598>)
 8009ee8:	460a      	mov	r2, r1
 8009eea:	400b      	ands	r3, r1
 8009eec:	4925      	ldr	r1, [pc, #148]	@ (8009f84 <_strtod_l+0x59c>)
 8009eee:	428b      	cmp	r3, r1
 8009ef0:	4682      	mov	sl, r0
 8009ef2:	d898      	bhi.n	8009e26 <_strtod_l+0x43e>
 8009ef4:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 8009ef8:	428b      	cmp	r3, r1
 8009efa:	bf86      	itte	hi
 8009efc:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009f88 <_strtod_l+0x5a0>
 8009f00:	f04f 3aff 	movhi.w	sl, #4294967295
 8009f04:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 8009f08:	2300      	movs	r3, #0
 8009f0a:	9308      	str	r3, [sp, #32]
 8009f0c:	e076      	b.n	8009ffc <_strtod_l+0x614>
 8009f0e:	07e2      	lsls	r2, r4, #31
 8009f10:	d504      	bpl.n	8009f1c <_strtod_l+0x534>
 8009f12:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009f16:	f7f6 fb77 	bl	8000608 <__aeabi_dmul>
 8009f1a:	2301      	movs	r3, #1
 8009f1c:	3601      	adds	r6, #1
 8009f1e:	1064      	asrs	r4, r4, #1
 8009f20:	3708      	adds	r7, #8
 8009f22:	e7d0      	b.n	8009ec6 <_strtod_l+0x4de>
 8009f24:	d0f0      	beq.n	8009f08 <_strtod_l+0x520>
 8009f26:	4264      	negs	r4, r4
 8009f28:	f014 020f 	ands.w	r2, r4, #15
 8009f2c:	d00a      	beq.n	8009f44 <_strtod_l+0x55c>
 8009f2e:	4b12      	ldr	r3, [pc, #72]	@ (8009f78 <_strtod_l+0x590>)
 8009f30:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8009f34:	4650      	mov	r0, sl
 8009f36:	4659      	mov	r1, fp
 8009f38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f3c:	f7f6 fc8e 	bl	800085c <__aeabi_ddiv>
 8009f40:	4682      	mov	sl, r0
 8009f42:	468b      	mov	fp, r1
 8009f44:	1124      	asrs	r4, r4, #4
 8009f46:	d0df      	beq.n	8009f08 <_strtod_l+0x520>
 8009f48:	2c1f      	cmp	r4, #31
 8009f4a:	dd1f      	ble.n	8009f8c <_strtod_l+0x5a4>
 8009f4c:	2400      	movs	r4, #0
 8009f4e:	46a0      	mov	r8, r4
 8009f50:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009f52:	46a1      	mov	r9, r4
 8009f54:	9a05      	ldr	r2, [sp, #20]
 8009f56:	2322      	movs	r3, #34	@ 0x22
 8009f58:	f04f 0a00 	mov.w	sl, #0
 8009f5c:	f04f 0b00 	mov.w	fp, #0
 8009f60:	6013      	str	r3, [r2, #0]
 8009f62:	e76b      	b.n	8009e3c <_strtod_l+0x454>
 8009f64:	0800ba3d 	.word	0x0800ba3d
 8009f68:	0800bd08 	.word	0x0800bd08
 8009f6c:	0800ba35 	.word	0x0800ba35
 8009f70:	0800ba6c 	.word	0x0800ba6c
 8009f74:	0800bba5 	.word	0x0800bba5
 8009f78:	0800bc40 	.word	0x0800bc40
 8009f7c:	0800bc18 	.word	0x0800bc18
 8009f80:	7ff00000 	.word	0x7ff00000
 8009f84:	7ca00000 	.word	0x7ca00000
 8009f88:	7fefffff 	.word	0x7fefffff
 8009f8c:	f014 0310 	ands.w	r3, r4, #16
 8009f90:	bf18      	it	ne
 8009f92:	236a      	movne	r3, #106	@ 0x6a
 8009f94:	4ea9      	ldr	r6, [pc, #676]	@ (800a23c <_strtod_l+0x854>)
 8009f96:	9308      	str	r3, [sp, #32]
 8009f98:	4650      	mov	r0, sl
 8009f9a:	4659      	mov	r1, fp
 8009f9c:	2300      	movs	r3, #0
 8009f9e:	07e7      	lsls	r7, r4, #31
 8009fa0:	d504      	bpl.n	8009fac <_strtod_l+0x5c4>
 8009fa2:	e9d6 2300 	ldrd	r2, r3, [r6]
 8009fa6:	f7f6 fb2f 	bl	8000608 <__aeabi_dmul>
 8009faa:	2301      	movs	r3, #1
 8009fac:	1064      	asrs	r4, r4, #1
 8009fae:	f106 0608 	add.w	r6, r6, #8
 8009fb2:	d1f4      	bne.n	8009f9e <_strtod_l+0x5b6>
 8009fb4:	b10b      	cbz	r3, 8009fba <_strtod_l+0x5d2>
 8009fb6:	4682      	mov	sl, r0
 8009fb8:	468b      	mov	fp, r1
 8009fba:	9b08      	ldr	r3, [sp, #32]
 8009fbc:	b1b3      	cbz	r3, 8009fec <_strtod_l+0x604>
 8009fbe:	f3cb 520a 	ubfx	r2, fp, #20, #11
 8009fc2:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 8009fc6:	2b00      	cmp	r3, #0
 8009fc8:	4659      	mov	r1, fp
 8009fca:	dd0f      	ble.n	8009fec <_strtod_l+0x604>
 8009fcc:	2b1f      	cmp	r3, #31
 8009fce:	dd56      	ble.n	800a07e <_strtod_l+0x696>
 8009fd0:	2b34      	cmp	r3, #52	@ 0x34
 8009fd2:	bfde      	ittt	le
 8009fd4:	f04f 33ff 	movle.w	r3, #4294967295
 8009fd8:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 8009fdc:	4093      	lslle	r3, r2
 8009fde:	f04f 0a00 	mov.w	sl, #0
 8009fe2:	bfcc      	ite	gt
 8009fe4:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 8009fe8:	ea03 0b01 	andle.w	fp, r3, r1
 8009fec:	2200      	movs	r2, #0
 8009fee:	2300      	movs	r3, #0
 8009ff0:	4650      	mov	r0, sl
 8009ff2:	4659      	mov	r1, fp
 8009ff4:	f7f6 fd70 	bl	8000ad8 <__aeabi_dcmpeq>
 8009ff8:	2800      	cmp	r0, #0
 8009ffa:	d1a7      	bne.n	8009f4c <_strtod_l+0x564>
 8009ffc:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009ffe:	9300      	str	r3, [sp, #0]
 800a000:	990c      	ldr	r1, [sp, #48]	@ 0x30
 800a002:	9805      	ldr	r0, [sp, #20]
 800a004:	462b      	mov	r3, r5
 800a006:	464a      	mov	r2, r9
 800a008:	f7ff f8ce 	bl	80091a8 <__s2b>
 800a00c:	900b      	str	r0, [sp, #44]	@ 0x2c
 800a00e:	2800      	cmp	r0, #0
 800a010:	f43f af09 	beq.w	8009e26 <_strtod_l+0x43e>
 800a014:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a016:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a018:	2a00      	cmp	r2, #0
 800a01a:	eba3 0308 	sub.w	r3, r3, r8
 800a01e:	bfa8      	it	ge
 800a020:	2300      	movge	r3, #0
 800a022:	9312      	str	r3, [sp, #72]	@ 0x48
 800a024:	2400      	movs	r4, #0
 800a026:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 800a02a:	9316      	str	r3, [sp, #88]	@ 0x58
 800a02c:	46a0      	mov	r8, r4
 800a02e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a030:	9805      	ldr	r0, [sp, #20]
 800a032:	6859      	ldr	r1, [r3, #4]
 800a034:	f7ff f810 	bl	8009058 <_Balloc>
 800a038:	4681      	mov	r9, r0
 800a03a:	2800      	cmp	r0, #0
 800a03c:	f43f aef7 	beq.w	8009e2e <_strtod_l+0x446>
 800a040:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800a042:	691a      	ldr	r2, [r3, #16]
 800a044:	3202      	adds	r2, #2
 800a046:	f103 010c 	add.w	r1, r3, #12
 800a04a:	0092      	lsls	r2, r2, #2
 800a04c:	300c      	adds	r0, #12
 800a04e:	f7fe f896 	bl	800817e <memcpy>
 800a052:	ec4b ab10 	vmov	d0, sl, fp
 800a056:	9805      	ldr	r0, [sp, #20]
 800a058:	aa1c      	add	r2, sp, #112	@ 0x70
 800a05a:	a91b      	add	r1, sp, #108	@ 0x6c
 800a05c:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 800a060:	f7ff fbd6 	bl	8009810 <__d2b>
 800a064:	901a      	str	r0, [sp, #104]	@ 0x68
 800a066:	2800      	cmp	r0, #0
 800a068:	f43f aee1 	beq.w	8009e2e <_strtod_l+0x446>
 800a06c:	9805      	ldr	r0, [sp, #20]
 800a06e:	2101      	movs	r1, #1
 800a070:	f7ff f930 	bl	80092d4 <__i2b>
 800a074:	4680      	mov	r8, r0
 800a076:	b948      	cbnz	r0, 800a08c <_strtod_l+0x6a4>
 800a078:	f04f 0800 	mov.w	r8, #0
 800a07c:	e6d7      	b.n	8009e2e <_strtod_l+0x446>
 800a07e:	f04f 32ff 	mov.w	r2, #4294967295
 800a082:	fa02 f303 	lsl.w	r3, r2, r3
 800a086:	ea03 0a0a 	and.w	sl, r3, sl
 800a08a:	e7af      	b.n	8009fec <_strtod_l+0x604>
 800a08c:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 800a08e:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 800a090:	2d00      	cmp	r5, #0
 800a092:	bfab      	itete	ge
 800a094:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800a096:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 800a098:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 800a09a:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 800a09c:	bfac      	ite	ge
 800a09e:	18ef      	addge	r7, r5, r3
 800a0a0:	1b5e      	sublt	r6, r3, r5
 800a0a2:	9b08      	ldr	r3, [sp, #32]
 800a0a4:	1aed      	subs	r5, r5, r3
 800a0a6:	4415      	add	r5, r2
 800a0a8:	4b65      	ldr	r3, [pc, #404]	@ (800a240 <_strtod_l+0x858>)
 800a0aa:	3d01      	subs	r5, #1
 800a0ac:	429d      	cmp	r5, r3
 800a0ae:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800a0b2:	da50      	bge.n	800a156 <_strtod_l+0x76e>
 800a0b4:	1b5b      	subs	r3, r3, r5
 800a0b6:	2b1f      	cmp	r3, #31
 800a0b8:	eba2 0203 	sub.w	r2, r2, r3
 800a0bc:	f04f 0101 	mov.w	r1, #1
 800a0c0:	dc3d      	bgt.n	800a13e <_strtod_l+0x756>
 800a0c2:	fa01 f303 	lsl.w	r3, r1, r3
 800a0c6:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a0c8:	2300      	movs	r3, #0
 800a0ca:	9310      	str	r3, [sp, #64]	@ 0x40
 800a0cc:	18bd      	adds	r5, r7, r2
 800a0ce:	9b08      	ldr	r3, [sp, #32]
 800a0d0:	42af      	cmp	r7, r5
 800a0d2:	4416      	add	r6, r2
 800a0d4:	441e      	add	r6, r3
 800a0d6:	463b      	mov	r3, r7
 800a0d8:	bfa8      	it	ge
 800a0da:	462b      	movge	r3, r5
 800a0dc:	42b3      	cmp	r3, r6
 800a0de:	bfa8      	it	ge
 800a0e0:	4633      	movge	r3, r6
 800a0e2:	2b00      	cmp	r3, #0
 800a0e4:	bfc2      	ittt	gt
 800a0e6:	1aed      	subgt	r5, r5, r3
 800a0e8:	1af6      	subgt	r6, r6, r3
 800a0ea:	1aff      	subgt	r7, r7, r3
 800a0ec:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 800a0ee:	2b00      	cmp	r3, #0
 800a0f0:	dd16      	ble.n	800a120 <_strtod_l+0x738>
 800a0f2:	4641      	mov	r1, r8
 800a0f4:	9805      	ldr	r0, [sp, #20]
 800a0f6:	461a      	mov	r2, r3
 800a0f8:	f7ff f9a4 	bl	8009444 <__pow5mult>
 800a0fc:	4680      	mov	r8, r0
 800a0fe:	2800      	cmp	r0, #0
 800a100:	d0ba      	beq.n	800a078 <_strtod_l+0x690>
 800a102:	4601      	mov	r1, r0
 800a104:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800a106:	9805      	ldr	r0, [sp, #20]
 800a108:	f7ff f8fa 	bl	8009300 <__multiply>
 800a10c:	900a      	str	r0, [sp, #40]	@ 0x28
 800a10e:	2800      	cmp	r0, #0
 800a110:	f43f ae8d 	beq.w	8009e2e <_strtod_l+0x446>
 800a114:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a116:	9805      	ldr	r0, [sp, #20]
 800a118:	f7fe ffde 	bl	80090d8 <_Bfree>
 800a11c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a11e:	931a      	str	r3, [sp, #104]	@ 0x68
 800a120:	2d00      	cmp	r5, #0
 800a122:	dc1d      	bgt.n	800a160 <_strtod_l+0x778>
 800a124:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a126:	2b00      	cmp	r3, #0
 800a128:	dd23      	ble.n	800a172 <_strtod_l+0x78a>
 800a12a:	4649      	mov	r1, r9
 800a12c:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 800a12e:	9805      	ldr	r0, [sp, #20]
 800a130:	f7ff f988 	bl	8009444 <__pow5mult>
 800a134:	4681      	mov	r9, r0
 800a136:	b9e0      	cbnz	r0, 800a172 <_strtod_l+0x78a>
 800a138:	f04f 0900 	mov.w	r9, #0
 800a13c:	e677      	b.n	8009e2e <_strtod_l+0x446>
 800a13e:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800a142:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800a146:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 800a14a:	35e2      	adds	r5, #226	@ 0xe2
 800a14c:	fa01 f305 	lsl.w	r3, r1, r5
 800a150:	9310      	str	r3, [sp, #64]	@ 0x40
 800a152:	9113      	str	r1, [sp, #76]	@ 0x4c
 800a154:	e7ba      	b.n	800a0cc <_strtod_l+0x6e4>
 800a156:	2300      	movs	r3, #0
 800a158:	9310      	str	r3, [sp, #64]	@ 0x40
 800a15a:	2301      	movs	r3, #1
 800a15c:	9313      	str	r3, [sp, #76]	@ 0x4c
 800a15e:	e7b5      	b.n	800a0cc <_strtod_l+0x6e4>
 800a160:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a162:	9805      	ldr	r0, [sp, #20]
 800a164:	462a      	mov	r2, r5
 800a166:	f7ff f9c7 	bl	80094f8 <__lshift>
 800a16a:	901a      	str	r0, [sp, #104]	@ 0x68
 800a16c:	2800      	cmp	r0, #0
 800a16e:	d1d9      	bne.n	800a124 <_strtod_l+0x73c>
 800a170:	e65d      	b.n	8009e2e <_strtod_l+0x446>
 800a172:	2e00      	cmp	r6, #0
 800a174:	dd07      	ble.n	800a186 <_strtod_l+0x79e>
 800a176:	4649      	mov	r1, r9
 800a178:	9805      	ldr	r0, [sp, #20]
 800a17a:	4632      	mov	r2, r6
 800a17c:	f7ff f9bc 	bl	80094f8 <__lshift>
 800a180:	4681      	mov	r9, r0
 800a182:	2800      	cmp	r0, #0
 800a184:	d0d8      	beq.n	800a138 <_strtod_l+0x750>
 800a186:	2f00      	cmp	r7, #0
 800a188:	dd08      	ble.n	800a19c <_strtod_l+0x7b4>
 800a18a:	4641      	mov	r1, r8
 800a18c:	9805      	ldr	r0, [sp, #20]
 800a18e:	463a      	mov	r2, r7
 800a190:	f7ff f9b2 	bl	80094f8 <__lshift>
 800a194:	4680      	mov	r8, r0
 800a196:	2800      	cmp	r0, #0
 800a198:	f43f ae49 	beq.w	8009e2e <_strtod_l+0x446>
 800a19c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a19e:	9805      	ldr	r0, [sp, #20]
 800a1a0:	464a      	mov	r2, r9
 800a1a2:	f7ff fa31 	bl	8009608 <__mdiff>
 800a1a6:	4604      	mov	r4, r0
 800a1a8:	2800      	cmp	r0, #0
 800a1aa:	f43f ae40 	beq.w	8009e2e <_strtod_l+0x446>
 800a1ae:	68c3      	ldr	r3, [r0, #12]
 800a1b0:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a1b2:	2300      	movs	r3, #0
 800a1b4:	60c3      	str	r3, [r0, #12]
 800a1b6:	4641      	mov	r1, r8
 800a1b8:	f7ff fa0a 	bl	80095d0 <__mcmp>
 800a1bc:	2800      	cmp	r0, #0
 800a1be:	da45      	bge.n	800a24c <_strtod_l+0x864>
 800a1c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a1c2:	ea53 030a 	orrs.w	r3, r3, sl
 800a1c6:	d16b      	bne.n	800a2a0 <_strtod_l+0x8b8>
 800a1c8:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a1cc:	2b00      	cmp	r3, #0
 800a1ce:	d167      	bne.n	800a2a0 <_strtod_l+0x8b8>
 800a1d0:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a1d4:	0d1b      	lsrs	r3, r3, #20
 800a1d6:	051b      	lsls	r3, r3, #20
 800a1d8:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a1dc:	d960      	bls.n	800a2a0 <_strtod_l+0x8b8>
 800a1de:	6963      	ldr	r3, [r4, #20]
 800a1e0:	b913      	cbnz	r3, 800a1e8 <_strtod_l+0x800>
 800a1e2:	6923      	ldr	r3, [r4, #16]
 800a1e4:	2b01      	cmp	r3, #1
 800a1e6:	dd5b      	ble.n	800a2a0 <_strtod_l+0x8b8>
 800a1e8:	4621      	mov	r1, r4
 800a1ea:	2201      	movs	r2, #1
 800a1ec:	9805      	ldr	r0, [sp, #20]
 800a1ee:	f7ff f983 	bl	80094f8 <__lshift>
 800a1f2:	4641      	mov	r1, r8
 800a1f4:	4604      	mov	r4, r0
 800a1f6:	f7ff f9eb 	bl	80095d0 <__mcmp>
 800a1fa:	2800      	cmp	r0, #0
 800a1fc:	dd50      	ble.n	800a2a0 <_strtod_l+0x8b8>
 800a1fe:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a202:	9a08      	ldr	r2, [sp, #32]
 800a204:	0d1b      	lsrs	r3, r3, #20
 800a206:	051b      	lsls	r3, r3, #20
 800a208:	2a00      	cmp	r2, #0
 800a20a:	d06a      	beq.n	800a2e2 <_strtod_l+0x8fa>
 800a20c:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 800a210:	d867      	bhi.n	800a2e2 <_strtod_l+0x8fa>
 800a212:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 800a216:	f67f ae9d 	bls.w	8009f54 <_strtod_l+0x56c>
 800a21a:	4b0a      	ldr	r3, [pc, #40]	@ (800a244 <_strtod_l+0x85c>)
 800a21c:	4650      	mov	r0, sl
 800a21e:	4659      	mov	r1, fp
 800a220:	2200      	movs	r2, #0
 800a222:	f7f6 f9f1 	bl	8000608 <__aeabi_dmul>
 800a226:	4b08      	ldr	r3, [pc, #32]	@ (800a248 <_strtod_l+0x860>)
 800a228:	400b      	ands	r3, r1
 800a22a:	4682      	mov	sl, r0
 800a22c:	468b      	mov	fp, r1
 800a22e:	2b00      	cmp	r3, #0
 800a230:	f47f ae08 	bne.w	8009e44 <_strtod_l+0x45c>
 800a234:	9a05      	ldr	r2, [sp, #20]
 800a236:	2322      	movs	r3, #34	@ 0x22
 800a238:	6013      	str	r3, [r2, #0]
 800a23a:	e603      	b.n	8009e44 <_strtod_l+0x45c>
 800a23c:	0800bd30 	.word	0x0800bd30
 800a240:	fffffc02 	.word	0xfffffc02
 800a244:	39500000 	.word	0x39500000
 800a248:	7ff00000 	.word	0x7ff00000
 800a24c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a250:	d165      	bne.n	800a31e <_strtod_l+0x936>
 800a252:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800a254:	f3cb 0313 	ubfx	r3, fp, #0, #20
 800a258:	b35a      	cbz	r2, 800a2b2 <_strtod_l+0x8ca>
 800a25a:	4a9f      	ldr	r2, [pc, #636]	@ (800a4d8 <_strtod_l+0xaf0>)
 800a25c:	4293      	cmp	r3, r2
 800a25e:	d12b      	bne.n	800a2b8 <_strtod_l+0x8d0>
 800a260:	9b08      	ldr	r3, [sp, #32]
 800a262:	4651      	mov	r1, sl
 800a264:	b303      	cbz	r3, 800a2a8 <_strtod_l+0x8c0>
 800a266:	4b9d      	ldr	r3, [pc, #628]	@ (800a4dc <_strtod_l+0xaf4>)
 800a268:	465a      	mov	r2, fp
 800a26a:	4013      	ands	r3, r2
 800a26c:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 800a270:	f04f 32ff 	mov.w	r2, #4294967295
 800a274:	d81b      	bhi.n	800a2ae <_strtod_l+0x8c6>
 800a276:	0d1b      	lsrs	r3, r3, #20
 800a278:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 800a27c:	fa02 f303 	lsl.w	r3, r2, r3
 800a280:	4299      	cmp	r1, r3
 800a282:	d119      	bne.n	800a2b8 <_strtod_l+0x8d0>
 800a284:	4b96      	ldr	r3, [pc, #600]	@ (800a4e0 <_strtod_l+0xaf8>)
 800a286:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a288:	429a      	cmp	r2, r3
 800a28a:	d102      	bne.n	800a292 <_strtod_l+0x8aa>
 800a28c:	3101      	adds	r1, #1
 800a28e:	f43f adce 	beq.w	8009e2e <_strtod_l+0x446>
 800a292:	4b92      	ldr	r3, [pc, #584]	@ (800a4dc <_strtod_l+0xaf4>)
 800a294:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a296:	401a      	ands	r2, r3
 800a298:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 800a29c:	f04f 0a00 	mov.w	sl, #0
 800a2a0:	9b08      	ldr	r3, [sp, #32]
 800a2a2:	2b00      	cmp	r3, #0
 800a2a4:	d1b9      	bne.n	800a21a <_strtod_l+0x832>
 800a2a6:	e5cd      	b.n	8009e44 <_strtod_l+0x45c>
 800a2a8:	f04f 33ff 	mov.w	r3, #4294967295
 800a2ac:	e7e8      	b.n	800a280 <_strtod_l+0x898>
 800a2ae:	4613      	mov	r3, r2
 800a2b0:	e7e6      	b.n	800a280 <_strtod_l+0x898>
 800a2b2:	ea53 030a 	orrs.w	r3, r3, sl
 800a2b6:	d0a2      	beq.n	800a1fe <_strtod_l+0x816>
 800a2b8:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 800a2ba:	b1db      	cbz	r3, 800a2f4 <_strtod_l+0x90c>
 800a2bc:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800a2be:	4213      	tst	r3, r2
 800a2c0:	d0ee      	beq.n	800a2a0 <_strtod_l+0x8b8>
 800a2c2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a2c4:	9a08      	ldr	r2, [sp, #32]
 800a2c6:	4650      	mov	r0, sl
 800a2c8:	4659      	mov	r1, fp
 800a2ca:	b1bb      	cbz	r3, 800a2fc <_strtod_l+0x914>
 800a2cc:	f7ff fb6e 	bl	80099ac <sulp>
 800a2d0:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a2d4:	ec53 2b10 	vmov	r2, r3, d0
 800a2d8:	f7f5 ffe0 	bl	800029c <__adddf3>
 800a2dc:	4682      	mov	sl, r0
 800a2de:	468b      	mov	fp, r1
 800a2e0:	e7de      	b.n	800a2a0 <_strtod_l+0x8b8>
 800a2e2:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 800a2e6:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 800a2ea:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 800a2ee:	f04f 3aff 	mov.w	sl, #4294967295
 800a2f2:	e7d5      	b.n	800a2a0 <_strtod_l+0x8b8>
 800a2f4:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 800a2f6:	ea13 0f0a 	tst.w	r3, sl
 800a2fa:	e7e1      	b.n	800a2c0 <_strtod_l+0x8d8>
 800a2fc:	f7ff fb56 	bl	80099ac <sulp>
 800a300:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a304:	ec53 2b10 	vmov	r2, r3, d0
 800a308:	f7f5 ffc6 	bl	8000298 <__aeabi_dsub>
 800a30c:	2200      	movs	r2, #0
 800a30e:	2300      	movs	r3, #0
 800a310:	4682      	mov	sl, r0
 800a312:	468b      	mov	fp, r1
 800a314:	f7f6 fbe0 	bl	8000ad8 <__aeabi_dcmpeq>
 800a318:	2800      	cmp	r0, #0
 800a31a:	d0c1      	beq.n	800a2a0 <_strtod_l+0x8b8>
 800a31c:	e61a      	b.n	8009f54 <_strtod_l+0x56c>
 800a31e:	4641      	mov	r1, r8
 800a320:	4620      	mov	r0, r4
 800a322:	f7ff facd 	bl	80098c0 <__ratio>
 800a326:	ec57 6b10 	vmov	r6, r7, d0
 800a32a:	2200      	movs	r2, #0
 800a32c:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 800a330:	4630      	mov	r0, r6
 800a332:	4639      	mov	r1, r7
 800a334:	f7f6 fbe4 	bl	8000b00 <__aeabi_dcmple>
 800a338:	2800      	cmp	r0, #0
 800a33a:	d06f      	beq.n	800a41c <_strtod_l+0xa34>
 800a33c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a33e:	2b00      	cmp	r3, #0
 800a340:	d17a      	bne.n	800a438 <_strtod_l+0xa50>
 800a342:	f1ba 0f00 	cmp.w	sl, #0
 800a346:	d158      	bne.n	800a3fa <_strtod_l+0xa12>
 800a348:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a34a:	f3c3 0313 	ubfx	r3, r3, #0, #20
 800a34e:	2b00      	cmp	r3, #0
 800a350:	d15a      	bne.n	800a408 <_strtod_l+0xa20>
 800a352:	4b64      	ldr	r3, [pc, #400]	@ (800a4e4 <_strtod_l+0xafc>)
 800a354:	2200      	movs	r2, #0
 800a356:	4630      	mov	r0, r6
 800a358:	4639      	mov	r1, r7
 800a35a:	f7f6 fbc7 	bl	8000aec <__aeabi_dcmplt>
 800a35e:	2800      	cmp	r0, #0
 800a360:	d159      	bne.n	800a416 <_strtod_l+0xa2e>
 800a362:	4630      	mov	r0, r6
 800a364:	4639      	mov	r1, r7
 800a366:	4b60      	ldr	r3, [pc, #384]	@ (800a4e8 <_strtod_l+0xb00>)
 800a368:	2200      	movs	r2, #0
 800a36a:	f7f6 f94d 	bl	8000608 <__aeabi_dmul>
 800a36e:	4606      	mov	r6, r0
 800a370:	460f      	mov	r7, r1
 800a372:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800a376:	9606      	str	r6, [sp, #24]
 800a378:	9307      	str	r3, [sp, #28]
 800a37a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a37e:	4d57      	ldr	r5, [pc, #348]	@ (800a4dc <_strtod_l+0xaf4>)
 800a380:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a384:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a386:	401d      	ands	r5, r3
 800a388:	4b58      	ldr	r3, [pc, #352]	@ (800a4ec <_strtod_l+0xb04>)
 800a38a:	429d      	cmp	r5, r3
 800a38c:	f040 80b2 	bne.w	800a4f4 <_strtod_l+0xb0c>
 800a390:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a392:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800a396:	ec4b ab10 	vmov	d0, sl, fp
 800a39a:	f7ff f9c9 	bl	8009730 <__ulp>
 800a39e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800a3a2:	ec51 0b10 	vmov	r0, r1, d0
 800a3a6:	f7f6 f92f 	bl	8000608 <__aeabi_dmul>
 800a3aa:	4652      	mov	r2, sl
 800a3ac:	465b      	mov	r3, fp
 800a3ae:	f7f5 ff75 	bl	800029c <__adddf3>
 800a3b2:	460b      	mov	r3, r1
 800a3b4:	4949      	ldr	r1, [pc, #292]	@ (800a4dc <_strtod_l+0xaf4>)
 800a3b6:	4a4e      	ldr	r2, [pc, #312]	@ (800a4f0 <_strtod_l+0xb08>)
 800a3b8:	4019      	ands	r1, r3
 800a3ba:	4291      	cmp	r1, r2
 800a3bc:	4682      	mov	sl, r0
 800a3be:	d942      	bls.n	800a446 <_strtod_l+0xa5e>
 800a3c0:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 800a3c2:	4b47      	ldr	r3, [pc, #284]	@ (800a4e0 <_strtod_l+0xaf8>)
 800a3c4:	429a      	cmp	r2, r3
 800a3c6:	d103      	bne.n	800a3d0 <_strtod_l+0x9e8>
 800a3c8:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 800a3ca:	3301      	adds	r3, #1
 800a3cc:	f43f ad2f 	beq.w	8009e2e <_strtod_l+0x446>
 800a3d0:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 800a4e0 <_strtod_l+0xaf8>
 800a3d4:	f04f 3aff 	mov.w	sl, #4294967295
 800a3d8:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800a3da:	9805      	ldr	r0, [sp, #20]
 800a3dc:	f7fe fe7c 	bl	80090d8 <_Bfree>
 800a3e0:	9805      	ldr	r0, [sp, #20]
 800a3e2:	4649      	mov	r1, r9
 800a3e4:	f7fe fe78 	bl	80090d8 <_Bfree>
 800a3e8:	9805      	ldr	r0, [sp, #20]
 800a3ea:	4641      	mov	r1, r8
 800a3ec:	f7fe fe74 	bl	80090d8 <_Bfree>
 800a3f0:	9805      	ldr	r0, [sp, #20]
 800a3f2:	4621      	mov	r1, r4
 800a3f4:	f7fe fe70 	bl	80090d8 <_Bfree>
 800a3f8:	e619      	b.n	800a02e <_strtod_l+0x646>
 800a3fa:	f1ba 0f01 	cmp.w	sl, #1
 800a3fe:	d103      	bne.n	800a408 <_strtod_l+0xa20>
 800a400:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800a402:	2b00      	cmp	r3, #0
 800a404:	f43f ada6 	beq.w	8009f54 <_strtod_l+0x56c>
 800a408:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 800a4b8 <_strtod_l+0xad0>
 800a40c:	4f35      	ldr	r7, [pc, #212]	@ (800a4e4 <_strtod_l+0xafc>)
 800a40e:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a412:	2600      	movs	r6, #0
 800a414:	e7b1      	b.n	800a37a <_strtod_l+0x992>
 800a416:	4f34      	ldr	r7, [pc, #208]	@ (800a4e8 <_strtod_l+0xb00>)
 800a418:	2600      	movs	r6, #0
 800a41a:	e7aa      	b.n	800a372 <_strtod_l+0x98a>
 800a41c:	4b32      	ldr	r3, [pc, #200]	@ (800a4e8 <_strtod_l+0xb00>)
 800a41e:	4630      	mov	r0, r6
 800a420:	4639      	mov	r1, r7
 800a422:	2200      	movs	r2, #0
 800a424:	f7f6 f8f0 	bl	8000608 <__aeabi_dmul>
 800a428:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a42a:	4606      	mov	r6, r0
 800a42c:	460f      	mov	r7, r1
 800a42e:	2b00      	cmp	r3, #0
 800a430:	d09f      	beq.n	800a372 <_strtod_l+0x98a>
 800a432:	e9cd 6706 	strd	r6, r7, [sp, #24]
 800a436:	e7a0      	b.n	800a37a <_strtod_l+0x992>
 800a438:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 800a4c0 <_strtod_l+0xad8>
 800a43c:	ed8d 7b06 	vstr	d7, [sp, #24]
 800a440:	ec57 6b17 	vmov	r6, r7, d7
 800a444:	e799      	b.n	800a37a <_strtod_l+0x992>
 800a446:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 800a44a:	9b08      	ldr	r3, [sp, #32]
 800a44c:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 800a450:	2b00      	cmp	r3, #0
 800a452:	d1c1      	bne.n	800a3d8 <_strtod_l+0x9f0>
 800a454:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 800a458:	0d1b      	lsrs	r3, r3, #20
 800a45a:	051b      	lsls	r3, r3, #20
 800a45c:	429d      	cmp	r5, r3
 800a45e:	d1bb      	bne.n	800a3d8 <_strtod_l+0x9f0>
 800a460:	4630      	mov	r0, r6
 800a462:	4639      	mov	r1, r7
 800a464:	f7f6 fc30 	bl	8000cc8 <__aeabi_d2lz>
 800a468:	f7f6 f8a0 	bl	80005ac <__aeabi_l2d>
 800a46c:	4602      	mov	r2, r0
 800a46e:	460b      	mov	r3, r1
 800a470:	4630      	mov	r0, r6
 800a472:	4639      	mov	r1, r7
 800a474:	f7f5 ff10 	bl	8000298 <__aeabi_dsub>
 800a478:	460b      	mov	r3, r1
 800a47a:	4602      	mov	r2, r0
 800a47c:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 800a480:	f3cb 0613 	ubfx	r6, fp, #0, #20
 800a484:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a486:	ea46 060a 	orr.w	r6, r6, sl
 800a48a:	431e      	orrs	r6, r3
 800a48c:	d06f      	beq.n	800a56e <_strtod_l+0xb86>
 800a48e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a4c8 <_strtod_l+0xae0>)
 800a490:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a494:	f7f6 fb2a 	bl	8000aec <__aeabi_dcmplt>
 800a498:	2800      	cmp	r0, #0
 800a49a:	f47f acd3 	bne.w	8009e44 <_strtod_l+0x45c>
 800a49e:	a30c      	add	r3, pc, #48	@ (adr r3, 800a4d0 <_strtod_l+0xae8>)
 800a4a0:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a4a4:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 800a4a8:	f7f6 fb3e 	bl	8000b28 <__aeabi_dcmpgt>
 800a4ac:	2800      	cmp	r0, #0
 800a4ae:	d093      	beq.n	800a3d8 <_strtod_l+0x9f0>
 800a4b0:	e4c8      	b.n	8009e44 <_strtod_l+0x45c>
 800a4b2:	bf00      	nop
 800a4b4:	f3af 8000 	nop.w
 800a4b8:	00000000 	.word	0x00000000
 800a4bc:	bff00000 	.word	0xbff00000
 800a4c0:	00000000 	.word	0x00000000
 800a4c4:	3ff00000 	.word	0x3ff00000
 800a4c8:	94a03595 	.word	0x94a03595
 800a4cc:	3fdfffff 	.word	0x3fdfffff
 800a4d0:	35afe535 	.word	0x35afe535
 800a4d4:	3fe00000 	.word	0x3fe00000
 800a4d8:	000fffff 	.word	0x000fffff
 800a4dc:	7ff00000 	.word	0x7ff00000
 800a4e0:	7fefffff 	.word	0x7fefffff
 800a4e4:	3ff00000 	.word	0x3ff00000
 800a4e8:	3fe00000 	.word	0x3fe00000
 800a4ec:	7fe00000 	.word	0x7fe00000
 800a4f0:	7c9fffff 	.word	0x7c9fffff
 800a4f4:	9b08      	ldr	r3, [sp, #32]
 800a4f6:	b323      	cbz	r3, 800a542 <_strtod_l+0xb5a>
 800a4f8:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 800a4fc:	d821      	bhi.n	800a542 <_strtod_l+0xb5a>
 800a4fe:	a328      	add	r3, pc, #160	@ (adr r3, 800a5a0 <_strtod_l+0xbb8>)
 800a500:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a504:	4630      	mov	r0, r6
 800a506:	4639      	mov	r1, r7
 800a508:	f7f6 fafa 	bl	8000b00 <__aeabi_dcmple>
 800a50c:	b1a0      	cbz	r0, 800a538 <_strtod_l+0xb50>
 800a50e:	4639      	mov	r1, r7
 800a510:	4630      	mov	r0, r6
 800a512:	f7f6 fb51 	bl	8000bb8 <__aeabi_d2uiz>
 800a516:	2801      	cmp	r0, #1
 800a518:	bf38      	it	cc
 800a51a:	2001      	movcc	r0, #1
 800a51c:	f7f5 fffa 	bl	8000514 <__aeabi_ui2d>
 800a520:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a522:	4606      	mov	r6, r0
 800a524:	460f      	mov	r7, r1
 800a526:	b9fb      	cbnz	r3, 800a568 <_strtod_l+0xb80>
 800a528:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 800a52c:	9014      	str	r0, [sp, #80]	@ 0x50
 800a52e:	9315      	str	r3, [sp, #84]	@ 0x54
 800a530:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 800a534:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800a538:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800a53a:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 800a53e:	1b5b      	subs	r3, r3, r5
 800a540:	9311      	str	r3, [sp, #68]	@ 0x44
 800a542:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 800a546:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 800a54a:	f7ff f8f1 	bl	8009730 <__ulp>
 800a54e:	4650      	mov	r0, sl
 800a550:	ec53 2b10 	vmov	r2, r3, d0
 800a554:	4659      	mov	r1, fp
 800a556:	f7f6 f857 	bl	8000608 <__aeabi_dmul>
 800a55a:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 800a55e:	f7f5 fe9d 	bl	800029c <__adddf3>
 800a562:	4682      	mov	sl, r0
 800a564:	468b      	mov	fp, r1
 800a566:	e770      	b.n	800a44a <_strtod_l+0xa62>
 800a568:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 800a56c:	e7e0      	b.n	800a530 <_strtod_l+0xb48>
 800a56e:	a30e      	add	r3, pc, #56	@ (adr r3, 800a5a8 <_strtod_l+0xbc0>)
 800a570:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a574:	f7f6 faba 	bl	8000aec <__aeabi_dcmplt>
 800a578:	e798      	b.n	800a4ac <_strtod_l+0xac4>
 800a57a:	2300      	movs	r3, #0
 800a57c:	930e      	str	r3, [sp, #56]	@ 0x38
 800a57e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 800a580:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800a582:	6013      	str	r3, [r2, #0]
 800a584:	f7ff ba6d 	b.w	8009a62 <_strtod_l+0x7a>
 800a588:	2a65      	cmp	r2, #101	@ 0x65
 800a58a:	f43f ab68 	beq.w	8009c5e <_strtod_l+0x276>
 800a58e:	2a45      	cmp	r2, #69	@ 0x45
 800a590:	f43f ab65 	beq.w	8009c5e <_strtod_l+0x276>
 800a594:	2301      	movs	r3, #1
 800a596:	f7ff bba0 	b.w	8009cda <_strtod_l+0x2f2>
 800a59a:	bf00      	nop
 800a59c:	f3af 8000 	nop.w
 800a5a0:	ffc00000 	.word	0xffc00000
 800a5a4:	41dfffff 	.word	0x41dfffff
 800a5a8:	94a03595 	.word	0x94a03595
 800a5ac:	3fcfffff 	.word	0x3fcfffff

0800a5b0 <_strtod_r>:
 800a5b0:	4b01      	ldr	r3, [pc, #4]	@ (800a5b8 <_strtod_r+0x8>)
 800a5b2:	f7ff ba19 	b.w	80099e8 <_strtod_l>
 800a5b6:	bf00      	nop
 800a5b8:	20000084 	.word	0x20000084

0800a5bc <_strtol_l.isra.0>:
 800a5bc:	2b24      	cmp	r3, #36	@ 0x24
 800a5be:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a5c2:	4686      	mov	lr, r0
 800a5c4:	4690      	mov	r8, r2
 800a5c6:	d801      	bhi.n	800a5cc <_strtol_l.isra.0+0x10>
 800a5c8:	2b01      	cmp	r3, #1
 800a5ca:	d106      	bne.n	800a5da <_strtol_l.isra.0+0x1e>
 800a5cc:	f7fd fdaa 	bl	8008124 <__errno>
 800a5d0:	2316      	movs	r3, #22
 800a5d2:	6003      	str	r3, [r0, #0]
 800a5d4:	2000      	movs	r0, #0
 800a5d6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a5da:	4834      	ldr	r0, [pc, #208]	@ (800a6ac <_strtol_l.isra.0+0xf0>)
 800a5dc:	460d      	mov	r5, r1
 800a5de:	462a      	mov	r2, r5
 800a5e0:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a5e4:	5d06      	ldrb	r6, [r0, r4]
 800a5e6:	f016 0608 	ands.w	r6, r6, #8
 800a5ea:	d1f8      	bne.n	800a5de <_strtol_l.isra.0+0x22>
 800a5ec:	2c2d      	cmp	r4, #45	@ 0x2d
 800a5ee:	d110      	bne.n	800a612 <_strtol_l.isra.0+0x56>
 800a5f0:	782c      	ldrb	r4, [r5, #0]
 800a5f2:	2601      	movs	r6, #1
 800a5f4:	1c95      	adds	r5, r2, #2
 800a5f6:	f033 0210 	bics.w	r2, r3, #16
 800a5fa:	d115      	bne.n	800a628 <_strtol_l.isra.0+0x6c>
 800a5fc:	2c30      	cmp	r4, #48	@ 0x30
 800a5fe:	d10d      	bne.n	800a61c <_strtol_l.isra.0+0x60>
 800a600:	782a      	ldrb	r2, [r5, #0]
 800a602:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 800a606:	2a58      	cmp	r2, #88	@ 0x58
 800a608:	d108      	bne.n	800a61c <_strtol_l.isra.0+0x60>
 800a60a:	786c      	ldrb	r4, [r5, #1]
 800a60c:	3502      	adds	r5, #2
 800a60e:	2310      	movs	r3, #16
 800a610:	e00a      	b.n	800a628 <_strtol_l.isra.0+0x6c>
 800a612:	2c2b      	cmp	r4, #43	@ 0x2b
 800a614:	bf04      	itt	eq
 800a616:	782c      	ldrbeq	r4, [r5, #0]
 800a618:	1c95      	addeq	r5, r2, #2
 800a61a:	e7ec      	b.n	800a5f6 <_strtol_l.isra.0+0x3a>
 800a61c:	2b00      	cmp	r3, #0
 800a61e:	d1f6      	bne.n	800a60e <_strtol_l.isra.0+0x52>
 800a620:	2c30      	cmp	r4, #48	@ 0x30
 800a622:	bf14      	ite	ne
 800a624:	230a      	movne	r3, #10
 800a626:	2308      	moveq	r3, #8
 800a628:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 800a62c:	f10c 3cff 	add.w	ip, ip, #4294967295
 800a630:	2200      	movs	r2, #0
 800a632:	fbbc f9f3 	udiv	r9, ip, r3
 800a636:	4610      	mov	r0, r2
 800a638:	fb03 ca19 	mls	sl, r3, r9, ip
 800a63c:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 800a640:	2f09      	cmp	r7, #9
 800a642:	d80f      	bhi.n	800a664 <_strtol_l.isra.0+0xa8>
 800a644:	463c      	mov	r4, r7
 800a646:	42a3      	cmp	r3, r4
 800a648:	dd1b      	ble.n	800a682 <_strtol_l.isra.0+0xc6>
 800a64a:	1c57      	adds	r7, r2, #1
 800a64c:	d007      	beq.n	800a65e <_strtol_l.isra.0+0xa2>
 800a64e:	4581      	cmp	r9, r0
 800a650:	d314      	bcc.n	800a67c <_strtol_l.isra.0+0xc0>
 800a652:	d101      	bne.n	800a658 <_strtol_l.isra.0+0x9c>
 800a654:	45a2      	cmp	sl, r4
 800a656:	db11      	blt.n	800a67c <_strtol_l.isra.0+0xc0>
 800a658:	fb00 4003 	mla	r0, r0, r3, r4
 800a65c:	2201      	movs	r2, #1
 800a65e:	f815 4b01 	ldrb.w	r4, [r5], #1
 800a662:	e7eb      	b.n	800a63c <_strtol_l.isra.0+0x80>
 800a664:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 800a668:	2f19      	cmp	r7, #25
 800a66a:	d801      	bhi.n	800a670 <_strtol_l.isra.0+0xb4>
 800a66c:	3c37      	subs	r4, #55	@ 0x37
 800a66e:	e7ea      	b.n	800a646 <_strtol_l.isra.0+0x8a>
 800a670:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 800a674:	2f19      	cmp	r7, #25
 800a676:	d804      	bhi.n	800a682 <_strtol_l.isra.0+0xc6>
 800a678:	3c57      	subs	r4, #87	@ 0x57
 800a67a:	e7e4      	b.n	800a646 <_strtol_l.isra.0+0x8a>
 800a67c:	f04f 32ff 	mov.w	r2, #4294967295
 800a680:	e7ed      	b.n	800a65e <_strtol_l.isra.0+0xa2>
 800a682:	1c53      	adds	r3, r2, #1
 800a684:	d108      	bne.n	800a698 <_strtol_l.isra.0+0xdc>
 800a686:	2322      	movs	r3, #34	@ 0x22
 800a688:	f8ce 3000 	str.w	r3, [lr]
 800a68c:	4660      	mov	r0, ip
 800a68e:	f1b8 0f00 	cmp.w	r8, #0
 800a692:	d0a0      	beq.n	800a5d6 <_strtol_l.isra.0+0x1a>
 800a694:	1e69      	subs	r1, r5, #1
 800a696:	e006      	b.n	800a6a6 <_strtol_l.isra.0+0xea>
 800a698:	b106      	cbz	r6, 800a69c <_strtol_l.isra.0+0xe0>
 800a69a:	4240      	negs	r0, r0
 800a69c:	f1b8 0f00 	cmp.w	r8, #0
 800a6a0:	d099      	beq.n	800a5d6 <_strtol_l.isra.0+0x1a>
 800a6a2:	2a00      	cmp	r2, #0
 800a6a4:	d1f6      	bne.n	800a694 <_strtol_l.isra.0+0xd8>
 800a6a6:	f8c8 1000 	str.w	r1, [r8]
 800a6aa:	e794      	b.n	800a5d6 <_strtol_l.isra.0+0x1a>
 800a6ac:	0800bd59 	.word	0x0800bd59

0800a6b0 <_strtol_r>:
 800a6b0:	f7ff bf84 	b.w	800a5bc <_strtol_l.isra.0>

0800a6b4 <__ssputs_r>:
 800a6b4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 800a6b8:	688e      	ldr	r6, [r1, #8]
 800a6ba:	461f      	mov	r7, r3
 800a6bc:	42be      	cmp	r6, r7
 800a6be:	680b      	ldr	r3, [r1, #0]
 800a6c0:	4682      	mov	sl, r0
 800a6c2:	460c      	mov	r4, r1
 800a6c4:	4690      	mov	r8, r2
 800a6c6:	d82d      	bhi.n	800a724 <__ssputs_r+0x70>
 800a6c8:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a6cc:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 800a6d0:	d026      	beq.n	800a720 <__ssputs_r+0x6c>
 800a6d2:	6965      	ldr	r5, [r4, #20]
 800a6d4:	6909      	ldr	r1, [r1, #16]
 800a6d6:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800a6da:	eba3 0901 	sub.w	r9, r3, r1
 800a6de:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 800a6e2:	1c7b      	adds	r3, r7, #1
 800a6e4:	444b      	add	r3, r9
 800a6e6:	106d      	asrs	r5, r5, #1
 800a6e8:	429d      	cmp	r5, r3
 800a6ea:	bf38      	it	cc
 800a6ec:	461d      	movcc	r5, r3
 800a6ee:	0553      	lsls	r3, r2, #21
 800a6f0:	d527      	bpl.n	800a742 <__ssputs_r+0x8e>
 800a6f2:	4629      	mov	r1, r5
 800a6f4:	f7fe fc24 	bl	8008f40 <_malloc_r>
 800a6f8:	4606      	mov	r6, r0
 800a6fa:	b360      	cbz	r0, 800a756 <__ssputs_r+0xa2>
 800a6fc:	6921      	ldr	r1, [r4, #16]
 800a6fe:	464a      	mov	r2, r9
 800a700:	f7fd fd3d 	bl	800817e <memcpy>
 800a704:	89a3      	ldrh	r3, [r4, #12]
 800a706:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800a70a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a70e:	81a3      	strh	r3, [r4, #12]
 800a710:	6126      	str	r6, [r4, #16]
 800a712:	6165      	str	r5, [r4, #20]
 800a714:	444e      	add	r6, r9
 800a716:	eba5 0509 	sub.w	r5, r5, r9
 800a71a:	6026      	str	r6, [r4, #0]
 800a71c:	60a5      	str	r5, [r4, #8]
 800a71e:	463e      	mov	r6, r7
 800a720:	42be      	cmp	r6, r7
 800a722:	d900      	bls.n	800a726 <__ssputs_r+0x72>
 800a724:	463e      	mov	r6, r7
 800a726:	6820      	ldr	r0, [r4, #0]
 800a728:	4632      	mov	r2, r6
 800a72a:	4641      	mov	r1, r8
 800a72c:	f7fd fc78 	bl	8008020 <memmove>
 800a730:	68a3      	ldr	r3, [r4, #8]
 800a732:	1b9b      	subs	r3, r3, r6
 800a734:	60a3      	str	r3, [r4, #8]
 800a736:	6823      	ldr	r3, [r4, #0]
 800a738:	4433      	add	r3, r6
 800a73a:	6023      	str	r3, [r4, #0]
 800a73c:	2000      	movs	r0, #0
 800a73e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800a742:	462a      	mov	r2, r5
 800a744:	f000 fde5 	bl	800b312 <_realloc_r>
 800a748:	4606      	mov	r6, r0
 800a74a:	2800      	cmp	r0, #0
 800a74c:	d1e0      	bne.n	800a710 <__ssputs_r+0x5c>
 800a74e:	6921      	ldr	r1, [r4, #16]
 800a750:	4650      	mov	r0, sl
 800a752:	f7fe fb81 	bl	8008e58 <_free_r>
 800a756:	230c      	movs	r3, #12
 800a758:	f8ca 3000 	str.w	r3, [sl]
 800a75c:	89a3      	ldrh	r3, [r4, #12]
 800a75e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a762:	81a3      	strh	r3, [r4, #12]
 800a764:	f04f 30ff 	mov.w	r0, #4294967295
 800a768:	e7e9      	b.n	800a73e <__ssputs_r+0x8a>
	...

0800a76c <_svfiprintf_r>:
 800a76c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a770:	4698      	mov	r8, r3
 800a772:	898b      	ldrh	r3, [r1, #12]
 800a774:	061b      	lsls	r3, r3, #24
 800a776:	b09d      	sub	sp, #116	@ 0x74
 800a778:	4607      	mov	r7, r0
 800a77a:	460d      	mov	r5, r1
 800a77c:	4614      	mov	r4, r2
 800a77e:	d510      	bpl.n	800a7a2 <_svfiprintf_r+0x36>
 800a780:	690b      	ldr	r3, [r1, #16]
 800a782:	b973      	cbnz	r3, 800a7a2 <_svfiprintf_r+0x36>
 800a784:	2140      	movs	r1, #64	@ 0x40
 800a786:	f7fe fbdb 	bl	8008f40 <_malloc_r>
 800a78a:	6028      	str	r0, [r5, #0]
 800a78c:	6128      	str	r0, [r5, #16]
 800a78e:	b930      	cbnz	r0, 800a79e <_svfiprintf_r+0x32>
 800a790:	230c      	movs	r3, #12
 800a792:	603b      	str	r3, [r7, #0]
 800a794:	f04f 30ff 	mov.w	r0, #4294967295
 800a798:	b01d      	add	sp, #116	@ 0x74
 800a79a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a79e:	2340      	movs	r3, #64	@ 0x40
 800a7a0:	616b      	str	r3, [r5, #20]
 800a7a2:	2300      	movs	r3, #0
 800a7a4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a7a6:	2320      	movs	r3, #32
 800a7a8:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a7ac:	f8cd 800c 	str.w	r8, [sp, #12]
 800a7b0:	2330      	movs	r3, #48	@ 0x30
 800a7b2:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 800a950 <_svfiprintf_r+0x1e4>
 800a7b6:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a7ba:	f04f 0901 	mov.w	r9, #1
 800a7be:	4623      	mov	r3, r4
 800a7c0:	469a      	mov	sl, r3
 800a7c2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a7c6:	b10a      	cbz	r2, 800a7cc <_svfiprintf_r+0x60>
 800a7c8:	2a25      	cmp	r2, #37	@ 0x25
 800a7ca:	d1f9      	bne.n	800a7c0 <_svfiprintf_r+0x54>
 800a7cc:	ebba 0b04 	subs.w	fp, sl, r4
 800a7d0:	d00b      	beq.n	800a7ea <_svfiprintf_r+0x7e>
 800a7d2:	465b      	mov	r3, fp
 800a7d4:	4622      	mov	r2, r4
 800a7d6:	4629      	mov	r1, r5
 800a7d8:	4638      	mov	r0, r7
 800a7da:	f7ff ff6b 	bl	800a6b4 <__ssputs_r>
 800a7de:	3001      	adds	r0, #1
 800a7e0:	f000 80a7 	beq.w	800a932 <_svfiprintf_r+0x1c6>
 800a7e4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a7e6:	445a      	add	r2, fp
 800a7e8:	9209      	str	r2, [sp, #36]	@ 0x24
 800a7ea:	f89a 3000 	ldrb.w	r3, [sl]
 800a7ee:	2b00      	cmp	r3, #0
 800a7f0:	f000 809f 	beq.w	800a932 <_svfiprintf_r+0x1c6>
 800a7f4:	2300      	movs	r3, #0
 800a7f6:	f04f 32ff 	mov.w	r2, #4294967295
 800a7fa:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a7fe:	f10a 0a01 	add.w	sl, sl, #1
 800a802:	9304      	str	r3, [sp, #16]
 800a804:	9307      	str	r3, [sp, #28]
 800a806:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a80a:	931a      	str	r3, [sp, #104]	@ 0x68
 800a80c:	4654      	mov	r4, sl
 800a80e:	2205      	movs	r2, #5
 800a810:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a814:	484e      	ldr	r0, [pc, #312]	@ (800a950 <_svfiprintf_r+0x1e4>)
 800a816:	f7f5 fce3 	bl	80001e0 <memchr>
 800a81a:	9a04      	ldr	r2, [sp, #16]
 800a81c:	b9d8      	cbnz	r0, 800a856 <_svfiprintf_r+0xea>
 800a81e:	06d0      	lsls	r0, r2, #27
 800a820:	bf44      	itt	mi
 800a822:	2320      	movmi	r3, #32
 800a824:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a828:	0711      	lsls	r1, r2, #28
 800a82a:	bf44      	itt	mi
 800a82c:	232b      	movmi	r3, #43	@ 0x2b
 800a82e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a832:	f89a 3000 	ldrb.w	r3, [sl]
 800a836:	2b2a      	cmp	r3, #42	@ 0x2a
 800a838:	d015      	beq.n	800a866 <_svfiprintf_r+0xfa>
 800a83a:	9a07      	ldr	r2, [sp, #28]
 800a83c:	4654      	mov	r4, sl
 800a83e:	2000      	movs	r0, #0
 800a840:	f04f 0c0a 	mov.w	ip, #10
 800a844:	4621      	mov	r1, r4
 800a846:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a84a:	3b30      	subs	r3, #48	@ 0x30
 800a84c:	2b09      	cmp	r3, #9
 800a84e:	d94b      	bls.n	800a8e8 <_svfiprintf_r+0x17c>
 800a850:	b1b0      	cbz	r0, 800a880 <_svfiprintf_r+0x114>
 800a852:	9207      	str	r2, [sp, #28]
 800a854:	e014      	b.n	800a880 <_svfiprintf_r+0x114>
 800a856:	eba0 0308 	sub.w	r3, r0, r8
 800a85a:	fa09 f303 	lsl.w	r3, r9, r3
 800a85e:	4313      	orrs	r3, r2
 800a860:	9304      	str	r3, [sp, #16]
 800a862:	46a2      	mov	sl, r4
 800a864:	e7d2      	b.n	800a80c <_svfiprintf_r+0xa0>
 800a866:	9b03      	ldr	r3, [sp, #12]
 800a868:	1d19      	adds	r1, r3, #4
 800a86a:	681b      	ldr	r3, [r3, #0]
 800a86c:	9103      	str	r1, [sp, #12]
 800a86e:	2b00      	cmp	r3, #0
 800a870:	bfbb      	ittet	lt
 800a872:	425b      	neglt	r3, r3
 800a874:	f042 0202 	orrlt.w	r2, r2, #2
 800a878:	9307      	strge	r3, [sp, #28]
 800a87a:	9307      	strlt	r3, [sp, #28]
 800a87c:	bfb8      	it	lt
 800a87e:	9204      	strlt	r2, [sp, #16]
 800a880:	7823      	ldrb	r3, [r4, #0]
 800a882:	2b2e      	cmp	r3, #46	@ 0x2e
 800a884:	d10a      	bne.n	800a89c <_svfiprintf_r+0x130>
 800a886:	7863      	ldrb	r3, [r4, #1]
 800a888:	2b2a      	cmp	r3, #42	@ 0x2a
 800a88a:	d132      	bne.n	800a8f2 <_svfiprintf_r+0x186>
 800a88c:	9b03      	ldr	r3, [sp, #12]
 800a88e:	1d1a      	adds	r2, r3, #4
 800a890:	681b      	ldr	r3, [r3, #0]
 800a892:	9203      	str	r2, [sp, #12]
 800a894:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a898:	3402      	adds	r4, #2
 800a89a:	9305      	str	r3, [sp, #20]
 800a89c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 800a960 <_svfiprintf_r+0x1f4>
 800a8a0:	7821      	ldrb	r1, [r4, #0]
 800a8a2:	2203      	movs	r2, #3
 800a8a4:	4650      	mov	r0, sl
 800a8a6:	f7f5 fc9b 	bl	80001e0 <memchr>
 800a8aa:	b138      	cbz	r0, 800a8bc <_svfiprintf_r+0x150>
 800a8ac:	9b04      	ldr	r3, [sp, #16]
 800a8ae:	eba0 000a 	sub.w	r0, r0, sl
 800a8b2:	2240      	movs	r2, #64	@ 0x40
 800a8b4:	4082      	lsls	r2, r0
 800a8b6:	4313      	orrs	r3, r2
 800a8b8:	3401      	adds	r4, #1
 800a8ba:	9304      	str	r3, [sp, #16]
 800a8bc:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a8c0:	4824      	ldr	r0, [pc, #144]	@ (800a954 <_svfiprintf_r+0x1e8>)
 800a8c2:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a8c6:	2206      	movs	r2, #6
 800a8c8:	f7f5 fc8a 	bl	80001e0 <memchr>
 800a8cc:	2800      	cmp	r0, #0
 800a8ce:	d036      	beq.n	800a93e <_svfiprintf_r+0x1d2>
 800a8d0:	4b21      	ldr	r3, [pc, #132]	@ (800a958 <_svfiprintf_r+0x1ec>)
 800a8d2:	bb1b      	cbnz	r3, 800a91c <_svfiprintf_r+0x1b0>
 800a8d4:	9b03      	ldr	r3, [sp, #12]
 800a8d6:	3307      	adds	r3, #7
 800a8d8:	f023 0307 	bic.w	r3, r3, #7
 800a8dc:	3308      	adds	r3, #8
 800a8de:	9303      	str	r3, [sp, #12]
 800a8e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a8e2:	4433      	add	r3, r6
 800a8e4:	9309      	str	r3, [sp, #36]	@ 0x24
 800a8e6:	e76a      	b.n	800a7be <_svfiprintf_r+0x52>
 800a8e8:	fb0c 3202 	mla	r2, ip, r2, r3
 800a8ec:	460c      	mov	r4, r1
 800a8ee:	2001      	movs	r0, #1
 800a8f0:	e7a8      	b.n	800a844 <_svfiprintf_r+0xd8>
 800a8f2:	2300      	movs	r3, #0
 800a8f4:	3401      	adds	r4, #1
 800a8f6:	9305      	str	r3, [sp, #20]
 800a8f8:	4619      	mov	r1, r3
 800a8fa:	f04f 0c0a 	mov.w	ip, #10
 800a8fe:	4620      	mov	r0, r4
 800a900:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a904:	3a30      	subs	r2, #48	@ 0x30
 800a906:	2a09      	cmp	r2, #9
 800a908:	d903      	bls.n	800a912 <_svfiprintf_r+0x1a6>
 800a90a:	2b00      	cmp	r3, #0
 800a90c:	d0c6      	beq.n	800a89c <_svfiprintf_r+0x130>
 800a90e:	9105      	str	r1, [sp, #20]
 800a910:	e7c4      	b.n	800a89c <_svfiprintf_r+0x130>
 800a912:	fb0c 2101 	mla	r1, ip, r1, r2
 800a916:	4604      	mov	r4, r0
 800a918:	2301      	movs	r3, #1
 800a91a:	e7f0      	b.n	800a8fe <_svfiprintf_r+0x192>
 800a91c:	ab03      	add	r3, sp, #12
 800a91e:	9300      	str	r3, [sp, #0]
 800a920:	462a      	mov	r2, r5
 800a922:	4b0e      	ldr	r3, [pc, #56]	@ (800a95c <_svfiprintf_r+0x1f0>)
 800a924:	a904      	add	r1, sp, #16
 800a926:	4638      	mov	r0, r7
 800a928:	f7fc fb9c 	bl	8007064 <_printf_float>
 800a92c:	1c42      	adds	r2, r0, #1
 800a92e:	4606      	mov	r6, r0
 800a930:	d1d6      	bne.n	800a8e0 <_svfiprintf_r+0x174>
 800a932:	89ab      	ldrh	r3, [r5, #12]
 800a934:	065b      	lsls	r3, r3, #25
 800a936:	f53f af2d 	bmi.w	800a794 <_svfiprintf_r+0x28>
 800a93a:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a93c:	e72c      	b.n	800a798 <_svfiprintf_r+0x2c>
 800a93e:	ab03      	add	r3, sp, #12
 800a940:	9300      	str	r3, [sp, #0]
 800a942:	462a      	mov	r2, r5
 800a944:	4b05      	ldr	r3, [pc, #20]	@ (800a95c <_svfiprintf_r+0x1f0>)
 800a946:	a904      	add	r1, sp, #16
 800a948:	4638      	mov	r0, r7
 800a94a:	f7fc fe23 	bl	8007594 <_printf_i>
 800a94e:	e7ed      	b.n	800a92c <_svfiprintf_r+0x1c0>
 800a950:	0800bb51 	.word	0x0800bb51
 800a954:	0800bb5b 	.word	0x0800bb5b
 800a958:	08007065 	.word	0x08007065
 800a95c:	0800a6b5 	.word	0x0800a6b5
 800a960:	0800bb57 	.word	0x0800bb57

0800a964 <__sflush_r>:
 800a964:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a968:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a96c:	0716      	lsls	r6, r2, #28
 800a96e:	4605      	mov	r5, r0
 800a970:	460c      	mov	r4, r1
 800a972:	d454      	bmi.n	800aa1e <__sflush_r+0xba>
 800a974:	684b      	ldr	r3, [r1, #4]
 800a976:	2b00      	cmp	r3, #0
 800a978:	dc02      	bgt.n	800a980 <__sflush_r+0x1c>
 800a97a:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	dd48      	ble.n	800aa12 <__sflush_r+0xae>
 800a980:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a982:	2e00      	cmp	r6, #0
 800a984:	d045      	beq.n	800aa12 <__sflush_r+0xae>
 800a986:	2300      	movs	r3, #0
 800a988:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a98c:	682f      	ldr	r7, [r5, #0]
 800a98e:	6a21      	ldr	r1, [r4, #32]
 800a990:	602b      	str	r3, [r5, #0]
 800a992:	d030      	beq.n	800a9f6 <__sflush_r+0x92>
 800a994:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a996:	89a3      	ldrh	r3, [r4, #12]
 800a998:	0759      	lsls	r1, r3, #29
 800a99a:	d505      	bpl.n	800a9a8 <__sflush_r+0x44>
 800a99c:	6863      	ldr	r3, [r4, #4]
 800a99e:	1ad2      	subs	r2, r2, r3
 800a9a0:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a9a2:	b10b      	cbz	r3, 800a9a8 <__sflush_r+0x44>
 800a9a4:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a9a6:	1ad2      	subs	r2, r2, r3
 800a9a8:	2300      	movs	r3, #0
 800a9aa:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a9ac:	6a21      	ldr	r1, [r4, #32]
 800a9ae:	4628      	mov	r0, r5
 800a9b0:	47b0      	blx	r6
 800a9b2:	1c43      	adds	r3, r0, #1
 800a9b4:	89a3      	ldrh	r3, [r4, #12]
 800a9b6:	d106      	bne.n	800a9c6 <__sflush_r+0x62>
 800a9b8:	6829      	ldr	r1, [r5, #0]
 800a9ba:	291d      	cmp	r1, #29
 800a9bc:	d82b      	bhi.n	800aa16 <__sflush_r+0xb2>
 800a9be:	4a2a      	ldr	r2, [pc, #168]	@ (800aa68 <__sflush_r+0x104>)
 800a9c0:	40ca      	lsrs	r2, r1
 800a9c2:	07d6      	lsls	r6, r2, #31
 800a9c4:	d527      	bpl.n	800aa16 <__sflush_r+0xb2>
 800a9c6:	2200      	movs	r2, #0
 800a9c8:	6062      	str	r2, [r4, #4]
 800a9ca:	04d9      	lsls	r1, r3, #19
 800a9cc:	6922      	ldr	r2, [r4, #16]
 800a9ce:	6022      	str	r2, [r4, #0]
 800a9d0:	d504      	bpl.n	800a9dc <__sflush_r+0x78>
 800a9d2:	1c42      	adds	r2, r0, #1
 800a9d4:	d101      	bne.n	800a9da <__sflush_r+0x76>
 800a9d6:	682b      	ldr	r3, [r5, #0]
 800a9d8:	b903      	cbnz	r3, 800a9dc <__sflush_r+0x78>
 800a9da:	6560      	str	r0, [r4, #84]	@ 0x54
 800a9dc:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a9de:	602f      	str	r7, [r5, #0]
 800a9e0:	b1b9      	cbz	r1, 800aa12 <__sflush_r+0xae>
 800a9e2:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a9e6:	4299      	cmp	r1, r3
 800a9e8:	d002      	beq.n	800a9f0 <__sflush_r+0x8c>
 800a9ea:	4628      	mov	r0, r5
 800a9ec:	f7fe fa34 	bl	8008e58 <_free_r>
 800a9f0:	2300      	movs	r3, #0
 800a9f2:	6363      	str	r3, [r4, #52]	@ 0x34
 800a9f4:	e00d      	b.n	800aa12 <__sflush_r+0xae>
 800a9f6:	2301      	movs	r3, #1
 800a9f8:	4628      	mov	r0, r5
 800a9fa:	47b0      	blx	r6
 800a9fc:	4602      	mov	r2, r0
 800a9fe:	1c50      	adds	r0, r2, #1
 800aa00:	d1c9      	bne.n	800a996 <__sflush_r+0x32>
 800aa02:	682b      	ldr	r3, [r5, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d0c6      	beq.n	800a996 <__sflush_r+0x32>
 800aa08:	2b1d      	cmp	r3, #29
 800aa0a:	d001      	beq.n	800aa10 <__sflush_r+0xac>
 800aa0c:	2b16      	cmp	r3, #22
 800aa0e:	d11e      	bne.n	800aa4e <__sflush_r+0xea>
 800aa10:	602f      	str	r7, [r5, #0]
 800aa12:	2000      	movs	r0, #0
 800aa14:	e022      	b.n	800aa5c <__sflush_r+0xf8>
 800aa16:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa1a:	b21b      	sxth	r3, r3
 800aa1c:	e01b      	b.n	800aa56 <__sflush_r+0xf2>
 800aa1e:	690f      	ldr	r7, [r1, #16]
 800aa20:	2f00      	cmp	r7, #0
 800aa22:	d0f6      	beq.n	800aa12 <__sflush_r+0xae>
 800aa24:	0793      	lsls	r3, r2, #30
 800aa26:	680e      	ldr	r6, [r1, #0]
 800aa28:	bf08      	it	eq
 800aa2a:	694b      	ldreq	r3, [r1, #20]
 800aa2c:	600f      	str	r7, [r1, #0]
 800aa2e:	bf18      	it	ne
 800aa30:	2300      	movne	r3, #0
 800aa32:	eba6 0807 	sub.w	r8, r6, r7
 800aa36:	608b      	str	r3, [r1, #8]
 800aa38:	f1b8 0f00 	cmp.w	r8, #0
 800aa3c:	dde9      	ble.n	800aa12 <__sflush_r+0xae>
 800aa3e:	6a21      	ldr	r1, [r4, #32]
 800aa40:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800aa42:	4643      	mov	r3, r8
 800aa44:	463a      	mov	r2, r7
 800aa46:	4628      	mov	r0, r5
 800aa48:	47b0      	blx	r6
 800aa4a:	2800      	cmp	r0, #0
 800aa4c:	dc08      	bgt.n	800aa60 <__sflush_r+0xfc>
 800aa4e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa52:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800aa56:	81a3      	strh	r3, [r4, #12]
 800aa58:	f04f 30ff 	mov.w	r0, #4294967295
 800aa5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800aa60:	4407      	add	r7, r0
 800aa62:	eba8 0800 	sub.w	r8, r8, r0
 800aa66:	e7e7      	b.n	800aa38 <__sflush_r+0xd4>
 800aa68:	20400001 	.word	0x20400001

0800aa6c <_fflush_r>:
 800aa6c:	b538      	push	{r3, r4, r5, lr}
 800aa6e:	690b      	ldr	r3, [r1, #16]
 800aa70:	4605      	mov	r5, r0
 800aa72:	460c      	mov	r4, r1
 800aa74:	b913      	cbnz	r3, 800aa7c <_fflush_r+0x10>
 800aa76:	2500      	movs	r5, #0
 800aa78:	4628      	mov	r0, r5
 800aa7a:	bd38      	pop	{r3, r4, r5, pc}
 800aa7c:	b118      	cbz	r0, 800aa86 <_fflush_r+0x1a>
 800aa7e:	6a03      	ldr	r3, [r0, #32]
 800aa80:	b90b      	cbnz	r3, 800aa86 <_fflush_r+0x1a>
 800aa82:	f7fd f93f 	bl	8007d04 <__sinit>
 800aa86:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800aa8a:	2b00      	cmp	r3, #0
 800aa8c:	d0f3      	beq.n	800aa76 <_fflush_r+0xa>
 800aa8e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800aa90:	07d0      	lsls	r0, r2, #31
 800aa92:	d404      	bmi.n	800aa9e <_fflush_r+0x32>
 800aa94:	0599      	lsls	r1, r3, #22
 800aa96:	d402      	bmi.n	800aa9e <_fflush_r+0x32>
 800aa98:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aa9a:	f7fd fb6e 	bl	800817a <__retarget_lock_acquire_recursive>
 800aa9e:	4628      	mov	r0, r5
 800aaa0:	4621      	mov	r1, r4
 800aaa2:	f7ff ff5f 	bl	800a964 <__sflush_r>
 800aaa6:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800aaa8:	07da      	lsls	r2, r3, #31
 800aaaa:	4605      	mov	r5, r0
 800aaac:	d4e4      	bmi.n	800aa78 <_fflush_r+0xc>
 800aaae:	89a3      	ldrh	r3, [r4, #12]
 800aab0:	059b      	lsls	r3, r3, #22
 800aab2:	d4e1      	bmi.n	800aa78 <_fflush_r+0xc>
 800aab4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800aab6:	f7fd fb61 	bl	800817c <__retarget_lock_release_recursive>
 800aaba:	e7dd      	b.n	800aa78 <_fflush_r+0xc>

0800aabc <__swhatbuf_r>:
 800aabc:	b570      	push	{r4, r5, r6, lr}
 800aabe:	460c      	mov	r4, r1
 800aac0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800aac4:	2900      	cmp	r1, #0
 800aac6:	b096      	sub	sp, #88	@ 0x58
 800aac8:	4615      	mov	r5, r2
 800aaca:	461e      	mov	r6, r3
 800aacc:	da0d      	bge.n	800aaea <__swhatbuf_r+0x2e>
 800aace:	89a3      	ldrh	r3, [r4, #12]
 800aad0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800aad4:	f04f 0100 	mov.w	r1, #0
 800aad8:	bf14      	ite	ne
 800aada:	2340      	movne	r3, #64	@ 0x40
 800aadc:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800aae0:	2000      	movs	r0, #0
 800aae2:	6031      	str	r1, [r6, #0]
 800aae4:	602b      	str	r3, [r5, #0]
 800aae6:	b016      	add	sp, #88	@ 0x58
 800aae8:	bd70      	pop	{r4, r5, r6, pc}
 800aaea:	466a      	mov	r2, sp
 800aaec:	f000 f85a 	bl	800aba4 <_fstat_r>
 800aaf0:	2800      	cmp	r0, #0
 800aaf2:	dbec      	blt.n	800aace <__swhatbuf_r+0x12>
 800aaf4:	9901      	ldr	r1, [sp, #4]
 800aaf6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800aafa:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800aafe:	4259      	negs	r1, r3
 800ab00:	4159      	adcs	r1, r3
 800ab02:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800ab06:	e7eb      	b.n	800aae0 <__swhatbuf_r+0x24>

0800ab08 <__smakebuf_r>:
 800ab08:	898b      	ldrh	r3, [r1, #12]
 800ab0a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800ab0c:	079d      	lsls	r5, r3, #30
 800ab0e:	4606      	mov	r6, r0
 800ab10:	460c      	mov	r4, r1
 800ab12:	d507      	bpl.n	800ab24 <__smakebuf_r+0x1c>
 800ab14:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800ab18:	6023      	str	r3, [r4, #0]
 800ab1a:	6123      	str	r3, [r4, #16]
 800ab1c:	2301      	movs	r3, #1
 800ab1e:	6163      	str	r3, [r4, #20]
 800ab20:	b003      	add	sp, #12
 800ab22:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800ab24:	ab01      	add	r3, sp, #4
 800ab26:	466a      	mov	r2, sp
 800ab28:	f7ff ffc8 	bl	800aabc <__swhatbuf_r>
 800ab2c:	9f00      	ldr	r7, [sp, #0]
 800ab2e:	4605      	mov	r5, r0
 800ab30:	4639      	mov	r1, r7
 800ab32:	4630      	mov	r0, r6
 800ab34:	f7fe fa04 	bl	8008f40 <_malloc_r>
 800ab38:	b948      	cbnz	r0, 800ab4e <__smakebuf_r+0x46>
 800ab3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800ab3e:	059a      	lsls	r2, r3, #22
 800ab40:	d4ee      	bmi.n	800ab20 <__smakebuf_r+0x18>
 800ab42:	f023 0303 	bic.w	r3, r3, #3
 800ab46:	f043 0302 	orr.w	r3, r3, #2
 800ab4a:	81a3      	strh	r3, [r4, #12]
 800ab4c:	e7e2      	b.n	800ab14 <__smakebuf_r+0xc>
 800ab4e:	89a3      	ldrh	r3, [r4, #12]
 800ab50:	6020      	str	r0, [r4, #0]
 800ab52:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800ab56:	81a3      	strh	r3, [r4, #12]
 800ab58:	9b01      	ldr	r3, [sp, #4]
 800ab5a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800ab5e:	b15b      	cbz	r3, 800ab78 <__smakebuf_r+0x70>
 800ab60:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800ab64:	4630      	mov	r0, r6
 800ab66:	f000 f82f 	bl	800abc8 <_isatty_r>
 800ab6a:	b128      	cbz	r0, 800ab78 <__smakebuf_r+0x70>
 800ab6c:	89a3      	ldrh	r3, [r4, #12]
 800ab6e:	f023 0303 	bic.w	r3, r3, #3
 800ab72:	f043 0301 	orr.w	r3, r3, #1
 800ab76:	81a3      	strh	r3, [r4, #12]
 800ab78:	89a3      	ldrh	r3, [r4, #12]
 800ab7a:	431d      	orrs	r5, r3
 800ab7c:	81a5      	strh	r5, [r4, #12]
 800ab7e:	e7cf      	b.n	800ab20 <__smakebuf_r+0x18>

0800ab80 <strncmp>:
 800ab80:	b510      	push	{r4, lr}
 800ab82:	b16a      	cbz	r2, 800aba0 <strncmp+0x20>
 800ab84:	3901      	subs	r1, #1
 800ab86:	1884      	adds	r4, r0, r2
 800ab88:	f810 2b01 	ldrb.w	r2, [r0], #1
 800ab8c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800ab90:	429a      	cmp	r2, r3
 800ab92:	d103      	bne.n	800ab9c <strncmp+0x1c>
 800ab94:	42a0      	cmp	r0, r4
 800ab96:	d001      	beq.n	800ab9c <strncmp+0x1c>
 800ab98:	2a00      	cmp	r2, #0
 800ab9a:	d1f5      	bne.n	800ab88 <strncmp+0x8>
 800ab9c:	1ad0      	subs	r0, r2, r3
 800ab9e:	bd10      	pop	{r4, pc}
 800aba0:	4610      	mov	r0, r2
 800aba2:	e7fc      	b.n	800ab9e <strncmp+0x1e>

0800aba4 <_fstat_r>:
 800aba4:	b538      	push	{r3, r4, r5, lr}
 800aba6:	4d07      	ldr	r5, [pc, #28]	@ (800abc4 <_fstat_r+0x20>)
 800aba8:	2300      	movs	r3, #0
 800abaa:	4604      	mov	r4, r0
 800abac:	4608      	mov	r0, r1
 800abae:	4611      	mov	r1, r2
 800abb0:	602b      	str	r3, [r5, #0]
 800abb2:	f7f7 ff8f 	bl	8002ad4 <_fstat>
 800abb6:	1c43      	adds	r3, r0, #1
 800abb8:	d102      	bne.n	800abc0 <_fstat_r+0x1c>
 800abba:	682b      	ldr	r3, [r5, #0]
 800abbc:	b103      	cbz	r3, 800abc0 <_fstat_r+0x1c>
 800abbe:	6023      	str	r3, [r4, #0]
 800abc0:	bd38      	pop	{r3, r4, r5, pc}
 800abc2:	bf00      	nop
 800abc4:	20000934 	.word	0x20000934

0800abc8 <_isatty_r>:
 800abc8:	b538      	push	{r3, r4, r5, lr}
 800abca:	4d06      	ldr	r5, [pc, #24]	@ (800abe4 <_isatty_r+0x1c>)
 800abcc:	2300      	movs	r3, #0
 800abce:	4604      	mov	r4, r0
 800abd0:	4608      	mov	r0, r1
 800abd2:	602b      	str	r3, [r5, #0]
 800abd4:	f7f7 ff8e 	bl	8002af4 <_isatty>
 800abd8:	1c43      	adds	r3, r0, #1
 800abda:	d102      	bne.n	800abe2 <_isatty_r+0x1a>
 800abdc:	682b      	ldr	r3, [r5, #0]
 800abde:	b103      	cbz	r3, 800abe2 <_isatty_r+0x1a>
 800abe0:	6023      	str	r3, [r4, #0]
 800abe2:	bd38      	pop	{r3, r4, r5, pc}
 800abe4:	20000934 	.word	0x20000934

0800abe8 <_sbrk_r>:
 800abe8:	b538      	push	{r3, r4, r5, lr}
 800abea:	4d06      	ldr	r5, [pc, #24]	@ (800ac04 <_sbrk_r+0x1c>)
 800abec:	2300      	movs	r3, #0
 800abee:	4604      	mov	r4, r0
 800abf0:	4608      	mov	r0, r1
 800abf2:	602b      	str	r3, [r5, #0]
 800abf4:	f7f7 ff96 	bl	8002b24 <_sbrk>
 800abf8:	1c43      	adds	r3, r0, #1
 800abfa:	d102      	bne.n	800ac02 <_sbrk_r+0x1a>
 800abfc:	682b      	ldr	r3, [r5, #0]
 800abfe:	b103      	cbz	r3, 800ac02 <_sbrk_r+0x1a>
 800ac00:	6023      	str	r3, [r4, #0]
 800ac02:	bd38      	pop	{r3, r4, r5, pc}
 800ac04:	20000934 	.word	0x20000934

0800ac08 <nan>:
 800ac08:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800ac10 <nan+0x8>
 800ac0c:	4770      	bx	lr
 800ac0e:	bf00      	nop
 800ac10:	00000000 	.word	0x00000000
 800ac14:	7ff80000 	.word	0x7ff80000

0800ac18 <__assert_func>:
 800ac18:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800ac1a:	4614      	mov	r4, r2
 800ac1c:	461a      	mov	r2, r3
 800ac1e:	4b09      	ldr	r3, [pc, #36]	@ (800ac44 <__assert_func+0x2c>)
 800ac20:	681b      	ldr	r3, [r3, #0]
 800ac22:	4605      	mov	r5, r0
 800ac24:	68d8      	ldr	r0, [r3, #12]
 800ac26:	b14c      	cbz	r4, 800ac3c <__assert_func+0x24>
 800ac28:	4b07      	ldr	r3, [pc, #28]	@ (800ac48 <__assert_func+0x30>)
 800ac2a:	9100      	str	r1, [sp, #0]
 800ac2c:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800ac30:	4906      	ldr	r1, [pc, #24]	@ (800ac4c <__assert_func+0x34>)
 800ac32:	462b      	mov	r3, r5
 800ac34:	f000 fba8 	bl	800b388 <fiprintf>
 800ac38:	f000 fbb8 	bl	800b3ac <abort>
 800ac3c:	4b04      	ldr	r3, [pc, #16]	@ (800ac50 <__assert_func+0x38>)
 800ac3e:	461c      	mov	r4, r3
 800ac40:	e7f3      	b.n	800ac2a <__assert_func+0x12>
 800ac42:	bf00      	nop
 800ac44:	20000034 	.word	0x20000034
 800ac48:	0800bb6a 	.word	0x0800bb6a
 800ac4c:	0800bb77 	.word	0x0800bb77
 800ac50:	0800bba5 	.word	0x0800bba5

0800ac54 <_calloc_r>:
 800ac54:	b570      	push	{r4, r5, r6, lr}
 800ac56:	fba1 5402 	umull	r5, r4, r1, r2
 800ac5a:	b934      	cbnz	r4, 800ac6a <_calloc_r+0x16>
 800ac5c:	4629      	mov	r1, r5
 800ac5e:	f7fe f96f 	bl	8008f40 <_malloc_r>
 800ac62:	4606      	mov	r6, r0
 800ac64:	b928      	cbnz	r0, 800ac72 <_calloc_r+0x1e>
 800ac66:	4630      	mov	r0, r6
 800ac68:	bd70      	pop	{r4, r5, r6, pc}
 800ac6a:	220c      	movs	r2, #12
 800ac6c:	6002      	str	r2, [r0, #0]
 800ac6e:	2600      	movs	r6, #0
 800ac70:	e7f9      	b.n	800ac66 <_calloc_r+0x12>
 800ac72:	462a      	mov	r2, r5
 800ac74:	4621      	mov	r1, r4
 800ac76:	f7fd f9ed 	bl	8008054 <memset>
 800ac7a:	e7f4      	b.n	800ac66 <_calloc_r+0x12>

0800ac7c <rshift>:
 800ac7c:	6903      	ldr	r3, [r0, #16]
 800ac7e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800ac82:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800ac86:	ea4f 1261 	mov.w	r2, r1, asr #5
 800ac8a:	f100 0414 	add.w	r4, r0, #20
 800ac8e:	dd45      	ble.n	800ad1c <rshift+0xa0>
 800ac90:	f011 011f 	ands.w	r1, r1, #31
 800ac94:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800ac98:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800ac9c:	d10c      	bne.n	800acb8 <rshift+0x3c>
 800ac9e:	f100 0710 	add.w	r7, r0, #16
 800aca2:	4629      	mov	r1, r5
 800aca4:	42b1      	cmp	r1, r6
 800aca6:	d334      	bcc.n	800ad12 <rshift+0x96>
 800aca8:	1a9b      	subs	r3, r3, r2
 800acaa:	009b      	lsls	r3, r3, #2
 800acac:	1eea      	subs	r2, r5, #3
 800acae:	4296      	cmp	r6, r2
 800acb0:	bf38      	it	cc
 800acb2:	2300      	movcc	r3, #0
 800acb4:	4423      	add	r3, r4
 800acb6:	e015      	b.n	800ace4 <rshift+0x68>
 800acb8:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800acbc:	f1c1 0820 	rsb	r8, r1, #32
 800acc0:	40cf      	lsrs	r7, r1
 800acc2:	f105 0e04 	add.w	lr, r5, #4
 800acc6:	46a1      	mov	r9, r4
 800acc8:	4576      	cmp	r6, lr
 800acca:	46f4      	mov	ip, lr
 800accc:	d815      	bhi.n	800acfa <rshift+0x7e>
 800acce:	1a9a      	subs	r2, r3, r2
 800acd0:	0092      	lsls	r2, r2, #2
 800acd2:	3a04      	subs	r2, #4
 800acd4:	3501      	adds	r5, #1
 800acd6:	42ae      	cmp	r6, r5
 800acd8:	bf38      	it	cc
 800acda:	2200      	movcc	r2, #0
 800acdc:	18a3      	adds	r3, r4, r2
 800acde:	50a7      	str	r7, [r4, r2]
 800ace0:	b107      	cbz	r7, 800ace4 <rshift+0x68>
 800ace2:	3304      	adds	r3, #4
 800ace4:	1b1a      	subs	r2, r3, r4
 800ace6:	42a3      	cmp	r3, r4
 800ace8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800acec:	bf08      	it	eq
 800acee:	2300      	moveq	r3, #0
 800acf0:	6102      	str	r2, [r0, #16]
 800acf2:	bf08      	it	eq
 800acf4:	6143      	streq	r3, [r0, #20]
 800acf6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800acfa:	f8dc c000 	ldr.w	ip, [ip]
 800acfe:	fa0c fc08 	lsl.w	ip, ip, r8
 800ad02:	ea4c 0707 	orr.w	r7, ip, r7
 800ad06:	f849 7b04 	str.w	r7, [r9], #4
 800ad0a:	f85e 7b04 	ldr.w	r7, [lr], #4
 800ad0e:	40cf      	lsrs	r7, r1
 800ad10:	e7da      	b.n	800acc8 <rshift+0x4c>
 800ad12:	f851 cb04 	ldr.w	ip, [r1], #4
 800ad16:	f847 cf04 	str.w	ip, [r7, #4]!
 800ad1a:	e7c3      	b.n	800aca4 <rshift+0x28>
 800ad1c:	4623      	mov	r3, r4
 800ad1e:	e7e1      	b.n	800ace4 <rshift+0x68>

0800ad20 <__hexdig_fun>:
 800ad20:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800ad24:	2b09      	cmp	r3, #9
 800ad26:	d802      	bhi.n	800ad2e <__hexdig_fun+0xe>
 800ad28:	3820      	subs	r0, #32
 800ad2a:	b2c0      	uxtb	r0, r0
 800ad2c:	4770      	bx	lr
 800ad2e:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800ad32:	2b05      	cmp	r3, #5
 800ad34:	d801      	bhi.n	800ad3a <__hexdig_fun+0x1a>
 800ad36:	3847      	subs	r0, #71	@ 0x47
 800ad38:	e7f7      	b.n	800ad2a <__hexdig_fun+0xa>
 800ad3a:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800ad3e:	2b05      	cmp	r3, #5
 800ad40:	d801      	bhi.n	800ad46 <__hexdig_fun+0x26>
 800ad42:	3827      	subs	r0, #39	@ 0x27
 800ad44:	e7f1      	b.n	800ad2a <__hexdig_fun+0xa>
 800ad46:	2000      	movs	r0, #0
 800ad48:	4770      	bx	lr
	...

0800ad4c <__gethex>:
 800ad4c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800ad50:	b085      	sub	sp, #20
 800ad52:	468a      	mov	sl, r1
 800ad54:	9302      	str	r3, [sp, #8]
 800ad56:	680b      	ldr	r3, [r1, #0]
 800ad58:	9001      	str	r0, [sp, #4]
 800ad5a:	4690      	mov	r8, r2
 800ad5c:	1c9c      	adds	r4, r3, #2
 800ad5e:	46a1      	mov	r9, r4
 800ad60:	f814 0b01 	ldrb.w	r0, [r4], #1
 800ad64:	2830      	cmp	r0, #48	@ 0x30
 800ad66:	d0fa      	beq.n	800ad5e <__gethex+0x12>
 800ad68:	eba9 0303 	sub.w	r3, r9, r3
 800ad6c:	f1a3 0b02 	sub.w	fp, r3, #2
 800ad70:	f7ff ffd6 	bl	800ad20 <__hexdig_fun>
 800ad74:	4605      	mov	r5, r0
 800ad76:	2800      	cmp	r0, #0
 800ad78:	d168      	bne.n	800ae4c <__gethex+0x100>
 800ad7a:	49a0      	ldr	r1, [pc, #640]	@ (800affc <__gethex+0x2b0>)
 800ad7c:	2201      	movs	r2, #1
 800ad7e:	4648      	mov	r0, r9
 800ad80:	f7ff fefe 	bl	800ab80 <strncmp>
 800ad84:	4607      	mov	r7, r0
 800ad86:	2800      	cmp	r0, #0
 800ad88:	d167      	bne.n	800ae5a <__gethex+0x10e>
 800ad8a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800ad8e:	4626      	mov	r6, r4
 800ad90:	f7ff ffc6 	bl	800ad20 <__hexdig_fun>
 800ad94:	2800      	cmp	r0, #0
 800ad96:	d062      	beq.n	800ae5e <__gethex+0x112>
 800ad98:	4623      	mov	r3, r4
 800ad9a:	7818      	ldrb	r0, [r3, #0]
 800ad9c:	2830      	cmp	r0, #48	@ 0x30
 800ad9e:	4699      	mov	r9, r3
 800ada0:	f103 0301 	add.w	r3, r3, #1
 800ada4:	d0f9      	beq.n	800ad9a <__gethex+0x4e>
 800ada6:	f7ff ffbb 	bl	800ad20 <__hexdig_fun>
 800adaa:	fab0 f580 	clz	r5, r0
 800adae:	096d      	lsrs	r5, r5, #5
 800adb0:	f04f 0b01 	mov.w	fp, #1
 800adb4:	464a      	mov	r2, r9
 800adb6:	4616      	mov	r6, r2
 800adb8:	3201      	adds	r2, #1
 800adba:	7830      	ldrb	r0, [r6, #0]
 800adbc:	f7ff ffb0 	bl	800ad20 <__hexdig_fun>
 800adc0:	2800      	cmp	r0, #0
 800adc2:	d1f8      	bne.n	800adb6 <__gethex+0x6a>
 800adc4:	498d      	ldr	r1, [pc, #564]	@ (800affc <__gethex+0x2b0>)
 800adc6:	2201      	movs	r2, #1
 800adc8:	4630      	mov	r0, r6
 800adca:	f7ff fed9 	bl	800ab80 <strncmp>
 800adce:	2800      	cmp	r0, #0
 800add0:	d13f      	bne.n	800ae52 <__gethex+0x106>
 800add2:	b944      	cbnz	r4, 800ade6 <__gethex+0x9a>
 800add4:	1c74      	adds	r4, r6, #1
 800add6:	4622      	mov	r2, r4
 800add8:	4616      	mov	r6, r2
 800adda:	3201      	adds	r2, #1
 800addc:	7830      	ldrb	r0, [r6, #0]
 800adde:	f7ff ff9f 	bl	800ad20 <__hexdig_fun>
 800ade2:	2800      	cmp	r0, #0
 800ade4:	d1f8      	bne.n	800add8 <__gethex+0x8c>
 800ade6:	1ba4      	subs	r4, r4, r6
 800ade8:	00a7      	lsls	r7, r4, #2
 800adea:	7833      	ldrb	r3, [r6, #0]
 800adec:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800adf0:	2b50      	cmp	r3, #80	@ 0x50
 800adf2:	d13e      	bne.n	800ae72 <__gethex+0x126>
 800adf4:	7873      	ldrb	r3, [r6, #1]
 800adf6:	2b2b      	cmp	r3, #43	@ 0x2b
 800adf8:	d033      	beq.n	800ae62 <__gethex+0x116>
 800adfa:	2b2d      	cmp	r3, #45	@ 0x2d
 800adfc:	d034      	beq.n	800ae68 <__gethex+0x11c>
 800adfe:	1c71      	adds	r1, r6, #1
 800ae00:	2400      	movs	r4, #0
 800ae02:	7808      	ldrb	r0, [r1, #0]
 800ae04:	f7ff ff8c 	bl	800ad20 <__hexdig_fun>
 800ae08:	1e43      	subs	r3, r0, #1
 800ae0a:	b2db      	uxtb	r3, r3
 800ae0c:	2b18      	cmp	r3, #24
 800ae0e:	d830      	bhi.n	800ae72 <__gethex+0x126>
 800ae10:	f1a0 0210 	sub.w	r2, r0, #16
 800ae14:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800ae18:	f7ff ff82 	bl	800ad20 <__hexdig_fun>
 800ae1c:	f100 3cff 	add.w	ip, r0, #4294967295
 800ae20:	fa5f fc8c 	uxtb.w	ip, ip
 800ae24:	f1bc 0f18 	cmp.w	ip, #24
 800ae28:	f04f 030a 	mov.w	r3, #10
 800ae2c:	d91e      	bls.n	800ae6c <__gethex+0x120>
 800ae2e:	b104      	cbz	r4, 800ae32 <__gethex+0xe6>
 800ae30:	4252      	negs	r2, r2
 800ae32:	4417      	add	r7, r2
 800ae34:	f8ca 1000 	str.w	r1, [sl]
 800ae38:	b1ed      	cbz	r5, 800ae76 <__gethex+0x12a>
 800ae3a:	f1bb 0f00 	cmp.w	fp, #0
 800ae3e:	bf0c      	ite	eq
 800ae40:	2506      	moveq	r5, #6
 800ae42:	2500      	movne	r5, #0
 800ae44:	4628      	mov	r0, r5
 800ae46:	b005      	add	sp, #20
 800ae48:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ae4c:	2500      	movs	r5, #0
 800ae4e:	462c      	mov	r4, r5
 800ae50:	e7b0      	b.n	800adb4 <__gethex+0x68>
 800ae52:	2c00      	cmp	r4, #0
 800ae54:	d1c7      	bne.n	800ade6 <__gethex+0x9a>
 800ae56:	4627      	mov	r7, r4
 800ae58:	e7c7      	b.n	800adea <__gethex+0x9e>
 800ae5a:	464e      	mov	r6, r9
 800ae5c:	462f      	mov	r7, r5
 800ae5e:	2501      	movs	r5, #1
 800ae60:	e7c3      	b.n	800adea <__gethex+0x9e>
 800ae62:	2400      	movs	r4, #0
 800ae64:	1cb1      	adds	r1, r6, #2
 800ae66:	e7cc      	b.n	800ae02 <__gethex+0xb6>
 800ae68:	2401      	movs	r4, #1
 800ae6a:	e7fb      	b.n	800ae64 <__gethex+0x118>
 800ae6c:	fb03 0002 	mla	r0, r3, r2, r0
 800ae70:	e7ce      	b.n	800ae10 <__gethex+0xc4>
 800ae72:	4631      	mov	r1, r6
 800ae74:	e7de      	b.n	800ae34 <__gethex+0xe8>
 800ae76:	eba6 0309 	sub.w	r3, r6, r9
 800ae7a:	3b01      	subs	r3, #1
 800ae7c:	4629      	mov	r1, r5
 800ae7e:	2b07      	cmp	r3, #7
 800ae80:	dc0a      	bgt.n	800ae98 <__gethex+0x14c>
 800ae82:	9801      	ldr	r0, [sp, #4]
 800ae84:	f7fe f8e8 	bl	8009058 <_Balloc>
 800ae88:	4604      	mov	r4, r0
 800ae8a:	b940      	cbnz	r0, 800ae9e <__gethex+0x152>
 800ae8c:	4b5c      	ldr	r3, [pc, #368]	@ (800b000 <__gethex+0x2b4>)
 800ae8e:	4602      	mov	r2, r0
 800ae90:	21e4      	movs	r1, #228	@ 0xe4
 800ae92:	485c      	ldr	r0, [pc, #368]	@ (800b004 <__gethex+0x2b8>)
 800ae94:	f7ff fec0 	bl	800ac18 <__assert_func>
 800ae98:	3101      	adds	r1, #1
 800ae9a:	105b      	asrs	r3, r3, #1
 800ae9c:	e7ef      	b.n	800ae7e <__gethex+0x132>
 800ae9e:	f100 0a14 	add.w	sl, r0, #20
 800aea2:	2300      	movs	r3, #0
 800aea4:	4655      	mov	r5, sl
 800aea6:	469b      	mov	fp, r3
 800aea8:	45b1      	cmp	r9, r6
 800aeaa:	d337      	bcc.n	800af1c <__gethex+0x1d0>
 800aeac:	f845 bb04 	str.w	fp, [r5], #4
 800aeb0:	eba5 050a 	sub.w	r5, r5, sl
 800aeb4:	10ad      	asrs	r5, r5, #2
 800aeb6:	6125      	str	r5, [r4, #16]
 800aeb8:	4658      	mov	r0, fp
 800aeba:	f7fe f9bf 	bl	800923c <__hi0bits>
 800aebe:	016d      	lsls	r5, r5, #5
 800aec0:	f8d8 6000 	ldr.w	r6, [r8]
 800aec4:	1a2d      	subs	r5, r5, r0
 800aec6:	42b5      	cmp	r5, r6
 800aec8:	dd54      	ble.n	800af74 <__gethex+0x228>
 800aeca:	1bad      	subs	r5, r5, r6
 800aecc:	4629      	mov	r1, r5
 800aece:	4620      	mov	r0, r4
 800aed0:	f7fe fd4b 	bl	800996a <__any_on>
 800aed4:	4681      	mov	r9, r0
 800aed6:	b178      	cbz	r0, 800aef8 <__gethex+0x1ac>
 800aed8:	1e6b      	subs	r3, r5, #1
 800aeda:	1159      	asrs	r1, r3, #5
 800aedc:	f003 021f 	and.w	r2, r3, #31
 800aee0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800aee4:	f04f 0901 	mov.w	r9, #1
 800aee8:	fa09 f202 	lsl.w	r2, r9, r2
 800aeec:	420a      	tst	r2, r1
 800aeee:	d003      	beq.n	800aef8 <__gethex+0x1ac>
 800aef0:	454b      	cmp	r3, r9
 800aef2:	dc36      	bgt.n	800af62 <__gethex+0x216>
 800aef4:	f04f 0902 	mov.w	r9, #2
 800aef8:	4629      	mov	r1, r5
 800aefa:	4620      	mov	r0, r4
 800aefc:	f7ff febe 	bl	800ac7c <rshift>
 800af00:	442f      	add	r7, r5
 800af02:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800af06:	42bb      	cmp	r3, r7
 800af08:	da42      	bge.n	800af90 <__gethex+0x244>
 800af0a:	9801      	ldr	r0, [sp, #4]
 800af0c:	4621      	mov	r1, r4
 800af0e:	f7fe f8e3 	bl	80090d8 <_Bfree>
 800af12:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800af14:	2300      	movs	r3, #0
 800af16:	6013      	str	r3, [r2, #0]
 800af18:	25a3      	movs	r5, #163	@ 0xa3
 800af1a:	e793      	b.n	800ae44 <__gethex+0xf8>
 800af1c:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800af20:	2a2e      	cmp	r2, #46	@ 0x2e
 800af22:	d012      	beq.n	800af4a <__gethex+0x1fe>
 800af24:	2b20      	cmp	r3, #32
 800af26:	d104      	bne.n	800af32 <__gethex+0x1e6>
 800af28:	f845 bb04 	str.w	fp, [r5], #4
 800af2c:	f04f 0b00 	mov.w	fp, #0
 800af30:	465b      	mov	r3, fp
 800af32:	7830      	ldrb	r0, [r6, #0]
 800af34:	9303      	str	r3, [sp, #12]
 800af36:	f7ff fef3 	bl	800ad20 <__hexdig_fun>
 800af3a:	9b03      	ldr	r3, [sp, #12]
 800af3c:	f000 000f 	and.w	r0, r0, #15
 800af40:	4098      	lsls	r0, r3
 800af42:	ea4b 0b00 	orr.w	fp, fp, r0
 800af46:	3304      	adds	r3, #4
 800af48:	e7ae      	b.n	800aea8 <__gethex+0x15c>
 800af4a:	45b1      	cmp	r9, r6
 800af4c:	d8ea      	bhi.n	800af24 <__gethex+0x1d8>
 800af4e:	492b      	ldr	r1, [pc, #172]	@ (800affc <__gethex+0x2b0>)
 800af50:	9303      	str	r3, [sp, #12]
 800af52:	2201      	movs	r2, #1
 800af54:	4630      	mov	r0, r6
 800af56:	f7ff fe13 	bl	800ab80 <strncmp>
 800af5a:	9b03      	ldr	r3, [sp, #12]
 800af5c:	2800      	cmp	r0, #0
 800af5e:	d1e1      	bne.n	800af24 <__gethex+0x1d8>
 800af60:	e7a2      	b.n	800aea8 <__gethex+0x15c>
 800af62:	1ea9      	subs	r1, r5, #2
 800af64:	4620      	mov	r0, r4
 800af66:	f7fe fd00 	bl	800996a <__any_on>
 800af6a:	2800      	cmp	r0, #0
 800af6c:	d0c2      	beq.n	800aef4 <__gethex+0x1a8>
 800af6e:	f04f 0903 	mov.w	r9, #3
 800af72:	e7c1      	b.n	800aef8 <__gethex+0x1ac>
 800af74:	da09      	bge.n	800af8a <__gethex+0x23e>
 800af76:	1b75      	subs	r5, r6, r5
 800af78:	4621      	mov	r1, r4
 800af7a:	9801      	ldr	r0, [sp, #4]
 800af7c:	462a      	mov	r2, r5
 800af7e:	f7fe fabb 	bl	80094f8 <__lshift>
 800af82:	1b7f      	subs	r7, r7, r5
 800af84:	4604      	mov	r4, r0
 800af86:	f100 0a14 	add.w	sl, r0, #20
 800af8a:	f04f 0900 	mov.w	r9, #0
 800af8e:	e7b8      	b.n	800af02 <__gethex+0x1b6>
 800af90:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800af94:	42bd      	cmp	r5, r7
 800af96:	dd6f      	ble.n	800b078 <__gethex+0x32c>
 800af98:	1bed      	subs	r5, r5, r7
 800af9a:	42ae      	cmp	r6, r5
 800af9c:	dc34      	bgt.n	800b008 <__gethex+0x2bc>
 800af9e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800afa2:	2b02      	cmp	r3, #2
 800afa4:	d022      	beq.n	800afec <__gethex+0x2a0>
 800afa6:	2b03      	cmp	r3, #3
 800afa8:	d024      	beq.n	800aff4 <__gethex+0x2a8>
 800afaa:	2b01      	cmp	r3, #1
 800afac:	d115      	bne.n	800afda <__gethex+0x28e>
 800afae:	42ae      	cmp	r6, r5
 800afb0:	d113      	bne.n	800afda <__gethex+0x28e>
 800afb2:	2e01      	cmp	r6, #1
 800afb4:	d10b      	bne.n	800afce <__gethex+0x282>
 800afb6:	9a02      	ldr	r2, [sp, #8]
 800afb8:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800afbc:	6013      	str	r3, [r2, #0]
 800afbe:	2301      	movs	r3, #1
 800afc0:	6123      	str	r3, [r4, #16]
 800afc2:	f8ca 3000 	str.w	r3, [sl]
 800afc6:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800afc8:	2562      	movs	r5, #98	@ 0x62
 800afca:	601c      	str	r4, [r3, #0]
 800afcc:	e73a      	b.n	800ae44 <__gethex+0xf8>
 800afce:	1e71      	subs	r1, r6, #1
 800afd0:	4620      	mov	r0, r4
 800afd2:	f7fe fcca 	bl	800996a <__any_on>
 800afd6:	2800      	cmp	r0, #0
 800afd8:	d1ed      	bne.n	800afb6 <__gethex+0x26a>
 800afda:	9801      	ldr	r0, [sp, #4]
 800afdc:	4621      	mov	r1, r4
 800afde:	f7fe f87b 	bl	80090d8 <_Bfree>
 800afe2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800afe4:	2300      	movs	r3, #0
 800afe6:	6013      	str	r3, [r2, #0]
 800afe8:	2550      	movs	r5, #80	@ 0x50
 800afea:	e72b      	b.n	800ae44 <__gethex+0xf8>
 800afec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800afee:	2b00      	cmp	r3, #0
 800aff0:	d1f3      	bne.n	800afda <__gethex+0x28e>
 800aff2:	e7e0      	b.n	800afb6 <__gethex+0x26a>
 800aff4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800aff6:	2b00      	cmp	r3, #0
 800aff8:	d1dd      	bne.n	800afb6 <__gethex+0x26a>
 800affa:	e7ee      	b.n	800afda <__gethex+0x28e>
 800affc:	0800bb4f 	.word	0x0800bb4f
 800b000:	0800bae5 	.word	0x0800bae5
 800b004:	0800bba6 	.word	0x0800bba6
 800b008:	1e6f      	subs	r7, r5, #1
 800b00a:	f1b9 0f00 	cmp.w	r9, #0
 800b00e:	d130      	bne.n	800b072 <__gethex+0x326>
 800b010:	b127      	cbz	r7, 800b01c <__gethex+0x2d0>
 800b012:	4639      	mov	r1, r7
 800b014:	4620      	mov	r0, r4
 800b016:	f7fe fca8 	bl	800996a <__any_on>
 800b01a:	4681      	mov	r9, r0
 800b01c:	117a      	asrs	r2, r7, #5
 800b01e:	2301      	movs	r3, #1
 800b020:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800b024:	f007 071f 	and.w	r7, r7, #31
 800b028:	40bb      	lsls	r3, r7
 800b02a:	4213      	tst	r3, r2
 800b02c:	4629      	mov	r1, r5
 800b02e:	4620      	mov	r0, r4
 800b030:	bf18      	it	ne
 800b032:	f049 0902 	orrne.w	r9, r9, #2
 800b036:	f7ff fe21 	bl	800ac7c <rshift>
 800b03a:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800b03e:	1b76      	subs	r6, r6, r5
 800b040:	2502      	movs	r5, #2
 800b042:	f1b9 0f00 	cmp.w	r9, #0
 800b046:	d047      	beq.n	800b0d8 <__gethex+0x38c>
 800b048:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800b04c:	2b02      	cmp	r3, #2
 800b04e:	d015      	beq.n	800b07c <__gethex+0x330>
 800b050:	2b03      	cmp	r3, #3
 800b052:	d017      	beq.n	800b084 <__gethex+0x338>
 800b054:	2b01      	cmp	r3, #1
 800b056:	d109      	bne.n	800b06c <__gethex+0x320>
 800b058:	f019 0f02 	tst.w	r9, #2
 800b05c:	d006      	beq.n	800b06c <__gethex+0x320>
 800b05e:	f8da 3000 	ldr.w	r3, [sl]
 800b062:	ea49 0903 	orr.w	r9, r9, r3
 800b066:	f019 0f01 	tst.w	r9, #1
 800b06a:	d10e      	bne.n	800b08a <__gethex+0x33e>
 800b06c:	f045 0510 	orr.w	r5, r5, #16
 800b070:	e032      	b.n	800b0d8 <__gethex+0x38c>
 800b072:	f04f 0901 	mov.w	r9, #1
 800b076:	e7d1      	b.n	800b01c <__gethex+0x2d0>
 800b078:	2501      	movs	r5, #1
 800b07a:	e7e2      	b.n	800b042 <__gethex+0x2f6>
 800b07c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b07e:	f1c3 0301 	rsb	r3, r3, #1
 800b082:	930f      	str	r3, [sp, #60]	@ 0x3c
 800b084:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800b086:	2b00      	cmp	r3, #0
 800b088:	d0f0      	beq.n	800b06c <__gethex+0x320>
 800b08a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800b08e:	f104 0314 	add.w	r3, r4, #20
 800b092:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800b096:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800b09a:	f04f 0c00 	mov.w	ip, #0
 800b09e:	4618      	mov	r0, r3
 800b0a0:	f853 2b04 	ldr.w	r2, [r3], #4
 800b0a4:	f1b2 3fff 	cmp.w	r2, #4294967295
 800b0a8:	d01b      	beq.n	800b0e2 <__gethex+0x396>
 800b0aa:	3201      	adds	r2, #1
 800b0ac:	6002      	str	r2, [r0, #0]
 800b0ae:	2d02      	cmp	r5, #2
 800b0b0:	f104 0314 	add.w	r3, r4, #20
 800b0b4:	d13c      	bne.n	800b130 <__gethex+0x3e4>
 800b0b6:	f8d8 2000 	ldr.w	r2, [r8]
 800b0ba:	3a01      	subs	r2, #1
 800b0bc:	42b2      	cmp	r2, r6
 800b0be:	d109      	bne.n	800b0d4 <__gethex+0x388>
 800b0c0:	1171      	asrs	r1, r6, #5
 800b0c2:	2201      	movs	r2, #1
 800b0c4:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800b0c8:	f006 061f 	and.w	r6, r6, #31
 800b0cc:	fa02 f606 	lsl.w	r6, r2, r6
 800b0d0:	421e      	tst	r6, r3
 800b0d2:	d13a      	bne.n	800b14a <__gethex+0x3fe>
 800b0d4:	f045 0520 	orr.w	r5, r5, #32
 800b0d8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800b0da:	601c      	str	r4, [r3, #0]
 800b0dc:	9b02      	ldr	r3, [sp, #8]
 800b0de:	601f      	str	r7, [r3, #0]
 800b0e0:	e6b0      	b.n	800ae44 <__gethex+0xf8>
 800b0e2:	4299      	cmp	r1, r3
 800b0e4:	f843 cc04 	str.w	ip, [r3, #-4]
 800b0e8:	d8d9      	bhi.n	800b09e <__gethex+0x352>
 800b0ea:	68a3      	ldr	r3, [r4, #8]
 800b0ec:	459b      	cmp	fp, r3
 800b0ee:	db17      	blt.n	800b120 <__gethex+0x3d4>
 800b0f0:	6861      	ldr	r1, [r4, #4]
 800b0f2:	9801      	ldr	r0, [sp, #4]
 800b0f4:	3101      	adds	r1, #1
 800b0f6:	f7fd ffaf 	bl	8009058 <_Balloc>
 800b0fa:	4681      	mov	r9, r0
 800b0fc:	b918      	cbnz	r0, 800b106 <__gethex+0x3ba>
 800b0fe:	4b1a      	ldr	r3, [pc, #104]	@ (800b168 <__gethex+0x41c>)
 800b100:	4602      	mov	r2, r0
 800b102:	2184      	movs	r1, #132	@ 0x84
 800b104:	e6c5      	b.n	800ae92 <__gethex+0x146>
 800b106:	6922      	ldr	r2, [r4, #16]
 800b108:	3202      	adds	r2, #2
 800b10a:	f104 010c 	add.w	r1, r4, #12
 800b10e:	0092      	lsls	r2, r2, #2
 800b110:	300c      	adds	r0, #12
 800b112:	f7fd f834 	bl	800817e <memcpy>
 800b116:	4621      	mov	r1, r4
 800b118:	9801      	ldr	r0, [sp, #4]
 800b11a:	f7fd ffdd 	bl	80090d8 <_Bfree>
 800b11e:	464c      	mov	r4, r9
 800b120:	6923      	ldr	r3, [r4, #16]
 800b122:	1c5a      	adds	r2, r3, #1
 800b124:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800b128:	6122      	str	r2, [r4, #16]
 800b12a:	2201      	movs	r2, #1
 800b12c:	615a      	str	r2, [r3, #20]
 800b12e:	e7be      	b.n	800b0ae <__gethex+0x362>
 800b130:	6922      	ldr	r2, [r4, #16]
 800b132:	455a      	cmp	r2, fp
 800b134:	dd0b      	ble.n	800b14e <__gethex+0x402>
 800b136:	2101      	movs	r1, #1
 800b138:	4620      	mov	r0, r4
 800b13a:	f7ff fd9f 	bl	800ac7c <rshift>
 800b13e:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800b142:	3701      	adds	r7, #1
 800b144:	42bb      	cmp	r3, r7
 800b146:	f6ff aee0 	blt.w	800af0a <__gethex+0x1be>
 800b14a:	2501      	movs	r5, #1
 800b14c:	e7c2      	b.n	800b0d4 <__gethex+0x388>
 800b14e:	f016 061f 	ands.w	r6, r6, #31
 800b152:	d0fa      	beq.n	800b14a <__gethex+0x3fe>
 800b154:	4453      	add	r3, sl
 800b156:	f1c6 0620 	rsb	r6, r6, #32
 800b15a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800b15e:	f7fe f86d 	bl	800923c <__hi0bits>
 800b162:	42b0      	cmp	r0, r6
 800b164:	dbe7      	blt.n	800b136 <__gethex+0x3ea>
 800b166:	e7f0      	b.n	800b14a <__gethex+0x3fe>
 800b168:	0800bae5 	.word	0x0800bae5

0800b16c <L_shift>:
 800b16c:	f1c2 0208 	rsb	r2, r2, #8
 800b170:	0092      	lsls	r2, r2, #2
 800b172:	b570      	push	{r4, r5, r6, lr}
 800b174:	f1c2 0620 	rsb	r6, r2, #32
 800b178:	6843      	ldr	r3, [r0, #4]
 800b17a:	6804      	ldr	r4, [r0, #0]
 800b17c:	fa03 f506 	lsl.w	r5, r3, r6
 800b180:	432c      	orrs	r4, r5
 800b182:	40d3      	lsrs	r3, r2
 800b184:	6004      	str	r4, [r0, #0]
 800b186:	f840 3f04 	str.w	r3, [r0, #4]!
 800b18a:	4288      	cmp	r0, r1
 800b18c:	d3f4      	bcc.n	800b178 <L_shift+0xc>
 800b18e:	bd70      	pop	{r4, r5, r6, pc}

0800b190 <__match>:
 800b190:	b530      	push	{r4, r5, lr}
 800b192:	6803      	ldr	r3, [r0, #0]
 800b194:	3301      	adds	r3, #1
 800b196:	f811 4b01 	ldrb.w	r4, [r1], #1
 800b19a:	b914      	cbnz	r4, 800b1a2 <__match+0x12>
 800b19c:	6003      	str	r3, [r0, #0]
 800b19e:	2001      	movs	r0, #1
 800b1a0:	bd30      	pop	{r4, r5, pc}
 800b1a2:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b1a6:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800b1aa:	2d19      	cmp	r5, #25
 800b1ac:	bf98      	it	ls
 800b1ae:	3220      	addls	r2, #32
 800b1b0:	42a2      	cmp	r2, r4
 800b1b2:	d0f0      	beq.n	800b196 <__match+0x6>
 800b1b4:	2000      	movs	r0, #0
 800b1b6:	e7f3      	b.n	800b1a0 <__match+0x10>

0800b1b8 <__hexnan>:
 800b1b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b1bc:	680b      	ldr	r3, [r1, #0]
 800b1be:	6801      	ldr	r1, [r0, #0]
 800b1c0:	115e      	asrs	r6, r3, #5
 800b1c2:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800b1c6:	f013 031f 	ands.w	r3, r3, #31
 800b1ca:	b087      	sub	sp, #28
 800b1cc:	bf18      	it	ne
 800b1ce:	3604      	addne	r6, #4
 800b1d0:	2500      	movs	r5, #0
 800b1d2:	1f37      	subs	r7, r6, #4
 800b1d4:	4682      	mov	sl, r0
 800b1d6:	4690      	mov	r8, r2
 800b1d8:	9301      	str	r3, [sp, #4]
 800b1da:	f846 5c04 	str.w	r5, [r6, #-4]
 800b1de:	46b9      	mov	r9, r7
 800b1e0:	463c      	mov	r4, r7
 800b1e2:	9502      	str	r5, [sp, #8]
 800b1e4:	46ab      	mov	fp, r5
 800b1e6:	784a      	ldrb	r2, [r1, #1]
 800b1e8:	1c4b      	adds	r3, r1, #1
 800b1ea:	9303      	str	r3, [sp, #12]
 800b1ec:	b342      	cbz	r2, 800b240 <__hexnan+0x88>
 800b1ee:	4610      	mov	r0, r2
 800b1f0:	9105      	str	r1, [sp, #20]
 800b1f2:	9204      	str	r2, [sp, #16]
 800b1f4:	f7ff fd94 	bl	800ad20 <__hexdig_fun>
 800b1f8:	2800      	cmp	r0, #0
 800b1fa:	d151      	bne.n	800b2a0 <__hexnan+0xe8>
 800b1fc:	9a04      	ldr	r2, [sp, #16]
 800b1fe:	9905      	ldr	r1, [sp, #20]
 800b200:	2a20      	cmp	r2, #32
 800b202:	d818      	bhi.n	800b236 <__hexnan+0x7e>
 800b204:	9b02      	ldr	r3, [sp, #8]
 800b206:	459b      	cmp	fp, r3
 800b208:	dd13      	ble.n	800b232 <__hexnan+0x7a>
 800b20a:	454c      	cmp	r4, r9
 800b20c:	d206      	bcs.n	800b21c <__hexnan+0x64>
 800b20e:	2d07      	cmp	r5, #7
 800b210:	dc04      	bgt.n	800b21c <__hexnan+0x64>
 800b212:	462a      	mov	r2, r5
 800b214:	4649      	mov	r1, r9
 800b216:	4620      	mov	r0, r4
 800b218:	f7ff ffa8 	bl	800b16c <L_shift>
 800b21c:	4544      	cmp	r4, r8
 800b21e:	d952      	bls.n	800b2c6 <__hexnan+0x10e>
 800b220:	2300      	movs	r3, #0
 800b222:	f1a4 0904 	sub.w	r9, r4, #4
 800b226:	f844 3c04 	str.w	r3, [r4, #-4]
 800b22a:	f8cd b008 	str.w	fp, [sp, #8]
 800b22e:	464c      	mov	r4, r9
 800b230:	461d      	mov	r5, r3
 800b232:	9903      	ldr	r1, [sp, #12]
 800b234:	e7d7      	b.n	800b1e6 <__hexnan+0x2e>
 800b236:	2a29      	cmp	r2, #41	@ 0x29
 800b238:	d157      	bne.n	800b2ea <__hexnan+0x132>
 800b23a:	3102      	adds	r1, #2
 800b23c:	f8ca 1000 	str.w	r1, [sl]
 800b240:	f1bb 0f00 	cmp.w	fp, #0
 800b244:	d051      	beq.n	800b2ea <__hexnan+0x132>
 800b246:	454c      	cmp	r4, r9
 800b248:	d206      	bcs.n	800b258 <__hexnan+0xa0>
 800b24a:	2d07      	cmp	r5, #7
 800b24c:	dc04      	bgt.n	800b258 <__hexnan+0xa0>
 800b24e:	462a      	mov	r2, r5
 800b250:	4649      	mov	r1, r9
 800b252:	4620      	mov	r0, r4
 800b254:	f7ff ff8a 	bl	800b16c <L_shift>
 800b258:	4544      	cmp	r4, r8
 800b25a:	d936      	bls.n	800b2ca <__hexnan+0x112>
 800b25c:	f1a8 0204 	sub.w	r2, r8, #4
 800b260:	4623      	mov	r3, r4
 800b262:	f853 1b04 	ldr.w	r1, [r3], #4
 800b266:	f842 1f04 	str.w	r1, [r2, #4]!
 800b26a:	429f      	cmp	r7, r3
 800b26c:	d2f9      	bcs.n	800b262 <__hexnan+0xaa>
 800b26e:	1b3b      	subs	r3, r7, r4
 800b270:	f023 0303 	bic.w	r3, r3, #3
 800b274:	3304      	adds	r3, #4
 800b276:	3401      	adds	r4, #1
 800b278:	3e03      	subs	r6, #3
 800b27a:	42b4      	cmp	r4, r6
 800b27c:	bf88      	it	hi
 800b27e:	2304      	movhi	r3, #4
 800b280:	4443      	add	r3, r8
 800b282:	2200      	movs	r2, #0
 800b284:	f843 2b04 	str.w	r2, [r3], #4
 800b288:	429f      	cmp	r7, r3
 800b28a:	d2fb      	bcs.n	800b284 <__hexnan+0xcc>
 800b28c:	683b      	ldr	r3, [r7, #0]
 800b28e:	b91b      	cbnz	r3, 800b298 <__hexnan+0xe0>
 800b290:	4547      	cmp	r7, r8
 800b292:	d128      	bne.n	800b2e6 <__hexnan+0x12e>
 800b294:	2301      	movs	r3, #1
 800b296:	603b      	str	r3, [r7, #0]
 800b298:	2005      	movs	r0, #5
 800b29a:	b007      	add	sp, #28
 800b29c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b2a0:	3501      	adds	r5, #1
 800b2a2:	2d08      	cmp	r5, #8
 800b2a4:	f10b 0b01 	add.w	fp, fp, #1
 800b2a8:	dd06      	ble.n	800b2b8 <__hexnan+0x100>
 800b2aa:	4544      	cmp	r4, r8
 800b2ac:	d9c1      	bls.n	800b232 <__hexnan+0x7a>
 800b2ae:	2300      	movs	r3, #0
 800b2b0:	f844 3c04 	str.w	r3, [r4, #-4]
 800b2b4:	2501      	movs	r5, #1
 800b2b6:	3c04      	subs	r4, #4
 800b2b8:	6822      	ldr	r2, [r4, #0]
 800b2ba:	f000 000f 	and.w	r0, r0, #15
 800b2be:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800b2c2:	6020      	str	r0, [r4, #0]
 800b2c4:	e7b5      	b.n	800b232 <__hexnan+0x7a>
 800b2c6:	2508      	movs	r5, #8
 800b2c8:	e7b3      	b.n	800b232 <__hexnan+0x7a>
 800b2ca:	9b01      	ldr	r3, [sp, #4]
 800b2cc:	2b00      	cmp	r3, #0
 800b2ce:	d0dd      	beq.n	800b28c <__hexnan+0xd4>
 800b2d0:	f1c3 0320 	rsb	r3, r3, #32
 800b2d4:	f04f 32ff 	mov.w	r2, #4294967295
 800b2d8:	40da      	lsrs	r2, r3
 800b2da:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800b2de:	4013      	ands	r3, r2
 800b2e0:	f846 3c04 	str.w	r3, [r6, #-4]
 800b2e4:	e7d2      	b.n	800b28c <__hexnan+0xd4>
 800b2e6:	3f04      	subs	r7, #4
 800b2e8:	e7d0      	b.n	800b28c <__hexnan+0xd4>
 800b2ea:	2004      	movs	r0, #4
 800b2ec:	e7d5      	b.n	800b29a <__hexnan+0xe2>

0800b2ee <__ascii_mbtowc>:
 800b2ee:	b082      	sub	sp, #8
 800b2f0:	b901      	cbnz	r1, 800b2f4 <__ascii_mbtowc+0x6>
 800b2f2:	a901      	add	r1, sp, #4
 800b2f4:	b142      	cbz	r2, 800b308 <__ascii_mbtowc+0x1a>
 800b2f6:	b14b      	cbz	r3, 800b30c <__ascii_mbtowc+0x1e>
 800b2f8:	7813      	ldrb	r3, [r2, #0]
 800b2fa:	600b      	str	r3, [r1, #0]
 800b2fc:	7812      	ldrb	r2, [r2, #0]
 800b2fe:	1e10      	subs	r0, r2, #0
 800b300:	bf18      	it	ne
 800b302:	2001      	movne	r0, #1
 800b304:	b002      	add	sp, #8
 800b306:	4770      	bx	lr
 800b308:	4610      	mov	r0, r2
 800b30a:	e7fb      	b.n	800b304 <__ascii_mbtowc+0x16>
 800b30c:	f06f 0001 	mvn.w	r0, #1
 800b310:	e7f8      	b.n	800b304 <__ascii_mbtowc+0x16>

0800b312 <_realloc_r>:
 800b312:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800b316:	4607      	mov	r7, r0
 800b318:	4614      	mov	r4, r2
 800b31a:	460d      	mov	r5, r1
 800b31c:	b921      	cbnz	r1, 800b328 <_realloc_r+0x16>
 800b31e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800b322:	4611      	mov	r1, r2
 800b324:	f7fd be0c 	b.w	8008f40 <_malloc_r>
 800b328:	b92a      	cbnz	r2, 800b336 <_realloc_r+0x24>
 800b32a:	f7fd fd95 	bl	8008e58 <_free_r>
 800b32e:	4625      	mov	r5, r4
 800b330:	4628      	mov	r0, r5
 800b332:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800b336:	f000 f840 	bl	800b3ba <_malloc_usable_size_r>
 800b33a:	4284      	cmp	r4, r0
 800b33c:	4606      	mov	r6, r0
 800b33e:	d802      	bhi.n	800b346 <_realloc_r+0x34>
 800b340:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800b344:	d8f4      	bhi.n	800b330 <_realloc_r+0x1e>
 800b346:	4621      	mov	r1, r4
 800b348:	4638      	mov	r0, r7
 800b34a:	f7fd fdf9 	bl	8008f40 <_malloc_r>
 800b34e:	4680      	mov	r8, r0
 800b350:	b908      	cbnz	r0, 800b356 <_realloc_r+0x44>
 800b352:	4645      	mov	r5, r8
 800b354:	e7ec      	b.n	800b330 <_realloc_r+0x1e>
 800b356:	42b4      	cmp	r4, r6
 800b358:	4622      	mov	r2, r4
 800b35a:	4629      	mov	r1, r5
 800b35c:	bf28      	it	cs
 800b35e:	4632      	movcs	r2, r6
 800b360:	f7fc ff0d 	bl	800817e <memcpy>
 800b364:	4629      	mov	r1, r5
 800b366:	4638      	mov	r0, r7
 800b368:	f7fd fd76 	bl	8008e58 <_free_r>
 800b36c:	e7f1      	b.n	800b352 <_realloc_r+0x40>

0800b36e <__ascii_wctomb>:
 800b36e:	4603      	mov	r3, r0
 800b370:	4608      	mov	r0, r1
 800b372:	b141      	cbz	r1, 800b386 <__ascii_wctomb+0x18>
 800b374:	2aff      	cmp	r2, #255	@ 0xff
 800b376:	d904      	bls.n	800b382 <__ascii_wctomb+0x14>
 800b378:	228a      	movs	r2, #138	@ 0x8a
 800b37a:	601a      	str	r2, [r3, #0]
 800b37c:	f04f 30ff 	mov.w	r0, #4294967295
 800b380:	4770      	bx	lr
 800b382:	700a      	strb	r2, [r1, #0]
 800b384:	2001      	movs	r0, #1
 800b386:	4770      	bx	lr

0800b388 <fiprintf>:
 800b388:	b40e      	push	{r1, r2, r3}
 800b38a:	b503      	push	{r0, r1, lr}
 800b38c:	4601      	mov	r1, r0
 800b38e:	ab03      	add	r3, sp, #12
 800b390:	4805      	ldr	r0, [pc, #20]	@ (800b3a8 <fiprintf+0x20>)
 800b392:	f853 2b04 	ldr.w	r2, [r3], #4
 800b396:	6800      	ldr	r0, [r0, #0]
 800b398:	9301      	str	r3, [sp, #4]
 800b39a:	f000 f83f 	bl	800b41c <_vfiprintf_r>
 800b39e:	b002      	add	sp, #8
 800b3a0:	f85d eb04 	ldr.w	lr, [sp], #4
 800b3a4:	b003      	add	sp, #12
 800b3a6:	4770      	bx	lr
 800b3a8:	20000034 	.word	0x20000034

0800b3ac <abort>:
 800b3ac:	b508      	push	{r3, lr}
 800b3ae:	2006      	movs	r0, #6
 800b3b0:	f000 f974 	bl	800b69c <raise>
 800b3b4:	2001      	movs	r0, #1
 800b3b6:	f7f7 fb59 	bl	8002a6c <_exit>

0800b3ba <_malloc_usable_size_r>:
 800b3ba:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800b3be:	1f18      	subs	r0, r3, #4
 800b3c0:	2b00      	cmp	r3, #0
 800b3c2:	bfbc      	itt	lt
 800b3c4:	580b      	ldrlt	r3, [r1, r0]
 800b3c6:	18c0      	addlt	r0, r0, r3
 800b3c8:	4770      	bx	lr

0800b3ca <__sfputc_r>:
 800b3ca:	6893      	ldr	r3, [r2, #8]
 800b3cc:	3b01      	subs	r3, #1
 800b3ce:	2b00      	cmp	r3, #0
 800b3d0:	b410      	push	{r4}
 800b3d2:	6093      	str	r3, [r2, #8]
 800b3d4:	da08      	bge.n	800b3e8 <__sfputc_r+0x1e>
 800b3d6:	6994      	ldr	r4, [r2, #24]
 800b3d8:	42a3      	cmp	r3, r4
 800b3da:	db01      	blt.n	800b3e0 <__sfputc_r+0x16>
 800b3dc:	290a      	cmp	r1, #10
 800b3de:	d103      	bne.n	800b3e8 <__sfputc_r+0x1e>
 800b3e0:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3e4:	f7fc bd87 	b.w	8007ef6 <__swbuf_r>
 800b3e8:	6813      	ldr	r3, [r2, #0]
 800b3ea:	1c58      	adds	r0, r3, #1
 800b3ec:	6010      	str	r0, [r2, #0]
 800b3ee:	7019      	strb	r1, [r3, #0]
 800b3f0:	4608      	mov	r0, r1
 800b3f2:	f85d 4b04 	ldr.w	r4, [sp], #4
 800b3f6:	4770      	bx	lr

0800b3f8 <__sfputs_r>:
 800b3f8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b3fa:	4606      	mov	r6, r0
 800b3fc:	460f      	mov	r7, r1
 800b3fe:	4614      	mov	r4, r2
 800b400:	18d5      	adds	r5, r2, r3
 800b402:	42ac      	cmp	r4, r5
 800b404:	d101      	bne.n	800b40a <__sfputs_r+0x12>
 800b406:	2000      	movs	r0, #0
 800b408:	e007      	b.n	800b41a <__sfputs_r+0x22>
 800b40a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b40e:	463a      	mov	r2, r7
 800b410:	4630      	mov	r0, r6
 800b412:	f7ff ffda 	bl	800b3ca <__sfputc_r>
 800b416:	1c43      	adds	r3, r0, #1
 800b418:	d1f3      	bne.n	800b402 <__sfputs_r+0xa>
 800b41a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0800b41c <_vfiprintf_r>:
 800b41c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800b420:	460d      	mov	r5, r1
 800b422:	b09d      	sub	sp, #116	@ 0x74
 800b424:	4614      	mov	r4, r2
 800b426:	4698      	mov	r8, r3
 800b428:	4606      	mov	r6, r0
 800b42a:	b118      	cbz	r0, 800b434 <_vfiprintf_r+0x18>
 800b42c:	6a03      	ldr	r3, [r0, #32]
 800b42e:	b90b      	cbnz	r3, 800b434 <_vfiprintf_r+0x18>
 800b430:	f7fc fc68 	bl	8007d04 <__sinit>
 800b434:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b436:	07d9      	lsls	r1, r3, #31
 800b438:	d405      	bmi.n	800b446 <_vfiprintf_r+0x2a>
 800b43a:	89ab      	ldrh	r3, [r5, #12]
 800b43c:	059a      	lsls	r2, r3, #22
 800b43e:	d402      	bmi.n	800b446 <_vfiprintf_r+0x2a>
 800b440:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b442:	f7fc fe9a 	bl	800817a <__retarget_lock_acquire_recursive>
 800b446:	89ab      	ldrh	r3, [r5, #12]
 800b448:	071b      	lsls	r3, r3, #28
 800b44a:	d501      	bpl.n	800b450 <_vfiprintf_r+0x34>
 800b44c:	692b      	ldr	r3, [r5, #16]
 800b44e:	b99b      	cbnz	r3, 800b478 <_vfiprintf_r+0x5c>
 800b450:	4629      	mov	r1, r5
 800b452:	4630      	mov	r0, r6
 800b454:	f7fc fd8e 	bl	8007f74 <__swsetup_r>
 800b458:	b170      	cbz	r0, 800b478 <_vfiprintf_r+0x5c>
 800b45a:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b45c:	07dc      	lsls	r4, r3, #31
 800b45e:	d504      	bpl.n	800b46a <_vfiprintf_r+0x4e>
 800b460:	f04f 30ff 	mov.w	r0, #4294967295
 800b464:	b01d      	add	sp, #116	@ 0x74
 800b466:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800b46a:	89ab      	ldrh	r3, [r5, #12]
 800b46c:	0598      	lsls	r0, r3, #22
 800b46e:	d4f7      	bmi.n	800b460 <_vfiprintf_r+0x44>
 800b470:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b472:	f7fc fe83 	bl	800817c <__retarget_lock_release_recursive>
 800b476:	e7f3      	b.n	800b460 <_vfiprintf_r+0x44>
 800b478:	2300      	movs	r3, #0
 800b47a:	9309      	str	r3, [sp, #36]	@ 0x24
 800b47c:	2320      	movs	r3, #32
 800b47e:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800b482:	f8cd 800c 	str.w	r8, [sp, #12]
 800b486:	2330      	movs	r3, #48	@ 0x30
 800b488:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800b638 <_vfiprintf_r+0x21c>
 800b48c:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800b490:	f04f 0901 	mov.w	r9, #1
 800b494:	4623      	mov	r3, r4
 800b496:	469a      	mov	sl, r3
 800b498:	f813 2b01 	ldrb.w	r2, [r3], #1
 800b49c:	b10a      	cbz	r2, 800b4a2 <_vfiprintf_r+0x86>
 800b49e:	2a25      	cmp	r2, #37	@ 0x25
 800b4a0:	d1f9      	bne.n	800b496 <_vfiprintf_r+0x7a>
 800b4a2:	ebba 0b04 	subs.w	fp, sl, r4
 800b4a6:	d00b      	beq.n	800b4c0 <_vfiprintf_r+0xa4>
 800b4a8:	465b      	mov	r3, fp
 800b4aa:	4622      	mov	r2, r4
 800b4ac:	4629      	mov	r1, r5
 800b4ae:	4630      	mov	r0, r6
 800b4b0:	f7ff ffa2 	bl	800b3f8 <__sfputs_r>
 800b4b4:	3001      	adds	r0, #1
 800b4b6:	f000 80a7 	beq.w	800b608 <_vfiprintf_r+0x1ec>
 800b4ba:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800b4bc:	445a      	add	r2, fp
 800b4be:	9209      	str	r2, [sp, #36]	@ 0x24
 800b4c0:	f89a 3000 	ldrb.w	r3, [sl]
 800b4c4:	2b00      	cmp	r3, #0
 800b4c6:	f000 809f 	beq.w	800b608 <_vfiprintf_r+0x1ec>
 800b4ca:	2300      	movs	r3, #0
 800b4cc:	f04f 32ff 	mov.w	r2, #4294967295
 800b4d0:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800b4d4:	f10a 0a01 	add.w	sl, sl, #1
 800b4d8:	9304      	str	r3, [sp, #16]
 800b4da:	9307      	str	r3, [sp, #28]
 800b4dc:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800b4e0:	931a      	str	r3, [sp, #104]	@ 0x68
 800b4e2:	4654      	mov	r4, sl
 800b4e4:	2205      	movs	r2, #5
 800b4e6:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b4ea:	4853      	ldr	r0, [pc, #332]	@ (800b638 <_vfiprintf_r+0x21c>)
 800b4ec:	f7f4 fe78 	bl	80001e0 <memchr>
 800b4f0:	9a04      	ldr	r2, [sp, #16]
 800b4f2:	b9d8      	cbnz	r0, 800b52c <_vfiprintf_r+0x110>
 800b4f4:	06d1      	lsls	r1, r2, #27
 800b4f6:	bf44      	itt	mi
 800b4f8:	2320      	movmi	r3, #32
 800b4fa:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b4fe:	0713      	lsls	r3, r2, #28
 800b500:	bf44      	itt	mi
 800b502:	232b      	movmi	r3, #43	@ 0x2b
 800b504:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800b508:	f89a 3000 	ldrb.w	r3, [sl]
 800b50c:	2b2a      	cmp	r3, #42	@ 0x2a
 800b50e:	d015      	beq.n	800b53c <_vfiprintf_r+0x120>
 800b510:	9a07      	ldr	r2, [sp, #28]
 800b512:	4654      	mov	r4, sl
 800b514:	2000      	movs	r0, #0
 800b516:	f04f 0c0a 	mov.w	ip, #10
 800b51a:	4621      	mov	r1, r4
 800b51c:	f811 3b01 	ldrb.w	r3, [r1], #1
 800b520:	3b30      	subs	r3, #48	@ 0x30
 800b522:	2b09      	cmp	r3, #9
 800b524:	d94b      	bls.n	800b5be <_vfiprintf_r+0x1a2>
 800b526:	b1b0      	cbz	r0, 800b556 <_vfiprintf_r+0x13a>
 800b528:	9207      	str	r2, [sp, #28]
 800b52a:	e014      	b.n	800b556 <_vfiprintf_r+0x13a>
 800b52c:	eba0 0308 	sub.w	r3, r0, r8
 800b530:	fa09 f303 	lsl.w	r3, r9, r3
 800b534:	4313      	orrs	r3, r2
 800b536:	9304      	str	r3, [sp, #16]
 800b538:	46a2      	mov	sl, r4
 800b53a:	e7d2      	b.n	800b4e2 <_vfiprintf_r+0xc6>
 800b53c:	9b03      	ldr	r3, [sp, #12]
 800b53e:	1d19      	adds	r1, r3, #4
 800b540:	681b      	ldr	r3, [r3, #0]
 800b542:	9103      	str	r1, [sp, #12]
 800b544:	2b00      	cmp	r3, #0
 800b546:	bfbb      	ittet	lt
 800b548:	425b      	neglt	r3, r3
 800b54a:	f042 0202 	orrlt.w	r2, r2, #2
 800b54e:	9307      	strge	r3, [sp, #28]
 800b550:	9307      	strlt	r3, [sp, #28]
 800b552:	bfb8      	it	lt
 800b554:	9204      	strlt	r2, [sp, #16]
 800b556:	7823      	ldrb	r3, [r4, #0]
 800b558:	2b2e      	cmp	r3, #46	@ 0x2e
 800b55a:	d10a      	bne.n	800b572 <_vfiprintf_r+0x156>
 800b55c:	7863      	ldrb	r3, [r4, #1]
 800b55e:	2b2a      	cmp	r3, #42	@ 0x2a
 800b560:	d132      	bne.n	800b5c8 <_vfiprintf_r+0x1ac>
 800b562:	9b03      	ldr	r3, [sp, #12]
 800b564:	1d1a      	adds	r2, r3, #4
 800b566:	681b      	ldr	r3, [r3, #0]
 800b568:	9203      	str	r2, [sp, #12]
 800b56a:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800b56e:	3402      	adds	r4, #2
 800b570:	9305      	str	r3, [sp, #20]
 800b572:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800b648 <_vfiprintf_r+0x22c>
 800b576:	7821      	ldrb	r1, [r4, #0]
 800b578:	2203      	movs	r2, #3
 800b57a:	4650      	mov	r0, sl
 800b57c:	f7f4 fe30 	bl	80001e0 <memchr>
 800b580:	b138      	cbz	r0, 800b592 <_vfiprintf_r+0x176>
 800b582:	9b04      	ldr	r3, [sp, #16]
 800b584:	eba0 000a 	sub.w	r0, r0, sl
 800b588:	2240      	movs	r2, #64	@ 0x40
 800b58a:	4082      	lsls	r2, r0
 800b58c:	4313      	orrs	r3, r2
 800b58e:	3401      	adds	r4, #1
 800b590:	9304      	str	r3, [sp, #16]
 800b592:	f814 1b01 	ldrb.w	r1, [r4], #1
 800b596:	4829      	ldr	r0, [pc, #164]	@ (800b63c <_vfiprintf_r+0x220>)
 800b598:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800b59c:	2206      	movs	r2, #6
 800b59e:	f7f4 fe1f 	bl	80001e0 <memchr>
 800b5a2:	2800      	cmp	r0, #0
 800b5a4:	d03f      	beq.n	800b626 <_vfiprintf_r+0x20a>
 800b5a6:	4b26      	ldr	r3, [pc, #152]	@ (800b640 <_vfiprintf_r+0x224>)
 800b5a8:	bb1b      	cbnz	r3, 800b5f2 <_vfiprintf_r+0x1d6>
 800b5aa:	9b03      	ldr	r3, [sp, #12]
 800b5ac:	3307      	adds	r3, #7
 800b5ae:	f023 0307 	bic.w	r3, r3, #7
 800b5b2:	3308      	adds	r3, #8
 800b5b4:	9303      	str	r3, [sp, #12]
 800b5b6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800b5b8:	443b      	add	r3, r7
 800b5ba:	9309      	str	r3, [sp, #36]	@ 0x24
 800b5bc:	e76a      	b.n	800b494 <_vfiprintf_r+0x78>
 800b5be:	fb0c 3202 	mla	r2, ip, r2, r3
 800b5c2:	460c      	mov	r4, r1
 800b5c4:	2001      	movs	r0, #1
 800b5c6:	e7a8      	b.n	800b51a <_vfiprintf_r+0xfe>
 800b5c8:	2300      	movs	r3, #0
 800b5ca:	3401      	adds	r4, #1
 800b5cc:	9305      	str	r3, [sp, #20]
 800b5ce:	4619      	mov	r1, r3
 800b5d0:	f04f 0c0a 	mov.w	ip, #10
 800b5d4:	4620      	mov	r0, r4
 800b5d6:	f810 2b01 	ldrb.w	r2, [r0], #1
 800b5da:	3a30      	subs	r2, #48	@ 0x30
 800b5dc:	2a09      	cmp	r2, #9
 800b5de:	d903      	bls.n	800b5e8 <_vfiprintf_r+0x1cc>
 800b5e0:	2b00      	cmp	r3, #0
 800b5e2:	d0c6      	beq.n	800b572 <_vfiprintf_r+0x156>
 800b5e4:	9105      	str	r1, [sp, #20]
 800b5e6:	e7c4      	b.n	800b572 <_vfiprintf_r+0x156>
 800b5e8:	fb0c 2101 	mla	r1, ip, r1, r2
 800b5ec:	4604      	mov	r4, r0
 800b5ee:	2301      	movs	r3, #1
 800b5f0:	e7f0      	b.n	800b5d4 <_vfiprintf_r+0x1b8>
 800b5f2:	ab03      	add	r3, sp, #12
 800b5f4:	9300      	str	r3, [sp, #0]
 800b5f6:	462a      	mov	r2, r5
 800b5f8:	4b12      	ldr	r3, [pc, #72]	@ (800b644 <_vfiprintf_r+0x228>)
 800b5fa:	a904      	add	r1, sp, #16
 800b5fc:	4630      	mov	r0, r6
 800b5fe:	f7fb fd31 	bl	8007064 <_printf_float>
 800b602:	4607      	mov	r7, r0
 800b604:	1c78      	adds	r0, r7, #1
 800b606:	d1d6      	bne.n	800b5b6 <_vfiprintf_r+0x19a>
 800b608:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800b60a:	07d9      	lsls	r1, r3, #31
 800b60c:	d405      	bmi.n	800b61a <_vfiprintf_r+0x1fe>
 800b60e:	89ab      	ldrh	r3, [r5, #12]
 800b610:	059a      	lsls	r2, r3, #22
 800b612:	d402      	bmi.n	800b61a <_vfiprintf_r+0x1fe>
 800b614:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800b616:	f7fc fdb1 	bl	800817c <__retarget_lock_release_recursive>
 800b61a:	89ab      	ldrh	r3, [r5, #12]
 800b61c:	065b      	lsls	r3, r3, #25
 800b61e:	f53f af1f 	bmi.w	800b460 <_vfiprintf_r+0x44>
 800b622:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800b624:	e71e      	b.n	800b464 <_vfiprintf_r+0x48>
 800b626:	ab03      	add	r3, sp, #12
 800b628:	9300      	str	r3, [sp, #0]
 800b62a:	462a      	mov	r2, r5
 800b62c:	4b05      	ldr	r3, [pc, #20]	@ (800b644 <_vfiprintf_r+0x228>)
 800b62e:	a904      	add	r1, sp, #16
 800b630:	4630      	mov	r0, r6
 800b632:	f7fb ffaf 	bl	8007594 <_printf_i>
 800b636:	e7e4      	b.n	800b602 <_vfiprintf_r+0x1e6>
 800b638:	0800bb51 	.word	0x0800bb51
 800b63c:	0800bb5b 	.word	0x0800bb5b
 800b640:	08007065 	.word	0x08007065
 800b644:	0800b3f9 	.word	0x0800b3f9
 800b648:	0800bb57 	.word	0x0800bb57

0800b64c <_raise_r>:
 800b64c:	291f      	cmp	r1, #31
 800b64e:	b538      	push	{r3, r4, r5, lr}
 800b650:	4605      	mov	r5, r0
 800b652:	460c      	mov	r4, r1
 800b654:	d904      	bls.n	800b660 <_raise_r+0x14>
 800b656:	2316      	movs	r3, #22
 800b658:	6003      	str	r3, [r0, #0]
 800b65a:	f04f 30ff 	mov.w	r0, #4294967295
 800b65e:	bd38      	pop	{r3, r4, r5, pc}
 800b660:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800b662:	b112      	cbz	r2, 800b66a <_raise_r+0x1e>
 800b664:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800b668:	b94b      	cbnz	r3, 800b67e <_raise_r+0x32>
 800b66a:	4628      	mov	r0, r5
 800b66c:	f000 f830 	bl	800b6d0 <_getpid_r>
 800b670:	4622      	mov	r2, r4
 800b672:	4601      	mov	r1, r0
 800b674:	4628      	mov	r0, r5
 800b676:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800b67a:	f000 b817 	b.w	800b6ac <_kill_r>
 800b67e:	2b01      	cmp	r3, #1
 800b680:	d00a      	beq.n	800b698 <_raise_r+0x4c>
 800b682:	1c59      	adds	r1, r3, #1
 800b684:	d103      	bne.n	800b68e <_raise_r+0x42>
 800b686:	2316      	movs	r3, #22
 800b688:	6003      	str	r3, [r0, #0]
 800b68a:	2001      	movs	r0, #1
 800b68c:	e7e7      	b.n	800b65e <_raise_r+0x12>
 800b68e:	2100      	movs	r1, #0
 800b690:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800b694:	4620      	mov	r0, r4
 800b696:	4798      	blx	r3
 800b698:	2000      	movs	r0, #0
 800b69a:	e7e0      	b.n	800b65e <_raise_r+0x12>

0800b69c <raise>:
 800b69c:	4b02      	ldr	r3, [pc, #8]	@ (800b6a8 <raise+0xc>)
 800b69e:	4601      	mov	r1, r0
 800b6a0:	6818      	ldr	r0, [r3, #0]
 800b6a2:	f7ff bfd3 	b.w	800b64c <_raise_r>
 800b6a6:	bf00      	nop
 800b6a8:	20000034 	.word	0x20000034

0800b6ac <_kill_r>:
 800b6ac:	b538      	push	{r3, r4, r5, lr}
 800b6ae:	4d07      	ldr	r5, [pc, #28]	@ (800b6cc <_kill_r+0x20>)
 800b6b0:	2300      	movs	r3, #0
 800b6b2:	4604      	mov	r4, r0
 800b6b4:	4608      	mov	r0, r1
 800b6b6:	4611      	mov	r1, r2
 800b6b8:	602b      	str	r3, [r5, #0]
 800b6ba:	f7f7 f9c7 	bl	8002a4c <_kill>
 800b6be:	1c43      	adds	r3, r0, #1
 800b6c0:	d102      	bne.n	800b6c8 <_kill_r+0x1c>
 800b6c2:	682b      	ldr	r3, [r5, #0]
 800b6c4:	b103      	cbz	r3, 800b6c8 <_kill_r+0x1c>
 800b6c6:	6023      	str	r3, [r4, #0]
 800b6c8:	bd38      	pop	{r3, r4, r5, pc}
 800b6ca:	bf00      	nop
 800b6cc:	20000934 	.word	0x20000934

0800b6d0 <_getpid_r>:
 800b6d0:	f7f7 b9b4 	b.w	8002a3c <_getpid>

0800b6d4 <_init>:
 800b6d4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6d6:	bf00      	nop
 800b6d8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6da:	bc08      	pop	{r3}
 800b6dc:	469e      	mov	lr, r3
 800b6de:	4770      	bx	lr

0800b6e0 <_fini>:
 800b6e0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800b6e2:	bf00      	nop
 800b6e4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800b6e6:	bc08      	pop	{r3}
 800b6e8:	469e      	mov	lr, r3
 800b6ea:	4770      	bx	lr
