
ThingSpeak-SHT85-Display.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000ab8c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000624  0800ad30  0800ad30  0000bd30  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800b354  0800b354  0000d1f0  2**0
                  CONTENTS, READONLY
  4 .ARM          00000008  0800b354  0800b354  0000c354  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800b35c  0800b35c  0000d1f0  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800b35c  0800b35c  0000c35c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0800b360  0800b360  0000c360  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         000001f0  20000000  0800b364  0000d000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000738  200001f0  0800b554  0000d1f0  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000928  0800b554  0000d928  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000d1f0  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001079c  00000000  00000000  0000d220  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002fdd  00000000  00000000  0001d9bc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec0  00000000  00000000  000209a0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00000b4e  00000000  00000000  00021860  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000181fd  00000000  00000000  000223ae  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000146d4  00000000  00000000  0003a5ab  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008cf05  00000000  00000000  0004ec7f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000dbb84  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00005128  00000000  00000000  000dbbc8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000074  00000000  00000000  000e0cf0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001f0 	.word	0x200001f0
 80001bc:	00000000 	.word	0x00000000
 80001c0:	0800ad14 	.word	0x0800ad14

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001f4 	.word	0x200001f4
 80001dc:	0800ad14 	.word	0x0800ad14

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2uiz>:
 8000bb8:	004a      	lsls	r2, r1, #1
 8000bba:	d211      	bcs.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bbc:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000bc0:	d211      	bcs.n	8000be6 <__aeabi_d2uiz+0x2e>
 8000bc2:	d50d      	bpl.n	8000be0 <__aeabi_d2uiz+0x28>
 8000bc4:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000bc8:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000bcc:	d40e      	bmi.n	8000bec <__aeabi_d2uiz+0x34>
 8000bce:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000bd2:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000bd6:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000bda:	fa23 f002 	lsr.w	r0, r3, r2
 8000bde:	4770      	bx	lr
 8000be0:	f04f 0000 	mov.w	r0, #0
 8000be4:	4770      	bx	lr
 8000be6:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000bea:	d102      	bne.n	8000bf2 <__aeabi_d2uiz+0x3a>
 8000bec:	f04f 30ff 	mov.w	r0, #4294967295
 8000bf0:	4770      	bx	lr
 8000bf2:	f04f 0000 	mov.w	r0, #0
 8000bf6:	4770      	bx	lr

08000bf8 <__aeabi_d2f>:
 8000bf8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bfc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000c00:	bf24      	itt	cs
 8000c02:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000c06:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000c0a:	d90d      	bls.n	8000c28 <__aeabi_d2f+0x30>
 8000c0c:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000c10:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000c14:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000c18:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000c1c:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000c20:	bf08      	it	eq
 8000c22:	f020 0001 	biceq.w	r0, r0, #1
 8000c26:	4770      	bx	lr
 8000c28:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000c2c:	d121      	bne.n	8000c72 <__aeabi_d2f+0x7a>
 8000c2e:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000c32:	bfbc      	itt	lt
 8000c34:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000c38:	4770      	bxlt	lr
 8000c3a:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000c3e:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c42:	f1c2 0218 	rsb	r2, r2, #24
 8000c46:	f1c2 0c20 	rsb	ip, r2, #32
 8000c4a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c4e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c52:	bf18      	it	ne
 8000c54:	f040 0001 	orrne.w	r0, r0, #1
 8000c58:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c5c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c60:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c64:	ea40 000c 	orr.w	r0, r0, ip
 8000c68:	fa23 f302 	lsr.w	r3, r3, r2
 8000c6c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c70:	e7cc      	b.n	8000c0c <__aeabi_d2f+0x14>
 8000c72:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c76:	d107      	bne.n	8000c88 <__aeabi_d2f+0x90>
 8000c78:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c7c:	bf1e      	ittt	ne
 8000c7e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c82:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c86:	4770      	bxne	lr
 8000c88:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c8c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c90:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c94:	4770      	bx	lr
 8000c96:	bf00      	nop

08000c98 <__aeabi_uldivmod>:
 8000c98:	b953      	cbnz	r3, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9a:	b94a      	cbnz	r2, 8000cb0 <__aeabi_uldivmod+0x18>
 8000c9c:	2900      	cmp	r1, #0
 8000c9e:	bf08      	it	eq
 8000ca0:	2800      	cmpeq	r0, #0
 8000ca2:	bf1c      	itt	ne
 8000ca4:	f04f 31ff 	movne.w	r1, #4294967295
 8000ca8:	f04f 30ff 	movne.w	r0, #4294967295
 8000cac:	f000 b9be 	b.w	800102c <__aeabi_idiv0>
 8000cb0:	f1ad 0c08 	sub.w	ip, sp, #8
 8000cb4:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000cb8:	f000 f83c 	bl	8000d34 <__udivmoddi4>
 8000cbc:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000cc0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000cc4:	b004      	add	sp, #16
 8000cc6:	4770      	bx	lr

08000cc8 <__aeabi_d2lz>:
 8000cc8:	b538      	push	{r3, r4, r5, lr}
 8000cca:	2200      	movs	r2, #0
 8000ccc:	2300      	movs	r3, #0
 8000cce:	4604      	mov	r4, r0
 8000cd0:	460d      	mov	r5, r1
 8000cd2:	f7ff ff0b 	bl	8000aec <__aeabi_dcmplt>
 8000cd6:	b928      	cbnz	r0, 8000ce4 <__aeabi_d2lz+0x1c>
 8000cd8:	4620      	mov	r0, r4
 8000cda:	4629      	mov	r1, r5
 8000cdc:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8000ce0:	f000 b80a 	b.w	8000cf8 <__aeabi_d2ulz>
 8000ce4:	4620      	mov	r0, r4
 8000ce6:	f105 4100 	add.w	r1, r5, #2147483648	@ 0x80000000
 8000cea:	f000 f805 	bl	8000cf8 <__aeabi_d2ulz>
 8000cee:	4240      	negs	r0, r0
 8000cf0:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000cf4:	bd38      	pop	{r3, r4, r5, pc}
 8000cf6:	bf00      	nop

08000cf8 <__aeabi_d2ulz>:
 8000cf8:	b5d0      	push	{r4, r6, r7, lr}
 8000cfa:	4b0c      	ldr	r3, [pc, #48]	@ (8000d2c <__aeabi_d2ulz+0x34>)
 8000cfc:	2200      	movs	r2, #0
 8000cfe:	4606      	mov	r6, r0
 8000d00:	460f      	mov	r7, r1
 8000d02:	f7ff fc81 	bl	8000608 <__aeabi_dmul>
 8000d06:	f7ff ff57 	bl	8000bb8 <__aeabi_d2uiz>
 8000d0a:	4604      	mov	r4, r0
 8000d0c:	f7ff fc02 	bl	8000514 <__aeabi_ui2d>
 8000d10:	4b07      	ldr	r3, [pc, #28]	@ (8000d30 <__aeabi_d2ulz+0x38>)
 8000d12:	2200      	movs	r2, #0
 8000d14:	f7ff fc78 	bl	8000608 <__aeabi_dmul>
 8000d18:	4602      	mov	r2, r0
 8000d1a:	460b      	mov	r3, r1
 8000d1c:	4630      	mov	r0, r6
 8000d1e:	4639      	mov	r1, r7
 8000d20:	f7ff faba 	bl	8000298 <__aeabi_dsub>
 8000d24:	f7ff ff48 	bl	8000bb8 <__aeabi_d2uiz>
 8000d28:	4621      	mov	r1, r4
 8000d2a:	bdd0      	pop	{r4, r6, r7, pc}
 8000d2c:	3df00000 	.word	0x3df00000
 8000d30:	41f00000 	.word	0x41f00000

08000d34 <__udivmoddi4>:
 8000d34:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000d38:	9d08      	ldr	r5, [sp, #32]
 8000d3a:	468e      	mov	lr, r1
 8000d3c:	4604      	mov	r4, r0
 8000d3e:	4688      	mov	r8, r1
 8000d40:	2b00      	cmp	r3, #0
 8000d42:	d14a      	bne.n	8000dda <__udivmoddi4+0xa6>
 8000d44:	428a      	cmp	r2, r1
 8000d46:	4617      	mov	r7, r2
 8000d48:	d962      	bls.n	8000e10 <__udivmoddi4+0xdc>
 8000d4a:	fab2 f682 	clz	r6, r2
 8000d4e:	b14e      	cbz	r6, 8000d64 <__udivmoddi4+0x30>
 8000d50:	f1c6 0320 	rsb	r3, r6, #32
 8000d54:	fa01 f806 	lsl.w	r8, r1, r6
 8000d58:	fa20 f303 	lsr.w	r3, r0, r3
 8000d5c:	40b7      	lsls	r7, r6
 8000d5e:	ea43 0808 	orr.w	r8, r3, r8
 8000d62:	40b4      	lsls	r4, r6
 8000d64:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d68:	fa1f fc87 	uxth.w	ip, r7
 8000d6c:	fbb8 f1fe 	udiv	r1, r8, lr
 8000d70:	0c23      	lsrs	r3, r4, #16
 8000d72:	fb0e 8811 	mls	r8, lr, r1, r8
 8000d76:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000d7a:	fb01 f20c 	mul.w	r2, r1, ip
 8000d7e:	429a      	cmp	r2, r3
 8000d80:	d909      	bls.n	8000d96 <__udivmoddi4+0x62>
 8000d82:	18fb      	adds	r3, r7, r3
 8000d84:	f101 30ff 	add.w	r0, r1, #4294967295
 8000d88:	f080 80ea 	bcs.w	8000f60 <__udivmoddi4+0x22c>
 8000d8c:	429a      	cmp	r2, r3
 8000d8e:	f240 80e7 	bls.w	8000f60 <__udivmoddi4+0x22c>
 8000d92:	3902      	subs	r1, #2
 8000d94:	443b      	add	r3, r7
 8000d96:	1a9a      	subs	r2, r3, r2
 8000d98:	b2a3      	uxth	r3, r4
 8000d9a:	fbb2 f0fe 	udiv	r0, r2, lr
 8000d9e:	fb0e 2210 	mls	r2, lr, r0, r2
 8000da2:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000da6:	fb00 fc0c 	mul.w	ip, r0, ip
 8000daa:	459c      	cmp	ip, r3
 8000dac:	d909      	bls.n	8000dc2 <__udivmoddi4+0x8e>
 8000dae:	18fb      	adds	r3, r7, r3
 8000db0:	f100 32ff 	add.w	r2, r0, #4294967295
 8000db4:	f080 80d6 	bcs.w	8000f64 <__udivmoddi4+0x230>
 8000db8:	459c      	cmp	ip, r3
 8000dba:	f240 80d3 	bls.w	8000f64 <__udivmoddi4+0x230>
 8000dbe:	443b      	add	r3, r7
 8000dc0:	3802      	subs	r0, #2
 8000dc2:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000dc6:	eba3 030c 	sub.w	r3, r3, ip
 8000dca:	2100      	movs	r1, #0
 8000dcc:	b11d      	cbz	r5, 8000dd6 <__udivmoddi4+0xa2>
 8000dce:	40f3      	lsrs	r3, r6
 8000dd0:	2200      	movs	r2, #0
 8000dd2:	e9c5 3200 	strd	r3, r2, [r5]
 8000dd6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000dda:	428b      	cmp	r3, r1
 8000ddc:	d905      	bls.n	8000dea <__udivmoddi4+0xb6>
 8000dde:	b10d      	cbz	r5, 8000de4 <__udivmoddi4+0xb0>
 8000de0:	e9c5 0100 	strd	r0, r1, [r5]
 8000de4:	2100      	movs	r1, #0
 8000de6:	4608      	mov	r0, r1
 8000de8:	e7f5      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000dea:	fab3 f183 	clz	r1, r3
 8000dee:	2900      	cmp	r1, #0
 8000df0:	d146      	bne.n	8000e80 <__udivmoddi4+0x14c>
 8000df2:	4573      	cmp	r3, lr
 8000df4:	d302      	bcc.n	8000dfc <__udivmoddi4+0xc8>
 8000df6:	4282      	cmp	r2, r0
 8000df8:	f200 8105 	bhi.w	8001006 <__udivmoddi4+0x2d2>
 8000dfc:	1a84      	subs	r4, r0, r2
 8000dfe:	eb6e 0203 	sbc.w	r2, lr, r3
 8000e02:	2001      	movs	r0, #1
 8000e04:	4690      	mov	r8, r2
 8000e06:	2d00      	cmp	r5, #0
 8000e08:	d0e5      	beq.n	8000dd6 <__udivmoddi4+0xa2>
 8000e0a:	e9c5 4800 	strd	r4, r8, [r5]
 8000e0e:	e7e2      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000e10:	2a00      	cmp	r2, #0
 8000e12:	f000 8090 	beq.w	8000f36 <__udivmoddi4+0x202>
 8000e16:	fab2 f682 	clz	r6, r2
 8000e1a:	2e00      	cmp	r6, #0
 8000e1c:	f040 80a4 	bne.w	8000f68 <__udivmoddi4+0x234>
 8000e20:	1a8a      	subs	r2, r1, r2
 8000e22:	0c03      	lsrs	r3, r0, #16
 8000e24:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e28:	b280      	uxth	r0, r0
 8000e2a:	b2bc      	uxth	r4, r7
 8000e2c:	2101      	movs	r1, #1
 8000e2e:	fbb2 fcfe 	udiv	ip, r2, lr
 8000e32:	fb0e 221c 	mls	r2, lr, ip, r2
 8000e36:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000e3a:	fb04 f20c 	mul.w	r2, r4, ip
 8000e3e:	429a      	cmp	r2, r3
 8000e40:	d907      	bls.n	8000e52 <__udivmoddi4+0x11e>
 8000e42:	18fb      	adds	r3, r7, r3
 8000e44:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000e48:	d202      	bcs.n	8000e50 <__udivmoddi4+0x11c>
 8000e4a:	429a      	cmp	r2, r3
 8000e4c:	f200 80e0 	bhi.w	8001010 <__udivmoddi4+0x2dc>
 8000e50:	46c4      	mov	ip, r8
 8000e52:	1a9b      	subs	r3, r3, r2
 8000e54:	fbb3 f2fe 	udiv	r2, r3, lr
 8000e58:	fb0e 3312 	mls	r3, lr, r2, r3
 8000e5c:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000e60:	fb02 f404 	mul.w	r4, r2, r4
 8000e64:	429c      	cmp	r4, r3
 8000e66:	d907      	bls.n	8000e78 <__udivmoddi4+0x144>
 8000e68:	18fb      	adds	r3, r7, r3
 8000e6a:	f102 30ff 	add.w	r0, r2, #4294967295
 8000e6e:	d202      	bcs.n	8000e76 <__udivmoddi4+0x142>
 8000e70:	429c      	cmp	r4, r3
 8000e72:	f200 80ca 	bhi.w	800100a <__udivmoddi4+0x2d6>
 8000e76:	4602      	mov	r2, r0
 8000e78:	1b1b      	subs	r3, r3, r4
 8000e7a:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000e7e:	e7a5      	b.n	8000dcc <__udivmoddi4+0x98>
 8000e80:	f1c1 0620 	rsb	r6, r1, #32
 8000e84:	408b      	lsls	r3, r1
 8000e86:	fa22 f706 	lsr.w	r7, r2, r6
 8000e8a:	431f      	orrs	r7, r3
 8000e8c:	fa0e f401 	lsl.w	r4, lr, r1
 8000e90:	fa20 f306 	lsr.w	r3, r0, r6
 8000e94:	fa2e fe06 	lsr.w	lr, lr, r6
 8000e98:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000e9c:	4323      	orrs	r3, r4
 8000e9e:	fa00 f801 	lsl.w	r8, r0, r1
 8000ea2:	fa1f fc87 	uxth.w	ip, r7
 8000ea6:	fbbe f0f9 	udiv	r0, lr, r9
 8000eaa:	0c1c      	lsrs	r4, r3, #16
 8000eac:	fb09 ee10 	mls	lr, r9, r0, lr
 8000eb0:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000eb4:	fb00 fe0c 	mul.w	lr, r0, ip
 8000eb8:	45a6      	cmp	lr, r4
 8000eba:	fa02 f201 	lsl.w	r2, r2, r1
 8000ebe:	d909      	bls.n	8000ed4 <__udivmoddi4+0x1a0>
 8000ec0:	193c      	adds	r4, r7, r4
 8000ec2:	f100 3aff 	add.w	sl, r0, #4294967295
 8000ec6:	f080 809c 	bcs.w	8001002 <__udivmoddi4+0x2ce>
 8000eca:	45a6      	cmp	lr, r4
 8000ecc:	f240 8099 	bls.w	8001002 <__udivmoddi4+0x2ce>
 8000ed0:	3802      	subs	r0, #2
 8000ed2:	443c      	add	r4, r7
 8000ed4:	eba4 040e 	sub.w	r4, r4, lr
 8000ed8:	fa1f fe83 	uxth.w	lr, r3
 8000edc:	fbb4 f3f9 	udiv	r3, r4, r9
 8000ee0:	fb09 4413 	mls	r4, r9, r3, r4
 8000ee4:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000ee8:	fb03 fc0c 	mul.w	ip, r3, ip
 8000eec:	45a4      	cmp	ip, r4
 8000eee:	d908      	bls.n	8000f02 <__udivmoddi4+0x1ce>
 8000ef0:	193c      	adds	r4, r7, r4
 8000ef2:	f103 3eff 	add.w	lr, r3, #4294967295
 8000ef6:	f080 8082 	bcs.w	8000ffe <__udivmoddi4+0x2ca>
 8000efa:	45a4      	cmp	ip, r4
 8000efc:	d97f      	bls.n	8000ffe <__udivmoddi4+0x2ca>
 8000efe:	3b02      	subs	r3, #2
 8000f00:	443c      	add	r4, r7
 8000f02:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000f06:	eba4 040c 	sub.w	r4, r4, ip
 8000f0a:	fba0 ec02 	umull	lr, ip, r0, r2
 8000f0e:	4564      	cmp	r4, ip
 8000f10:	4673      	mov	r3, lr
 8000f12:	46e1      	mov	r9, ip
 8000f14:	d362      	bcc.n	8000fdc <__udivmoddi4+0x2a8>
 8000f16:	d05f      	beq.n	8000fd8 <__udivmoddi4+0x2a4>
 8000f18:	b15d      	cbz	r5, 8000f32 <__udivmoddi4+0x1fe>
 8000f1a:	ebb8 0203 	subs.w	r2, r8, r3
 8000f1e:	eb64 0409 	sbc.w	r4, r4, r9
 8000f22:	fa04 f606 	lsl.w	r6, r4, r6
 8000f26:	fa22 f301 	lsr.w	r3, r2, r1
 8000f2a:	431e      	orrs	r6, r3
 8000f2c:	40cc      	lsrs	r4, r1
 8000f2e:	e9c5 6400 	strd	r6, r4, [r5]
 8000f32:	2100      	movs	r1, #0
 8000f34:	e74f      	b.n	8000dd6 <__udivmoddi4+0xa2>
 8000f36:	fbb1 fcf2 	udiv	ip, r1, r2
 8000f3a:	0c01      	lsrs	r1, r0, #16
 8000f3c:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000f40:	b280      	uxth	r0, r0
 8000f42:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000f46:	463b      	mov	r3, r7
 8000f48:	4638      	mov	r0, r7
 8000f4a:	463c      	mov	r4, r7
 8000f4c:	46b8      	mov	r8, r7
 8000f4e:	46be      	mov	lr, r7
 8000f50:	2620      	movs	r6, #32
 8000f52:	fbb1 f1f7 	udiv	r1, r1, r7
 8000f56:	eba2 0208 	sub.w	r2, r2, r8
 8000f5a:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000f5e:	e766      	b.n	8000e2e <__udivmoddi4+0xfa>
 8000f60:	4601      	mov	r1, r0
 8000f62:	e718      	b.n	8000d96 <__udivmoddi4+0x62>
 8000f64:	4610      	mov	r0, r2
 8000f66:	e72c      	b.n	8000dc2 <__udivmoddi4+0x8e>
 8000f68:	f1c6 0220 	rsb	r2, r6, #32
 8000f6c:	fa2e f302 	lsr.w	r3, lr, r2
 8000f70:	40b7      	lsls	r7, r6
 8000f72:	40b1      	lsls	r1, r6
 8000f74:	fa20 f202 	lsr.w	r2, r0, r2
 8000f78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f7c:	430a      	orrs	r2, r1
 8000f7e:	fbb3 f8fe 	udiv	r8, r3, lr
 8000f82:	b2bc      	uxth	r4, r7
 8000f84:	fb0e 3318 	mls	r3, lr, r8, r3
 8000f88:	0c11      	lsrs	r1, r2, #16
 8000f8a:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f8e:	fb08 f904 	mul.w	r9, r8, r4
 8000f92:	40b0      	lsls	r0, r6
 8000f94:	4589      	cmp	r9, r1
 8000f96:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000f9a:	b280      	uxth	r0, r0
 8000f9c:	d93e      	bls.n	800101c <__udivmoddi4+0x2e8>
 8000f9e:	1879      	adds	r1, r7, r1
 8000fa0:	f108 3cff 	add.w	ip, r8, #4294967295
 8000fa4:	d201      	bcs.n	8000faa <__udivmoddi4+0x276>
 8000fa6:	4589      	cmp	r9, r1
 8000fa8:	d81f      	bhi.n	8000fea <__udivmoddi4+0x2b6>
 8000faa:	eba1 0109 	sub.w	r1, r1, r9
 8000fae:	fbb1 f9fe 	udiv	r9, r1, lr
 8000fb2:	fb09 f804 	mul.w	r8, r9, r4
 8000fb6:	fb0e 1119 	mls	r1, lr, r9, r1
 8000fba:	b292      	uxth	r2, r2
 8000fbc:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000fc0:	4542      	cmp	r2, r8
 8000fc2:	d229      	bcs.n	8001018 <__udivmoddi4+0x2e4>
 8000fc4:	18ba      	adds	r2, r7, r2
 8000fc6:	f109 31ff 	add.w	r1, r9, #4294967295
 8000fca:	d2c4      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fcc:	4542      	cmp	r2, r8
 8000fce:	d2c2      	bcs.n	8000f56 <__udivmoddi4+0x222>
 8000fd0:	f1a9 0102 	sub.w	r1, r9, #2
 8000fd4:	443a      	add	r2, r7
 8000fd6:	e7be      	b.n	8000f56 <__udivmoddi4+0x222>
 8000fd8:	45f0      	cmp	r8, lr
 8000fda:	d29d      	bcs.n	8000f18 <__udivmoddi4+0x1e4>
 8000fdc:	ebbe 0302 	subs.w	r3, lr, r2
 8000fe0:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000fe4:	3801      	subs	r0, #1
 8000fe6:	46e1      	mov	r9, ip
 8000fe8:	e796      	b.n	8000f18 <__udivmoddi4+0x1e4>
 8000fea:	eba7 0909 	sub.w	r9, r7, r9
 8000fee:	4449      	add	r1, r9
 8000ff0:	f1a8 0c02 	sub.w	ip, r8, #2
 8000ff4:	fbb1 f9fe 	udiv	r9, r1, lr
 8000ff8:	fb09 f804 	mul.w	r8, r9, r4
 8000ffc:	e7db      	b.n	8000fb6 <__udivmoddi4+0x282>
 8000ffe:	4673      	mov	r3, lr
 8001000:	e77f      	b.n	8000f02 <__udivmoddi4+0x1ce>
 8001002:	4650      	mov	r0, sl
 8001004:	e766      	b.n	8000ed4 <__udivmoddi4+0x1a0>
 8001006:	4608      	mov	r0, r1
 8001008:	e6fd      	b.n	8000e06 <__udivmoddi4+0xd2>
 800100a:	443b      	add	r3, r7
 800100c:	3a02      	subs	r2, #2
 800100e:	e733      	b.n	8000e78 <__udivmoddi4+0x144>
 8001010:	f1ac 0c02 	sub.w	ip, ip, #2
 8001014:	443b      	add	r3, r7
 8001016:	e71c      	b.n	8000e52 <__udivmoddi4+0x11e>
 8001018:	4649      	mov	r1, r9
 800101a:	e79c      	b.n	8000f56 <__udivmoddi4+0x222>
 800101c:	eba1 0109 	sub.w	r1, r1, r9
 8001020:	46c4      	mov	ip, r8
 8001022:	fbb1 f9fe 	udiv	r9, r1, lr
 8001026:	fb09 f804 	mul.w	r8, r9, r4
 800102a:	e7c4      	b.n	8000fb6 <__udivmoddi4+0x282>

0800102c <__aeabi_idiv0>:
 800102c:	4770      	bx	lr
 800102e:	bf00      	nop

08001030 <HAL_UART_RxCpltCallback>:

extern UART_HandleTypeDef huart2;


// Callback de recepción por interrupción
void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 8001030:	b580      	push	{r7, lr}
 8001032:	b082      	sub	sp, #8
 8001034:	af00      	add	r7, sp, #0
 8001036:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {  // Verificar si es el UART correcto
 8001038:	687b      	ldr	r3, [r7, #4]
 800103a:	681b      	ldr	r3, [r3, #0]
 800103c:	4a13      	ldr	r2, [pc, #76]	@ (800108c <HAL_UART_RxCpltCallback+0x5c>)
 800103e:	4293      	cmp	r3, r2
 8001040:	d120      	bne.n	8001084 <HAL_UART_RxCpltCallback+0x54>
        if (rxIndex < sizeof(response) - 1) {  // Evitar desbordamiento del buffer
 8001042:	4b13      	ldr	r3, [pc, #76]	@ (8001090 <HAL_UART_RxCpltCallback+0x60>)
 8001044:	781b      	ldrb	r3, [r3, #0]
            rxIndex++;  // Avanzar índice
 8001046:	4b12      	ldr	r3, [pc, #72]	@ (8001090 <HAL_UART_RxCpltCallback+0x60>)
 8001048:	781b      	ldrb	r3, [r3, #0]
 800104a:	b2db      	uxtb	r3, r3
 800104c:	3301      	adds	r3, #1
 800104e:	b2da      	uxtb	r2, r3
 8001050:	4b0f      	ldr	r3, [pc, #60]	@ (8001090 <HAL_UART_RxCpltCallback+0x60>)
 8001052:	701a      	strb	r2, [r3, #0]
            if (response[rxIndex - 1] == '\n') {  // Detectar fin de línea
 8001054:	4b0e      	ldr	r3, [pc, #56]	@ (8001090 <HAL_UART_RxCpltCallback+0x60>)
 8001056:	781b      	ldrb	r3, [r3, #0]
 8001058:	b2db      	uxtb	r3, r3
 800105a:	3b01      	subs	r3, #1
 800105c:	4a0d      	ldr	r2, [pc, #52]	@ (8001094 <HAL_UART_RxCpltCallback+0x64>)
 800105e:	5cd3      	ldrb	r3, [r2, r3]
 8001060:	b2db      	uxtb	r3, r3
 8001062:	2b0a      	cmp	r3, #10
 8001064:	d103      	bne.n	800106e <HAL_UART_RxCpltCallback+0x3e>
                rxComplete = 1;  // Marcar recepción completa
 8001066:	4b0c      	ldr	r3, [pc, #48]	@ (8001098 <HAL_UART_RxCpltCallback+0x68>)
 8001068:	2201      	movs	r2, #1
 800106a:	701a      	strb	r2, [r3, #0]
            }
        } else {
            rxComplete = 1;  // Si se llena el buffer, finalizar recepción
        }
    }
}
 800106c:	e00a      	b.n	8001084 <HAL_UART_RxCpltCallback+0x54>
                HAL_UART_Receive_IT(&huart2, (uint8_t*)&response[rxIndex], 1);  // Recibir siguiente byte
 800106e:	4b08      	ldr	r3, [pc, #32]	@ (8001090 <HAL_UART_RxCpltCallback+0x60>)
 8001070:	781b      	ldrb	r3, [r3, #0]
 8001072:	b2db      	uxtb	r3, r3
 8001074:	461a      	mov	r2, r3
 8001076:	4b07      	ldr	r3, [pc, #28]	@ (8001094 <HAL_UART_RxCpltCallback+0x64>)
 8001078:	4413      	add	r3, r2
 800107a:	2201      	movs	r2, #1
 800107c:	4619      	mov	r1, r3
 800107e:	4807      	ldr	r0, [pc, #28]	@ (800109c <HAL_UART_RxCpltCallback+0x6c>)
 8001080:	f004 fa1a 	bl	80054b8 <HAL_UART_Receive_IT>
}
 8001084:	bf00      	nop
 8001086:	3708      	adds	r7, #8
 8001088:	46bd      	mov	sp, r7
 800108a:	bd80      	pop	{r7, pc}
 800108c:	40004400 	.word	0x40004400
 8001090:	2000040c 	.word	0x2000040c
 8001094:	2000020c 	.word	0x2000020c
 8001098:	2000040d 	.word	0x2000040d
 800109c:	20000514 	.word	0x20000514

080010a0 <esp8266_receive_response_IT>:

// Inicia la recepción por interrupción
void esp8266_receive_response_IT(void) {
 80010a0:	b580      	push	{r7, lr}
 80010a2:	af00      	add	r7, sp, #0
    rxIndex = 0;  // Reiniciar índice
 80010a4:	4b0c      	ldr	r3, [pc, #48]	@ (80010d8 <esp8266_receive_response_IT+0x38>)
 80010a6:	2200      	movs	r2, #0
 80010a8:	701a      	strb	r2, [r3, #0]
    rxComplete = 0;  // Limpiar bandera de recepción completa
 80010aa:	4b0c      	ldr	r3, [pc, #48]	@ (80010dc <esp8266_receive_response_IT+0x3c>)
 80010ac:	2200      	movs	r2, #0
 80010ae:	701a      	strb	r2, [r3, #0]
    memset(response, 0, sizeof(response));  // Limpiar el buffer
 80010b0:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80010b4:	2100      	movs	r1, #0
 80010b6:	480a      	ldr	r0, [pc, #40]	@ (80010e0 <esp8266_receive_response_IT+0x40>)
 80010b8:	f006 face 	bl	8007658 <memset>
    HAL_UART_Receive_IT(&huart2, (uint8_t*)&response[rxIndex], 1);  // Recibir primer byte
 80010bc:	4b06      	ldr	r3, [pc, #24]	@ (80010d8 <esp8266_receive_response_IT+0x38>)
 80010be:	781b      	ldrb	r3, [r3, #0]
 80010c0:	b2db      	uxtb	r3, r3
 80010c2:	461a      	mov	r2, r3
 80010c4:	4b06      	ldr	r3, [pc, #24]	@ (80010e0 <esp8266_receive_response_IT+0x40>)
 80010c6:	4413      	add	r3, r2
 80010c8:	2201      	movs	r2, #1
 80010ca:	4619      	mov	r1, r3
 80010cc:	4805      	ldr	r0, [pc, #20]	@ (80010e4 <esp8266_receive_response_IT+0x44>)
 80010ce:	f004 f9f3 	bl	80054b8 <HAL_UART_Receive_IT>
}
 80010d2:	bf00      	nop
 80010d4:	bd80      	pop	{r7, pc}
 80010d6:	bf00      	nop
 80010d8:	2000040c 	.word	0x2000040c
 80010dc:	2000040d 	.word	0x2000040d
 80010e0:	2000020c 	.word	0x2000020c
 80010e4:	20000514 	.word	0x20000514

080010e8 <esp8266_send_command>:


// Envía un comando al ESP8266
void esp8266_send_command(const char* cmd) {
 80010e8:	b580      	push	{r7, lr}
 80010ea:	b082      	sub	sp, #8
 80010ec:	af00      	add	r7, sp, #0
 80010ee:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 80010f0:	6878      	ldr	r0, [r7, #4]
 80010f2:	f7ff f8c5 	bl	8000280 <strlen>
 80010f6:	4603      	mov	r3, r0
 80010f8:	b29a      	uxth	r2, r3
 80010fa:	f04f 33ff 	mov.w	r3, #4294967295
 80010fe:	6879      	ldr	r1, [r7, #4]
 8001100:	4803      	ldr	r0, [pc, #12]	@ (8001110 <esp8266_send_command+0x28>)
 8001102:	f004 f94e 	bl	80053a2 <HAL_UART_Transmit>
}
 8001106:	bf00      	nop
 8001108:	3708      	adds	r7, #8
 800110a:	46bd      	mov	sp, r7
 800110c:	bd80      	pop	{r7, pc}
 800110e:	bf00      	nop
 8001110:	20000514 	.word	0x20000514

08001114 <esp8266_is_response_ready>:


uint8_t esp8266_is_response_ready(void) { 	//Verifica si la respuesta del ESP8266 está lista
 8001114:	b480      	push	{r7}
 8001116:	af00      	add	r7, sp, #0
    return rxComplete;		//En lugar de acceder directamente a rxComplete (que es static y privado en esp8266.c), accedes por función.
 8001118:	4b03      	ldr	r3, [pc, #12]	@ (8001128 <esp8266_is_response_ready+0x14>)
 800111a:	781b      	ldrb	r3, [r3, #0]
 800111c:	b2db      	uxtb	r3, r3
}
 800111e:	4618      	mov	r0, r3
 8001120:	46bd      	mov	sp, r7
 8001122:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001126:	4770      	bx	lr
 8001128:	2000040d 	.word	0x2000040d

0800112c <esp8266_get_response>:

char* esp8266_get_response(void) {		// Devuelve el contenido de la respuesta recibida del ESP8266
 800112c:	b480      	push	{r7}
 800112e:	af00      	add	r7, sp, #0
	return response;
 8001130:	4b02      	ldr	r3, [pc, #8]	@ (800113c <esp8266_get_response+0x10>)
}
 8001132:	4618      	mov	r0, r3
 8001134:	46bd      	mov	sp, r7
 8001136:	f85d 7b04 	ldr.w	r7, [sp], #4
 800113a:	4770      	bx	lr
 800113c:	2000020c 	.word	0x2000020c

08001140 <esp8266_clear_response_flag>:
//    return temp;
//}



void esp8266_clear_response_flag(void) {		// Limpia la bandera que indica que la respuesta ha sido recibida
 8001140:	b480      	push	{r7}
 8001142:	af00      	add	r7, sp, #0
    rxComplete = 0;
 8001144:	4b03      	ldr	r3, [pc, #12]	@ (8001154 <esp8266_clear_response_flag+0x14>)
 8001146:	2200      	movs	r2, #0
 8001148:	701a      	strb	r2, [r3, #0]
}
 800114a:	bf00      	nop
 800114c:	46bd      	mov	sp, r7
 800114e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001152:	4770      	bx	lr
 8001154:	2000040d 	.word	0x2000040d

08001158 <esp8266_wait_response_timeout>:

bool esp8266_wait_response_timeout(uint32_t timeout_ms) {		// Espera una respuesta del ESP8266 durante un tiempo máximo dado
 8001158:	b580      	push	{r7, lr}
 800115a:	b084      	sub	sp, #16
 800115c:	af00      	add	r7, sp, #0
 800115e:	6078      	str	r0, [r7, #4]
    uint32_t start = HAL_GetTick();			// Para no bloquear el resto del programa en reconexión de esp8266
 8001160:	f001 fb98 	bl	8002894 <HAL_GetTick>
 8001164:	60f8      	str	r0, [r7, #12]
    while (!esp8266_is_response_ready()) {
 8001166:	e009      	b.n	800117c <esp8266_wait_response_timeout+0x24>
        if ((HAL_GetTick() - start) > timeout_ms) return false;
 8001168:	f001 fb94 	bl	8002894 <HAL_GetTick>
 800116c:	4602      	mov	r2, r0
 800116e:	68fb      	ldr	r3, [r7, #12]
 8001170:	1ad3      	subs	r3, r2, r3
 8001172:	687a      	ldr	r2, [r7, #4]
 8001174:	429a      	cmp	r2, r3
 8001176:	d201      	bcs.n	800117c <esp8266_wait_response_timeout+0x24>
 8001178:	2300      	movs	r3, #0
 800117a:	e005      	b.n	8001188 <esp8266_wait_response_timeout+0x30>
    while (!esp8266_is_response_ready()) {
 800117c:	f7ff ffca 	bl	8001114 <esp8266_is_response_ready>
 8001180:	4603      	mov	r3, r0
 8001182:	2b00      	cmp	r3, #0
 8001184:	d0f0      	beq.n	8001168 <esp8266_wait_response_timeout+0x10>
    }
    return true;
 8001186:	2301      	movs	r3, #1
}
 8001188:	4618      	mov	r0, r3
 800118a:	3710      	adds	r7, #16
 800118c:	46bd      	mov	sp, r7
 800118e:	bd80      	pop	{r7, pc}

08001190 <esp8266_reset_and_reconnect>:
    esp8266_send_command(command);
    esp8266_receive_response_IT();
    esp8266_wait_response_timeout(5000);  // Espera una respuesta del ESP8266
}

void esp8266_reset_and_reconnect(const char* ssid, const char* password) {
 8001190:	b580      	push	{r7, lr}
 8001192:	b09c      	sub	sp, #112	@ 0x70
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
 8001198:	6039      	str	r1, [r7, #0]
	esp8266_send_command("AT+RST\r\n");
 800119a:	480f      	ldr	r0, [pc, #60]	@ (80011d8 <esp8266_reset_and_reconnect+0x48>)
 800119c:	f7ff ffa4 	bl	80010e8 <esp8266_send_command>
	esp8266_wait_response_timeout(2000);		// Espera
 80011a0:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 80011a4:	f7ff ffd8 	bl	8001158 <esp8266_wait_response_timeout>
	esp8266_clear_response_flag();
 80011a8:	f7ff ffca 	bl	8001140 <esp8266_clear_response_flag>
	// Conectar a WiFi (sin configurar el modo station nuevamente)
	char connectCmd[100];
	sprintf(connectCmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 80011ac:	f107 000c 	add.w	r0, r7, #12
 80011b0:	683b      	ldr	r3, [r7, #0]
 80011b2:	687a      	ldr	r2, [r7, #4]
 80011b4:	4909      	ldr	r1, [pc, #36]	@ (80011dc <esp8266_reset_and_reconnect+0x4c>)
 80011b6:	f006 f955 	bl	8007464 <siprintf>
	esp8266_send_command(connectCmd);
 80011ba:	f107 030c 	add.w	r3, r7, #12
 80011be:	4618      	mov	r0, r3
 80011c0:	f7ff ff92 	bl	80010e8 <esp8266_send_command>
	esp8266_wait_response_timeout(5000);			// Espera
 80011c4:	f241 3088 	movw	r0, #5000	@ 0x1388
 80011c8:	f7ff ffc6 	bl	8001158 <esp8266_wait_response_timeout>
	esp8266_clear_response_flag();
 80011cc:	f7ff ffb8 	bl	8001140 <esp8266_clear_response_flag>
}
 80011d0:	bf00      	nop
 80011d2:	3770      	adds	r7, #112	@ 0x70
 80011d4:	46bd      	mov	sp, r7
 80011d6:	bd80      	pop	{r7, pc}
 80011d8:	0800ad40 	.word	0x0800ad40
 80011dc:	0800ad4c 	.word	0x0800ad4c

080011e0 <LCD_Init>:
static void LCD_EnablePulse(void);
static void LCD_Send(uint8_t value, uint8_t mode);

static uint32_t lastTick = 0;

void LCD_Init(void) {
 80011e0:	b580      	push	{r7, lr}
 80011e2:	af00      	add	r7, sp, #0
//    HAL_Delay(20); // Wait for LCD to power up
	// Esperar 20 ms sin bloquear
	lastTick = HAL_GetTick();
 80011e4:	f001 fb56 	bl	8002894 <HAL_GetTick>
 80011e8:	4603      	mov	r3, r0
 80011ea:	4a18      	ldr	r2, [pc, #96]	@ (800124c <LCD_Init+0x6c>)
 80011ec:	6013      	str	r3, [r2, #0]
	while ((HAL_GetTick() - lastTick) < 20);  // Espera activa de 20 ms
 80011ee:	bf00      	nop
 80011f0:	f001 fb50 	bl	8002894 <HAL_GetTick>
 80011f4:	4602      	mov	r2, r0
 80011f6:	4b15      	ldr	r3, [pc, #84]	@ (800124c <LCD_Init+0x6c>)
 80011f8:	681b      	ldr	r3, [r3, #0]
 80011fa:	1ad3      	subs	r3, r2, r3
 80011fc:	2b13      	cmp	r3, #19
 80011fe:	d9f7      	bls.n	80011f0 <LCD_Init+0x10>

	// Inicializar en modo de 4 bits
	LCD_Send(0x33, 0);  // Inicializa en modo de 8 bits
 8001200:	2100      	movs	r1, #0
 8001202:	2033      	movs	r0, #51	@ 0x33
 8001204:	f000 f8b8 	bl	8001378 <LCD_Send>
	LCD_Send(0x32, 0);  // Cambia a modo de 4 bits
 8001208:	2100      	movs	r1, #0
 800120a:	2032      	movs	r0, #50	@ 0x32
 800120c:	f000 f8b4 	bl	8001378 <LCD_Send>
	LCD_SendCommand(0x28);  // 2 líneas, matriz de 5x7
 8001210:	2028      	movs	r0, #40	@ 0x28
 8001212:	f000 f81d 	bl	8001250 <LCD_SendCommand>
	LCD_SendCommand(0x0C);  // Mostrar encendido, cursor apagado
 8001216:	200c      	movs	r0, #12
 8001218:	f000 f81a 	bl	8001250 <LCD_SendCommand>
	LCD_SendCommand(0x06);  // Incrementar cursor
 800121c:	2006      	movs	r0, #6
 800121e:	f000 f817 	bl	8001250 <LCD_SendCommand>
	LCD_SendCommand(0x01);  // Limpiar pantalla
 8001222:	2001      	movs	r0, #1
 8001224:	f000 f814 	bl	8001250 <LCD_SendCommand>
    //HAL_Delay(2);
	lastTick = HAL_GetTick();
 8001228:	f001 fb34 	bl	8002894 <HAL_GetTick>
 800122c:	4603      	mov	r3, r0
 800122e:	4a07      	ldr	r2, [pc, #28]	@ (800124c <LCD_Init+0x6c>)
 8001230:	6013      	str	r3, [r2, #0]
	while ((HAL_GetTick() - lastTick) < 2);  // Espera activa de 2 ms
 8001232:	bf00      	nop
 8001234:	f001 fb2e 	bl	8002894 <HAL_GetTick>
 8001238:	4602      	mov	r2, r0
 800123a:	4b04      	ldr	r3, [pc, #16]	@ (800124c <LCD_Init+0x6c>)
 800123c:	681b      	ldr	r3, [r3, #0]
 800123e:	1ad3      	subs	r3, r2, r3
 8001240:	2b01      	cmp	r3, #1
 8001242:	d9f7      	bls.n	8001234 <LCD_Init+0x54>

}
 8001244:	bf00      	nop
 8001246:	bf00      	nop
 8001248:	bd80      	pop	{r7, pc}
 800124a:	bf00      	nop
 800124c:	20000410 	.word	0x20000410

08001250 <LCD_SendCommand>:

void LCD_SendCommand(uint8_t cmd) {
 8001250:	b580      	push	{r7, lr}
 8001252:	b082      	sub	sp, #8
 8001254:	af00      	add	r7, sp, #0
 8001256:	4603      	mov	r3, r0
 8001258:	71fb      	strb	r3, [r7, #7]
    LCD_Send(cmd, 0);
 800125a:	79fb      	ldrb	r3, [r7, #7]
 800125c:	2100      	movs	r1, #0
 800125e:	4618      	mov	r0, r3
 8001260:	f000 f88a 	bl	8001378 <LCD_Send>
}
 8001264:	bf00      	nop
 8001266:	3708      	adds	r7, #8
 8001268:	46bd      	mov	sp, r7
 800126a:	bd80      	pop	{r7, pc}

0800126c <LCD_SendData>:

void LCD_SendData(uint8_t data) {
 800126c:	b580      	push	{r7, lr}
 800126e:	b082      	sub	sp, #8
 8001270:	af00      	add	r7, sp, #0
 8001272:	4603      	mov	r3, r0
 8001274:	71fb      	strb	r3, [r7, #7]
    LCD_Send(data, 1);
 8001276:	79fb      	ldrb	r3, [r7, #7]
 8001278:	2101      	movs	r1, #1
 800127a:	4618      	mov	r0, r3
 800127c:	f000 f87c 	bl	8001378 <LCD_Send>
}
 8001280:	bf00      	nop
 8001282:	3708      	adds	r7, #8
 8001284:	46bd      	mov	sp, r7
 8001286:	bd80      	pop	{r7, pc}

08001288 <LCD_Print>:

void LCD_Print(const char* str) {
 8001288:	b580      	push	{r7, lr}
 800128a:	b082      	sub	sp, #8
 800128c:	af00      	add	r7, sp, #0
 800128e:	6078      	str	r0, [r7, #4]
    while (*str) {
 8001290:	e007      	b.n	80012a2 <LCD_Print+0x1a>
        LCD_SendData((uint8_t)(*str));
 8001292:	687b      	ldr	r3, [r7, #4]
 8001294:	781b      	ldrb	r3, [r3, #0]
 8001296:	4618      	mov	r0, r3
 8001298:	f7ff ffe8 	bl	800126c <LCD_SendData>
        str++;
 800129c:	687b      	ldr	r3, [r7, #4]
 800129e:	3301      	adds	r3, #1
 80012a0:	607b      	str	r3, [r7, #4]
    while (*str) {
 80012a2:	687b      	ldr	r3, [r7, #4]
 80012a4:	781b      	ldrb	r3, [r3, #0]
 80012a6:	2b00      	cmp	r3, #0
 80012a8:	d1f3      	bne.n	8001292 <LCD_Print+0xa>
    }
}
 80012aa:	bf00      	nop
 80012ac:	bf00      	nop
 80012ae:	3708      	adds	r7, #8
 80012b0:	46bd      	mov	sp, r7
 80012b2:	bd80      	pop	{r7, pc}

080012b4 <LCD_SetCursor>:

void LCD_SetCursor(uint8_t row, uint8_t col) {
 80012b4:	b580      	push	{r7, lr}
 80012b6:	b084      	sub	sp, #16
 80012b8:	af00      	add	r7, sp, #0
 80012ba:	4603      	mov	r3, r0
 80012bc:	460a      	mov	r2, r1
 80012be:	71fb      	strb	r3, [r7, #7]
 80012c0:	4613      	mov	r3, r2
 80012c2:	71bb      	strb	r3, [r7, #6]
    uint8_t address = (row == 0) ? col : (col + 0x40);
 80012c4:	79fb      	ldrb	r3, [r7, #7]
 80012c6:	2b00      	cmp	r3, #0
 80012c8:	d003      	beq.n	80012d2 <LCD_SetCursor+0x1e>
 80012ca:	79bb      	ldrb	r3, [r7, #6]
 80012cc:	3340      	adds	r3, #64	@ 0x40
 80012ce:	b2db      	uxtb	r3, r3
 80012d0:	e000      	b.n	80012d4 <LCD_SetCursor+0x20>
 80012d2:	79bb      	ldrb	r3, [r7, #6]
 80012d4:	73fb      	strb	r3, [r7, #15]
    LCD_SendCommand(0x80 | address);
 80012d6:	7bfb      	ldrb	r3, [r7, #15]
 80012d8:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 80012dc:	b2db      	uxtb	r3, r3
 80012de:	4618      	mov	r0, r3
 80012e0:	f7ff ffb6 	bl	8001250 <LCD_SendCommand>
}
 80012e4:	bf00      	nop
 80012e6:	3710      	adds	r7, #16
 80012e8:	46bd      	mov	sp, r7
 80012ea:	bd80      	pop	{r7, pc}

080012ec <LCD_Clear>:

void LCD_Clear(void) {
 80012ec:	b580      	push	{r7, lr}
 80012ee:	af00      	add	r7, sp, #0
    LCD_SendCommand(0x01); // Clear display command
 80012f0:	2001      	movs	r0, #1
 80012f2:	f7ff ffad 	bl	8001250 <LCD_SendCommand>
    //HAL_Delay(2);          // Delay to allow the command to process
    lastTick = HAL_GetTick();
 80012f6:	f001 facd 	bl	8002894 <HAL_GetTick>
 80012fa:	4603      	mov	r3, r0
 80012fc:	4a06      	ldr	r2, [pc, #24]	@ (8001318 <LCD_Clear+0x2c>)
 80012fe:	6013      	str	r3, [r2, #0]
	while ((HAL_GetTick() - lastTick) < 2);  // Espera activa de 2 ms
 8001300:	bf00      	nop
 8001302:	f001 fac7 	bl	8002894 <HAL_GetTick>
 8001306:	4602      	mov	r2, r0
 8001308:	4b03      	ldr	r3, [pc, #12]	@ (8001318 <LCD_Clear+0x2c>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	1ad3      	subs	r3, r2, r3
 800130e:	2b01      	cmp	r3, #1
 8001310:	d9f7      	bls.n	8001302 <LCD_Clear+0x16>
}
 8001312:	bf00      	nop
 8001314:	bf00      	nop
 8001316:	bd80      	pop	{r7, pc}
 8001318:	20000410 	.word	0x20000410

0800131c <LCD_EnablePulse>:

static void LCD_EnablePulse(void) {
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_SET);
 8001320:	2201      	movs	r2, #1
 8001322:	2102      	movs	r1, #2
 8001324:	4812      	ldr	r0, [pc, #72]	@ (8001370 <LCD_EnablePulse+0x54>)
 8001326:	f001 fe0d 	bl	8002f44 <HAL_GPIO_WritePin>
    //HAL_Delay(1);
    lastTick = HAL_GetTick();
 800132a:	f001 fab3 	bl	8002894 <HAL_GetTick>
 800132e:	4603      	mov	r3, r0
 8001330:	4a10      	ldr	r2, [pc, #64]	@ (8001374 <LCD_EnablePulse+0x58>)
 8001332:	6013      	str	r3, [r2, #0]
	while ((HAL_GetTick() - lastTick) < 1);  // Espera activa de 1 ms
 8001334:	bf00      	nop
 8001336:	f001 faad 	bl	8002894 <HAL_GetTick>
 800133a:	4602      	mov	r2, r0
 800133c:	4b0d      	ldr	r3, [pc, #52]	@ (8001374 <LCD_EnablePulse+0x58>)
 800133e:	681b      	ldr	r3, [r3, #0]
 8001340:	429a      	cmp	r2, r3
 8001342:	d0f8      	beq.n	8001336 <LCD_EnablePulse+0x1a>
    HAL_GPIO_WritePin(LCD_E_PORT, LCD_E_PIN, GPIO_PIN_RESET);
 8001344:	2200      	movs	r2, #0
 8001346:	2102      	movs	r1, #2
 8001348:	4809      	ldr	r0, [pc, #36]	@ (8001370 <LCD_EnablePulse+0x54>)
 800134a:	f001 fdfb 	bl	8002f44 <HAL_GPIO_WritePin>
//    HAL_Delay(1);
    lastTick = HAL_GetTick();
 800134e:	f001 faa1 	bl	8002894 <HAL_GetTick>
 8001352:	4603      	mov	r3, r0
 8001354:	4a07      	ldr	r2, [pc, #28]	@ (8001374 <LCD_EnablePulse+0x58>)
 8001356:	6013      	str	r3, [r2, #0]
    while ((HAL_GetTick() - lastTick) < 1);  // Espera activa de 1 ms
 8001358:	bf00      	nop
 800135a:	f001 fa9b 	bl	8002894 <HAL_GetTick>
 800135e:	4602      	mov	r2, r0
 8001360:	4b04      	ldr	r3, [pc, #16]	@ (8001374 <LCD_EnablePulse+0x58>)
 8001362:	681b      	ldr	r3, [r3, #0]
 8001364:	429a      	cmp	r2, r3
 8001366:	d0f8      	beq.n	800135a <LCD_EnablePulse+0x3e>
}
 8001368:	bf00      	nop
 800136a:	bf00      	nop
 800136c:	bd80      	pop	{r7, pc}
 800136e:	bf00      	nop
 8001370:	40020800 	.word	0x40020800
 8001374:	20000410 	.word	0x20000410

08001378 <LCD_Send>:

static void LCD_Send(uint8_t value, uint8_t mode) {
 8001378:	b580      	push	{r7, lr}
 800137a:	b082      	sub	sp, #8
 800137c:	af00      	add	r7, sp, #0
 800137e:	4603      	mov	r3, r0
 8001380:	460a      	mov	r2, r1
 8001382:	71fb      	strb	r3, [r7, #7]
 8001384:	4613      	mov	r3, r2
 8001386:	71bb      	strb	r3, [r7, #6]
    HAL_GPIO_WritePin(LCD_RS_PORT, LCD_RS_PIN, (mode ? GPIO_PIN_SET : GPIO_PIN_RESET));
 8001388:	79bb      	ldrb	r3, [r7, #6]
 800138a:	2b00      	cmp	r3, #0
 800138c:	bf14      	ite	ne
 800138e:	2301      	movne	r3, #1
 8001390:	2300      	moveq	r3, #0
 8001392:	b2db      	uxtb	r3, r3
 8001394:	461a      	mov	r2, r3
 8001396:	2101      	movs	r1, #1
 8001398:	482e      	ldr	r0, [pc, #184]	@ (8001454 <LCD_Send+0xdc>)
 800139a:	f001 fdd3 	bl	8002f44 <HAL_GPIO_WritePin>

    // Send high nibble
    HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN, (value & 0x10) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800139e:	79fb      	ldrb	r3, [r7, #7]
 80013a0:	111b      	asrs	r3, r3, #4
 80013a2:	b2db      	uxtb	r3, r3
 80013a4:	f003 0301 	and.w	r3, r3, #1
 80013a8:	b2db      	uxtb	r3, r3
 80013aa:	461a      	mov	r2, r3
 80013ac:	2104      	movs	r1, #4
 80013ae:	4829      	ldr	r0, [pc, #164]	@ (8001454 <LCD_Send+0xdc>)
 80013b0:	f001 fdc8 	bl	8002f44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_PORT, LCD_D5_PIN, (value & 0x20) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013b4:	79fb      	ldrb	r3, [r7, #7]
 80013b6:	115b      	asrs	r3, r3, #5
 80013b8:	b2db      	uxtb	r3, r3
 80013ba:	f003 0301 	and.w	r3, r3, #1
 80013be:	b2db      	uxtb	r3, r3
 80013c0:	461a      	mov	r2, r3
 80013c2:	2108      	movs	r1, #8
 80013c4:	4823      	ldr	r0, [pc, #140]	@ (8001454 <LCD_Send+0xdc>)
 80013c6:	f001 fdbd 	bl	8002f44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_PORT, LCD_D6_PIN, (value & 0x40) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013ca:	79fb      	ldrb	r3, [r7, #7]
 80013cc:	119b      	asrs	r3, r3, #6
 80013ce:	b2db      	uxtb	r3, r3
 80013d0:	f003 0301 	and.w	r3, r3, #1
 80013d4:	b2db      	uxtb	r3, r3
 80013d6:	461a      	mov	r2, r3
 80013d8:	2110      	movs	r1, #16
 80013da:	481e      	ldr	r0, [pc, #120]	@ (8001454 <LCD_Send+0xdc>)
 80013dc:	f001 fdb2 	bl	8002f44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_PORT, LCD_D7_PIN, (value & 0x80) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013e0:	79fb      	ldrb	r3, [r7, #7]
 80013e2:	09db      	lsrs	r3, r3, #7
 80013e4:	b2db      	uxtb	r3, r3
 80013e6:	461a      	mov	r2, r3
 80013e8:	2120      	movs	r1, #32
 80013ea:	481a      	ldr	r0, [pc, #104]	@ (8001454 <LCD_Send+0xdc>)
 80013ec:	f001 fdaa 	bl	8002f44 <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 80013f0:	f7ff ff94 	bl	800131c <LCD_EnablePulse>

    // Send low nibble
    HAL_GPIO_WritePin(LCD_D4_PORT, LCD_D4_PIN, (value & 0x01) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 80013f4:	79fb      	ldrb	r3, [r7, #7]
 80013f6:	f003 0301 	and.w	r3, r3, #1
 80013fa:	b2db      	uxtb	r3, r3
 80013fc:	461a      	mov	r2, r3
 80013fe:	2104      	movs	r1, #4
 8001400:	4814      	ldr	r0, [pc, #80]	@ (8001454 <LCD_Send+0xdc>)
 8001402:	f001 fd9f 	bl	8002f44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D5_PORT, LCD_D5_PIN, (value & 0x02) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001406:	79fb      	ldrb	r3, [r7, #7]
 8001408:	105b      	asrs	r3, r3, #1
 800140a:	b2db      	uxtb	r3, r3
 800140c:	f003 0301 	and.w	r3, r3, #1
 8001410:	b2db      	uxtb	r3, r3
 8001412:	461a      	mov	r2, r3
 8001414:	2108      	movs	r1, #8
 8001416:	480f      	ldr	r0, [pc, #60]	@ (8001454 <LCD_Send+0xdc>)
 8001418:	f001 fd94 	bl	8002f44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D6_PORT, LCD_D6_PIN, (value & 0x04) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 800141c:	79fb      	ldrb	r3, [r7, #7]
 800141e:	109b      	asrs	r3, r3, #2
 8001420:	b2db      	uxtb	r3, r3
 8001422:	f003 0301 	and.w	r3, r3, #1
 8001426:	b2db      	uxtb	r3, r3
 8001428:	461a      	mov	r2, r3
 800142a:	2110      	movs	r1, #16
 800142c:	4809      	ldr	r0, [pc, #36]	@ (8001454 <LCD_Send+0xdc>)
 800142e:	f001 fd89 	bl	8002f44 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(LCD_D7_PORT, LCD_D7_PIN, (value & 0x08) ? GPIO_PIN_SET : GPIO_PIN_RESET);
 8001432:	79fb      	ldrb	r3, [r7, #7]
 8001434:	10db      	asrs	r3, r3, #3
 8001436:	b2db      	uxtb	r3, r3
 8001438:	f003 0301 	and.w	r3, r3, #1
 800143c:	b2db      	uxtb	r3, r3
 800143e:	461a      	mov	r2, r3
 8001440:	2120      	movs	r1, #32
 8001442:	4804      	ldr	r0, [pc, #16]	@ (8001454 <LCD_Send+0xdc>)
 8001444:	f001 fd7e 	bl	8002f44 <HAL_GPIO_WritePin>
    LCD_EnablePulse();
 8001448:	f7ff ff68 	bl	800131c <LCD_EnablePulse>
}
 800144c:	bf00      	nop
 800144e:	3708      	adds	r7, #8
 8001450:	46bd      	mov	sp, r7
 8001452:	bd80      	pop	{r7, pc}
 8001454:	40020800 	.word	0x40020800

08001458 <ITM_SendChar>:
           \li Is blocking when a debugger is connected, but the previous character sent has not been transmitted.
  \param [in]     ch  Character to transmit.
  \returns            Character to transmit.
 */
__STATIC_INLINE uint32_t ITM_SendChar (uint32_t ch)
{
 8001458:	b480      	push	{r7}
 800145a:	b083      	sub	sp, #12
 800145c:	af00      	add	r7, sp, #0
 800145e:	6078      	str	r0, [r7, #4]
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 8001460:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001464:	f8d3 3e80 	ldr.w	r3, [r3, #3712]	@ 0xe80
 8001468:	f003 0301 	and.w	r3, r3, #1
 800146c:	2b00      	cmp	r3, #0
 800146e:	d013      	beq.n	8001498 <ITM_SendChar+0x40>
      ((ITM->TER & 1UL               ) != 0UL)   )     /* ITM Port #0 enabled */
 8001470:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001474:	f8d3 3e00 	ldr.w	r3, [r3, #3584]	@ 0xe00
 8001478:	f003 0301 	and.w	r3, r3, #1
  if (((ITM->TCR & ITM_TCR_ITMENA_Msk) != 0UL) &&      /* ITM enabled */
 800147c:	2b00      	cmp	r3, #0
 800147e:	d00b      	beq.n	8001498 <ITM_SendChar+0x40>
  {
    while (ITM->PORT[0U].u32 == 0UL)
 8001480:	e000      	b.n	8001484 <ITM_SendChar+0x2c>
    {
      __NOP();
 8001482:	bf00      	nop
    while (ITM->PORT[0U].u32 == 0UL)
 8001484:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001488:	681b      	ldr	r3, [r3, #0]
 800148a:	2b00      	cmp	r3, #0
 800148c:	d0f9      	beq.n	8001482 <ITM_SendChar+0x2a>
    }
    ITM->PORT[0U].u8 = (uint8_t)ch;
 800148e:	f04f 4360 	mov.w	r3, #3758096384	@ 0xe0000000
 8001492:	687a      	ldr	r2, [r7, #4]
 8001494:	b2d2      	uxtb	r2, r2
 8001496:	701a      	strb	r2, [r3, #0]
  }
  return (ch);
 8001498:	687b      	ldr	r3, [r7, #4]
}
 800149a:	4618      	mov	r0, r3
 800149c:	370c      	adds	r7, #12
 800149e:	46bd      	mov	sp, r7
 80014a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80014a4:	4770      	bx	lr

080014a6 <_write>:
/* USER CODE END PFP */

/* Private user code ---------------------------------------------------------*/
/* USER CODE BEGIN 0 */

int _write(int file, char *ptr, int len){
 80014a6:	b580      	push	{r7, lr}
 80014a8:	b086      	sub	sp, #24
 80014aa:	af00      	add	r7, sp, #0
 80014ac:	60f8      	str	r0, [r7, #12]
 80014ae:	60b9      	str	r1, [r7, #8]
 80014b0:	607a      	str	r2, [r7, #4]
	int i=0;
 80014b2:	2300      	movs	r3, #0
 80014b4:	617b      	str	r3, [r7, #20]
	for (i=0; i<len;i++){
 80014b6:	2300      	movs	r3, #0
 80014b8:	617b      	str	r3, [r7, #20]
 80014ba:	e007      	b.n	80014cc <_write+0x26>
		ITM_SendChar((*ptr));
 80014bc:	68bb      	ldr	r3, [r7, #8]
 80014be:	781b      	ldrb	r3, [r3, #0]
 80014c0:	4618      	mov	r0, r3
 80014c2:	f7ff ffc9 	bl	8001458 <ITM_SendChar>
	for (i=0; i<len;i++){
 80014c6:	697b      	ldr	r3, [r7, #20]
 80014c8:	3301      	adds	r3, #1
 80014ca:	617b      	str	r3, [r7, #20]
 80014cc:	697a      	ldr	r2, [r7, #20]
 80014ce:	687b      	ldr	r3, [r7, #4]
 80014d0:	429a      	cmp	r2, r3
 80014d2:	dbf3      	blt.n	80014bc <_write+0x16>

	}
	return len;
 80014d4:	687b      	ldr	r3, [r7, #4]
}
 80014d6:	4618      	mov	r0, r3
 80014d8:	3718      	adds	r7, #24
 80014da:	46bd      	mov	sp, r7
 80014dc:	bd80      	pop	{r7, pc}
	...

080014e0 <floatToStr>:


const char* floatToStr(float num, int precision) {
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b084      	sub	sp, #16
 80014e4:	af02      	add	r7, sp, #8
 80014e6:	ed87 0a01 	vstr	s0, [r7, #4]
 80014ea:	6038      	str	r0, [r7, #0]
    static char str[20]; // Buffer estático para almacenar la cadena resultante
    sprintf(str, "%.*f", precision, num);
 80014ec:	6878      	ldr	r0, [r7, #4]
 80014ee:	f7ff f833 	bl	8000558 <__aeabi_f2d>
 80014f2:	4602      	mov	r2, r0
 80014f4:	460b      	mov	r3, r1
 80014f6:	e9cd 2300 	strd	r2, r3, [sp]
 80014fa:	683a      	ldr	r2, [r7, #0]
 80014fc:	4904      	ldr	r1, [pc, #16]	@ (8001510 <floatToStr+0x30>)
 80014fe:	4805      	ldr	r0, [pc, #20]	@ (8001514 <floatToStr+0x34>)
 8001500:	f005 ffb0 	bl	8007464 <siprintf>
    return str;
 8001504:	4b03      	ldr	r3, [pc, #12]	@ (8001514 <floatToStr+0x34>)
}
 8001506:	4618      	mov	r0, r3
 8001508:	3708      	adds	r7, #8
 800150a:	46bd      	mov	sp, r7
 800150c:	bd80      	pop	{r7, pc}
 800150e:	bf00      	nop
 8001510:	0800ad8c 	.word	0x0800ad8c
 8001514:	2000058c 	.word	0x2000058c

08001518 <LCD_Update_Variables>:

void LCD_Update_Variables(float* temperature, float* humidity, float* luminosity) {
 8001518:	b580      	push	{r7, lr}
 800151a:	b088      	sub	sp, #32
 800151c:	af00      	add	r7, sp, #0
 800151e:	60f8      	str	r0, [r7, #12]
 8001520:	60b9      	str	r1, [r7, #8]
 8001522:	607a      	str	r2, [r7, #4]
    const char* strTemp = floatToStr(*temperature, 2);
 8001524:	68fb      	ldr	r3, [r7, #12]
 8001526:	edd3 7a00 	vldr	s15, [r3]
 800152a:	2002      	movs	r0, #2
 800152c:	eeb0 0a67 	vmov.f32	s0, s15
 8001530:	f7ff ffd6 	bl	80014e0 <floatToStr>
 8001534:	61f8      	str	r0, [r7, #28]
    LCD_Clear();
 8001536:	f7ff fed9 	bl	80012ec <LCD_Clear>
    LCD_SetCursor(0, 0);
 800153a:	2100      	movs	r1, #0
 800153c:	2000      	movs	r0, #0
 800153e:	f7ff feb9 	bl	80012b4 <LCD_SetCursor>
    LCD_Print("T:");
 8001542:	4819      	ldr	r0, [pc, #100]	@ (80015a8 <LCD_Update_Variables+0x90>)
 8001544:	f7ff fea0 	bl	8001288 <LCD_Print>
    LCD_Print(strTemp);
 8001548:	69f8      	ldr	r0, [r7, #28]
 800154a:	f7ff fe9d 	bl	8001288 <LCD_Print>
    //LCD_SendData(223);  // Enviar código ASCII del símbolo de grados para HD44780
    LCD_Print("C | H:");
 800154e:	4817      	ldr	r0, [pc, #92]	@ (80015ac <LCD_Update_Variables+0x94>)
 8001550:	f7ff fe9a 	bl	8001288 <LCD_Print>
    const char* strHum = floatToStr(*humidity, 0);
 8001554:	68bb      	ldr	r3, [r7, #8]
 8001556:	edd3 7a00 	vldr	s15, [r3]
 800155a:	2000      	movs	r0, #0
 800155c:	eeb0 0a67 	vmov.f32	s0, s15
 8001560:	f7ff ffbe 	bl	80014e0 <floatToStr>
 8001564:	61b8      	str	r0, [r7, #24]
    LCD_Print(strHum);
 8001566:	69b8      	ldr	r0, [r7, #24]
 8001568:	f7ff fe8e 	bl	8001288 <LCD_Print>
    LCD_Print("%");
 800156c:	4810      	ldr	r0, [pc, #64]	@ (80015b0 <LCD_Update_Variables+0x98>)
 800156e:	f7ff fe8b 	bl	8001288 <LCD_Print>
    const char* strLux = floatToStr(*luminosity, 3);
 8001572:	687b      	ldr	r3, [r7, #4]
 8001574:	edd3 7a00 	vldr	s15, [r3]
 8001578:	2003      	movs	r0, #3
 800157a:	eeb0 0a67 	vmov.f32	s0, s15
 800157e:	f7ff ffaf 	bl	80014e0 <floatToStr>
 8001582:	6178      	str	r0, [r7, #20]
    LCD_SetCursor(1, 0);
 8001584:	2100      	movs	r1, #0
 8001586:	2001      	movs	r0, #1
 8001588:	f7ff fe94 	bl	80012b4 <LCD_SetCursor>
    LCD_Print("  L: ");
 800158c:	4809      	ldr	r0, [pc, #36]	@ (80015b4 <LCD_Update_Variables+0x9c>)
 800158e:	f7ff fe7b 	bl	8001288 <LCD_Print>
	LCD_Print(strLux);
 8001592:	6978      	ldr	r0, [r7, #20]
 8001594:	f7ff fe78 	bl	8001288 <LCD_Print>
	LCD_Print(" lux");
 8001598:	4807      	ldr	r0, [pc, #28]	@ (80015b8 <LCD_Update_Variables+0xa0>)
 800159a:	f7ff fe75 	bl	8001288 <LCD_Print>
}
 800159e:	bf00      	nop
 80015a0:	3720      	adds	r7, #32
 80015a2:	46bd      	mov	sp, r7
 80015a4:	bd80      	pop	{r7, pc}
 80015a6:	bf00      	nop
 80015a8:	0800ad94 	.word	0x0800ad94
 80015ac:	0800ad98 	.word	0x0800ad98
 80015b0:	0800ada0 	.word	0x0800ada0
 80015b4:	0800ada4 	.word	0x0800ada4
 80015b8:	0800adac 	.word	0x0800adac

080015bc <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 80015bc:	b580      	push	{r7, lr}
 80015be:	b082      	sub	sp, #8
 80015c0:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
  lastTimeMeasurement = HAL_GetTick();
 80015c2:	f001 f967 	bl	8002894 <HAL_GetTick>
 80015c6:	4603      	mov	r3, r0
 80015c8:	4a92      	ldr	r2, [pc, #584]	@ (8001814 <main+0x258>)
 80015ca:	6013      	str	r3, [r2, #0]
  lastTimeDisplay = HAL_GetTick();
 80015cc:	f001 f962 	bl	8002894 <HAL_GetTick>
 80015d0:	4603      	mov	r3, r0
 80015d2:	4a91      	ldr	r2, [pc, #580]	@ (8001818 <main+0x25c>)
 80015d4:	6013      	str	r3, [r2, #0]
  lastTimeSend = HAL_GetTick();
 80015d6:	f001 f95d 	bl	8002894 <HAL_GetTick>
 80015da:	4603      	mov	r3, r0
 80015dc:	4a8f      	ldr	r2, [pc, #572]	@ (800181c <main+0x260>)
 80015de:	6013      	str	r3, [r2, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 80015e0:	f001 f8f2 	bl	80027c8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 80015e4:	f000 f93e 	bl	8001864 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 80015e8:	f000 fa60 	bl	8001aac <MX_GPIO_Init>
  MX_I2C1_Init();
 80015ec:	f000 f9a2 	bl	8001934 <MX_I2C1_Init>
  MX_USART2_UART_Init();
 80015f0:	f000 fa32 	bl	8001a58 <MX_USART2_UART_Init>
  MX_I2C2_Init();
 80015f4:	f000 f9cc 	bl	8001990 <MX_I2C2_Init>
  MX_SPI1_Init();
 80015f8:	f000 f9f8 	bl	80019ec <MX_SPI1_Init>
  MX_FATFS_Init();
 80015fc:	f004 fed8 	bl	80063b0 <MX_FATFS_Init>
  /* USER CODE BEGIN 2 */
  MX_NVIC_Init();
 8001600:	f000 faf4 	bl	8001bec <MX_NVIC_Init>

  LCD_Init();
 8001604:	f7ff fdec 	bl	80011e0 <LCD_Init>
  //ResetSHT85();      // Añade esto antes de iniciar en modo periódico


  SHT85_Init();
 8001608:	f000 fb39 	bl	8001c7e <SHT85_Init>

  HAL_Delay(500);
 800160c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001610:	f001 f94c 	bl	80028ac <HAL_Delay>

  VEML7700_Init();
 8001614:	f000 fede 	bl	80023d4 <VEML7700_Init>
  connectToWiFi(WIFI_SSID, WIFI_PASS);
 8001618:	4b81      	ldr	r3, [pc, #516]	@ (8001820 <main+0x264>)
 800161a:	681b      	ldr	r3, [r3, #0]
 800161c:	4a81      	ldr	r2, [pc, #516]	@ (8001824 <main+0x268>)
 800161e:	6812      	ldr	r2, [r2, #0]
 8001620:	4611      	mov	r1, r2
 8001622:	4618      	mov	r0, r3
 8001624:	f000 ff34 	bl	8002490 <connectToWiFi>



  printf("Inicio");
 8001628:	487f      	ldr	r0, [pc, #508]	@ (8001828 <main+0x26c>)
 800162a:	f005 feab 	bl	8007384 <iprintf>

  if(isWiFiConnected() == 1){
 800162e:	f000 ff65 	bl	80024fc <isWiFiConnected>
 8001632:	4603      	mov	r3, r0
 8001634:	2b01      	cmp	r3, #1
 8001636:	d10f      	bne.n	8001658 <main+0x9c>
	LCD_Clear();
 8001638:	f7ff fe58 	bl	80012ec <LCD_Clear>
	LCD_SetCursor(0, 0);
 800163c:	2100      	movs	r1, #0
 800163e:	2000      	movs	r0, #0
 8001640:	f7ff fe38 	bl	80012b4 <LCD_SetCursor>
	LCD_Print("Wifi conectado");
 8001644:	4879      	ldr	r0, [pc, #484]	@ (800182c <main+0x270>)
 8001646:	f7ff fe1f 	bl	8001288 <LCD_Print>
	LCD_SetCursor(1, 0);
 800164a:	2100      	movs	r1, #0
 800164c:	2001      	movs	r0, #1
 800164e:	f7ff fe31 	bl	80012b4 <LCD_SetCursor>
	LCD_Print("correctamente");
 8001652:	4877      	ldr	r0, [pc, #476]	@ (8001830 <main+0x274>)
 8001654:	f7ff fe18 	bl	8001288 <LCD_Print>
  }


  Rele_Off(); // Relé inicializado en OFF
 8001658:	f000 faea 	bl	8001c30 <Rele_Off>
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

	  uint32_t currentTick = HAL_GetTick();
 800165c:	f001 f91a 	bl	8002894 <HAL_GetTick>
 8001660:	6078      	str	r0, [r7, #4]

	  printf("Bucle...");
 8001662:	4874      	ldr	r0, [pc, #464]	@ (8001834 <main+0x278>)
 8001664:	f005 fe8e 	bl	8007384 <iprintf>
	  HAL_Delay(100);
 8001668:	2064      	movs	r0, #100	@ 0x64
 800166a:	f001 f91f 	bl	80028ac <HAL_Delay>
	  // Medición de sensores
	  if (currentTick - lastTimeMeasurement >= MEASUREMENT_INTERVAL) {
 800166e:	4b69      	ldr	r3, [pc, #420]	@ (8001814 <main+0x258>)
 8001670:	681b      	ldr	r3, [r3, #0]
 8001672:	687a      	ldr	r2, [r7, #4]
 8001674:	1ad3      	subs	r3, r2, r3
 8001676:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 800167a:	d343      	bcc.n	8001704 <main+0x148>
		  //lastTimeMeasurement = currentTick;
		  lastTimeMeasurement += MEASUREMENT_INTERVAL; // Incrementar en lugar de reiniciar
 800167c:	4b65      	ldr	r3, [pc, #404]	@ (8001814 <main+0x258>)
 800167e:	681b      	ldr	r3, [r3, #0]
 8001680:	f503 737a 	add.w	r3, r3, #1000	@ 0x3e8
 8001684:	4a63      	ldr	r2, [pc, #396]	@ (8001814 <main+0x258>)
 8001686:	6013      	str	r3, [r2, #0]
		  //ReadSHT85_Periodic(&temperature, &humidity);
		  SHT85_ReadSingleShot(&temperature, &humidity);
 8001688:	496b      	ldr	r1, [pc, #428]	@ (8001838 <main+0x27c>)
 800168a:	486c      	ldr	r0, [pc, #432]	@ (800183c <main+0x280>)
 800168c:	f000 fb36 	bl	8001cfc <SHT85_ReadSingleShot>

		  //calculatorAverageTemperature(temperature, &averageTemperature);
		  //calculatorAverageHumidity(humidity, &averageHumidity);
		  SHT85_ErrorReset(&temperature, &humidity);
 8001690:	4969      	ldr	r1, [pc, #420]	@ (8001838 <main+0x27c>)
 8001692:	486a      	ldr	r0, [pc, #424]	@ (800183c <main+0x280>)
 8001694:	f000 fbb8 	bl	8001e08 <SHT85_ErrorReset>

		  ReadVEML7700(&luminosity);
 8001698:	4869      	ldr	r0, [pc, #420]	@ (8001840 <main+0x284>)
 800169a:	f000 feb9 	bl	8002410 <ReadVEML7700>
		  averageTemperature += temperature;
 800169e:	4b69      	ldr	r3, [pc, #420]	@ (8001844 <main+0x288>)
 80016a0:	ed93 7a00 	vldr	s14, [r3]
 80016a4:	4b65      	ldr	r3, [pc, #404]	@ (800183c <main+0x280>)
 80016a6:	edd3 7a00 	vldr	s15, [r3]
 80016aa:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016ae:	4b65      	ldr	r3, [pc, #404]	@ (8001844 <main+0x288>)
 80016b0:	edc3 7a00 	vstr	s15, [r3]
		  averageHumidity += humidity;
 80016b4:	4b64      	ldr	r3, [pc, #400]	@ (8001848 <main+0x28c>)
 80016b6:	ed93 7a00 	vldr	s14, [r3]
 80016ba:	4b5f      	ldr	r3, [pc, #380]	@ (8001838 <main+0x27c>)
 80016bc:	edd3 7a00 	vldr	s15, [r3]
 80016c0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016c4:	4b60      	ldr	r3, [pc, #384]	@ (8001848 <main+0x28c>)
 80016c6:	edc3 7a00 	vstr	s15, [r3]
		  averageLuminosity += luminosity;
 80016ca:	4b60      	ldr	r3, [pc, #384]	@ (800184c <main+0x290>)
 80016cc:	ed93 7a00 	vldr	s14, [r3]
 80016d0:	4b5b      	ldr	r3, [pc, #364]	@ (8001840 <main+0x284>)
 80016d2:	edd3 7a00 	vldr	s15, [r3]
 80016d6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80016da:	4b5c      	ldr	r3, [pc, #368]	@ (800184c <main+0x290>)
 80016dc:	edc3 7a00 	vstr	s15, [r3]
		  countAverage++;
 80016e0:	4b5b      	ldr	r3, [pc, #364]	@ (8001850 <main+0x294>)
 80016e2:	781b      	ldrb	r3, [r3, #0]
 80016e4:	3301      	adds	r3, #1
 80016e6:	b2da      	uxtb	r2, r3
 80016e8:	4b59      	ldr	r3, [pc, #356]	@ (8001850 <main+0x294>)
 80016ea:	701a      	strb	r2, [r3, #0]
		  //calculateAverageLuminosity(luminosity, &averageLuminosity);

		  // Display LCD
		  LCD_Update_Variables(&temperature, &humidity, &luminosity);
 80016ec:	4a54      	ldr	r2, [pc, #336]	@ (8001840 <main+0x284>)
 80016ee:	4952      	ldr	r1, [pc, #328]	@ (8001838 <main+0x27c>)
 80016f0:	4852      	ldr	r0, [pc, #328]	@ (800183c <main+0x280>)
 80016f2:	f7ff ff11 	bl	8001518 <LCD_Update_Variables>


		  // Controlar el rele basado en la luminosidad
		  Control_Rele(luminosity);
 80016f6:	4b52      	ldr	r3, [pc, #328]	@ (8001840 <main+0x284>)
 80016f8:	edd3 7a00 	vldr	s15, [r3]
 80016fc:	eeb0 0a67 	vmov.f32	s0, s15
 8001700:	f000 faa6 	bl	8001c50 <Control_Rele>
	  }

	  printf("Hola desde SWV ITM\n");
 8001704:	4853      	ldr	r0, [pc, #332]	@ (8001854 <main+0x298>)
 8001706:	f005 fea5 	bl	8007454 <puts>
	  HAL_Delay(100);
 800170a:	2064      	movs	r0, #100	@ 0x64
 800170c:	f001 f8ce 	bl	80028ac <HAL_Delay>




	  // Envío de datos a ThingSpeak
	  if (currentTick - lastTimeSend >= SEND_THINGSPEAK_INTERVAL) {
 8001710:	4b42      	ldr	r3, [pc, #264]	@ (800181c <main+0x260>)
 8001712:	681b      	ldr	r3, [r3, #0]
 8001714:	687a      	ldr	r2, [r7, #4]
 8001716:	1ad3      	subs	r3, r2, r3
 8001718:	f644 621f 	movw	r2, #19999	@ 0x4e1f
 800171c:	4293      	cmp	r3, r2
 800171e:	d962      	bls.n	80017e6 <main+0x22a>
		  //lastTimeSend = currentTick;

		  if(countAverage == 0) {
 8001720:	4b4b      	ldr	r3, [pc, #300]	@ (8001850 <main+0x294>)
 8001722:	781b      	ldrb	r3, [r3, #0]
 8001724:	2b00      	cmp	r3, #0
 8001726:	d10c      	bne.n	8001742 <main+0x186>
			  averageTemperature = temperature;
 8001728:	4b44      	ldr	r3, [pc, #272]	@ (800183c <main+0x280>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	4a45      	ldr	r2, [pc, #276]	@ (8001844 <main+0x288>)
 800172e:	6013      	str	r3, [r2, #0]
			  averageHumidity = humidity;
 8001730:	4b41      	ldr	r3, [pc, #260]	@ (8001838 <main+0x27c>)
 8001732:	681b      	ldr	r3, [r3, #0]
 8001734:	4a44      	ldr	r2, [pc, #272]	@ (8001848 <main+0x28c>)
 8001736:	6013      	str	r3, [r2, #0]
			  averageLuminosity = luminosity;
 8001738:	4b41      	ldr	r3, [pc, #260]	@ (8001840 <main+0x284>)
 800173a:	681b      	ldr	r3, [r3, #0]
 800173c:	4a43      	ldr	r2, [pc, #268]	@ (800184c <main+0x290>)
 800173e:	6013      	str	r3, [r2, #0]
 8001740:	e029      	b.n	8001796 <main+0x1da>
		  } else {
			  averageTemperature = averageTemperature/countAverage;
 8001742:	4b40      	ldr	r3, [pc, #256]	@ (8001844 <main+0x288>)
 8001744:	edd3 6a00 	vldr	s13, [r3]
 8001748:	4b41      	ldr	r3, [pc, #260]	@ (8001850 <main+0x294>)
 800174a:	781b      	ldrb	r3, [r3, #0]
 800174c:	ee07 3a90 	vmov	s15, r3
 8001750:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001754:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001758:	4b3a      	ldr	r3, [pc, #232]	@ (8001844 <main+0x288>)
 800175a:	edc3 7a00 	vstr	s15, [r3]
			  averageHumidity = averageHumidity/countAverage;
 800175e:	4b3a      	ldr	r3, [pc, #232]	@ (8001848 <main+0x28c>)
 8001760:	edd3 6a00 	vldr	s13, [r3]
 8001764:	4b3a      	ldr	r3, [pc, #232]	@ (8001850 <main+0x294>)
 8001766:	781b      	ldrb	r3, [r3, #0]
 8001768:	ee07 3a90 	vmov	s15, r3
 800176c:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001770:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001774:	4b34      	ldr	r3, [pc, #208]	@ (8001848 <main+0x28c>)
 8001776:	edc3 7a00 	vstr	s15, [r3]
			  averageLuminosity = averageLuminosity/countAverage;
 800177a:	4b34      	ldr	r3, [pc, #208]	@ (800184c <main+0x290>)
 800177c:	edd3 6a00 	vldr	s13, [r3]
 8001780:	4b33      	ldr	r3, [pc, #204]	@ (8001850 <main+0x294>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	ee07 3a90 	vmov	s15, r3
 8001788:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800178c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001790:	4b2e      	ldr	r3, [pc, #184]	@ (800184c <main+0x290>)
 8001792:	edc3 7a00 	vstr	s15, [r3]
		  }

		  lastTimeSend += SEND_THINGSPEAK_INTERVAL ; // es recomendable utilizar el método de acumulación para evitar deriva en el tiempo
 8001796:	4b21      	ldr	r3, [pc, #132]	@ (800181c <main+0x260>)
 8001798:	681b      	ldr	r3, [r3, #0]
 800179a:	f503 439c 	add.w	r3, r3, #19968	@ 0x4e00
 800179e:	3320      	adds	r3, #32
 80017a0:	4a1e      	ldr	r2, [pc, #120]	@ (800181c <main+0x260>)
 80017a2:	6013      	str	r3, [r2, #0]
		  //sendDataToThingSpeak(THINGSPEAK_API_KEY, averageTemperature, averageHumidity, averageLuminosity);
		  sendDataToThingSpeak(THINGSPEAK_API_KEY, temperature, humidity, luminosity);
 80017a4:	4b25      	ldr	r3, [pc, #148]	@ (800183c <main+0x280>)
 80017a6:	edd3 7a00 	vldr	s15, [r3]
 80017aa:	4b23      	ldr	r3, [pc, #140]	@ (8001838 <main+0x27c>)
 80017ac:	ed93 7a00 	vldr	s14, [r3]
 80017b0:	4b23      	ldr	r3, [pc, #140]	@ (8001840 <main+0x284>)
 80017b2:	edd3 6a00 	vldr	s13, [r3]
 80017b6:	eeb0 1a66 	vmov.f32	s2, s13
 80017ba:	eef0 0a47 	vmov.f32	s1, s14
 80017be:	eeb0 0a67 	vmov.f32	s0, s15
 80017c2:	4825      	ldr	r0, [pc, #148]	@ (8001858 <main+0x29c>)
 80017c4:	f000 feb6 	bl	8002534 <sendDataToThingSpeak>

		  averageTemperature = 0.0f;
 80017c8:	4b1e      	ldr	r3, [pc, #120]	@ (8001844 <main+0x288>)
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	601a      	str	r2, [r3, #0]
		  averageHumidity = 0.0f;
 80017d0:	4b1d      	ldr	r3, [pc, #116]	@ (8001848 <main+0x28c>)
 80017d2:	f04f 0200 	mov.w	r2, #0
 80017d6:	601a      	str	r2, [r3, #0]
		  averageLuminosity = 0.0f;
 80017d8:	4b1c      	ldr	r3, [pc, #112]	@ (800184c <main+0x290>)
 80017da:	f04f 0200 	mov.w	r2, #0
 80017de:	601a      	str	r2, [r3, #0]
		  countAverage = 0;
 80017e0:	4b1b      	ldr	r3, [pc, #108]	@ (8001850 <main+0x294>)
 80017e2:	2200      	movs	r2, #0
 80017e4:	701a      	strb	r2, [r3, #0]

		  // FIN COMUNICACIÓN MQTT CON RASPBERRY
	  }

	  // Reseteo de la conexión ESP8266-router cada 1 hora para asegurar que no se sature
	  if (currentTick - lastWiFiReset > WIFI_RESET_INTERVAL) {	//Forzando reinicio WiFi por mantenimiento
 80017e6:	4b1d      	ldr	r3, [pc, #116]	@ (800185c <main+0x2a0>)
 80017e8:	681b      	ldr	r3, [r3, #0]
 80017ea:	687a      	ldr	r2, [r7, #4]
 80017ec:	1ad3      	subs	r3, r2, r3
 80017ee:	4a1c      	ldr	r2, [pc, #112]	@ (8001860 <main+0x2a4>)
 80017f0:	4293      	cmp	r3, r2
 80017f2:	d90c      	bls.n	800180e <main+0x252>
		  lastWiFiReset = HAL_GetTick();
 80017f4:	f001 f84e 	bl	8002894 <HAL_GetTick>
 80017f8:	4603      	mov	r3, r0
 80017fa:	4a18      	ldr	r2, [pc, #96]	@ (800185c <main+0x2a0>)
 80017fc:	6013      	str	r3, [r2, #0]
		  esp8266_reset_and_reconnect(WIFI_SSID,WIFI_PASS);
 80017fe:	4b08      	ldr	r3, [pc, #32]	@ (8001820 <main+0x264>)
 8001800:	681b      	ldr	r3, [r3, #0]
 8001802:	4a08      	ldr	r2, [pc, #32]	@ (8001824 <main+0x268>)
 8001804:	6812      	ldr	r2, [r2, #0]
 8001806:	4611      	mov	r1, r2
 8001808:	4618      	mov	r0, r3
 800180a:	f7ff fcc1 	bl	8001190 <esp8266_reset_and_reconnect>
	  }

	  processThingSpeakStateMachine(); // Procesar la máquina de estados de ThingSpeak
 800180e:	f000 febb 	bl	8002588 <processThingSpeakStateMachine>
  {
 8001812:	e723      	b.n	800165c <main+0xa0>
 8001814:	20000578 	.word	0x20000578
 8001818:	2000057c 	.word	0x2000057c
 800181c:	20000580 	.word	0x20000580
 8001820:	20000000 	.word	0x20000000
 8001824:	20000004 	.word	0x20000004
 8001828:	0800adb4 	.word	0x0800adb4
 800182c:	0800adbc 	.word	0x0800adbc
 8001830:	0800adcc 	.word	0x0800adcc
 8001834:	0800addc 	.word	0x0800addc
 8001838:	20000564 	.word	0x20000564
 800183c:	2000055c 	.word	0x2000055c
 8001840:	2000056c 	.word	0x2000056c
 8001844:	20000560 	.word	0x20000560
 8001848:	20000568 	.word	0x20000568
 800184c:	20000570 	.word	0x20000570
 8001850:	20000574 	.word	0x20000574
 8001854:	0800ade8 	.word	0x0800ade8
 8001858:	0800adfc 	.word	0x0800adfc
 800185c:	20000584 	.word	0x20000584
 8001860:	0036ee80 	.word	0x0036ee80

08001864 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001864:	b580      	push	{r7, lr}
 8001866:	b094      	sub	sp, #80	@ 0x50
 8001868:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800186a:	f107 0320 	add.w	r3, r7, #32
 800186e:	2230      	movs	r2, #48	@ 0x30
 8001870:	2100      	movs	r1, #0
 8001872:	4618      	mov	r0, r3
 8001874:	f005 fef0 	bl	8007658 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001878:	f107 030c 	add.w	r3, r7, #12
 800187c:	2200      	movs	r2, #0
 800187e:	601a      	str	r2, [r3, #0]
 8001880:	605a      	str	r2, [r3, #4]
 8001882:	609a      	str	r2, [r3, #8]
 8001884:	60da      	str	r2, [r3, #12]
 8001886:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001888:	2300      	movs	r3, #0
 800188a:	60bb      	str	r3, [r7, #8]
 800188c:	4b27      	ldr	r3, [pc, #156]	@ (800192c <SystemClock_Config+0xc8>)
 800188e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001890:	4a26      	ldr	r2, [pc, #152]	@ (800192c <SystemClock_Config+0xc8>)
 8001892:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001896:	6413      	str	r3, [r2, #64]	@ 0x40
 8001898:	4b24      	ldr	r3, [pc, #144]	@ (800192c <SystemClock_Config+0xc8>)
 800189a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800189c:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018a0:	60bb      	str	r3, [r7, #8]
 80018a2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018a4:	2300      	movs	r3, #0
 80018a6:	607b      	str	r3, [r7, #4]
 80018a8:	4b21      	ldr	r3, [pc, #132]	@ (8001930 <SystemClock_Config+0xcc>)
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	4a20      	ldr	r2, [pc, #128]	@ (8001930 <SystemClock_Config+0xcc>)
 80018ae:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018b2:	6013      	str	r3, [r2, #0]
 80018b4:	4b1e      	ldr	r3, [pc, #120]	@ (8001930 <SystemClock_Config+0xcc>)
 80018b6:	681b      	ldr	r3, [r3, #0]
 80018b8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018bc:	607b      	str	r3, [r7, #4]
 80018be:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80018c0:	2302      	movs	r3, #2
 80018c2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80018c4:	2301      	movs	r3, #1
 80018c6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80018c8:	2310      	movs	r3, #16
 80018ca:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80018cc:	2302      	movs	r3, #2
 80018ce:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80018d0:	2300      	movs	r3, #0
 80018d2:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80018d4:	2308      	movs	r3, #8
 80018d6:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 80;
 80018d8:	2350      	movs	r3, #80	@ 0x50
 80018da:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80018dc:	2302      	movs	r3, #2
 80018de:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 80018e0:	2308      	movs	r3, #8
 80018e2:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80018e4:	f107 0320 	add.w	r3, r7, #32
 80018e8:	4618      	mov	r0, r3
 80018ea:	f002 ffe9 	bl	80048c0 <HAL_RCC_OscConfig>
 80018ee:	4603      	mov	r3, r0
 80018f0:	2b00      	cmp	r3, #0
 80018f2:	d001      	beq.n	80018f8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80018f4:	f000 f986 	bl	8001c04 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80018f8:	230f      	movs	r3, #15
 80018fa:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80018fc:	2302      	movs	r3, #2
 80018fe:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001900:	2300      	movs	r3, #0
 8001902:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001904:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001908:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800190a:	2300      	movs	r3, #0
 800190c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_2) != HAL_OK)
 800190e:	f107 030c 	add.w	r3, r7, #12
 8001912:	2102      	movs	r1, #2
 8001914:	4618      	mov	r0, r3
 8001916:	f003 fa4b 	bl	8004db0 <HAL_RCC_ClockConfig>
 800191a:	4603      	mov	r3, r0
 800191c:	2b00      	cmp	r3, #0
 800191e:	d001      	beq.n	8001924 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001920:	f000 f970 	bl	8001c04 <Error_Handler>
  }
}
 8001924:	bf00      	nop
 8001926:	3750      	adds	r7, #80	@ 0x50
 8001928:	46bd      	mov	sp, r7
 800192a:	bd80      	pop	{r7, pc}
 800192c:	40023800 	.word	0x40023800
 8001930:	40007000 	.word	0x40007000

08001934 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001934:	b580      	push	{r7, lr}
 8001936:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001938:	4b12      	ldr	r3, [pc, #72]	@ (8001984 <MX_I2C1_Init+0x50>)
 800193a:	4a13      	ldr	r2, [pc, #76]	@ (8001988 <MX_I2C1_Init+0x54>)
 800193c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800193e:	4b11      	ldr	r3, [pc, #68]	@ (8001984 <MX_I2C1_Init+0x50>)
 8001940:	4a12      	ldr	r2, [pc, #72]	@ (800198c <MX_I2C1_Init+0x58>)
 8001942:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001944:	4b0f      	ldr	r3, [pc, #60]	@ (8001984 <MX_I2C1_Init+0x50>)
 8001946:	2200      	movs	r2, #0
 8001948:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800194a:	4b0e      	ldr	r3, [pc, #56]	@ (8001984 <MX_I2C1_Init+0x50>)
 800194c:	2200      	movs	r2, #0
 800194e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001950:	4b0c      	ldr	r3, [pc, #48]	@ (8001984 <MX_I2C1_Init+0x50>)
 8001952:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 8001956:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001958:	4b0a      	ldr	r3, [pc, #40]	@ (8001984 <MX_I2C1_Init+0x50>)
 800195a:	2200      	movs	r2, #0
 800195c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800195e:	4b09      	ldr	r3, [pc, #36]	@ (8001984 <MX_I2C1_Init+0x50>)
 8001960:	2200      	movs	r2, #0
 8001962:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001964:	4b07      	ldr	r3, [pc, #28]	@ (8001984 <MX_I2C1_Init+0x50>)
 8001966:	2200      	movs	r2, #0
 8001968:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800196a:	4b06      	ldr	r3, [pc, #24]	@ (8001984 <MX_I2C1_Init+0x50>)
 800196c:	2200      	movs	r2, #0
 800196e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001970:	4804      	ldr	r0, [pc, #16]	@ (8001984 <MX_I2C1_Init+0x50>)
 8001972:	f001 fb01 	bl	8002f78 <HAL_I2C_Init>
 8001976:	4603      	mov	r3, r0
 8001978:	2b00      	cmp	r3, #0
 800197a:	d001      	beq.n	8001980 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800197c:	f000 f942 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001980:	bf00      	nop
 8001982:	bd80      	pop	{r7, pc}
 8001984:	20000414 	.word	0x20000414
 8001988:	40005400 	.word	0x40005400
 800198c:	000186a0 	.word	0x000186a0

08001990 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8001994:	4b12      	ldr	r3, [pc, #72]	@ (80019e0 <MX_I2C2_Init+0x50>)
 8001996:	4a13      	ldr	r2, [pc, #76]	@ (80019e4 <MX_I2C2_Init+0x54>)
 8001998:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 800199a:	4b11      	ldr	r3, [pc, #68]	@ (80019e0 <MX_I2C2_Init+0x50>)
 800199c:	4a12      	ldr	r2, [pc, #72]	@ (80019e8 <MX_I2C2_Init+0x58>)
 800199e:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019a0:	4b0f      	ldr	r3, [pc, #60]	@ (80019e0 <MX_I2C2_Init+0x50>)
 80019a2:	2200      	movs	r2, #0
 80019a4:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019a6:	4b0e      	ldr	r3, [pc, #56]	@ (80019e0 <MX_I2C2_Init+0x50>)
 80019a8:	2200      	movs	r2, #0
 80019aa:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019ac:	4b0c      	ldr	r3, [pc, #48]	@ (80019e0 <MX_I2C2_Init+0x50>)
 80019ae:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019b2:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019b4:	4b0a      	ldr	r3, [pc, #40]	@ (80019e0 <MX_I2C2_Init+0x50>)
 80019b6:	2200      	movs	r2, #0
 80019b8:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019ba:	4b09      	ldr	r3, [pc, #36]	@ (80019e0 <MX_I2C2_Init+0x50>)
 80019bc:	2200      	movs	r2, #0
 80019be:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019c0:	4b07      	ldr	r3, [pc, #28]	@ (80019e0 <MX_I2C2_Init+0x50>)
 80019c2:	2200      	movs	r2, #0
 80019c4:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019c6:	4b06      	ldr	r3, [pc, #24]	@ (80019e0 <MX_I2C2_Init+0x50>)
 80019c8:	2200      	movs	r2, #0
 80019ca:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 80019cc:	4804      	ldr	r0, [pc, #16]	@ (80019e0 <MX_I2C2_Init+0x50>)
 80019ce:	f001 fad3 	bl	8002f78 <HAL_I2C_Init>
 80019d2:	4603      	mov	r3, r0
 80019d4:	2b00      	cmp	r3, #0
 80019d6:	d001      	beq.n	80019dc <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 80019d8:	f000 f914 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 80019dc:	bf00      	nop
 80019de:	bd80      	pop	{r7, pc}
 80019e0:	20000468 	.word	0x20000468
 80019e4:	40005800 	.word	0x40005800
 80019e8:	000186a0 	.word	0x000186a0

080019ec <MX_SPI1_Init>:
  * @brief SPI1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_SPI1_Init(void)
{
 80019ec:	b580      	push	{r7, lr}
 80019ee:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN SPI1_Init 1 */

  /* USER CODE END SPI1_Init 1 */
  /* SPI1 parameter configuration*/
  hspi1.Instance = SPI1;
 80019f0:	4b17      	ldr	r3, [pc, #92]	@ (8001a50 <MX_SPI1_Init+0x64>)
 80019f2:	4a18      	ldr	r2, [pc, #96]	@ (8001a54 <MX_SPI1_Init+0x68>)
 80019f4:	601a      	str	r2, [r3, #0]
  hspi1.Init.Mode = SPI_MODE_MASTER;
 80019f6:	4b16      	ldr	r3, [pc, #88]	@ (8001a50 <MX_SPI1_Init+0x64>)
 80019f8:	f44f 7282 	mov.w	r2, #260	@ 0x104
 80019fc:	605a      	str	r2, [r3, #4]
  hspi1.Init.Direction = SPI_DIRECTION_2LINES;
 80019fe:	4b14      	ldr	r3, [pc, #80]	@ (8001a50 <MX_SPI1_Init+0x64>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	609a      	str	r2, [r3, #8]
  hspi1.Init.DataSize = SPI_DATASIZE_8BIT;
 8001a04:	4b12      	ldr	r3, [pc, #72]	@ (8001a50 <MX_SPI1_Init+0x64>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	60da      	str	r2, [r3, #12]
  hspi1.Init.CLKPolarity = SPI_POLARITY_LOW;
 8001a0a:	4b11      	ldr	r3, [pc, #68]	@ (8001a50 <MX_SPI1_Init+0x64>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	611a      	str	r2, [r3, #16]
  hspi1.Init.CLKPhase = SPI_PHASE_1EDGE;
 8001a10:	4b0f      	ldr	r3, [pc, #60]	@ (8001a50 <MX_SPI1_Init+0x64>)
 8001a12:	2200      	movs	r2, #0
 8001a14:	615a      	str	r2, [r3, #20]
  hspi1.Init.NSS = SPI_NSS_SOFT;
 8001a16:	4b0e      	ldr	r3, [pc, #56]	@ (8001a50 <MX_SPI1_Init+0x64>)
 8001a18:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001a1c:	619a      	str	r2, [r3, #24]
  hspi1.Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_8;
 8001a1e:	4b0c      	ldr	r3, [pc, #48]	@ (8001a50 <MX_SPI1_Init+0x64>)
 8001a20:	2210      	movs	r2, #16
 8001a22:	61da      	str	r2, [r3, #28]
  hspi1.Init.FirstBit = SPI_FIRSTBIT_MSB;
 8001a24:	4b0a      	ldr	r3, [pc, #40]	@ (8001a50 <MX_SPI1_Init+0x64>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	621a      	str	r2, [r3, #32]
  hspi1.Init.TIMode = SPI_TIMODE_DISABLE;
 8001a2a:	4b09      	ldr	r3, [pc, #36]	@ (8001a50 <MX_SPI1_Init+0x64>)
 8001a2c:	2200      	movs	r2, #0
 8001a2e:	625a      	str	r2, [r3, #36]	@ 0x24
  hspi1.Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8001a30:	4b07      	ldr	r3, [pc, #28]	@ (8001a50 <MX_SPI1_Init+0x64>)
 8001a32:	2200      	movs	r2, #0
 8001a34:	629a      	str	r2, [r3, #40]	@ 0x28
  hspi1.Init.CRCPolynomial = 10;
 8001a36:	4b06      	ldr	r3, [pc, #24]	@ (8001a50 <MX_SPI1_Init+0x64>)
 8001a38:	220a      	movs	r2, #10
 8001a3a:	62da      	str	r2, [r3, #44]	@ 0x2c
  if (HAL_SPI_Init(&hspi1) != HAL_OK)
 8001a3c:	4804      	ldr	r0, [pc, #16]	@ (8001a50 <MX_SPI1_Init+0x64>)
 8001a3e:	f003 fbd7 	bl	80051f0 <HAL_SPI_Init>
 8001a42:	4603      	mov	r3, r0
 8001a44:	2b00      	cmp	r3, #0
 8001a46:	d001      	beq.n	8001a4c <MX_SPI1_Init+0x60>
  {
    Error_Handler();
 8001a48:	f000 f8dc 	bl	8001c04 <Error_Handler>
  }
  /* USER CODE BEGIN SPI1_Init 2 */

  /* USER CODE END SPI1_Init 2 */

}
 8001a4c:	bf00      	nop
 8001a4e:	bd80      	pop	{r7, pc}
 8001a50:	200004bc 	.word	0x200004bc
 8001a54:	40013000 	.word	0x40013000

08001a58 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8001a58:	b580      	push	{r7, lr}
 8001a5a:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8001a5c:	4b11      	ldr	r3, [pc, #68]	@ (8001aa4 <MX_USART2_UART_Init+0x4c>)
 8001a5e:	4a12      	ldr	r2, [pc, #72]	@ (8001aa8 <MX_USART2_UART_Init+0x50>)
 8001a60:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 8001a62:	4b10      	ldr	r3, [pc, #64]	@ (8001aa4 <MX_USART2_UART_Init+0x4c>)
 8001a64:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a68:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001a6a:	4b0e      	ldr	r3, [pc, #56]	@ (8001aa4 <MX_USART2_UART_Init+0x4c>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 8001a70:	4b0c      	ldr	r3, [pc, #48]	@ (8001aa4 <MX_USART2_UART_Init+0x4c>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001a76:	4b0b      	ldr	r3, [pc, #44]	@ (8001aa4 <MX_USART2_UART_Init+0x4c>)
 8001a78:	2200      	movs	r2, #0
 8001a7a:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001a7c:	4b09      	ldr	r3, [pc, #36]	@ (8001aa4 <MX_USART2_UART_Init+0x4c>)
 8001a7e:	220c      	movs	r2, #12
 8001a80:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a82:	4b08      	ldr	r3, [pc, #32]	@ (8001aa4 <MX_USART2_UART_Init+0x4c>)
 8001a84:	2200      	movs	r2, #0
 8001a86:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a88:	4b06      	ldr	r3, [pc, #24]	@ (8001aa4 <MX_USART2_UART_Init+0x4c>)
 8001a8a:	2200      	movs	r2, #0
 8001a8c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001a8e:	4805      	ldr	r0, [pc, #20]	@ (8001aa4 <MX_USART2_UART_Init+0x4c>)
 8001a90:	f003 fc37 	bl	8005302 <HAL_UART_Init>
 8001a94:	4603      	mov	r3, r0
 8001a96:	2b00      	cmp	r3, #0
 8001a98:	d001      	beq.n	8001a9e <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001a9a:	f000 f8b3 	bl	8001c04 <Error_Handler>
  /* USER CODE BEGIN USART2_Init 2 */


  /* USER CODE END USART2_Init 2 */

}
 8001a9e:	bf00      	nop
 8001aa0:	bd80      	pop	{r7, pc}
 8001aa2:	bf00      	nop
 8001aa4:	20000514 	.word	0x20000514
 8001aa8:	40004400 	.word	0x40004400

08001aac <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001aac:	b580      	push	{r7, lr}
 8001aae:	b08a      	sub	sp, #40	@ 0x28
 8001ab0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001ab2:	f107 0314 	add.w	r3, r7, #20
 8001ab6:	2200      	movs	r2, #0
 8001ab8:	601a      	str	r2, [r3, #0]
 8001aba:	605a      	str	r2, [r3, #4]
 8001abc:	609a      	str	r2, [r3, #8]
 8001abe:	60da      	str	r2, [r3, #12]
 8001ac0:	611a      	str	r2, [r3, #16]
  /* USER CODE BEGIN MX_GPIO_Init_1 */
  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	613b      	str	r3, [r7, #16]
 8001ac6:	4b44      	ldr	r3, [pc, #272]	@ (8001bd8 <MX_GPIO_Init+0x12c>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	4a43      	ldr	r2, [pc, #268]	@ (8001bd8 <MX_GPIO_Init+0x12c>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad2:	4b41      	ldr	r3, [pc, #260]	@ (8001bd8 <MX_GPIO_Init+0x12c>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	613b      	str	r3, [r7, #16]
 8001adc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001ade:	2300      	movs	r3, #0
 8001ae0:	60fb      	str	r3, [r7, #12]
 8001ae2:	4b3d      	ldr	r3, [pc, #244]	@ (8001bd8 <MX_GPIO_Init+0x12c>)
 8001ae4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ae6:	4a3c      	ldr	r2, [pc, #240]	@ (8001bd8 <MX_GPIO_Init+0x12c>)
 8001ae8:	f043 0301 	orr.w	r3, r3, #1
 8001aec:	6313      	str	r3, [r2, #48]	@ 0x30
 8001aee:	4b3a      	ldr	r3, [pc, #232]	@ (8001bd8 <MX_GPIO_Init+0x12c>)
 8001af0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001af2:	f003 0301 	and.w	r3, r3, #1
 8001af6:	60fb      	str	r3, [r7, #12]
 8001af8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001afa:	2300      	movs	r3, #0
 8001afc:	60bb      	str	r3, [r7, #8]
 8001afe:	4b36      	ldr	r3, [pc, #216]	@ (8001bd8 <MX_GPIO_Init+0x12c>)
 8001b00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b02:	4a35      	ldr	r2, [pc, #212]	@ (8001bd8 <MX_GPIO_Init+0x12c>)
 8001b04:	f043 0302 	orr.w	r3, r3, #2
 8001b08:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b0a:	4b33      	ldr	r3, [pc, #204]	@ (8001bd8 <MX_GPIO_Init+0x12c>)
 8001b0c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b0e:	f003 0302 	and.w	r3, r3, #2
 8001b12:	60bb      	str	r3, [r7, #8]
 8001b14:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8001b16:	2300      	movs	r3, #0
 8001b18:	607b      	str	r3, [r7, #4]
 8001b1a:	4b2f      	ldr	r3, [pc, #188]	@ (8001bd8 <MX_GPIO_Init+0x12c>)
 8001b1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b1e:	4a2e      	ldr	r2, [pc, #184]	@ (8001bd8 <MX_GPIO_Init+0x12c>)
 8001b20:	f043 0308 	orr.w	r3, r3, #8
 8001b24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001b26:	4b2c      	ldr	r3, [pc, #176]	@ (8001bd8 <MX_GPIO_Init+0x12c>)
 8001b28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001b2a:	f003 0308 	and.w	r3, r3, #8
 8001b2e:	607b      	str	r3, [r7, #4]
 8001b30:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOC, GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b32:	2200      	movs	r2, #0
 8001b34:	213f      	movs	r1, #63	@ 0x3f
 8001b36:	4829      	ldr	r0, [pc, #164]	@ (8001bdc <MX_GPIO_Init+0x130>)
 8001b38:	f001 fa04 	bl	8002f44 <HAL_GPIO_WritePin>
                          |GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOA, GPIO_PIN_4, GPIO_PIN_SET);
 8001b3c:	2201      	movs	r2, #1
 8001b3e:	2110      	movs	r1, #16
 8001b40:	4827      	ldr	r0, [pc, #156]	@ (8001be0 <MX_GPIO_Init+0x134>)
 8001b42:	f001 f9ff 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);
 8001b46:	2200      	movs	r2, #0
 8001b48:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8001b4c:	4825      	ldr	r0, [pc, #148]	@ (8001be4 <MX_GPIO_Init+0x138>)
 8001b4e:	f001 f9f9 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, GPIO_PIN_RESET);
 8001b52:	2200      	movs	r2, #0
 8001b54:	2120      	movs	r1, #32
 8001b56:	4824      	ldr	r0, [pc, #144]	@ (8001be8 <MX_GPIO_Init+0x13c>)
 8001b58:	f001 f9f4 	bl	8002f44 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC0 PC1 PC2 PC3
                           PC4 PC5 */
  GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_3
 8001b5c:	233f      	movs	r3, #63	@ 0x3f
 8001b5e:	617b      	str	r3, [r7, #20]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b60:	2301      	movs	r3, #1
 8001b62:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b64:	2300      	movs	r3, #0
 8001b66:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001b68:	2300      	movs	r3, #0
 8001b6a:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8001b6c:	f107 0314 	add.w	r3, r7, #20
 8001b70:	4619      	mov	r1, r3
 8001b72:	481a      	ldr	r0, [pc, #104]	@ (8001bdc <MX_GPIO_Init+0x130>)
 8001b74:	f001 f862 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA4 */
  GPIO_InitStruct.Pin = GPIO_PIN_4;
 8001b78:	2310      	movs	r3, #16
 8001b7a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b7c:	2301      	movs	r3, #1
 8001b7e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b80:	2300      	movs	r3, #0
 8001b82:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_HIGH;
 8001b84:	2302      	movs	r3, #2
 8001b86:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8001b88:	f107 0314 	add.w	r3, r7, #20
 8001b8c:	4619      	mov	r1, r3
 8001b8e:	4814      	ldr	r0, [pc, #80]	@ (8001be0 <MX_GPIO_Init+0x134>)
 8001b90:	f001 f854 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pins : PD12 PD14 */
  GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_14;
 8001b94:	f44f 43a0 	mov.w	r3, #20480	@ 0x5000
 8001b98:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001b9a:	2301      	movs	r3, #1
 8001b9c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001b9e:	2300      	movs	r3, #0
 8001ba0:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001ba2:	2300      	movs	r3, #0
 8001ba4:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 8001ba6:	f107 0314 	add.w	r3, r7, #20
 8001baa:	4619      	mov	r1, r3
 8001bac:	480d      	ldr	r0, [pc, #52]	@ (8001be4 <MX_GPIO_Init+0x138>)
 8001bae:	f001 f845 	bl	8002c3c <HAL_GPIO_Init>

  /*Configure GPIO pin : PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_5;
 8001bb2:	2320      	movs	r3, #32
 8001bb4:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001bb6:	2301      	movs	r3, #1
 8001bb8:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001bba:	2300      	movs	r3, #0
 8001bbc:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001bbe:	2300      	movs	r3, #0
 8001bc0:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001bc2:	f107 0314 	add.w	r3, r7, #20
 8001bc6:	4619      	mov	r1, r3
 8001bc8:	4807      	ldr	r0, [pc, #28]	@ (8001be8 <MX_GPIO_Init+0x13c>)
 8001bca:	f001 f837 	bl	8002c3c <HAL_GPIO_Init>

  /* USER CODE BEGIN MX_GPIO_Init_2 */
  /* USER CODE END MX_GPIO_Init_2 */
}
 8001bce:	bf00      	nop
 8001bd0:	3728      	adds	r7, #40	@ 0x28
 8001bd2:	46bd      	mov	sp, r7
 8001bd4:	bd80      	pop	{r7, pc}
 8001bd6:	bf00      	nop
 8001bd8:	40023800 	.word	0x40023800
 8001bdc:	40020800 	.word	0x40020800
 8001be0:	40020000 	.word	0x40020000
 8001be4:	40020c00 	.word	0x40020c00
 8001be8:	40020400 	.word	0x40020400

08001bec <MX_NVIC_Init>:
    ITM_SendChar(ch);
    return ch;
}

static void MX_NVIC_Init(void)
{
 8001bec:	b580      	push	{r7, lr}
 8001bee:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8001bf0:	2200      	movs	r2, #0
 8001bf2:	2100      	movs	r1, #0
 8001bf4:	2026      	movs	r0, #38	@ 0x26
 8001bf6:	f000 ff58 	bl	8002aaa <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn); // Habilitar interrupciones globales USART2 para ESP8266
 8001bfa:	2026      	movs	r0, #38	@ 0x26
 8001bfc:	f000 ff71 	bl	8002ae2 <HAL_NVIC_EnableIRQ>
}
 8001c00:	bf00      	nop
 8001c02:	bd80      	pop	{r7, pc}

08001c04 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001c04:	b480      	push	{r7}
 8001c06:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8001c08:	b672      	cpsid	i
}
 8001c0a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8001c0c:	bf00      	nop
 8001c0e:	e7fd      	b.n	8001c0c <Error_Handler+0x8>

08001c10 <Rele_On>:

#include "rele.h"

extern volatile bool releOn; // Declarar la variable global

void Rele_On(void) {
 8001c10:	b580      	push	{r7, lr}
 8001c12:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RELE_GPIO_PORT, RELE_PIN, GPIO_PIN_SET);
 8001c14:	2201      	movs	r2, #1
 8001c16:	2120      	movs	r1, #32
 8001c18:	4803      	ldr	r0, [pc, #12]	@ (8001c28 <Rele_On+0x18>)
 8001c1a:	f001 f993 	bl	8002f44 <HAL_GPIO_WritePin>
    releOn = true; // Actualizar el estado del relé
 8001c1e:	4b03      	ldr	r3, [pc, #12]	@ (8001c2c <Rele_On+0x1c>)
 8001c20:	2201      	movs	r2, #1
 8001c22:	701a      	strb	r2, [r3, #0]
}
 8001c24:	bf00      	nop
 8001c26:	bd80      	pop	{r7, pc}
 8001c28:	40020400 	.word	0x40020400
 8001c2c:	20000588 	.word	0x20000588

08001c30 <Rele_Off>:

void Rele_Off(void) {
 8001c30:	b580      	push	{r7, lr}
 8001c32:	af00      	add	r7, sp, #0
    HAL_GPIO_WritePin(RELE_GPIO_PORT, RELE_PIN, GPIO_PIN_RESET);
 8001c34:	2200      	movs	r2, #0
 8001c36:	2120      	movs	r1, #32
 8001c38:	4803      	ldr	r0, [pc, #12]	@ (8001c48 <Rele_Off+0x18>)
 8001c3a:	f001 f983 	bl	8002f44 <HAL_GPIO_WritePin>
    releOn = false; // Actualizar el estado del relé
 8001c3e:	4b03      	ldr	r3, [pc, #12]	@ (8001c4c <Rele_Off+0x1c>)
 8001c40:	2200      	movs	r2, #0
 8001c42:	701a      	strb	r2, [r3, #0]
}
 8001c44:	bf00      	nop
 8001c46:	bd80      	pop	{r7, pc}
 8001c48:	40020400 	.word	0x40020400
 8001c4c:	20000588 	.word	0x20000588

08001c50 <Control_Rele>:

void Control_Rele(float luminosity) {
 8001c50:	b580      	push	{r7, lr}
 8001c52:	b082      	sub	sp, #8
 8001c54:	af00      	add	r7, sp, #0
 8001c56:	ed87 0a01 	vstr	s0, [r7, #4]
    if (luminosity > 5.5) {
 8001c5a:	edd7 7a01 	vldr	s15, [r7, #4]
 8001c5e:	eeb1 7a06 	vmov.f32	s14, #22	@ 0x40b00000  5.5
 8001c62:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001c66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c6a:	dd02      	ble.n	8001c72 <Control_Rele+0x22>
        Rele_On();
 8001c6c:	f7ff ffd0 	bl	8001c10 <Rele_On>
    } else {
        Rele_Off();
    }
}
 8001c70:	e001      	b.n	8001c76 <Control_Rele+0x26>
        Rele_Off();
 8001c72:	f7ff ffdd 	bl	8001c30 <Rele_Off>
}
 8001c76:	bf00      	nop
 8001c78:	3708      	adds	r7, #8
 8001c7a:	46bd      	mov	sp, r7
 8001c7c:	bd80      	pop	{r7, pc}

08001c7e <SHT85_Init>:
float totalTemperature = 0.0f;
uint8_t sampleCountTemp = 0;
float totalHumidity = 0.0f;
uint8_t sampleCountHum = 0;

void SHT85_Init() {
 8001c7e:	b580      	push	{r7, lr}
 8001c80:	af00      	add	r7, sp, #0
    // No se requiere inicialización en modo single shot, pero puede hacerse un soft reset por seguridad
    ResetSHT85();
 8001c82:	f000 f8f7 	bl	8001e74 <ResetSHT85>
}
 8001c86:	bf00      	nop
 8001c88:	bd80      	pop	{r7, pc}

08001c8a <SHT85_CalculateCRC>:

uint8_t SHT85_CalculateCRC(uint8_t* data, uint8_t len) {
 8001c8a:	b480      	push	{r7}
 8001c8c:	b085      	sub	sp, #20
 8001c8e:	af00      	add	r7, sp, #0
 8001c90:	6078      	str	r0, [r7, #4]
 8001c92:	460b      	mov	r3, r1
 8001c94:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 8001c96:	23ff      	movs	r3, #255	@ 0xff
 8001c98:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++) {
 8001c9a:	2300      	movs	r3, #0
 8001c9c:	73bb      	strb	r3, [r7, #14]
 8001c9e:	e022      	b.n	8001ce6 <SHT85_CalculateCRC+0x5c>
        crc ^= data[i];
 8001ca0:	7bbb      	ldrb	r3, [r7, #14]
 8001ca2:	687a      	ldr	r2, [r7, #4]
 8001ca4:	4413      	add	r3, r2
 8001ca6:	781a      	ldrb	r2, [r3, #0]
 8001ca8:	7bfb      	ldrb	r3, [r7, #15]
 8001caa:	4053      	eors	r3, r2
 8001cac:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 8001cae:	2300      	movs	r3, #0
 8001cb0:	737b      	strb	r3, [r7, #13]
 8001cb2:	e012      	b.n	8001cda <SHT85_CalculateCRC+0x50>
            if (crc & 0x80)
 8001cb4:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cb8:	2b00      	cmp	r3, #0
 8001cba:	da08      	bge.n	8001cce <SHT85_CalculateCRC+0x44>
                crc = (crc << 1) ^ 0x31;
 8001cbc:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001cc0:	005b      	lsls	r3, r3, #1
 8001cc2:	b25b      	sxtb	r3, r3
 8001cc4:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8001cc8:	b25b      	sxtb	r3, r3
 8001cca:	73fb      	strb	r3, [r7, #15]
 8001ccc:	e002      	b.n	8001cd4 <SHT85_CalculateCRC+0x4a>
            else
                crc <<= 1;
 8001cce:	7bfb      	ldrb	r3, [r7, #15]
 8001cd0:	005b      	lsls	r3, r3, #1
 8001cd2:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 8001cd4:	7b7b      	ldrb	r3, [r7, #13]
 8001cd6:	3301      	adds	r3, #1
 8001cd8:	737b      	strb	r3, [r7, #13]
 8001cda:	7b7b      	ldrb	r3, [r7, #13]
 8001cdc:	2b07      	cmp	r3, #7
 8001cde:	d9e9      	bls.n	8001cb4 <SHT85_CalculateCRC+0x2a>
    for (uint8_t i = 0; i < len; i++) {
 8001ce0:	7bbb      	ldrb	r3, [r7, #14]
 8001ce2:	3301      	adds	r3, #1
 8001ce4:	73bb      	strb	r3, [r7, #14]
 8001ce6:	7bba      	ldrb	r2, [r7, #14]
 8001ce8:	78fb      	ldrb	r3, [r7, #3]
 8001cea:	429a      	cmp	r2, r3
 8001cec:	d3d8      	bcc.n	8001ca0 <SHT85_CalculateCRC+0x16>
        }
    }
    return crc;
 8001cee:	7bfb      	ldrb	r3, [r7, #15]
}
 8001cf0:	4618      	mov	r0, r3
 8001cf2:	3714      	adds	r7, #20
 8001cf4:	46bd      	mov	sp, r7
 8001cf6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001cfa:	4770      	bx	lr

08001cfc <SHT85_ReadSingleShot>:

void SHT85_ReadSingleShot(float* temperature, float* humidity) {
 8001cfc:	b580      	push	{r7, lr}
 8001cfe:	b088      	sub	sp, #32
 8001d00:	af02      	add	r7, sp, #8
 8001d02:	6078      	str	r0, [r7, #4]
 8001d04:	6039      	str	r1, [r7, #0]
    uint8_t cmd[2] = {0x24, 0x00};  // High repeatability, no clock stretching
 8001d06:	2324      	movs	r3, #36	@ 0x24
 8001d08:	82bb      	strh	r3, [r7, #20]
    uint8_t data[6];

    HAL_I2C_Master_Transmit(&hi2c1, SHT85_I2C_ADDR, cmd, 2, HAL_MAX_DELAY);
 8001d0a:	f107 0214 	add.w	r2, r7, #20
 8001d0e:	f04f 33ff 	mov.w	r3, #4294967295
 8001d12:	9300      	str	r3, [sp, #0]
 8001d14:	2302      	movs	r3, #2
 8001d16:	2188      	movs	r1, #136	@ 0x88
 8001d18:	4834      	ldr	r0, [pc, #208]	@ (8001dec <SHT85_ReadSingleShot+0xf0>)
 8001d1a:	f001 fa71 	bl	8003200 <HAL_I2C_Master_Transmit>
    HAL_Delay(20);  // Tiempo típico de conversión (~15 ms para alta repetibilidad)
 8001d1e:	2014      	movs	r0, #20
 8001d20:	f000 fdc4 	bl	80028ac <HAL_Delay>

    HAL_I2C_Master_Receive(&hi2c1, SHT85_I2C_ADDR, data, 6, HAL_MAX_DELAY);
 8001d24:	f107 020c 	add.w	r2, r7, #12
 8001d28:	f04f 33ff 	mov.w	r3, #4294967295
 8001d2c:	9300      	str	r3, [sp, #0]
 8001d2e:	2306      	movs	r3, #6
 8001d30:	2188      	movs	r1, #136	@ 0x88
 8001d32:	482e      	ldr	r0, [pc, #184]	@ (8001dec <SHT85_ReadSingleShot+0xf0>)
 8001d34:	f001 fb62 	bl	80033fc <HAL_I2C_Master_Receive>

    // Validar CRC
    if (SHT85_CalculateCRC(&data[0], 2) != data[2]) return;
 8001d38:	f107 030c 	add.w	r3, r7, #12
 8001d3c:	2102      	movs	r1, #2
 8001d3e:	4618      	mov	r0, r3
 8001d40:	f7ff ffa3 	bl	8001c8a <SHT85_CalculateCRC>
 8001d44:	4603      	mov	r3, r0
 8001d46:	461a      	mov	r2, r3
 8001d48:	7bbb      	ldrb	r3, [r7, #14]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d148      	bne.n	8001de0 <SHT85_ReadSingleShot+0xe4>
    if (SHT85_CalculateCRC(&data[3], 2) != data[5]) return;
 8001d4e:	f107 030c 	add.w	r3, r7, #12
 8001d52:	3303      	adds	r3, #3
 8001d54:	2102      	movs	r1, #2
 8001d56:	4618      	mov	r0, r3
 8001d58:	f7ff ff97 	bl	8001c8a <SHT85_CalculateCRC>
 8001d5c:	4603      	mov	r3, r0
 8001d5e:	461a      	mov	r2, r3
 8001d60:	7c7b      	ldrb	r3, [r7, #17]
 8001d62:	429a      	cmp	r2, r3
 8001d64:	d13e      	bne.n	8001de4 <SHT85_ReadSingleShot+0xe8>

    temp_raw = (data[0] << 8) | data[1];
 8001d66:	7b3b      	ldrb	r3, [r7, #12]
 8001d68:	b21b      	sxth	r3, r3
 8001d6a:	021b      	lsls	r3, r3, #8
 8001d6c:	b21a      	sxth	r2, r3
 8001d6e:	7b7b      	ldrb	r3, [r7, #13]
 8001d70:	b21b      	sxth	r3, r3
 8001d72:	4313      	orrs	r3, r2
 8001d74:	b21b      	sxth	r3, r3
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	4b1d      	ldr	r3, [pc, #116]	@ (8001df0 <SHT85_ReadSingleShot+0xf4>)
 8001d7a:	801a      	strh	r2, [r3, #0]
    hum_raw  = (data[3] << 8) | data[4];
 8001d7c:	7bfb      	ldrb	r3, [r7, #15]
 8001d7e:	b21b      	sxth	r3, r3
 8001d80:	021b      	lsls	r3, r3, #8
 8001d82:	b21a      	sxth	r2, r3
 8001d84:	7c3b      	ldrb	r3, [r7, #16]
 8001d86:	b21b      	sxth	r3, r3
 8001d88:	4313      	orrs	r3, r2
 8001d8a:	b21b      	sxth	r3, r3
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	4b19      	ldr	r3, [pc, #100]	@ (8001df4 <SHT85_ReadSingleShot+0xf8>)
 8001d90:	801a      	strh	r2, [r3, #0]

    *temperature = -45 + 175 * (float)temp_raw / 65535.0f;
 8001d92:	4b17      	ldr	r3, [pc, #92]	@ (8001df0 <SHT85_ReadSingleShot+0xf4>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	ee07 3a90 	vmov	s15, r3
 8001d9a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001d9e:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8001df8 <SHT85_ReadSingleShot+0xfc>
 8001da2:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001da6:	eddf 6a15 	vldr	s13, [pc, #84]	@ 8001dfc <SHT85_ReadSingleShot+0x100>
 8001daa:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dae:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001e00 <SHT85_ReadSingleShot+0x104>
 8001db2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 8001db6:	687b      	ldr	r3, [r7, #4]
 8001db8:	edc3 7a00 	vstr	s15, [r3]
    *humidity    = 100 * (float)hum_raw / 65535.0f;
 8001dbc:	4b0d      	ldr	r3, [pc, #52]	@ (8001df4 <SHT85_ReadSingleShot+0xf8>)
 8001dbe:	881b      	ldrh	r3, [r3, #0]
 8001dc0:	ee07 3a90 	vmov	s15, r3
 8001dc4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001dc8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8001e04 <SHT85_ReadSingleShot+0x108>
 8001dcc:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001dd0:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 8001dfc <SHT85_ReadSingleShot+0x100>
 8001dd4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001dd8:	683b      	ldr	r3, [r7, #0]
 8001dda:	edc3 7a00 	vstr	s15, [r3]
 8001dde:	e002      	b.n	8001de6 <SHT85_ReadSingleShot+0xea>
    if (SHT85_CalculateCRC(&data[0], 2) != data[2]) return;
 8001de0:	bf00      	nop
 8001de2:	e000      	b.n	8001de6 <SHT85_ReadSingleShot+0xea>
    if (SHT85_CalculateCRC(&data[3], 2) != data[5]) return;
 8001de4:	bf00      	nop
}
 8001de6:	3718      	adds	r7, #24
 8001de8:	46bd      	mov	sp, r7
 8001dea:	bd80      	pop	{r7, pc}
 8001dec:	20000414 	.word	0x20000414
 8001df0:	200005a0 	.word	0x200005a0
 8001df4:	200005a2 	.word	0x200005a2
 8001df8:	432f0000 	.word	0x432f0000
 8001dfc:	477fff00 	.word	0x477fff00
 8001e00:	42340000 	.word	0x42340000
 8001e04:	42c80000 	.word	0x42c80000

08001e08 <SHT85_ErrorReset>:

void SHT85_ErrorReset(float* temperature, float* humidity) {
 8001e08:	b580      	push	{r7, lr}
 8001e0a:	b082      	sub	sp, #8
 8001e0c:	af00      	add	r7, sp, #0
 8001e0e:	6078      	str	r0, [r7, #4]
 8001e10:	6039      	str	r1, [r7, #0]
    static uint8_t out_of_range_count = 0;

    if (*temperature <= -44.0f || *humidity <= 1) {
 8001e12:	687b      	ldr	r3, [r7, #4]
 8001e14:	edd3 7a00 	vldr	s15, [r3]
 8001e18:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8001e6c <SHT85_ErrorReset+0x64>
 8001e1c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e20:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e24:	d909      	bls.n	8001e3a <SHT85_ErrorReset+0x32>
 8001e26:	683b      	ldr	r3, [r7, #0]
 8001e28:	edd3 7a00 	vldr	s15, [r3]
 8001e2c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8001e30:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001e34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e38:	d810      	bhi.n	8001e5c <SHT85_ErrorReset+0x54>
        if (out_of_range_count > 5) {
 8001e3a:	4b0d      	ldr	r3, [pc, #52]	@ (8001e70 <SHT85_ErrorReset+0x68>)
 8001e3c:	781b      	ldrb	r3, [r3, #0]
 8001e3e:	2b05      	cmp	r3, #5
 8001e40:	d905      	bls.n	8001e4e <SHT85_ErrorReset+0x46>
            ResetSHT85();
 8001e42:	f000 f817 	bl	8001e74 <ResetSHT85>
            out_of_range_count = 0;
 8001e46:	4b0a      	ldr	r3, [pc, #40]	@ (8001e70 <SHT85_ErrorReset+0x68>)
 8001e48:	2200      	movs	r2, #0
 8001e4a:	701a      	strb	r2, [r3, #0]
        if (out_of_range_count > 5) {
 8001e4c:	e00a      	b.n	8001e64 <SHT85_ErrorReset+0x5c>
        } else {
            out_of_range_count++;
 8001e4e:	4b08      	ldr	r3, [pc, #32]	@ (8001e70 <SHT85_ErrorReset+0x68>)
 8001e50:	781b      	ldrb	r3, [r3, #0]
 8001e52:	3301      	adds	r3, #1
 8001e54:	b2da      	uxtb	r2, r3
 8001e56:	4b06      	ldr	r3, [pc, #24]	@ (8001e70 <SHT85_ErrorReset+0x68>)
 8001e58:	701a      	strb	r2, [r3, #0]
        if (out_of_range_count > 5) {
 8001e5a:	e003      	b.n	8001e64 <SHT85_ErrorReset+0x5c>
        }
    } else {
        out_of_range_count = 0;
 8001e5c:	4b04      	ldr	r3, [pc, #16]	@ (8001e70 <SHT85_ErrorReset+0x68>)
 8001e5e:	2200      	movs	r2, #0
 8001e60:	701a      	strb	r2, [r3, #0]
    }
}
 8001e62:	bf00      	nop
 8001e64:	bf00      	nop
 8001e66:	3708      	adds	r7, #8
 8001e68:	46bd      	mov	sp, r7
 8001e6a:	bd80      	pop	{r7, pc}
 8001e6c:	c2300000 	.word	0xc2300000
 8001e70:	200005a4 	.word	0x200005a4

08001e74 <ResetSHT85>:

void ResetSHT85() {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b084      	sub	sp, #16
 8001e78:	af02      	add	r7, sp, #8
    uint8_t reset_command[2] = {0x30, 0xA2};
 8001e7a:	f24a 2330 	movw	r3, #41520	@ 0xa230
 8001e7e:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&hi2c1, SHT85_I2C_ADDR, reset_command, 2, HAL_MAX_DELAY);
 8001e80:	1d3a      	adds	r2, r7, #4
 8001e82:	f04f 33ff 	mov.w	r3, #4294967295
 8001e86:	9300      	str	r3, [sp, #0]
 8001e88:	2302      	movs	r3, #2
 8001e8a:	2188      	movs	r1, #136	@ 0x88
 8001e8c:	4804      	ldr	r0, [pc, #16]	@ (8001ea0 <ResetSHT85+0x2c>)
 8001e8e:	f001 f9b7 	bl	8003200 <HAL_I2C_Master_Transmit>
    HAL_Delay(50);
 8001e92:	2032      	movs	r0, #50	@ 0x32
 8001e94:	f000 fd0a 	bl	80028ac <HAL_Delay>
}
 8001e98:	bf00      	nop
 8001e9a:	3708      	adds	r7, #8
 8001e9c:	46bd      	mov	sp, r7
 8001e9e:	bd80      	pop	{r7, pc}
 8001ea0:	20000414 	.word	0x20000414

08001ea4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	b082      	sub	sp, #8
 8001ea8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8001eaa:	2300      	movs	r3, #0
 8001eac:	607b      	str	r3, [r7, #4]
 8001eae:	4b10      	ldr	r3, [pc, #64]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001eb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001eb2:	4a0f      	ldr	r2, [pc, #60]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001eb4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8001eb8:	6453      	str	r3, [r2, #68]	@ 0x44
 8001eba:	4b0d      	ldr	r3, [pc, #52]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001ebc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ebe:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8001ec2:	607b      	str	r3, [r7, #4]
 8001ec4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8001ec6:	2300      	movs	r3, #0
 8001ec8:	603b      	str	r3, [r7, #0]
 8001eca:	4b09      	ldr	r3, [pc, #36]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001ecc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001ece:	4a08      	ldr	r2, [pc, #32]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001ed0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8001ed4:	6413      	str	r3, [r2, #64]	@ 0x40
 8001ed6:	4b06      	ldr	r3, [pc, #24]	@ (8001ef0 <HAL_MspInit+0x4c>)
 8001ed8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001eda:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8001ede:	603b      	str	r3, [r7, #0]
 8001ee0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8001ee2:	2007      	movs	r0, #7
 8001ee4:	f000 fdd6 	bl	8002a94 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8001ee8:	bf00      	nop
 8001eea:	3708      	adds	r7, #8
 8001eec:	46bd      	mov	sp, r7
 8001eee:	bd80      	pop	{r7, pc}
 8001ef0:	40023800 	.word	0x40023800

08001ef4 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8001ef4:	b580      	push	{r7, lr}
 8001ef6:	b08c      	sub	sp, #48	@ 0x30
 8001ef8:	af00      	add	r7, sp, #0
 8001efa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001efc:	f107 031c 	add.w	r3, r7, #28
 8001f00:	2200      	movs	r2, #0
 8001f02:	601a      	str	r2, [r3, #0]
 8001f04:	605a      	str	r2, [r3, #4]
 8001f06:	609a      	str	r2, [r3, #8]
 8001f08:	60da      	str	r2, [r3, #12]
 8001f0a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8001f0c:	687b      	ldr	r3, [r7, #4]
 8001f0e:	681b      	ldr	r3, [r3, #0]
 8001f10:	4a3a      	ldr	r2, [pc, #232]	@ (8001ffc <HAL_I2C_MspInit+0x108>)
 8001f12:	4293      	cmp	r3, r2
 8001f14:	d12c      	bne.n	8001f70 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f16:	2300      	movs	r3, #0
 8001f18:	61bb      	str	r3, [r7, #24]
 8001f1a:	4b39      	ldr	r3, [pc, #228]	@ (8002000 <HAL_I2C_MspInit+0x10c>)
 8001f1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f1e:	4a38      	ldr	r2, [pc, #224]	@ (8002000 <HAL_I2C_MspInit+0x10c>)
 8001f20:	f043 0302 	orr.w	r3, r3, #2
 8001f24:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f26:	4b36      	ldr	r3, [pc, #216]	@ (8002000 <HAL_I2C_MspInit+0x10c>)
 8001f28:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f2a:	f003 0302 	and.w	r3, r3, #2
 8001f2e:	61bb      	str	r3, [r7, #24]
 8001f30:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8001f32:	23c0      	movs	r3, #192	@ 0xc0
 8001f34:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f36:	2312      	movs	r3, #18
 8001f38:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001f3a:	2300      	movs	r3, #0
 8001f3c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001f3e:	2303      	movs	r3, #3
 8001f40:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8001f42:	2304      	movs	r3, #4
 8001f44:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001f46:	f107 031c 	add.w	r3, r7, #28
 8001f4a:	4619      	mov	r1, r3
 8001f4c:	482d      	ldr	r0, [pc, #180]	@ (8002004 <HAL_I2C_MspInit+0x110>)
 8001f4e:	f000 fe75 	bl	8002c3c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8001f52:	2300      	movs	r3, #0
 8001f54:	617b      	str	r3, [r7, #20]
 8001f56:	4b2a      	ldr	r3, [pc, #168]	@ (8002000 <HAL_I2C_MspInit+0x10c>)
 8001f58:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f5a:	4a29      	ldr	r2, [pc, #164]	@ (8002000 <HAL_I2C_MspInit+0x10c>)
 8001f5c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8001f60:	6413      	str	r3, [r2, #64]	@ 0x40
 8001f62:	4b27      	ldr	r3, [pc, #156]	@ (8002000 <HAL_I2C_MspInit+0x10c>)
 8001f64:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001f66:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001f6a:	617b      	str	r3, [r7, #20]
 8001f6c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 8001f6e:	e041      	b.n	8001ff4 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8001f70:	687b      	ldr	r3, [r7, #4]
 8001f72:	681b      	ldr	r3, [r3, #0]
 8001f74:	4a24      	ldr	r2, [pc, #144]	@ (8002008 <HAL_I2C_MspInit+0x114>)
 8001f76:	4293      	cmp	r3, r2
 8001f78:	d13c      	bne.n	8001ff4 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8001f7a:	2300      	movs	r3, #0
 8001f7c:	613b      	str	r3, [r7, #16]
 8001f7e:	4b20      	ldr	r3, [pc, #128]	@ (8002000 <HAL_I2C_MspInit+0x10c>)
 8001f80:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f82:	4a1f      	ldr	r2, [pc, #124]	@ (8002000 <HAL_I2C_MspInit+0x10c>)
 8001f84:	f043 0302 	orr.w	r3, r3, #2
 8001f88:	6313      	str	r3, [r2, #48]	@ 0x30
 8001f8a:	4b1d      	ldr	r3, [pc, #116]	@ (8002000 <HAL_I2C_MspInit+0x10c>)
 8001f8c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001f8e:	f003 0302 	and.w	r3, r3, #2
 8001f92:	613b      	str	r3, [r7, #16]
 8001f94:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 8001f96:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8001f9a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001f9c:	2312      	movs	r3, #18
 8001f9e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fa0:	2301      	movs	r3, #1
 8001fa2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fa4:	2303      	movs	r3, #3
 8001fa6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 8001fa8:	2304      	movs	r3, #4
 8001faa:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fac:	f107 031c 	add.w	r3, r7, #28
 8001fb0:	4619      	mov	r1, r3
 8001fb2:	4814      	ldr	r0, [pc, #80]	@ (8002004 <HAL_I2C_MspInit+0x110>)
 8001fb4:	f000 fe42 	bl	8002c3c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 8001fb8:	2308      	movs	r3, #8
 8001fba:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8001fbc:	2312      	movs	r3, #18
 8001fbe:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001fc0:	2301      	movs	r3, #1
 8001fc2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8001fc4:	2303      	movs	r3, #3
 8001fc6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 8001fc8:	2309      	movs	r3, #9
 8001fca:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001fcc:	f107 031c 	add.w	r3, r7, #28
 8001fd0:	4619      	mov	r1, r3
 8001fd2:	480c      	ldr	r0, [pc, #48]	@ (8002004 <HAL_I2C_MspInit+0x110>)
 8001fd4:	f000 fe32 	bl	8002c3c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8001fd8:	2300      	movs	r3, #0
 8001fda:	60fb      	str	r3, [r7, #12]
 8001fdc:	4b08      	ldr	r3, [pc, #32]	@ (8002000 <HAL_I2C_MspInit+0x10c>)
 8001fde:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fe0:	4a07      	ldr	r2, [pc, #28]	@ (8002000 <HAL_I2C_MspInit+0x10c>)
 8001fe2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 8001fe6:	6413      	str	r3, [r2, #64]	@ 0x40
 8001fe8:	4b05      	ldr	r3, [pc, #20]	@ (8002000 <HAL_I2C_MspInit+0x10c>)
 8001fea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8001fec:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001ff0:	60fb      	str	r3, [r7, #12]
 8001ff2:	68fb      	ldr	r3, [r7, #12]
}
 8001ff4:	bf00      	nop
 8001ff6:	3730      	adds	r7, #48	@ 0x30
 8001ff8:	46bd      	mov	sp, r7
 8001ffa:	bd80      	pop	{r7, pc}
 8001ffc:	40005400 	.word	0x40005400
 8002000:	40023800 	.word	0x40023800
 8002004:	40020400 	.word	0x40020400
 8002008:	40005800 	.word	0x40005800

0800200c <HAL_SPI_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hspi: SPI handle pointer
  * @retval None
  */
void HAL_SPI_MspInit(SPI_HandleTypeDef* hspi)
{
 800200c:	b580      	push	{r7, lr}
 800200e:	b08a      	sub	sp, #40	@ 0x28
 8002010:	af00      	add	r7, sp, #0
 8002012:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002014:	f107 0314 	add.w	r3, r7, #20
 8002018:	2200      	movs	r2, #0
 800201a:	601a      	str	r2, [r3, #0]
 800201c:	605a      	str	r2, [r3, #4]
 800201e:	609a      	str	r2, [r3, #8]
 8002020:	60da      	str	r2, [r3, #12]
 8002022:	611a      	str	r2, [r3, #16]
  if(hspi->Instance==SPI1)
 8002024:	687b      	ldr	r3, [r7, #4]
 8002026:	681b      	ldr	r3, [r3, #0]
 8002028:	4a19      	ldr	r2, [pc, #100]	@ (8002090 <HAL_SPI_MspInit+0x84>)
 800202a:	4293      	cmp	r3, r2
 800202c:	d12b      	bne.n	8002086 <HAL_SPI_MspInit+0x7a>
  {
    /* USER CODE BEGIN SPI1_MspInit 0 */

    /* USER CODE END SPI1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_SPI1_CLK_ENABLE();
 800202e:	2300      	movs	r3, #0
 8002030:	613b      	str	r3, [r7, #16]
 8002032:	4b18      	ldr	r3, [pc, #96]	@ (8002094 <HAL_SPI_MspInit+0x88>)
 8002034:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002036:	4a17      	ldr	r2, [pc, #92]	@ (8002094 <HAL_SPI_MspInit+0x88>)
 8002038:	f443 5380 	orr.w	r3, r3, #4096	@ 0x1000
 800203c:	6453      	str	r3, [r2, #68]	@ 0x44
 800203e:	4b15      	ldr	r3, [pc, #84]	@ (8002094 <HAL_SPI_MspInit+0x88>)
 8002040:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002042:	f403 5380 	and.w	r3, r3, #4096	@ 0x1000
 8002046:	613b      	str	r3, [r7, #16]
 8002048:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800204a:	2300      	movs	r3, #0
 800204c:	60fb      	str	r3, [r7, #12]
 800204e:	4b11      	ldr	r3, [pc, #68]	@ (8002094 <HAL_SPI_MspInit+0x88>)
 8002050:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002052:	4a10      	ldr	r2, [pc, #64]	@ (8002094 <HAL_SPI_MspInit+0x88>)
 8002054:	f043 0301 	orr.w	r3, r3, #1
 8002058:	6313      	str	r3, [r2, #48]	@ 0x30
 800205a:	4b0e      	ldr	r3, [pc, #56]	@ (8002094 <HAL_SPI_MspInit+0x88>)
 800205c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800205e:	f003 0301 	and.w	r3, r3, #1
 8002062:	60fb      	str	r3, [r7, #12]
 8002064:	68fb      	ldr	r3, [r7, #12]
    /**SPI1 GPIO Configuration
    PA5     ------> SPI1_SCK
    PA6     ------> SPI1_MISO
    PA7     ------> SPI1_MOSI
    */
    GPIO_InitStruct.Pin = GPIO_PIN_5|GPIO_PIN_6|GPIO_PIN_7;
 8002066:	23e0      	movs	r3, #224	@ 0xe0
 8002068:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800206a:	2302      	movs	r3, #2
 800206c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800206e:	2300      	movs	r3, #0
 8002070:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002072:	2303      	movs	r3, #3
 8002074:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF5_SPI1;
 8002076:	2305      	movs	r3, #5
 8002078:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800207a:	f107 0314 	add.w	r3, r7, #20
 800207e:	4619      	mov	r1, r3
 8002080:	4805      	ldr	r0, [pc, #20]	@ (8002098 <HAL_SPI_MspInit+0x8c>)
 8002082:	f000 fddb 	bl	8002c3c <HAL_GPIO_Init>

    /* USER CODE END SPI1_MspInit 1 */

  }

}
 8002086:	bf00      	nop
 8002088:	3728      	adds	r7, #40	@ 0x28
 800208a:	46bd      	mov	sp, r7
 800208c:	bd80      	pop	{r7, pc}
 800208e:	bf00      	nop
 8002090:	40013000 	.word	0x40013000
 8002094:	40023800 	.word	0x40023800
 8002098:	40020000 	.word	0x40020000

0800209c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800209c:	b580      	push	{r7, lr}
 800209e:	b08a      	sub	sp, #40	@ 0x28
 80020a0:	af00      	add	r7, sp, #0
 80020a2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80020a4:	f107 0314 	add.w	r3, r7, #20
 80020a8:	2200      	movs	r2, #0
 80020aa:	601a      	str	r2, [r3, #0]
 80020ac:	605a      	str	r2, [r3, #4]
 80020ae:	609a      	str	r2, [r3, #8]
 80020b0:	60da      	str	r2, [r3, #12]
 80020b2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	681b      	ldr	r3, [r3, #0]
 80020b8:	4a1d      	ldr	r2, [pc, #116]	@ (8002130 <HAL_UART_MspInit+0x94>)
 80020ba:	4293      	cmp	r3, r2
 80020bc:	d133      	bne.n	8002126 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART2_MspInit 0 */

    /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80020be:	2300      	movs	r3, #0
 80020c0:	613b      	str	r3, [r7, #16]
 80020c2:	4b1c      	ldr	r3, [pc, #112]	@ (8002134 <HAL_UART_MspInit+0x98>)
 80020c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020c6:	4a1b      	ldr	r2, [pc, #108]	@ (8002134 <HAL_UART_MspInit+0x98>)
 80020c8:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 80020cc:	6413      	str	r3, [r2, #64]	@ 0x40
 80020ce:	4b19      	ldr	r3, [pc, #100]	@ (8002134 <HAL_UART_MspInit+0x98>)
 80020d0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80020d2:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80020d6:	613b      	str	r3, [r7, #16]
 80020d8:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80020da:	2300      	movs	r3, #0
 80020dc:	60fb      	str	r3, [r7, #12]
 80020de:	4b15      	ldr	r3, [pc, #84]	@ (8002134 <HAL_UART_MspInit+0x98>)
 80020e0:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020e2:	4a14      	ldr	r2, [pc, #80]	@ (8002134 <HAL_UART_MspInit+0x98>)
 80020e4:	f043 0301 	orr.w	r3, r3, #1
 80020e8:	6313      	str	r3, [r2, #48]	@ 0x30
 80020ea:	4b12      	ldr	r3, [pc, #72]	@ (8002134 <HAL_UART_MspInit+0x98>)
 80020ec:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020ee:	f003 0301 	and.w	r3, r3, #1
 80020f2:	60fb      	str	r3, [r7, #12]
 80020f4:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 80020f6:	230c      	movs	r3, #12
 80020f8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80020fa:	2302      	movs	r3, #2
 80020fc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80020fe:	2300      	movs	r3, #0
 8002100:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002102:	2303      	movs	r3, #3
 8002104:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002106:	2307      	movs	r3, #7
 8002108:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800210a:	f107 0314 	add.w	r3, r7, #20
 800210e:	4619      	mov	r1, r3
 8002110:	4809      	ldr	r0, [pc, #36]	@ (8002138 <HAL_UART_MspInit+0x9c>)
 8002112:	f000 fd93 	bl	8002c3c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002116:	2200      	movs	r2, #0
 8002118:	2100      	movs	r1, #0
 800211a:	2026      	movs	r0, #38	@ 0x26
 800211c:	f000 fcc5 	bl	8002aaa <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002120:	2026      	movs	r0, #38	@ 0x26
 8002122:	f000 fcde 	bl	8002ae2 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART2_MspInit 1 */

  }

}
 8002126:	bf00      	nop
 8002128:	3728      	adds	r7, #40	@ 0x28
 800212a:	46bd      	mov	sp, r7
 800212c:	bd80      	pop	{r7, pc}
 800212e:	bf00      	nop
 8002130:	40004400 	.word	0x40004400
 8002134:	40023800 	.word	0x40023800
 8002138:	40020000 	.word	0x40020000

0800213c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 800213c:	b480      	push	{r7}
 800213e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8002140:	bf00      	nop
 8002142:	e7fd      	b.n	8002140 <NMI_Handler+0x4>

08002144 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002144:	b480      	push	{r7}
 8002146:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002148:	bf00      	nop
 800214a:	e7fd      	b.n	8002148 <HardFault_Handler+0x4>

0800214c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 800214c:	b480      	push	{r7}
 800214e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002150:	bf00      	nop
 8002152:	e7fd      	b.n	8002150 <MemManage_Handler+0x4>

08002154 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002154:	b480      	push	{r7}
 8002156:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002158:	bf00      	nop
 800215a:	e7fd      	b.n	8002158 <BusFault_Handler+0x4>

0800215c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800215c:	b480      	push	{r7}
 800215e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002160:	bf00      	nop
 8002162:	e7fd      	b.n	8002160 <UsageFault_Handler+0x4>

08002164 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002164:	b480      	push	{r7}
 8002166:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002168:	bf00      	nop
 800216a:	46bd      	mov	sp, r7
 800216c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002170:	4770      	bx	lr

08002172 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002172:	b480      	push	{r7}
 8002174:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002176:	bf00      	nop
 8002178:	46bd      	mov	sp, r7
 800217a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800217e:	4770      	bx	lr

08002180 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002180:	b480      	push	{r7}
 8002182:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002184:	bf00      	nop
 8002186:	46bd      	mov	sp, r7
 8002188:	f85d 7b04 	ldr.w	r7, [sp], #4
 800218c:	4770      	bx	lr

0800218e <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800218e:	b580      	push	{r7, lr}
 8002190:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002192:	f000 fb6b 	bl	800286c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002196:	bf00      	nop
 8002198:	bd80      	pop	{r7, pc}
	...

0800219c <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 800219c:	b580      	push	{r7, lr}
 800219e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80021a0:	4802      	ldr	r0, [pc, #8]	@ (80021ac <USART2_IRQHandler+0x10>)
 80021a2:	f003 f9af 	bl	8005504 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80021a6:	bf00      	nop
 80021a8:	bd80      	pop	{r7, pc}
 80021aa:	bf00      	nop
 80021ac:	20000514 	.word	0x20000514

080021b0 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 80021b0:	b480      	push	{r7}
 80021b2:	af00      	add	r7, sp, #0
  return 1;
 80021b4:	2301      	movs	r3, #1
}
 80021b6:	4618      	mov	r0, r3
 80021b8:	46bd      	mov	sp, r7
 80021ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80021be:	4770      	bx	lr

080021c0 <_kill>:

int _kill(int pid, int sig)
{
 80021c0:	b580      	push	{r7, lr}
 80021c2:	b082      	sub	sp, #8
 80021c4:	af00      	add	r7, sp, #0
 80021c6:	6078      	str	r0, [r7, #4]
 80021c8:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 80021ca:	f005 faad 	bl	8007728 <__errno>
 80021ce:	4603      	mov	r3, r0
 80021d0:	2216      	movs	r2, #22
 80021d2:	601a      	str	r2, [r3, #0]
  return -1;
 80021d4:	f04f 33ff 	mov.w	r3, #4294967295
}
 80021d8:	4618      	mov	r0, r3
 80021da:	3708      	adds	r7, #8
 80021dc:	46bd      	mov	sp, r7
 80021de:	bd80      	pop	{r7, pc}

080021e0 <_exit>:

void _exit (int status)
{
 80021e0:	b580      	push	{r7, lr}
 80021e2:	b082      	sub	sp, #8
 80021e4:	af00      	add	r7, sp, #0
 80021e6:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 80021e8:	f04f 31ff 	mov.w	r1, #4294967295
 80021ec:	6878      	ldr	r0, [r7, #4]
 80021ee:	f7ff ffe7 	bl	80021c0 <_kill>
  while (1) {}    /* Make sure we hang here */
 80021f2:	bf00      	nop
 80021f4:	e7fd      	b.n	80021f2 <_exit+0x12>

080021f6 <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80021f6:	b580      	push	{r7, lr}
 80021f8:	b086      	sub	sp, #24
 80021fa:	af00      	add	r7, sp, #0
 80021fc:	60f8      	str	r0, [r7, #12]
 80021fe:	60b9      	str	r1, [r7, #8]
 8002200:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002202:	2300      	movs	r3, #0
 8002204:	617b      	str	r3, [r7, #20]
 8002206:	e00a      	b.n	800221e <_read+0x28>
  {
    *ptr++ = __io_getchar();
 8002208:	f3af 8000 	nop.w
 800220c:	4601      	mov	r1, r0
 800220e:	68bb      	ldr	r3, [r7, #8]
 8002210:	1c5a      	adds	r2, r3, #1
 8002212:	60ba      	str	r2, [r7, #8]
 8002214:	b2ca      	uxtb	r2, r1
 8002216:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8002218:	697b      	ldr	r3, [r7, #20]
 800221a:	3301      	adds	r3, #1
 800221c:	617b      	str	r3, [r7, #20]
 800221e:	697a      	ldr	r2, [r7, #20]
 8002220:	687b      	ldr	r3, [r7, #4]
 8002222:	429a      	cmp	r2, r3
 8002224:	dbf0      	blt.n	8002208 <_read+0x12>
  }

  return len;
 8002226:	687b      	ldr	r3, [r7, #4]
}
 8002228:	4618      	mov	r0, r3
 800222a:	3718      	adds	r7, #24
 800222c:	46bd      	mov	sp, r7
 800222e:	bd80      	pop	{r7, pc}

08002230 <_close>:
  }
  return len;
}

int _close(int file)
{
 8002230:	b480      	push	{r7}
 8002232:	b083      	sub	sp, #12
 8002234:	af00      	add	r7, sp, #0
 8002236:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8002238:	f04f 33ff 	mov.w	r3, #4294967295
}
 800223c:	4618      	mov	r0, r3
 800223e:	370c      	adds	r7, #12
 8002240:	46bd      	mov	sp, r7
 8002242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002246:	4770      	bx	lr

08002248 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002248:	b480      	push	{r7}
 800224a:	b083      	sub	sp, #12
 800224c:	af00      	add	r7, sp, #0
 800224e:	6078      	str	r0, [r7, #4]
 8002250:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8002252:	683b      	ldr	r3, [r7, #0]
 8002254:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002258:	605a      	str	r2, [r3, #4]
  return 0;
 800225a:	2300      	movs	r3, #0
}
 800225c:	4618      	mov	r0, r3
 800225e:	370c      	adds	r7, #12
 8002260:	46bd      	mov	sp, r7
 8002262:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002266:	4770      	bx	lr

08002268 <_isatty>:

int _isatty(int file)
{
 8002268:	b480      	push	{r7}
 800226a:	b083      	sub	sp, #12
 800226c:	af00      	add	r7, sp, #0
 800226e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8002270:	2301      	movs	r3, #1
}
 8002272:	4618      	mov	r0, r3
 8002274:	370c      	adds	r7, #12
 8002276:	46bd      	mov	sp, r7
 8002278:	f85d 7b04 	ldr.w	r7, [sp], #4
 800227c:	4770      	bx	lr

0800227e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800227e:	b480      	push	{r7}
 8002280:	b085      	sub	sp, #20
 8002282:	af00      	add	r7, sp, #0
 8002284:	60f8      	str	r0, [r7, #12]
 8002286:	60b9      	str	r1, [r7, #8]
 8002288:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800228a:	2300      	movs	r3, #0
}
 800228c:	4618      	mov	r0, r3
 800228e:	3714      	adds	r7, #20
 8002290:	46bd      	mov	sp, r7
 8002292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002296:	4770      	bx	lr

08002298 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002298:	b580      	push	{r7, lr}
 800229a:	b086      	sub	sp, #24
 800229c:	af00      	add	r7, sp, #0
 800229e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80022a0:	4a14      	ldr	r2, [pc, #80]	@ (80022f4 <_sbrk+0x5c>)
 80022a2:	4b15      	ldr	r3, [pc, #84]	@ (80022f8 <_sbrk+0x60>)
 80022a4:	1ad3      	subs	r3, r2, r3
 80022a6:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80022a8:	697b      	ldr	r3, [r7, #20]
 80022aa:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80022ac:	4b13      	ldr	r3, [pc, #76]	@ (80022fc <_sbrk+0x64>)
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	2b00      	cmp	r3, #0
 80022b2:	d102      	bne.n	80022ba <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80022b4:	4b11      	ldr	r3, [pc, #68]	@ (80022fc <_sbrk+0x64>)
 80022b6:	4a12      	ldr	r2, [pc, #72]	@ (8002300 <_sbrk+0x68>)
 80022b8:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80022ba:	4b10      	ldr	r3, [pc, #64]	@ (80022fc <_sbrk+0x64>)
 80022bc:	681a      	ldr	r2, [r3, #0]
 80022be:	687b      	ldr	r3, [r7, #4]
 80022c0:	4413      	add	r3, r2
 80022c2:	693a      	ldr	r2, [r7, #16]
 80022c4:	429a      	cmp	r2, r3
 80022c6:	d207      	bcs.n	80022d8 <_sbrk+0x40>
  {
    errno = ENOMEM;
 80022c8:	f005 fa2e 	bl	8007728 <__errno>
 80022cc:	4603      	mov	r3, r0
 80022ce:	220c      	movs	r2, #12
 80022d0:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 80022d2:	f04f 33ff 	mov.w	r3, #4294967295
 80022d6:	e009      	b.n	80022ec <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 80022d8:	4b08      	ldr	r3, [pc, #32]	@ (80022fc <_sbrk+0x64>)
 80022da:	681b      	ldr	r3, [r3, #0]
 80022dc:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 80022de:	4b07      	ldr	r3, [pc, #28]	@ (80022fc <_sbrk+0x64>)
 80022e0:	681a      	ldr	r2, [r3, #0]
 80022e2:	687b      	ldr	r3, [r7, #4]
 80022e4:	4413      	add	r3, r2
 80022e6:	4a05      	ldr	r2, [pc, #20]	@ (80022fc <_sbrk+0x64>)
 80022e8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80022ea:	68fb      	ldr	r3, [r7, #12]
}
 80022ec:	4618      	mov	r0, r3
 80022ee:	3718      	adds	r7, #24
 80022f0:	46bd      	mov	sp, r7
 80022f2:	bd80      	pop	{r7, pc}
 80022f4:	20020000 	.word	0x20020000
 80022f8:	00000400 	.word	0x00000400
 80022fc:	200005a8 	.word	0x200005a8
 8002300:	20000928 	.word	0x20000928

08002304 <__NVIC_SetPriority>:
{
 8002304:	b480      	push	{r7}
 8002306:	b083      	sub	sp, #12
 8002308:	af00      	add	r7, sp, #0
 800230a:	4603      	mov	r3, r0
 800230c:	6039      	str	r1, [r7, #0]
 800230e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002310:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002314:	2b00      	cmp	r3, #0
 8002316:	db0a      	blt.n	800232e <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002318:	683b      	ldr	r3, [r7, #0]
 800231a:	b2da      	uxtb	r2, r3
 800231c:	490c      	ldr	r1, [pc, #48]	@ (8002350 <__NVIC_SetPriority+0x4c>)
 800231e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002322:	0112      	lsls	r2, r2, #4
 8002324:	b2d2      	uxtb	r2, r2
 8002326:	440b      	add	r3, r1
 8002328:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 800232c:	e00a      	b.n	8002344 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800232e:	683b      	ldr	r3, [r7, #0]
 8002330:	b2da      	uxtb	r2, r3
 8002332:	4908      	ldr	r1, [pc, #32]	@ (8002354 <__NVIC_SetPriority+0x50>)
 8002334:	79fb      	ldrb	r3, [r7, #7]
 8002336:	f003 030f 	and.w	r3, r3, #15
 800233a:	3b04      	subs	r3, #4
 800233c:	0112      	lsls	r2, r2, #4
 800233e:	b2d2      	uxtb	r2, r2
 8002340:	440b      	add	r3, r1
 8002342:	761a      	strb	r2, [r3, #24]
}
 8002344:	bf00      	nop
 8002346:	370c      	adds	r7, #12
 8002348:	46bd      	mov	sp, r7
 800234a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800234e:	4770      	bx	lr
 8002350:	e000e100 	.word	0xe000e100
 8002354:	e000ed00 	.word	0xe000ed00

08002358 <SysTick_Config>:
{
 8002358:	b580      	push	{r7, lr}
 800235a:	b082      	sub	sp, #8
 800235c:	af00      	add	r7, sp, #0
 800235e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002360:	687b      	ldr	r3, [r7, #4]
 8002362:	3b01      	subs	r3, #1
 8002364:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002368:	d301      	bcc.n	800236e <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 800236a:	2301      	movs	r3, #1
 800236c:	e00f      	b.n	800238e <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800236e:	4a0a      	ldr	r2, [pc, #40]	@ (8002398 <SysTick_Config+0x40>)
 8002370:	687b      	ldr	r3, [r7, #4]
 8002372:	3b01      	subs	r3, #1
 8002374:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002376:	210f      	movs	r1, #15
 8002378:	f04f 30ff 	mov.w	r0, #4294967295
 800237c:	f7ff ffc2 	bl	8002304 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002380:	4b05      	ldr	r3, [pc, #20]	@ (8002398 <SysTick_Config+0x40>)
 8002382:	2200      	movs	r2, #0
 8002384:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002386:	4b04      	ldr	r3, [pc, #16]	@ (8002398 <SysTick_Config+0x40>)
 8002388:	2207      	movs	r2, #7
 800238a:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 800238c:	2300      	movs	r3, #0
}
 800238e:	4618      	mov	r0, r3
 8002390:	3708      	adds	r7, #8
 8002392:	46bd      	mov	sp, r7
 8002394:	bd80      	pop	{r7, pc}
 8002396:	bf00      	nop
 8002398:	e000e010 	.word	0xe000e010

0800239c <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 800239c:	b580      	push	{r7, lr}
 800239e:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80023a0:	4b09      	ldr	r3, [pc, #36]	@ (80023c8 <SystemInit+0x2c>)
 80023a2:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80023a6:	4a08      	ldr	r2, [pc, #32]	@ (80023c8 <SystemInit+0x2c>)
 80023a8:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80023ac:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */

  // Agregado manualmente
  SysTick_Config(SystemCoreClock / 1000);
 80023b0:	4b06      	ldr	r3, [pc, #24]	@ (80023cc <SystemInit+0x30>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4a06      	ldr	r2, [pc, #24]	@ (80023d0 <SystemInit+0x34>)
 80023b6:	fba2 2303 	umull	r2, r3, r2, r3
 80023ba:	099b      	lsrs	r3, r3, #6
 80023bc:	4618      	mov	r0, r3
 80023be:	f7ff ffcb 	bl	8002358 <SysTick_Config>

}
 80023c2:	bf00      	nop
 80023c4:	bd80      	pop	{r7, pc}
 80023c6:	bf00      	nop
 80023c8:	e000ed00 	.word	0xe000ed00
 80023cc:	20000008 	.word	0x20000008
 80023d0:	10624dd3 	.word	0x10624dd3

080023d4 <VEML7700_Init>:
//float luminosity = 0.0;
float totalLuminosity = 0.0f;
uint8_t sampleCountLight = 0;

// Configuración del sensor
void VEML7700_Init(void) {
 80023d4:	b580      	push	{r7, lr}
 80023d6:	b086      	sub	sp, #24
 80023d8:	af04      	add	r7, sp, #16
    uint8_t config[2] = { 0x00, 0x00 };  // GAIN x1, IT 100ms, sensor encendido
 80023da:	2300      	movs	r3, #0
 80023dc:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Write(&hi2c2, VEML7700_I2C_ADDR, VEML7700_REG_CONF, I2C_MEMADD_SIZE_8BIT, config, 2, HAL_MAX_DELAY);
 80023de:	f04f 33ff 	mov.w	r3, #4294967295
 80023e2:	9302      	str	r3, [sp, #8]
 80023e4:	2302      	movs	r3, #2
 80023e6:	9301      	str	r3, [sp, #4]
 80023e8:	1d3b      	adds	r3, r7, #4
 80023ea:	9300      	str	r3, [sp, #0]
 80023ec:	2301      	movs	r3, #1
 80023ee:	2200      	movs	r2, #0
 80023f0:	2120      	movs	r1, #32
 80023f2:	4805      	ldr	r0, [pc, #20]	@ (8002408 <VEML7700_Init+0x34>)
 80023f4:	f001 fa34 	bl	8003860 <HAL_I2C_Mem_Write>
    HAL_Delay(5);
 80023f8:	2005      	movs	r0, #5
 80023fa:	f000 fa57 	bl	80028ac <HAL_Delay>
}
 80023fe:	bf00      	nop
 8002400:	3708      	adds	r7, #8
 8002402:	46bd      	mov	sp, r7
 8002404:	bd80      	pop	{r7, pc}
 8002406:	bf00      	nop
 8002408:	20000468 	.word	0x20000468
 800240c:	00000000 	.word	0x00000000

08002410 <ReadVEML7700>:

// Lectura de luminosidad
void ReadVEML7700(float *lux) {
 8002410:	b580      	push	{r7, lr}
 8002412:	b088      	sub	sp, #32
 8002414:	af04      	add	r7, sp, #16
 8002416:	6078      	str	r0, [r7, #4]
    uint8_t buffer[2] = { 0x00, 0x00 };
 8002418:	2300      	movs	r3, #0
 800241a:	81bb      	strh	r3, [r7, #12]
    HAL_I2C_Mem_Read(&hi2c2, VEML7700_I2C_ADDR, VEML7700_REG_ALS, I2C_MEMADD_SIZE_8BIT, buffer, 2, HAL_MAX_DELAY);
 800241c:	f04f 33ff 	mov.w	r3, #4294967295
 8002420:	9302      	str	r3, [sp, #8]
 8002422:	2302      	movs	r3, #2
 8002424:	9301      	str	r3, [sp, #4]
 8002426:	f107 030c 	add.w	r3, r7, #12
 800242a:	9300      	str	r3, [sp, #0]
 800242c:	2301      	movs	r3, #1
 800242e:	2204      	movs	r2, #4
 8002430:	2120      	movs	r1, #32
 8002432:	4815      	ldr	r0, [pc, #84]	@ (8002488 <ReadVEML7700+0x78>)
 8002434:	f001 fb0e 	bl	8003a54 <HAL_I2C_Mem_Read>

    lux_raw = (buffer[1] << 8) | buffer[0]; // Convertir a 16 bits
 8002438:	7b7b      	ldrb	r3, [r7, #13]
 800243a:	b21b      	sxth	r3, r3
 800243c:	021b      	lsls	r3, r3, #8
 800243e:	b21a      	sxth	r2, r3
 8002440:	7b3b      	ldrb	r3, [r7, #12]
 8002442:	b21b      	sxth	r3, r3
 8002444:	4313      	orrs	r3, r2
 8002446:	b21b      	sxth	r3, r3
 8002448:	b29a      	uxth	r2, r3
 800244a:	4b10      	ldr	r3, [pc, #64]	@ (800248c <ReadVEML7700+0x7c>)
 800244c:	801a      	strh	r2, [r3, #0]
    *lux = lux_raw * 0.0036; // Factor de conversión del datasheet
 800244e:	4b0f      	ldr	r3, [pc, #60]	@ (800248c <ReadVEML7700+0x7c>)
 8002450:	881b      	ldrh	r3, [r3, #0]
 8002452:	4618      	mov	r0, r3
 8002454:	f7fe f86e 	bl	8000534 <__aeabi_i2d>
 8002458:	a309      	add	r3, pc, #36	@ (adr r3, 8002480 <ReadVEML7700+0x70>)
 800245a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800245e:	f7fe f8d3 	bl	8000608 <__aeabi_dmul>
 8002462:	4602      	mov	r2, r0
 8002464:	460b      	mov	r3, r1
 8002466:	4610      	mov	r0, r2
 8002468:	4619      	mov	r1, r3
 800246a:	f7fe fbc5 	bl	8000bf8 <__aeabi_d2f>
 800246e:	4602      	mov	r2, r0
 8002470:	687b      	ldr	r3, [r7, #4]
 8002472:	601a      	str	r2, [r3, #0]
}
 8002474:	bf00      	nop
 8002476:	3710      	adds	r7, #16
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	f3af 8000 	nop.w
 8002480:	487fcb92 	.word	0x487fcb92
 8002484:	3f6d7dbf 	.word	0x3f6d7dbf
 8002488:	20000468 	.word	0x20000468
 800248c:	200005ac 	.word	0x200005ac

08002490 <connectToWiFi>:
uint32_t marblack5 = 0;

//static uint8_t conf = 0; // Bandera de recepción completa


void connectToWiFi(const char* ssid, const char* password) {	// Configura y conecta el ESP8266 a una red WiFi utilizando el comando AT
 8002490:	b580      	push	{r7, lr}
 8002492:	b09c      	sub	sp, #112	@ 0x70
 8002494:	af00      	add	r7, sp, #0
 8002496:	6078      	str	r0, [r7, #4]
 8002498:	6039      	str	r1, [r7, #0]
    // Enviar comando AT y esperar respuesta con interrupciones
	esp8266_send_command("AT\r\n");
 800249a:	4814      	ldr	r0, [pc, #80]	@ (80024ec <connectToWiFi+0x5c>)
 800249c:	f7fe fe24 	bl	80010e8 <esp8266_send_command>
	esp8266_receive_response_IT();
 80024a0:	f7fe fdfe 	bl	80010a0 <esp8266_receive_response_IT>
	esp8266_clear_response_flag();	// rxComplete = 0;
 80024a4:	f7fe fe4c 	bl	8001140 <esp8266_clear_response_flag>


    // Reiniciar el ESP8266
	esp8266_send_command("AT+RST\r\n");
 80024a8:	4811      	ldr	r0, [pc, #68]	@ (80024f0 <connectToWiFi+0x60>)
 80024aa:	f7fe fe1d 	bl	80010e8 <esp8266_send_command>
	esp8266_receive_response_IT();
 80024ae:	f7fe fdf7 	bl	80010a0 <esp8266_receive_response_IT>
	esp8266_clear_response_flag();	// rxComplete = 0;
 80024b2:	f7fe fe45 	bl	8001140 <esp8266_clear_response_flag>


    // Configurar modo Station
	esp8266_send_command("AT+CWMODE=1\r\n");
 80024b6:	480f      	ldr	r0, [pc, #60]	@ (80024f4 <connectToWiFi+0x64>)
 80024b8:	f7fe fe16 	bl	80010e8 <esp8266_send_command>
	esp8266_receive_response_IT();
 80024bc:	f7fe fdf0 	bl	80010a0 <esp8266_receive_response_IT>
	esp8266_clear_response_flag();	// rxComplete = 0;
 80024c0:	f7fe fe3e 	bl	8001140 <esp8266_clear_response_flag>

    // Conectar a WiFi
	char connectCmd[100];
	sprintf(connectCmd, "AT+CWJAP=\"%s\",\"%s\"\r\n", ssid, password);
 80024c4:	f107 000c 	add.w	r0, r7, #12
 80024c8:	683b      	ldr	r3, [r7, #0]
 80024ca:	687a      	ldr	r2, [r7, #4]
 80024cc:	490a      	ldr	r1, [pc, #40]	@ (80024f8 <connectToWiFi+0x68>)
 80024ce:	f004 ffc9 	bl	8007464 <siprintf>
	esp8266_send_command(connectCmd);
 80024d2:	f107 030c 	add.w	r3, r7, #12
 80024d6:	4618      	mov	r0, r3
 80024d8:	f7fe fe06 	bl	80010e8 <esp8266_send_command>
	esp8266_receive_response_IT();
 80024dc:	f7fe fde0 	bl	80010a0 <esp8266_receive_response_IT>
	esp8266_clear_response_flag();	// rxComplete = 0;
 80024e0:	f7fe fe2e 	bl	8001140 <esp8266_clear_response_flag>
}
 80024e4:	bf00      	nop
 80024e6:	3770      	adds	r7, #112	@ 0x70
 80024e8:	46bd      	mov	sp, r7
 80024ea:	bd80      	pop	{r7, pc}
 80024ec:	0800ae10 	.word	0x0800ae10
 80024f0:	0800ae18 	.word	0x0800ae18
 80024f4:	0800ae24 	.word	0x0800ae24
 80024f8:	0800ae34 	.word	0x0800ae34

080024fc <isWiFiConnected>:

uint8_t isWiFiConnected() {	// Verifica si el ESP8266 está conectado a una red WiFi comprobando el estado de la conexión
 80024fc:	b580      	push	{r7, lr}
 80024fe:	af00      	add	r7, sp, #0
	esp8266_send_command("AT+CWJAP?\r\n");
 8002500:	480a      	ldr	r0, [pc, #40]	@ (800252c <isWiFiConnected+0x30>)
 8002502:	f7fe fdf1 	bl	80010e8 <esp8266_send_command>
	esp8266_receive_response_IT();
 8002506:	f7fe fdcb 	bl	80010a0 <esp8266_receive_response_IT>
	esp8266_clear_response_flag();	// rxComplete = 0;
 800250a:	f7fe fe19 	bl	8001140 <esp8266_clear_response_flag>
	// Comprobar si la respuesta contiene el SSID
	return (strstr(esp8266_get_response(), "No AP") == NULL); // No Access Point
 800250e:	f7fe fe0d 	bl	800112c <esp8266_get_response>
 8002512:	4603      	mov	r3, r0
 8002514:	4906      	ldr	r1, [pc, #24]	@ (8002530 <isWiFiConnected+0x34>)
 8002516:	4618      	mov	r0, r3
 8002518:	f005 f8a6 	bl	8007668 <strstr>
 800251c:	4603      	mov	r3, r0
 800251e:	2b00      	cmp	r3, #0
 8002520:	bf0c      	ite	eq
 8002522:	2301      	moveq	r3, #1
 8002524:	2300      	movne	r3, #0
 8002526:	b2db      	uxtb	r3, r3
}
 8002528:	4618      	mov	r0, r3
 800252a:	bd80      	pop	{r7, pc}
 800252c:	0800ae4c 	.word	0x0800ae4c
 8002530:	0800ae58 	.word	0x0800ae58

08002534 <sendDataToThingSpeak>:

void sendDataToThingSpeak(const char* apiKey, float averageTemperature, float humidity, float luminosity) {	// Almacena los datos a enviar a ThingSpeak y establece el estado para iniciar la máquina de estados
 8002534:	b480      	push	{r7}
 8002536:	b085      	sub	sp, #20
 8002538:	af00      	add	r7, sp, #0
 800253a:	60f8      	str	r0, [r7, #12]
 800253c:	ed87 0a02 	vstr	s0, [r7, #8]
 8002540:	edc7 0a01 	vstr	s1, [r7, #4]
 8002544:	ed87 1a00 	vstr	s2, [r7]
    wifiApiKey = apiKey;
 8002548:	4a0a      	ldr	r2, [pc, #40]	@ (8002574 <sendDataToThingSpeak+0x40>)
 800254a:	68fb      	ldr	r3, [r7, #12]
 800254c:	6013      	str	r3, [r2, #0]
    wifiTemperature = averageTemperature;
 800254e:	4a0a      	ldr	r2, [pc, #40]	@ (8002578 <sendDataToThingSpeak+0x44>)
 8002550:	68bb      	ldr	r3, [r7, #8]
 8002552:	6013      	str	r3, [r2, #0]
    wifiHumidity = humidity;
 8002554:	4a09      	ldr	r2, [pc, #36]	@ (800257c <sendDataToThingSpeak+0x48>)
 8002556:	687b      	ldr	r3, [r7, #4]
 8002558:	6013      	str	r3, [r2, #0]
    wifiLuminosity = luminosity;
 800255a:	4a09      	ldr	r2, [pc, #36]	@ (8002580 <sendDataToThingSpeak+0x4c>)
 800255c:	683b      	ldr	r3, [r7, #0]
 800255e:	6013      	str	r3, [r2, #0]
    state = 1; // Iniciar la máquina de estados
 8002560:	4b08      	ldr	r3, [pc, #32]	@ (8002584 <sendDataToThingSpeak+0x50>)
 8002562:	2201      	movs	r2, #1
 8002564:	701a      	strb	r2, [r3, #0]
}
 8002566:	bf00      	nop
 8002568:	3714      	adds	r7, #20
 800256a:	46bd      	mov	sp, r7
 800256c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002570:	4770      	bx	lr
 8002572:	bf00      	nop
 8002574:	200007b4 	.word	0x200007b4
 8002578:	200007b8 	.word	0x200007b8
 800257c:	200007bc 	.word	0x200007bc
 8002580:	200007c0 	.word	0x200007c0
 8002584:	200007b0 	.word	0x200007b0

08002588 <processThingSpeakStateMachine>:




void processThingSpeakStateMachine() {	// Maneja el proceso de comunicación con ThingSpeak a través de comandos AT y gestiona las respuestas del ESP8266 en una máquina de estados
 8002588:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800258c:	b0d3      	sub	sp, #332	@ 0x14c
 800258e:	af06      	add	r7, sp, #24
    switch (state) {
 8002590:	4b6c      	ldr	r3, [pc, #432]	@ (8002744 <processThingSpeakStateMachine+0x1bc>)
 8002592:	781b      	ldrb	r3, [r3, #0]
 8002594:	b2db      	uxtb	r3, r3
 8002596:	3b01      	subs	r3, #1
 8002598:	2b04      	cmp	r3, #4
 800259a:	f200 80cd 	bhi.w	8002738 <processThingSpeakStateMachine+0x1b0>
 800259e:	a201      	add	r2, pc, #4	@ (adr r2, 80025a4 <processThingSpeakStateMachine+0x1c>)
 80025a0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80025a4:	080025b9 	.word	0x080025b9
 80025a8:	080025e7 	.word	0x080025e7
 80025ac:	08002673 	.word	0x08002673
 80025b0:	080026dd 	.word	0x080026dd
 80025b4:	080026f3 	.word	0x080026f3
        case 1: {
            char cmd[100];
            sprintf(cmd, "AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 80025b8:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025bc:	4962      	ldr	r1, [pc, #392]	@ (8002748 <processThingSpeakStateMachine+0x1c0>)
 80025be:	4618      	mov	r0, r3
 80025c0:	f004 ff50 	bl	8007464 <siprintf>
            esp8266_send_command(cmd);
 80025c4:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80025c8:	4618      	mov	r0, r3
 80025ca:	f7fe fd8d 	bl	80010e8 <esp8266_send_command>
			esp8266_receive_response_IT();
 80025ce:	f7fe fd67 	bl	80010a0 <esp8266_receive_response_IT>
            state = 2;
 80025d2:	4b5c      	ldr	r3, [pc, #368]	@ (8002744 <processThingSpeakStateMachine+0x1bc>)
 80025d4:	2202      	movs	r2, #2
 80025d6:	701a      	strb	r2, [r3, #0]
            memset(response, 0, sizeof(response));  // Limpiar el buffer
 80025d8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80025dc:	2100      	movs	r1, #0
 80025de:	485b      	ldr	r0, [pc, #364]	@ (800274c <processThingSpeakStateMachine+0x1c4>)
 80025e0:	f005 f83a 	bl	8007658 <memset>
            break;
 80025e4:	e0a8      	b.n	8002738 <processThingSpeakStateMachine+0x1b0>
        }
        case 2: {
            if (esp8266_is_response_ready()) {
 80025e6:	f7fe fd95 	bl	8001114 <esp8266_is_response_ready>
 80025ea:	4603      	mov	r3, r0
 80025ec:	2b00      	cmp	r3, #0
 80025ee:	f000 809e 	beq.w	800272e <processThingSpeakStateMachine+0x1a6>
            	esp8266_clear_response_flag();	//rxComplete = 0;
 80025f2:	f7fe fda5 	bl	8001140 <esp8266_clear_response_flag>
                char http_request[250];
                sprintf(http_request, "GET /update?api_key=%s&field1=%.2f&field2=%.2f&field3=%.2f HTTP/1.1\r\nHost: api.thingspeak.com\r\nConnection: close\r\n\r\n", wifiApiKey, wifiTemperature, wifiHumidity, wifiLuminosity);
 80025f6:	4b56      	ldr	r3, [pc, #344]	@ (8002750 <processThingSpeakStateMachine+0x1c8>)
 80025f8:	681e      	ldr	r6, [r3, #0]
 80025fa:	4b56      	ldr	r3, [pc, #344]	@ (8002754 <processThingSpeakStateMachine+0x1cc>)
 80025fc:	681b      	ldr	r3, [r3, #0]
 80025fe:	4618      	mov	r0, r3
 8002600:	f7fd ffaa 	bl	8000558 <__aeabi_f2d>
 8002604:	4604      	mov	r4, r0
 8002606:	460d      	mov	r5, r1
 8002608:	4b53      	ldr	r3, [pc, #332]	@ (8002758 <processThingSpeakStateMachine+0x1d0>)
 800260a:	681b      	ldr	r3, [r3, #0]
 800260c:	4618      	mov	r0, r3
 800260e:	f7fd ffa3 	bl	8000558 <__aeabi_f2d>
 8002612:	4680      	mov	r8, r0
 8002614:	4689      	mov	r9, r1
 8002616:	4b51      	ldr	r3, [pc, #324]	@ (800275c <processThingSpeakStateMachine+0x1d4>)
 8002618:	681b      	ldr	r3, [r3, #0]
 800261a:	4618      	mov	r0, r3
 800261c:	f7fd ff9c 	bl	8000558 <__aeabi_f2d>
 8002620:	4602      	mov	r2, r0
 8002622:	460b      	mov	r3, r1
 8002624:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 8002628:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800262c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002630:	e9cd 4500 	strd	r4, r5, [sp]
 8002634:	4632      	mov	r2, r6
 8002636:	494a      	ldr	r1, [pc, #296]	@ (8002760 <processThingSpeakStateMachine+0x1d8>)
 8002638:	f004 ff14 	bl	8007464 <siprintf>

                char http_cmd[50];
                sprintf(http_cmd, "AT+CIPSEND=%d\r\n", strlen(http_request));	// Envio longitud del mensaje
 800263c:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 8002640:	4618      	mov	r0, r3
 8002642:	f7fd fe1d 	bl	8000280 <strlen>
 8002646:	4602      	mov	r2, r0
 8002648:	463b      	mov	r3, r7
 800264a:	4946      	ldr	r1, [pc, #280]	@ (8002764 <processThingSpeakStateMachine+0x1dc>)
 800264c:	4618      	mov	r0, r3
 800264e:	f004 ff09 	bl	8007464 <siprintf>
                esp8266_send_command(http_cmd);
 8002652:	463b      	mov	r3, r7
 8002654:	4618      	mov	r0, r3
 8002656:	f7fe fd47 	bl	80010e8 <esp8266_send_command>
				esp8266_receive_response_IT();
 800265a:	f7fe fd21 	bl	80010a0 <esp8266_receive_response_IT>
                state = 3;
 800265e:	4b39      	ldr	r3, [pc, #228]	@ (8002744 <processThingSpeakStateMachine+0x1bc>)
 8002660:	2203      	movs	r2, #3
 8002662:	701a      	strb	r2, [r3, #0]
                memset(response, 0, sizeof(response));  // Limpiar el buffer
 8002664:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8002668:	2100      	movs	r1, #0
 800266a:	4838      	ldr	r0, [pc, #224]	@ (800274c <processThingSpeakStateMachine+0x1c4>)
 800266c:	f004 fff4 	bl	8007658 <memset>
            }
            break;
 8002670:	e05d      	b.n	800272e <processThingSpeakStateMachine+0x1a6>
        }
        case 3: {				// Envio mensaje con los campos
            if (esp8266_is_response_ready()) {
 8002672:	f7fe fd4f 	bl	8001114 <esp8266_is_response_ready>
 8002676:	4603      	mov	r3, r0
 8002678:	2b00      	cmp	r3, #0
 800267a:	d05a      	beq.n	8002732 <processThingSpeakStateMachine+0x1aa>
            	esp8266_clear_response_flag();	//rxComplete = 0;
 800267c:	f7fe fd60 	bl	8001140 <esp8266_clear_response_flag>
                char http_request[250];
                sprintf(http_request, "GET /update?api_key=%s&field1=%.2f&field2=%.2f&field3=%.2f HTTP/1.1\r\nHost: api.thingspeak.com\r\nConnection: close\r\n\r\n", wifiApiKey, wifiTemperature, wifiHumidity, wifiLuminosity);
 8002680:	4b33      	ldr	r3, [pc, #204]	@ (8002750 <processThingSpeakStateMachine+0x1c8>)
 8002682:	681e      	ldr	r6, [r3, #0]
 8002684:	4b33      	ldr	r3, [pc, #204]	@ (8002754 <processThingSpeakStateMachine+0x1cc>)
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	4618      	mov	r0, r3
 800268a:	f7fd ff65 	bl	8000558 <__aeabi_f2d>
 800268e:	4604      	mov	r4, r0
 8002690:	460d      	mov	r5, r1
 8002692:	4b31      	ldr	r3, [pc, #196]	@ (8002758 <processThingSpeakStateMachine+0x1d0>)
 8002694:	681b      	ldr	r3, [r3, #0]
 8002696:	4618      	mov	r0, r3
 8002698:	f7fd ff5e 	bl	8000558 <__aeabi_f2d>
 800269c:	4680      	mov	r8, r0
 800269e:	4689      	mov	r9, r1
 80026a0:	4b2e      	ldr	r3, [pc, #184]	@ (800275c <processThingSpeakStateMachine+0x1d4>)
 80026a2:	681b      	ldr	r3, [r3, #0]
 80026a4:	4618      	mov	r0, r3
 80026a6:	f7fd ff57 	bl	8000558 <__aeabi_f2d>
 80026aa:	4602      	mov	r2, r0
 80026ac:	460b      	mov	r3, r1
 80026ae:	f107 0034 	add.w	r0, r7, #52	@ 0x34
 80026b2:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80026b6:	e9cd 8902 	strd	r8, r9, [sp, #8]
 80026ba:	e9cd 4500 	strd	r4, r5, [sp]
 80026be:	4632      	mov	r2, r6
 80026c0:	4927      	ldr	r1, [pc, #156]	@ (8002760 <processThingSpeakStateMachine+0x1d8>)
 80026c2:	f004 fecf 	bl	8007464 <siprintf>
                esp8266_send_command(http_request);
 80026c6:	f107 0334 	add.w	r3, r7, #52	@ 0x34
 80026ca:	4618      	mov	r0, r3
 80026cc:	f7fe fd0c 	bl	80010e8 <esp8266_send_command>
				esp8266_receive_response_IT();
 80026d0:	f7fe fce6 	bl	80010a0 <esp8266_receive_response_IT>
                state = 4;
 80026d4:	4b1b      	ldr	r3, [pc, #108]	@ (8002744 <processThingSpeakStateMachine+0x1bc>)
 80026d6:	2204      	movs	r2, #4
 80026d8:	701a      	strb	r2, [r3, #0]
            }
            break;
 80026da:	e02a      	b.n	8002732 <processThingSpeakStateMachine+0x1aa>
        }
        case 4: {
			if (esp8266_is_response_ready()) {
 80026dc:	f7fe fd1a 	bl	8001114 <esp8266_is_response_ready>
 80026e0:	4603      	mov	r3, r0
 80026e2:	2b00      	cmp	r3, #0
 80026e4:	d027      	beq.n	8002736 <processThingSpeakStateMachine+0x1ae>
				esp8266_clear_response_flag();	//rxComplete = 0;
 80026e6:	f7fe fd2b 	bl	8001140 <esp8266_clear_response_flag>
				state = 5; // Comprobación de conexión WiFi
 80026ea:	4b16      	ldr	r3, [pc, #88]	@ (8002744 <processThingSpeakStateMachine+0x1bc>)
 80026ec:	2205      	movs	r2, #5
 80026ee:	701a      	strb	r2, [r3, #0]
			}
			break;
 80026f0:	e021      	b.n	8002736 <processThingSpeakStateMachine+0x1ae>
		}
		case 5: {
			if (isWiFiConnected()) {
 80026f2:	f7ff ff03 	bl	80024fc <isWiFiConnected>
 80026f6:	4603      	mov	r3, r0
 80026f8:	2b00      	cmp	r3, #0
 80026fa:	d006      	beq.n	800270a <processThingSpeakStateMachine+0x182>
				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_RESET);	// DEPURACIÓN
 80026fc:	2200      	movs	r2, #0
 80026fe:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8002702:	4819      	ldr	r0, [pc, #100]	@ (8002768 <processThingSpeakStateMachine+0x1e0>)
 8002704:	f000 fc1e 	bl	8002f44 <HAL_GPIO_WritePin>
 8002708:	e00d      	b.n	8002726 <processThingSpeakStateMachine+0x19e>
				//esp8266_deep_sleep(20000); // Poner el ESP8266 en deep sleep durante 20 segundos (ajustable)
				// Reiniar el módulo ESP8266 después de deep sleep para asegurar que esté disponible
				//esp8266_reset_and_reconnect(WIFI_SSID, WIFI_PASS); // Agregar esta línea para reiniciar y reconectar
			} else {

				HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12|GPIO_PIN_14, GPIO_PIN_SET);	// DEPURACIÓN
 800270a:	2201      	movs	r2, #1
 800270c:	f44f 41a0 	mov.w	r1, #20480	@ 0x5000
 8002710:	4815      	ldr	r0, [pc, #84]	@ (8002768 <processThingSpeakStateMachine+0x1e0>)
 8002712:	f000 fc17 	bl	8002f44 <HAL_GPIO_WritePin>

				connectToWiFi(WIFI_SSID, WIFI_PASS); // Reintentar conexión
 8002716:	4b15      	ldr	r3, [pc, #84]	@ (800276c <processThingSpeakStateMachine+0x1e4>)
 8002718:	681b      	ldr	r3, [r3, #0]
 800271a:	4a15      	ldr	r2, [pc, #84]	@ (8002770 <processThingSpeakStateMachine+0x1e8>)
 800271c:	6812      	ldr	r2, [r2, #0]
 800271e:	4611      	mov	r1, r2
 8002720:	4618      	mov	r0, r3
 8002722:	f7ff feb5 	bl	8002490 <connectToWiFi>
			}
			state = 0; // Finalizar la máquina de estados
 8002726:	4b07      	ldr	r3, [pc, #28]	@ (8002744 <processThingSpeakStateMachine+0x1bc>)
 8002728:	2200      	movs	r2, #0
 800272a:	701a      	strb	r2, [r3, #0]

			break;
 800272c:	e004      	b.n	8002738 <processThingSpeakStateMachine+0x1b0>
            break;
 800272e:	bf00      	nop
 8002730:	e002      	b.n	8002738 <processThingSpeakStateMachine+0x1b0>
            break;
 8002732:	bf00      	nop
 8002734:	e000      	b.n	8002738 <processThingSpeakStateMachine+0x1b0>
			break;
 8002736:	bf00      	nop
		}
    }
}
 8002738:	bf00      	nop
 800273a:	f507 779a 	add.w	r7, r7, #308	@ 0x134
 800273e:	46bd      	mov	sp, r7
 8002740:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002744:	200007b0 	.word	0x200007b0
 8002748:	0800ae60 	.word	0x0800ae60
 800274c:	200005b0 	.word	0x200005b0
 8002750:	200007b4 	.word	0x200007b4
 8002754:	200007b8 	.word	0x200007b8
 8002758:	200007bc 	.word	0x200007bc
 800275c:	200007c0 	.word	0x200007c0
 8002760:	0800ae8c 	.word	0x0800ae8c
 8002764:	0800af04 	.word	0x0800af04
 8002768:	40020c00 	.word	0x40020c00
 800276c:	20000000 	.word	0x20000000
 8002770:	20000004 	.word	0x20000004

08002774 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002774:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80027ac <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002778:	f7ff fe10 	bl	800239c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800277c:	480c      	ldr	r0, [pc, #48]	@ (80027b0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800277e:	490d      	ldr	r1, [pc, #52]	@ (80027b4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8002780:	4a0d      	ldr	r2, [pc, #52]	@ (80027b8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8002782:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002784:	e002      	b.n	800278c <LoopCopyDataInit>

08002786 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002786:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002788:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800278a:	3304      	adds	r3, #4

0800278c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800278c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800278e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002790:	d3f9      	bcc.n	8002786 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002792:	4a0a      	ldr	r2, [pc, #40]	@ (80027bc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8002794:	4c0a      	ldr	r4, [pc, #40]	@ (80027c0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8002796:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002798:	e001      	b.n	800279e <LoopFillZerobss>

0800279a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800279a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800279c:	3204      	adds	r2, #4

0800279e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800279e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80027a0:	d3fb      	bcc.n	800279a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80027a2:	f004 ffc7 	bl	8007734 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80027a6:	f7fe ff09 	bl	80015bc <main>
  bx  lr    
 80027aa:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80027ac:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80027b0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80027b4:	200001f0 	.word	0x200001f0
  ldr r2, =_sidata
 80027b8:	0800b364 	.word	0x0800b364
  ldr r2, =_sbss
 80027bc:	200001f0 	.word	0x200001f0
  ldr r4, =_ebss
 80027c0:	20000928 	.word	0x20000928

080027c4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80027c4:	e7fe      	b.n	80027c4 <ADC_IRQHandler>
	...

080027c8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80027c8:	b580      	push	{r7, lr}
 80027ca:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80027cc:	4b0e      	ldr	r3, [pc, #56]	@ (8002808 <HAL_Init+0x40>)
 80027ce:	681b      	ldr	r3, [r3, #0]
 80027d0:	4a0d      	ldr	r2, [pc, #52]	@ (8002808 <HAL_Init+0x40>)
 80027d2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80027d6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80027d8:	4b0b      	ldr	r3, [pc, #44]	@ (8002808 <HAL_Init+0x40>)
 80027da:	681b      	ldr	r3, [r3, #0]
 80027dc:	4a0a      	ldr	r2, [pc, #40]	@ (8002808 <HAL_Init+0x40>)
 80027de:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 80027e2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80027e4:	4b08      	ldr	r3, [pc, #32]	@ (8002808 <HAL_Init+0x40>)
 80027e6:	681b      	ldr	r3, [r3, #0]
 80027e8:	4a07      	ldr	r2, [pc, #28]	@ (8002808 <HAL_Init+0x40>)
 80027ea:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 80027ee:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80027f0:	2003      	movs	r0, #3
 80027f2:	f000 f94f 	bl	8002a94 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80027f6:	2000      	movs	r0, #0
 80027f8:	f000 f808 	bl	800280c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80027fc:	f7ff fb52 	bl	8001ea4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002800:	2300      	movs	r3, #0
}
 8002802:	4618      	mov	r0, r3
 8002804:	bd80      	pop	{r7, pc}
 8002806:	bf00      	nop
 8002808:	40023c00 	.word	0x40023c00

0800280c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800280c:	b580      	push	{r7, lr}
 800280e:	b082      	sub	sp, #8
 8002810:	af00      	add	r7, sp, #0
 8002812:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002814:	4b12      	ldr	r3, [pc, #72]	@ (8002860 <HAL_InitTick+0x54>)
 8002816:	681a      	ldr	r2, [r3, #0]
 8002818:	4b12      	ldr	r3, [pc, #72]	@ (8002864 <HAL_InitTick+0x58>)
 800281a:	781b      	ldrb	r3, [r3, #0]
 800281c:	4619      	mov	r1, r3
 800281e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002822:	fbb3 f3f1 	udiv	r3, r3, r1
 8002826:	fbb2 f3f3 	udiv	r3, r2, r3
 800282a:	4618      	mov	r0, r3
 800282c:	f000 f967 	bl	8002afe <HAL_SYSTICK_Config>
 8002830:	4603      	mov	r3, r0
 8002832:	2b00      	cmp	r3, #0
 8002834:	d001      	beq.n	800283a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002836:	2301      	movs	r3, #1
 8002838:	e00e      	b.n	8002858 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800283a:	687b      	ldr	r3, [r7, #4]
 800283c:	2b0f      	cmp	r3, #15
 800283e:	d80a      	bhi.n	8002856 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002840:	2200      	movs	r2, #0
 8002842:	6879      	ldr	r1, [r7, #4]
 8002844:	f04f 30ff 	mov.w	r0, #4294967295
 8002848:	f000 f92f 	bl	8002aaa <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800284c:	4a06      	ldr	r2, [pc, #24]	@ (8002868 <HAL_InitTick+0x5c>)
 800284e:	687b      	ldr	r3, [r7, #4]
 8002850:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002852:	2300      	movs	r3, #0
 8002854:	e000      	b.n	8002858 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002856:	2301      	movs	r3, #1
}
 8002858:	4618      	mov	r0, r3
 800285a:	3708      	adds	r7, #8
 800285c:	46bd      	mov	sp, r7
 800285e:	bd80      	pop	{r7, pc}
 8002860:	20000008 	.word	0x20000008
 8002864:	20000010 	.word	0x20000010
 8002868:	2000000c 	.word	0x2000000c

0800286c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800286c:	b480      	push	{r7}
 800286e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002870:	4b06      	ldr	r3, [pc, #24]	@ (800288c <HAL_IncTick+0x20>)
 8002872:	781b      	ldrb	r3, [r3, #0]
 8002874:	461a      	mov	r2, r3
 8002876:	4b06      	ldr	r3, [pc, #24]	@ (8002890 <HAL_IncTick+0x24>)
 8002878:	681b      	ldr	r3, [r3, #0]
 800287a:	4413      	add	r3, r2
 800287c:	4a04      	ldr	r2, [pc, #16]	@ (8002890 <HAL_IncTick+0x24>)
 800287e:	6013      	str	r3, [r2, #0]
}
 8002880:	bf00      	nop
 8002882:	46bd      	mov	sp, r7
 8002884:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002888:	4770      	bx	lr
 800288a:	bf00      	nop
 800288c:	20000010 	.word	0x20000010
 8002890:	200007c4 	.word	0x200007c4

08002894 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002894:	b480      	push	{r7}
 8002896:	af00      	add	r7, sp, #0
  return uwTick;
 8002898:	4b03      	ldr	r3, [pc, #12]	@ (80028a8 <HAL_GetTick+0x14>)
 800289a:	681b      	ldr	r3, [r3, #0]
}
 800289c:	4618      	mov	r0, r3
 800289e:	46bd      	mov	sp, r7
 80028a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028a4:	4770      	bx	lr
 80028a6:	bf00      	nop
 80028a8:	200007c4 	.word	0x200007c4

080028ac <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80028ac:	b580      	push	{r7, lr}
 80028ae:	b084      	sub	sp, #16
 80028b0:	af00      	add	r7, sp, #0
 80028b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80028b4:	f7ff ffee 	bl	8002894 <HAL_GetTick>
 80028b8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80028ba:	687b      	ldr	r3, [r7, #4]
 80028bc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80028be:	68fb      	ldr	r3, [r7, #12]
 80028c0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80028c4:	d005      	beq.n	80028d2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80028c6:	4b0a      	ldr	r3, [pc, #40]	@ (80028f0 <HAL_Delay+0x44>)
 80028c8:	781b      	ldrb	r3, [r3, #0]
 80028ca:	461a      	mov	r2, r3
 80028cc:	68fb      	ldr	r3, [r7, #12]
 80028ce:	4413      	add	r3, r2
 80028d0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80028d2:	bf00      	nop
 80028d4:	f7ff ffde 	bl	8002894 <HAL_GetTick>
 80028d8:	4602      	mov	r2, r0
 80028da:	68bb      	ldr	r3, [r7, #8]
 80028dc:	1ad3      	subs	r3, r2, r3
 80028de:	68fa      	ldr	r2, [r7, #12]
 80028e0:	429a      	cmp	r2, r3
 80028e2:	d8f7      	bhi.n	80028d4 <HAL_Delay+0x28>
  {
  }
}
 80028e4:	bf00      	nop
 80028e6:	bf00      	nop
 80028e8:	3710      	adds	r7, #16
 80028ea:	46bd      	mov	sp, r7
 80028ec:	bd80      	pop	{r7, pc}
 80028ee:	bf00      	nop
 80028f0:	20000010 	.word	0x20000010

080028f4 <__NVIC_SetPriorityGrouping>:
{
 80028f4:	b480      	push	{r7}
 80028f6:	b085      	sub	sp, #20
 80028f8:	af00      	add	r7, sp, #0
 80028fa:	6078      	str	r0, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 80028fc:	687b      	ldr	r3, [r7, #4]
 80028fe:	f003 0307 	and.w	r3, r3, #7
 8002902:	60fb      	str	r3, [r7, #12]
  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002904:	4b0c      	ldr	r3, [pc, #48]	@ (8002938 <__NVIC_SetPriorityGrouping+0x44>)
 8002906:	68db      	ldr	r3, [r3, #12]
 8002908:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 800290a:	68ba      	ldr	r2, [r7, #8]
 800290c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002910:	4013      	ands	r3, r2
 8002912:	60bb      	str	r3, [r7, #8]
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002914:	68fb      	ldr	r3, [r7, #12]
 8002916:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002918:	68bb      	ldr	r3, [r7, #8]
 800291a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 800291c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002920:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002924:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002926:	4a04      	ldr	r2, [pc, #16]	@ (8002938 <__NVIC_SetPriorityGrouping+0x44>)
 8002928:	68bb      	ldr	r3, [r7, #8]
 800292a:	60d3      	str	r3, [r2, #12]
}
 800292c:	bf00      	nop
 800292e:	3714      	adds	r7, #20
 8002930:	46bd      	mov	sp, r7
 8002932:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002936:	4770      	bx	lr
 8002938:	e000ed00 	.word	0xe000ed00

0800293c <__NVIC_GetPriorityGrouping>:
{
 800293c:	b480      	push	{r7}
 800293e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002940:	4b04      	ldr	r3, [pc, #16]	@ (8002954 <__NVIC_GetPriorityGrouping+0x18>)
 8002942:	68db      	ldr	r3, [r3, #12]
 8002944:	0a1b      	lsrs	r3, r3, #8
 8002946:	f003 0307 	and.w	r3, r3, #7
}
 800294a:	4618      	mov	r0, r3
 800294c:	46bd      	mov	sp, r7
 800294e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002952:	4770      	bx	lr
 8002954:	e000ed00 	.word	0xe000ed00

08002958 <__NVIC_EnableIRQ>:
{
 8002958:	b480      	push	{r7}
 800295a:	b083      	sub	sp, #12
 800295c:	af00      	add	r7, sp, #0
 800295e:	4603      	mov	r3, r0
 8002960:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002962:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002966:	2b00      	cmp	r3, #0
 8002968:	db0b      	blt.n	8002982 <__NVIC_EnableIRQ+0x2a>
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800296a:	79fb      	ldrb	r3, [r7, #7]
 800296c:	f003 021f 	and.w	r2, r3, #31
 8002970:	4907      	ldr	r1, [pc, #28]	@ (8002990 <__NVIC_EnableIRQ+0x38>)
 8002972:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002976:	095b      	lsrs	r3, r3, #5
 8002978:	2001      	movs	r0, #1
 800297a:	fa00 f202 	lsl.w	r2, r0, r2
 800297e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
}
 8002982:	bf00      	nop
 8002984:	370c      	adds	r7, #12
 8002986:	46bd      	mov	sp, r7
 8002988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800298c:	4770      	bx	lr
 800298e:	bf00      	nop
 8002990:	e000e100 	.word	0xe000e100

08002994 <__NVIC_SetPriority>:
{
 8002994:	b480      	push	{r7}
 8002996:	b083      	sub	sp, #12
 8002998:	af00      	add	r7, sp, #0
 800299a:	4603      	mov	r3, r0
 800299c:	6039      	str	r1, [r7, #0]
 800299e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80029a0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029a4:	2b00      	cmp	r3, #0
 80029a6:	db0a      	blt.n	80029be <__NVIC_SetPriority+0x2a>
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029a8:	683b      	ldr	r3, [r7, #0]
 80029aa:	b2da      	uxtb	r2, r3
 80029ac:	490c      	ldr	r1, [pc, #48]	@ (80029e0 <__NVIC_SetPriority+0x4c>)
 80029ae:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80029b2:	0112      	lsls	r2, r2, #4
 80029b4:	b2d2      	uxtb	r2, r2
 80029b6:	440b      	add	r3, r1
 80029b8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
}
 80029bc:	e00a      	b.n	80029d4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 80029be:	683b      	ldr	r3, [r7, #0]
 80029c0:	b2da      	uxtb	r2, r3
 80029c2:	4908      	ldr	r1, [pc, #32]	@ (80029e4 <__NVIC_SetPriority+0x50>)
 80029c4:	79fb      	ldrb	r3, [r7, #7]
 80029c6:	f003 030f 	and.w	r3, r3, #15
 80029ca:	3b04      	subs	r3, #4
 80029cc:	0112      	lsls	r2, r2, #4
 80029ce:	b2d2      	uxtb	r2, r2
 80029d0:	440b      	add	r3, r1
 80029d2:	761a      	strb	r2, [r3, #24]
}
 80029d4:	bf00      	nop
 80029d6:	370c      	adds	r7, #12
 80029d8:	46bd      	mov	sp, r7
 80029da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029de:	4770      	bx	lr
 80029e0:	e000e100 	.word	0xe000e100
 80029e4:	e000ed00 	.word	0xe000ed00

080029e8 <NVIC_EncodePriority>:
{
 80029e8:	b480      	push	{r7}
 80029ea:	b089      	sub	sp, #36	@ 0x24
 80029ec:	af00      	add	r7, sp, #0
 80029ee:	60f8      	str	r0, [r7, #12]
 80029f0:	60b9      	str	r1, [r7, #8]
 80029f2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80029f4:	68fb      	ldr	r3, [r7, #12]
 80029f6:	f003 0307 	and.w	r3, r3, #7
 80029fa:	61fb      	str	r3, [r7, #28]
  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80029fc:	69fb      	ldr	r3, [r7, #28]
 80029fe:	f1c3 0307 	rsb	r3, r3, #7
 8002a02:	2b04      	cmp	r3, #4
 8002a04:	bf28      	it	cs
 8002a06:	2304      	movcs	r3, #4
 8002a08:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002a0a:	69fb      	ldr	r3, [r7, #28]
 8002a0c:	3304      	adds	r3, #4
 8002a0e:	2b06      	cmp	r3, #6
 8002a10:	d902      	bls.n	8002a18 <NVIC_EncodePriority+0x30>
 8002a12:	69fb      	ldr	r3, [r7, #28]
 8002a14:	3b03      	subs	r3, #3
 8002a16:	e000      	b.n	8002a1a <NVIC_EncodePriority+0x32>
 8002a18:	2300      	movs	r3, #0
 8002a1a:	617b      	str	r3, [r7, #20]
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a1c:	f04f 32ff 	mov.w	r2, #4294967295
 8002a20:	69bb      	ldr	r3, [r7, #24]
 8002a22:	fa02 f303 	lsl.w	r3, r2, r3
 8002a26:	43da      	mvns	r2, r3
 8002a28:	68bb      	ldr	r3, [r7, #8]
 8002a2a:	401a      	ands	r2, r3
 8002a2c:	697b      	ldr	r3, [r7, #20]
 8002a2e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002a30:	f04f 31ff 	mov.w	r1, #4294967295
 8002a34:	697b      	ldr	r3, [r7, #20]
 8002a36:	fa01 f303 	lsl.w	r3, r1, r3
 8002a3a:	43d9      	mvns	r1, r3
 8002a3c:	687b      	ldr	r3, [r7, #4]
 8002a3e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002a40:	4313      	orrs	r3, r2
}
 8002a42:	4618      	mov	r0, r3
 8002a44:	3724      	adds	r7, #36	@ 0x24
 8002a46:	46bd      	mov	sp, r7
 8002a48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a4c:	4770      	bx	lr
	...

08002a50 <SysTick_Config>:
{
 8002a50:	b580      	push	{r7, lr}
 8002a52:	b082      	sub	sp, #8
 8002a54:	af00      	add	r7, sp, #0
 8002a56:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002a58:	687b      	ldr	r3, [r7, #4]
 8002a5a:	3b01      	subs	r3, #1
 8002a5c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002a60:	d301      	bcc.n	8002a66 <SysTick_Config+0x16>
    return (1UL);                                                   /* Reload value impossible */
 8002a62:	2301      	movs	r3, #1
 8002a64:	e00f      	b.n	8002a86 <SysTick_Config+0x36>
  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002a66:	4a0a      	ldr	r2, [pc, #40]	@ (8002a90 <SysTick_Config+0x40>)
 8002a68:	687b      	ldr	r3, [r7, #4]
 8002a6a:	3b01      	subs	r3, #1
 8002a6c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002a6e:	210f      	movs	r1, #15
 8002a70:	f04f 30ff 	mov.w	r0, #4294967295
 8002a74:	f7ff ff8e 	bl	8002994 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002a78:	4b05      	ldr	r3, [pc, #20]	@ (8002a90 <SysTick_Config+0x40>)
 8002a7a:	2200      	movs	r2, #0
 8002a7c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002a7e:	4b04      	ldr	r3, [pc, #16]	@ (8002a90 <SysTick_Config+0x40>)
 8002a80:	2207      	movs	r2, #7
 8002a82:	601a      	str	r2, [r3, #0]
  return (0UL);                                                     /* Function successful */
 8002a84:	2300      	movs	r3, #0
}
 8002a86:	4618      	mov	r0, r3
 8002a88:	3708      	adds	r7, #8
 8002a8a:	46bd      	mov	sp, r7
 8002a8c:	bd80      	pop	{r7, pc}
 8002a8e:	bf00      	nop
 8002a90:	e000e010 	.word	0xe000e010

08002a94 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a94:	b580      	push	{r7, lr}
 8002a96:	b082      	sub	sp, #8
 8002a98:	af00      	add	r7, sp, #0
 8002a9a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002a9c:	6878      	ldr	r0, [r7, #4]
 8002a9e:	f7ff ff29 	bl	80028f4 <__NVIC_SetPriorityGrouping>
}
 8002aa2:	bf00      	nop
 8002aa4:	3708      	adds	r7, #8
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	bd80      	pop	{r7, pc}

08002aaa <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002aaa:	b580      	push	{r7, lr}
 8002aac:	b086      	sub	sp, #24
 8002aae:	af00      	add	r7, sp, #0
 8002ab0:	4603      	mov	r3, r0
 8002ab2:	60b9      	str	r1, [r7, #8]
 8002ab4:	607a      	str	r2, [r7, #4]
 8002ab6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002ab8:	2300      	movs	r3, #0
 8002aba:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002abc:	f7ff ff3e 	bl	800293c <__NVIC_GetPriorityGrouping>
 8002ac0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002ac2:	687a      	ldr	r2, [r7, #4]
 8002ac4:	68b9      	ldr	r1, [r7, #8]
 8002ac6:	6978      	ldr	r0, [r7, #20]
 8002ac8:	f7ff ff8e 	bl	80029e8 <NVIC_EncodePriority>
 8002acc:	4602      	mov	r2, r0
 8002ace:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002ad2:	4611      	mov	r1, r2
 8002ad4:	4618      	mov	r0, r3
 8002ad6:	f7ff ff5d 	bl	8002994 <__NVIC_SetPriority>
}
 8002ada:	bf00      	nop
 8002adc:	3718      	adds	r7, #24
 8002ade:	46bd      	mov	sp, r7
 8002ae0:	bd80      	pop	{r7, pc}

08002ae2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ae2:	b580      	push	{r7, lr}
 8002ae4:	b082      	sub	sp, #8
 8002ae6:	af00      	add	r7, sp, #0
 8002ae8:	4603      	mov	r3, r0
 8002aea:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002aec:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002af0:	4618      	mov	r0, r3
 8002af2:	f7ff ff31 	bl	8002958 <__NVIC_EnableIRQ>
}
 8002af6:	bf00      	nop
 8002af8:	3708      	adds	r7, #8
 8002afa:	46bd      	mov	sp, r7
 8002afc:	bd80      	pop	{r7, pc}

08002afe <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002afe:	b580      	push	{r7, lr}
 8002b00:	b082      	sub	sp, #8
 8002b02:	af00      	add	r7, sp, #0
 8002b04:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002b06:	6878      	ldr	r0, [r7, #4]
 8002b08:	f7ff ffa2 	bl	8002a50 <SysTick_Config>
 8002b0c:	4603      	mov	r3, r0
}
 8002b0e:	4618      	mov	r0, r3
 8002b10:	3708      	adds	r7, #8
 8002b12:	46bd      	mov	sp, r7
 8002b14:	bd80      	pop	{r7, pc}

08002b16 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002b16:	b580      	push	{r7, lr}
 8002b18:	b084      	sub	sp, #16
 8002b1a:	af00      	add	r7, sp, #0
 8002b1c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002b1e:	687b      	ldr	r3, [r7, #4]
 8002b20:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002b22:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002b24:	f7ff feb6 	bl	8002894 <HAL_GetTick>
 8002b28:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002b2a:	687b      	ldr	r3, [r7, #4]
 8002b2c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002b30:	b2db      	uxtb	r3, r3
 8002b32:	2b02      	cmp	r3, #2
 8002b34:	d008      	beq.n	8002b48 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002b36:	687b      	ldr	r3, [r7, #4]
 8002b38:	2280      	movs	r2, #128	@ 0x80
 8002b3a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002b3c:	687b      	ldr	r3, [r7, #4]
 8002b3e:	2200      	movs	r2, #0
 8002b40:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002b44:	2301      	movs	r3, #1
 8002b46:	e052      	b.n	8002bee <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002b48:	687b      	ldr	r3, [r7, #4]
 8002b4a:	681b      	ldr	r3, [r3, #0]
 8002b4c:	681a      	ldr	r2, [r3, #0]
 8002b4e:	687b      	ldr	r3, [r7, #4]
 8002b50:	681b      	ldr	r3, [r3, #0]
 8002b52:	f022 0216 	bic.w	r2, r2, #22
 8002b56:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	695a      	ldr	r2, [r3, #20]
 8002b5e:	687b      	ldr	r3, [r7, #4]
 8002b60:	681b      	ldr	r3, [r3, #0]
 8002b62:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002b66:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002b68:	687b      	ldr	r3, [r7, #4]
 8002b6a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002b6c:	2b00      	cmp	r3, #0
 8002b6e:	d103      	bne.n	8002b78 <HAL_DMA_Abort+0x62>
 8002b70:	687b      	ldr	r3, [r7, #4]
 8002b72:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002b74:	2b00      	cmp	r3, #0
 8002b76:	d007      	beq.n	8002b88 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	681a      	ldr	r2, [r3, #0]
 8002b7e:	687b      	ldr	r3, [r7, #4]
 8002b80:	681b      	ldr	r3, [r3, #0]
 8002b82:	f022 0208 	bic.w	r2, r2, #8
 8002b86:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	681b      	ldr	r3, [r3, #0]
 8002b8c:	681a      	ldr	r2, [r3, #0]
 8002b8e:	687b      	ldr	r3, [r7, #4]
 8002b90:	681b      	ldr	r3, [r3, #0]
 8002b92:	f022 0201 	bic.w	r2, r2, #1
 8002b96:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002b98:	e013      	b.n	8002bc2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002b9a:	f7ff fe7b 	bl	8002894 <HAL_GetTick>
 8002b9e:	4602      	mov	r2, r0
 8002ba0:	68bb      	ldr	r3, [r7, #8]
 8002ba2:	1ad3      	subs	r3, r2, r3
 8002ba4:	2b05      	cmp	r3, #5
 8002ba6:	d90c      	bls.n	8002bc2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002ba8:	687b      	ldr	r3, [r7, #4]
 8002baa:	2220      	movs	r2, #32
 8002bac:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002bae:	687b      	ldr	r3, [r7, #4]
 8002bb0:	2203      	movs	r2, #3
 8002bb2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002bb6:	687b      	ldr	r3, [r7, #4]
 8002bb8:	2200      	movs	r2, #0
 8002bba:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002bbe:	2303      	movs	r3, #3
 8002bc0:	e015      	b.n	8002bee <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002bc2:	687b      	ldr	r3, [r7, #4]
 8002bc4:	681b      	ldr	r3, [r3, #0]
 8002bc6:	681b      	ldr	r3, [r3, #0]
 8002bc8:	f003 0301 	and.w	r3, r3, #1
 8002bcc:	2b00      	cmp	r3, #0
 8002bce:	d1e4      	bne.n	8002b9a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002bd0:	687b      	ldr	r3, [r7, #4]
 8002bd2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002bd4:	223f      	movs	r2, #63	@ 0x3f
 8002bd6:	409a      	lsls	r2, r3
 8002bd8:	68fb      	ldr	r3, [r7, #12]
 8002bda:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002bdc:	687b      	ldr	r3, [r7, #4]
 8002bde:	2201      	movs	r2, #1
 8002be0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002be4:	687b      	ldr	r3, [r7, #4]
 8002be6:	2200      	movs	r2, #0
 8002be8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002bec:	2300      	movs	r3, #0
}
 8002bee:	4618      	mov	r0, r3
 8002bf0:	3710      	adds	r7, #16
 8002bf2:	46bd      	mov	sp, r7
 8002bf4:	bd80      	pop	{r7, pc}

08002bf6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002bf6:	b480      	push	{r7}
 8002bf8:	b083      	sub	sp, #12
 8002bfa:	af00      	add	r7, sp, #0
 8002bfc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002bfe:	687b      	ldr	r3, [r7, #4]
 8002c00:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c04:	b2db      	uxtb	r3, r3
 8002c06:	2b02      	cmp	r3, #2
 8002c08:	d004      	beq.n	8002c14 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c0a:	687b      	ldr	r3, [r7, #4]
 8002c0c:	2280      	movs	r2, #128	@ 0x80
 8002c0e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002c10:	2301      	movs	r3, #1
 8002c12:	e00c      	b.n	8002c2e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002c14:	687b      	ldr	r3, [r7, #4]
 8002c16:	2205      	movs	r2, #5
 8002c18:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002c1c:	687b      	ldr	r3, [r7, #4]
 8002c1e:	681b      	ldr	r3, [r3, #0]
 8002c20:	681a      	ldr	r2, [r3, #0]
 8002c22:	687b      	ldr	r3, [r7, #4]
 8002c24:	681b      	ldr	r3, [r3, #0]
 8002c26:	f022 0201 	bic.w	r2, r2, #1
 8002c2a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002c2c:	2300      	movs	r3, #0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	370c      	adds	r7, #12
 8002c32:	46bd      	mov	sp, r7
 8002c34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c38:	4770      	bx	lr
	...

08002c3c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002c3c:	b480      	push	{r7}
 8002c3e:	b089      	sub	sp, #36	@ 0x24
 8002c40:	af00      	add	r7, sp, #0
 8002c42:	6078      	str	r0, [r7, #4]
 8002c44:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002c46:	2300      	movs	r3, #0
 8002c48:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002c4a:	2300      	movs	r3, #0
 8002c4c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002c4e:	2300      	movs	r3, #0
 8002c50:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002c52:	2300      	movs	r3, #0
 8002c54:	61fb      	str	r3, [r7, #28]
 8002c56:	e159      	b.n	8002f0c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002c58:	2201      	movs	r2, #1
 8002c5a:	69fb      	ldr	r3, [r7, #28]
 8002c5c:	fa02 f303 	lsl.w	r3, r2, r3
 8002c60:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002c62:	683b      	ldr	r3, [r7, #0]
 8002c64:	681b      	ldr	r3, [r3, #0]
 8002c66:	697a      	ldr	r2, [r7, #20]
 8002c68:	4013      	ands	r3, r2
 8002c6a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002c6c:	693a      	ldr	r2, [r7, #16]
 8002c6e:	697b      	ldr	r3, [r7, #20]
 8002c70:	429a      	cmp	r2, r3
 8002c72:	f040 8148 	bne.w	8002f06 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c76:	683b      	ldr	r3, [r7, #0]
 8002c78:	685b      	ldr	r3, [r3, #4]
 8002c7a:	f003 0303 	and.w	r3, r3, #3
 8002c7e:	2b01      	cmp	r3, #1
 8002c80:	d005      	beq.n	8002c8e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002c82:	683b      	ldr	r3, [r7, #0]
 8002c84:	685b      	ldr	r3, [r3, #4]
 8002c86:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002c8a:	2b02      	cmp	r3, #2
 8002c8c:	d130      	bne.n	8002cf0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002c8e:	687b      	ldr	r3, [r7, #4]
 8002c90:	689b      	ldr	r3, [r3, #8]
 8002c92:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002c94:	69fb      	ldr	r3, [r7, #28]
 8002c96:	005b      	lsls	r3, r3, #1
 8002c98:	2203      	movs	r2, #3
 8002c9a:	fa02 f303 	lsl.w	r3, r2, r3
 8002c9e:	43db      	mvns	r3, r3
 8002ca0:	69ba      	ldr	r2, [r7, #24]
 8002ca2:	4013      	ands	r3, r2
 8002ca4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002ca6:	683b      	ldr	r3, [r7, #0]
 8002ca8:	68da      	ldr	r2, [r3, #12]
 8002caa:	69fb      	ldr	r3, [r7, #28]
 8002cac:	005b      	lsls	r3, r3, #1
 8002cae:	fa02 f303 	lsl.w	r3, r2, r3
 8002cb2:	69ba      	ldr	r2, [r7, #24]
 8002cb4:	4313      	orrs	r3, r2
 8002cb6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002cb8:	687b      	ldr	r3, [r7, #4]
 8002cba:	69ba      	ldr	r2, [r7, #24]
 8002cbc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002cbe:	687b      	ldr	r3, [r7, #4]
 8002cc0:	685b      	ldr	r3, [r3, #4]
 8002cc2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002cc4:	2201      	movs	r2, #1
 8002cc6:	69fb      	ldr	r3, [r7, #28]
 8002cc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ccc:	43db      	mvns	r3, r3
 8002cce:	69ba      	ldr	r2, [r7, #24]
 8002cd0:	4013      	ands	r3, r2
 8002cd2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002cd4:	683b      	ldr	r3, [r7, #0]
 8002cd6:	685b      	ldr	r3, [r3, #4]
 8002cd8:	091b      	lsrs	r3, r3, #4
 8002cda:	f003 0201 	and.w	r2, r3, #1
 8002cde:	69fb      	ldr	r3, [r7, #28]
 8002ce0:	fa02 f303 	lsl.w	r3, r2, r3
 8002ce4:	69ba      	ldr	r2, [r7, #24]
 8002ce6:	4313      	orrs	r3, r2
 8002ce8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002cea:	687b      	ldr	r3, [r7, #4]
 8002cec:	69ba      	ldr	r2, [r7, #24]
 8002cee:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002cf0:	683b      	ldr	r3, [r7, #0]
 8002cf2:	685b      	ldr	r3, [r3, #4]
 8002cf4:	f003 0303 	and.w	r3, r3, #3
 8002cf8:	2b03      	cmp	r3, #3
 8002cfa:	d017      	beq.n	8002d2c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	68db      	ldr	r3, [r3, #12]
 8002d00:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002d02:	69fb      	ldr	r3, [r7, #28]
 8002d04:	005b      	lsls	r3, r3, #1
 8002d06:	2203      	movs	r2, #3
 8002d08:	fa02 f303 	lsl.w	r3, r2, r3
 8002d0c:	43db      	mvns	r3, r3
 8002d0e:	69ba      	ldr	r2, [r7, #24]
 8002d10:	4013      	ands	r3, r2
 8002d12:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002d14:	683b      	ldr	r3, [r7, #0]
 8002d16:	689a      	ldr	r2, [r3, #8]
 8002d18:	69fb      	ldr	r3, [r7, #28]
 8002d1a:	005b      	lsls	r3, r3, #1
 8002d1c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d20:	69ba      	ldr	r2, [r7, #24]
 8002d22:	4313      	orrs	r3, r2
 8002d24:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002d26:	687b      	ldr	r3, [r7, #4]
 8002d28:	69ba      	ldr	r2, [r7, #24]
 8002d2a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002d2c:	683b      	ldr	r3, [r7, #0]
 8002d2e:	685b      	ldr	r3, [r3, #4]
 8002d30:	f003 0303 	and.w	r3, r3, #3
 8002d34:	2b02      	cmp	r3, #2
 8002d36:	d123      	bne.n	8002d80 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002d38:	69fb      	ldr	r3, [r7, #28]
 8002d3a:	08da      	lsrs	r2, r3, #3
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	3208      	adds	r2, #8
 8002d40:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002d44:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002d46:	69fb      	ldr	r3, [r7, #28]
 8002d48:	f003 0307 	and.w	r3, r3, #7
 8002d4c:	009b      	lsls	r3, r3, #2
 8002d4e:	220f      	movs	r2, #15
 8002d50:	fa02 f303 	lsl.w	r3, r2, r3
 8002d54:	43db      	mvns	r3, r3
 8002d56:	69ba      	ldr	r2, [r7, #24]
 8002d58:	4013      	ands	r3, r2
 8002d5a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002d5c:	683b      	ldr	r3, [r7, #0]
 8002d5e:	691a      	ldr	r2, [r3, #16]
 8002d60:	69fb      	ldr	r3, [r7, #28]
 8002d62:	f003 0307 	and.w	r3, r3, #7
 8002d66:	009b      	lsls	r3, r3, #2
 8002d68:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6c:	69ba      	ldr	r2, [r7, #24]
 8002d6e:	4313      	orrs	r3, r2
 8002d70:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002d72:	69fb      	ldr	r3, [r7, #28]
 8002d74:	08da      	lsrs	r2, r3, #3
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	3208      	adds	r2, #8
 8002d7a:	69b9      	ldr	r1, [r7, #24]
 8002d7c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002d80:	687b      	ldr	r3, [r7, #4]
 8002d82:	681b      	ldr	r3, [r3, #0]
 8002d84:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002d86:	69fb      	ldr	r3, [r7, #28]
 8002d88:	005b      	lsls	r3, r3, #1
 8002d8a:	2203      	movs	r2, #3
 8002d8c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d90:	43db      	mvns	r3, r3
 8002d92:	69ba      	ldr	r2, [r7, #24]
 8002d94:	4013      	ands	r3, r2
 8002d96:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002d98:	683b      	ldr	r3, [r7, #0]
 8002d9a:	685b      	ldr	r3, [r3, #4]
 8002d9c:	f003 0203 	and.w	r2, r3, #3
 8002da0:	69fb      	ldr	r3, [r7, #28]
 8002da2:	005b      	lsls	r3, r3, #1
 8002da4:	fa02 f303 	lsl.w	r3, r2, r3
 8002da8:	69ba      	ldr	r2, [r7, #24]
 8002daa:	4313      	orrs	r3, r2
 8002dac:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	69ba      	ldr	r2, [r7, #24]
 8002db2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002db4:	683b      	ldr	r3, [r7, #0]
 8002db6:	685b      	ldr	r3, [r3, #4]
 8002db8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002dbc:	2b00      	cmp	r3, #0
 8002dbe:	f000 80a2 	beq.w	8002f06 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002dc2:	2300      	movs	r3, #0
 8002dc4:	60fb      	str	r3, [r7, #12]
 8002dc6:	4b57      	ldr	r3, [pc, #348]	@ (8002f24 <HAL_GPIO_Init+0x2e8>)
 8002dc8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dca:	4a56      	ldr	r2, [pc, #344]	@ (8002f24 <HAL_GPIO_Init+0x2e8>)
 8002dcc:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002dd0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002dd2:	4b54      	ldr	r3, [pc, #336]	@ (8002f24 <HAL_GPIO_Init+0x2e8>)
 8002dd4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002dd6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002dda:	60fb      	str	r3, [r7, #12]
 8002ddc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002dde:	4a52      	ldr	r2, [pc, #328]	@ (8002f28 <HAL_GPIO_Init+0x2ec>)
 8002de0:	69fb      	ldr	r3, [r7, #28]
 8002de2:	089b      	lsrs	r3, r3, #2
 8002de4:	3302      	adds	r3, #2
 8002de6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002dea:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002dec:	69fb      	ldr	r3, [r7, #28]
 8002dee:	f003 0303 	and.w	r3, r3, #3
 8002df2:	009b      	lsls	r3, r3, #2
 8002df4:	220f      	movs	r2, #15
 8002df6:	fa02 f303 	lsl.w	r3, r2, r3
 8002dfa:	43db      	mvns	r3, r3
 8002dfc:	69ba      	ldr	r2, [r7, #24]
 8002dfe:	4013      	ands	r3, r2
 8002e00:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002e02:	687b      	ldr	r3, [r7, #4]
 8002e04:	4a49      	ldr	r2, [pc, #292]	@ (8002f2c <HAL_GPIO_Init+0x2f0>)
 8002e06:	4293      	cmp	r3, r2
 8002e08:	d019      	beq.n	8002e3e <HAL_GPIO_Init+0x202>
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	4a48      	ldr	r2, [pc, #288]	@ (8002f30 <HAL_GPIO_Init+0x2f4>)
 8002e0e:	4293      	cmp	r3, r2
 8002e10:	d013      	beq.n	8002e3a <HAL_GPIO_Init+0x1fe>
 8002e12:	687b      	ldr	r3, [r7, #4]
 8002e14:	4a47      	ldr	r2, [pc, #284]	@ (8002f34 <HAL_GPIO_Init+0x2f8>)
 8002e16:	4293      	cmp	r3, r2
 8002e18:	d00d      	beq.n	8002e36 <HAL_GPIO_Init+0x1fa>
 8002e1a:	687b      	ldr	r3, [r7, #4]
 8002e1c:	4a46      	ldr	r2, [pc, #280]	@ (8002f38 <HAL_GPIO_Init+0x2fc>)
 8002e1e:	4293      	cmp	r3, r2
 8002e20:	d007      	beq.n	8002e32 <HAL_GPIO_Init+0x1f6>
 8002e22:	687b      	ldr	r3, [r7, #4]
 8002e24:	4a45      	ldr	r2, [pc, #276]	@ (8002f3c <HAL_GPIO_Init+0x300>)
 8002e26:	4293      	cmp	r3, r2
 8002e28:	d101      	bne.n	8002e2e <HAL_GPIO_Init+0x1f2>
 8002e2a:	2304      	movs	r3, #4
 8002e2c:	e008      	b.n	8002e40 <HAL_GPIO_Init+0x204>
 8002e2e:	2307      	movs	r3, #7
 8002e30:	e006      	b.n	8002e40 <HAL_GPIO_Init+0x204>
 8002e32:	2303      	movs	r3, #3
 8002e34:	e004      	b.n	8002e40 <HAL_GPIO_Init+0x204>
 8002e36:	2302      	movs	r3, #2
 8002e38:	e002      	b.n	8002e40 <HAL_GPIO_Init+0x204>
 8002e3a:	2301      	movs	r3, #1
 8002e3c:	e000      	b.n	8002e40 <HAL_GPIO_Init+0x204>
 8002e3e:	2300      	movs	r3, #0
 8002e40:	69fa      	ldr	r2, [r7, #28]
 8002e42:	f002 0203 	and.w	r2, r2, #3
 8002e46:	0092      	lsls	r2, r2, #2
 8002e48:	4093      	lsls	r3, r2
 8002e4a:	69ba      	ldr	r2, [r7, #24]
 8002e4c:	4313      	orrs	r3, r2
 8002e4e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002e50:	4935      	ldr	r1, [pc, #212]	@ (8002f28 <HAL_GPIO_Init+0x2ec>)
 8002e52:	69fb      	ldr	r3, [r7, #28]
 8002e54:	089b      	lsrs	r3, r3, #2
 8002e56:	3302      	adds	r3, #2
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002e5e:	4b38      	ldr	r3, [pc, #224]	@ (8002f40 <HAL_GPIO_Init+0x304>)
 8002e60:	689b      	ldr	r3, [r3, #8]
 8002e62:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e64:	693b      	ldr	r3, [r7, #16]
 8002e66:	43db      	mvns	r3, r3
 8002e68:	69ba      	ldr	r2, [r7, #24]
 8002e6a:	4013      	ands	r3, r2
 8002e6c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002e6e:	683b      	ldr	r3, [r7, #0]
 8002e70:	685b      	ldr	r3, [r3, #4]
 8002e72:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002e76:	2b00      	cmp	r3, #0
 8002e78:	d003      	beq.n	8002e82 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002e7a:	69ba      	ldr	r2, [r7, #24]
 8002e7c:	693b      	ldr	r3, [r7, #16]
 8002e7e:	4313      	orrs	r3, r2
 8002e80:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002e82:	4a2f      	ldr	r2, [pc, #188]	@ (8002f40 <HAL_GPIO_Init+0x304>)
 8002e84:	69bb      	ldr	r3, [r7, #24]
 8002e86:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002e88:	4b2d      	ldr	r3, [pc, #180]	@ (8002f40 <HAL_GPIO_Init+0x304>)
 8002e8a:	68db      	ldr	r3, [r3, #12]
 8002e8c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002e8e:	693b      	ldr	r3, [r7, #16]
 8002e90:	43db      	mvns	r3, r3
 8002e92:	69ba      	ldr	r2, [r7, #24]
 8002e94:	4013      	ands	r3, r2
 8002e96:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002e98:	683b      	ldr	r3, [r7, #0]
 8002e9a:	685b      	ldr	r3, [r3, #4]
 8002e9c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002ea0:	2b00      	cmp	r3, #0
 8002ea2:	d003      	beq.n	8002eac <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002ea4:	69ba      	ldr	r2, [r7, #24]
 8002ea6:	693b      	ldr	r3, [r7, #16]
 8002ea8:	4313      	orrs	r3, r2
 8002eaa:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002eac:	4a24      	ldr	r2, [pc, #144]	@ (8002f40 <HAL_GPIO_Init+0x304>)
 8002eae:	69bb      	ldr	r3, [r7, #24]
 8002eb0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002eb2:	4b23      	ldr	r3, [pc, #140]	@ (8002f40 <HAL_GPIO_Init+0x304>)
 8002eb4:	685b      	ldr	r3, [r3, #4]
 8002eb6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002eb8:	693b      	ldr	r3, [r7, #16]
 8002eba:	43db      	mvns	r3, r3
 8002ebc:	69ba      	ldr	r2, [r7, #24]
 8002ebe:	4013      	ands	r3, r2
 8002ec0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002ec2:	683b      	ldr	r3, [r7, #0]
 8002ec4:	685b      	ldr	r3, [r3, #4]
 8002ec6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002eca:	2b00      	cmp	r3, #0
 8002ecc:	d003      	beq.n	8002ed6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002ece:	69ba      	ldr	r2, [r7, #24]
 8002ed0:	693b      	ldr	r3, [r7, #16]
 8002ed2:	4313      	orrs	r3, r2
 8002ed4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ed6:	4a1a      	ldr	r2, [pc, #104]	@ (8002f40 <HAL_GPIO_Init+0x304>)
 8002ed8:	69bb      	ldr	r3, [r7, #24]
 8002eda:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002edc:	4b18      	ldr	r3, [pc, #96]	@ (8002f40 <HAL_GPIO_Init+0x304>)
 8002ede:	681b      	ldr	r3, [r3, #0]
 8002ee0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002ee2:	693b      	ldr	r3, [r7, #16]
 8002ee4:	43db      	mvns	r3, r3
 8002ee6:	69ba      	ldr	r2, [r7, #24]
 8002ee8:	4013      	ands	r3, r2
 8002eea:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 8002eec:	683b      	ldr	r3, [r7, #0]
 8002eee:	685b      	ldr	r3, [r3, #4]
 8002ef0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8002ef4:	2b00      	cmp	r3, #0
 8002ef6:	d003      	beq.n	8002f00 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002ef8:	69ba      	ldr	r2, [r7, #24]
 8002efa:	693b      	ldr	r3, [r7, #16]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f00:	4a0f      	ldr	r2, [pc, #60]	@ (8002f40 <HAL_GPIO_Init+0x304>)
 8002f02:	69bb      	ldr	r3, [r7, #24]
 8002f04:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f06:	69fb      	ldr	r3, [r7, #28]
 8002f08:	3301      	adds	r3, #1
 8002f0a:	61fb      	str	r3, [r7, #28]
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	2b0f      	cmp	r3, #15
 8002f10:	f67f aea2 	bls.w	8002c58 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002f14:	bf00      	nop
 8002f16:	bf00      	nop
 8002f18:	3724      	adds	r7, #36	@ 0x24
 8002f1a:	46bd      	mov	sp, r7
 8002f1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f20:	4770      	bx	lr
 8002f22:	bf00      	nop
 8002f24:	40023800 	.word	0x40023800
 8002f28:	40013800 	.word	0x40013800
 8002f2c:	40020000 	.word	0x40020000
 8002f30:	40020400 	.word	0x40020400
 8002f34:	40020800 	.word	0x40020800
 8002f38:	40020c00 	.word	0x40020c00
 8002f3c:	40021000 	.word	0x40021000
 8002f40:	40013c00 	.word	0x40013c00

08002f44 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b083      	sub	sp, #12
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	6078      	str	r0, [r7, #4]
 8002f4c:	460b      	mov	r3, r1
 8002f4e:	807b      	strh	r3, [r7, #2]
 8002f50:	4613      	mov	r3, r2
 8002f52:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8002f54:	787b      	ldrb	r3, [r7, #1]
 8002f56:	2b00      	cmp	r3, #0
 8002f58:	d003      	beq.n	8002f62 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8002f5a:	887a      	ldrh	r2, [r7, #2]
 8002f5c:	687b      	ldr	r3, [r7, #4]
 8002f5e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8002f60:	e003      	b.n	8002f6a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8002f62:	887b      	ldrh	r3, [r7, #2]
 8002f64:	041a      	lsls	r2, r3, #16
 8002f66:	687b      	ldr	r3, [r7, #4]
 8002f68:	619a      	str	r2, [r3, #24]
}
 8002f6a:	bf00      	nop
 8002f6c:	370c      	adds	r7, #12
 8002f6e:	46bd      	mov	sp, r7
 8002f70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f74:	4770      	bx	lr
	...

08002f78 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8002f78:	b580      	push	{r7, lr}
 8002f7a:	b084      	sub	sp, #16
 8002f7c:	af00      	add	r7, sp, #0
 8002f7e:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8002f80:	687b      	ldr	r3, [r7, #4]
 8002f82:	2b00      	cmp	r3, #0
 8002f84:	d101      	bne.n	8002f8a <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8002f86:	2301      	movs	r3, #1
 8002f88:	e12b      	b.n	80031e2 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8002f8a:	687b      	ldr	r3, [r7, #4]
 8002f8c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8002f90:	b2db      	uxtb	r3, r3
 8002f92:	2b00      	cmp	r3, #0
 8002f94:	d106      	bne.n	8002fa4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8002f96:	687b      	ldr	r3, [r7, #4]
 8002f98:	2200      	movs	r2, #0
 8002f9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8002f9e:	6878      	ldr	r0, [r7, #4]
 8002fa0:	f7fe ffa8 	bl	8001ef4 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8002fa4:	687b      	ldr	r3, [r7, #4]
 8002fa6:	2224      	movs	r2, #36	@ 0x24
 8002fa8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8002fac:	687b      	ldr	r3, [r7, #4]
 8002fae:	681b      	ldr	r3, [r3, #0]
 8002fb0:	681a      	ldr	r2, [r3, #0]
 8002fb2:	687b      	ldr	r3, [r7, #4]
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	f022 0201 	bic.w	r2, r2, #1
 8002fba:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8002fbc:	687b      	ldr	r3, [r7, #4]
 8002fbe:	681b      	ldr	r3, [r3, #0]
 8002fc0:	681a      	ldr	r2, [r3, #0]
 8002fc2:	687b      	ldr	r3, [r7, #4]
 8002fc4:	681b      	ldr	r3, [r3, #0]
 8002fc6:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 8002fca:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8002fcc:	687b      	ldr	r3, [r7, #4]
 8002fce:	681b      	ldr	r3, [r3, #0]
 8002fd0:	681a      	ldr	r2, [r3, #0]
 8002fd2:	687b      	ldr	r3, [r7, #4]
 8002fd4:	681b      	ldr	r3, [r3, #0]
 8002fd6:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 8002fda:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8002fdc:	f002 f8e0 	bl	80051a0 <HAL_RCC_GetPCLK1Freq>
 8002fe0:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8002fe2:	687b      	ldr	r3, [r7, #4]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	4a81      	ldr	r2, [pc, #516]	@ (80031ec <HAL_I2C_Init+0x274>)
 8002fe8:	4293      	cmp	r3, r2
 8002fea:	d807      	bhi.n	8002ffc <HAL_I2C_Init+0x84>
 8002fec:	68fb      	ldr	r3, [r7, #12]
 8002fee:	4a80      	ldr	r2, [pc, #512]	@ (80031f0 <HAL_I2C_Init+0x278>)
 8002ff0:	4293      	cmp	r3, r2
 8002ff2:	bf94      	ite	ls
 8002ff4:	2301      	movls	r3, #1
 8002ff6:	2300      	movhi	r3, #0
 8002ff8:	b2db      	uxtb	r3, r3
 8002ffa:	e006      	b.n	800300a <HAL_I2C_Init+0x92>
 8002ffc:	68fb      	ldr	r3, [r7, #12]
 8002ffe:	4a7d      	ldr	r2, [pc, #500]	@ (80031f4 <HAL_I2C_Init+0x27c>)
 8003000:	4293      	cmp	r3, r2
 8003002:	bf94      	ite	ls
 8003004:	2301      	movls	r3, #1
 8003006:	2300      	movhi	r3, #0
 8003008:	b2db      	uxtb	r3, r3
 800300a:	2b00      	cmp	r3, #0
 800300c:	d001      	beq.n	8003012 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800300e:	2301      	movs	r3, #1
 8003010:	e0e7      	b.n	80031e2 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003012:	68fb      	ldr	r3, [r7, #12]
 8003014:	4a78      	ldr	r2, [pc, #480]	@ (80031f8 <HAL_I2C_Init+0x280>)
 8003016:	fba2 2303 	umull	r2, r3, r2, r3
 800301a:	0c9b      	lsrs	r3, r3, #18
 800301c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800301e:	687b      	ldr	r3, [r7, #4]
 8003020:	681b      	ldr	r3, [r3, #0]
 8003022:	685b      	ldr	r3, [r3, #4]
 8003024:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003028:	687b      	ldr	r3, [r7, #4]
 800302a:	681b      	ldr	r3, [r3, #0]
 800302c:	68ba      	ldr	r2, [r7, #8]
 800302e:	430a      	orrs	r2, r1
 8003030:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	681b      	ldr	r3, [r3, #0]
 8003036:	6a1b      	ldr	r3, [r3, #32]
 8003038:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 800303c:	687b      	ldr	r3, [r7, #4]
 800303e:	685b      	ldr	r3, [r3, #4]
 8003040:	4a6a      	ldr	r2, [pc, #424]	@ (80031ec <HAL_I2C_Init+0x274>)
 8003042:	4293      	cmp	r3, r2
 8003044:	d802      	bhi.n	800304c <HAL_I2C_Init+0xd4>
 8003046:	68bb      	ldr	r3, [r7, #8]
 8003048:	3301      	adds	r3, #1
 800304a:	e009      	b.n	8003060 <HAL_I2C_Init+0xe8>
 800304c:	68bb      	ldr	r3, [r7, #8]
 800304e:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 8003052:	fb02 f303 	mul.w	r3, r2, r3
 8003056:	4a69      	ldr	r2, [pc, #420]	@ (80031fc <HAL_I2C_Init+0x284>)
 8003058:	fba2 2303 	umull	r2, r3, r2, r3
 800305c:	099b      	lsrs	r3, r3, #6
 800305e:	3301      	adds	r3, #1
 8003060:	687a      	ldr	r2, [r7, #4]
 8003062:	6812      	ldr	r2, [r2, #0]
 8003064:	430b      	orrs	r3, r1
 8003066:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003068:	687b      	ldr	r3, [r7, #4]
 800306a:	681b      	ldr	r3, [r3, #0]
 800306c:	69db      	ldr	r3, [r3, #28]
 800306e:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 8003072:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	685b      	ldr	r3, [r3, #4]
 800307a:	495c      	ldr	r1, [pc, #368]	@ (80031ec <HAL_I2C_Init+0x274>)
 800307c:	428b      	cmp	r3, r1
 800307e:	d819      	bhi.n	80030b4 <HAL_I2C_Init+0x13c>
 8003080:	68fb      	ldr	r3, [r7, #12]
 8003082:	1e59      	subs	r1, r3, #1
 8003084:	687b      	ldr	r3, [r7, #4]
 8003086:	685b      	ldr	r3, [r3, #4]
 8003088:	005b      	lsls	r3, r3, #1
 800308a:	fbb1 f3f3 	udiv	r3, r1, r3
 800308e:	1c59      	adds	r1, r3, #1
 8003090:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003094:	400b      	ands	r3, r1
 8003096:	2b00      	cmp	r3, #0
 8003098:	d00a      	beq.n	80030b0 <HAL_I2C_Init+0x138>
 800309a:	68fb      	ldr	r3, [r7, #12]
 800309c:	1e59      	subs	r1, r3, #1
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	005b      	lsls	r3, r3, #1
 80030a4:	fbb1 f3f3 	udiv	r3, r1, r3
 80030a8:	3301      	adds	r3, #1
 80030aa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030ae:	e051      	b.n	8003154 <HAL_I2C_Init+0x1dc>
 80030b0:	2304      	movs	r3, #4
 80030b2:	e04f      	b.n	8003154 <HAL_I2C_Init+0x1dc>
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	689b      	ldr	r3, [r3, #8]
 80030b8:	2b00      	cmp	r3, #0
 80030ba:	d111      	bne.n	80030e0 <HAL_I2C_Init+0x168>
 80030bc:	68fb      	ldr	r3, [r7, #12]
 80030be:	1e58      	subs	r0, r3, #1
 80030c0:	687b      	ldr	r3, [r7, #4]
 80030c2:	6859      	ldr	r1, [r3, #4]
 80030c4:	460b      	mov	r3, r1
 80030c6:	005b      	lsls	r3, r3, #1
 80030c8:	440b      	add	r3, r1
 80030ca:	fbb0 f3f3 	udiv	r3, r0, r3
 80030ce:	3301      	adds	r3, #1
 80030d0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030d4:	2b00      	cmp	r3, #0
 80030d6:	bf0c      	ite	eq
 80030d8:	2301      	moveq	r3, #1
 80030da:	2300      	movne	r3, #0
 80030dc:	b2db      	uxtb	r3, r3
 80030de:	e012      	b.n	8003106 <HAL_I2C_Init+0x18e>
 80030e0:	68fb      	ldr	r3, [r7, #12]
 80030e2:	1e58      	subs	r0, r3, #1
 80030e4:	687b      	ldr	r3, [r7, #4]
 80030e6:	6859      	ldr	r1, [r3, #4]
 80030e8:	460b      	mov	r3, r1
 80030ea:	009b      	lsls	r3, r3, #2
 80030ec:	440b      	add	r3, r1
 80030ee:	0099      	lsls	r1, r3, #2
 80030f0:	440b      	add	r3, r1
 80030f2:	fbb0 f3f3 	udiv	r3, r0, r3
 80030f6:	3301      	adds	r3, #1
 80030f8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80030fc:	2b00      	cmp	r3, #0
 80030fe:	bf0c      	ite	eq
 8003100:	2301      	moveq	r3, #1
 8003102:	2300      	movne	r3, #0
 8003104:	b2db      	uxtb	r3, r3
 8003106:	2b00      	cmp	r3, #0
 8003108:	d001      	beq.n	800310e <HAL_I2C_Init+0x196>
 800310a:	2301      	movs	r3, #1
 800310c:	e022      	b.n	8003154 <HAL_I2C_Init+0x1dc>
 800310e:	687b      	ldr	r3, [r7, #4]
 8003110:	689b      	ldr	r3, [r3, #8]
 8003112:	2b00      	cmp	r3, #0
 8003114:	d10e      	bne.n	8003134 <HAL_I2C_Init+0x1bc>
 8003116:	68fb      	ldr	r3, [r7, #12]
 8003118:	1e58      	subs	r0, r3, #1
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	6859      	ldr	r1, [r3, #4]
 800311e:	460b      	mov	r3, r1
 8003120:	005b      	lsls	r3, r3, #1
 8003122:	440b      	add	r3, r1
 8003124:	fbb0 f3f3 	udiv	r3, r0, r3
 8003128:	3301      	adds	r3, #1
 800312a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800312e:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 8003132:	e00f      	b.n	8003154 <HAL_I2C_Init+0x1dc>
 8003134:	68fb      	ldr	r3, [r7, #12]
 8003136:	1e58      	subs	r0, r3, #1
 8003138:	687b      	ldr	r3, [r7, #4]
 800313a:	6859      	ldr	r1, [r3, #4]
 800313c:	460b      	mov	r3, r1
 800313e:	009b      	lsls	r3, r3, #2
 8003140:	440b      	add	r3, r1
 8003142:	0099      	lsls	r1, r3, #2
 8003144:	440b      	add	r3, r1
 8003146:	fbb0 f3f3 	udiv	r3, r0, r3
 800314a:	3301      	adds	r3, #1
 800314c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003150:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003154:	6879      	ldr	r1, [r7, #4]
 8003156:	6809      	ldr	r1, [r1, #0]
 8003158:	4313      	orrs	r3, r2
 800315a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800315c:	687b      	ldr	r3, [r7, #4]
 800315e:	681b      	ldr	r3, [r3, #0]
 8003160:	681b      	ldr	r3, [r3, #0]
 8003162:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003166:	687b      	ldr	r3, [r7, #4]
 8003168:	69da      	ldr	r2, [r3, #28]
 800316a:	687b      	ldr	r3, [r7, #4]
 800316c:	6a1b      	ldr	r3, [r3, #32]
 800316e:	431a      	orrs	r2, r3
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	681b      	ldr	r3, [r3, #0]
 8003174:	430a      	orrs	r2, r1
 8003176:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003178:	687b      	ldr	r3, [r7, #4]
 800317a:	681b      	ldr	r3, [r3, #0]
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 8003182:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003186:	687a      	ldr	r2, [r7, #4]
 8003188:	6911      	ldr	r1, [r2, #16]
 800318a:	687a      	ldr	r2, [r7, #4]
 800318c:	68d2      	ldr	r2, [r2, #12]
 800318e:	4311      	orrs	r1, r2
 8003190:	687a      	ldr	r2, [r7, #4]
 8003192:	6812      	ldr	r2, [r2, #0]
 8003194:	430b      	orrs	r3, r1
 8003196:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003198:	687b      	ldr	r3, [r7, #4]
 800319a:	681b      	ldr	r3, [r3, #0]
 800319c:	68db      	ldr	r3, [r3, #12]
 800319e:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 80031a2:	687b      	ldr	r3, [r7, #4]
 80031a4:	695a      	ldr	r2, [r3, #20]
 80031a6:	687b      	ldr	r3, [r7, #4]
 80031a8:	699b      	ldr	r3, [r3, #24]
 80031aa:	431a      	orrs	r2, r3
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	681b      	ldr	r3, [r3, #0]
 80031b0:	430a      	orrs	r2, r1
 80031b2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80031b4:	687b      	ldr	r3, [r7, #4]
 80031b6:	681b      	ldr	r3, [r3, #0]
 80031b8:	681a      	ldr	r2, [r3, #0]
 80031ba:	687b      	ldr	r3, [r7, #4]
 80031bc:	681b      	ldr	r3, [r3, #0]
 80031be:	f042 0201 	orr.w	r2, r2, #1
 80031c2:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80031c4:	687b      	ldr	r3, [r7, #4]
 80031c6:	2200      	movs	r2, #0
 80031c8:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80031ca:	687b      	ldr	r3, [r7, #4]
 80031cc:	2220      	movs	r2, #32
 80031ce:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80031d2:	687b      	ldr	r3, [r7, #4]
 80031d4:	2200      	movs	r2, #0
 80031d6:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80031d8:	687b      	ldr	r3, [r7, #4]
 80031da:	2200      	movs	r2, #0
 80031dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80031e0:	2300      	movs	r3, #0
}
 80031e2:	4618      	mov	r0, r3
 80031e4:	3710      	adds	r7, #16
 80031e6:	46bd      	mov	sp, r7
 80031e8:	bd80      	pop	{r7, pc}
 80031ea:	bf00      	nop
 80031ec:	000186a0 	.word	0x000186a0
 80031f0:	001e847f 	.word	0x001e847f
 80031f4:	003d08ff 	.word	0x003d08ff
 80031f8:	431bde83 	.word	0x431bde83
 80031fc:	10624dd3 	.word	0x10624dd3

08003200 <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003200:	b580      	push	{r7, lr}
 8003202:	b088      	sub	sp, #32
 8003204:	af02      	add	r7, sp, #8
 8003206:	60f8      	str	r0, [r7, #12]
 8003208:	607a      	str	r2, [r7, #4]
 800320a:	461a      	mov	r2, r3
 800320c:	460b      	mov	r3, r1
 800320e:	817b      	strh	r3, [r7, #10]
 8003210:	4613      	mov	r3, r2
 8003212:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003214:	f7ff fb3e 	bl	8002894 <HAL_GetTick>
 8003218:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 800321a:	68fb      	ldr	r3, [r7, #12]
 800321c:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003220:	b2db      	uxtb	r3, r3
 8003222:	2b20      	cmp	r3, #32
 8003224:	f040 80e0 	bne.w	80033e8 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003228:	697b      	ldr	r3, [r7, #20]
 800322a:	9300      	str	r3, [sp, #0]
 800322c:	2319      	movs	r3, #25
 800322e:	2201      	movs	r2, #1
 8003230:	4970      	ldr	r1, [pc, #448]	@ (80033f4 <HAL_I2C_Master_Transmit+0x1f4>)
 8003232:	68f8      	ldr	r0, [r7, #12]
 8003234:	f001 f90e 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 8003238:	4603      	mov	r3, r0
 800323a:	2b00      	cmp	r3, #0
 800323c:	d001      	beq.n	8003242 <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800323e:	2302      	movs	r3, #2
 8003240:	e0d3      	b.n	80033ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003242:	68fb      	ldr	r3, [r7, #12]
 8003244:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003248:	2b01      	cmp	r3, #1
 800324a:	d101      	bne.n	8003250 <HAL_I2C_Master_Transmit+0x50>
 800324c:	2302      	movs	r3, #2
 800324e:	e0cc      	b.n	80033ea <HAL_I2C_Master_Transmit+0x1ea>
 8003250:	68fb      	ldr	r3, [r7, #12]
 8003252:	2201      	movs	r2, #1
 8003254:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003258:	68fb      	ldr	r3, [r7, #12]
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	681b      	ldr	r3, [r3, #0]
 800325e:	f003 0301 	and.w	r3, r3, #1
 8003262:	2b01      	cmp	r3, #1
 8003264:	d007      	beq.n	8003276 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003266:	68fb      	ldr	r3, [r7, #12]
 8003268:	681b      	ldr	r3, [r3, #0]
 800326a:	681a      	ldr	r2, [r3, #0]
 800326c:	68fb      	ldr	r3, [r7, #12]
 800326e:	681b      	ldr	r3, [r3, #0]
 8003270:	f042 0201 	orr.w	r2, r2, #1
 8003274:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003276:	68fb      	ldr	r3, [r7, #12]
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	681a      	ldr	r2, [r3, #0]
 800327c:	68fb      	ldr	r3, [r7, #12]
 800327e:	681b      	ldr	r3, [r3, #0]
 8003280:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003284:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003286:	68fb      	ldr	r3, [r7, #12]
 8003288:	2221      	movs	r2, #33	@ 0x21
 800328a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800328e:	68fb      	ldr	r3, [r7, #12]
 8003290:	2210      	movs	r2, #16
 8003292:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003296:	68fb      	ldr	r3, [r7, #12]
 8003298:	2200      	movs	r2, #0
 800329a:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800329c:	68fb      	ldr	r3, [r7, #12]
 800329e:	687a      	ldr	r2, [r7, #4]
 80032a0:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80032a2:	68fb      	ldr	r3, [r7, #12]
 80032a4:	893a      	ldrh	r2, [r7, #8]
 80032a6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80032a8:	68fb      	ldr	r3, [r7, #12]
 80032aa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80032ac:	b29a      	uxth	r2, r3
 80032ae:	68fb      	ldr	r3, [r7, #12]
 80032b0:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80032b2:	68fb      	ldr	r3, [r7, #12]
 80032b4:	4a50      	ldr	r2, [pc, #320]	@ (80033f8 <HAL_I2C_Master_Transmit+0x1f8>)
 80032b6:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80032b8:	8979      	ldrh	r1, [r7, #10]
 80032ba:	697b      	ldr	r3, [r7, #20]
 80032bc:	6a3a      	ldr	r2, [r7, #32]
 80032be:	68f8      	ldr	r0, [r7, #12]
 80032c0:	f000 fdfa 	bl	8003eb8 <I2C_MasterRequestWrite>
 80032c4:	4603      	mov	r3, r0
 80032c6:	2b00      	cmp	r3, #0
 80032c8:	d001      	beq.n	80032ce <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80032ca:	2301      	movs	r3, #1
 80032cc:	e08d      	b.n	80033ea <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80032ce:	2300      	movs	r3, #0
 80032d0:	613b      	str	r3, [r7, #16]
 80032d2:	68fb      	ldr	r3, [r7, #12]
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	695b      	ldr	r3, [r3, #20]
 80032d8:	613b      	str	r3, [r7, #16]
 80032da:	68fb      	ldr	r3, [r7, #12]
 80032dc:	681b      	ldr	r3, [r3, #0]
 80032de:	699b      	ldr	r3, [r3, #24]
 80032e0:	613b      	str	r3, [r7, #16]
 80032e2:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80032e4:	e066      	b.n	80033b4 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80032e6:	697a      	ldr	r2, [r7, #20]
 80032e8:	6a39      	ldr	r1, [r7, #32]
 80032ea:	68f8      	ldr	r0, [r7, #12]
 80032ec:	f001 f9cc 	bl	8004688 <I2C_WaitOnTXEFlagUntilTimeout>
 80032f0:	4603      	mov	r3, r0
 80032f2:	2b00      	cmp	r3, #0
 80032f4:	d00d      	beq.n	8003312 <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80032f6:	68fb      	ldr	r3, [r7, #12]
 80032f8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80032fa:	2b04      	cmp	r3, #4
 80032fc:	d107      	bne.n	800330e <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80032fe:	68fb      	ldr	r3, [r7, #12]
 8003300:	681b      	ldr	r3, [r3, #0]
 8003302:	681a      	ldr	r2, [r3, #0]
 8003304:	68fb      	ldr	r3, [r7, #12]
 8003306:	681b      	ldr	r3, [r3, #0]
 8003308:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800330c:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800330e:	2301      	movs	r3, #1
 8003310:	e06b      	b.n	80033ea <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003312:	68fb      	ldr	r3, [r7, #12]
 8003314:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003316:	781a      	ldrb	r2, [r3, #0]
 8003318:	68fb      	ldr	r3, [r7, #12]
 800331a:	681b      	ldr	r3, [r3, #0]
 800331c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800331e:	68fb      	ldr	r3, [r7, #12]
 8003320:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003322:	1c5a      	adds	r2, r3, #1
 8003324:	68fb      	ldr	r3, [r7, #12]
 8003326:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003328:	68fb      	ldr	r3, [r7, #12]
 800332a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800332c:	b29b      	uxth	r3, r3
 800332e:	3b01      	subs	r3, #1
 8003330:	b29a      	uxth	r2, r3
 8003332:	68fb      	ldr	r3, [r7, #12]
 8003334:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003336:	68fb      	ldr	r3, [r7, #12]
 8003338:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800333a:	3b01      	subs	r3, #1
 800333c:	b29a      	uxth	r2, r3
 800333e:	68fb      	ldr	r3, [r7, #12]
 8003340:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003342:	68fb      	ldr	r3, [r7, #12]
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	695b      	ldr	r3, [r3, #20]
 8003348:	f003 0304 	and.w	r3, r3, #4
 800334c:	2b04      	cmp	r3, #4
 800334e:	d11b      	bne.n	8003388 <HAL_I2C_Master_Transmit+0x188>
 8003350:	68fb      	ldr	r3, [r7, #12]
 8003352:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003354:	2b00      	cmp	r3, #0
 8003356:	d017      	beq.n	8003388 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800335c:	781a      	ldrb	r2, [r3, #0]
 800335e:	68fb      	ldr	r3, [r7, #12]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003364:	68fb      	ldr	r3, [r7, #12]
 8003366:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003368:	1c5a      	adds	r2, r3, #1
 800336a:	68fb      	ldr	r3, [r7, #12]
 800336c:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800336e:	68fb      	ldr	r3, [r7, #12]
 8003370:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003372:	b29b      	uxth	r3, r3
 8003374:	3b01      	subs	r3, #1
 8003376:	b29a      	uxth	r2, r3
 8003378:	68fb      	ldr	r3, [r7, #12]
 800337a:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 800337c:	68fb      	ldr	r3, [r7, #12]
 800337e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003380:	3b01      	subs	r3, #1
 8003382:	b29a      	uxth	r2, r3
 8003384:	68fb      	ldr	r3, [r7, #12]
 8003386:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003388:	697a      	ldr	r2, [r7, #20]
 800338a:	6a39      	ldr	r1, [r7, #32]
 800338c:	68f8      	ldr	r0, [r7, #12]
 800338e:	f001 f9c3 	bl	8004718 <I2C_WaitOnBTFFlagUntilTimeout>
 8003392:	4603      	mov	r3, r0
 8003394:	2b00      	cmp	r3, #0
 8003396:	d00d      	beq.n	80033b4 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003398:	68fb      	ldr	r3, [r7, #12]
 800339a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800339c:	2b04      	cmp	r3, #4
 800339e:	d107      	bne.n	80033b0 <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033a0:	68fb      	ldr	r3, [r7, #12]
 80033a2:	681b      	ldr	r3, [r3, #0]
 80033a4:	681a      	ldr	r2, [r3, #0]
 80033a6:	68fb      	ldr	r3, [r7, #12]
 80033a8:	681b      	ldr	r3, [r3, #0]
 80033aa:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ae:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033b0:	2301      	movs	r3, #1
 80033b2:	e01a      	b.n	80033ea <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80033b4:	68fb      	ldr	r3, [r7, #12]
 80033b6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80033b8:	2b00      	cmp	r3, #0
 80033ba:	d194      	bne.n	80032e6 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033bc:	68fb      	ldr	r3, [r7, #12]
 80033be:	681b      	ldr	r3, [r3, #0]
 80033c0:	681a      	ldr	r2, [r3, #0]
 80033c2:	68fb      	ldr	r3, [r7, #12]
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033ca:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80033cc:	68fb      	ldr	r3, [r7, #12]
 80033ce:	2220      	movs	r2, #32
 80033d0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80033d4:	68fb      	ldr	r3, [r7, #12]
 80033d6:	2200      	movs	r2, #0
 80033d8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80033dc:	68fb      	ldr	r3, [r7, #12]
 80033de:	2200      	movs	r2, #0
 80033e0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80033e4:	2300      	movs	r3, #0
 80033e6:	e000      	b.n	80033ea <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80033e8:	2302      	movs	r3, #2
  }
}
 80033ea:	4618      	mov	r0, r3
 80033ec:	3718      	adds	r7, #24
 80033ee:	46bd      	mov	sp, r7
 80033f0:	bd80      	pop	{r7, pc}
 80033f2:	bf00      	nop
 80033f4:	00100002 	.word	0x00100002
 80033f8:	ffff0000 	.word	0xffff0000

080033fc <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80033fc:	b580      	push	{r7, lr}
 80033fe:	b08c      	sub	sp, #48	@ 0x30
 8003400:	af02      	add	r7, sp, #8
 8003402:	60f8      	str	r0, [r7, #12]
 8003404:	607a      	str	r2, [r7, #4]
 8003406:	461a      	mov	r2, r3
 8003408:	460b      	mov	r3, r1
 800340a:	817b      	strh	r3, [r7, #10]
 800340c:	4613      	mov	r3, r2
 800340e:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003410:	f7ff fa40 	bl	8002894 <HAL_GetTick>
 8003414:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003416:	68fb      	ldr	r3, [r7, #12]
 8003418:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800341c:	b2db      	uxtb	r3, r3
 800341e:	2b20      	cmp	r3, #32
 8003420:	f040 8217 	bne.w	8003852 <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003424:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003426:	9300      	str	r3, [sp, #0]
 8003428:	2319      	movs	r3, #25
 800342a:	2201      	movs	r2, #1
 800342c:	497c      	ldr	r1, [pc, #496]	@ (8003620 <HAL_I2C_Master_Receive+0x224>)
 800342e:	68f8      	ldr	r0, [r7, #12]
 8003430:	f001 f810 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 8003434:	4603      	mov	r3, r0
 8003436:	2b00      	cmp	r3, #0
 8003438:	d001      	beq.n	800343e <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 800343a:	2302      	movs	r3, #2
 800343c:	e20a      	b.n	8003854 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800343e:	68fb      	ldr	r3, [r7, #12]
 8003440:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003444:	2b01      	cmp	r3, #1
 8003446:	d101      	bne.n	800344c <HAL_I2C_Master_Receive+0x50>
 8003448:	2302      	movs	r3, #2
 800344a:	e203      	b.n	8003854 <HAL_I2C_Master_Receive+0x458>
 800344c:	68fb      	ldr	r3, [r7, #12]
 800344e:	2201      	movs	r2, #1
 8003450:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003454:	68fb      	ldr	r3, [r7, #12]
 8003456:	681b      	ldr	r3, [r3, #0]
 8003458:	681b      	ldr	r3, [r3, #0]
 800345a:	f003 0301 	and.w	r3, r3, #1
 800345e:	2b01      	cmp	r3, #1
 8003460:	d007      	beq.n	8003472 <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003462:	68fb      	ldr	r3, [r7, #12]
 8003464:	681b      	ldr	r3, [r3, #0]
 8003466:	681a      	ldr	r2, [r3, #0]
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	681b      	ldr	r3, [r3, #0]
 800346c:	f042 0201 	orr.w	r2, r2, #1
 8003470:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003472:	68fb      	ldr	r3, [r7, #12]
 8003474:	681b      	ldr	r3, [r3, #0]
 8003476:	681a      	ldr	r2, [r3, #0]
 8003478:	68fb      	ldr	r3, [r7, #12]
 800347a:	681b      	ldr	r3, [r3, #0]
 800347c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003480:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 8003482:	68fb      	ldr	r3, [r7, #12]
 8003484:	2222      	movs	r2, #34	@ 0x22
 8003486:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800348a:	68fb      	ldr	r3, [r7, #12]
 800348c:	2210      	movs	r2, #16
 800348e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	2200      	movs	r2, #0
 8003496:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003498:	68fb      	ldr	r3, [r7, #12]
 800349a:	687a      	ldr	r2, [r7, #4]
 800349c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800349e:	68fb      	ldr	r3, [r7, #12]
 80034a0:	893a      	ldrh	r2, [r7, #8]
 80034a2:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80034a4:	68fb      	ldr	r3, [r7, #12]
 80034a6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80034a8:	b29a      	uxth	r2, r3
 80034aa:	68fb      	ldr	r3, [r7, #12]
 80034ac:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	4a5c      	ldr	r2, [pc, #368]	@ (8003624 <HAL_I2C_Master_Receive+0x228>)
 80034b2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80034b4:	8979      	ldrh	r1, [r7, #10]
 80034b6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80034b8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80034ba:	68f8      	ldr	r0, [r7, #12]
 80034bc:	f000 fd7e 	bl	8003fbc <I2C_MasterRequestRead>
 80034c0:	4603      	mov	r3, r0
 80034c2:	2b00      	cmp	r3, #0
 80034c4:	d001      	beq.n	80034ca <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80034c6:	2301      	movs	r3, #1
 80034c8:	e1c4      	b.n	8003854 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80034ca:	68fb      	ldr	r3, [r7, #12]
 80034cc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034ce:	2b00      	cmp	r3, #0
 80034d0:	d113      	bne.n	80034fa <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80034d2:	2300      	movs	r3, #0
 80034d4:	623b      	str	r3, [r7, #32]
 80034d6:	68fb      	ldr	r3, [r7, #12]
 80034d8:	681b      	ldr	r3, [r3, #0]
 80034da:	695b      	ldr	r3, [r3, #20]
 80034dc:	623b      	str	r3, [r7, #32]
 80034de:	68fb      	ldr	r3, [r7, #12]
 80034e0:	681b      	ldr	r3, [r3, #0]
 80034e2:	699b      	ldr	r3, [r3, #24]
 80034e4:	623b      	str	r3, [r7, #32]
 80034e6:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034e8:	68fb      	ldr	r3, [r7, #12]
 80034ea:	681b      	ldr	r3, [r3, #0]
 80034ec:	681a      	ldr	r2, [r3, #0]
 80034ee:	68fb      	ldr	r3, [r7, #12]
 80034f0:	681b      	ldr	r3, [r3, #0]
 80034f2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034f6:	601a      	str	r2, [r3, #0]
 80034f8:	e198      	b.n	800382c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80034fa:	68fb      	ldr	r3, [r7, #12]
 80034fc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034fe:	2b01      	cmp	r3, #1
 8003500:	d11b      	bne.n	800353a <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	681a      	ldr	r2, [r3, #0]
 8003508:	68fb      	ldr	r3, [r7, #12]
 800350a:	681b      	ldr	r3, [r3, #0]
 800350c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003510:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003512:	2300      	movs	r3, #0
 8003514:	61fb      	str	r3, [r7, #28]
 8003516:	68fb      	ldr	r3, [r7, #12]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	695b      	ldr	r3, [r3, #20]
 800351c:	61fb      	str	r3, [r7, #28]
 800351e:	68fb      	ldr	r3, [r7, #12]
 8003520:	681b      	ldr	r3, [r3, #0]
 8003522:	699b      	ldr	r3, [r3, #24]
 8003524:	61fb      	str	r3, [r7, #28]
 8003526:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003528:	68fb      	ldr	r3, [r7, #12]
 800352a:	681b      	ldr	r3, [r3, #0]
 800352c:	681a      	ldr	r2, [r3, #0]
 800352e:	68fb      	ldr	r3, [r7, #12]
 8003530:	681b      	ldr	r3, [r3, #0]
 8003532:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003536:	601a      	str	r2, [r3, #0]
 8003538:	e178      	b.n	800382c <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 800353a:	68fb      	ldr	r3, [r7, #12]
 800353c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800353e:	2b02      	cmp	r3, #2
 8003540:	d11b      	bne.n	800357a <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003542:	68fb      	ldr	r3, [r7, #12]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	681a      	ldr	r2, [r3, #0]
 8003548:	68fb      	ldr	r3, [r7, #12]
 800354a:	681b      	ldr	r3, [r3, #0]
 800354c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003550:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	681b      	ldr	r3, [r3, #0]
 8003556:	681a      	ldr	r2, [r3, #0]
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	681b      	ldr	r3, [r3, #0]
 800355c:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003560:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003562:	2300      	movs	r3, #0
 8003564:	61bb      	str	r3, [r7, #24]
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	695b      	ldr	r3, [r3, #20]
 800356c:	61bb      	str	r3, [r7, #24]
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	681b      	ldr	r3, [r3, #0]
 8003572:	699b      	ldr	r3, [r3, #24]
 8003574:	61bb      	str	r3, [r7, #24]
 8003576:	69bb      	ldr	r3, [r7, #24]
 8003578:	e158      	b.n	800382c <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	681b      	ldr	r3, [r3, #0]
 800357e:	681a      	ldr	r2, [r3, #0]
 8003580:	68fb      	ldr	r3, [r7, #12]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003588:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800358a:	2300      	movs	r3, #0
 800358c:	617b      	str	r3, [r7, #20]
 800358e:	68fb      	ldr	r3, [r7, #12]
 8003590:	681b      	ldr	r3, [r3, #0]
 8003592:	695b      	ldr	r3, [r3, #20]
 8003594:	617b      	str	r3, [r7, #20]
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	681b      	ldr	r3, [r3, #0]
 800359a:	699b      	ldr	r3, [r3, #24]
 800359c:	617b      	str	r3, [r7, #20]
 800359e:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 80035a0:	e144      	b.n	800382c <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035a6:	2b03      	cmp	r3, #3
 80035a8:	f200 80f1 	bhi.w	800378e <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 80035ac:	68fb      	ldr	r3, [r7, #12]
 80035ae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035b0:	2b01      	cmp	r3, #1
 80035b2:	d123      	bne.n	80035fc <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80035b4:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80035b6:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80035b8:	68f8      	ldr	r0, [r7, #12]
 80035ba:	f001 f8f5 	bl	80047a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 80035be:	4603      	mov	r3, r0
 80035c0:	2b00      	cmp	r3, #0
 80035c2:	d001      	beq.n	80035c8 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80035c4:	2301      	movs	r3, #1
 80035c6:	e145      	b.n	8003854 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	691a      	ldr	r2, [r3, #16]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035d2:	b2d2      	uxtb	r2, r2
 80035d4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80035da:	1c5a      	adds	r2, r3, #1
 80035dc:	68fb      	ldr	r3, [r7, #12]
 80035de:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80035e0:	68fb      	ldr	r3, [r7, #12]
 80035e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035e4:	3b01      	subs	r3, #1
 80035e6:	b29a      	uxth	r2, r3
 80035e8:	68fb      	ldr	r3, [r7, #12]
 80035ea:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80035f0:	b29b      	uxth	r3, r3
 80035f2:	3b01      	subs	r3, #1
 80035f4:	b29a      	uxth	r2, r3
 80035f6:	68fb      	ldr	r3, [r7, #12]
 80035f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80035fa:	e117      	b.n	800382c <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003600:	2b02      	cmp	r3, #2
 8003602:	d14e      	bne.n	80036a2 <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003604:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003606:	9300      	str	r3, [sp, #0]
 8003608:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800360a:	2200      	movs	r2, #0
 800360c:	4906      	ldr	r1, [pc, #24]	@ (8003628 <HAL_I2C_Master_Receive+0x22c>)
 800360e:	68f8      	ldr	r0, [r7, #12]
 8003610:	f000 ff20 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 8003614:	4603      	mov	r3, r0
 8003616:	2b00      	cmp	r3, #0
 8003618:	d008      	beq.n	800362c <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 800361a:	2301      	movs	r3, #1
 800361c:	e11a      	b.n	8003854 <HAL_I2C_Master_Receive+0x458>
 800361e:	bf00      	nop
 8003620:	00100002 	.word	0x00100002
 8003624:	ffff0000 	.word	0xffff0000
 8003628:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800362c:	68fb      	ldr	r3, [r7, #12]
 800362e:	681b      	ldr	r3, [r3, #0]
 8003630:	681a      	ldr	r2, [r3, #0]
 8003632:	68fb      	ldr	r3, [r7, #12]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800363a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800363c:	68fb      	ldr	r3, [r7, #12]
 800363e:	681b      	ldr	r3, [r3, #0]
 8003640:	691a      	ldr	r2, [r3, #16]
 8003642:	68fb      	ldr	r3, [r7, #12]
 8003644:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003646:	b2d2      	uxtb	r2, r2
 8003648:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800364e:	1c5a      	adds	r2, r3, #1
 8003650:	68fb      	ldr	r3, [r7, #12]
 8003652:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003658:	3b01      	subs	r3, #1
 800365a:	b29a      	uxth	r2, r3
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003660:	68fb      	ldr	r3, [r7, #12]
 8003662:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003664:	b29b      	uxth	r3, r3
 8003666:	3b01      	subs	r3, #1
 8003668:	b29a      	uxth	r2, r3
 800366a:	68fb      	ldr	r3, [r7, #12]
 800366c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800366e:	68fb      	ldr	r3, [r7, #12]
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	691a      	ldr	r2, [r3, #16]
 8003674:	68fb      	ldr	r3, [r7, #12]
 8003676:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003678:	b2d2      	uxtb	r2, r2
 800367a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 800367c:	68fb      	ldr	r3, [r7, #12]
 800367e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003680:	1c5a      	adds	r2, r3, #1
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003686:	68fb      	ldr	r3, [r7, #12]
 8003688:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800368a:	3b01      	subs	r3, #1
 800368c:	b29a      	uxth	r2, r3
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003692:	68fb      	ldr	r3, [r7, #12]
 8003694:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003696:	b29b      	uxth	r3, r3
 8003698:	3b01      	subs	r3, #1
 800369a:	b29a      	uxth	r2, r3
 800369c:	68fb      	ldr	r3, [r7, #12]
 800369e:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036a0:	e0c4      	b.n	800382c <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036a4:	9300      	str	r3, [sp, #0]
 80036a6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036a8:	2200      	movs	r2, #0
 80036aa:	496c      	ldr	r1, [pc, #432]	@ (800385c <HAL_I2C_Master_Receive+0x460>)
 80036ac:	68f8      	ldr	r0, [r7, #12]
 80036ae:	f000 fed1 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 80036b2:	4603      	mov	r3, r0
 80036b4:	2b00      	cmp	r3, #0
 80036b6:	d001      	beq.n	80036bc <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80036b8:	2301      	movs	r3, #1
 80036ba:	e0cb      	b.n	8003854 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80036bc:	68fb      	ldr	r3, [r7, #12]
 80036be:	681b      	ldr	r3, [r3, #0]
 80036c0:	681a      	ldr	r2, [r3, #0]
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	681b      	ldr	r3, [r3, #0]
 80036c6:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80036ca:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	691a      	ldr	r2, [r3, #16]
 80036d2:	68fb      	ldr	r3, [r7, #12]
 80036d4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036d6:	b2d2      	uxtb	r2, r2
 80036d8:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036da:	68fb      	ldr	r3, [r7, #12]
 80036dc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036de:	1c5a      	adds	r2, r3, #1
 80036e0:	68fb      	ldr	r3, [r7, #12]
 80036e2:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036e4:	68fb      	ldr	r3, [r7, #12]
 80036e6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036e8:	3b01      	subs	r3, #1
 80036ea:	b29a      	uxth	r2, r3
 80036ec:	68fb      	ldr	r3, [r7, #12]
 80036ee:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036f0:	68fb      	ldr	r3, [r7, #12]
 80036f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036f4:	b29b      	uxth	r3, r3
 80036f6:	3b01      	subs	r3, #1
 80036f8:	b29a      	uxth	r2, r3
 80036fa:	68fb      	ldr	r3, [r7, #12]
 80036fc:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003700:	9300      	str	r3, [sp, #0]
 8003702:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003704:	2200      	movs	r2, #0
 8003706:	4955      	ldr	r1, [pc, #340]	@ (800385c <HAL_I2C_Master_Receive+0x460>)
 8003708:	68f8      	ldr	r0, [r7, #12]
 800370a:	f000 fea3 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 800370e:	4603      	mov	r3, r0
 8003710:	2b00      	cmp	r3, #0
 8003712:	d001      	beq.n	8003718 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003714:	2301      	movs	r3, #1
 8003716:	e09d      	b.n	8003854 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003782:	b29b      	uxth	r3, r3
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800378c:	e04e      	b.n	800382c <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800378e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003790:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 8003792:	68f8      	ldr	r0, [r7, #12]
 8003794:	f001 f808 	bl	80047a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003798:	4603      	mov	r3, r0
 800379a:	2b00      	cmp	r3, #0
 800379c:	d001      	beq.n	80037a2 <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800379e:	2301      	movs	r3, #1
 80037a0:	e058      	b.n	8003854 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037a2:	68fb      	ldr	r3, [r7, #12]
 80037a4:	681b      	ldr	r3, [r3, #0]
 80037a6:	691a      	ldr	r2, [r3, #16]
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ac:	b2d2      	uxtb	r2, r2
 80037ae:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80037b0:	68fb      	ldr	r3, [r7, #12]
 80037b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037b4:	1c5a      	adds	r2, r3, #1
 80037b6:	68fb      	ldr	r3, [r7, #12]
 80037b8:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80037ba:	68fb      	ldr	r3, [r7, #12]
 80037bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037be:	3b01      	subs	r3, #1
 80037c0:	b29a      	uxth	r2, r3
 80037c2:	68fb      	ldr	r3, [r7, #12]
 80037c4:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037ca:	b29b      	uxth	r3, r3
 80037cc:	3b01      	subs	r3, #1
 80037ce:	b29a      	uxth	r2, r3
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80037d4:	68fb      	ldr	r3, [r7, #12]
 80037d6:	681b      	ldr	r3, [r3, #0]
 80037d8:	695b      	ldr	r3, [r3, #20]
 80037da:	f003 0304 	and.w	r3, r3, #4
 80037de:	2b04      	cmp	r3, #4
 80037e0:	d124      	bne.n	800382c <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80037e2:	68fb      	ldr	r3, [r7, #12]
 80037e4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037e6:	2b03      	cmp	r3, #3
 80037e8:	d107      	bne.n	80037fa <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037ea:	68fb      	ldr	r3, [r7, #12]
 80037ec:	681b      	ldr	r3, [r3, #0]
 80037ee:	681a      	ldr	r2, [r3, #0]
 80037f0:	68fb      	ldr	r3, [r7, #12]
 80037f2:	681b      	ldr	r3, [r3, #0]
 80037f4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037f8:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037fa:	68fb      	ldr	r3, [r7, #12]
 80037fc:	681b      	ldr	r3, [r3, #0]
 80037fe:	691a      	ldr	r2, [r3, #16]
 8003800:	68fb      	ldr	r3, [r7, #12]
 8003802:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003804:	b2d2      	uxtb	r2, r2
 8003806:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003808:	68fb      	ldr	r3, [r7, #12]
 800380a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800380c:	1c5a      	adds	r2, r3, #1
 800380e:	68fb      	ldr	r3, [r7, #12]
 8003810:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003812:	68fb      	ldr	r3, [r7, #12]
 8003814:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003816:	3b01      	subs	r3, #1
 8003818:	b29a      	uxth	r2, r3
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800381e:	68fb      	ldr	r3, [r7, #12]
 8003820:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003822:	b29b      	uxth	r3, r3
 8003824:	3b01      	subs	r3, #1
 8003826:	b29a      	uxth	r2, r3
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003830:	2b00      	cmp	r3, #0
 8003832:	f47f aeb6 	bne.w	80035a2 <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003836:	68fb      	ldr	r3, [r7, #12]
 8003838:	2220      	movs	r2, #32
 800383a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800383e:	68fb      	ldr	r3, [r7, #12]
 8003840:	2200      	movs	r2, #0
 8003842:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	2200      	movs	r2, #0
 800384a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800384e:	2300      	movs	r3, #0
 8003850:	e000      	b.n	8003854 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003852:	2302      	movs	r3, #2
  }
}
 8003854:	4618      	mov	r0, r3
 8003856:	3728      	adds	r7, #40	@ 0x28
 8003858:	46bd      	mov	sp, r7
 800385a:	bd80      	pop	{r7, pc}
 800385c:	00010004 	.word	0x00010004

08003860 <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003860:	b580      	push	{r7, lr}
 8003862:	b088      	sub	sp, #32
 8003864:	af02      	add	r7, sp, #8
 8003866:	60f8      	str	r0, [r7, #12]
 8003868:	4608      	mov	r0, r1
 800386a:	4611      	mov	r1, r2
 800386c:	461a      	mov	r2, r3
 800386e:	4603      	mov	r3, r0
 8003870:	817b      	strh	r3, [r7, #10]
 8003872:	460b      	mov	r3, r1
 8003874:	813b      	strh	r3, [r7, #8]
 8003876:	4613      	mov	r3, r2
 8003878:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 800387a:	f7ff f80b 	bl	8002894 <HAL_GetTick>
 800387e:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003880:	68fb      	ldr	r3, [r7, #12]
 8003882:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003886:	b2db      	uxtb	r3, r3
 8003888:	2b20      	cmp	r3, #32
 800388a:	f040 80d9 	bne.w	8003a40 <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800388e:	697b      	ldr	r3, [r7, #20]
 8003890:	9300      	str	r3, [sp, #0]
 8003892:	2319      	movs	r3, #25
 8003894:	2201      	movs	r2, #1
 8003896:	496d      	ldr	r1, [pc, #436]	@ (8003a4c <HAL_I2C_Mem_Write+0x1ec>)
 8003898:	68f8      	ldr	r0, [r7, #12]
 800389a:	f000 fddb 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 800389e:	4603      	mov	r3, r0
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	d001      	beq.n	80038a8 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 80038a4:	2302      	movs	r3, #2
 80038a6:	e0cc      	b.n	8003a42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80038a8:	68fb      	ldr	r3, [r7, #12]
 80038aa:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 80038ae:	2b01      	cmp	r3, #1
 80038b0:	d101      	bne.n	80038b6 <HAL_I2C_Mem_Write+0x56>
 80038b2:	2302      	movs	r3, #2
 80038b4:	e0c5      	b.n	8003a42 <HAL_I2C_Mem_Write+0x1e2>
 80038b6:	68fb      	ldr	r3, [r7, #12]
 80038b8:	2201      	movs	r2, #1
 80038ba:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80038be:	68fb      	ldr	r3, [r7, #12]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	f003 0301 	and.w	r3, r3, #1
 80038c8:	2b01      	cmp	r3, #1
 80038ca:	d007      	beq.n	80038dc <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80038cc:	68fb      	ldr	r3, [r7, #12]
 80038ce:	681b      	ldr	r3, [r3, #0]
 80038d0:	681a      	ldr	r2, [r3, #0]
 80038d2:	68fb      	ldr	r3, [r7, #12]
 80038d4:	681b      	ldr	r3, [r3, #0]
 80038d6:	f042 0201 	orr.w	r2, r2, #1
 80038da:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	681a      	ldr	r2, [r3, #0]
 80038e2:	68fb      	ldr	r3, [r7, #12]
 80038e4:	681b      	ldr	r3, [r3, #0]
 80038e6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80038ea:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	2221      	movs	r2, #33	@ 0x21
 80038f0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	2240      	movs	r2, #64	@ 0x40
 80038f8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80038fc:	68fb      	ldr	r3, [r7, #12]
 80038fe:	2200      	movs	r2, #0
 8003900:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003902:	68fb      	ldr	r3, [r7, #12]
 8003904:	6a3a      	ldr	r2, [r7, #32]
 8003906:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003908:	68fb      	ldr	r3, [r7, #12]
 800390a:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 800390c:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800390e:	68fb      	ldr	r3, [r7, #12]
 8003910:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	4a4d      	ldr	r2, [pc, #308]	@ (8003a50 <HAL_I2C_Mem_Write+0x1f0>)
 800391c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 800391e:	88f8      	ldrh	r0, [r7, #6]
 8003920:	893a      	ldrh	r2, [r7, #8]
 8003922:	8979      	ldrh	r1, [r7, #10]
 8003924:	697b      	ldr	r3, [r7, #20]
 8003926:	9301      	str	r3, [sp, #4]
 8003928:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800392a:	9300      	str	r3, [sp, #0]
 800392c:	4603      	mov	r3, r0
 800392e:	68f8      	ldr	r0, [r7, #12]
 8003930:	f000 fc12 	bl	8004158 <I2C_RequestMemoryWrite>
 8003934:	4603      	mov	r3, r0
 8003936:	2b00      	cmp	r3, #0
 8003938:	d052      	beq.n	80039e0 <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 800393a:	2301      	movs	r3, #1
 800393c:	e081      	b.n	8003a42 <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800393e:	697a      	ldr	r2, [r7, #20]
 8003940:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003942:	68f8      	ldr	r0, [r7, #12]
 8003944:	f000 fea0 	bl	8004688 <I2C_WaitOnTXEFlagUntilTimeout>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d00d      	beq.n	800396a <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800394e:	68fb      	ldr	r3, [r7, #12]
 8003950:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003952:	2b04      	cmp	r3, #4
 8003954:	d107      	bne.n	8003966 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003956:	68fb      	ldr	r3, [r7, #12]
 8003958:	681b      	ldr	r3, [r3, #0]
 800395a:	681a      	ldr	r2, [r3, #0]
 800395c:	68fb      	ldr	r3, [r7, #12]
 800395e:	681b      	ldr	r3, [r3, #0]
 8003960:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003964:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003966:	2301      	movs	r3, #1
 8003968:	e06b      	b.n	8003a42 <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 800396a:	68fb      	ldr	r3, [r7, #12]
 800396c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800396e:	781a      	ldrb	r2, [r3, #0]
 8003970:	68fb      	ldr	r3, [r7, #12]
 8003972:	681b      	ldr	r3, [r3, #0]
 8003974:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003976:	68fb      	ldr	r3, [r7, #12]
 8003978:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800397a:	1c5a      	adds	r2, r3, #1
 800397c:	68fb      	ldr	r3, [r7, #12]
 800397e:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003980:	68fb      	ldr	r3, [r7, #12]
 8003982:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003984:	3b01      	subs	r3, #1
 8003986:	b29a      	uxth	r2, r3
 8003988:	68fb      	ldr	r3, [r7, #12]
 800398a:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800398c:	68fb      	ldr	r3, [r7, #12]
 800398e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003990:	b29b      	uxth	r3, r3
 8003992:	3b01      	subs	r3, #1
 8003994:	b29a      	uxth	r2, r3
 8003996:	68fb      	ldr	r3, [r7, #12]
 8003998:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800399a:	68fb      	ldr	r3, [r7, #12]
 800399c:	681b      	ldr	r3, [r3, #0]
 800399e:	695b      	ldr	r3, [r3, #20]
 80039a0:	f003 0304 	and.w	r3, r3, #4
 80039a4:	2b04      	cmp	r3, #4
 80039a6:	d11b      	bne.n	80039e0 <HAL_I2C_Mem_Write+0x180>
 80039a8:	68fb      	ldr	r3, [r7, #12]
 80039aa:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ac:	2b00      	cmp	r3, #0
 80039ae:	d017      	beq.n	80039e0 <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 80039b0:	68fb      	ldr	r3, [r7, #12]
 80039b2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039b4:	781a      	ldrb	r2, [r3, #0]
 80039b6:	68fb      	ldr	r3, [r7, #12]
 80039b8:	681b      	ldr	r3, [r3, #0]
 80039ba:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 80039bc:	68fb      	ldr	r3, [r7, #12]
 80039be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80039c0:	1c5a      	adds	r2, r3, #1
 80039c2:	68fb      	ldr	r3, [r7, #12]
 80039c4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80039c6:	68fb      	ldr	r3, [r7, #12]
 80039c8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039ca:	3b01      	subs	r3, #1
 80039cc:	b29a      	uxth	r2, r3
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80039d2:	68fb      	ldr	r3, [r7, #12]
 80039d4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039d6:	b29b      	uxth	r3, r3
 80039d8:	3b01      	subs	r3, #1
 80039da:	b29a      	uxth	r2, r3
 80039dc:	68fb      	ldr	r3, [r7, #12]
 80039de:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80039e4:	2b00      	cmp	r3, #0
 80039e6:	d1aa      	bne.n	800393e <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80039e8:	697a      	ldr	r2, [r7, #20]
 80039ea:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80039ec:	68f8      	ldr	r0, [r7, #12]
 80039ee:	f000 fe93 	bl	8004718 <I2C_WaitOnBTFFlagUntilTimeout>
 80039f2:	4603      	mov	r3, r0
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d00d      	beq.n	8003a14 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80039f8:	68fb      	ldr	r3, [r7, #12]
 80039fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80039fc:	2b04      	cmp	r3, #4
 80039fe:	d107      	bne.n	8003a10 <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	681b      	ldr	r3, [r3, #0]
 8003a04:	681a      	ldr	r2, [r3, #0]
 8003a06:	68fb      	ldr	r3, [r7, #12]
 8003a08:	681b      	ldr	r3, [r3, #0]
 8003a0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a0e:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003a10:	2301      	movs	r3, #1
 8003a12:	e016      	b.n	8003a42 <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a14:	68fb      	ldr	r3, [r7, #12]
 8003a16:	681b      	ldr	r3, [r3, #0]
 8003a18:	681a      	ldr	r2, [r3, #0]
 8003a1a:	68fb      	ldr	r3, [r7, #12]
 8003a1c:	681b      	ldr	r3, [r3, #0]
 8003a1e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a22:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003a24:	68fb      	ldr	r3, [r7, #12]
 8003a26:	2220      	movs	r2, #32
 8003a28:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a2c:	68fb      	ldr	r3, [r7, #12]
 8003a2e:	2200      	movs	r2, #0
 8003a30:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003a34:	68fb      	ldr	r3, [r7, #12]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003a3c:	2300      	movs	r3, #0
 8003a3e:	e000      	b.n	8003a42 <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003a40:	2302      	movs	r3, #2
  }
}
 8003a42:	4618      	mov	r0, r3
 8003a44:	3718      	adds	r7, #24
 8003a46:	46bd      	mov	sp, r7
 8003a48:	bd80      	pop	{r7, pc}
 8003a4a:	bf00      	nop
 8003a4c:	00100002 	.word	0x00100002
 8003a50:	ffff0000 	.word	0xffff0000

08003a54 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	b08c      	sub	sp, #48	@ 0x30
 8003a58:	af02      	add	r7, sp, #8
 8003a5a:	60f8      	str	r0, [r7, #12]
 8003a5c:	4608      	mov	r0, r1
 8003a5e:	4611      	mov	r1, r2
 8003a60:	461a      	mov	r2, r3
 8003a62:	4603      	mov	r3, r0
 8003a64:	817b      	strh	r3, [r7, #10]
 8003a66:	460b      	mov	r3, r1
 8003a68:	813b      	strh	r3, [r7, #8]
 8003a6a:	4613      	mov	r3, r2
 8003a6c:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003a6e:	f7fe ff11 	bl	8002894 <HAL_GetTick>
 8003a72:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003a7a:	b2db      	uxtb	r3, r3
 8003a7c:	2b20      	cmp	r3, #32
 8003a7e:	f040 8214 	bne.w	8003eaa <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003a82:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003a84:	9300      	str	r3, [sp, #0]
 8003a86:	2319      	movs	r3, #25
 8003a88:	2201      	movs	r2, #1
 8003a8a:	497b      	ldr	r1, [pc, #492]	@ (8003c78 <HAL_I2C_Mem_Read+0x224>)
 8003a8c:	68f8      	ldr	r0, [r7, #12]
 8003a8e:	f000 fce1 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 8003a92:	4603      	mov	r3, r0
 8003a94:	2b00      	cmp	r3, #0
 8003a96:	d001      	beq.n	8003a9c <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003a98:	2302      	movs	r3, #2
 8003a9a:	e207      	b.n	8003eac <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003aa2:	2b01      	cmp	r3, #1
 8003aa4:	d101      	bne.n	8003aaa <HAL_I2C_Mem_Read+0x56>
 8003aa6:	2302      	movs	r3, #2
 8003aa8:	e200      	b.n	8003eac <HAL_I2C_Mem_Read+0x458>
 8003aaa:	68fb      	ldr	r3, [r7, #12]
 8003aac:	2201      	movs	r2, #1
 8003aae:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	f003 0301 	and.w	r3, r3, #1
 8003abc:	2b01      	cmp	r3, #1
 8003abe:	d007      	beq.n	8003ad0 <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003ac0:	68fb      	ldr	r3, [r7, #12]
 8003ac2:	681b      	ldr	r3, [r3, #0]
 8003ac4:	681a      	ldr	r2, [r3, #0]
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	681b      	ldr	r3, [r3, #0]
 8003aca:	f042 0201 	orr.w	r2, r2, #1
 8003ace:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ad0:	68fb      	ldr	r3, [r7, #12]
 8003ad2:	681b      	ldr	r3, [r3, #0]
 8003ad4:	681a      	ldr	r2, [r3, #0]
 8003ad6:	68fb      	ldr	r3, [r7, #12]
 8003ad8:	681b      	ldr	r3, [r3, #0]
 8003ada:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003ade:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003ae0:	68fb      	ldr	r3, [r7, #12]
 8003ae2:	2222      	movs	r2, #34	@ 0x22
 8003ae4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003ae8:	68fb      	ldr	r3, [r7, #12]
 8003aea:	2240      	movs	r2, #64	@ 0x40
 8003aec:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003af0:	68fb      	ldr	r3, [r7, #12]
 8003af2:	2200      	movs	r2, #0
 8003af4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003af6:	68fb      	ldr	r3, [r7, #12]
 8003af8:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003afa:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003b00:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003b02:	68fb      	ldr	r3, [r7, #12]
 8003b04:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003b06:	b29a      	uxth	r2, r3
 8003b08:	68fb      	ldr	r3, [r7, #12]
 8003b0a:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003b0c:	68fb      	ldr	r3, [r7, #12]
 8003b0e:	4a5b      	ldr	r2, [pc, #364]	@ (8003c7c <HAL_I2C_Mem_Read+0x228>)
 8003b10:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003b12:	88f8      	ldrh	r0, [r7, #6]
 8003b14:	893a      	ldrh	r2, [r7, #8]
 8003b16:	8979      	ldrh	r1, [r7, #10]
 8003b18:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b1a:	9301      	str	r3, [sp, #4]
 8003b1c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003b1e:	9300      	str	r3, [sp, #0]
 8003b20:	4603      	mov	r3, r0
 8003b22:	68f8      	ldr	r0, [r7, #12]
 8003b24:	f000 fbae 	bl	8004284 <I2C_RequestMemoryRead>
 8003b28:	4603      	mov	r3, r0
 8003b2a:	2b00      	cmp	r3, #0
 8003b2c:	d001      	beq.n	8003b32 <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003b2e:	2301      	movs	r3, #1
 8003b30:	e1bc      	b.n	8003eac <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003b32:	68fb      	ldr	r3, [r7, #12]
 8003b34:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b36:	2b00      	cmp	r3, #0
 8003b38:	d113      	bne.n	8003b62 <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b3a:	2300      	movs	r3, #0
 8003b3c:	623b      	str	r3, [r7, #32]
 8003b3e:	68fb      	ldr	r3, [r7, #12]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	695b      	ldr	r3, [r3, #20]
 8003b44:	623b      	str	r3, [r7, #32]
 8003b46:	68fb      	ldr	r3, [r7, #12]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	623b      	str	r3, [r7, #32]
 8003b4e:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b50:	68fb      	ldr	r3, [r7, #12]
 8003b52:	681b      	ldr	r3, [r3, #0]
 8003b54:	681a      	ldr	r2, [r3, #0]
 8003b56:	68fb      	ldr	r3, [r7, #12]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b5e:	601a      	str	r2, [r3, #0]
 8003b60:	e190      	b.n	8003e84 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003b62:	68fb      	ldr	r3, [r7, #12]
 8003b64:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003b66:	2b01      	cmp	r3, #1
 8003b68:	d11b      	bne.n	8003ba2 <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003b6a:	68fb      	ldr	r3, [r7, #12]
 8003b6c:	681b      	ldr	r3, [r3, #0]
 8003b6e:	681a      	ldr	r2, [r3, #0]
 8003b70:	68fb      	ldr	r3, [r7, #12]
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003b78:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003b7a:	2300      	movs	r3, #0
 8003b7c:	61fb      	str	r3, [r7, #28]
 8003b7e:	68fb      	ldr	r3, [r7, #12]
 8003b80:	681b      	ldr	r3, [r3, #0]
 8003b82:	695b      	ldr	r3, [r3, #20]
 8003b84:	61fb      	str	r3, [r7, #28]
 8003b86:	68fb      	ldr	r3, [r7, #12]
 8003b88:	681b      	ldr	r3, [r3, #0]
 8003b8a:	699b      	ldr	r3, [r3, #24]
 8003b8c:	61fb      	str	r3, [r7, #28]
 8003b8e:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b90:	68fb      	ldr	r3, [r7, #12]
 8003b92:	681b      	ldr	r3, [r3, #0]
 8003b94:	681a      	ldr	r2, [r3, #0]
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	681b      	ldr	r3, [r3, #0]
 8003b9a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b9e:	601a      	str	r2, [r3, #0]
 8003ba0:	e170      	b.n	8003e84 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003ba2:	68fb      	ldr	r3, [r7, #12]
 8003ba4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ba6:	2b02      	cmp	r3, #2
 8003ba8:	d11b      	bne.n	8003be2 <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003baa:	68fb      	ldr	r3, [r7, #12]
 8003bac:	681b      	ldr	r3, [r3, #0]
 8003bae:	681a      	ldr	r2, [r3, #0]
 8003bb0:	68fb      	ldr	r3, [r7, #12]
 8003bb2:	681b      	ldr	r3, [r3, #0]
 8003bb4:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003bb8:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bba:	68fb      	ldr	r3, [r7, #12]
 8003bbc:	681b      	ldr	r3, [r3, #0]
 8003bbe:	681a      	ldr	r2, [r3, #0]
 8003bc0:	68fb      	ldr	r3, [r7, #12]
 8003bc2:	681b      	ldr	r3, [r3, #0]
 8003bc4:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003bc8:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003bca:	2300      	movs	r3, #0
 8003bcc:	61bb      	str	r3, [r7, #24]
 8003bce:	68fb      	ldr	r3, [r7, #12]
 8003bd0:	681b      	ldr	r3, [r3, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	61bb      	str	r3, [r7, #24]
 8003bd6:	68fb      	ldr	r3, [r7, #12]
 8003bd8:	681b      	ldr	r3, [r3, #0]
 8003bda:	699b      	ldr	r3, [r3, #24]
 8003bdc:	61bb      	str	r3, [r7, #24]
 8003bde:	69bb      	ldr	r3, [r7, #24]
 8003be0:	e150      	b.n	8003e84 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003be2:	2300      	movs	r3, #0
 8003be4:	617b      	str	r3, [r7, #20]
 8003be6:	68fb      	ldr	r3, [r7, #12]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	695b      	ldr	r3, [r3, #20]
 8003bec:	617b      	str	r3, [r7, #20]
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	699b      	ldr	r3, [r3, #24]
 8003bf4:	617b      	str	r3, [r7, #20]
 8003bf6:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003bf8:	e144      	b.n	8003e84 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003bfa:	68fb      	ldr	r3, [r7, #12]
 8003bfc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003bfe:	2b03      	cmp	r3, #3
 8003c00:	f200 80f1 	bhi.w	8003de6 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003c04:	68fb      	ldr	r3, [r7, #12]
 8003c06:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c08:	2b01      	cmp	r3, #1
 8003c0a:	d123      	bne.n	8003c54 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003c0c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003c0e:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003c10:	68f8      	ldr	r0, [r7, #12]
 8003c12:	f000 fdc9 	bl	80047a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003c16:	4603      	mov	r3, r0
 8003c18:	2b00      	cmp	r3, #0
 8003c1a:	d001      	beq.n	8003c20 <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003c1c:	2301      	movs	r3, #1
 8003c1e:	e145      	b.n	8003eac <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c20:	68fb      	ldr	r3, [r7, #12]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	691a      	ldr	r2, [r3, #16]
 8003c26:	68fb      	ldr	r3, [r7, #12]
 8003c28:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c2a:	b2d2      	uxtb	r2, r2
 8003c2c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003c2e:	68fb      	ldr	r3, [r7, #12]
 8003c30:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c32:	1c5a      	adds	r2, r3, #1
 8003c34:	68fb      	ldr	r3, [r7, #12]
 8003c36:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003c38:	68fb      	ldr	r3, [r7, #12]
 8003c3a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c3c:	3b01      	subs	r3, #1
 8003c3e:	b29a      	uxth	r2, r3
 8003c40:	68fb      	ldr	r3, [r7, #12]
 8003c42:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003c44:	68fb      	ldr	r3, [r7, #12]
 8003c46:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003c48:	b29b      	uxth	r3, r3
 8003c4a:	3b01      	subs	r3, #1
 8003c4c:	b29a      	uxth	r2, r3
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003c52:	e117      	b.n	8003e84 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003c54:	68fb      	ldr	r3, [r7, #12]
 8003c56:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c58:	2b02      	cmp	r3, #2
 8003c5a:	d14e      	bne.n	8003cfa <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003c5c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c5e:	9300      	str	r3, [sp, #0]
 8003c60:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c62:	2200      	movs	r2, #0
 8003c64:	4906      	ldr	r1, [pc, #24]	@ (8003c80 <HAL_I2C_Mem_Read+0x22c>)
 8003c66:	68f8      	ldr	r0, [r7, #12]
 8003c68:	f000 fbf4 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 8003c6c:	4603      	mov	r3, r0
 8003c6e:	2b00      	cmp	r3, #0
 8003c70:	d008      	beq.n	8003c84 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003c72:	2301      	movs	r3, #1
 8003c74:	e11a      	b.n	8003eac <HAL_I2C_Mem_Read+0x458>
 8003c76:	bf00      	nop
 8003c78:	00100002 	.word	0x00100002
 8003c7c:	ffff0000 	.word	0xffff0000
 8003c80:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c84:	68fb      	ldr	r3, [r7, #12]
 8003c86:	681b      	ldr	r3, [r3, #0]
 8003c88:	681a      	ldr	r2, [r3, #0]
 8003c8a:	68fb      	ldr	r3, [r7, #12]
 8003c8c:	681b      	ldr	r3, [r3, #0]
 8003c8e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c92:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003c94:	68fb      	ldr	r3, [r7, #12]
 8003c96:	681b      	ldr	r3, [r3, #0]
 8003c98:	691a      	ldr	r2, [r3, #16]
 8003c9a:	68fb      	ldr	r3, [r7, #12]
 8003c9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003c9e:	b2d2      	uxtb	r2, r2
 8003ca0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003ca2:	68fb      	ldr	r3, [r7, #12]
 8003ca4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ca6:	1c5a      	adds	r2, r3, #1
 8003ca8:	68fb      	ldr	r3, [r7, #12]
 8003caa:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cb0:	3b01      	subs	r3, #1
 8003cb2:	b29a      	uxth	r2, r3
 8003cb4:	68fb      	ldr	r3, [r7, #12]
 8003cb6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cb8:	68fb      	ldr	r3, [r7, #12]
 8003cba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cbc:	b29b      	uxth	r3, r3
 8003cbe:	3b01      	subs	r3, #1
 8003cc0:	b29a      	uxth	r2, r3
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003cc6:	68fb      	ldr	r3, [r7, #12]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	691a      	ldr	r2, [r3, #16]
 8003ccc:	68fb      	ldr	r3, [r7, #12]
 8003cce:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd0:	b2d2      	uxtb	r2, r2
 8003cd2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003cd8:	1c5a      	adds	r2, r3, #1
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003cde:	68fb      	ldr	r3, [r7, #12]
 8003ce0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ce2:	3b01      	subs	r3, #1
 8003ce4:	b29a      	uxth	r2, r3
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003cea:	68fb      	ldr	r3, [r7, #12]
 8003cec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003cee:	b29b      	uxth	r3, r3
 8003cf0:	3b01      	subs	r3, #1
 8003cf2:	b29a      	uxth	r2, r3
 8003cf4:	68fb      	ldr	r3, [r7, #12]
 8003cf6:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003cf8:	e0c4      	b.n	8003e84 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003cfa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003cfc:	9300      	str	r3, [sp, #0]
 8003cfe:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d00:	2200      	movs	r2, #0
 8003d02:	496c      	ldr	r1, [pc, #432]	@ (8003eb4 <HAL_I2C_Mem_Read+0x460>)
 8003d04:	68f8      	ldr	r0, [r7, #12]
 8003d06:	f000 fba5 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 8003d0a:	4603      	mov	r3, r0
 8003d0c:	2b00      	cmp	r3, #0
 8003d0e:	d001      	beq.n	8003d14 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003d10:	2301      	movs	r3, #1
 8003d12:	e0cb      	b.n	8003eac <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003d14:	68fb      	ldr	r3, [r7, #12]
 8003d16:	681b      	ldr	r3, [r3, #0]
 8003d18:	681a      	ldr	r2, [r3, #0]
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	681b      	ldr	r3, [r3, #0]
 8003d1e:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003d22:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	681b      	ldr	r3, [r3, #0]
 8003d28:	691a      	ldr	r2, [r3, #16]
 8003d2a:	68fb      	ldr	r3, [r7, #12]
 8003d2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d2e:	b2d2      	uxtb	r2, r2
 8003d30:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d32:	68fb      	ldr	r3, [r7, #12]
 8003d34:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d36:	1c5a      	adds	r2, r3, #1
 8003d38:	68fb      	ldr	r3, [r7, #12]
 8003d3a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d3c:	68fb      	ldr	r3, [r7, #12]
 8003d3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d40:	3b01      	subs	r3, #1
 8003d42:	b29a      	uxth	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d48:	68fb      	ldr	r3, [r7, #12]
 8003d4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d4c:	b29b      	uxth	r3, r3
 8003d4e:	3b01      	subs	r3, #1
 8003d50:	b29a      	uxth	r2, r3
 8003d52:	68fb      	ldr	r3, [r7, #12]
 8003d54:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d56:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d58:	9300      	str	r3, [sp, #0]
 8003d5a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d5c:	2200      	movs	r2, #0
 8003d5e:	4955      	ldr	r1, [pc, #340]	@ (8003eb4 <HAL_I2C_Mem_Read+0x460>)
 8003d60:	68f8      	ldr	r0, [r7, #12]
 8003d62:	f000 fb77 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 8003d66:	4603      	mov	r3, r0
 8003d68:	2b00      	cmp	r3, #0
 8003d6a:	d001      	beq.n	8003d70 <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003d6c:	2301      	movs	r3, #1
 8003d6e:	e09d      	b.n	8003eac <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003de4:	e04e      	b.n	8003e84 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003de6:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003de8:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003dea:	68f8      	ldr	r0, [r7, #12]
 8003dec:	f000 fcdc 	bl	80047a8 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003df0:	4603      	mov	r3, r0
 8003df2:	2b00      	cmp	r3, #0
 8003df4:	d001      	beq.n	8003dfa <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003df6:	2301      	movs	r3, #1
 8003df8:	e058      	b.n	8003eac <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003dfa:	68fb      	ldr	r3, [r7, #12]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	691a      	ldr	r2, [r3, #16]
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e04:	b2d2      	uxtb	r2, r2
 8003e06:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003e08:	68fb      	ldr	r3, [r7, #12]
 8003e0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e0c:	1c5a      	adds	r2, r3, #1
 8003e0e:	68fb      	ldr	r3, [r7, #12]
 8003e10:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003e12:	68fb      	ldr	r3, [r7, #12]
 8003e14:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e16:	3b01      	subs	r3, #1
 8003e18:	b29a      	uxth	r2, r3
 8003e1a:	68fb      	ldr	r3, [r7, #12]
 8003e1c:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e22:	b29b      	uxth	r3, r3
 8003e24:	3b01      	subs	r3, #1
 8003e26:	b29a      	uxth	r2, r3
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003e2c:	68fb      	ldr	r3, [r7, #12]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	695b      	ldr	r3, [r3, #20]
 8003e32:	f003 0304 	and.w	r3, r3, #4
 8003e36:	2b04      	cmp	r3, #4
 8003e38:	d124      	bne.n	8003e84 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003e3a:	68fb      	ldr	r3, [r7, #12]
 8003e3c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e3e:	2b03      	cmp	r3, #3
 8003e40:	d107      	bne.n	8003e52 <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e42:	68fb      	ldr	r3, [r7, #12]
 8003e44:	681b      	ldr	r3, [r3, #0]
 8003e46:	681a      	ldr	r2, [r3, #0]
 8003e48:	68fb      	ldr	r3, [r7, #12]
 8003e4a:	681b      	ldr	r3, [r3, #0]
 8003e4c:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e50:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e52:	68fb      	ldr	r3, [r7, #12]
 8003e54:	681b      	ldr	r3, [r3, #0]
 8003e56:	691a      	ldr	r2, [r3, #16]
 8003e58:	68fb      	ldr	r3, [r7, #12]
 8003e5a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e5c:	b2d2      	uxtb	r2, r2
 8003e5e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e60:	68fb      	ldr	r3, [r7, #12]
 8003e62:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e64:	1c5a      	adds	r2, r3, #1
 8003e66:	68fb      	ldr	r3, [r7, #12]
 8003e68:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e6a:	68fb      	ldr	r3, [r7, #12]
 8003e6c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e6e:	3b01      	subs	r3, #1
 8003e70:	b29a      	uxth	r2, r3
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e76:	68fb      	ldr	r3, [r7, #12]
 8003e78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e7a:	b29b      	uxth	r3, r3
 8003e7c:	3b01      	subs	r3, #1
 8003e7e:	b29a      	uxth	r2, r3
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e88:	2b00      	cmp	r3, #0
 8003e8a:	f47f aeb6 	bne.w	8003bfa <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003e8e:	68fb      	ldr	r3, [r7, #12]
 8003e90:	2220      	movs	r2, #32
 8003e92:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e96:	68fb      	ldr	r3, [r7, #12]
 8003e98:	2200      	movs	r2, #0
 8003e9a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	2200      	movs	r2, #0
 8003ea2:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003ea6:	2300      	movs	r3, #0
 8003ea8:	e000      	b.n	8003eac <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003eaa:	2302      	movs	r3, #2
  }
}
 8003eac:	4618      	mov	r0, r3
 8003eae:	3728      	adds	r7, #40	@ 0x28
 8003eb0:	46bd      	mov	sp, r7
 8003eb2:	bd80      	pop	{r7, pc}
 8003eb4:	00010004 	.word	0x00010004

08003eb8 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003eb8:	b580      	push	{r7, lr}
 8003eba:	b088      	sub	sp, #32
 8003ebc:	af02      	add	r7, sp, #8
 8003ebe:	60f8      	str	r0, [r7, #12]
 8003ec0:	607a      	str	r2, [r7, #4]
 8003ec2:	603b      	str	r3, [r7, #0]
 8003ec4:	460b      	mov	r3, r1
 8003ec6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ec8:	68fb      	ldr	r3, [r7, #12]
 8003eca:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003ecc:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003ece:	697b      	ldr	r3, [r7, #20]
 8003ed0:	2b08      	cmp	r3, #8
 8003ed2:	d006      	beq.n	8003ee2 <I2C_MasterRequestWrite+0x2a>
 8003ed4:	697b      	ldr	r3, [r7, #20]
 8003ed6:	2b01      	cmp	r3, #1
 8003ed8:	d003      	beq.n	8003ee2 <I2C_MasterRequestWrite+0x2a>
 8003eda:	697b      	ldr	r3, [r7, #20]
 8003edc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ee0:	d108      	bne.n	8003ef4 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ee2:	68fb      	ldr	r3, [r7, #12]
 8003ee4:	681b      	ldr	r3, [r3, #0]
 8003ee6:	681a      	ldr	r2, [r3, #0]
 8003ee8:	68fb      	ldr	r3, [r7, #12]
 8003eea:	681b      	ldr	r3, [r3, #0]
 8003eec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ef0:	601a      	str	r2, [r3, #0]
 8003ef2:	e00b      	b.n	8003f0c <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003ef8:	2b12      	cmp	r3, #18
 8003efa:	d107      	bne.n	8003f0c <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003efc:	68fb      	ldr	r3, [r7, #12]
 8003efe:	681b      	ldr	r3, [r3, #0]
 8003f00:	681a      	ldr	r2, [r3, #0]
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	681b      	ldr	r3, [r3, #0]
 8003f06:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003f0a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003f0c:	683b      	ldr	r3, [r7, #0]
 8003f0e:	9300      	str	r3, [sp, #0]
 8003f10:	687b      	ldr	r3, [r7, #4]
 8003f12:	2200      	movs	r2, #0
 8003f14:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8003f18:	68f8      	ldr	r0, [r7, #12]
 8003f1a:	f000 fa9b 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 8003f1e:	4603      	mov	r3, r0
 8003f20:	2b00      	cmp	r3, #0
 8003f22:	d00d      	beq.n	8003f40 <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8003f24:	68fb      	ldr	r3, [r7, #12]
 8003f26:	681b      	ldr	r3, [r3, #0]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8003f2e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8003f32:	d103      	bne.n	8003f3c <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8003f3a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8003f3c:	2303      	movs	r3, #3
 8003f3e:	e035      	b.n	8003fac <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	691b      	ldr	r3, [r3, #16]
 8003f44:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8003f48:	d108      	bne.n	8003f5c <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8003f4a:	897b      	ldrh	r3, [r7, #10]
 8003f4c:	b2db      	uxtb	r3, r3
 8003f4e:	461a      	mov	r2, r3
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8003f58:	611a      	str	r2, [r3, #16]
 8003f5a:	e01b      	b.n	8003f94 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8003f5c:	897b      	ldrh	r3, [r7, #10]
 8003f5e:	11db      	asrs	r3, r3, #7
 8003f60:	b2db      	uxtb	r3, r3
 8003f62:	f003 0306 	and.w	r3, r3, #6
 8003f66:	b2db      	uxtb	r3, r3
 8003f68:	f063 030f 	orn	r3, r3, #15
 8003f6c:	b2da      	uxtb	r2, r3
 8003f6e:	68fb      	ldr	r3, [r7, #12]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8003f74:	683b      	ldr	r3, [r7, #0]
 8003f76:	687a      	ldr	r2, [r7, #4]
 8003f78:	490e      	ldr	r1, [pc, #56]	@ (8003fb4 <I2C_MasterRequestWrite+0xfc>)
 8003f7a:	68f8      	ldr	r0, [r7, #12]
 8003f7c:	f000 fae4 	bl	8004548 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003f80:	4603      	mov	r3, r0
 8003f82:	2b00      	cmp	r3, #0
 8003f84:	d001      	beq.n	8003f8a <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8003f86:	2301      	movs	r3, #1
 8003f88:	e010      	b.n	8003fac <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8003f8a:	897b      	ldrh	r3, [r7, #10]
 8003f8c:	b2da      	uxtb	r2, r3
 8003f8e:	68fb      	ldr	r3, [r7, #12]
 8003f90:	681b      	ldr	r3, [r3, #0]
 8003f92:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8003f94:	683b      	ldr	r3, [r7, #0]
 8003f96:	687a      	ldr	r2, [r7, #4]
 8003f98:	4907      	ldr	r1, [pc, #28]	@ (8003fb8 <I2C_MasterRequestWrite+0x100>)
 8003f9a:	68f8      	ldr	r0, [r7, #12]
 8003f9c:	f000 fad4 	bl	8004548 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8003fa0:	4603      	mov	r3, r0
 8003fa2:	2b00      	cmp	r3, #0
 8003fa4:	d001      	beq.n	8003faa <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8003fa6:	2301      	movs	r3, #1
 8003fa8:	e000      	b.n	8003fac <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8003faa:	2300      	movs	r3, #0
}
 8003fac:	4618      	mov	r0, r3
 8003fae:	3718      	adds	r7, #24
 8003fb0:	46bd      	mov	sp, r7
 8003fb2:	bd80      	pop	{r7, pc}
 8003fb4:	00010008 	.word	0x00010008
 8003fb8:	00010002 	.word	0x00010002

08003fbc <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fbc:	b580      	push	{r7, lr}
 8003fbe:	b088      	sub	sp, #32
 8003fc0:	af02      	add	r7, sp, #8
 8003fc2:	60f8      	str	r0, [r7, #12]
 8003fc4:	607a      	str	r2, [r7, #4]
 8003fc6:	603b      	str	r3, [r7, #0]
 8003fc8:	460b      	mov	r3, r1
 8003fca:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fcc:	68fb      	ldr	r3, [r7, #12]
 8003fce:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fd0:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003fe0:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fe2:	697b      	ldr	r3, [r7, #20]
 8003fe4:	2b08      	cmp	r3, #8
 8003fe6:	d006      	beq.n	8003ff6 <I2C_MasterRequestRead+0x3a>
 8003fe8:	697b      	ldr	r3, [r7, #20]
 8003fea:	2b01      	cmp	r3, #1
 8003fec:	d003      	beq.n	8003ff6 <I2C_MasterRequestRead+0x3a>
 8003fee:	697b      	ldr	r3, [r7, #20]
 8003ff0:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003ff4:	d108      	bne.n	8004008 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003ff6:	68fb      	ldr	r3, [r7, #12]
 8003ff8:	681b      	ldr	r3, [r3, #0]
 8003ffa:	681a      	ldr	r2, [r3, #0]
 8003ffc:	68fb      	ldr	r3, [r7, #12]
 8003ffe:	681b      	ldr	r3, [r3, #0]
 8004000:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004004:	601a      	str	r2, [r3, #0]
 8004006:	e00b      	b.n	8004020 <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 8004008:	68fb      	ldr	r3, [r7, #12]
 800400a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800400c:	2b11      	cmp	r3, #17
 800400e:	d107      	bne.n	8004020 <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681a      	ldr	r2, [r3, #0]
 8004016:	68fb      	ldr	r3, [r7, #12]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800401e:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004020:	683b      	ldr	r3, [r7, #0]
 8004022:	9300      	str	r3, [sp, #0]
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2200      	movs	r2, #0
 8004028:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800402c:	68f8      	ldr	r0, [r7, #12]
 800402e:	f000 fa11 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 8004032:	4603      	mov	r3, r0
 8004034:	2b00      	cmp	r3, #0
 8004036:	d00d      	beq.n	8004054 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004038:	68fb      	ldr	r3, [r7, #12]
 800403a:	681b      	ldr	r3, [r3, #0]
 800403c:	681b      	ldr	r3, [r3, #0]
 800403e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004042:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004046:	d103      	bne.n	8004050 <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004048:	68fb      	ldr	r3, [r7, #12]
 800404a:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800404e:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004050:	2303      	movs	r3, #3
 8004052:	e079      	b.n	8004148 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004054:	68fb      	ldr	r3, [r7, #12]
 8004056:	691b      	ldr	r3, [r3, #16]
 8004058:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 800405c:	d108      	bne.n	8004070 <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800405e:	897b      	ldrh	r3, [r7, #10]
 8004060:	b2db      	uxtb	r3, r3
 8004062:	f043 0301 	orr.w	r3, r3, #1
 8004066:	b2da      	uxtb	r2, r3
 8004068:	68fb      	ldr	r3, [r7, #12]
 800406a:	681b      	ldr	r3, [r3, #0]
 800406c:	611a      	str	r2, [r3, #16]
 800406e:	e05f      	b.n	8004130 <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004070:	897b      	ldrh	r3, [r7, #10]
 8004072:	11db      	asrs	r3, r3, #7
 8004074:	b2db      	uxtb	r3, r3
 8004076:	f003 0306 	and.w	r3, r3, #6
 800407a:	b2db      	uxtb	r3, r3
 800407c:	f063 030f 	orn	r3, r3, #15
 8004080:	b2da      	uxtb	r2, r3
 8004082:	68fb      	ldr	r3, [r7, #12]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004088:	683b      	ldr	r3, [r7, #0]
 800408a:	687a      	ldr	r2, [r7, #4]
 800408c:	4930      	ldr	r1, [pc, #192]	@ (8004150 <I2C_MasterRequestRead+0x194>)
 800408e:	68f8      	ldr	r0, [r7, #12]
 8004090:	f000 fa5a 	bl	8004548 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004094:	4603      	mov	r3, r0
 8004096:	2b00      	cmp	r3, #0
 8004098:	d001      	beq.n	800409e <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 800409a:	2301      	movs	r3, #1
 800409c:	e054      	b.n	8004148 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800409e:	897b      	ldrh	r3, [r7, #10]
 80040a0:	b2da      	uxtb	r2, r3
 80040a2:	68fb      	ldr	r3, [r7, #12]
 80040a4:	681b      	ldr	r3, [r3, #0]
 80040a6:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80040a8:	683b      	ldr	r3, [r7, #0]
 80040aa:	687a      	ldr	r2, [r7, #4]
 80040ac:	4929      	ldr	r1, [pc, #164]	@ (8004154 <I2C_MasterRequestRead+0x198>)
 80040ae:	68f8      	ldr	r0, [r7, #12]
 80040b0:	f000 fa4a 	bl	8004548 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80040b4:	4603      	mov	r3, r0
 80040b6:	2b00      	cmp	r3, #0
 80040b8:	d001      	beq.n	80040be <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80040ba:	2301      	movs	r3, #1
 80040bc:	e044      	b.n	8004148 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80040be:	2300      	movs	r3, #0
 80040c0:	613b      	str	r3, [r7, #16]
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	681b      	ldr	r3, [r3, #0]
 80040c6:	695b      	ldr	r3, [r3, #20]
 80040c8:	613b      	str	r3, [r7, #16]
 80040ca:	68fb      	ldr	r3, [r7, #12]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	699b      	ldr	r3, [r3, #24]
 80040d0:	613b      	str	r3, [r7, #16]
 80040d2:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	681b      	ldr	r3, [r3, #0]
 80040d8:	681a      	ldr	r2, [r3, #0]
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040e2:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80040e4:	683b      	ldr	r3, [r7, #0]
 80040e6:	9300      	str	r3, [sp, #0]
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	2200      	movs	r2, #0
 80040ec:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80040f0:	68f8      	ldr	r0, [r7, #12]
 80040f2:	f000 f9af 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 80040f6:	4603      	mov	r3, r0
 80040f8:	2b00      	cmp	r3, #0
 80040fa:	d00d      	beq.n	8004118 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004106:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800410a:	d103      	bne.n	8004114 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 800410c:	68fb      	ldr	r3, [r7, #12]
 800410e:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004112:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004114:	2303      	movs	r3, #3
 8004116:	e017      	b.n	8004148 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004118:	897b      	ldrh	r3, [r7, #10]
 800411a:	11db      	asrs	r3, r3, #7
 800411c:	b2db      	uxtb	r3, r3
 800411e:	f003 0306 	and.w	r3, r3, #6
 8004122:	b2db      	uxtb	r3, r3
 8004124:	f063 030e 	orn	r3, r3, #14
 8004128:	b2da      	uxtb	r2, r3
 800412a:	68fb      	ldr	r3, [r7, #12]
 800412c:	681b      	ldr	r3, [r3, #0]
 800412e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004130:	683b      	ldr	r3, [r7, #0]
 8004132:	687a      	ldr	r2, [r7, #4]
 8004134:	4907      	ldr	r1, [pc, #28]	@ (8004154 <I2C_MasterRequestRead+0x198>)
 8004136:	68f8      	ldr	r0, [r7, #12]
 8004138:	f000 fa06 	bl	8004548 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800413c:	4603      	mov	r3, r0
 800413e:	2b00      	cmp	r3, #0
 8004140:	d001      	beq.n	8004146 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 8004142:	2301      	movs	r3, #1
 8004144:	e000      	b.n	8004148 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004146:	2300      	movs	r3, #0
}
 8004148:	4618      	mov	r0, r3
 800414a:	3718      	adds	r7, #24
 800414c:	46bd      	mov	sp, r7
 800414e:	bd80      	pop	{r7, pc}
 8004150:	00010008 	.word	0x00010008
 8004154:	00010002 	.word	0x00010002

08004158 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004158:	b580      	push	{r7, lr}
 800415a:	b088      	sub	sp, #32
 800415c:	af02      	add	r7, sp, #8
 800415e:	60f8      	str	r0, [r7, #12]
 8004160:	4608      	mov	r0, r1
 8004162:	4611      	mov	r1, r2
 8004164:	461a      	mov	r2, r3
 8004166:	4603      	mov	r3, r0
 8004168:	817b      	strh	r3, [r7, #10]
 800416a:	460b      	mov	r3, r1
 800416c:	813b      	strh	r3, [r7, #8]
 800416e:	4613      	mov	r3, r2
 8004170:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004172:	68fb      	ldr	r3, [r7, #12]
 8004174:	681b      	ldr	r3, [r3, #0]
 8004176:	681a      	ldr	r2, [r3, #0]
 8004178:	68fb      	ldr	r3, [r7, #12]
 800417a:	681b      	ldr	r3, [r3, #0]
 800417c:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8004180:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8004182:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004184:	9300      	str	r3, [sp, #0]
 8004186:	6a3b      	ldr	r3, [r7, #32]
 8004188:	2200      	movs	r2, #0
 800418a:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800418e:	68f8      	ldr	r0, [r7, #12]
 8004190:	f000 f960 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 8004194:	4603      	mov	r3, r0
 8004196:	2b00      	cmp	r3, #0
 8004198:	d00d      	beq.n	80041b6 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 800419a:	68fb      	ldr	r3, [r7, #12]
 800419c:	681b      	ldr	r3, [r3, #0]
 800419e:	681b      	ldr	r3, [r3, #0]
 80041a0:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041a4:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041a8:	d103      	bne.n	80041b2 <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041aa:	68fb      	ldr	r3, [r7, #12]
 80041ac:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041b0:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80041b2:	2303      	movs	r3, #3
 80041b4:	e05f      	b.n	8004276 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80041b6:	897b      	ldrh	r3, [r7, #10]
 80041b8:	b2db      	uxtb	r3, r3
 80041ba:	461a      	mov	r2, r3
 80041bc:	68fb      	ldr	r3, [r7, #12]
 80041be:	681b      	ldr	r3, [r3, #0]
 80041c0:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80041c4:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80041c6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80041c8:	6a3a      	ldr	r2, [r7, #32]
 80041ca:	492d      	ldr	r1, [pc, #180]	@ (8004280 <I2C_RequestMemoryWrite+0x128>)
 80041cc:	68f8      	ldr	r0, [r7, #12]
 80041ce:	f000 f9bb 	bl	8004548 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041d2:	4603      	mov	r3, r0
 80041d4:	2b00      	cmp	r3, #0
 80041d6:	d001      	beq.n	80041dc <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80041d8:	2301      	movs	r3, #1
 80041da:	e04c      	b.n	8004276 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041dc:	2300      	movs	r3, #0
 80041de:	617b      	str	r3, [r7, #20]
 80041e0:	68fb      	ldr	r3, [r7, #12]
 80041e2:	681b      	ldr	r3, [r3, #0]
 80041e4:	695b      	ldr	r3, [r3, #20]
 80041e6:	617b      	str	r3, [r7, #20]
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	699b      	ldr	r3, [r3, #24]
 80041ee:	617b      	str	r3, [r7, #20]
 80041f0:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80041f2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80041f4:	6a39      	ldr	r1, [r7, #32]
 80041f6:	68f8      	ldr	r0, [r7, #12]
 80041f8:	f000 fa46 	bl	8004688 <I2C_WaitOnTXEFlagUntilTimeout>
 80041fc:	4603      	mov	r3, r0
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d00d      	beq.n	800421e <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004202:	68fb      	ldr	r3, [r7, #12]
 8004204:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004206:	2b04      	cmp	r3, #4
 8004208:	d107      	bne.n	800421a <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	681a      	ldr	r2, [r3, #0]
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	681b      	ldr	r3, [r3, #0]
 8004214:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004218:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 800421a:	2301      	movs	r3, #1
 800421c:	e02b      	b.n	8004276 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800421e:	88fb      	ldrh	r3, [r7, #6]
 8004220:	2b01      	cmp	r3, #1
 8004222:	d105      	bne.n	8004230 <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004224:	893b      	ldrh	r3, [r7, #8]
 8004226:	b2da      	uxtb	r2, r3
 8004228:	68fb      	ldr	r3, [r7, #12]
 800422a:	681b      	ldr	r3, [r3, #0]
 800422c:	611a      	str	r2, [r3, #16]
 800422e:	e021      	b.n	8004274 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004230:	893b      	ldrh	r3, [r7, #8]
 8004232:	0a1b      	lsrs	r3, r3, #8
 8004234:	b29b      	uxth	r3, r3
 8004236:	b2da      	uxtb	r2, r3
 8004238:	68fb      	ldr	r3, [r7, #12]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800423e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004240:	6a39      	ldr	r1, [r7, #32]
 8004242:	68f8      	ldr	r0, [r7, #12]
 8004244:	f000 fa20 	bl	8004688 <I2C_WaitOnTXEFlagUntilTimeout>
 8004248:	4603      	mov	r3, r0
 800424a:	2b00      	cmp	r3, #0
 800424c:	d00d      	beq.n	800426a <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800424e:	68fb      	ldr	r3, [r7, #12]
 8004250:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004252:	2b04      	cmp	r3, #4
 8004254:	d107      	bne.n	8004266 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004256:	68fb      	ldr	r3, [r7, #12]
 8004258:	681b      	ldr	r3, [r3, #0]
 800425a:	681a      	ldr	r2, [r3, #0]
 800425c:	68fb      	ldr	r3, [r7, #12]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004264:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004266:	2301      	movs	r3, #1
 8004268:	e005      	b.n	8004276 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800426a:	893b      	ldrh	r3, [r7, #8]
 800426c:	b2da      	uxtb	r2, r3
 800426e:	68fb      	ldr	r3, [r7, #12]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004274:	2300      	movs	r3, #0
}
 8004276:	4618      	mov	r0, r3
 8004278:	3718      	adds	r7, #24
 800427a:	46bd      	mov	sp, r7
 800427c:	bd80      	pop	{r7, pc}
 800427e:	bf00      	nop
 8004280:	00010002 	.word	0x00010002

08004284 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004284:	b580      	push	{r7, lr}
 8004286:	b088      	sub	sp, #32
 8004288:	af02      	add	r7, sp, #8
 800428a:	60f8      	str	r0, [r7, #12]
 800428c:	4608      	mov	r0, r1
 800428e:	4611      	mov	r1, r2
 8004290:	461a      	mov	r2, r3
 8004292:	4603      	mov	r3, r0
 8004294:	817b      	strh	r3, [r7, #10]
 8004296:	460b      	mov	r3, r1
 8004298:	813b      	strh	r3, [r7, #8]
 800429a:	4613      	mov	r3, r2
 800429c:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800429e:	68fb      	ldr	r3, [r7, #12]
 80042a0:	681b      	ldr	r3, [r3, #0]
 80042a2:	681a      	ldr	r2, [r3, #0]
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80042ac:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042ae:	68fb      	ldr	r3, [r7, #12]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	681a      	ldr	r2, [r3, #0]
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80042bc:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80042be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042c0:	9300      	str	r3, [sp, #0]
 80042c2:	6a3b      	ldr	r3, [r7, #32]
 80042c4:	2200      	movs	r2, #0
 80042c6:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80042ca:	68f8      	ldr	r0, [r7, #12]
 80042cc:	f000 f8c2 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 80042d0:	4603      	mov	r3, r0
 80042d2:	2b00      	cmp	r3, #0
 80042d4:	d00d      	beq.n	80042f2 <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80042d6:	68fb      	ldr	r3, [r7, #12]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	681b      	ldr	r3, [r3, #0]
 80042dc:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80042e0:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80042e4:	d103      	bne.n	80042ee <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80042ec:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80042ee:	2303      	movs	r3, #3
 80042f0:	e0aa      	b.n	8004448 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042f2:	897b      	ldrh	r3, [r7, #10]
 80042f4:	b2db      	uxtb	r3, r3
 80042f6:	461a      	mov	r2, r3
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	681b      	ldr	r3, [r3, #0]
 80042fc:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004300:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004302:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004304:	6a3a      	ldr	r2, [r7, #32]
 8004306:	4952      	ldr	r1, [pc, #328]	@ (8004450 <I2C_RequestMemoryRead+0x1cc>)
 8004308:	68f8      	ldr	r0, [r7, #12]
 800430a:	f000 f91d 	bl	8004548 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800430e:	4603      	mov	r3, r0
 8004310:	2b00      	cmp	r3, #0
 8004312:	d001      	beq.n	8004318 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004314:	2301      	movs	r3, #1
 8004316:	e097      	b.n	8004448 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004318:	2300      	movs	r3, #0
 800431a:	617b      	str	r3, [r7, #20]
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	617b      	str	r3, [r7, #20]
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	617b      	str	r3, [r7, #20]
 800432c:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800432e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004330:	6a39      	ldr	r1, [r7, #32]
 8004332:	68f8      	ldr	r0, [r7, #12]
 8004334:	f000 f9a8 	bl	8004688 <I2C_WaitOnTXEFlagUntilTimeout>
 8004338:	4603      	mov	r3, r0
 800433a:	2b00      	cmp	r3, #0
 800433c:	d00d      	beq.n	800435a <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800433e:	68fb      	ldr	r3, [r7, #12]
 8004340:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004342:	2b04      	cmp	r3, #4
 8004344:	d107      	bne.n	8004356 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004346:	68fb      	ldr	r3, [r7, #12]
 8004348:	681b      	ldr	r3, [r3, #0]
 800434a:	681a      	ldr	r2, [r3, #0]
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	681b      	ldr	r3, [r3, #0]
 8004350:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004354:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004356:	2301      	movs	r3, #1
 8004358:	e076      	b.n	8004448 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800435a:	88fb      	ldrh	r3, [r7, #6]
 800435c:	2b01      	cmp	r3, #1
 800435e:	d105      	bne.n	800436c <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004360:	893b      	ldrh	r3, [r7, #8]
 8004362:	b2da      	uxtb	r2, r3
 8004364:	68fb      	ldr	r3, [r7, #12]
 8004366:	681b      	ldr	r3, [r3, #0]
 8004368:	611a      	str	r2, [r3, #16]
 800436a:	e021      	b.n	80043b0 <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800436c:	893b      	ldrh	r3, [r7, #8]
 800436e:	0a1b      	lsrs	r3, r3, #8
 8004370:	b29b      	uxth	r3, r3
 8004372:	b2da      	uxtb	r2, r3
 8004374:	68fb      	ldr	r3, [r7, #12]
 8004376:	681b      	ldr	r3, [r3, #0]
 8004378:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800437a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800437c:	6a39      	ldr	r1, [r7, #32]
 800437e:	68f8      	ldr	r0, [r7, #12]
 8004380:	f000 f982 	bl	8004688 <I2C_WaitOnTXEFlagUntilTimeout>
 8004384:	4603      	mov	r3, r0
 8004386:	2b00      	cmp	r3, #0
 8004388:	d00d      	beq.n	80043a6 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800438e:	2b04      	cmp	r3, #4
 8004390:	d107      	bne.n	80043a2 <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004392:	68fb      	ldr	r3, [r7, #12]
 8004394:	681b      	ldr	r3, [r3, #0]
 8004396:	681a      	ldr	r2, [r3, #0]
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043a0:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 80043a2:	2301      	movs	r3, #1
 80043a4:	e050      	b.n	8004448 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 80043a6:	893b      	ldrh	r3, [r7, #8]
 80043a8:	b2da      	uxtb	r2, r3
 80043aa:	68fb      	ldr	r3, [r7, #12]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80043b0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80043b2:	6a39      	ldr	r1, [r7, #32]
 80043b4:	68f8      	ldr	r0, [r7, #12]
 80043b6:	f000 f967 	bl	8004688 <I2C_WaitOnTXEFlagUntilTimeout>
 80043ba:	4603      	mov	r3, r0
 80043bc:	2b00      	cmp	r3, #0
 80043be:	d00d      	beq.n	80043dc <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80043c0:	68fb      	ldr	r3, [r7, #12]
 80043c2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80043c4:	2b04      	cmp	r3, #4
 80043c6:	d107      	bne.n	80043d8 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043c8:	68fb      	ldr	r3, [r7, #12]
 80043ca:	681b      	ldr	r3, [r3, #0]
 80043cc:	681a      	ldr	r2, [r3, #0]
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	681b      	ldr	r3, [r3, #0]
 80043d2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80043d6:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80043d8:	2301      	movs	r3, #1
 80043da:	e035      	b.n	8004448 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80043dc:	68fb      	ldr	r3, [r7, #12]
 80043de:	681b      	ldr	r3, [r3, #0]
 80043e0:	681a      	ldr	r2, [r3, #0]
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043ea:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043ec:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ee:	9300      	str	r3, [sp, #0]
 80043f0:	6a3b      	ldr	r3, [r7, #32]
 80043f2:	2200      	movs	r2, #0
 80043f4:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043f8:	68f8      	ldr	r0, [r7, #12]
 80043fa:	f000 f82b 	bl	8004454 <I2C_WaitOnFlagUntilTimeout>
 80043fe:	4603      	mov	r3, r0
 8004400:	2b00      	cmp	r3, #0
 8004402:	d00d      	beq.n	8004420 <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	681b      	ldr	r3, [r3, #0]
 800440a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800440e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004412:	d103      	bne.n	800441c <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004414:	68fb      	ldr	r3, [r7, #12]
 8004416:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800441a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800441c:	2303      	movs	r3, #3
 800441e:	e013      	b.n	8004448 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 8004420:	897b      	ldrh	r3, [r7, #10]
 8004422:	b2db      	uxtb	r3, r3
 8004424:	f043 0301 	orr.w	r3, r3, #1
 8004428:	b2da      	uxtb	r2, r3
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004430:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004432:	6a3a      	ldr	r2, [r7, #32]
 8004434:	4906      	ldr	r1, [pc, #24]	@ (8004450 <I2C_RequestMemoryRead+0x1cc>)
 8004436:	68f8      	ldr	r0, [r7, #12]
 8004438:	f000 f886 	bl	8004548 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800443c:	4603      	mov	r3, r0
 800443e:	2b00      	cmp	r3, #0
 8004440:	d001      	beq.n	8004446 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e000      	b.n	8004448 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004446:	2300      	movs	r3, #0
}
 8004448:	4618      	mov	r0, r3
 800444a:	3718      	adds	r7, #24
 800444c:	46bd      	mov	sp, r7
 800444e:	bd80      	pop	{r7, pc}
 8004450:	00010002 	.word	0x00010002

08004454 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004454:	b580      	push	{r7, lr}
 8004456:	b084      	sub	sp, #16
 8004458:	af00      	add	r7, sp, #0
 800445a:	60f8      	str	r0, [r7, #12]
 800445c:	60b9      	str	r1, [r7, #8]
 800445e:	603b      	str	r3, [r7, #0]
 8004460:	4613      	mov	r3, r2
 8004462:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004464:	e048      	b.n	80044f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004466:	683b      	ldr	r3, [r7, #0]
 8004468:	f1b3 3fff 	cmp.w	r3, #4294967295
 800446c:	d044      	beq.n	80044f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800446e:	f7fe fa11 	bl	8002894 <HAL_GetTick>
 8004472:	4602      	mov	r2, r0
 8004474:	69bb      	ldr	r3, [r7, #24]
 8004476:	1ad3      	subs	r3, r2, r3
 8004478:	683a      	ldr	r2, [r7, #0]
 800447a:	429a      	cmp	r2, r3
 800447c:	d302      	bcc.n	8004484 <I2C_WaitOnFlagUntilTimeout+0x30>
 800447e:	683b      	ldr	r3, [r7, #0]
 8004480:	2b00      	cmp	r3, #0
 8004482:	d139      	bne.n	80044f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004484:	68bb      	ldr	r3, [r7, #8]
 8004486:	0c1b      	lsrs	r3, r3, #16
 8004488:	b2db      	uxtb	r3, r3
 800448a:	2b01      	cmp	r3, #1
 800448c:	d10d      	bne.n	80044aa <I2C_WaitOnFlagUntilTimeout+0x56>
 800448e:	68fb      	ldr	r3, [r7, #12]
 8004490:	681b      	ldr	r3, [r3, #0]
 8004492:	695b      	ldr	r3, [r3, #20]
 8004494:	43da      	mvns	r2, r3
 8004496:	68bb      	ldr	r3, [r7, #8]
 8004498:	4013      	ands	r3, r2
 800449a:	b29b      	uxth	r3, r3
 800449c:	2b00      	cmp	r3, #0
 800449e:	bf0c      	ite	eq
 80044a0:	2301      	moveq	r3, #1
 80044a2:	2300      	movne	r3, #0
 80044a4:	b2db      	uxtb	r3, r3
 80044a6:	461a      	mov	r2, r3
 80044a8:	e00c      	b.n	80044c4 <I2C_WaitOnFlagUntilTimeout+0x70>
 80044aa:	68fb      	ldr	r3, [r7, #12]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	699b      	ldr	r3, [r3, #24]
 80044b0:	43da      	mvns	r2, r3
 80044b2:	68bb      	ldr	r3, [r7, #8]
 80044b4:	4013      	ands	r3, r2
 80044b6:	b29b      	uxth	r3, r3
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	bf0c      	ite	eq
 80044bc:	2301      	moveq	r3, #1
 80044be:	2300      	movne	r3, #0
 80044c0:	b2db      	uxtb	r3, r3
 80044c2:	461a      	mov	r2, r3
 80044c4:	79fb      	ldrb	r3, [r7, #7]
 80044c6:	429a      	cmp	r2, r3
 80044c8:	d116      	bne.n	80044f8 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80044ca:	68fb      	ldr	r3, [r7, #12]
 80044cc:	2200      	movs	r2, #0
 80044ce:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80044d0:	68fb      	ldr	r3, [r7, #12]
 80044d2:	2220      	movs	r2, #32
 80044d4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80044d8:	68fb      	ldr	r3, [r7, #12]
 80044da:	2200      	movs	r2, #0
 80044dc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80044e0:	68fb      	ldr	r3, [r7, #12]
 80044e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044e4:	f043 0220 	orr.w	r2, r3, #32
 80044e8:	68fb      	ldr	r3, [r7, #12]
 80044ea:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80044ec:	68fb      	ldr	r3, [r7, #12]
 80044ee:	2200      	movs	r2, #0
 80044f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80044f4:	2301      	movs	r3, #1
 80044f6:	e023      	b.n	8004540 <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80044f8:	68bb      	ldr	r3, [r7, #8]
 80044fa:	0c1b      	lsrs	r3, r3, #16
 80044fc:	b2db      	uxtb	r3, r3
 80044fe:	2b01      	cmp	r3, #1
 8004500:	d10d      	bne.n	800451e <I2C_WaitOnFlagUntilTimeout+0xca>
 8004502:	68fb      	ldr	r3, [r7, #12]
 8004504:	681b      	ldr	r3, [r3, #0]
 8004506:	695b      	ldr	r3, [r3, #20]
 8004508:	43da      	mvns	r2, r3
 800450a:	68bb      	ldr	r3, [r7, #8]
 800450c:	4013      	ands	r3, r2
 800450e:	b29b      	uxth	r3, r3
 8004510:	2b00      	cmp	r3, #0
 8004512:	bf0c      	ite	eq
 8004514:	2301      	moveq	r3, #1
 8004516:	2300      	movne	r3, #0
 8004518:	b2db      	uxtb	r3, r3
 800451a:	461a      	mov	r2, r3
 800451c:	e00c      	b.n	8004538 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800451e:	68fb      	ldr	r3, [r7, #12]
 8004520:	681b      	ldr	r3, [r3, #0]
 8004522:	699b      	ldr	r3, [r3, #24]
 8004524:	43da      	mvns	r2, r3
 8004526:	68bb      	ldr	r3, [r7, #8]
 8004528:	4013      	ands	r3, r2
 800452a:	b29b      	uxth	r3, r3
 800452c:	2b00      	cmp	r3, #0
 800452e:	bf0c      	ite	eq
 8004530:	2301      	moveq	r3, #1
 8004532:	2300      	movne	r3, #0
 8004534:	b2db      	uxtb	r3, r3
 8004536:	461a      	mov	r2, r3
 8004538:	79fb      	ldrb	r3, [r7, #7]
 800453a:	429a      	cmp	r2, r3
 800453c:	d093      	beq.n	8004466 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800453e:	2300      	movs	r3, #0
}
 8004540:	4618      	mov	r0, r3
 8004542:	3710      	adds	r7, #16
 8004544:	46bd      	mov	sp, r7
 8004546:	bd80      	pop	{r7, pc}

08004548 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004548:	b580      	push	{r7, lr}
 800454a:	b084      	sub	sp, #16
 800454c:	af00      	add	r7, sp, #0
 800454e:	60f8      	str	r0, [r7, #12]
 8004550:	60b9      	str	r1, [r7, #8]
 8004552:	607a      	str	r2, [r7, #4]
 8004554:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004556:	e071      	b.n	800463c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004558:	68fb      	ldr	r3, [r7, #12]
 800455a:	681b      	ldr	r3, [r3, #0]
 800455c:	695b      	ldr	r3, [r3, #20]
 800455e:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004562:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004566:	d123      	bne.n	80045b0 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004568:	68fb      	ldr	r3, [r7, #12]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	681a      	ldr	r2, [r3, #0]
 800456e:	68fb      	ldr	r3, [r7, #12]
 8004570:	681b      	ldr	r3, [r3, #0]
 8004572:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004576:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004578:	68fb      	ldr	r3, [r7, #12]
 800457a:	681b      	ldr	r3, [r3, #0]
 800457c:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004580:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 8004582:	68fb      	ldr	r3, [r7, #12]
 8004584:	2200      	movs	r2, #0
 8004586:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004588:	68fb      	ldr	r3, [r7, #12]
 800458a:	2220      	movs	r2, #32
 800458c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004590:	68fb      	ldr	r3, [r7, #12]
 8004592:	2200      	movs	r2, #0
 8004594:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004598:	68fb      	ldr	r3, [r7, #12]
 800459a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800459c:	f043 0204 	orr.w	r2, r3, #4
 80045a0:	68fb      	ldr	r3, [r7, #12]
 80045a2:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80045a4:	68fb      	ldr	r3, [r7, #12]
 80045a6:	2200      	movs	r2, #0
 80045a8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80045ac:	2301      	movs	r3, #1
 80045ae:	e067      	b.n	8004680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80045b0:	687b      	ldr	r3, [r7, #4]
 80045b2:	f1b3 3fff 	cmp.w	r3, #4294967295
 80045b6:	d041      	beq.n	800463c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80045b8:	f7fe f96c 	bl	8002894 <HAL_GetTick>
 80045bc:	4602      	mov	r2, r0
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	1ad3      	subs	r3, r2, r3
 80045c2:	687a      	ldr	r2, [r7, #4]
 80045c4:	429a      	cmp	r2, r3
 80045c6:	d302      	bcc.n	80045ce <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80045c8:	687b      	ldr	r3, [r7, #4]
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d136      	bne.n	800463c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80045ce:	68bb      	ldr	r3, [r7, #8]
 80045d0:	0c1b      	lsrs	r3, r3, #16
 80045d2:	b2db      	uxtb	r3, r3
 80045d4:	2b01      	cmp	r3, #1
 80045d6:	d10c      	bne.n	80045f2 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	681b      	ldr	r3, [r3, #0]
 80045dc:	695b      	ldr	r3, [r3, #20]
 80045de:	43da      	mvns	r2, r3
 80045e0:	68bb      	ldr	r3, [r7, #8]
 80045e2:	4013      	ands	r3, r2
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	bf14      	ite	ne
 80045ea:	2301      	movne	r3, #1
 80045ec:	2300      	moveq	r3, #0
 80045ee:	b2db      	uxtb	r3, r3
 80045f0:	e00b      	b.n	800460a <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80045f2:	68fb      	ldr	r3, [r7, #12]
 80045f4:	681b      	ldr	r3, [r3, #0]
 80045f6:	699b      	ldr	r3, [r3, #24]
 80045f8:	43da      	mvns	r2, r3
 80045fa:	68bb      	ldr	r3, [r7, #8]
 80045fc:	4013      	ands	r3, r2
 80045fe:	b29b      	uxth	r3, r3
 8004600:	2b00      	cmp	r3, #0
 8004602:	bf14      	ite	ne
 8004604:	2301      	movne	r3, #1
 8004606:	2300      	moveq	r3, #0
 8004608:	b2db      	uxtb	r3, r3
 800460a:	2b00      	cmp	r3, #0
 800460c:	d016      	beq.n	800463c <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800460e:	68fb      	ldr	r3, [r7, #12]
 8004610:	2200      	movs	r2, #0
 8004612:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	2220      	movs	r2, #32
 8004618:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800461c:	68fb      	ldr	r3, [r7, #12]
 800461e:	2200      	movs	r2, #0
 8004620:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004624:	68fb      	ldr	r3, [r7, #12]
 8004626:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004628:	f043 0220 	orr.w	r2, r3, #32
 800462c:	68fb      	ldr	r3, [r7, #12]
 800462e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004630:	68fb      	ldr	r3, [r7, #12]
 8004632:	2200      	movs	r2, #0
 8004634:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004638:	2301      	movs	r3, #1
 800463a:	e021      	b.n	8004680 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 800463c:	68bb      	ldr	r3, [r7, #8]
 800463e:	0c1b      	lsrs	r3, r3, #16
 8004640:	b2db      	uxtb	r3, r3
 8004642:	2b01      	cmp	r3, #1
 8004644:	d10c      	bne.n	8004660 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004646:	68fb      	ldr	r3, [r7, #12]
 8004648:	681b      	ldr	r3, [r3, #0]
 800464a:	695b      	ldr	r3, [r3, #20]
 800464c:	43da      	mvns	r2, r3
 800464e:	68bb      	ldr	r3, [r7, #8]
 8004650:	4013      	ands	r3, r2
 8004652:	b29b      	uxth	r3, r3
 8004654:	2b00      	cmp	r3, #0
 8004656:	bf14      	ite	ne
 8004658:	2301      	movne	r3, #1
 800465a:	2300      	moveq	r3, #0
 800465c:	b2db      	uxtb	r3, r3
 800465e:	e00b      	b.n	8004678 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 8004660:	68fb      	ldr	r3, [r7, #12]
 8004662:	681b      	ldr	r3, [r3, #0]
 8004664:	699b      	ldr	r3, [r3, #24]
 8004666:	43da      	mvns	r2, r3
 8004668:	68bb      	ldr	r3, [r7, #8]
 800466a:	4013      	ands	r3, r2
 800466c:	b29b      	uxth	r3, r3
 800466e:	2b00      	cmp	r3, #0
 8004670:	bf14      	ite	ne
 8004672:	2301      	movne	r3, #1
 8004674:	2300      	moveq	r3, #0
 8004676:	b2db      	uxtb	r3, r3
 8004678:	2b00      	cmp	r3, #0
 800467a:	f47f af6d 	bne.w	8004558 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800467e:	2300      	movs	r3, #0
}
 8004680:	4618      	mov	r0, r3
 8004682:	3710      	adds	r7, #16
 8004684:	46bd      	mov	sp, r7
 8004686:	bd80      	pop	{r7, pc}

08004688 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004688:	b580      	push	{r7, lr}
 800468a:	b084      	sub	sp, #16
 800468c:	af00      	add	r7, sp, #0
 800468e:	60f8      	str	r0, [r7, #12]
 8004690:	60b9      	str	r1, [r7, #8]
 8004692:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004694:	e034      	b.n	8004700 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004696:	68f8      	ldr	r0, [r7, #12]
 8004698:	f000 f8e3 	bl	8004862 <I2C_IsAcknowledgeFailed>
 800469c:	4603      	mov	r3, r0
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d001      	beq.n	80046a6 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 80046a2:	2301      	movs	r3, #1
 80046a4:	e034      	b.n	8004710 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80046a6:	68bb      	ldr	r3, [r7, #8]
 80046a8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046ac:	d028      	beq.n	8004700 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046ae:	f7fe f8f1 	bl	8002894 <HAL_GetTick>
 80046b2:	4602      	mov	r2, r0
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	1ad3      	subs	r3, r2, r3
 80046b8:	68ba      	ldr	r2, [r7, #8]
 80046ba:	429a      	cmp	r2, r3
 80046bc:	d302      	bcc.n	80046c4 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80046be:	68bb      	ldr	r3, [r7, #8]
 80046c0:	2b00      	cmp	r3, #0
 80046c2:	d11d      	bne.n	8004700 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80046ce:	2b80      	cmp	r3, #128	@ 0x80
 80046d0:	d016      	beq.n	8004700 <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	2200      	movs	r2, #0
 80046d6:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2220      	movs	r2, #32
 80046dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80046e0:	68fb      	ldr	r3, [r7, #12]
 80046e2:	2200      	movs	r2, #0
 80046e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80046e8:	68fb      	ldr	r3, [r7, #12]
 80046ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80046ec:	f043 0220 	orr.w	r2, r3, #32
 80046f0:	68fb      	ldr	r3, [r7, #12]
 80046f2:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80046f4:	68fb      	ldr	r3, [r7, #12]
 80046f6:	2200      	movs	r2, #0
 80046f8:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80046fc:	2301      	movs	r3, #1
 80046fe:	e007      	b.n	8004710 <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	681b      	ldr	r3, [r3, #0]
 8004704:	695b      	ldr	r3, [r3, #20]
 8004706:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800470a:	2b80      	cmp	r3, #128	@ 0x80
 800470c:	d1c3      	bne.n	8004696 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800470e:	2300      	movs	r3, #0
}
 8004710:	4618      	mov	r0, r3
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	60f8      	str	r0, [r7, #12]
 8004720:	60b9      	str	r1, [r7, #8]
 8004722:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004724:	e034      	b.n	8004790 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004726:	68f8      	ldr	r0, [r7, #12]
 8004728:	f000 f89b 	bl	8004862 <I2C_IsAcknowledgeFailed>
 800472c:	4603      	mov	r3, r0
 800472e:	2b00      	cmp	r3, #0
 8004730:	d001      	beq.n	8004736 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 8004732:	2301      	movs	r3, #1
 8004734:	e034      	b.n	80047a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	f1b3 3fff 	cmp.w	r3, #4294967295
 800473c:	d028      	beq.n	8004790 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800473e:	f7fe f8a9 	bl	8002894 <HAL_GetTick>
 8004742:	4602      	mov	r2, r0
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	1ad3      	subs	r3, r2, r3
 8004748:	68ba      	ldr	r2, [r7, #8]
 800474a:	429a      	cmp	r2, r3
 800474c:	d302      	bcc.n	8004754 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800474e:	68bb      	ldr	r3, [r7, #8]
 8004750:	2b00      	cmp	r3, #0
 8004752:	d11d      	bne.n	8004790 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004754:	68fb      	ldr	r3, [r7, #12]
 8004756:	681b      	ldr	r3, [r3, #0]
 8004758:	695b      	ldr	r3, [r3, #20]
 800475a:	f003 0304 	and.w	r3, r3, #4
 800475e:	2b04      	cmp	r3, #4
 8004760:	d016      	beq.n	8004790 <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 8004762:	68fb      	ldr	r3, [r7, #12]
 8004764:	2200      	movs	r2, #0
 8004766:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004768:	68fb      	ldr	r3, [r7, #12]
 800476a:	2220      	movs	r2, #32
 800476c:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004770:	68fb      	ldr	r3, [r7, #12]
 8004772:	2200      	movs	r2, #0
 8004774:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004778:	68fb      	ldr	r3, [r7, #12]
 800477a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800477c:	f043 0220 	orr.w	r2, r3, #32
 8004780:	68fb      	ldr	r3, [r7, #12]
 8004782:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004784:	68fb      	ldr	r3, [r7, #12]
 8004786:	2200      	movs	r2, #0
 8004788:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 800478c:	2301      	movs	r3, #1
 800478e:	e007      	b.n	80047a0 <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004790:	68fb      	ldr	r3, [r7, #12]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	695b      	ldr	r3, [r3, #20]
 8004796:	f003 0304 	and.w	r3, r3, #4
 800479a:	2b04      	cmp	r3, #4
 800479c:	d1c3      	bne.n	8004726 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800479e:	2300      	movs	r3, #0
}
 80047a0:	4618      	mov	r0, r3
 80047a2:	3710      	adds	r7, #16
 80047a4:	46bd      	mov	sp, r7
 80047a6:	bd80      	pop	{r7, pc}

080047a8 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 80047a8:	b580      	push	{r7, lr}
 80047aa:	b084      	sub	sp, #16
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	60f8      	str	r0, [r7, #12]
 80047b0:	60b9      	str	r1, [r7, #8]
 80047b2:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80047b4:	e049      	b.n	800484a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80047b6:	68fb      	ldr	r3, [r7, #12]
 80047b8:	681b      	ldr	r3, [r3, #0]
 80047ba:	695b      	ldr	r3, [r3, #20]
 80047bc:	f003 0310 	and.w	r3, r3, #16
 80047c0:	2b10      	cmp	r3, #16
 80047c2:	d119      	bne.n	80047f8 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	f06f 0210 	mvn.w	r2, #16
 80047cc:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80047ce:	68fb      	ldr	r3, [r7, #12]
 80047d0:	2200      	movs	r2, #0
 80047d2:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	2220      	movs	r2, #32
 80047d8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	2200      	movs	r2, #0
 80047e0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80047e4:	68fb      	ldr	r3, [r7, #12]
 80047e6:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80047e8:	68fb      	ldr	r3, [r7, #12]
 80047ea:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	2200      	movs	r2, #0
 80047f0:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80047f4:	2301      	movs	r3, #1
 80047f6:	e030      	b.n	800485a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80047f8:	f7fe f84c 	bl	8002894 <HAL_GetTick>
 80047fc:	4602      	mov	r2, r0
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	1ad3      	subs	r3, r2, r3
 8004802:	68ba      	ldr	r2, [r7, #8]
 8004804:	429a      	cmp	r2, r3
 8004806:	d302      	bcc.n	800480e <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 8004808:	68bb      	ldr	r3, [r7, #8]
 800480a:	2b00      	cmp	r3, #0
 800480c:	d11d      	bne.n	800484a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 800480e:	68fb      	ldr	r3, [r7, #12]
 8004810:	681b      	ldr	r3, [r3, #0]
 8004812:	695b      	ldr	r3, [r3, #20]
 8004814:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004818:	2b40      	cmp	r3, #64	@ 0x40
 800481a:	d016      	beq.n	800484a <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800481c:	68fb      	ldr	r3, [r7, #12]
 800481e:	2200      	movs	r2, #0
 8004820:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004822:	68fb      	ldr	r3, [r7, #12]
 8004824:	2220      	movs	r2, #32
 8004826:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800482a:	68fb      	ldr	r3, [r7, #12]
 800482c:	2200      	movs	r2, #0
 800482e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004832:	68fb      	ldr	r3, [r7, #12]
 8004834:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004836:	f043 0220 	orr.w	r2, r3, #32
 800483a:	68fb      	ldr	r3, [r7, #12]
 800483c:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800483e:	68fb      	ldr	r3, [r7, #12]
 8004840:	2200      	movs	r2, #0
 8004842:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004846:	2301      	movs	r3, #1
 8004848:	e007      	b.n	800485a <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 800484a:	68fb      	ldr	r3, [r7, #12]
 800484c:	681b      	ldr	r3, [r3, #0]
 800484e:	695b      	ldr	r3, [r3, #20]
 8004850:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004854:	2b40      	cmp	r3, #64	@ 0x40
 8004856:	d1ae      	bne.n	80047b6 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004858:	2300      	movs	r3, #0
}
 800485a:	4618      	mov	r0, r3
 800485c:	3710      	adds	r7, #16
 800485e:	46bd      	mov	sp, r7
 8004860:	bd80      	pop	{r7, pc}

08004862 <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 8004862:	b480      	push	{r7}
 8004864:	b083      	sub	sp, #12
 8004866:	af00      	add	r7, sp, #0
 8004868:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800486a:	687b      	ldr	r3, [r7, #4]
 800486c:	681b      	ldr	r3, [r3, #0]
 800486e:	695b      	ldr	r3, [r3, #20]
 8004870:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004874:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004878:	d11b      	bne.n	80048b2 <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	681b      	ldr	r3, [r3, #0]
 800487e:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 8004882:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004884:	687b      	ldr	r3, [r7, #4]
 8004886:	2200      	movs	r2, #0
 8004888:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 800488a:	687b      	ldr	r3, [r7, #4]
 800488c:	2220      	movs	r2, #32
 800488e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800489e:	f043 0204 	orr.w	r2, r3, #4
 80048a2:	687b      	ldr	r3, [r7, #4]
 80048a4:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 80048ae:	2301      	movs	r3, #1
 80048b0:	e000      	b.n	80048b4 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 80048b2:	2300      	movs	r3, #0
}
 80048b4:	4618      	mov	r0, r3
 80048b6:	370c      	adds	r7, #12
 80048b8:	46bd      	mov	sp, r7
 80048ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048be:	4770      	bx	lr

080048c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b086      	sub	sp, #24
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	2b00      	cmp	r3, #0
 80048cc:	d101      	bne.n	80048d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80048ce:	2301      	movs	r3, #1
 80048d0:	e267      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	f003 0301 	and.w	r3, r3, #1
 80048da:	2b00      	cmp	r3, #0
 80048dc:	d075      	beq.n	80049ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048de:	4b88      	ldr	r3, [pc, #544]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 80048e0:	689b      	ldr	r3, [r3, #8]
 80048e2:	f003 030c 	and.w	r3, r3, #12
 80048e6:	2b04      	cmp	r3, #4
 80048e8:	d00c      	beq.n	8004904 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048ea:	4b85      	ldr	r3, [pc, #532]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 80048ec:	689b      	ldr	r3, [r3, #8]
 80048ee:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80048f2:	2b08      	cmp	r3, #8
 80048f4:	d112      	bne.n	800491c <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80048f6:	4b82      	ldr	r3, [pc, #520]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 80048f8:	685b      	ldr	r3, [r3, #4]
 80048fa:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80048fe:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 8004902:	d10b      	bne.n	800491c <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004904:	4b7e      	ldr	r3, [pc, #504]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800490c:	2b00      	cmp	r3, #0
 800490e:	d05b      	beq.n	80049c8 <HAL_RCC_OscConfig+0x108>
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	2b00      	cmp	r3, #0
 8004916:	d157      	bne.n	80049c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004918:	2301      	movs	r3, #1
 800491a:	e242      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	685b      	ldr	r3, [r3, #4]
 8004920:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004924:	d106      	bne.n	8004934 <HAL_RCC_OscConfig+0x74>
 8004926:	4b76      	ldr	r3, [pc, #472]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	4a75      	ldr	r2, [pc, #468]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 800492c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004930:	6013      	str	r3, [r2, #0]
 8004932:	e01d      	b.n	8004970 <HAL_RCC_OscConfig+0xb0>
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	685b      	ldr	r3, [r3, #4]
 8004938:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 800493c:	d10c      	bne.n	8004958 <HAL_RCC_OscConfig+0x98>
 800493e:	4b70      	ldr	r3, [pc, #448]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004940:	681b      	ldr	r3, [r3, #0]
 8004942:	4a6f      	ldr	r2, [pc, #444]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004944:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004948:	6013      	str	r3, [r2, #0]
 800494a:	4b6d      	ldr	r3, [pc, #436]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	4a6c      	ldr	r2, [pc, #432]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004950:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004954:	6013      	str	r3, [r2, #0]
 8004956:	e00b      	b.n	8004970 <HAL_RCC_OscConfig+0xb0>
 8004958:	4b69      	ldr	r3, [pc, #420]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	4a68      	ldr	r2, [pc, #416]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 800495e:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004962:	6013      	str	r3, [r2, #0]
 8004964:	4b66      	ldr	r3, [pc, #408]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004966:	681b      	ldr	r3, [r3, #0]
 8004968:	4a65      	ldr	r2, [pc, #404]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 800496a:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 800496e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	2b00      	cmp	r3, #0
 8004976:	d013      	beq.n	80049a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004978:	f7fd ff8c 	bl	8002894 <HAL_GetTick>
 800497c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800497e:	e008      	b.n	8004992 <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004980:	f7fd ff88 	bl	8002894 <HAL_GetTick>
 8004984:	4602      	mov	r2, r0
 8004986:	693b      	ldr	r3, [r7, #16]
 8004988:	1ad3      	subs	r3, r2, r3
 800498a:	2b64      	cmp	r3, #100	@ 0x64
 800498c:	d901      	bls.n	8004992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800498e:	2303      	movs	r3, #3
 8004990:	e207      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004992:	4b5b      	ldr	r3, [pc, #364]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004994:	681b      	ldr	r3, [r3, #0]
 8004996:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800499a:	2b00      	cmp	r3, #0
 800499c:	d0f0      	beq.n	8004980 <HAL_RCC_OscConfig+0xc0>
 800499e:	e014      	b.n	80049ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80049a0:	f7fd ff78 	bl	8002894 <HAL_GetTick>
 80049a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049a6:	e008      	b.n	80049ba <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 80049a8:	f7fd ff74 	bl	8002894 <HAL_GetTick>
 80049ac:	4602      	mov	r2, r0
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	1ad3      	subs	r3, r2, r3
 80049b2:	2b64      	cmp	r3, #100	@ 0x64
 80049b4:	d901      	bls.n	80049ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80049b6:	2303      	movs	r3, #3
 80049b8:	e1f3      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80049ba:	4b51      	ldr	r3, [pc, #324]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049c2:	2b00      	cmp	r3, #0
 80049c4:	d1f0      	bne.n	80049a8 <HAL_RCC_OscConfig+0xe8>
 80049c6:	e000      	b.n	80049ca <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	681b      	ldr	r3, [r3, #0]
 80049ce:	f003 0302 	and.w	r3, r3, #2
 80049d2:	2b00      	cmp	r3, #0
 80049d4:	d063      	beq.n	8004a9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049d6:	4b4a      	ldr	r3, [pc, #296]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
 80049de:	2b00      	cmp	r3, #0
 80049e0:	d00b      	beq.n	80049fa <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049e2:	4b47      	ldr	r3, [pc, #284]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 80049e4:	689b      	ldr	r3, [r3, #8]
 80049e6:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 80049ea:	2b08      	cmp	r3, #8
 80049ec:	d11c      	bne.n	8004a28 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80049ee:	4b44      	ldr	r3, [pc, #272]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049f6:	2b00      	cmp	r3, #0
 80049f8:	d116      	bne.n	8004a28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80049fa:	4b41      	ldr	r3, [pc, #260]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 80049fc:	681b      	ldr	r3, [r3, #0]
 80049fe:	f003 0302 	and.w	r3, r3, #2
 8004a02:	2b00      	cmp	r3, #0
 8004a04:	d005      	beq.n	8004a12 <HAL_RCC_OscConfig+0x152>
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	68db      	ldr	r3, [r3, #12]
 8004a0a:	2b01      	cmp	r3, #1
 8004a0c:	d001      	beq.n	8004a12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004a0e:	2301      	movs	r3, #1
 8004a10:	e1c7      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a12:	4b3b      	ldr	r3, [pc, #236]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a1a:	687b      	ldr	r3, [r7, #4]
 8004a1c:	691b      	ldr	r3, [r3, #16]
 8004a1e:	00db      	lsls	r3, r3, #3
 8004a20:	4937      	ldr	r1, [pc, #220]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004a22:	4313      	orrs	r3, r2
 8004a24:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004a26:	e03a      	b.n	8004a9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004a28:	687b      	ldr	r3, [r7, #4]
 8004a2a:	68db      	ldr	r3, [r3, #12]
 8004a2c:	2b00      	cmp	r3, #0
 8004a2e:	d020      	beq.n	8004a72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004a30:	4b34      	ldr	r3, [pc, #208]	@ (8004b04 <HAL_RCC_OscConfig+0x244>)
 8004a32:	2201      	movs	r2, #1
 8004a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a36:	f7fd ff2d 	bl	8002894 <HAL_GetTick>
 8004a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a3c:	e008      	b.n	8004a50 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a3e:	f7fd ff29 	bl	8002894 <HAL_GetTick>
 8004a42:	4602      	mov	r2, r0
 8004a44:	693b      	ldr	r3, [r7, #16]
 8004a46:	1ad3      	subs	r3, r2, r3
 8004a48:	2b02      	cmp	r3, #2
 8004a4a:	d901      	bls.n	8004a50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004a4c:	2303      	movs	r3, #3
 8004a4e:	e1a8      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004a50:	4b2b      	ldr	r3, [pc, #172]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	f003 0302 	and.w	r3, r3, #2
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d0f0      	beq.n	8004a3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004a5c:	4b28      	ldr	r3, [pc, #160]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004a5e:	681b      	ldr	r3, [r3, #0]
 8004a60:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	691b      	ldr	r3, [r3, #16]
 8004a68:	00db      	lsls	r3, r3, #3
 8004a6a:	4925      	ldr	r1, [pc, #148]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004a6c:	4313      	orrs	r3, r2
 8004a6e:	600b      	str	r3, [r1, #0]
 8004a70:	e015      	b.n	8004a9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004a72:	4b24      	ldr	r3, [pc, #144]	@ (8004b04 <HAL_RCC_OscConfig+0x244>)
 8004a74:	2200      	movs	r2, #0
 8004a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004a78:	f7fd ff0c 	bl	8002894 <HAL_GetTick>
 8004a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a7e:	e008      	b.n	8004a92 <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004a80:	f7fd ff08 	bl	8002894 <HAL_GetTick>
 8004a84:	4602      	mov	r2, r0
 8004a86:	693b      	ldr	r3, [r7, #16]
 8004a88:	1ad3      	subs	r3, r2, r3
 8004a8a:	2b02      	cmp	r3, #2
 8004a8c:	d901      	bls.n	8004a92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004a8e:	2303      	movs	r3, #3
 8004a90:	e187      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004a92:	4b1b      	ldr	r3, [pc, #108]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004a94:	681b      	ldr	r3, [r3, #0]
 8004a96:	f003 0302 	and.w	r3, r3, #2
 8004a9a:	2b00      	cmp	r3, #0
 8004a9c:	d1f0      	bne.n	8004a80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004a9e:	687b      	ldr	r3, [r7, #4]
 8004aa0:	681b      	ldr	r3, [r3, #0]
 8004aa2:	f003 0308 	and.w	r3, r3, #8
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d036      	beq.n	8004b18 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004aaa:	687b      	ldr	r3, [r7, #4]
 8004aac:	695b      	ldr	r3, [r3, #20]
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d016      	beq.n	8004ae0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004ab2:	4b15      	ldr	r3, [pc, #84]	@ (8004b08 <HAL_RCC_OscConfig+0x248>)
 8004ab4:	2201      	movs	r2, #1
 8004ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ab8:	f7fd feec 	bl	8002894 <HAL_GetTick>
 8004abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004abe:	e008      	b.n	8004ad2 <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004ac0:	f7fd fee8 	bl	8002894 <HAL_GetTick>
 8004ac4:	4602      	mov	r2, r0
 8004ac6:	693b      	ldr	r3, [r7, #16]
 8004ac8:	1ad3      	subs	r3, r2, r3
 8004aca:	2b02      	cmp	r3, #2
 8004acc:	d901      	bls.n	8004ad2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004ace:	2303      	movs	r3, #3
 8004ad0:	e167      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004ad2:	4b0b      	ldr	r3, [pc, #44]	@ (8004b00 <HAL_RCC_OscConfig+0x240>)
 8004ad4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004ad6:	f003 0302 	and.w	r3, r3, #2
 8004ada:	2b00      	cmp	r3, #0
 8004adc:	d0f0      	beq.n	8004ac0 <HAL_RCC_OscConfig+0x200>
 8004ade:	e01b      	b.n	8004b18 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004ae0:	4b09      	ldr	r3, [pc, #36]	@ (8004b08 <HAL_RCC_OscConfig+0x248>)
 8004ae2:	2200      	movs	r2, #0
 8004ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004ae6:	f7fd fed5 	bl	8002894 <HAL_GetTick>
 8004aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004aec:	e00e      	b.n	8004b0c <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004aee:	f7fd fed1 	bl	8002894 <HAL_GetTick>
 8004af2:	4602      	mov	r2, r0
 8004af4:	693b      	ldr	r3, [r7, #16]
 8004af6:	1ad3      	subs	r3, r2, r3
 8004af8:	2b02      	cmp	r3, #2
 8004afa:	d907      	bls.n	8004b0c <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004afc:	2303      	movs	r3, #3
 8004afe:	e150      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
 8004b00:	40023800 	.word	0x40023800
 8004b04:	42470000 	.word	0x42470000
 8004b08:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004b0c:	4b88      	ldr	r3, [pc, #544]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004b0e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004b10:	f003 0302 	and.w	r3, r3, #2
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d1ea      	bne.n	8004aee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004b18:	687b      	ldr	r3, [r7, #4]
 8004b1a:	681b      	ldr	r3, [r3, #0]
 8004b1c:	f003 0304 	and.w	r3, r3, #4
 8004b20:	2b00      	cmp	r3, #0
 8004b22:	f000 8097 	beq.w	8004c54 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004b26:	2300      	movs	r3, #0
 8004b28:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004b2a:	4b81      	ldr	r3, [pc, #516]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004b2c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b2e:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b32:	2b00      	cmp	r3, #0
 8004b34:	d10f      	bne.n	8004b56 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004b36:	2300      	movs	r3, #0
 8004b38:	60bb      	str	r3, [r7, #8]
 8004b3a:	4b7d      	ldr	r3, [pc, #500]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004b3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b3e:	4a7c      	ldr	r2, [pc, #496]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004b40:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004b44:	6413      	str	r3, [r2, #64]	@ 0x40
 8004b46:	4b7a      	ldr	r3, [pc, #488]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004b48:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004b4a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004b4e:	60bb      	str	r3, [r7, #8]
 8004b50:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004b52:	2301      	movs	r3, #1
 8004b54:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b56:	4b77      	ldr	r3, [pc, #476]	@ (8004d34 <HAL_RCC_OscConfig+0x474>)
 8004b58:	681b      	ldr	r3, [r3, #0]
 8004b5a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d118      	bne.n	8004b94 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004b62:	4b74      	ldr	r3, [pc, #464]	@ (8004d34 <HAL_RCC_OscConfig+0x474>)
 8004b64:	681b      	ldr	r3, [r3, #0]
 8004b66:	4a73      	ldr	r2, [pc, #460]	@ (8004d34 <HAL_RCC_OscConfig+0x474>)
 8004b68:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004b6c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004b6e:	f7fd fe91 	bl	8002894 <HAL_GetTick>
 8004b72:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b74:	e008      	b.n	8004b88 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004b76:	f7fd fe8d 	bl	8002894 <HAL_GetTick>
 8004b7a:	4602      	mov	r2, r0
 8004b7c:	693b      	ldr	r3, [r7, #16]
 8004b7e:	1ad3      	subs	r3, r2, r3
 8004b80:	2b02      	cmp	r3, #2
 8004b82:	d901      	bls.n	8004b88 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004b84:	2303      	movs	r3, #3
 8004b86:	e10c      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004b88:	4b6a      	ldr	r3, [pc, #424]	@ (8004d34 <HAL_RCC_OscConfig+0x474>)
 8004b8a:	681b      	ldr	r3, [r3, #0]
 8004b8c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004b90:	2b00      	cmp	r3, #0
 8004b92:	d0f0      	beq.n	8004b76 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	689b      	ldr	r3, [r3, #8]
 8004b98:	2b01      	cmp	r3, #1
 8004b9a:	d106      	bne.n	8004baa <HAL_RCC_OscConfig+0x2ea>
 8004b9c:	4b64      	ldr	r3, [pc, #400]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004b9e:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ba0:	4a63      	ldr	r2, [pc, #396]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004ba2:	f043 0301 	orr.w	r3, r3, #1
 8004ba6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004ba8:	e01c      	b.n	8004be4 <HAL_RCC_OscConfig+0x324>
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	689b      	ldr	r3, [r3, #8]
 8004bae:	2b05      	cmp	r3, #5
 8004bb0:	d10c      	bne.n	8004bcc <HAL_RCC_OscConfig+0x30c>
 8004bb2:	4b5f      	ldr	r3, [pc, #380]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004bb4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bb6:	4a5e      	ldr	r2, [pc, #376]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004bb8:	f043 0304 	orr.w	r3, r3, #4
 8004bbc:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bbe:	4b5c      	ldr	r3, [pc, #368]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004bc0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bc2:	4a5b      	ldr	r2, [pc, #364]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004bc4:	f043 0301 	orr.w	r3, r3, #1
 8004bc8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bca:	e00b      	b.n	8004be4 <HAL_RCC_OscConfig+0x324>
 8004bcc:	4b58      	ldr	r3, [pc, #352]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004bce:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bd0:	4a57      	ldr	r2, [pc, #348]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004bd2:	f023 0301 	bic.w	r3, r3, #1
 8004bd6:	6713      	str	r3, [r2, #112]	@ 0x70
 8004bd8:	4b55      	ldr	r3, [pc, #340]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004bda:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004bdc:	4a54      	ldr	r2, [pc, #336]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004bde:	f023 0304 	bic.w	r3, r3, #4
 8004be2:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004be4:	687b      	ldr	r3, [r7, #4]
 8004be6:	689b      	ldr	r3, [r3, #8]
 8004be8:	2b00      	cmp	r3, #0
 8004bea:	d015      	beq.n	8004c18 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004bec:	f7fd fe52 	bl	8002894 <HAL_GetTick>
 8004bf0:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004bf2:	e00a      	b.n	8004c0a <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004bf4:	f7fd fe4e 	bl	8002894 <HAL_GetTick>
 8004bf8:	4602      	mov	r2, r0
 8004bfa:	693b      	ldr	r3, [r7, #16]
 8004bfc:	1ad3      	subs	r3, r2, r3
 8004bfe:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c02:	4293      	cmp	r3, r2
 8004c04:	d901      	bls.n	8004c0a <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004c06:	2303      	movs	r3, #3
 8004c08:	e0cb      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004c0a:	4b49      	ldr	r3, [pc, #292]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004c0c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c0e:	f003 0302 	and.w	r3, r3, #2
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d0ee      	beq.n	8004bf4 <HAL_RCC_OscConfig+0x334>
 8004c16:	e014      	b.n	8004c42 <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004c18:	f7fd fe3c 	bl	8002894 <HAL_GetTick>
 8004c1c:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c1e:	e00a      	b.n	8004c36 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004c20:	f7fd fe38 	bl	8002894 <HAL_GetTick>
 8004c24:	4602      	mov	r2, r0
 8004c26:	693b      	ldr	r3, [r7, #16]
 8004c28:	1ad3      	subs	r3, r2, r3
 8004c2a:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004c2e:	4293      	cmp	r3, r2
 8004c30:	d901      	bls.n	8004c36 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004c32:	2303      	movs	r3, #3
 8004c34:	e0b5      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004c36:	4b3e      	ldr	r3, [pc, #248]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004c38:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c3a:	f003 0302 	and.w	r3, r3, #2
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d1ee      	bne.n	8004c20 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004c42:	7dfb      	ldrb	r3, [r7, #23]
 8004c44:	2b01      	cmp	r3, #1
 8004c46:	d105      	bne.n	8004c54 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004c48:	4b39      	ldr	r3, [pc, #228]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004c4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c4c:	4a38      	ldr	r2, [pc, #224]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004c4e:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004c52:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	699b      	ldr	r3, [r3, #24]
 8004c58:	2b00      	cmp	r3, #0
 8004c5a:	f000 80a1 	beq.w	8004da0 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004c5e:	4b34      	ldr	r3, [pc, #208]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	f003 030c 	and.w	r3, r3, #12
 8004c66:	2b08      	cmp	r3, #8
 8004c68:	d05c      	beq.n	8004d24 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	699b      	ldr	r3, [r3, #24]
 8004c6e:	2b02      	cmp	r3, #2
 8004c70:	d141      	bne.n	8004cf6 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004c72:	4b31      	ldr	r3, [pc, #196]	@ (8004d38 <HAL_RCC_OscConfig+0x478>)
 8004c74:	2200      	movs	r2, #0
 8004c76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004c78:	f7fd fe0c 	bl	8002894 <HAL_GetTick>
 8004c7c:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c7e:	e008      	b.n	8004c92 <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004c80:	f7fd fe08 	bl	8002894 <HAL_GetTick>
 8004c84:	4602      	mov	r2, r0
 8004c86:	693b      	ldr	r3, [r7, #16]
 8004c88:	1ad3      	subs	r3, r2, r3
 8004c8a:	2b02      	cmp	r3, #2
 8004c8c:	d901      	bls.n	8004c92 <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004c8e:	2303      	movs	r3, #3
 8004c90:	e087      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004c92:	4b27      	ldr	r3, [pc, #156]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004c94:	681b      	ldr	r3, [r3, #0]
 8004c96:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004c9a:	2b00      	cmp	r3, #0
 8004c9c:	d1f0      	bne.n	8004c80 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004c9e:	687b      	ldr	r3, [r7, #4]
 8004ca0:	69da      	ldr	r2, [r3, #28]
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	6a1b      	ldr	r3, [r3, #32]
 8004ca6:	431a      	orrs	r2, r3
 8004ca8:	687b      	ldr	r3, [r7, #4]
 8004caa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004cac:	019b      	lsls	r3, r3, #6
 8004cae:	431a      	orrs	r2, r3
 8004cb0:	687b      	ldr	r3, [r7, #4]
 8004cb2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004cb4:	085b      	lsrs	r3, r3, #1
 8004cb6:	3b01      	subs	r3, #1
 8004cb8:	041b      	lsls	r3, r3, #16
 8004cba:	431a      	orrs	r2, r3
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004cc0:	061b      	lsls	r3, r3, #24
 8004cc2:	491b      	ldr	r1, [pc, #108]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004cc4:	4313      	orrs	r3, r2
 8004cc6:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004cc8:	4b1b      	ldr	r3, [pc, #108]	@ (8004d38 <HAL_RCC_OscConfig+0x478>)
 8004cca:	2201      	movs	r2, #1
 8004ccc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cce:	f7fd fde1 	bl	8002894 <HAL_GetTick>
 8004cd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004cd4:	e008      	b.n	8004ce8 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004cd6:	f7fd fddd 	bl	8002894 <HAL_GetTick>
 8004cda:	4602      	mov	r2, r0
 8004cdc:	693b      	ldr	r3, [r7, #16]
 8004cde:	1ad3      	subs	r3, r2, r3
 8004ce0:	2b02      	cmp	r3, #2
 8004ce2:	d901      	bls.n	8004ce8 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004ce4:	2303      	movs	r3, #3
 8004ce6:	e05c      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004ce8:	4b11      	ldr	r3, [pc, #68]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004cf0:	2b00      	cmp	r3, #0
 8004cf2:	d0f0      	beq.n	8004cd6 <HAL_RCC_OscConfig+0x416>
 8004cf4:	e054      	b.n	8004da0 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004cf6:	4b10      	ldr	r3, [pc, #64]	@ (8004d38 <HAL_RCC_OscConfig+0x478>)
 8004cf8:	2200      	movs	r2, #0
 8004cfa:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004cfc:	f7fd fdca 	bl	8002894 <HAL_GetTick>
 8004d00:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d02:	e008      	b.n	8004d16 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d04:	f7fd fdc6 	bl	8002894 <HAL_GetTick>
 8004d08:	4602      	mov	r2, r0
 8004d0a:	693b      	ldr	r3, [r7, #16]
 8004d0c:	1ad3      	subs	r3, r2, r3
 8004d0e:	2b02      	cmp	r3, #2
 8004d10:	d901      	bls.n	8004d16 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004d12:	2303      	movs	r3, #3
 8004d14:	e045      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d16:	4b06      	ldr	r3, [pc, #24]	@ (8004d30 <HAL_RCC_OscConfig+0x470>)
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d1e:	2b00      	cmp	r3, #0
 8004d20:	d1f0      	bne.n	8004d04 <HAL_RCC_OscConfig+0x444>
 8004d22:	e03d      	b.n	8004da0 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	699b      	ldr	r3, [r3, #24]
 8004d28:	2b01      	cmp	r3, #1
 8004d2a:	d107      	bne.n	8004d3c <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004d2c:	2301      	movs	r3, #1
 8004d2e:	e038      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
 8004d30:	40023800 	.word	0x40023800
 8004d34:	40007000 	.word	0x40007000
 8004d38:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004d3c:	4b1b      	ldr	r3, [pc, #108]	@ (8004dac <HAL_RCC_OscConfig+0x4ec>)
 8004d3e:	685b      	ldr	r3, [r3, #4]
 8004d40:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d42:	687b      	ldr	r3, [r7, #4]
 8004d44:	699b      	ldr	r3, [r3, #24]
 8004d46:	2b01      	cmp	r3, #1
 8004d48:	d028      	beq.n	8004d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d4a:	68fb      	ldr	r3, [r7, #12]
 8004d4c:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004d54:	429a      	cmp	r2, r3
 8004d56:	d121      	bne.n	8004d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d58:	68fb      	ldr	r3, [r7, #12]
 8004d5a:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004d62:	429a      	cmp	r2, r3
 8004d64:	d11a      	bne.n	8004d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d66:	68fa      	ldr	r2, [r7, #12]
 8004d68:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004d6c:	4013      	ands	r3, r2
 8004d6e:	687a      	ldr	r2, [r7, #4]
 8004d70:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004d72:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004d74:	4293      	cmp	r3, r2
 8004d76:	d111      	bne.n	8004d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d78:	68fb      	ldr	r3, [r7, #12]
 8004d7a:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004d82:	085b      	lsrs	r3, r3, #1
 8004d84:	3b01      	subs	r3, #1
 8004d86:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004d88:	429a      	cmp	r2, r3
 8004d8a:	d107      	bne.n	8004d9c <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004d8c:	68fb      	ldr	r3, [r7, #12]
 8004d8e:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004d96:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004d98:	429a      	cmp	r2, r3
 8004d9a:	d001      	beq.n	8004da0 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004d9c:	2301      	movs	r3, #1
 8004d9e:	e000      	b.n	8004da2 <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004da0:	2300      	movs	r3, #0
}
 8004da2:	4618      	mov	r0, r3
 8004da4:	3718      	adds	r7, #24
 8004da6:	46bd      	mov	sp, r7
 8004da8:	bd80      	pop	{r7, pc}
 8004daa:	bf00      	nop
 8004dac:	40023800 	.word	0x40023800

08004db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004db0:	b580      	push	{r7, lr}
 8004db2:	b084      	sub	sp, #16
 8004db4:	af00      	add	r7, sp, #0
 8004db6:	6078      	str	r0, [r7, #4]
 8004db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004dba:	687b      	ldr	r3, [r7, #4]
 8004dbc:	2b00      	cmp	r3, #0
 8004dbe:	d101      	bne.n	8004dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004dc0:	2301      	movs	r3, #1
 8004dc2:	e0cc      	b.n	8004f5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004dc4:	4b68      	ldr	r3, [pc, #416]	@ (8004f68 <HAL_RCC_ClockConfig+0x1b8>)
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f003 0307 	and.w	r3, r3, #7
 8004dcc:	683a      	ldr	r2, [r7, #0]
 8004dce:	429a      	cmp	r2, r3
 8004dd0:	d90c      	bls.n	8004dec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004dd2:	4b65      	ldr	r3, [pc, #404]	@ (8004f68 <HAL_RCC_ClockConfig+0x1b8>)
 8004dd4:	683a      	ldr	r2, [r7, #0]
 8004dd6:	b2d2      	uxtb	r2, r2
 8004dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004dda:	4b63      	ldr	r3, [pc, #396]	@ (8004f68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0307 	and.w	r3, r3, #7
 8004de2:	683a      	ldr	r2, [r7, #0]
 8004de4:	429a      	cmp	r2, r3
 8004de6:	d001      	beq.n	8004dec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004de8:	2301      	movs	r3, #1
 8004dea:	e0b8      	b.n	8004f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004dec:	687b      	ldr	r3, [r7, #4]
 8004dee:	681b      	ldr	r3, [r3, #0]
 8004df0:	f003 0302 	and.w	r3, r3, #2
 8004df4:	2b00      	cmp	r3, #0
 8004df6:	d020      	beq.n	8004e3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004df8:	687b      	ldr	r3, [r7, #4]
 8004dfa:	681b      	ldr	r3, [r3, #0]
 8004dfc:	f003 0304 	and.w	r3, r3, #4
 8004e00:	2b00      	cmp	r3, #0
 8004e02:	d005      	beq.n	8004e10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004e04:	4b59      	ldr	r3, [pc, #356]	@ (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e06:	689b      	ldr	r3, [r3, #8]
 8004e08:	4a58      	ldr	r2, [pc, #352]	@ (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e0a:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004e0e:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	681b      	ldr	r3, [r3, #0]
 8004e14:	f003 0308 	and.w	r3, r3, #8
 8004e18:	2b00      	cmp	r3, #0
 8004e1a:	d005      	beq.n	8004e28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004e1c:	4b53      	ldr	r3, [pc, #332]	@ (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e1e:	689b      	ldr	r3, [r3, #8]
 8004e20:	4a52      	ldr	r2, [pc, #328]	@ (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e22:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004e26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004e28:	4b50      	ldr	r3, [pc, #320]	@ (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e2a:	689b      	ldr	r3, [r3, #8]
 8004e2c:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004e30:	687b      	ldr	r3, [r7, #4]
 8004e32:	689b      	ldr	r3, [r3, #8]
 8004e34:	494d      	ldr	r1, [pc, #308]	@ (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e36:	4313      	orrs	r3, r2
 8004e38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	681b      	ldr	r3, [r3, #0]
 8004e3e:	f003 0301 	and.w	r3, r3, #1
 8004e42:	2b00      	cmp	r3, #0
 8004e44:	d044      	beq.n	8004ed0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	685b      	ldr	r3, [r3, #4]
 8004e4a:	2b01      	cmp	r3, #1
 8004e4c:	d107      	bne.n	8004e5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e4e:	4b47      	ldr	r3, [pc, #284]	@ (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e50:	681b      	ldr	r3, [r3, #0]
 8004e52:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004e56:	2b00      	cmp	r3, #0
 8004e58:	d119      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e5a:	2301      	movs	r3, #1
 8004e5c:	e07f      	b.n	8004f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e5e:	687b      	ldr	r3, [r7, #4]
 8004e60:	685b      	ldr	r3, [r3, #4]
 8004e62:	2b02      	cmp	r3, #2
 8004e64:	d003      	beq.n	8004e6e <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004e66:	687b      	ldr	r3, [r7, #4]
 8004e68:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004e6a:	2b03      	cmp	r3, #3
 8004e6c:	d107      	bne.n	8004e7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004e6e:	4b3f      	ldr	r3, [pc, #252]	@ (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e70:	681b      	ldr	r3, [r3, #0]
 8004e72:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e76:	2b00      	cmp	r3, #0
 8004e78:	d109      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e7a:	2301      	movs	r3, #1
 8004e7c:	e06f      	b.n	8004f5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004e7e:	4b3b      	ldr	r3, [pc, #236]	@ (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	f003 0302 	and.w	r3, r3, #2
 8004e86:	2b00      	cmp	r3, #0
 8004e88:	d101      	bne.n	8004e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004e8a:	2301      	movs	r3, #1
 8004e8c:	e067      	b.n	8004f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004e8e:	4b37      	ldr	r3, [pc, #220]	@ (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e90:	689b      	ldr	r3, [r3, #8]
 8004e92:	f023 0203 	bic.w	r2, r3, #3
 8004e96:	687b      	ldr	r3, [r7, #4]
 8004e98:	685b      	ldr	r3, [r3, #4]
 8004e9a:	4934      	ldr	r1, [pc, #208]	@ (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004e9c:	4313      	orrs	r3, r2
 8004e9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004ea0:	f7fd fcf8 	bl	8002894 <HAL_GetTick>
 8004ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ea6:	e00a      	b.n	8004ebe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004ea8:	f7fd fcf4 	bl	8002894 <HAL_GetTick>
 8004eac:	4602      	mov	r2, r0
 8004eae:	68fb      	ldr	r3, [r7, #12]
 8004eb0:	1ad3      	subs	r3, r2, r3
 8004eb2:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004eb6:	4293      	cmp	r3, r2
 8004eb8:	d901      	bls.n	8004ebe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004eba:	2303      	movs	r3, #3
 8004ebc:	e04f      	b.n	8004f5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004ebe:	4b2b      	ldr	r3, [pc, #172]	@ (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004ec0:	689b      	ldr	r3, [r3, #8]
 8004ec2:	f003 020c 	and.w	r2, r3, #12
 8004ec6:	687b      	ldr	r3, [r7, #4]
 8004ec8:	685b      	ldr	r3, [r3, #4]
 8004eca:	009b      	lsls	r3, r3, #2
 8004ecc:	429a      	cmp	r2, r3
 8004ece:	d1eb      	bne.n	8004ea8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004ed0:	4b25      	ldr	r3, [pc, #148]	@ (8004f68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ed2:	681b      	ldr	r3, [r3, #0]
 8004ed4:	f003 0307 	and.w	r3, r3, #7
 8004ed8:	683a      	ldr	r2, [r7, #0]
 8004eda:	429a      	cmp	r2, r3
 8004edc:	d20c      	bcs.n	8004ef8 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ede:	4b22      	ldr	r3, [pc, #136]	@ (8004f68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee0:	683a      	ldr	r2, [r7, #0]
 8004ee2:	b2d2      	uxtb	r2, r2
 8004ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ee6:	4b20      	ldr	r3, [pc, #128]	@ (8004f68 <HAL_RCC_ClockConfig+0x1b8>)
 8004ee8:	681b      	ldr	r3, [r3, #0]
 8004eea:	f003 0307 	and.w	r3, r3, #7
 8004eee:	683a      	ldr	r2, [r7, #0]
 8004ef0:	429a      	cmp	r2, r3
 8004ef2:	d001      	beq.n	8004ef8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004ef4:	2301      	movs	r3, #1
 8004ef6:	e032      	b.n	8004f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ef8:	687b      	ldr	r3, [r7, #4]
 8004efa:	681b      	ldr	r3, [r3, #0]
 8004efc:	f003 0304 	and.w	r3, r3, #4
 8004f00:	2b00      	cmp	r3, #0
 8004f02:	d008      	beq.n	8004f16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004f04:	4b19      	ldr	r3, [pc, #100]	@ (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004f06:	689b      	ldr	r3, [r3, #8]
 8004f08:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004f0c:	687b      	ldr	r3, [r7, #4]
 8004f0e:	68db      	ldr	r3, [r3, #12]
 8004f10:	4916      	ldr	r1, [pc, #88]	@ (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004f12:	4313      	orrs	r3, r2
 8004f14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004f16:	687b      	ldr	r3, [r7, #4]
 8004f18:	681b      	ldr	r3, [r3, #0]
 8004f1a:	f003 0308 	and.w	r3, r3, #8
 8004f1e:	2b00      	cmp	r3, #0
 8004f20:	d009      	beq.n	8004f36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8004f22:	4b12      	ldr	r3, [pc, #72]	@ (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004f24:	689b      	ldr	r3, [r3, #8]
 8004f26:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	691b      	ldr	r3, [r3, #16]
 8004f2e:	00db      	lsls	r3, r3, #3
 8004f30:	490e      	ldr	r1, [pc, #56]	@ (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004f32:	4313      	orrs	r3, r2
 8004f34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8004f36:	f000 f821 	bl	8004f7c <HAL_RCC_GetSysClockFreq>
 8004f3a:	4602      	mov	r2, r0
 8004f3c:	4b0b      	ldr	r3, [pc, #44]	@ (8004f6c <HAL_RCC_ClockConfig+0x1bc>)
 8004f3e:	689b      	ldr	r3, [r3, #8]
 8004f40:	091b      	lsrs	r3, r3, #4
 8004f42:	f003 030f 	and.w	r3, r3, #15
 8004f46:	490a      	ldr	r1, [pc, #40]	@ (8004f70 <HAL_RCC_ClockConfig+0x1c0>)
 8004f48:	5ccb      	ldrb	r3, [r1, r3]
 8004f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8004f4e:	4a09      	ldr	r2, [pc, #36]	@ (8004f74 <HAL_RCC_ClockConfig+0x1c4>)
 8004f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 8004f52:	4b09      	ldr	r3, [pc, #36]	@ (8004f78 <HAL_RCC_ClockConfig+0x1c8>)
 8004f54:	681b      	ldr	r3, [r3, #0]
 8004f56:	4618      	mov	r0, r3
 8004f58:	f7fd fc58 	bl	800280c <HAL_InitTick>

  return HAL_OK;
 8004f5c:	2300      	movs	r3, #0
}
 8004f5e:	4618      	mov	r0, r3
 8004f60:	3710      	adds	r7, #16
 8004f62:	46bd      	mov	sp, r7
 8004f64:	bd80      	pop	{r7, pc}
 8004f66:	bf00      	nop
 8004f68:	40023c00 	.word	0x40023c00
 8004f6c:	40023800 	.word	0x40023800
 8004f70:	0800af14 	.word	0x0800af14
 8004f74:	20000008 	.word	0x20000008
 8004f78:	2000000c 	.word	0x2000000c

08004f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8004f7c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8004f80:	b094      	sub	sp, #80	@ 0x50
 8004f82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8004f84:	2300      	movs	r3, #0
 8004f86:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8004f88:	2300      	movs	r3, #0
 8004f8a:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8004f8c:	2300      	movs	r3, #0
 8004f8e:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8004f90:	2300      	movs	r3, #0
 8004f92:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8004f94:	4b79      	ldr	r3, [pc, #484]	@ (800517c <HAL_RCC_GetSysClockFreq+0x200>)
 8004f96:	689b      	ldr	r3, [r3, #8]
 8004f98:	f003 030c 	and.w	r3, r3, #12
 8004f9c:	2b08      	cmp	r3, #8
 8004f9e:	d00d      	beq.n	8004fbc <HAL_RCC_GetSysClockFreq+0x40>
 8004fa0:	2b08      	cmp	r3, #8
 8004fa2:	f200 80e1 	bhi.w	8005168 <HAL_RCC_GetSysClockFreq+0x1ec>
 8004fa6:	2b00      	cmp	r3, #0
 8004fa8:	d002      	beq.n	8004fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8004faa:	2b04      	cmp	r3, #4
 8004fac:	d003      	beq.n	8004fb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8004fae:	e0db      	b.n	8005168 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8004fb0:	4b73      	ldr	r3, [pc, #460]	@ (8005180 <HAL_RCC_GetSysClockFreq+0x204>)
 8004fb2:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fb4:	e0db      	b.n	800516e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8004fb6:	4b73      	ldr	r3, [pc, #460]	@ (8005184 <HAL_RCC_GetSysClockFreq+0x208>)
 8004fb8:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8004fba:	e0d8      	b.n	800516e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8004fbc:	4b6f      	ldr	r3, [pc, #444]	@ (800517c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fbe:	685b      	ldr	r3, [r3, #4]
 8004fc0:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8004fc4:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8004fc6:	4b6d      	ldr	r3, [pc, #436]	@ (800517c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fc8:	685b      	ldr	r3, [r3, #4]
 8004fca:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d063      	beq.n	800509a <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8004fd2:	4b6a      	ldr	r3, [pc, #424]	@ (800517c <HAL_RCC_GetSysClockFreq+0x200>)
 8004fd4:	685b      	ldr	r3, [r3, #4]
 8004fd6:	099b      	lsrs	r3, r3, #6
 8004fd8:	2200      	movs	r2, #0
 8004fda:	63bb      	str	r3, [r7, #56]	@ 0x38
 8004fdc:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8004fde:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8004fe0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8004fe4:	633b      	str	r3, [r7, #48]	@ 0x30
 8004fe6:	2300      	movs	r3, #0
 8004fe8:	637b      	str	r3, [r7, #52]	@ 0x34
 8004fea:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8004fee:	4622      	mov	r2, r4
 8004ff0:	462b      	mov	r3, r5
 8004ff2:	f04f 0000 	mov.w	r0, #0
 8004ff6:	f04f 0100 	mov.w	r1, #0
 8004ffa:	0159      	lsls	r1, r3, #5
 8004ffc:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8005000:	0150      	lsls	r0, r2, #5
 8005002:	4602      	mov	r2, r0
 8005004:	460b      	mov	r3, r1
 8005006:	4621      	mov	r1, r4
 8005008:	1a51      	subs	r1, r2, r1
 800500a:	6139      	str	r1, [r7, #16]
 800500c:	4629      	mov	r1, r5
 800500e:	eb63 0301 	sbc.w	r3, r3, r1
 8005012:	617b      	str	r3, [r7, #20]
 8005014:	f04f 0200 	mov.w	r2, #0
 8005018:	f04f 0300 	mov.w	r3, #0
 800501c:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005020:	4659      	mov	r1, fp
 8005022:	018b      	lsls	r3, r1, #6
 8005024:	4651      	mov	r1, sl
 8005026:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 800502a:	4651      	mov	r1, sl
 800502c:	018a      	lsls	r2, r1, #6
 800502e:	4651      	mov	r1, sl
 8005030:	ebb2 0801 	subs.w	r8, r2, r1
 8005034:	4659      	mov	r1, fp
 8005036:	eb63 0901 	sbc.w	r9, r3, r1
 800503a:	f04f 0200 	mov.w	r2, #0
 800503e:	f04f 0300 	mov.w	r3, #0
 8005042:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005046:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800504a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800504e:	4690      	mov	r8, r2
 8005050:	4699      	mov	r9, r3
 8005052:	4623      	mov	r3, r4
 8005054:	eb18 0303 	adds.w	r3, r8, r3
 8005058:	60bb      	str	r3, [r7, #8]
 800505a:	462b      	mov	r3, r5
 800505c:	eb49 0303 	adc.w	r3, r9, r3
 8005060:	60fb      	str	r3, [r7, #12]
 8005062:	f04f 0200 	mov.w	r2, #0
 8005066:	f04f 0300 	mov.w	r3, #0
 800506a:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800506e:	4629      	mov	r1, r5
 8005070:	024b      	lsls	r3, r1, #9
 8005072:	4621      	mov	r1, r4
 8005074:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005078:	4621      	mov	r1, r4
 800507a:	024a      	lsls	r2, r1, #9
 800507c:	4610      	mov	r0, r2
 800507e:	4619      	mov	r1, r3
 8005080:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005082:	2200      	movs	r2, #0
 8005084:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005086:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005088:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800508c:	f7fb fe04 	bl	8000c98 <__aeabi_uldivmod>
 8005090:	4602      	mov	r2, r0
 8005092:	460b      	mov	r3, r1
 8005094:	4613      	mov	r3, r2
 8005096:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005098:	e058      	b.n	800514c <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800509a:	4b38      	ldr	r3, [pc, #224]	@ (800517c <HAL_RCC_GetSysClockFreq+0x200>)
 800509c:	685b      	ldr	r3, [r3, #4]
 800509e:	099b      	lsrs	r3, r3, #6
 80050a0:	2200      	movs	r2, #0
 80050a2:	4618      	mov	r0, r3
 80050a4:	4611      	mov	r1, r2
 80050a6:	f3c0 0308 	ubfx	r3, r0, #0, #9
 80050aa:	623b      	str	r3, [r7, #32]
 80050ac:	2300      	movs	r3, #0
 80050ae:	627b      	str	r3, [r7, #36]	@ 0x24
 80050b0:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80050b4:	4642      	mov	r2, r8
 80050b6:	464b      	mov	r3, r9
 80050b8:	f04f 0000 	mov.w	r0, #0
 80050bc:	f04f 0100 	mov.w	r1, #0
 80050c0:	0159      	lsls	r1, r3, #5
 80050c2:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050c6:	0150      	lsls	r0, r2, #5
 80050c8:	4602      	mov	r2, r0
 80050ca:	460b      	mov	r3, r1
 80050cc:	4641      	mov	r1, r8
 80050ce:	ebb2 0a01 	subs.w	sl, r2, r1
 80050d2:	4649      	mov	r1, r9
 80050d4:	eb63 0b01 	sbc.w	fp, r3, r1
 80050d8:	f04f 0200 	mov.w	r2, #0
 80050dc:	f04f 0300 	mov.w	r3, #0
 80050e0:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80050e4:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80050e8:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80050ec:	ebb2 040a 	subs.w	r4, r2, sl
 80050f0:	eb63 050b 	sbc.w	r5, r3, fp
 80050f4:	f04f 0200 	mov.w	r2, #0
 80050f8:	f04f 0300 	mov.w	r3, #0
 80050fc:	00eb      	lsls	r3, r5, #3
 80050fe:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005102:	00e2      	lsls	r2, r4, #3
 8005104:	4614      	mov	r4, r2
 8005106:	461d      	mov	r5, r3
 8005108:	4643      	mov	r3, r8
 800510a:	18e3      	adds	r3, r4, r3
 800510c:	603b      	str	r3, [r7, #0]
 800510e:	464b      	mov	r3, r9
 8005110:	eb45 0303 	adc.w	r3, r5, r3
 8005114:	607b      	str	r3, [r7, #4]
 8005116:	f04f 0200 	mov.w	r2, #0
 800511a:	f04f 0300 	mov.w	r3, #0
 800511e:	e9d7 4500 	ldrd	r4, r5, [r7]
 8005122:	4629      	mov	r1, r5
 8005124:	028b      	lsls	r3, r1, #10
 8005126:	4621      	mov	r1, r4
 8005128:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 800512c:	4621      	mov	r1, r4
 800512e:	028a      	lsls	r2, r1, #10
 8005130:	4610      	mov	r0, r2
 8005132:	4619      	mov	r1, r3
 8005134:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005136:	2200      	movs	r2, #0
 8005138:	61bb      	str	r3, [r7, #24]
 800513a:	61fa      	str	r2, [r7, #28]
 800513c:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005140:	f7fb fdaa 	bl	8000c98 <__aeabi_uldivmod>
 8005144:	4602      	mov	r2, r0
 8005146:	460b      	mov	r3, r1
 8005148:	4613      	mov	r3, r2
 800514a:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 800514c:	4b0b      	ldr	r3, [pc, #44]	@ (800517c <HAL_RCC_GetSysClockFreq+0x200>)
 800514e:	685b      	ldr	r3, [r3, #4]
 8005150:	0c1b      	lsrs	r3, r3, #16
 8005152:	f003 0303 	and.w	r3, r3, #3
 8005156:	3301      	adds	r3, #1
 8005158:	005b      	lsls	r3, r3, #1
 800515a:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 800515c:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800515e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8005160:	fbb2 f3f3 	udiv	r3, r2, r3
 8005164:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005166:	e002      	b.n	800516e <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005168:	4b05      	ldr	r3, [pc, #20]	@ (8005180 <HAL_RCC_GetSysClockFreq+0x204>)
 800516a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 800516c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800516e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8005170:	4618      	mov	r0, r3
 8005172:	3750      	adds	r7, #80	@ 0x50
 8005174:	46bd      	mov	sp, r7
 8005176:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800517a:	bf00      	nop
 800517c:	40023800 	.word	0x40023800
 8005180:	00f42400 	.word	0x00f42400
 8005184:	007a1200 	.word	0x007a1200

08005188 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005188:	b480      	push	{r7}
 800518a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800518c:	4b03      	ldr	r3, [pc, #12]	@ (800519c <HAL_RCC_GetHCLKFreq+0x14>)
 800518e:	681b      	ldr	r3, [r3, #0]
}
 8005190:	4618      	mov	r0, r3
 8005192:	46bd      	mov	sp, r7
 8005194:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005198:	4770      	bx	lr
 800519a:	bf00      	nop
 800519c:	20000008 	.word	0x20000008

080051a0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80051a0:	b580      	push	{r7, lr}
 80051a2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80051a4:	f7ff fff0 	bl	8005188 <HAL_RCC_GetHCLKFreq>
 80051a8:	4602      	mov	r2, r0
 80051aa:	4b05      	ldr	r3, [pc, #20]	@ (80051c0 <HAL_RCC_GetPCLK1Freq+0x20>)
 80051ac:	689b      	ldr	r3, [r3, #8]
 80051ae:	0a9b      	lsrs	r3, r3, #10
 80051b0:	f003 0307 	and.w	r3, r3, #7
 80051b4:	4903      	ldr	r1, [pc, #12]	@ (80051c4 <HAL_RCC_GetPCLK1Freq+0x24>)
 80051b6:	5ccb      	ldrb	r3, [r1, r3]
 80051b8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051bc:	4618      	mov	r0, r3
 80051be:	bd80      	pop	{r7, pc}
 80051c0:	40023800 	.word	0x40023800
 80051c4:	0800af24 	.word	0x0800af24

080051c8 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80051c8:	b580      	push	{r7, lr}
 80051ca:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80051cc:	f7ff ffdc 	bl	8005188 <HAL_RCC_GetHCLKFreq>
 80051d0:	4602      	mov	r2, r0
 80051d2:	4b05      	ldr	r3, [pc, #20]	@ (80051e8 <HAL_RCC_GetPCLK2Freq+0x20>)
 80051d4:	689b      	ldr	r3, [r3, #8]
 80051d6:	0b5b      	lsrs	r3, r3, #13
 80051d8:	f003 0307 	and.w	r3, r3, #7
 80051dc:	4903      	ldr	r1, [pc, #12]	@ (80051ec <HAL_RCC_GetPCLK2Freq+0x24>)
 80051de:	5ccb      	ldrb	r3, [r1, r3]
 80051e0:	fa22 f303 	lsr.w	r3, r2, r3
}
 80051e4:	4618      	mov	r0, r3
 80051e6:	bd80      	pop	{r7, pc}
 80051e8:	40023800 	.word	0x40023800
 80051ec:	0800af24 	.word	0x0800af24

080051f0 <HAL_SPI_Init>:
  * @param  hspi pointer to a SPI_HandleTypeDef structure that contains
  *               the configuration information for SPI module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_SPI_Init(SPI_HandleTypeDef *hspi)
{
 80051f0:	b580      	push	{r7, lr}
 80051f2:	b082      	sub	sp, #8
 80051f4:	af00      	add	r7, sp, #0
 80051f6:	6078      	str	r0, [r7, #4]
  /* Check the SPI handle allocation */
  if (hspi == NULL)
 80051f8:	687b      	ldr	r3, [r7, #4]
 80051fa:	2b00      	cmp	r3, #0
 80051fc:	d101      	bne.n	8005202 <HAL_SPI_Init+0x12>
  {
    return HAL_ERROR;
 80051fe:	2301      	movs	r3, #1
 8005200:	e07b      	b.n	80052fa <HAL_SPI_Init+0x10a>
  assert_param(IS_SPI_DATASIZE(hspi->Init.DataSize));
  assert_param(IS_SPI_NSS(hspi->Init.NSS));
  assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
  assert_param(IS_SPI_FIRST_BIT(hspi->Init.FirstBit));
  assert_param(IS_SPI_TIMODE(hspi->Init.TIMode));
  if (hspi->Init.TIMode == SPI_TIMODE_DISABLE)
 8005202:	687b      	ldr	r3, [r7, #4]
 8005204:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8005206:	2b00      	cmp	r3, #0
 8005208:	d108      	bne.n	800521c <HAL_SPI_Init+0x2c>
  {
    assert_param(IS_SPI_CPOL(hspi->Init.CLKPolarity));
    assert_param(IS_SPI_CPHA(hspi->Init.CLKPhase));

    if (hspi->Init.Mode == SPI_MODE_MASTER)
 800520a:	687b      	ldr	r3, [r7, #4]
 800520c:	685b      	ldr	r3, [r3, #4]
 800520e:	f5b3 7f82 	cmp.w	r3, #260	@ 0x104
 8005212:	d009      	beq.n	8005228 <HAL_SPI_Init+0x38>
      assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));
    }
    else
    {
      /* Baudrate prescaler not use in Motoraola Slave mode. force to default value */
      hspi->Init.BaudRatePrescaler = SPI_BAUDRATEPRESCALER_2;
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	2200      	movs	r2, #0
 8005218:	61da      	str	r2, [r3, #28]
 800521a:	e005      	b.n	8005228 <HAL_SPI_Init+0x38>
  else
  {
    assert_param(IS_SPI_BAUDRATE_PRESCALER(hspi->Init.BaudRatePrescaler));

    /* Force polarity and phase to TI protocaol requirements */
    hspi->Init.CLKPolarity = SPI_POLARITY_LOW;
 800521c:	687b      	ldr	r3, [r7, #4]
 800521e:	2200      	movs	r2, #0
 8005220:	611a      	str	r2, [r3, #16]
    hspi->Init.CLKPhase    = SPI_PHASE_1EDGE;
 8005222:	687b      	ldr	r3, [r7, #4]
 8005224:	2200      	movs	r2, #0
 8005226:	615a      	str	r2, [r3, #20]
  if (hspi->Init.CRCCalculation == SPI_CRCCALCULATION_ENABLE)
  {
    assert_param(IS_SPI_CRC_POLYNOMIAL(hspi->Init.CRCPolynomial));
  }
#else
  hspi->Init.CRCCalculation = SPI_CRCCALCULATION_DISABLE;
 8005228:	687b      	ldr	r3, [r7, #4]
 800522a:	2200      	movs	r2, #0
 800522c:	629a      	str	r2, [r3, #40]	@ 0x28
#endif /* USE_SPI_CRC */

  if (hspi->State == HAL_SPI_STATE_RESET)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	f893 3051 	ldrb.w	r3, [r3, #81]	@ 0x51
 8005234:	b2db      	uxtb	r3, r3
 8005236:	2b00      	cmp	r3, #0
 8005238:	d106      	bne.n	8005248 <HAL_SPI_Init+0x58>
  {
    /* Allocate lock resource and initialize it */
    hspi->Lock = HAL_UNLOCKED;
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	2200      	movs	r2, #0
 800523e:	f883 2050 	strb.w	r2, [r3, #80]	@ 0x50

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hspi->MspInitCallback(hspi);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_SPI_MspInit(hspi);
 8005242:	6878      	ldr	r0, [r7, #4]
 8005244:	f7fc fee2 	bl	800200c <HAL_SPI_MspInit>
#endif /* USE_HAL_SPI_REGISTER_CALLBACKS */
  }

  hspi->State = HAL_SPI_STATE_BUSY;
 8005248:	687b      	ldr	r3, [r7, #4]
 800524a:	2202      	movs	r2, #2
 800524c:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  /* Disable the selected SPI peripheral */
  __HAL_SPI_DISABLE(hspi);
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	681b      	ldr	r3, [r3, #0]
 8005254:	681a      	ldr	r2, [r3, #0]
 8005256:	687b      	ldr	r3, [r7, #4]
 8005258:	681b      	ldr	r3, [r3, #0]
 800525a:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 800525e:	601a      	str	r2, [r3, #0]

  /*----------------------- SPIx CR1 & CR2 Configuration ---------------------*/
  /* Configure : SPI Mode, Communication Mode, Data size, Clock polarity and phase, NSS management,
  Communication speed, First bit and CRC calculation state */
  WRITE_REG(hspi->Instance->CR1, ((hspi->Init.Mode & (SPI_CR1_MSTR | SPI_CR1_SSI)) |
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	685b      	ldr	r3, [r3, #4]
 8005264:	f403 7282 	and.w	r2, r3, #260	@ 0x104
 8005268:	687b      	ldr	r3, [r7, #4]
 800526a:	689b      	ldr	r3, [r3, #8]
 800526c:	f403 4304 	and.w	r3, r3, #33792	@ 0x8400
 8005270:	431a      	orrs	r2, r3
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	68db      	ldr	r3, [r3, #12]
 8005276:	f403 6300 	and.w	r3, r3, #2048	@ 0x800
 800527a:	431a      	orrs	r2, r3
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	691b      	ldr	r3, [r3, #16]
 8005280:	f003 0302 	and.w	r3, r3, #2
 8005284:	431a      	orrs	r2, r3
 8005286:	687b      	ldr	r3, [r7, #4]
 8005288:	695b      	ldr	r3, [r3, #20]
 800528a:	f003 0301 	and.w	r3, r3, #1
 800528e:	431a      	orrs	r2, r3
 8005290:	687b      	ldr	r3, [r7, #4]
 8005292:	699b      	ldr	r3, [r3, #24]
 8005294:	f403 7300 	and.w	r3, r3, #512	@ 0x200
 8005298:	431a      	orrs	r2, r3
 800529a:	687b      	ldr	r3, [r7, #4]
 800529c:	69db      	ldr	r3, [r3, #28]
 800529e:	f003 0338 	and.w	r3, r3, #56	@ 0x38
 80052a2:	431a      	orrs	r2, r3
 80052a4:	687b      	ldr	r3, [r7, #4]
 80052a6:	6a1b      	ldr	r3, [r3, #32]
 80052a8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80052ac:	ea42 0103 	orr.w	r1, r2, r3
 80052b0:	687b      	ldr	r3, [r7, #4]
 80052b2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80052b4:	f403 5200 	and.w	r2, r3, #8192	@ 0x2000
 80052b8:	687b      	ldr	r3, [r7, #4]
 80052ba:	681b      	ldr	r3, [r3, #0]
 80052bc:	430a      	orrs	r2, r1
 80052be:	601a      	str	r2, [r3, #0]
                                  (hspi->Init.BaudRatePrescaler & SPI_CR1_BR_Msk) |
                                  (hspi->Init.FirstBit  & SPI_CR1_LSBFIRST) |
                                  (hspi->Init.CRCCalculation & SPI_CR1_CRCEN)));

  /* Configure : NSS management, TI Mode */
  WRITE_REG(hspi->Instance->CR2, (((hspi->Init.NSS >> 16U) & SPI_CR2_SSOE) | (hspi->Init.TIMode & SPI_CR2_FRF)));
 80052c0:	687b      	ldr	r3, [r7, #4]
 80052c2:	699b      	ldr	r3, [r3, #24]
 80052c4:	0c1b      	lsrs	r3, r3, #16
 80052c6:	f003 0104 	and.w	r1, r3, #4
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80052ce:	f003 0210 	and.w	r2, r3, #16
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	430a      	orrs	r2, r1
 80052d8:	605a      	str	r2, [r3, #4]
  }
#endif /* USE_SPI_CRC */

#if defined(SPI_I2SCFGR_I2SMOD)
  /* Activate the SPI mode (Make sure that I2SMOD bit in I2SCFGR register is reset) */
  CLEAR_BIT(hspi->Instance->I2SCFGR, SPI_I2SCFGR_I2SMOD);
 80052da:	687b      	ldr	r3, [r7, #4]
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	69da      	ldr	r2, [r3, #28]
 80052e0:	687b      	ldr	r3, [r7, #4]
 80052e2:	681b      	ldr	r3, [r3, #0]
 80052e4:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80052e8:	61da      	str	r2, [r3, #28]
#endif /* SPI_I2SCFGR_I2SMOD */

  hspi->ErrorCode = HAL_SPI_ERROR_NONE;
 80052ea:	687b      	ldr	r3, [r7, #4]
 80052ec:	2200      	movs	r2, #0
 80052ee:	655a      	str	r2, [r3, #84]	@ 0x54
  hspi->State     = HAL_SPI_STATE_READY;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2201      	movs	r2, #1
 80052f4:	f883 2051 	strb.w	r2, [r3, #81]	@ 0x51

  return HAL_OK;
 80052f8:	2300      	movs	r3, #0
}
 80052fa:	4618      	mov	r0, r3
 80052fc:	3708      	adds	r7, #8
 80052fe:	46bd      	mov	sp, r7
 8005300:	bd80      	pop	{r7, pc}

08005302 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8005302:	b580      	push	{r7, lr}
 8005304:	b082      	sub	sp, #8
 8005306:	af00      	add	r7, sp, #0
 8005308:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 800530a:	687b      	ldr	r3, [r7, #4]
 800530c:	2b00      	cmp	r3, #0
 800530e:	d101      	bne.n	8005314 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8005310:	2301      	movs	r3, #1
 8005312:	e042      	b.n	800539a <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8005314:	687b      	ldr	r3, [r7, #4]
 8005316:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800531a:	b2db      	uxtb	r3, r3
 800531c:	2b00      	cmp	r3, #0
 800531e:	d106      	bne.n	800532e <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	2200      	movs	r2, #0
 8005324:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005328:	6878      	ldr	r0, [r7, #4]
 800532a:	f7fc feb7 	bl	800209c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 800532e:	687b      	ldr	r3, [r7, #4]
 8005330:	2224      	movs	r2, #36	@ 0x24
 8005332:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	68da      	ldr	r2, [r3, #12]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8005344:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005346:	6878      	ldr	r0, [r7, #4]
 8005348:	f000 fdbe 	bl	8005ec8 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	691a      	ldr	r2, [r3, #16]
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 800535a:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	681b      	ldr	r3, [r3, #0]
 8005360:	695a      	ldr	r2, [r3, #20]
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	681b      	ldr	r3, [r3, #0]
 8005366:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 800536a:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	681b      	ldr	r3, [r3, #0]
 8005370:	68da      	ldr	r2, [r3, #12]
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	681b      	ldr	r3, [r3, #0]
 8005376:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 800537a:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 800537c:	687b      	ldr	r3, [r7, #4]
 800537e:	2200      	movs	r2, #0
 8005380:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8005382:	687b      	ldr	r3, [r7, #4]
 8005384:	2220      	movs	r2, #32
 8005386:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 800538a:	687b      	ldr	r3, [r7, #4]
 800538c:	2220      	movs	r2, #32
 800538e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005392:	687b      	ldr	r3, [r7, #4]
 8005394:	2200      	movs	r2, #0
 8005396:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005398:	2300      	movs	r3, #0
}
 800539a:	4618      	mov	r0, r3
 800539c:	3708      	adds	r7, #8
 800539e:	46bd      	mov	sp, r7
 80053a0:	bd80      	pop	{r7, pc}

080053a2 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80053a2:	b580      	push	{r7, lr}
 80053a4:	b08a      	sub	sp, #40	@ 0x28
 80053a6:	af02      	add	r7, sp, #8
 80053a8:	60f8      	str	r0, [r7, #12]
 80053aa:	60b9      	str	r1, [r7, #8]
 80053ac:	603b      	str	r3, [r7, #0]
 80053ae:	4613      	mov	r3, r2
 80053b0:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 80053b2:	2300      	movs	r3, #0
 80053b4:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80053b6:	68fb      	ldr	r3, [r7, #12]
 80053b8:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80053bc:	b2db      	uxtb	r3, r3
 80053be:	2b20      	cmp	r3, #32
 80053c0:	d175      	bne.n	80054ae <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 80053c2:	68bb      	ldr	r3, [r7, #8]
 80053c4:	2b00      	cmp	r3, #0
 80053c6:	d002      	beq.n	80053ce <HAL_UART_Transmit+0x2c>
 80053c8:	88fb      	ldrh	r3, [r7, #6]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d101      	bne.n	80053d2 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 80053ce:	2301      	movs	r3, #1
 80053d0:	e06e      	b.n	80054b0 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80053d2:	68fb      	ldr	r3, [r7, #12]
 80053d4:	2200      	movs	r2, #0
 80053d6:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80053d8:	68fb      	ldr	r3, [r7, #12]
 80053da:	2221      	movs	r2, #33	@ 0x21
 80053dc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80053e0:	f7fd fa58 	bl	8002894 <HAL_GetTick>
 80053e4:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 80053e6:	68fb      	ldr	r3, [r7, #12]
 80053e8:	88fa      	ldrh	r2, [r7, #6]
 80053ea:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 80053ec:	68fb      	ldr	r3, [r7, #12]
 80053ee:	88fa      	ldrh	r2, [r7, #6]
 80053f0:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80053f2:	68fb      	ldr	r3, [r7, #12]
 80053f4:	689b      	ldr	r3, [r3, #8]
 80053f6:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80053fa:	d108      	bne.n	800540e <HAL_UART_Transmit+0x6c>
 80053fc:	68fb      	ldr	r3, [r7, #12]
 80053fe:	691b      	ldr	r3, [r3, #16]
 8005400:	2b00      	cmp	r3, #0
 8005402:	d104      	bne.n	800540e <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8005404:	2300      	movs	r3, #0
 8005406:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8005408:	68bb      	ldr	r3, [r7, #8]
 800540a:	61bb      	str	r3, [r7, #24]
 800540c:	e003      	b.n	8005416 <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 800540e:	68bb      	ldr	r3, [r7, #8]
 8005410:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8005412:	2300      	movs	r3, #0
 8005414:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8005416:	e02e      	b.n	8005476 <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8005418:	683b      	ldr	r3, [r7, #0]
 800541a:	9300      	str	r3, [sp, #0]
 800541c:	697b      	ldr	r3, [r7, #20]
 800541e:	2200      	movs	r2, #0
 8005420:	2180      	movs	r1, #128	@ 0x80
 8005422:	68f8      	ldr	r0, [r7, #12]
 8005424:	f000 fb20 	bl	8005a68 <UART_WaitOnFlagUntilTimeout>
 8005428:	4603      	mov	r3, r0
 800542a:	2b00      	cmp	r3, #0
 800542c:	d005      	beq.n	800543a <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 800542e:	68fb      	ldr	r3, [r7, #12]
 8005430:	2220      	movs	r2, #32
 8005432:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8005436:	2303      	movs	r3, #3
 8005438:	e03a      	b.n	80054b0 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 800543a:	69fb      	ldr	r3, [r7, #28]
 800543c:	2b00      	cmp	r3, #0
 800543e:	d10b      	bne.n	8005458 <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8005440:	69bb      	ldr	r3, [r7, #24]
 8005442:	881b      	ldrh	r3, [r3, #0]
 8005444:	461a      	mov	r2, r3
 8005446:	68fb      	ldr	r3, [r7, #12]
 8005448:	681b      	ldr	r3, [r3, #0]
 800544a:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800544e:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8005450:	69bb      	ldr	r3, [r7, #24]
 8005452:	3302      	adds	r3, #2
 8005454:	61bb      	str	r3, [r7, #24]
 8005456:	e007      	b.n	8005468 <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8005458:	69fb      	ldr	r3, [r7, #28]
 800545a:	781a      	ldrb	r2, [r3, #0]
 800545c:	68fb      	ldr	r3, [r7, #12]
 800545e:	681b      	ldr	r3, [r3, #0]
 8005460:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8005462:	69fb      	ldr	r3, [r7, #28]
 8005464:	3301      	adds	r3, #1
 8005466:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8005468:	68fb      	ldr	r3, [r7, #12]
 800546a:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800546c:	b29b      	uxth	r3, r3
 800546e:	3b01      	subs	r3, #1
 8005470:	b29a      	uxth	r2, r3
 8005472:	68fb      	ldr	r3, [r7, #12]
 8005474:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8005476:	68fb      	ldr	r3, [r7, #12]
 8005478:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800547a:	b29b      	uxth	r3, r3
 800547c:	2b00      	cmp	r3, #0
 800547e:	d1cb      	bne.n	8005418 <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8005480:	683b      	ldr	r3, [r7, #0]
 8005482:	9300      	str	r3, [sp, #0]
 8005484:	697b      	ldr	r3, [r7, #20]
 8005486:	2200      	movs	r2, #0
 8005488:	2140      	movs	r1, #64	@ 0x40
 800548a:	68f8      	ldr	r0, [r7, #12]
 800548c:	f000 faec 	bl	8005a68 <UART_WaitOnFlagUntilTimeout>
 8005490:	4603      	mov	r3, r0
 8005492:	2b00      	cmp	r3, #0
 8005494:	d005      	beq.n	80054a2 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8005496:	68fb      	ldr	r3, [r7, #12]
 8005498:	2220      	movs	r2, #32
 800549a:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 800549e:	2303      	movs	r3, #3
 80054a0:	e006      	b.n	80054b0 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 80054a2:	68fb      	ldr	r3, [r7, #12]
 80054a4:	2220      	movs	r2, #32
 80054a6:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 80054aa:	2300      	movs	r3, #0
 80054ac:	e000      	b.n	80054b0 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 80054ae:	2302      	movs	r3, #2
  }
}
 80054b0:	4618      	mov	r0, r3
 80054b2:	3720      	adds	r7, #32
 80054b4:	46bd      	mov	sp, r7
 80054b6:	bd80      	pop	{r7, pc}

080054b8 <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80054b8:	b580      	push	{r7, lr}
 80054ba:	b084      	sub	sp, #16
 80054bc:	af00      	add	r7, sp, #0
 80054be:	60f8      	str	r0, [r7, #12]
 80054c0:	60b9      	str	r1, [r7, #8]
 80054c2:	4613      	mov	r3, r2
 80054c4:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80054c6:	68fb      	ldr	r3, [r7, #12]
 80054c8:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80054cc:	b2db      	uxtb	r3, r3
 80054ce:	2b20      	cmp	r3, #32
 80054d0:	d112      	bne.n	80054f8 <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 80054d2:	68bb      	ldr	r3, [r7, #8]
 80054d4:	2b00      	cmp	r3, #0
 80054d6:	d002      	beq.n	80054de <HAL_UART_Receive_IT+0x26>
 80054d8:	88fb      	ldrh	r3, [r7, #6]
 80054da:	2b00      	cmp	r3, #0
 80054dc:	d101      	bne.n	80054e2 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80054de:	2301      	movs	r3, #1
 80054e0:	e00b      	b.n	80054fa <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	2200      	movs	r2, #0
 80054e6:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 80054e8:	88fb      	ldrh	r3, [r7, #6]
 80054ea:	461a      	mov	r2, r3
 80054ec:	68b9      	ldr	r1, [r7, #8]
 80054ee:	68f8      	ldr	r0, [r7, #12]
 80054f0:	f000 fb13 	bl	8005b1a <UART_Start_Receive_IT>
 80054f4:	4603      	mov	r3, r0
 80054f6:	e000      	b.n	80054fa <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 80054f8:	2302      	movs	r3, #2
  }
}
 80054fa:	4618      	mov	r0, r3
 80054fc:	3710      	adds	r7, #16
 80054fe:	46bd      	mov	sp, r7
 8005500:	bd80      	pop	{r7, pc}
	...

08005504 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8005504:	b580      	push	{r7, lr}
 8005506:	b0ba      	sub	sp, #232	@ 0xe8
 8005508:	af00      	add	r7, sp, #0
 800550a:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 800550c:	687b      	ldr	r3, [r7, #4]
 800550e:	681b      	ldr	r3, [r3, #0]
 8005510:	681b      	ldr	r3, [r3, #0]
 8005512:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8005516:	687b      	ldr	r3, [r7, #4]
 8005518:	681b      	ldr	r3, [r3, #0]
 800551a:	68db      	ldr	r3, [r3, #12]
 800551c:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005520:	687b      	ldr	r3, [r7, #4]
 8005522:	681b      	ldr	r3, [r3, #0]
 8005524:	695b      	ldr	r3, [r3, #20]
 8005526:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 800552a:	2300      	movs	r3, #0
 800552c:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8005530:	2300      	movs	r3, #0
 8005532:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8005536:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800553a:	f003 030f 	and.w	r3, r3, #15
 800553e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8005542:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8005546:	2b00      	cmp	r3, #0
 8005548:	d10f      	bne.n	800556a <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 800554a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800554e:	f003 0320 	and.w	r3, r3, #32
 8005552:	2b00      	cmp	r3, #0
 8005554:	d009      	beq.n	800556a <HAL_UART_IRQHandler+0x66>
 8005556:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800555a:	f003 0320 	and.w	r3, r3, #32
 800555e:	2b00      	cmp	r3, #0
 8005560:	d003      	beq.n	800556a <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8005562:	6878      	ldr	r0, [r7, #4]
 8005564:	f000 fbf2 	bl	8005d4c <UART_Receive_IT>
      return;
 8005568:	e25b      	b.n	8005a22 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 800556a:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 800556e:	2b00      	cmp	r3, #0
 8005570:	f000 80de 	beq.w	8005730 <HAL_UART_IRQHandler+0x22c>
 8005574:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005578:	f003 0301 	and.w	r3, r3, #1
 800557c:	2b00      	cmp	r3, #0
 800557e:	d106      	bne.n	800558e <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8005580:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005584:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005588:	2b00      	cmp	r3, #0
 800558a:	f000 80d1 	beq.w	8005730 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800558e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005592:	f003 0301 	and.w	r3, r3, #1
 8005596:	2b00      	cmp	r3, #0
 8005598:	d00b      	beq.n	80055b2 <HAL_UART_IRQHandler+0xae>
 800559a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800559e:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80055a2:	2b00      	cmp	r3, #0
 80055a4:	d005      	beq.n	80055b2 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055aa:	f043 0201 	orr.w	r2, r3, #1
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055b6:	f003 0304 	and.w	r3, r3, #4
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d00b      	beq.n	80055d6 <HAL_UART_IRQHandler+0xd2>
 80055be:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055c2:	f003 0301 	and.w	r3, r3, #1
 80055c6:	2b00      	cmp	r3, #0
 80055c8:	d005      	beq.n	80055d6 <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055ce:	f043 0202 	orr.w	r2, r3, #2
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80055d6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055da:	f003 0302 	and.w	r3, r3, #2
 80055de:	2b00      	cmp	r3, #0
 80055e0:	d00b      	beq.n	80055fa <HAL_UART_IRQHandler+0xf6>
 80055e2:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80055e6:	f003 0301 	and.w	r3, r3, #1
 80055ea:	2b00      	cmp	r3, #0
 80055ec:	d005      	beq.n	80055fa <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80055f2:	f043 0204 	orr.w	r2, r3, #4
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 80055fa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055fe:	f003 0308 	and.w	r3, r3, #8
 8005602:	2b00      	cmp	r3, #0
 8005604:	d011      	beq.n	800562a <HAL_UART_IRQHandler+0x126>
 8005606:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800560a:	f003 0320 	and.w	r3, r3, #32
 800560e:	2b00      	cmp	r3, #0
 8005610:	d105      	bne.n	800561e <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8005612:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8005616:	f003 0301 	and.w	r3, r3, #1
 800561a:	2b00      	cmp	r3, #0
 800561c:	d005      	beq.n	800562a <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 800561e:	687b      	ldr	r3, [r7, #4]
 8005620:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005622:	f043 0208 	orr.w	r2, r3, #8
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800562e:	2b00      	cmp	r3, #0
 8005630:	f000 81f2 	beq.w	8005a18 <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8005634:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005638:	f003 0320 	and.w	r3, r3, #32
 800563c:	2b00      	cmp	r3, #0
 800563e:	d008      	beq.n	8005652 <HAL_UART_IRQHandler+0x14e>
 8005640:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005644:	f003 0320 	and.w	r3, r3, #32
 8005648:	2b00      	cmp	r3, #0
 800564a:	d002      	beq.n	8005652 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 800564c:	6878      	ldr	r0, [r7, #4]
 800564e:	f000 fb7d 	bl	8005d4c <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	695b      	ldr	r3, [r3, #20]
 8005658:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800565c:	2b40      	cmp	r3, #64	@ 0x40
 800565e:	bf0c      	ite	eq
 8005660:	2301      	moveq	r3, #1
 8005662:	2300      	movne	r3, #0
 8005664:	b2db      	uxtb	r3, r3
 8005666:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 800566a:	687b      	ldr	r3, [r7, #4]
 800566c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800566e:	f003 0308 	and.w	r3, r3, #8
 8005672:	2b00      	cmp	r3, #0
 8005674:	d103      	bne.n	800567e <HAL_UART_IRQHandler+0x17a>
 8005676:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 800567a:	2b00      	cmp	r3, #0
 800567c:	d04f      	beq.n	800571e <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 800567e:	6878      	ldr	r0, [r7, #4]
 8005680:	f000 fa85 	bl	8005b8e <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	681b      	ldr	r3, [r3, #0]
 8005688:	695b      	ldr	r3, [r3, #20]
 800568a:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 800568e:	2b40      	cmp	r3, #64	@ 0x40
 8005690:	d141      	bne.n	8005716 <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	681b      	ldr	r3, [r3, #0]
 8005696:	3314      	adds	r3, #20
 8005698:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800569c:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 80056a0:	e853 3f00 	ldrex	r3, [r3]
 80056a4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 80056a8:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 80056ac:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056b0:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80056b4:	687b      	ldr	r3, [r7, #4]
 80056b6:	681b      	ldr	r3, [r3, #0]
 80056b8:	3314      	adds	r3, #20
 80056ba:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 80056be:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 80056c2:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056c6:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 80056ca:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 80056ce:	e841 2300 	strex	r3, r2, [r1]
 80056d2:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 80056d6:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 80056da:	2b00      	cmp	r3, #0
 80056dc:	d1d9      	bne.n	8005692 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056e2:	2b00      	cmp	r3, #0
 80056e4:	d013      	beq.n	800570e <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056ea:	4a7e      	ldr	r2, [pc, #504]	@ (80058e4 <HAL_UART_IRQHandler+0x3e0>)
 80056ec:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80056f2:	4618      	mov	r0, r3
 80056f4:	f7fd fa7f 	bl	8002bf6 <HAL_DMA_Abort_IT>
 80056f8:	4603      	mov	r3, r0
 80056fa:	2b00      	cmp	r3, #0
 80056fc:	d016      	beq.n	800572c <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005702:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8005704:	687a      	ldr	r2, [r7, #4]
 8005706:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005708:	4610      	mov	r0, r2
 800570a:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800570c:	e00e      	b.n	800572c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 800570e:	6878      	ldr	r0, [r7, #4]
 8005710:	f000 f994 	bl	8005a3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005714:	e00a      	b.n	800572c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8005716:	6878      	ldr	r0, [r7, #4]
 8005718:	f000 f990 	bl	8005a3c <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800571c:	e006      	b.n	800572c <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 800571e:	6878      	ldr	r0, [r7, #4]
 8005720:	f000 f98c 	bl	8005a3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005724:	687b      	ldr	r3, [r7, #4]
 8005726:	2200      	movs	r2, #0
 8005728:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 800572a:	e175      	b.n	8005a18 <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800572c:	bf00      	nop
    return;
 800572e:	e173      	b.n	8005a18 <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005734:	2b01      	cmp	r3, #1
 8005736:	f040 814f 	bne.w	80059d8 <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 800573a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800573e:	f003 0310 	and.w	r3, r3, #16
 8005742:	2b00      	cmp	r3, #0
 8005744:	f000 8148 	beq.w	80059d8 <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 8005748:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800574c:	f003 0310 	and.w	r3, r3, #16
 8005750:	2b00      	cmp	r3, #0
 8005752:	f000 8141 	beq.w	80059d8 <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005756:	2300      	movs	r3, #0
 8005758:	60bb      	str	r3, [r7, #8]
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	681b      	ldr	r3, [r3, #0]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	60bb      	str	r3, [r7, #8]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	681b      	ldr	r3, [r3, #0]
 8005766:	685b      	ldr	r3, [r3, #4]
 8005768:	60bb      	str	r3, [r7, #8]
 800576a:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800576c:	687b      	ldr	r3, [r7, #4]
 800576e:	681b      	ldr	r3, [r3, #0]
 8005770:	695b      	ldr	r3, [r3, #20]
 8005772:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005776:	2b40      	cmp	r3, #64	@ 0x40
 8005778:	f040 80b6 	bne.w	80058e8 <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800577c:	687b      	ldr	r3, [r7, #4]
 800577e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005780:	681b      	ldr	r3, [r3, #0]
 8005782:	685b      	ldr	r3, [r3, #4]
 8005784:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005788:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 800578c:	2b00      	cmp	r3, #0
 800578e:	f000 8145 	beq.w	8005a1c <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8005792:	687b      	ldr	r3, [r7, #4]
 8005794:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005796:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800579a:	429a      	cmp	r2, r3
 800579c:	f080 813e 	bcs.w	8005a1c <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 80057a6:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80057ac:	69db      	ldr	r3, [r3, #28]
 80057ae:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80057b2:	f000 8088 	beq.w	80058c6 <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	330c      	adds	r3, #12
 80057bc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057c0:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 80057c4:	e853 3f00 	ldrex	r3, [r3]
 80057c8:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 80057cc:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 80057d0:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 80057d4:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	681b      	ldr	r3, [r3, #0]
 80057dc:	330c      	adds	r3, #12
 80057de:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 80057e2:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 80057e6:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057ea:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 80057ee:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 80057f2:	e841 2300 	strex	r3, r2, [r1]
 80057f6:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 80057fa:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 80057fe:	2b00      	cmp	r3, #0
 8005800:	d1d9      	bne.n	80057b6 <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	681b      	ldr	r3, [r3, #0]
 8005806:	3314      	adds	r3, #20
 8005808:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800580a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 800580c:	e853 3f00 	ldrex	r3, [r3]
 8005810:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8005812:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8005814:	f023 0301 	bic.w	r3, r3, #1
 8005818:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	3314      	adds	r3, #20
 8005822:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 8005826:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 800582a:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800582c:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 800582e:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 8005832:	e841 2300 	strex	r3, r2, [r1]
 8005836:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 8005838:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 800583a:	2b00      	cmp	r3, #0
 800583c:	d1e1      	bne.n	8005802 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	681b      	ldr	r3, [r3, #0]
 8005842:	3314      	adds	r3, #20
 8005844:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005846:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 8005848:	e853 3f00 	ldrex	r3, [r3]
 800584c:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 800584e:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8005850:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005854:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005858:	687b      	ldr	r3, [r7, #4]
 800585a:	681b      	ldr	r3, [r3, #0]
 800585c:	3314      	adds	r3, #20
 800585e:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 8005862:	66fa      	str	r2, [r7, #108]	@ 0x6c
 8005864:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005866:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 8005868:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800586a:	e841 2300 	strex	r3, r2, [r1]
 800586e:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 8005870:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8005872:	2b00      	cmp	r3, #0
 8005874:	d1e3      	bne.n	800583e <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	2220      	movs	r2, #32
 800587a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800587e:	687b      	ldr	r3, [r7, #4]
 8005880:	2200      	movs	r2, #0
 8005882:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	681b      	ldr	r3, [r3, #0]
 8005888:	330c      	adds	r3, #12
 800588a:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800588c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 800588e:	e853 3f00 	ldrex	r3, [r3]
 8005892:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8005894:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8005896:	f023 0310 	bic.w	r3, r3, #16
 800589a:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681b      	ldr	r3, [r3, #0]
 80058a2:	330c      	adds	r3, #12
 80058a4:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 80058a8:	65ba      	str	r2, [r7, #88]	@ 0x58
 80058aa:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80058ac:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80058ae:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 80058b0:	e841 2300 	strex	r3, r2, [r1]
 80058b4:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 80058b6:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80058b8:	2b00      	cmp	r3, #0
 80058ba:	d1e3      	bne.n	8005884 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 80058bc:	687b      	ldr	r3, [r7, #4]
 80058be:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80058c0:	4618      	mov	r0, r3
 80058c2:	f7fd f928 	bl	8002b16 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80058c6:	687b      	ldr	r3, [r7, #4]
 80058c8:	2202      	movs	r2, #2
 80058ca:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058d4:	b29b      	uxth	r3, r3
 80058d6:	1ad3      	subs	r3, r2, r3
 80058d8:	b29b      	uxth	r3, r3
 80058da:	4619      	mov	r1, r3
 80058dc:	6878      	ldr	r0, [r7, #4]
 80058de:	f000 f8b7 	bl	8005a50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80058e2:	e09b      	b.n	8005a1c <HAL_UART_IRQHandler+0x518>
 80058e4:	08005c55 	.word	0x08005c55
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058f0:	b29b      	uxth	r3, r3
 80058f2:	1ad3      	subs	r3, r2, r3
 80058f4:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80058f8:	687b      	ldr	r3, [r7, #4]
 80058fa:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80058fc:	b29b      	uxth	r3, r3
 80058fe:	2b00      	cmp	r3, #0
 8005900:	f000 808e 	beq.w	8005a20 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8005904:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005908:	2b00      	cmp	r3, #0
 800590a:	f000 8089 	beq.w	8005a20 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	681b      	ldr	r3, [r3, #0]
 8005912:	330c      	adds	r3, #12
 8005914:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005916:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005918:	e853 3f00 	ldrex	r3, [r3]
 800591c:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 800591e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005920:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005924:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	330c      	adds	r3, #12
 800592e:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 8005932:	647a      	str	r2, [r7, #68]	@ 0x44
 8005934:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005936:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 8005938:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 800593a:	e841 2300 	strex	r3, r2, [r1]
 800593e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 8005940:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8005942:	2b00      	cmp	r3, #0
 8005944:	d1e3      	bne.n	800590e <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	3314      	adds	r3, #20
 800594c:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800594e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005950:	e853 3f00 	ldrex	r3, [r3]
 8005954:	623b      	str	r3, [r7, #32]
   return(result);
 8005956:	6a3b      	ldr	r3, [r7, #32]
 8005958:	f023 0301 	bic.w	r3, r3, #1
 800595c:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3314      	adds	r3, #20
 8005966:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 800596a:	633a      	str	r2, [r7, #48]	@ 0x30
 800596c:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800596e:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005970:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8005972:	e841 2300 	strex	r3, r2, [r1]
 8005976:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005978:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800597a:	2b00      	cmp	r3, #0
 800597c:	d1e3      	bne.n	8005946 <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 800597e:	687b      	ldr	r3, [r7, #4]
 8005980:	2220      	movs	r2, #32
 8005982:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005986:	687b      	ldr	r3, [r7, #4]
 8005988:	2200      	movs	r2, #0
 800598a:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	681b      	ldr	r3, [r3, #0]
 8005990:	330c      	adds	r3, #12
 8005992:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005994:	693b      	ldr	r3, [r7, #16]
 8005996:	e853 3f00 	ldrex	r3, [r3]
 800599a:	60fb      	str	r3, [r7, #12]
   return(result);
 800599c:	68fb      	ldr	r3, [r7, #12]
 800599e:	f023 0310 	bic.w	r3, r3, #16
 80059a2:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	681b      	ldr	r3, [r3, #0]
 80059aa:	330c      	adds	r3, #12
 80059ac:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 80059b0:	61fa      	str	r2, [r7, #28]
 80059b2:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059b4:	69b9      	ldr	r1, [r7, #24]
 80059b6:	69fa      	ldr	r2, [r7, #28]
 80059b8:	e841 2300 	strex	r3, r2, [r1]
 80059bc:	617b      	str	r3, [r7, #20]
   return(result);
 80059be:	697b      	ldr	r3, [r7, #20]
 80059c0:	2b00      	cmp	r3, #0
 80059c2:	d1e3      	bne.n	800598c <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2202      	movs	r2, #2
 80059c8:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80059ca:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80059ce:	4619      	mov	r1, r3
 80059d0:	6878      	ldr	r0, [r7, #4]
 80059d2:	f000 f83d 	bl	8005a50 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 80059d6:	e023      	b.n	8005a20 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80059d8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059dc:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059e0:	2b00      	cmp	r3, #0
 80059e2:	d009      	beq.n	80059f8 <HAL_UART_IRQHandler+0x4f4>
 80059e4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80059e8:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80059ec:	2b00      	cmp	r3, #0
 80059ee:	d003      	beq.n	80059f8 <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 80059f0:	6878      	ldr	r0, [r7, #4]
 80059f2:	f000 f943 	bl	8005c7c <UART_Transmit_IT>
    return;
 80059f6:	e014      	b.n	8005a22 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80059f8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80059fc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a00:	2b00      	cmp	r3, #0
 8005a02:	d00e      	beq.n	8005a22 <HAL_UART_IRQHandler+0x51e>
 8005a04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005a08:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005a0c:	2b00      	cmp	r3, #0
 8005a0e:	d008      	beq.n	8005a22 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8005a10:	6878      	ldr	r0, [r7, #4]
 8005a12:	f000 f983 	bl	8005d1c <UART_EndTransmit_IT>
    return;
 8005a16:	e004      	b.n	8005a22 <HAL_UART_IRQHandler+0x51e>
    return;
 8005a18:	bf00      	nop
 8005a1a:	e002      	b.n	8005a22 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a1c:	bf00      	nop
 8005a1e:	e000      	b.n	8005a22 <HAL_UART_IRQHandler+0x51e>
      return;
 8005a20:	bf00      	nop
  }
}
 8005a22:	37e8      	adds	r7, #232	@ 0xe8
 8005a24:	46bd      	mov	sp, r7
 8005a26:	bd80      	pop	{r7, pc}

08005a28 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8005a28:	b480      	push	{r7}
 8005a2a:	b083      	sub	sp, #12
 8005a2c:	af00      	add	r7, sp, #0
 8005a2e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8005a30:	bf00      	nop
 8005a32:	370c      	adds	r7, #12
 8005a34:	46bd      	mov	sp, r7
 8005a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a3a:	4770      	bx	lr

08005a3c <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8005a3c:	b480      	push	{r7}
 8005a3e:	b083      	sub	sp, #12
 8005a40:	af00      	add	r7, sp, #0
 8005a42:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005a44:	bf00      	nop
 8005a46:	370c      	adds	r7, #12
 8005a48:	46bd      	mov	sp, r7
 8005a4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a4e:	4770      	bx	lr

08005a50 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8005a50:	b480      	push	{r7}
 8005a52:	b083      	sub	sp, #12
 8005a54:	af00      	add	r7, sp, #0
 8005a56:	6078      	str	r0, [r7, #4]
 8005a58:	460b      	mov	r3, r1
 8005a5a:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005a5c:	bf00      	nop
 8005a5e:	370c      	adds	r7, #12
 8005a60:	46bd      	mov	sp, r7
 8005a62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a66:	4770      	bx	lr

08005a68 <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 8005a68:	b580      	push	{r7, lr}
 8005a6a:	b086      	sub	sp, #24
 8005a6c:	af00      	add	r7, sp, #0
 8005a6e:	60f8      	str	r0, [r7, #12]
 8005a70:	60b9      	str	r1, [r7, #8]
 8005a72:	603b      	str	r3, [r7, #0]
 8005a74:	4613      	mov	r3, r2
 8005a76:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005a78:	e03b      	b.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8005a7a:	6a3b      	ldr	r3, [r7, #32]
 8005a7c:	f1b3 3fff 	cmp.w	r3, #4294967295
 8005a80:	d037      	beq.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8005a82:	f7fc ff07 	bl	8002894 <HAL_GetTick>
 8005a86:	4602      	mov	r2, r0
 8005a88:	683b      	ldr	r3, [r7, #0]
 8005a8a:	1ad3      	subs	r3, r2, r3
 8005a8c:	6a3a      	ldr	r2, [r7, #32]
 8005a8e:	429a      	cmp	r2, r3
 8005a90:	d302      	bcc.n	8005a98 <UART_WaitOnFlagUntilTimeout+0x30>
 8005a92:	6a3b      	ldr	r3, [r7, #32]
 8005a94:	2b00      	cmp	r3, #0
 8005a96:	d101      	bne.n	8005a9c <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 8005a98:	2303      	movs	r3, #3
 8005a9a:	e03a      	b.n	8005b12 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8005a9c:	68fb      	ldr	r3, [r7, #12]
 8005a9e:	681b      	ldr	r3, [r3, #0]
 8005aa0:	68db      	ldr	r3, [r3, #12]
 8005aa2:	f003 0304 	and.w	r3, r3, #4
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	d023      	beq.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005aaa:	68bb      	ldr	r3, [r7, #8]
 8005aac:	2b80      	cmp	r3, #128	@ 0x80
 8005aae:	d020      	beq.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x8a>
 8005ab0:	68bb      	ldr	r3, [r7, #8]
 8005ab2:	2b40      	cmp	r3, #64	@ 0x40
 8005ab4:	d01d      	beq.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8005ab6:	68fb      	ldr	r3, [r7, #12]
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	f003 0308 	and.w	r3, r3, #8
 8005ac0:	2b08      	cmp	r3, #8
 8005ac2:	d116      	bne.n	8005af2 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8005ac4:	2300      	movs	r3, #0
 8005ac6:	617b      	str	r3, [r7, #20]
 8005ac8:	68fb      	ldr	r3, [r7, #12]
 8005aca:	681b      	ldr	r3, [r3, #0]
 8005acc:	681b      	ldr	r3, [r3, #0]
 8005ace:	617b      	str	r3, [r7, #20]
 8005ad0:	68fb      	ldr	r3, [r7, #12]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	685b      	ldr	r3, [r3, #4]
 8005ad6:	617b      	str	r3, [r7, #20]
 8005ad8:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8005ada:	68f8      	ldr	r0, [r7, #12]
 8005adc:	f000 f857 	bl	8005b8e <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8005ae0:	68fb      	ldr	r3, [r7, #12]
 8005ae2:	2208      	movs	r2, #8
 8005ae4:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 8005ae6:	68fb      	ldr	r3, [r7, #12]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8005aee:	2301      	movs	r3, #1
 8005af0:	e00f      	b.n	8005b12 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8005af2:	68fb      	ldr	r3, [r7, #12]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	681a      	ldr	r2, [r3, #0]
 8005af8:	68bb      	ldr	r3, [r7, #8]
 8005afa:	4013      	ands	r3, r2
 8005afc:	68ba      	ldr	r2, [r7, #8]
 8005afe:	429a      	cmp	r2, r3
 8005b00:	bf0c      	ite	eq
 8005b02:	2301      	moveq	r3, #1
 8005b04:	2300      	movne	r3, #0
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	79fb      	ldrb	r3, [r7, #7]
 8005b0c:	429a      	cmp	r2, r3
 8005b0e:	d0b4      	beq.n	8005a7a <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8005b10:	2300      	movs	r3, #0
}
 8005b12:	4618      	mov	r0, r3
 8005b14:	3718      	adds	r7, #24
 8005b16:	46bd      	mov	sp, r7
 8005b18:	bd80      	pop	{r7, pc}

08005b1a <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8005b1a:	b480      	push	{r7}
 8005b1c:	b085      	sub	sp, #20
 8005b1e:	af00      	add	r7, sp, #0
 8005b20:	60f8      	str	r0, [r7, #12]
 8005b22:	60b9      	str	r1, [r7, #8]
 8005b24:	4613      	mov	r3, r2
 8005b26:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 8005b28:	68fb      	ldr	r3, [r7, #12]
 8005b2a:	68ba      	ldr	r2, [r7, #8]
 8005b2c:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 8005b2e:	68fb      	ldr	r3, [r7, #12]
 8005b30:	88fa      	ldrh	r2, [r7, #6]
 8005b32:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 8005b34:	68fb      	ldr	r3, [r7, #12]
 8005b36:	88fa      	ldrh	r2, [r7, #6]
 8005b38:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005b3a:	68fb      	ldr	r3, [r7, #12]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8005b40:	68fb      	ldr	r3, [r7, #12]
 8005b42:	2222      	movs	r2, #34	@ 0x22
 8005b44:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 8005b48:	68fb      	ldr	r3, [r7, #12]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d007      	beq.n	8005b60 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 8005b50:	68fb      	ldr	r3, [r7, #12]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	68da      	ldr	r2, [r3, #12]
 8005b56:	68fb      	ldr	r3, [r7, #12]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8005b5e:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 8005b60:	68fb      	ldr	r3, [r7, #12]
 8005b62:	681b      	ldr	r3, [r3, #0]
 8005b64:	695a      	ldr	r2, [r3, #20]
 8005b66:	68fb      	ldr	r3, [r7, #12]
 8005b68:	681b      	ldr	r3, [r3, #0]
 8005b6a:	f042 0201 	orr.w	r2, r2, #1
 8005b6e:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 8005b70:	68fb      	ldr	r3, [r7, #12]
 8005b72:	681b      	ldr	r3, [r3, #0]
 8005b74:	68da      	ldr	r2, [r3, #12]
 8005b76:	68fb      	ldr	r3, [r7, #12]
 8005b78:	681b      	ldr	r3, [r3, #0]
 8005b7a:	f042 0220 	orr.w	r2, r2, #32
 8005b7e:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8005b80:	2300      	movs	r3, #0
}
 8005b82:	4618      	mov	r0, r3
 8005b84:	3714      	adds	r7, #20
 8005b86:	46bd      	mov	sp, r7
 8005b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b8c:	4770      	bx	lr

08005b8e <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005b8e:	b480      	push	{r7}
 8005b90:	b095      	sub	sp, #84	@ 0x54
 8005b92:	af00      	add	r7, sp, #0
 8005b94:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8005b96:	687b      	ldr	r3, [r7, #4]
 8005b98:	681b      	ldr	r3, [r3, #0]
 8005b9a:	330c      	adds	r3, #12
 8005b9c:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005b9e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005ba0:	e853 3f00 	ldrex	r3, [r3]
 8005ba4:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 8005ba6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8005ba8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005bac:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	330c      	adds	r3, #12
 8005bb4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8005bb6:	643a      	str	r2, [r7, #64]	@ 0x40
 8005bb8:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bba:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005bbc:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005bbe:	e841 2300 	strex	r3, r2, [r1]
 8005bc2:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8005bc4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8005bc6:	2b00      	cmp	r3, #0
 8005bc8:	d1e5      	bne.n	8005b96 <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	3314      	adds	r3, #20
 8005bd0:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005bd2:	6a3b      	ldr	r3, [r7, #32]
 8005bd4:	e853 3f00 	ldrex	r3, [r3]
 8005bd8:	61fb      	str	r3, [r7, #28]
   return(result);
 8005bda:	69fb      	ldr	r3, [r7, #28]
 8005bdc:	f023 0301 	bic.w	r3, r3, #1
 8005be0:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	3314      	adds	r3, #20
 8005be8:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005bea:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005bec:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bee:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005bf0:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005bf2:	e841 2300 	strex	r3, r2, [r1]
 8005bf6:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 8005bf8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005bfa:	2b00      	cmp	r3, #0
 8005bfc:	d1e5      	bne.n	8005bca <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005c02:	2b01      	cmp	r3, #1
 8005c04:	d119      	bne.n	8005c3a <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	330c      	adds	r3, #12
 8005c0c:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005c0e:	68fb      	ldr	r3, [r7, #12]
 8005c10:	e853 3f00 	ldrex	r3, [r3]
 8005c14:	60bb      	str	r3, [r7, #8]
   return(result);
 8005c16:	68bb      	ldr	r3, [r7, #8]
 8005c18:	f023 0310 	bic.w	r3, r3, #16
 8005c1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8005c1e:	687b      	ldr	r3, [r7, #4]
 8005c20:	681b      	ldr	r3, [r3, #0]
 8005c22:	330c      	adds	r3, #12
 8005c24:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 8005c26:	61ba      	str	r2, [r7, #24]
 8005c28:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005c2a:	6979      	ldr	r1, [r7, #20]
 8005c2c:	69ba      	ldr	r2, [r7, #24]
 8005c2e:	e841 2300 	strex	r3, r2, [r1]
 8005c32:	613b      	str	r3, [r7, #16]
   return(result);
 8005c34:	693b      	ldr	r3, [r7, #16]
 8005c36:	2b00      	cmp	r3, #0
 8005c38:	d1e5      	bne.n	8005c06 <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8005c3a:	687b      	ldr	r3, [r7, #4]
 8005c3c:	2220      	movs	r2, #32
 8005c3e:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	2200      	movs	r2, #0
 8005c46:	631a      	str	r2, [r3, #48]	@ 0x30
}
 8005c48:	bf00      	nop
 8005c4a:	3754      	adds	r7, #84	@ 0x54
 8005c4c:	46bd      	mov	sp, r7
 8005c4e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c52:	4770      	bx	lr

08005c54 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8005c54:	b580      	push	{r7, lr}
 8005c56:	b084      	sub	sp, #16
 8005c58:	af00      	add	r7, sp, #0
 8005c5a:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8005c60:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8005c62:	68fb      	ldr	r3, [r7, #12]
 8005c64:	2200      	movs	r2, #0
 8005c66:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 8005c68:	68fb      	ldr	r3, [r7, #12]
 8005c6a:	2200      	movs	r2, #0
 8005c6c:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8005c6e:	68f8      	ldr	r0, [r7, #12]
 8005c70:	f7ff fee4 	bl	8005a3c <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005c74:	bf00      	nop
 8005c76:	3710      	adds	r7, #16
 8005c78:	46bd      	mov	sp, r7
 8005c7a:	bd80      	pop	{r7, pc}

08005c7c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005c7c:	b480      	push	{r7}
 8005c7e:	b085      	sub	sp, #20
 8005c80:	af00      	add	r7, sp, #0
 8005c82:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005c8a:	b2db      	uxtb	r3, r3
 8005c8c:	2b21      	cmp	r3, #33	@ 0x21
 8005c8e:	d13e      	bne.n	8005d0e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005c90:	687b      	ldr	r3, [r7, #4]
 8005c92:	689b      	ldr	r3, [r3, #8]
 8005c94:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005c98:	d114      	bne.n	8005cc4 <UART_Transmit_IT+0x48>
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	691b      	ldr	r3, [r3, #16]
 8005c9e:	2b00      	cmp	r3, #0
 8005ca0:	d110      	bne.n	8005cc4 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	6a1b      	ldr	r3, [r3, #32]
 8005ca6:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005ca8:	68fb      	ldr	r3, [r7, #12]
 8005caa:	881b      	ldrh	r3, [r3, #0]
 8005cac:	461a      	mov	r2, r3
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005cb6:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	6a1b      	ldr	r3, [r3, #32]
 8005cbc:	1c9a      	adds	r2, r3, #2
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	621a      	str	r2, [r3, #32]
 8005cc2:	e008      	b.n	8005cd6 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005cc4:	687b      	ldr	r3, [r7, #4]
 8005cc6:	6a1b      	ldr	r3, [r3, #32]
 8005cc8:	1c59      	adds	r1, r3, #1
 8005cca:	687a      	ldr	r2, [r7, #4]
 8005ccc:	6211      	str	r1, [r2, #32]
 8005cce:	781a      	ldrb	r2, [r3, #0]
 8005cd0:	687b      	ldr	r3, [r7, #4]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005cda:	b29b      	uxth	r3, r3
 8005cdc:	3b01      	subs	r3, #1
 8005cde:	b29b      	uxth	r3, r3
 8005ce0:	687a      	ldr	r2, [r7, #4]
 8005ce2:	4619      	mov	r1, r3
 8005ce4:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005ce6:	2b00      	cmp	r3, #0
 8005ce8:	d10f      	bne.n	8005d0a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	68da      	ldr	r2, [r3, #12]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005cf8:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	681b      	ldr	r3, [r3, #0]
 8005cfe:	68da      	ldr	r2, [r3, #12]
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	681b      	ldr	r3, [r3, #0]
 8005d04:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005d08:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005d0a:	2300      	movs	r3, #0
 8005d0c:	e000      	b.n	8005d10 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005d0e:	2302      	movs	r3, #2
  }
}
 8005d10:	4618      	mov	r0, r3
 8005d12:	3714      	adds	r7, #20
 8005d14:	46bd      	mov	sp, r7
 8005d16:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d1a:	4770      	bx	lr

08005d1c <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005d1c:	b580      	push	{r7, lr}
 8005d1e:	b082      	sub	sp, #8
 8005d20:	af00      	add	r7, sp, #0
 8005d22:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	68da      	ldr	r2, [r3, #12]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005d32:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005d34:	687b      	ldr	r3, [r7, #4]
 8005d36:	2220      	movs	r2, #32
 8005d38:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005d3c:	6878      	ldr	r0, [r7, #4]
 8005d3e:	f7ff fe73 	bl	8005a28 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005d42:	2300      	movs	r3, #0
}
 8005d44:	4618      	mov	r0, r3
 8005d46:	3708      	adds	r7, #8
 8005d48:	46bd      	mov	sp, r7
 8005d4a:	bd80      	pop	{r7, pc}

08005d4c <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005d4c:	b580      	push	{r7, lr}
 8005d4e:	b08c      	sub	sp, #48	@ 0x30
 8005d50:	af00      	add	r7, sp, #0
 8005d52:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005d54:	687b      	ldr	r3, [r7, #4]
 8005d56:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005d5a:	b2db      	uxtb	r3, r3
 8005d5c:	2b22      	cmp	r3, #34	@ 0x22
 8005d5e:	f040 80ae 	bne.w	8005ebe <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005d62:	687b      	ldr	r3, [r7, #4]
 8005d64:	689b      	ldr	r3, [r3, #8]
 8005d66:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005d6a:	d117      	bne.n	8005d9c <UART_Receive_IT+0x50>
 8005d6c:	687b      	ldr	r3, [r7, #4]
 8005d6e:	691b      	ldr	r3, [r3, #16]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d113      	bne.n	8005d9c <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8005d74:	2300      	movs	r3, #0
 8005d76:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d7c:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005d7e:	687b      	ldr	r3, [r7, #4]
 8005d80:	681b      	ldr	r3, [r3, #0]
 8005d82:	685b      	ldr	r3, [r3, #4]
 8005d84:	b29b      	uxth	r3, r3
 8005d86:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005d8a:	b29a      	uxth	r2, r3
 8005d8c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005d8e:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005d90:	687b      	ldr	r3, [r7, #4]
 8005d92:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005d94:	1c9a      	adds	r2, r3, #2
 8005d96:	687b      	ldr	r3, [r7, #4]
 8005d98:	629a      	str	r2, [r3, #40]	@ 0x28
 8005d9a:	e026      	b.n	8005dea <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005da0:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8005da2:	2300      	movs	r3, #0
 8005da4:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	689b      	ldr	r3, [r3, #8]
 8005daa:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005dae:	d007      	beq.n	8005dc0 <UART_Receive_IT+0x74>
 8005db0:	687b      	ldr	r3, [r7, #4]
 8005db2:	689b      	ldr	r3, [r3, #8]
 8005db4:	2b00      	cmp	r3, #0
 8005db6:	d10a      	bne.n	8005dce <UART_Receive_IT+0x82>
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	691b      	ldr	r3, [r3, #16]
 8005dbc:	2b00      	cmp	r3, #0
 8005dbe:	d106      	bne.n	8005dce <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	685b      	ldr	r3, [r3, #4]
 8005dc6:	b2da      	uxtb	r2, r3
 8005dc8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dca:	701a      	strb	r2, [r3, #0]
 8005dcc:	e008      	b.n	8005de0 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	685b      	ldr	r3, [r3, #4]
 8005dd4:	b2db      	uxtb	r3, r3
 8005dd6:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005dda:	b2da      	uxtb	r2, r3
 8005ddc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005dde:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005de4:	1c5a      	adds	r2, r3, #1
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005dee:	b29b      	uxth	r3, r3
 8005df0:	3b01      	subs	r3, #1
 8005df2:	b29b      	uxth	r3, r3
 8005df4:	687a      	ldr	r2, [r7, #4]
 8005df6:	4619      	mov	r1, r3
 8005df8:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005dfa:	2b00      	cmp	r3, #0
 8005dfc:	d15d      	bne.n	8005eba <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	681b      	ldr	r3, [r3, #0]
 8005e02:	68da      	ldr	r2, [r3, #12]
 8005e04:	687b      	ldr	r3, [r7, #4]
 8005e06:	681b      	ldr	r3, [r3, #0]
 8005e08:	f022 0220 	bic.w	r2, r2, #32
 8005e0c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	68da      	ldr	r2, [r3, #12]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005e1c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	695a      	ldr	r2, [r3, #20]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f022 0201 	bic.w	r2, r2, #1
 8005e2c:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005e2e:	687b      	ldr	r3, [r7, #4]
 8005e30:	2220      	movs	r2, #32
 8005e32:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	2200      	movs	r2, #0
 8005e3a:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005e3c:	687b      	ldr	r3, [r7, #4]
 8005e3e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005e40:	2b01      	cmp	r3, #1
 8005e42:	d135      	bne.n	8005eb0 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	2200      	movs	r2, #0
 8005e48:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	330c      	adds	r3, #12
 8005e50:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005e52:	697b      	ldr	r3, [r7, #20]
 8005e54:	e853 3f00 	ldrex	r3, [r3]
 8005e58:	613b      	str	r3, [r7, #16]
   return(result);
 8005e5a:	693b      	ldr	r3, [r7, #16]
 8005e5c:	f023 0310 	bic.w	r3, r3, #16
 8005e60:	627b      	str	r3, [r7, #36]	@ 0x24
 8005e62:	687b      	ldr	r3, [r7, #4]
 8005e64:	681b      	ldr	r3, [r3, #0]
 8005e66:	330c      	adds	r3, #12
 8005e68:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005e6a:	623a      	str	r2, [r7, #32]
 8005e6c:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005e6e:	69f9      	ldr	r1, [r7, #28]
 8005e70:	6a3a      	ldr	r2, [r7, #32]
 8005e72:	e841 2300 	strex	r3, r2, [r1]
 8005e76:	61bb      	str	r3, [r7, #24]
   return(result);
 8005e78:	69bb      	ldr	r3, [r7, #24]
 8005e7a:	2b00      	cmp	r3, #0
 8005e7c:	d1e5      	bne.n	8005e4a <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	681b      	ldr	r3, [r3, #0]
 8005e82:	681b      	ldr	r3, [r3, #0]
 8005e84:	f003 0310 	and.w	r3, r3, #16
 8005e88:	2b10      	cmp	r3, #16
 8005e8a:	d10a      	bne.n	8005ea2 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005e8c:	2300      	movs	r3, #0
 8005e8e:	60fb      	str	r3, [r7, #12]
 8005e90:	687b      	ldr	r3, [r7, #4]
 8005e92:	681b      	ldr	r3, [r3, #0]
 8005e94:	681b      	ldr	r3, [r3, #0]
 8005e96:	60fb      	str	r3, [r7, #12]
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	685b      	ldr	r3, [r3, #4]
 8005e9e:	60fb      	str	r3, [r7, #12]
 8005ea0:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005ea6:	4619      	mov	r1, r3
 8005ea8:	6878      	ldr	r0, [r7, #4]
 8005eaa:	f7ff fdd1 	bl	8005a50 <HAL_UARTEx_RxEventCallback>
 8005eae:	e002      	b.n	8005eb6 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005eb0:	6878      	ldr	r0, [r7, #4]
 8005eb2:	f7fb f8bd 	bl	8001030 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005eb6:	2300      	movs	r3, #0
 8005eb8:	e002      	b.n	8005ec0 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005eba:	2300      	movs	r3, #0
 8005ebc:	e000      	b.n	8005ec0 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005ebe:	2302      	movs	r3, #2
  }
}
 8005ec0:	4618      	mov	r0, r3
 8005ec2:	3730      	adds	r7, #48	@ 0x30
 8005ec4:	46bd      	mov	sp, r7
 8005ec6:	bd80      	pop	{r7, pc}

08005ec8 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005ec8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005ecc:	b0c0      	sub	sp, #256	@ 0x100
 8005ece:	af00      	add	r7, sp, #0
 8005ed0:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005ed4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ed8:	681b      	ldr	r3, [r3, #0]
 8005eda:	691b      	ldr	r3, [r3, #16]
 8005edc:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005ee0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ee4:	68d9      	ldr	r1, [r3, #12]
 8005ee6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005eea:	681a      	ldr	r2, [r3, #0]
 8005eec:	ea40 0301 	orr.w	r3, r0, r1
 8005ef0:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005ef2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ef6:	689a      	ldr	r2, [r3, #8]
 8005ef8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005efc:	691b      	ldr	r3, [r3, #16]
 8005efe:	431a      	orrs	r2, r3
 8005f00:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f04:	695b      	ldr	r3, [r3, #20]
 8005f06:	431a      	orrs	r2, r3
 8005f08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f0c:	69db      	ldr	r3, [r3, #28]
 8005f0e:	4313      	orrs	r3, r2
 8005f10:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005f14:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f18:	681b      	ldr	r3, [r3, #0]
 8005f1a:	68db      	ldr	r3, [r3, #12]
 8005f1c:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005f20:	f021 010c 	bic.w	r1, r1, #12
 8005f24:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f28:	681a      	ldr	r2, [r3, #0]
 8005f2a:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005f2e:	430b      	orrs	r3, r1
 8005f30:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005f32:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f36:	681b      	ldr	r3, [r3, #0]
 8005f38:	695b      	ldr	r3, [r3, #20]
 8005f3a:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005f3e:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f42:	6999      	ldr	r1, [r3, #24]
 8005f44:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f48:	681a      	ldr	r2, [r3, #0]
 8005f4a:	ea40 0301 	orr.w	r3, r0, r1
 8005f4e:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005f50:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f54:	681a      	ldr	r2, [r3, #0]
 8005f56:	4b8f      	ldr	r3, [pc, #572]	@ (8006194 <UART_SetConfig+0x2cc>)
 8005f58:	429a      	cmp	r2, r3
 8005f5a:	d005      	beq.n	8005f68 <UART_SetConfig+0xa0>
 8005f5c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f60:	681a      	ldr	r2, [r3, #0]
 8005f62:	4b8d      	ldr	r3, [pc, #564]	@ (8006198 <UART_SetConfig+0x2d0>)
 8005f64:	429a      	cmp	r2, r3
 8005f66:	d104      	bne.n	8005f72 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005f68:	f7ff f92e 	bl	80051c8 <HAL_RCC_GetPCLK2Freq>
 8005f6c:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005f70:	e003      	b.n	8005f7a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005f72:	f7ff f915 	bl	80051a0 <HAL_RCC_GetPCLK1Freq>
 8005f76:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005f7a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f7e:	69db      	ldr	r3, [r3, #28]
 8005f80:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005f84:	f040 810c 	bne.w	80061a0 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005f88:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f8c:	2200      	movs	r2, #0
 8005f8e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005f92:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005f96:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005f9a:	4622      	mov	r2, r4
 8005f9c:	462b      	mov	r3, r5
 8005f9e:	1891      	adds	r1, r2, r2
 8005fa0:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005fa2:	415b      	adcs	r3, r3
 8005fa4:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005fa6:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005faa:	4621      	mov	r1, r4
 8005fac:	eb12 0801 	adds.w	r8, r2, r1
 8005fb0:	4629      	mov	r1, r5
 8005fb2:	eb43 0901 	adc.w	r9, r3, r1
 8005fb6:	f04f 0200 	mov.w	r2, #0
 8005fba:	f04f 0300 	mov.w	r3, #0
 8005fbe:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005fc2:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005fc6:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005fca:	4690      	mov	r8, r2
 8005fcc:	4699      	mov	r9, r3
 8005fce:	4623      	mov	r3, r4
 8005fd0:	eb18 0303 	adds.w	r3, r8, r3
 8005fd4:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005fd8:	462b      	mov	r3, r5
 8005fda:	eb49 0303 	adc.w	r3, r9, r3
 8005fde:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005fe2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005fe6:	685b      	ldr	r3, [r3, #4]
 8005fe8:	2200      	movs	r2, #0
 8005fea:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005fee:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005ff2:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005ff6:	460b      	mov	r3, r1
 8005ff8:	18db      	adds	r3, r3, r3
 8005ffa:	653b      	str	r3, [r7, #80]	@ 0x50
 8005ffc:	4613      	mov	r3, r2
 8005ffe:	eb42 0303 	adc.w	r3, r2, r3
 8006002:	657b      	str	r3, [r7, #84]	@ 0x54
 8006004:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8006008:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 800600c:	f7fa fe44 	bl	8000c98 <__aeabi_uldivmod>
 8006010:	4602      	mov	r2, r0
 8006012:	460b      	mov	r3, r1
 8006014:	4b61      	ldr	r3, [pc, #388]	@ (800619c <UART_SetConfig+0x2d4>)
 8006016:	fba3 2302 	umull	r2, r3, r3, r2
 800601a:	095b      	lsrs	r3, r3, #5
 800601c:	011c      	lsls	r4, r3, #4
 800601e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006022:	2200      	movs	r2, #0
 8006024:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8006028:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 800602c:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8006030:	4642      	mov	r2, r8
 8006032:	464b      	mov	r3, r9
 8006034:	1891      	adds	r1, r2, r2
 8006036:	64b9      	str	r1, [r7, #72]	@ 0x48
 8006038:	415b      	adcs	r3, r3
 800603a:	64fb      	str	r3, [r7, #76]	@ 0x4c
 800603c:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8006040:	4641      	mov	r1, r8
 8006042:	eb12 0a01 	adds.w	sl, r2, r1
 8006046:	4649      	mov	r1, r9
 8006048:	eb43 0b01 	adc.w	fp, r3, r1
 800604c:	f04f 0200 	mov.w	r2, #0
 8006050:	f04f 0300 	mov.w	r3, #0
 8006054:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8006058:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 800605c:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8006060:	4692      	mov	sl, r2
 8006062:	469b      	mov	fp, r3
 8006064:	4643      	mov	r3, r8
 8006066:	eb1a 0303 	adds.w	r3, sl, r3
 800606a:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 800606e:	464b      	mov	r3, r9
 8006070:	eb4b 0303 	adc.w	r3, fp, r3
 8006074:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8006078:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800607c:	685b      	ldr	r3, [r3, #4]
 800607e:	2200      	movs	r2, #0
 8006080:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8006084:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8006088:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 800608c:	460b      	mov	r3, r1
 800608e:	18db      	adds	r3, r3, r3
 8006090:	643b      	str	r3, [r7, #64]	@ 0x40
 8006092:	4613      	mov	r3, r2
 8006094:	eb42 0303 	adc.w	r3, r2, r3
 8006098:	647b      	str	r3, [r7, #68]	@ 0x44
 800609a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 800609e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 80060a2:	f7fa fdf9 	bl	8000c98 <__aeabi_uldivmod>
 80060a6:	4602      	mov	r2, r0
 80060a8:	460b      	mov	r3, r1
 80060aa:	4611      	mov	r1, r2
 80060ac:	4b3b      	ldr	r3, [pc, #236]	@ (800619c <UART_SetConfig+0x2d4>)
 80060ae:	fba3 2301 	umull	r2, r3, r3, r1
 80060b2:	095b      	lsrs	r3, r3, #5
 80060b4:	2264      	movs	r2, #100	@ 0x64
 80060b6:	fb02 f303 	mul.w	r3, r2, r3
 80060ba:	1acb      	subs	r3, r1, r3
 80060bc:	00db      	lsls	r3, r3, #3
 80060be:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 80060c2:	4b36      	ldr	r3, [pc, #216]	@ (800619c <UART_SetConfig+0x2d4>)
 80060c4:	fba3 2302 	umull	r2, r3, r3, r2
 80060c8:	095b      	lsrs	r3, r3, #5
 80060ca:	005b      	lsls	r3, r3, #1
 80060cc:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 80060d0:	441c      	add	r4, r3
 80060d2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80060d6:	2200      	movs	r2, #0
 80060d8:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 80060dc:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 80060e0:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 80060e4:	4642      	mov	r2, r8
 80060e6:	464b      	mov	r3, r9
 80060e8:	1891      	adds	r1, r2, r2
 80060ea:	63b9      	str	r1, [r7, #56]	@ 0x38
 80060ec:	415b      	adcs	r3, r3
 80060ee:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80060f0:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 80060f4:	4641      	mov	r1, r8
 80060f6:	1851      	adds	r1, r2, r1
 80060f8:	6339      	str	r1, [r7, #48]	@ 0x30
 80060fa:	4649      	mov	r1, r9
 80060fc:	414b      	adcs	r3, r1
 80060fe:	637b      	str	r3, [r7, #52]	@ 0x34
 8006100:	f04f 0200 	mov.w	r2, #0
 8006104:	f04f 0300 	mov.w	r3, #0
 8006108:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 800610c:	4659      	mov	r1, fp
 800610e:	00cb      	lsls	r3, r1, #3
 8006110:	4651      	mov	r1, sl
 8006112:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006116:	4651      	mov	r1, sl
 8006118:	00ca      	lsls	r2, r1, #3
 800611a:	4610      	mov	r0, r2
 800611c:	4619      	mov	r1, r3
 800611e:	4603      	mov	r3, r0
 8006120:	4642      	mov	r2, r8
 8006122:	189b      	adds	r3, r3, r2
 8006124:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8006128:	464b      	mov	r3, r9
 800612a:	460a      	mov	r2, r1
 800612c:	eb42 0303 	adc.w	r3, r2, r3
 8006130:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8006134:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006138:	685b      	ldr	r3, [r3, #4]
 800613a:	2200      	movs	r2, #0
 800613c:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8006140:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8006144:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8006148:	460b      	mov	r3, r1
 800614a:	18db      	adds	r3, r3, r3
 800614c:	62bb      	str	r3, [r7, #40]	@ 0x28
 800614e:	4613      	mov	r3, r2
 8006150:	eb42 0303 	adc.w	r3, r2, r3
 8006154:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8006156:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 800615a:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 800615e:	f7fa fd9b 	bl	8000c98 <__aeabi_uldivmod>
 8006162:	4602      	mov	r2, r0
 8006164:	460b      	mov	r3, r1
 8006166:	4b0d      	ldr	r3, [pc, #52]	@ (800619c <UART_SetConfig+0x2d4>)
 8006168:	fba3 1302 	umull	r1, r3, r3, r2
 800616c:	095b      	lsrs	r3, r3, #5
 800616e:	2164      	movs	r1, #100	@ 0x64
 8006170:	fb01 f303 	mul.w	r3, r1, r3
 8006174:	1ad3      	subs	r3, r2, r3
 8006176:	00db      	lsls	r3, r3, #3
 8006178:	3332      	adds	r3, #50	@ 0x32
 800617a:	4a08      	ldr	r2, [pc, #32]	@ (800619c <UART_SetConfig+0x2d4>)
 800617c:	fba2 2303 	umull	r2, r3, r2, r3
 8006180:	095b      	lsrs	r3, r3, #5
 8006182:	f003 0207 	and.w	r2, r3, #7
 8006186:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800618a:	681b      	ldr	r3, [r3, #0]
 800618c:	4422      	add	r2, r4
 800618e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006190:	e106      	b.n	80063a0 <UART_SetConfig+0x4d8>
 8006192:	bf00      	nop
 8006194:	40011000 	.word	0x40011000
 8006198:	40011400 	.word	0x40011400
 800619c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 80061a0:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80061a4:	2200      	movs	r2, #0
 80061a6:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 80061aa:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 80061ae:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 80061b2:	4642      	mov	r2, r8
 80061b4:	464b      	mov	r3, r9
 80061b6:	1891      	adds	r1, r2, r2
 80061b8:	6239      	str	r1, [r7, #32]
 80061ba:	415b      	adcs	r3, r3
 80061bc:	627b      	str	r3, [r7, #36]	@ 0x24
 80061be:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80061c2:	4641      	mov	r1, r8
 80061c4:	1854      	adds	r4, r2, r1
 80061c6:	4649      	mov	r1, r9
 80061c8:	eb43 0501 	adc.w	r5, r3, r1
 80061cc:	f04f 0200 	mov.w	r2, #0
 80061d0:	f04f 0300 	mov.w	r3, #0
 80061d4:	00eb      	lsls	r3, r5, #3
 80061d6:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80061da:	00e2      	lsls	r2, r4, #3
 80061dc:	4614      	mov	r4, r2
 80061de:	461d      	mov	r5, r3
 80061e0:	4643      	mov	r3, r8
 80061e2:	18e3      	adds	r3, r4, r3
 80061e4:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 80061e8:	464b      	mov	r3, r9
 80061ea:	eb45 0303 	adc.w	r3, r5, r3
 80061ee:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 80061f2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80061f6:	685b      	ldr	r3, [r3, #4]
 80061f8:	2200      	movs	r2, #0
 80061fa:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 80061fe:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8006202:	f04f 0200 	mov.w	r2, #0
 8006206:	f04f 0300 	mov.w	r3, #0
 800620a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 800620e:	4629      	mov	r1, r5
 8006210:	008b      	lsls	r3, r1, #2
 8006212:	4621      	mov	r1, r4
 8006214:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006218:	4621      	mov	r1, r4
 800621a:	008a      	lsls	r2, r1, #2
 800621c:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8006220:	f7fa fd3a 	bl	8000c98 <__aeabi_uldivmod>
 8006224:	4602      	mov	r2, r0
 8006226:	460b      	mov	r3, r1
 8006228:	4b60      	ldr	r3, [pc, #384]	@ (80063ac <UART_SetConfig+0x4e4>)
 800622a:	fba3 2302 	umull	r2, r3, r3, r2
 800622e:	095b      	lsrs	r3, r3, #5
 8006230:	011c      	lsls	r4, r3, #4
 8006232:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8006236:	2200      	movs	r2, #0
 8006238:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 800623c:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8006240:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8006244:	4642      	mov	r2, r8
 8006246:	464b      	mov	r3, r9
 8006248:	1891      	adds	r1, r2, r2
 800624a:	61b9      	str	r1, [r7, #24]
 800624c:	415b      	adcs	r3, r3
 800624e:	61fb      	str	r3, [r7, #28]
 8006250:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006254:	4641      	mov	r1, r8
 8006256:	1851      	adds	r1, r2, r1
 8006258:	6139      	str	r1, [r7, #16]
 800625a:	4649      	mov	r1, r9
 800625c:	414b      	adcs	r3, r1
 800625e:	617b      	str	r3, [r7, #20]
 8006260:	f04f 0200 	mov.w	r2, #0
 8006264:	f04f 0300 	mov.w	r3, #0
 8006268:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800626c:	4659      	mov	r1, fp
 800626e:	00cb      	lsls	r3, r1, #3
 8006270:	4651      	mov	r1, sl
 8006272:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006276:	4651      	mov	r1, sl
 8006278:	00ca      	lsls	r2, r1, #3
 800627a:	4610      	mov	r0, r2
 800627c:	4619      	mov	r1, r3
 800627e:	4603      	mov	r3, r0
 8006280:	4642      	mov	r2, r8
 8006282:	189b      	adds	r3, r3, r2
 8006284:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006288:	464b      	mov	r3, r9
 800628a:	460a      	mov	r2, r1
 800628c:	eb42 0303 	adc.w	r3, r2, r3
 8006290:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006294:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006298:	685b      	ldr	r3, [r3, #4]
 800629a:	2200      	movs	r2, #0
 800629c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800629e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 80062a0:	f04f 0200 	mov.w	r2, #0
 80062a4:	f04f 0300 	mov.w	r3, #0
 80062a8:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 80062ac:	4649      	mov	r1, r9
 80062ae:	008b      	lsls	r3, r1, #2
 80062b0:	4641      	mov	r1, r8
 80062b2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80062b6:	4641      	mov	r1, r8
 80062b8:	008a      	lsls	r2, r1, #2
 80062ba:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 80062be:	f7fa fceb 	bl	8000c98 <__aeabi_uldivmod>
 80062c2:	4602      	mov	r2, r0
 80062c4:	460b      	mov	r3, r1
 80062c6:	4611      	mov	r1, r2
 80062c8:	4b38      	ldr	r3, [pc, #224]	@ (80063ac <UART_SetConfig+0x4e4>)
 80062ca:	fba3 2301 	umull	r2, r3, r3, r1
 80062ce:	095b      	lsrs	r3, r3, #5
 80062d0:	2264      	movs	r2, #100	@ 0x64
 80062d2:	fb02 f303 	mul.w	r3, r2, r3
 80062d6:	1acb      	subs	r3, r1, r3
 80062d8:	011b      	lsls	r3, r3, #4
 80062da:	3332      	adds	r3, #50	@ 0x32
 80062dc:	4a33      	ldr	r2, [pc, #204]	@ (80063ac <UART_SetConfig+0x4e4>)
 80062de:	fba2 2303 	umull	r2, r3, r2, r3
 80062e2:	095b      	lsrs	r3, r3, #5
 80062e4:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 80062e8:	441c      	add	r4, r3
 80062ea:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80062ee:	2200      	movs	r2, #0
 80062f0:	673b      	str	r3, [r7, #112]	@ 0x70
 80062f2:	677a      	str	r2, [r7, #116]	@ 0x74
 80062f4:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 80062f8:	4642      	mov	r2, r8
 80062fa:	464b      	mov	r3, r9
 80062fc:	1891      	adds	r1, r2, r2
 80062fe:	60b9      	str	r1, [r7, #8]
 8006300:	415b      	adcs	r3, r3
 8006302:	60fb      	str	r3, [r7, #12]
 8006304:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006308:	4641      	mov	r1, r8
 800630a:	1851      	adds	r1, r2, r1
 800630c:	6039      	str	r1, [r7, #0]
 800630e:	4649      	mov	r1, r9
 8006310:	414b      	adcs	r3, r1
 8006312:	607b      	str	r3, [r7, #4]
 8006314:	f04f 0200 	mov.w	r2, #0
 8006318:	f04f 0300 	mov.w	r3, #0
 800631c:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8006320:	4659      	mov	r1, fp
 8006322:	00cb      	lsls	r3, r1, #3
 8006324:	4651      	mov	r1, sl
 8006326:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 800632a:	4651      	mov	r1, sl
 800632c:	00ca      	lsls	r2, r1, #3
 800632e:	4610      	mov	r0, r2
 8006330:	4619      	mov	r1, r3
 8006332:	4603      	mov	r3, r0
 8006334:	4642      	mov	r2, r8
 8006336:	189b      	adds	r3, r3, r2
 8006338:	66bb      	str	r3, [r7, #104]	@ 0x68
 800633a:	464b      	mov	r3, r9
 800633c:	460a      	mov	r2, r1
 800633e:	eb42 0303 	adc.w	r3, r2, r3
 8006342:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8006344:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006348:	685b      	ldr	r3, [r3, #4]
 800634a:	2200      	movs	r2, #0
 800634c:	663b      	str	r3, [r7, #96]	@ 0x60
 800634e:	667a      	str	r2, [r7, #100]	@ 0x64
 8006350:	f04f 0200 	mov.w	r2, #0
 8006354:	f04f 0300 	mov.w	r3, #0
 8006358:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 800635c:	4649      	mov	r1, r9
 800635e:	008b      	lsls	r3, r1, #2
 8006360:	4641      	mov	r1, r8
 8006362:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006366:	4641      	mov	r1, r8
 8006368:	008a      	lsls	r2, r1, #2
 800636a:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 800636e:	f7fa fc93 	bl	8000c98 <__aeabi_uldivmod>
 8006372:	4602      	mov	r2, r0
 8006374:	460b      	mov	r3, r1
 8006376:	4b0d      	ldr	r3, [pc, #52]	@ (80063ac <UART_SetConfig+0x4e4>)
 8006378:	fba3 1302 	umull	r1, r3, r3, r2
 800637c:	095b      	lsrs	r3, r3, #5
 800637e:	2164      	movs	r1, #100	@ 0x64
 8006380:	fb01 f303 	mul.w	r3, r1, r3
 8006384:	1ad3      	subs	r3, r2, r3
 8006386:	011b      	lsls	r3, r3, #4
 8006388:	3332      	adds	r3, #50	@ 0x32
 800638a:	4a08      	ldr	r2, [pc, #32]	@ (80063ac <UART_SetConfig+0x4e4>)
 800638c:	fba2 2303 	umull	r2, r3, r2, r3
 8006390:	095b      	lsrs	r3, r3, #5
 8006392:	f003 020f 	and.w	r2, r3, #15
 8006396:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	4422      	add	r2, r4
 800639e:	609a      	str	r2, [r3, #8]
}
 80063a0:	bf00      	nop
 80063a2:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 80063a6:	46bd      	mov	sp, r7
 80063a8:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80063ac:	51eb851f 	.word	0x51eb851f

080063b0 <MX_FATFS_Init>:
/* USER CODE BEGIN Variables */

/* USER CODE END Variables */

void MX_FATFS_Init(void)
{
 80063b0:	b580      	push	{r7, lr}
 80063b2:	af00      	add	r7, sp, #0
  /*## FatFS: Link the USER driver ###########################*/
  retUSER = FATFS_LinkDriver(&USER_Driver, USERPath);
 80063b4:	4904      	ldr	r1, [pc, #16]	@ (80063c8 <MX_FATFS_Init+0x18>)
 80063b6:	4805      	ldr	r0, [pc, #20]	@ (80063cc <MX_FATFS_Init+0x1c>)
 80063b8:	f000 f8b0 	bl	800651c <FATFS_LinkDriver>
 80063bc:	4603      	mov	r3, r0
 80063be:	461a      	mov	r2, r3
 80063c0:	4b03      	ldr	r3, [pc, #12]	@ (80063d0 <MX_FATFS_Init+0x20>)
 80063c2:	701a      	strb	r2, [r3, #0]

  /* USER CODE BEGIN Init */
  /* additional user code for init */
  /* USER CODE END Init */
}
 80063c4:	bf00      	nop
 80063c6:	bd80      	pop	{r7, pc}
 80063c8:	200007cc 	.word	0x200007cc
 80063cc:	20000014 	.word	0x20000014
 80063d0:	200007c8 	.word	0x200007c8

080063d4 <USER_initialize>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_initialize (
	BYTE pdrv           /* Physical drive nmuber to identify the drive */
)
{
 80063d4:	b480      	push	{r7}
 80063d6:	b083      	sub	sp, #12
 80063d8:	af00      	add	r7, sp, #0
 80063da:	4603      	mov	r3, r0
 80063dc:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN INIT */
    Stat = STA_NOINIT;
 80063de:	4b06      	ldr	r3, [pc, #24]	@ (80063f8 <USER_initialize+0x24>)
 80063e0:	2201      	movs	r2, #1
 80063e2:	701a      	strb	r2, [r3, #0]
    return Stat;
 80063e4:	4b04      	ldr	r3, [pc, #16]	@ (80063f8 <USER_initialize+0x24>)
 80063e6:	781b      	ldrb	r3, [r3, #0]
 80063e8:	b2db      	uxtb	r3, r3
  /* USER CODE END INIT */
}
 80063ea:	4618      	mov	r0, r3
 80063ec:	370c      	adds	r7, #12
 80063ee:	46bd      	mov	sp, r7
 80063f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063f4:	4770      	bx	lr
 80063f6:	bf00      	nop
 80063f8:	20000011 	.word	0x20000011

080063fc <USER_status>:
  * @retval DSTATUS: Operation status
  */
DSTATUS USER_status (
	BYTE pdrv       /* Physical drive number to identify the drive */
)
{
 80063fc:	b480      	push	{r7}
 80063fe:	b083      	sub	sp, #12
 8006400:	af00      	add	r7, sp, #0
 8006402:	4603      	mov	r3, r0
 8006404:	71fb      	strb	r3, [r7, #7]
  /* USER CODE BEGIN STATUS */
    Stat = STA_NOINIT;
 8006406:	4b06      	ldr	r3, [pc, #24]	@ (8006420 <USER_status+0x24>)
 8006408:	2201      	movs	r2, #1
 800640a:	701a      	strb	r2, [r3, #0]
    return Stat;
 800640c:	4b04      	ldr	r3, [pc, #16]	@ (8006420 <USER_status+0x24>)
 800640e:	781b      	ldrb	r3, [r3, #0]
 8006410:	b2db      	uxtb	r3, r3
  /* USER CODE END STATUS */
}
 8006412:	4618      	mov	r0, r3
 8006414:	370c      	adds	r7, #12
 8006416:	46bd      	mov	sp, r7
 8006418:	f85d 7b04 	ldr.w	r7, [sp], #4
 800641c:	4770      	bx	lr
 800641e:	bf00      	nop
 8006420:	20000011 	.word	0x20000011

08006424 <USER_read>:
	BYTE pdrv,      /* Physical drive nmuber to identify the drive */
	BYTE *buff,     /* Data buffer to store read data */
	DWORD sector,   /* Sector address in LBA */
	UINT count      /* Number of sectors to read */
)
{
 8006424:	b480      	push	{r7}
 8006426:	b085      	sub	sp, #20
 8006428:	af00      	add	r7, sp, #0
 800642a:	60b9      	str	r1, [r7, #8]
 800642c:	607a      	str	r2, [r7, #4]
 800642e:	603b      	str	r3, [r7, #0]
 8006430:	4603      	mov	r3, r0
 8006432:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN READ */
    return RES_OK;
 8006434:	2300      	movs	r3, #0
  /* USER CODE END READ */
}
 8006436:	4618      	mov	r0, r3
 8006438:	3714      	adds	r7, #20
 800643a:	46bd      	mov	sp, r7
 800643c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006440:	4770      	bx	lr

08006442 <USER_write>:
	BYTE pdrv,          /* Physical drive nmuber to identify the drive */
	const BYTE *buff,   /* Data to be written */
	DWORD sector,       /* Sector address in LBA */
	UINT count          /* Number of sectors to write */
)
{
 8006442:	b480      	push	{r7}
 8006444:	b085      	sub	sp, #20
 8006446:	af00      	add	r7, sp, #0
 8006448:	60b9      	str	r1, [r7, #8]
 800644a:	607a      	str	r2, [r7, #4]
 800644c:	603b      	str	r3, [r7, #0]
 800644e:	4603      	mov	r3, r0
 8006450:	73fb      	strb	r3, [r7, #15]
  /* USER CODE BEGIN WRITE */
  /* USER CODE HERE */
    return RES_OK;
 8006452:	2300      	movs	r3, #0
  /* USER CODE END WRITE */
}
 8006454:	4618      	mov	r0, r3
 8006456:	3714      	adds	r7, #20
 8006458:	46bd      	mov	sp, r7
 800645a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800645e:	4770      	bx	lr

08006460 <USER_ioctl>:
DRESULT USER_ioctl (
	BYTE pdrv,      /* Physical drive nmuber (0..) */
	BYTE cmd,       /* Control code */
	void *buff      /* Buffer to send/receive control data */
)
{
 8006460:	b480      	push	{r7}
 8006462:	b085      	sub	sp, #20
 8006464:	af00      	add	r7, sp, #0
 8006466:	4603      	mov	r3, r0
 8006468:	603a      	str	r2, [r7, #0]
 800646a:	71fb      	strb	r3, [r7, #7]
 800646c:	460b      	mov	r3, r1
 800646e:	71bb      	strb	r3, [r7, #6]
  /* USER CODE BEGIN IOCTL */
    DRESULT res = RES_ERROR;
 8006470:	2301      	movs	r3, #1
 8006472:	73fb      	strb	r3, [r7, #15]
    return res;
 8006474:	7bfb      	ldrb	r3, [r7, #15]
  /* USER CODE END IOCTL */
}
 8006476:	4618      	mov	r0, r3
 8006478:	3714      	adds	r7, #20
 800647a:	46bd      	mov	sp, r7
 800647c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006480:	4770      	bx	lr
	...

08006484 <FATFS_LinkDriverEx>:
  * @param  lun : only used for USB Key Disk to add multi-lun management
            else the parameter must be equal to 0
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriverEx(const Diskio_drvTypeDef *drv, char *path, uint8_t lun)
{
 8006484:	b480      	push	{r7}
 8006486:	b087      	sub	sp, #28
 8006488:	af00      	add	r7, sp, #0
 800648a:	60f8      	str	r0, [r7, #12]
 800648c:	60b9      	str	r1, [r7, #8]
 800648e:	4613      	mov	r3, r2
 8006490:	71fb      	strb	r3, [r7, #7]
  uint8_t ret = 1;
 8006492:	2301      	movs	r3, #1
 8006494:	75fb      	strb	r3, [r7, #23]
  uint8_t DiskNum = 0;
 8006496:	2300      	movs	r3, #0
 8006498:	75bb      	strb	r3, [r7, #22]

  if(disk.nbr < _VOLUMES)
 800649a:	4b1f      	ldr	r3, [pc, #124]	@ (8006518 <FATFS_LinkDriverEx+0x94>)
 800649c:	7a5b      	ldrb	r3, [r3, #9]
 800649e:	b2db      	uxtb	r3, r3
 80064a0:	2b00      	cmp	r3, #0
 80064a2:	d131      	bne.n	8006508 <FATFS_LinkDriverEx+0x84>
  {
    disk.is_initialized[disk.nbr] = 0;
 80064a4:	4b1c      	ldr	r3, [pc, #112]	@ (8006518 <FATFS_LinkDriverEx+0x94>)
 80064a6:	7a5b      	ldrb	r3, [r3, #9]
 80064a8:	b2db      	uxtb	r3, r3
 80064aa:	461a      	mov	r2, r3
 80064ac:	4b1a      	ldr	r3, [pc, #104]	@ (8006518 <FATFS_LinkDriverEx+0x94>)
 80064ae:	2100      	movs	r1, #0
 80064b0:	5499      	strb	r1, [r3, r2]
    disk.drv[disk.nbr] = drv;
 80064b2:	4b19      	ldr	r3, [pc, #100]	@ (8006518 <FATFS_LinkDriverEx+0x94>)
 80064b4:	7a5b      	ldrb	r3, [r3, #9]
 80064b6:	b2db      	uxtb	r3, r3
 80064b8:	4a17      	ldr	r2, [pc, #92]	@ (8006518 <FATFS_LinkDriverEx+0x94>)
 80064ba:	009b      	lsls	r3, r3, #2
 80064bc:	4413      	add	r3, r2
 80064be:	68fa      	ldr	r2, [r7, #12]
 80064c0:	605a      	str	r2, [r3, #4]
    disk.lun[disk.nbr] = lun;
 80064c2:	4b15      	ldr	r3, [pc, #84]	@ (8006518 <FATFS_LinkDriverEx+0x94>)
 80064c4:	7a5b      	ldrb	r3, [r3, #9]
 80064c6:	b2db      	uxtb	r3, r3
 80064c8:	461a      	mov	r2, r3
 80064ca:	4b13      	ldr	r3, [pc, #76]	@ (8006518 <FATFS_LinkDriverEx+0x94>)
 80064cc:	4413      	add	r3, r2
 80064ce:	79fa      	ldrb	r2, [r7, #7]
 80064d0:	721a      	strb	r2, [r3, #8]
    DiskNum = disk.nbr++;
 80064d2:	4b11      	ldr	r3, [pc, #68]	@ (8006518 <FATFS_LinkDriverEx+0x94>)
 80064d4:	7a5b      	ldrb	r3, [r3, #9]
 80064d6:	b2db      	uxtb	r3, r3
 80064d8:	1c5a      	adds	r2, r3, #1
 80064da:	b2d1      	uxtb	r1, r2
 80064dc:	4a0e      	ldr	r2, [pc, #56]	@ (8006518 <FATFS_LinkDriverEx+0x94>)
 80064de:	7251      	strb	r1, [r2, #9]
 80064e0:	75bb      	strb	r3, [r7, #22]
    path[0] = DiskNum + '0';
 80064e2:	7dbb      	ldrb	r3, [r7, #22]
 80064e4:	3330      	adds	r3, #48	@ 0x30
 80064e6:	b2da      	uxtb	r2, r3
 80064e8:	68bb      	ldr	r3, [r7, #8]
 80064ea:	701a      	strb	r2, [r3, #0]
    path[1] = ':';
 80064ec:	68bb      	ldr	r3, [r7, #8]
 80064ee:	3301      	adds	r3, #1
 80064f0:	223a      	movs	r2, #58	@ 0x3a
 80064f2:	701a      	strb	r2, [r3, #0]
    path[2] = '/';
 80064f4:	68bb      	ldr	r3, [r7, #8]
 80064f6:	3302      	adds	r3, #2
 80064f8:	222f      	movs	r2, #47	@ 0x2f
 80064fa:	701a      	strb	r2, [r3, #0]
    path[3] = 0;
 80064fc:	68bb      	ldr	r3, [r7, #8]
 80064fe:	3303      	adds	r3, #3
 8006500:	2200      	movs	r2, #0
 8006502:	701a      	strb	r2, [r3, #0]
    ret = 0;
 8006504:	2300      	movs	r3, #0
 8006506:	75fb      	strb	r3, [r7, #23]
  }

  return ret;
 8006508:	7dfb      	ldrb	r3, [r7, #23]
}
 800650a:	4618      	mov	r0, r3
 800650c:	371c      	adds	r7, #28
 800650e:	46bd      	mov	sp, r7
 8006510:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006514:	4770      	bx	lr
 8006516:	bf00      	nop
 8006518:	200007d0 	.word	0x200007d0

0800651c <FATFS_LinkDriver>:
  * @param  drv: pointer to the disk IO Driver structure
  * @param  path: pointer to the logical drive path
  * @retval Returns 0 in case of success, otherwise 1.
  */
uint8_t FATFS_LinkDriver(const Diskio_drvTypeDef *drv, char *path)
{
 800651c:	b580      	push	{r7, lr}
 800651e:	b082      	sub	sp, #8
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
 8006524:	6039      	str	r1, [r7, #0]
  return FATFS_LinkDriverEx(drv, path, 0);
 8006526:	2200      	movs	r2, #0
 8006528:	6839      	ldr	r1, [r7, #0]
 800652a:	6878      	ldr	r0, [r7, #4]
 800652c:	f7ff ffaa 	bl	8006484 <FATFS_LinkDriverEx>
 8006530:	4603      	mov	r3, r0
}
 8006532:	4618      	mov	r0, r3
 8006534:	3708      	adds	r7, #8
 8006536:	46bd      	mov	sp, r7
 8006538:	bd80      	pop	{r7, pc}

0800653a <__cvt>:
 800653a:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 800653e:	ec57 6b10 	vmov	r6, r7, d0
 8006542:	2f00      	cmp	r7, #0
 8006544:	460c      	mov	r4, r1
 8006546:	4619      	mov	r1, r3
 8006548:	463b      	mov	r3, r7
 800654a:	bfbb      	ittet	lt
 800654c:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006550:	461f      	movlt	r7, r3
 8006552:	2300      	movge	r3, #0
 8006554:	232d      	movlt	r3, #45	@ 0x2d
 8006556:	700b      	strb	r3, [r1, #0]
 8006558:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800655a:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 800655e:	4691      	mov	r9, r2
 8006560:	f023 0820 	bic.w	r8, r3, #32
 8006564:	bfbc      	itt	lt
 8006566:	4632      	movlt	r2, r6
 8006568:	4616      	movlt	r6, r2
 800656a:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 800656e:	d005      	beq.n	800657c <__cvt+0x42>
 8006570:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 8006574:	d100      	bne.n	8006578 <__cvt+0x3e>
 8006576:	3401      	adds	r4, #1
 8006578:	2102      	movs	r1, #2
 800657a:	e000      	b.n	800657e <__cvt+0x44>
 800657c:	2103      	movs	r1, #3
 800657e:	ab03      	add	r3, sp, #12
 8006580:	9301      	str	r3, [sp, #4]
 8006582:	ab02      	add	r3, sp, #8
 8006584:	9300      	str	r3, [sp, #0]
 8006586:	ec47 6b10 	vmov	d0, r6, r7
 800658a:	4653      	mov	r3, sl
 800658c:	4622      	mov	r2, r4
 800658e:	f001 f987 	bl	80078a0 <_dtoa_r>
 8006592:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 8006596:	4605      	mov	r5, r0
 8006598:	d119      	bne.n	80065ce <__cvt+0x94>
 800659a:	f019 0f01 	tst.w	r9, #1
 800659e:	d00e      	beq.n	80065be <__cvt+0x84>
 80065a0:	eb00 0904 	add.w	r9, r0, r4
 80065a4:	2200      	movs	r2, #0
 80065a6:	2300      	movs	r3, #0
 80065a8:	4630      	mov	r0, r6
 80065aa:	4639      	mov	r1, r7
 80065ac:	f7fa fa94 	bl	8000ad8 <__aeabi_dcmpeq>
 80065b0:	b108      	cbz	r0, 80065b6 <__cvt+0x7c>
 80065b2:	f8cd 900c 	str.w	r9, [sp, #12]
 80065b6:	2230      	movs	r2, #48	@ 0x30
 80065b8:	9b03      	ldr	r3, [sp, #12]
 80065ba:	454b      	cmp	r3, r9
 80065bc:	d31e      	bcc.n	80065fc <__cvt+0xc2>
 80065be:	9b03      	ldr	r3, [sp, #12]
 80065c0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80065c2:	1b5b      	subs	r3, r3, r5
 80065c4:	4628      	mov	r0, r5
 80065c6:	6013      	str	r3, [r2, #0]
 80065c8:	b004      	add	sp, #16
 80065ca:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80065ce:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80065d2:	eb00 0904 	add.w	r9, r0, r4
 80065d6:	d1e5      	bne.n	80065a4 <__cvt+0x6a>
 80065d8:	7803      	ldrb	r3, [r0, #0]
 80065da:	2b30      	cmp	r3, #48	@ 0x30
 80065dc:	d10a      	bne.n	80065f4 <__cvt+0xba>
 80065de:	2200      	movs	r2, #0
 80065e0:	2300      	movs	r3, #0
 80065e2:	4630      	mov	r0, r6
 80065e4:	4639      	mov	r1, r7
 80065e6:	f7fa fa77 	bl	8000ad8 <__aeabi_dcmpeq>
 80065ea:	b918      	cbnz	r0, 80065f4 <__cvt+0xba>
 80065ec:	f1c4 0401 	rsb	r4, r4, #1
 80065f0:	f8ca 4000 	str.w	r4, [sl]
 80065f4:	f8da 3000 	ldr.w	r3, [sl]
 80065f8:	4499      	add	r9, r3
 80065fa:	e7d3      	b.n	80065a4 <__cvt+0x6a>
 80065fc:	1c59      	adds	r1, r3, #1
 80065fe:	9103      	str	r1, [sp, #12]
 8006600:	701a      	strb	r2, [r3, #0]
 8006602:	e7d9      	b.n	80065b8 <__cvt+0x7e>

08006604 <__exponent>:
 8006604:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8006606:	2900      	cmp	r1, #0
 8006608:	bfba      	itte	lt
 800660a:	4249      	neglt	r1, r1
 800660c:	232d      	movlt	r3, #45	@ 0x2d
 800660e:	232b      	movge	r3, #43	@ 0x2b
 8006610:	2909      	cmp	r1, #9
 8006612:	7002      	strb	r2, [r0, #0]
 8006614:	7043      	strb	r3, [r0, #1]
 8006616:	dd29      	ble.n	800666c <__exponent+0x68>
 8006618:	f10d 0307 	add.w	r3, sp, #7
 800661c:	461d      	mov	r5, r3
 800661e:	270a      	movs	r7, #10
 8006620:	461a      	mov	r2, r3
 8006622:	fbb1 f6f7 	udiv	r6, r1, r7
 8006626:	fb07 1416 	mls	r4, r7, r6, r1
 800662a:	3430      	adds	r4, #48	@ 0x30
 800662c:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006630:	460c      	mov	r4, r1
 8006632:	2c63      	cmp	r4, #99	@ 0x63
 8006634:	f103 33ff 	add.w	r3, r3, #4294967295
 8006638:	4631      	mov	r1, r6
 800663a:	dcf1      	bgt.n	8006620 <__exponent+0x1c>
 800663c:	3130      	adds	r1, #48	@ 0x30
 800663e:	1e94      	subs	r4, r2, #2
 8006640:	f803 1c01 	strb.w	r1, [r3, #-1]
 8006644:	1c41      	adds	r1, r0, #1
 8006646:	4623      	mov	r3, r4
 8006648:	42ab      	cmp	r3, r5
 800664a:	d30a      	bcc.n	8006662 <__exponent+0x5e>
 800664c:	f10d 0309 	add.w	r3, sp, #9
 8006650:	1a9b      	subs	r3, r3, r2
 8006652:	42ac      	cmp	r4, r5
 8006654:	bf88      	it	hi
 8006656:	2300      	movhi	r3, #0
 8006658:	3302      	adds	r3, #2
 800665a:	4403      	add	r3, r0
 800665c:	1a18      	subs	r0, r3, r0
 800665e:	b003      	add	sp, #12
 8006660:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006662:	f813 6b01 	ldrb.w	r6, [r3], #1
 8006666:	f801 6f01 	strb.w	r6, [r1, #1]!
 800666a:	e7ed      	b.n	8006648 <__exponent+0x44>
 800666c:	2330      	movs	r3, #48	@ 0x30
 800666e:	3130      	adds	r1, #48	@ 0x30
 8006670:	7083      	strb	r3, [r0, #2]
 8006672:	70c1      	strb	r1, [r0, #3]
 8006674:	1d03      	adds	r3, r0, #4
 8006676:	e7f1      	b.n	800665c <__exponent+0x58>

08006678 <_printf_float>:
 8006678:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800667c:	b08d      	sub	sp, #52	@ 0x34
 800667e:	460c      	mov	r4, r1
 8006680:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 8006684:	4616      	mov	r6, r2
 8006686:	461f      	mov	r7, r3
 8006688:	4605      	mov	r5, r0
 800668a:	f001 f803 	bl	8007694 <_localeconv_r>
 800668e:	6803      	ldr	r3, [r0, #0]
 8006690:	9304      	str	r3, [sp, #16]
 8006692:	4618      	mov	r0, r3
 8006694:	f7f9 fdf4 	bl	8000280 <strlen>
 8006698:	2300      	movs	r3, #0
 800669a:	930a      	str	r3, [sp, #40]	@ 0x28
 800669c:	f8d8 3000 	ldr.w	r3, [r8]
 80066a0:	9005      	str	r0, [sp, #20]
 80066a2:	3307      	adds	r3, #7
 80066a4:	f023 0307 	bic.w	r3, r3, #7
 80066a8:	f103 0208 	add.w	r2, r3, #8
 80066ac:	f894 a018 	ldrb.w	sl, [r4, #24]
 80066b0:	f8d4 b000 	ldr.w	fp, [r4]
 80066b4:	f8c8 2000 	str.w	r2, [r8]
 80066b8:	e9d3 8900 	ldrd	r8, r9, [r3]
 80066bc:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80066c0:	9307      	str	r3, [sp, #28]
 80066c2:	f8cd 8018 	str.w	r8, [sp, #24]
 80066c6:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80066ca:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066ce:	4b9c      	ldr	r3, [pc, #624]	@ (8006940 <_printf_float+0x2c8>)
 80066d0:	f04f 32ff 	mov.w	r2, #4294967295
 80066d4:	f7fa fa32 	bl	8000b3c <__aeabi_dcmpun>
 80066d8:	bb70      	cbnz	r0, 8006738 <_printf_float+0xc0>
 80066da:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80066de:	4b98      	ldr	r3, [pc, #608]	@ (8006940 <_printf_float+0x2c8>)
 80066e0:	f04f 32ff 	mov.w	r2, #4294967295
 80066e4:	f7fa fa0c 	bl	8000b00 <__aeabi_dcmple>
 80066e8:	bb30      	cbnz	r0, 8006738 <_printf_float+0xc0>
 80066ea:	2200      	movs	r2, #0
 80066ec:	2300      	movs	r3, #0
 80066ee:	4640      	mov	r0, r8
 80066f0:	4649      	mov	r1, r9
 80066f2:	f7fa f9fb 	bl	8000aec <__aeabi_dcmplt>
 80066f6:	b110      	cbz	r0, 80066fe <_printf_float+0x86>
 80066f8:	232d      	movs	r3, #45	@ 0x2d
 80066fa:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80066fe:	4a91      	ldr	r2, [pc, #580]	@ (8006944 <_printf_float+0x2cc>)
 8006700:	4b91      	ldr	r3, [pc, #580]	@ (8006948 <_printf_float+0x2d0>)
 8006702:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 8006706:	bf8c      	ite	hi
 8006708:	4690      	movhi	r8, r2
 800670a:	4698      	movls	r8, r3
 800670c:	2303      	movs	r3, #3
 800670e:	6123      	str	r3, [r4, #16]
 8006710:	f02b 0304 	bic.w	r3, fp, #4
 8006714:	6023      	str	r3, [r4, #0]
 8006716:	f04f 0900 	mov.w	r9, #0
 800671a:	9700      	str	r7, [sp, #0]
 800671c:	4633      	mov	r3, r6
 800671e:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006720:	4621      	mov	r1, r4
 8006722:	4628      	mov	r0, r5
 8006724:	f000 f9d2 	bl	8006acc <_printf_common>
 8006728:	3001      	adds	r0, #1
 800672a:	f040 808d 	bne.w	8006848 <_printf_float+0x1d0>
 800672e:	f04f 30ff 	mov.w	r0, #4294967295
 8006732:	b00d      	add	sp, #52	@ 0x34
 8006734:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006738:	4642      	mov	r2, r8
 800673a:	464b      	mov	r3, r9
 800673c:	4640      	mov	r0, r8
 800673e:	4649      	mov	r1, r9
 8006740:	f7fa f9fc 	bl	8000b3c <__aeabi_dcmpun>
 8006744:	b140      	cbz	r0, 8006758 <_printf_float+0xe0>
 8006746:	464b      	mov	r3, r9
 8006748:	2b00      	cmp	r3, #0
 800674a:	bfbc      	itt	lt
 800674c:	232d      	movlt	r3, #45	@ 0x2d
 800674e:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 8006752:	4a7e      	ldr	r2, [pc, #504]	@ (800694c <_printf_float+0x2d4>)
 8006754:	4b7e      	ldr	r3, [pc, #504]	@ (8006950 <_printf_float+0x2d8>)
 8006756:	e7d4      	b.n	8006702 <_printf_float+0x8a>
 8006758:	6863      	ldr	r3, [r4, #4]
 800675a:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 800675e:	9206      	str	r2, [sp, #24]
 8006760:	1c5a      	adds	r2, r3, #1
 8006762:	d13b      	bne.n	80067dc <_printf_float+0x164>
 8006764:	2306      	movs	r3, #6
 8006766:	6063      	str	r3, [r4, #4]
 8006768:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 800676c:	2300      	movs	r3, #0
 800676e:	6022      	str	r2, [r4, #0]
 8006770:	9303      	str	r3, [sp, #12]
 8006772:	ab0a      	add	r3, sp, #40	@ 0x28
 8006774:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006778:	ab09      	add	r3, sp, #36	@ 0x24
 800677a:	9300      	str	r3, [sp, #0]
 800677c:	6861      	ldr	r1, [r4, #4]
 800677e:	ec49 8b10 	vmov	d0, r8, r9
 8006782:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 8006786:	4628      	mov	r0, r5
 8006788:	f7ff fed7 	bl	800653a <__cvt>
 800678c:	9b06      	ldr	r3, [sp, #24]
 800678e:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006790:	2b47      	cmp	r3, #71	@ 0x47
 8006792:	4680      	mov	r8, r0
 8006794:	d129      	bne.n	80067ea <_printf_float+0x172>
 8006796:	1cc8      	adds	r0, r1, #3
 8006798:	db02      	blt.n	80067a0 <_printf_float+0x128>
 800679a:	6863      	ldr	r3, [r4, #4]
 800679c:	4299      	cmp	r1, r3
 800679e:	dd41      	ble.n	8006824 <_printf_float+0x1ac>
 80067a0:	f1aa 0a02 	sub.w	sl, sl, #2
 80067a4:	fa5f fa8a 	uxtb.w	sl, sl
 80067a8:	3901      	subs	r1, #1
 80067aa:	4652      	mov	r2, sl
 80067ac:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80067b0:	9109      	str	r1, [sp, #36]	@ 0x24
 80067b2:	f7ff ff27 	bl	8006604 <__exponent>
 80067b6:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80067b8:	1813      	adds	r3, r2, r0
 80067ba:	2a01      	cmp	r2, #1
 80067bc:	4681      	mov	r9, r0
 80067be:	6123      	str	r3, [r4, #16]
 80067c0:	dc02      	bgt.n	80067c8 <_printf_float+0x150>
 80067c2:	6822      	ldr	r2, [r4, #0]
 80067c4:	07d2      	lsls	r2, r2, #31
 80067c6:	d501      	bpl.n	80067cc <_printf_float+0x154>
 80067c8:	3301      	adds	r3, #1
 80067ca:	6123      	str	r3, [r4, #16]
 80067cc:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80067d0:	2b00      	cmp	r3, #0
 80067d2:	d0a2      	beq.n	800671a <_printf_float+0xa2>
 80067d4:	232d      	movs	r3, #45	@ 0x2d
 80067d6:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80067da:	e79e      	b.n	800671a <_printf_float+0xa2>
 80067dc:	9a06      	ldr	r2, [sp, #24]
 80067de:	2a47      	cmp	r2, #71	@ 0x47
 80067e0:	d1c2      	bne.n	8006768 <_printf_float+0xf0>
 80067e2:	2b00      	cmp	r3, #0
 80067e4:	d1c0      	bne.n	8006768 <_printf_float+0xf0>
 80067e6:	2301      	movs	r3, #1
 80067e8:	e7bd      	b.n	8006766 <_printf_float+0xee>
 80067ea:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80067ee:	d9db      	bls.n	80067a8 <_printf_float+0x130>
 80067f0:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80067f4:	d118      	bne.n	8006828 <_printf_float+0x1b0>
 80067f6:	2900      	cmp	r1, #0
 80067f8:	6863      	ldr	r3, [r4, #4]
 80067fa:	dd0b      	ble.n	8006814 <_printf_float+0x19c>
 80067fc:	6121      	str	r1, [r4, #16]
 80067fe:	b913      	cbnz	r3, 8006806 <_printf_float+0x18e>
 8006800:	6822      	ldr	r2, [r4, #0]
 8006802:	07d0      	lsls	r0, r2, #31
 8006804:	d502      	bpl.n	800680c <_printf_float+0x194>
 8006806:	3301      	adds	r3, #1
 8006808:	440b      	add	r3, r1
 800680a:	6123      	str	r3, [r4, #16]
 800680c:	65a1      	str	r1, [r4, #88]	@ 0x58
 800680e:	f04f 0900 	mov.w	r9, #0
 8006812:	e7db      	b.n	80067cc <_printf_float+0x154>
 8006814:	b913      	cbnz	r3, 800681c <_printf_float+0x1a4>
 8006816:	6822      	ldr	r2, [r4, #0]
 8006818:	07d2      	lsls	r2, r2, #31
 800681a:	d501      	bpl.n	8006820 <_printf_float+0x1a8>
 800681c:	3302      	adds	r3, #2
 800681e:	e7f4      	b.n	800680a <_printf_float+0x192>
 8006820:	2301      	movs	r3, #1
 8006822:	e7f2      	b.n	800680a <_printf_float+0x192>
 8006824:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006828:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800682a:	4299      	cmp	r1, r3
 800682c:	db05      	blt.n	800683a <_printf_float+0x1c2>
 800682e:	6823      	ldr	r3, [r4, #0]
 8006830:	6121      	str	r1, [r4, #16]
 8006832:	07d8      	lsls	r0, r3, #31
 8006834:	d5ea      	bpl.n	800680c <_printf_float+0x194>
 8006836:	1c4b      	adds	r3, r1, #1
 8006838:	e7e7      	b.n	800680a <_printf_float+0x192>
 800683a:	2900      	cmp	r1, #0
 800683c:	bfd4      	ite	le
 800683e:	f1c1 0202 	rsble	r2, r1, #2
 8006842:	2201      	movgt	r2, #1
 8006844:	4413      	add	r3, r2
 8006846:	e7e0      	b.n	800680a <_printf_float+0x192>
 8006848:	6823      	ldr	r3, [r4, #0]
 800684a:	055a      	lsls	r2, r3, #21
 800684c:	d407      	bmi.n	800685e <_printf_float+0x1e6>
 800684e:	6923      	ldr	r3, [r4, #16]
 8006850:	4642      	mov	r2, r8
 8006852:	4631      	mov	r1, r6
 8006854:	4628      	mov	r0, r5
 8006856:	47b8      	blx	r7
 8006858:	3001      	adds	r0, #1
 800685a:	d12b      	bne.n	80068b4 <_printf_float+0x23c>
 800685c:	e767      	b.n	800672e <_printf_float+0xb6>
 800685e:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 8006862:	f240 80dd 	bls.w	8006a20 <_printf_float+0x3a8>
 8006866:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800686a:	2200      	movs	r2, #0
 800686c:	2300      	movs	r3, #0
 800686e:	f7fa f933 	bl	8000ad8 <__aeabi_dcmpeq>
 8006872:	2800      	cmp	r0, #0
 8006874:	d033      	beq.n	80068de <_printf_float+0x266>
 8006876:	4a37      	ldr	r2, [pc, #220]	@ (8006954 <_printf_float+0x2dc>)
 8006878:	2301      	movs	r3, #1
 800687a:	4631      	mov	r1, r6
 800687c:	4628      	mov	r0, r5
 800687e:	47b8      	blx	r7
 8006880:	3001      	adds	r0, #1
 8006882:	f43f af54 	beq.w	800672e <_printf_float+0xb6>
 8006886:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 800688a:	4543      	cmp	r3, r8
 800688c:	db02      	blt.n	8006894 <_printf_float+0x21c>
 800688e:	6823      	ldr	r3, [r4, #0]
 8006890:	07d8      	lsls	r0, r3, #31
 8006892:	d50f      	bpl.n	80068b4 <_printf_float+0x23c>
 8006894:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006898:	4631      	mov	r1, r6
 800689a:	4628      	mov	r0, r5
 800689c:	47b8      	blx	r7
 800689e:	3001      	adds	r0, #1
 80068a0:	f43f af45 	beq.w	800672e <_printf_float+0xb6>
 80068a4:	f04f 0900 	mov.w	r9, #0
 80068a8:	f108 38ff 	add.w	r8, r8, #4294967295
 80068ac:	f104 0a1a 	add.w	sl, r4, #26
 80068b0:	45c8      	cmp	r8, r9
 80068b2:	dc09      	bgt.n	80068c8 <_printf_float+0x250>
 80068b4:	6823      	ldr	r3, [r4, #0]
 80068b6:	079b      	lsls	r3, r3, #30
 80068b8:	f100 8103 	bmi.w	8006ac2 <_printf_float+0x44a>
 80068bc:	68e0      	ldr	r0, [r4, #12]
 80068be:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80068c0:	4298      	cmp	r0, r3
 80068c2:	bfb8      	it	lt
 80068c4:	4618      	movlt	r0, r3
 80068c6:	e734      	b.n	8006732 <_printf_float+0xba>
 80068c8:	2301      	movs	r3, #1
 80068ca:	4652      	mov	r2, sl
 80068cc:	4631      	mov	r1, r6
 80068ce:	4628      	mov	r0, r5
 80068d0:	47b8      	blx	r7
 80068d2:	3001      	adds	r0, #1
 80068d4:	f43f af2b 	beq.w	800672e <_printf_float+0xb6>
 80068d8:	f109 0901 	add.w	r9, r9, #1
 80068dc:	e7e8      	b.n	80068b0 <_printf_float+0x238>
 80068de:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80068e0:	2b00      	cmp	r3, #0
 80068e2:	dc39      	bgt.n	8006958 <_printf_float+0x2e0>
 80068e4:	4a1b      	ldr	r2, [pc, #108]	@ (8006954 <_printf_float+0x2dc>)
 80068e6:	2301      	movs	r3, #1
 80068e8:	4631      	mov	r1, r6
 80068ea:	4628      	mov	r0, r5
 80068ec:	47b8      	blx	r7
 80068ee:	3001      	adds	r0, #1
 80068f0:	f43f af1d 	beq.w	800672e <_printf_float+0xb6>
 80068f4:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 80068f8:	ea59 0303 	orrs.w	r3, r9, r3
 80068fc:	d102      	bne.n	8006904 <_printf_float+0x28c>
 80068fe:	6823      	ldr	r3, [r4, #0]
 8006900:	07d9      	lsls	r1, r3, #31
 8006902:	d5d7      	bpl.n	80068b4 <_printf_float+0x23c>
 8006904:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006908:	4631      	mov	r1, r6
 800690a:	4628      	mov	r0, r5
 800690c:	47b8      	blx	r7
 800690e:	3001      	adds	r0, #1
 8006910:	f43f af0d 	beq.w	800672e <_printf_float+0xb6>
 8006914:	f04f 0a00 	mov.w	sl, #0
 8006918:	f104 0b1a 	add.w	fp, r4, #26
 800691c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800691e:	425b      	negs	r3, r3
 8006920:	4553      	cmp	r3, sl
 8006922:	dc01      	bgt.n	8006928 <_printf_float+0x2b0>
 8006924:	464b      	mov	r3, r9
 8006926:	e793      	b.n	8006850 <_printf_float+0x1d8>
 8006928:	2301      	movs	r3, #1
 800692a:	465a      	mov	r2, fp
 800692c:	4631      	mov	r1, r6
 800692e:	4628      	mov	r0, r5
 8006930:	47b8      	blx	r7
 8006932:	3001      	adds	r0, #1
 8006934:	f43f aefb 	beq.w	800672e <_printf_float+0xb6>
 8006938:	f10a 0a01 	add.w	sl, sl, #1
 800693c:	e7ee      	b.n	800691c <_printf_float+0x2a4>
 800693e:	bf00      	nop
 8006940:	7fefffff 	.word	0x7fefffff
 8006944:	0800af30 	.word	0x0800af30
 8006948:	0800af2c 	.word	0x0800af2c
 800694c:	0800af38 	.word	0x0800af38
 8006950:	0800af34 	.word	0x0800af34
 8006954:	0800af3c 	.word	0x0800af3c
 8006958:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 800695a:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800695e:	4553      	cmp	r3, sl
 8006960:	bfa8      	it	ge
 8006962:	4653      	movge	r3, sl
 8006964:	2b00      	cmp	r3, #0
 8006966:	4699      	mov	r9, r3
 8006968:	dc36      	bgt.n	80069d8 <_printf_float+0x360>
 800696a:	f04f 0b00 	mov.w	fp, #0
 800696e:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 8006972:	f104 021a 	add.w	r2, r4, #26
 8006976:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006978:	9306      	str	r3, [sp, #24]
 800697a:	eba3 0309 	sub.w	r3, r3, r9
 800697e:	455b      	cmp	r3, fp
 8006980:	dc31      	bgt.n	80069e6 <_printf_float+0x36e>
 8006982:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006984:	459a      	cmp	sl, r3
 8006986:	dc3a      	bgt.n	80069fe <_printf_float+0x386>
 8006988:	6823      	ldr	r3, [r4, #0]
 800698a:	07da      	lsls	r2, r3, #31
 800698c:	d437      	bmi.n	80069fe <_printf_float+0x386>
 800698e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006990:	ebaa 0903 	sub.w	r9, sl, r3
 8006994:	9b06      	ldr	r3, [sp, #24]
 8006996:	ebaa 0303 	sub.w	r3, sl, r3
 800699a:	4599      	cmp	r9, r3
 800699c:	bfa8      	it	ge
 800699e:	4699      	movge	r9, r3
 80069a0:	f1b9 0f00 	cmp.w	r9, #0
 80069a4:	dc33      	bgt.n	8006a0e <_printf_float+0x396>
 80069a6:	f04f 0800 	mov.w	r8, #0
 80069aa:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80069ae:	f104 0b1a 	add.w	fp, r4, #26
 80069b2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80069b4:	ebaa 0303 	sub.w	r3, sl, r3
 80069b8:	eba3 0309 	sub.w	r3, r3, r9
 80069bc:	4543      	cmp	r3, r8
 80069be:	f77f af79 	ble.w	80068b4 <_printf_float+0x23c>
 80069c2:	2301      	movs	r3, #1
 80069c4:	465a      	mov	r2, fp
 80069c6:	4631      	mov	r1, r6
 80069c8:	4628      	mov	r0, r5
 80069ca:	47b8      	blx	r7
 80069cc:	3001      	adds	r0, #1
 80069ce:	f43f aeae 	beq.w	800672e <_printf_float+0xb6>
 80069d2:	f108 0801 	add.w	r8, r8, #1
 80069d6:	e7ec      	b.n	80069b2 <_printf_float+0x33a>
 80069d8:	4642      	mov	r2, r8
 80069da:	4631      	mov	r1, r6
 80069dc:	4628      	mov	r0, r5
 80069de:	47b8      	blx	r7
 80069e0:	3001      	adds	r0, #1
 80069e2:	d1c2      	bne.n	800696a <_printf_float+0x2f2>
 80069e4:	e6a3      	b.n	800672e <_printf_float+0xb6>
 80069e6:	2301      	movs	r3, #1
 80069e8:	4631      	mov	r1, r6
 80069ea:	4628      	mov	r0, r5
 80069ec:	9206      	str	r2, [sp, #24]
 80069ee:	47b8      	blx	r7
 80069f0:	3001      	adds	r0, #1
 80069f2:	f43f ae9c 	beq.w	800672e <_printf_float+0xb6>
 80069f6:	9a06      	ldr	r2, [sp, #24]
 80069f8:	f10b 0b01 	add.w	fp, fp, #1
 80069fc:	e7bb      	b.n	8006976 <_printf_float+0x2fe>
 80069fe:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a02:	4631      	mov	r1, r6
 8006a04:	4628      	mov	r0, r5
 8006a06:	47b8      	blx	r7
 8006a08:	3001      	adds	r0, #1
 8006a0a:	d1c0      	bne.n	800698e <_printf_float+0x316>
 8006a0c:	e68f      	b.n	800672e <_printf_float+0xb6>
 8006a0e:	9a06      	ldr	r2, [sp, #24]
 8006a10:	464b      	mov	r3, r9
 8006a12:	4442      	add	r2, r8
 8006a14:	4631      	mov	r1, r6
 8006a16:	4628      	mov	r0, r5
 8006a18:	47b8      	blx	r7
 8006a1a:	3001      	adds	r0, #1
 8006a1c:	d1c3      	bne.n	80069a6 <_printf_float+0x32e>
 8006a1e:	e686      	b.n	800672e <_printf_float+0xb6>
 8006a20:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006a24:	f1ba 0f01 	cmp.w	sl, #1
 8006a28:	dc01      	bgt.n	8006a2e <_printf_float+0x3b6>
 8006a2a:	07db      	lsls	r3, r3, #31
 8006a2c:	d536      	bpl.n	8006a9c <_printf_float+0x424>
 8006a2e:	2301      	movs	r3, #1
 8006a30:	4642      	mov	r2, r8
 8006a32:	4631      	mov	r1, r6
 8006a34:	4628      	mov	r0, r5
 8006a36:	47b8      	blx	r7
 8006a38:	3001      	adds	r0, #1
 8006a3a:	f43f ae78 	beq.w	800672e <_printf_float+0xb6>
 8006a3e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006a42:	4631      	mov	r1, r6
 8006a44:	4628      	mov	r0, r5
 8006a46:	47b8      	blx	r7
 8006a48:	3001      	adds	r0, #1
 8006a4a:	f43f ae70 	beq.w	800672e <_printf_float+0xb6>
 8006a4e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006a52:	2200      	movs	r2, #0
 8006a54:	2300      	movs	r3, #0
 8006a56:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006a5a:	f7fa f83d 	bl	8000ad8 <__aeabi_dcmpeq>
 8006a5e:	b9c0      	cbnz	r0, 8006a92 <_printf_float+0x41a>
 8006a60:	4653      	mov	r3, sl
 8006a62:	f108 0201 	add.w	r2, r8, #1
 8006a66:	4631      	mov	r1, r6
 8006a68:	4628      	mov	r0, r5
 8006a6a:	47b8      	blx	r7
 8006a6c:	3001      	adds	r0, #1
 8006a6e:	d10c      	bne.n	8006a8a <_printf_float+0x412>
 8006a70:	e65d      	b.n	800672e <_printf_float+0xb6>
 8006a72:	2301      	movs	r3, #1
 8006a74:	465a      	mov	r2, fp
 8006a76:	4631      	mov	r1, r6
 8006a78:	4628      	mov	r0, r5
 8006a7a:	47b8      	blx	r7
 8006a7c:	3001      	adds	r0, #1
 8006a7e:	f43f ae56 	beq.w	800672e <_printf_float+0xb6>
 8006a82:	f108 0801 	add.w	r8, r8, #1
 8006a86:	45d0      	cmp	r8, sl
 8006a88:	dbf3      	blt.n	8006a72 <_printf_float+0x3fa>
 8006a8a:	464b      	mov	r3, r9
 8006a8c:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006a90:	e6df      	b.n	8006852 <_printf_float+0x1da>
 8006a92:	f04f 0800 	mov.w	r8, #0
 8006a96:	f104 0b1a 	add.w	fp, r4, #26
 8006a9a:	e7f4      	b.n	8006a86 <_printf_float+0x40e>
 8006a9c:	2301      	movs	r3, #1
 8006a9e:	4642      	mov	r2, r8
 8006aa0:	e7e1      	b.n	8006a66 <_printf_float+0x3ee>
 8006aa2:	2301      	movs	r3, #1
 8006aa4:	464a      	mov	r2, r9
 8006aa6:	4631      	mov	r1, r6
 8006aa8:	4628      	mov	r0, r5
 8006aaa:	47b8      	blx	r7
 8006aac:	3001      	adds	r0, #1
 8006aae:	f43f ae3e 	beq.w	800672e <_printf_float+0xb6>
 8006ab2:	f108 0801 	add.w	r8, r8, #1
 8006ab6:	68e3      	ldr	r3, [r4, #12]
 8006ab8:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8006aba:	1a5b      	subs	r3, r3, r1
 8006abc:	4543      	cmp	r3, r8
 8006abe:	dcf0      	bgt.n	8006aa2 <_printf_float+0x42a>
 8006ac0:	e6fc      	b.n	80068bc <_printf_float+0x244>
 8006ac2:	f04f 0800 	mov.w	r8, #0
 8006ac6:	f104 0919 	add.w	r9, r4, #25
 8006aca:	e7f4      	b.n	8006ab6 <_printf_float+0x43e>

08006acc <_printf_common>:
 8006acc:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8006ad0:	4616      	mov	r6, r2
 8006ad2:	4698      	mov	r8, r3
 8006ad4:	688a      	ldr	r2, [r1, #8]
 8006ad6:	690b      	ldr	r3, [r1, #16]
 8006ad8:	f8dd 9020 	ldr.w	r9, [sp, #32]
 8006adc:	4293      	cmp	r3, r2
 8006ade:	bfb8      	it	lt
 8006ae0:	4613      	movlt	r3, r2
 8006ae2:	6033      	str	r3, [r6, #0]
 8006ae4:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 8006ae8:	4607      	mov	r7, r0
 8006aea:	460c      	mov	r4, r1
 8006aec:	b10a      	cbz	r2, 8006af2 <_printf_common+0x26>
 8006aee:	3301      	adds	r3, #1
 8006af0:	6033      	str	r3, [r6, #0]
 8006af2:	6823      	ldr	r3, [r4, #0]
 8006af4:	0699      	lsls	r1, r3, #26
 8006af6:	bf42      	ittt	mi
 8006af8:	6833      	ldrmi	r3, [r6, #0]
 8006afa:	3302      	addmi	r3, #2
 8006afc:	6033      	strmi	r3, [r6, #0]
 8006afe:	6825      	ldr	r5, [r4, #0]
 8006b00:	f015 0506 	ands.w	r5, r5, #6
 8006b04:	d106      	bne.n	8006b14 <_printf_common+0x48>
 8006b06:	f104 0a19 	add.w	sl, r4, #25
 8006b0a:	68e3      	ldr	r3, [r4, #12]
 8006b0c:	6832      	ldr	r2, [r6, #0]
 8006b0e:	1a9b      	subs	r3, r3, r2
 8006b10:	42ab      	cmp	r3, r5
 8006b12:	dc26      	bgt.n	8006b62 <_printf_common+0x96>
 8006b14:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006b18:	6822      	ldr	r2, [r4, #0]
 8006b1a:	3b00      	subs	r3, #0
 8006b1c:	bf18      	it	ne
 8006b1e:	2301      	movne	r3, #1
 8006b20:	0692      	lsls	r2, r2, #26
 8006b22:	d42b      	bmi.n	8006b7c <_printf_common+0xb0>
 8006b24:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006b28:	4641      	mov	r1, r8
 8006b2a:	4638      	mov	r0, r7
 8006b2c:	47c8      	blx	r9
 8006b2e:	3001      	adds	r0, #1
 8006b30:	d01e      	beq.n	8006b70 <_printf_common+0xa4>
 8006b32:	6823      	ldr	r3, [r4, #0]
 8006b34:	6922      	ldr	r2, [r4, #16]
 8006b36:	f003 0306 	and.w	r3, r3, #6
 8006b3a:	2b04      	cmp	r3, #4
 8006b3c:	bf02      	ittt	eq
 8006b3e:	68e5      	ldreq	r5, [r4, #12]
 8006b40:	6833      	ldreq	r3, [r6, #0]
 8006b42:	1aed      	subeq	r5, r5, r3
 8006b44:	68a3      	ldr	r3, [r4, #8]
 8006b46:	bf0c      	ite	eq
 8006b48:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006b4c:	2500      	movne	r5, #0
 8006b4e:	4293      	cmp	r3, r2
 8006b50:	bfc4      	itt	gt
 8006b52:	1a9b      	subgt	r3, r3, r2
 8006b54:	18ed      	addgt	r5, r5, r3
 8006b56:	2600      	movs	r6, #0
 8006b58:	341a      	adds	r4, #26
 8006b5a:	42b5      	cmp	r5, r6
 8006b5c:	d11a      	bne.n	8006b94 <_printf_common+0xc8>
 8006b5e:	2000      	movs	r0, #0
 8006b60:	e008      	b.n	8006b74 <_printf_common+0xa8>
 8006b62:	2301      	movs	r3, #1
 8006b64:	4652      	mov	r2, sl
 8006b66:	4641      	mov	r1, r8
 8006b68:	4638      	mov	r0, r7
 8006b6a:	47c8      	blx	r9
 8006b6c:	3001      	adds	r0, #1
 8006b6e:	d103      	bne.n	8006b78 <_printf_common+0xac>
 8006b70:	f04f 30ff 	mov.w	r0, #4294967295
 8006b74:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006b78:	3501      	adds	r5, #1
 8006b7a:	e7c6      	b.n	8006b0a <_printf_common+0x3e>
 8006b7c:	18e1      	adds	r1, r4, r3
 8006b7e:	1c5a      	adds	r2, r3, #1
 8006b80:	2030      	movs	r0, #48	@ 0x30
 8006b82:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 8006b86:	4422      	add	r2, r4
 8006b88:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006b8c:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006b90:	3302      	adds	r3, #2
 8006b92:	e7c7      	b.n	8006b24 <_printf_common+0x58>
 8006b94:	2301      	movs	r3, #1
 8006b96:	4622      	mov	r2, r4
 8006b98:	4641      	mov	r1, r8
 8006b9a:	4638      	mov	r0, r7
 8006b9c:	47c8      	blx	r9
 8006b9e:	3001      	adds	r0, #1
 8006ba0:	d0e6      	beq.n	8006b70 <_printf_common+0xa4>
 8006ba2:	3601      	adds	r6, #1
 8006ba4:	e7d9      	b.n	8006b5a <_printf_common+0x8e>
	...

08006ba8 <_printf_i>:
 8006ba8:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006bac:	7e0f      	ldrb	r7, [r1, #24]
 8006bae:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 8006bb0:	2f78      	cmp	r7, #120	@ 0x78
 8006bb2:	4691      	mov	r9, r2
 8006bb4:	4680      	mov	r8, r0
 8006bb6:	460c      	mov	r4, r1
 8006bb8:	469a      	mov	sl, r3
 8006bba:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 8006bbe:	d807      	bhi.n	8006bd0 <_printf_i+0x28>
 8006bc0:	2f62      	cmp	r7, #98	@ 0x62
 8006bc2:	d80a      	bhi.n	8006bda <_printf_i+0x32>
 8006bc4:	2f00      	cmp	r7, #0
 8006bc6:	f000 80d1 	beq.w	8006d6c <_printf_i+0x1c4>
 8006bca:	2f58      	cmp	r7, #88	@ 0x58
 8006bcc:	f000 80b8 	beq.w	8006d40 <_printf_i+0x198>
 8006bd0:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006bd4:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 8006bd8:	e03a      	b.n	8006c50 <_printf_i+0xa8>
 8006bda:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 8006bde:	2b15      	cmp	r3, #21
 8006be0:	d8f6      	bhi.n	8006bd0 <_printf_i+0x28>
 8006be2:	a101      	add	r1, pc, #4	@ (adr r1, 8006be8 <_printf_i+0x40>)
 8006be4:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 8006be8:	08006c41 	.word	0x08006c41
 8006bec:	08006c55 	.word	0x08006c55
 8006bf0:	08006bd1 	.word	0x08006bd1
 8006bf4:	08006bd1 	.word	0x08006bd1
 8006bf8:	08006bd1 	.word	0x08006bd1
 8006bfc:	08006bd1 	.word	0x08006bd1
 8006c00:	08006c55 	.word	0x08006c55
 8006c04:	08006bd1 	.word	0x08006bd1
 8006c08:	08006bd1 	.word	0x08006bd1
 8006c0c:	08006bd1 	.word	0x08006bd1
 8006c10:	08006bd1 	.word	0x08006bd1
 8006c14:	08006d53 	.word	0x08006d53
 8006c18:	08006c7f 	.word	0x08006c7f
 8006c1c:	08006d0d 	.word	0x08006d0d
 8006c20:	08006bd1 	.word	0x08006bd1
 8006c24:	08006bd1 	.word	0x08006bd1
 8006c28:	08006d75 	.word	0x08006d75
 8006c2c:	08006bd1 	.word	0x08006bd1
 8006c30:	08006c7f 	.word	0x08006c7f
 8006c34:	08006bd1 	.word	0x08006bd1
 8006c38:	08006bd1 	.word	0x08006bd1
 8006c3c:	08006d15 	.word	0x08006d15
 8006c40:	6833      	ldr	r3, [r6, #0]
 8006c42:	1d1a      	adds	r2, r3, #4
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	6032      	str	r2, [r6, #0]
 8006c48:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006c4c:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006c50:	2301      	movs	r3, #1
 8006c52:	e09c      	b.n	8006d8e <_printf_i+0x1e6>
 8006c54:	6833      	ldr	r3, [r6, #0]
 8006c56:	6820      	ldr	r0, [r4, #0]
 8006c58:	1d19      	adds	r1, r3, #4
 8006c5a:	6031      	str	r1, [r6, #0]
 8006c5c:	0606      	lsls	r6, r0, #24
 8006c5e:	d501      	bpl.n	8006c64 <_printf_i+0xbc>
 8006c60:	681d      	ldr	r5, [r3, #0]
 8006c62:	e003      	b.n	8006c6c <_printf_i+0xc4>
 8006c64:	0645      	lsls	r5, r0, #25
 8006c66:	d5fb      	bpl.n	8006c60 <_printf_i+0xb8>
 8006c68:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006c6c:	2d00      	cmp	r5, #0
 8006c6e:	da03      	bge.n	8006c78 <_printf_i+0xd0>
 8006c70:	232d      	movs	r3, #45	@ 0x2d
 8006c72:	426d      	negs	r5, r5
 8006c74:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006c78:	4858      	ldr	r0, [pc, #352]	@ (8006ddc <_printf_i+0x234>)
 8006c7a:	230a      	movs	r3, #10
 8006c7c:	e011      	b.n	8006ca2 <_printf_i+0xfa>
 8006c7e:	6821      	ldr	r1, [r4, #0]
 8006c80:	6833      	ldr	r3, [r6, #0]
 8006c82:	0608      	lsls	r0, r1, #24
 8006c84:	f853 5b04 	ldr.w	r5, [r3], #4
 8006c88:	d402      	bmi.n	8006c90 <_printf_i+0xe8>
 8006c8a:	0649      	lsls	r1, r1, #25
 8006c8c:	bf48      	it	mi
 8006c8e:	b2ad      	uxthmi	r5, r5
 8006c90:	2f6f      	cmp	r7, #111	@ 0x6f
 8006c92:	4852      	ldr	r0, [pc, #328]	@ (8006ddc <_printf_i+0x234>)
 8006c94:	6033      	str	r3, [r6, #0]
 8006c96:	bf14      	ite	ne
 8006c98:	230a      	movne	r3, #10
 8006c9a:	2308      	moveq	r3, #8
 8006c9c:	2100      	movs	r1, #0
 8006c9e:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 8006ca2:	6866      	ldr	r6, [r4, #4]
 8006ca4:	60a6      	str	r6, [r4, #8]
 8006ca6:	2e00      	cmp	r6, #0
 8006ca8:	db05      	blt.n	8006cb6 <_printf_i+0x10e>
 8006caa:	6821      	ldr	r1, [r4, #0]
 8006cac:	432e      	orrs	r6, r5
 8006cae:	f021 0104 	bic.w	r1, r1, #4
 8006cb2:	6021      	str	r1, [r4, #0]
 8006cb4:	d04b      	beq.n	8006d4e <_printf_i+0x1a6>
 8006cb6:	4616      	mov	r6, r2
 8006cb8:	fbb5 f1f3 	udiv	r1, r5, r3
 8006cbc:	fb03 5711 	mls	r7, r3, r1, r5
 8006cc0:	5dc7      	ldrb	r7, [r0, r7]
 8006cc2:	f806 7d01 	strb.w	r7, [r6, #-1]!
 8006cc6:	462f      	mov	r7, r5
 8006cc8:	42bb      	cmp	r3, r7
 8006cca:	460d      	mov	r5, r1
 8006ccc:	d9f4      	bls.n	8006cb8 <_printf_i+0x110>
 8006cce:	2b08      	cmp	r3, #8
 8006cd0:	d10b      	bne.n	8006cea <_printf_i+0x142>
 8006cd2:	6823      	ldr	r3, [r4, #0]
 8006cd4:	07df      	lsls	r7, r3, #31
 8006cd6:	d508      	bpl.n	8006cea <_printf_i+0x142>
 8006cd8:	6923      	ldr	r3, [r4, #16]
 8006cda:	6861      	ldr	r1, [r4, #4]
 8006cdc:	4299      	cmp	r1, r3
 8006cde:	bfde      	ittt	le
 8006ce0:	2330      	movle	r3, #48	@ 0x30
 8006ce2:	f806 3c01 	strble.w	r3, [r6, #-1]
 8006ce6:	f106 36ff 	addle.w	r6, r6, #4294967295
 8006cea:	1b92      	subs	r2, r2, r6
 8006cec:	6122      	str	r2, [r4, #16]
 8006cee:	f8cd a000 	str.w	sl, [sp]
 8006cf2:	464b      	mov	r3, r9
 8006cf4:	aa03      	add	r2, sp, #12
 8006cf6:	4621      	mov	r1, r4
 8006cf8:	4640      	mov	r0, r8
 8006cfa:	f7ff fee7 	bl	8006acc <_printf_common>
 8006cfe:	3001      	adds	r0, #1
 8006d00:	d14a      	bne.n	8006d98 <_printf_i+0x1f0>
 8006d02:	f04f 30ff 	mov.w	r0, #4294967295
 8006d06:	b004      	add	sp, #16
 8006d08:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006d0c:	6823      	ldr	r3, [r4, #0]
 8006d0e:	f043 0320 	orr.w	r3, r3, #32
 8006d12:	6023      	str	r3, [r4, #0]
 8006d14:	4832      	ldr	r0, [pc, #200]	@ (8006de0 <_printf_i+0x238>)
 8006d16:	2778      	movs	r7, #120	@ 0x78
 8006d18:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006d1c:	6823      	ldr	r3, [r4, #0]
 8006d1e:	6831      	ldr	r1, [r6, #0]
 8006d20:	061f      	lsls	r7, r3, #24
 8006d22:	f851 5b04 	ldr.w	r5, [r1], #4
 8006d26:	d402      	bmi.n	8006d2e <_printf_i+0x186>
 8006d28:	065f      	lsls	r7, r3, #25
 8006d2a:	bf48      	it	mi
 8006d2c:	b2ad      	uxthmi	r5, r5
 8006d2e:	6031      	str	r1, [r6, #0]
 8006d30:	07d9      	lsls	r1, r3, #31
 8006d32:	bf44      	itt	mi
 8006d34:	f043 0320 	orrmi.w	r3, r3, #32
 8006d38:	6023      	strmi	r3, [r4, #0]
 8006d3a:	b11d      	cbz	r5, 8006d44 <_printf_i+0x19c>
 8006d3c:	2310      	movs	r3, #16
 8006d3e:	e7ad      	b.n	8006c9c <_printf_i+0xf4>
 8006d40:	4826      	ldr	r0, [pc, #152]	@ (8006ddc <_printf_i+0x234>)
 8006d42:	e7e9      	b.n	8006d18 <_printf_i+0x170>
 8006d44:	6823      	ldr	r3, [r4, #0]
 8006d46:	f023 0320 	bic.w	r3, r3, #32
 8006d4a:	6023      	str	r3, [r4, #0]
 8006d4c:	e7f6      	b.n	8006d3c <_printf_i+0x194>
 8006d4e:	4616      	mov	r6, r2
 8006d50:	e7bd      	b.n	8006cce <_printf_i+0x126>
 8006d52:	6833      	ldr	r3, [r6, #0]
 8006d54:	6825      	ldr	r5, [r4, #0]
 8006d56:	6961      	ldr	r1, [r4, #20]
 8006d58:	1d18      	adds	r0, r3, #4
 8006d5a:	6030      	str	r0, [r6, #0]
 8006d5c:	062e      	lsls	r6, r5, #24
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	d501      	bpl.n	8006d66 <_printf_i+0x1be>
 8006d62:	6019      	str	r1, [r3, #0]
 8006d64:	e002      	b.n	8006d6c <_printf_i+0x1c4>
 8006d66:	0668      	lsls	r0, r5, #25
 8006d68:	d5fb      	bpl.n	8006d62 <_printf_i+0x1ba>
 8006d6a:	8019      	strh	r1, [r3, #0]
 8006d6c:	2300      	movs	r3, #0
 8006d6e:	6123      	str	r3, [r4, #16]
 8006d70:	4616      	mov	r6, r2
 8006d72:	e7bc      	b.n	8006cee <_printf_i+0x146>
 8006d74:	6833      	ldr	r3, [r6, #0]
 8006d76:	1d1a      	adds	r2, r3, #4
 8006d78:	6032      	str	r2, [r6, #0]
 8006d7a:	681e      	ldr	r6, [r3, #0]
 8006d7c:	6862      	ldr	r2, [r4, #4]
 8006d7e:	2100      	movs	r1, #0
 8006d80:	4630      	mov	r0, r6
 8006d82:	f7f9 fa2d 	bl	80001e0 <memchr>
 8006d86:	b108      	cbz	r0, 8006d8c <_printf_i+0x1e4>
 8006d88:	1b80      	subs	r0, r0, r6
 8006d8a:	6060      	str	r0, [r4, #4]
 8006d8c:	6863      	ldr	r3, [r4, #4]
 8006d8e:	6123      	str	r3, [r4, #16]
 8006d90:	2300      	movs	r3, #0
 8006d92:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006d96:	e7aa      	b.n	8006cee <_printf_i+0x146>
 8006d98:	6923      	ldr	r3, [r4, #16]
 8006d9a:	4632      	mov	r2, r6
 8006d9c:	4649      	mov	r1, r9
 8006d9e:	4640      	mov	r0, r8
 8006da0:	47d0      	blx	sl
 8006da2:	3001      	adds	r0, #1
 8006da4:	d0ad      	beq.n	8006d02 <_printf_i+0x15a>
 8006da6:	6823      	ldr	r3, [r4, #0]
 8006da8:	079b      	lsls	r3, r3, #30
 8006daa:	d413      	bmi.n	8006dd4 <_printf_i+0x22c>
 8006dac:	68e0      	ldr	r0, [r4, #12]
 8006dae:	9b03      	ldr	r3, [sp, #12]
 8006db0:	4298      	cmp	r0, r3
 8006db2:	bfb8      	it	lt
 8006db4:	4618      	movlt	r0, r3
 8006db6:	e7a6      	b.n	8006d06 <_printf_i+0x15e>
 8006db8:	2301      	movs	r3, #1
 8006dba:	4632      	mov	r2, r6
 8006dbc:	4649      	mov	r1, r9
 8006dbe:	4640      	mov	r0, r8
 8006dc0:	47d0      	blx	sl
 8006dc2:	3001      	adds	r0, #1
 8006dc4:	d09d      	beq.n	8006d02 <_printf_i+0x15a>
 8006dc6:	3501      	adds	r5, #1
 8006dc8:	68e3      	ldr	r3, [r4, #12]
 8006dca:	9903      	ldr	r1, [sp, #12]
 8006dcc:	1a5b      	subs	r3, r3, r1
 8006dce:	42ab      	cmp	r3, r5
 8006dd0:	dcf2      	bgt.n	8006db8 <_printf_i+0x210>
 8006dd2:	e7eb      	b.n	8006dac <_printf_i+0x204>
 8006dd4:	2500      	movs	r5, #0
 8006dd6:	f104 0619 	add.w	r6, r4, #25
 8006dda:	e7f5      	b.n	8006dc8 <_printf_i+0x220>
 8006ddc:	0800af3e 	.word	0x0800af3e
 8006de0:	0800af4f 	.word	0x0800af4f

08006de4 <_scanf_float>:
 8006de4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006de8:	b087      	sub	sp, #28
 8006dea:	4691      	mov	r9, r2
 8006dec:	9303      	str	r3, [sp, #12]
 8006dee:	688b      	ldr	r3, [r1, #8]
 8006df0:	1e5a      	subs	r2, r3, #1
 8006df2:	f5b2 7fae 	cmp.w	r2, #348	@ 0x15c
 8006df6:	bf81      	itttt	hi
 8006df8:	f46f 75ae 	mvnhi.w	r5, #348	@ 0x15c
 8006dfc:	eb03 0b05 	addhi.w	fp, r3, r5
 8006e00:	f240 135d 	movwhi	r3, #349	@ 0x15d
 8006e04:	608b      	strhi	r3, [r1, #8]
 8006e06:	680b      	ldr	r3, [r1, #0]
 8006e08:	460a      	mov	r2, r1
 8006e0a:	f04f 0500 	mov.w	r5, #0
 8006e0e:	f443 63f0 	orr.w	r3, r3, #1920	@ 0x780
 8006e12:	f842 3b1c 	str.w	r3, [r2], #28
 8006e16:	e9cd 5504 	strd	r5, r5, [sp, #16]
 8006e1a:	4680      	mov	r8, r0
 8006e1c:	460c      	mov	r4, r1
 8006e1e:	bf98      	it	ls
 8006e20:	f04f 0b00 	movls.w	fp, #0
 8006e24:	9201      	str	r2, [sp, #4]
 8006e26:	4616      	mov	r6, r2
 8006e28:	46aa      	mov	sl, r5
 8006e2a:	462f      	mov	r7, r5
 8006e2c:	9502      	str	r5, [sp, #8]
 8006e2e:	68a2      	ldr	r2, [r4, #8]
 8006e30:	b15a      	cbz	r2, 8006e4a <_scanf_float+0x66>
 8006e32:	f8d9 3000 	ldr.w	r3, [r9]
 8006e36:	781b      	ldrb	r3, [r3, #0]
 8006e38:	2b4e      	cmp	r3, #78	@ 0x4e
 8006e3a:	d863      	bhi.n	8006f04 <_scanf_float+0x120>
 8006e3c:	2b40      	cmp	r3, #64	@ 0x40
 8006e3e:	d83b      	bhi.n	8006eb8 <_scanf_float+0xd4>
 8006e40:	f1a3 012b 	sub.w	r1, r3, #43	@ 0x2b
 8006e44:	b2c8      	uxtb	r0, r1
 8006e46:	280e      	cmp	r0, #14
 8006e48:	d939      	bls.n	8006ebe <_scanf_float+0xda>
 8006e4a:	b11f      	cbz	r7, 8006e54 <_scanf_float+0x70>
 8006e4c:	6823      	ldr	r3, [r4, #0]
 8006e4e:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8006e52:	6023      	str	r3, [r4, #0]
 8006e54:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006e58:	f1ba 0f01 	cmp.w	sl, #1
 8006e5c:	f200 8114 	bhi.w	8007088 <_scanf_float+0x2a4>
 8006e60:	9b01      	ldr	r3, [sp, #4]
 8006e62:	429e      	cmp	r6, r3
 8006e64:	f200 8105 	bhi.w	8007072 <_scanf_float+0x28e>
 8006e68:	2001      	movs	r0, #1
 8006e6a:	b007      	add	sp, #28
 8006e6c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006e70:	f1a3 0261 	sub.w	r2, r3, #97	@ 0x61
 8006e74:	2a0d      	cmp	r2, #13
 8006e76:	d8e8      	bhi.n	8006e4a <_scanf_float+0x66>
 8006e78:	a101      	add	r1, pc, #4	@ (adr r1, 8006e80 <_scanf_float+0x9c>)
 8006e7a:	f851 f022 	ldr.w	pc, [r1, r2, lsl #2]
 8006e7e:	bf00      	nop
 8006e80:	08006fc9 	.word	0x08006fc9
 8006e84:	08006e4b 	.word	0x08006e4b
 8006e88:	08006e4b 	.word	0x08006e4b
 8006e8c:	08006e4b 	.word	0x08006e4b
 8006e90:	08007025 	.word	0x08007025
 8006e94:	08006fff 	.word	0x08006fff
 8006e98:	08006e4b 	.word	0x08006e4b
 8006e9c:	08006e4b 	.word	0x08006e4b
 8006ea0:	08006fd7 	.word	0x08006fd7
 8006ea4:	08006e4b 	.word	0x08006e4b
 8006ea8:	08006e4b 	.word	0x08006e4b
 8006eac:	08006e4b 	.word	0x08006e4b
 8006eb0:	08006e4b 	.word	0x08006e4b
 8006eb4:	08006f93 	.word	0x08006f93
 8006eb8:	f1a3 0241 	sub.w	r2, r3, #65	@ 0x41
 8006ebc:	e7da      	b.n	8006e74 <_scanf_float+0x90>
 8006ebe:	290e      	cmp	r1, #14
 8006ec0:	d8c3      	bhi.n	8006e4a <_scanf_float+0x66>
 8006ec2:	a001      	add	r0, pc, #4	@ (adr r0, 8006ec8 <_scanf_float+0xe4>)
 8006ec4:	f850 f021 	ldr.w	pc, [r0, r1, lsl #2]
 8006ec8:	08006f83 	.word	0x08006f83
 8006ecc:	08006e4b 	.word	0x08006e4b
 8006ed0:	08006f83 	.word	0x08006f83
 8006ed4:	08007013 	.word	0x08007013
 8006ed8:	08006e4b 	.word	0x08006e4b
 8006edc:	08006f25 	.word	0x08006f25
 8006ee0:	08006f69 	.word	0x08006f69
 8006ee4:	08006f69 	.word	0x08006f69
 8006ee8:	08006f69 	.word	0x08006f69
 8006eec:	08006f69 	.word	0x08006f69
 8006ef0:	08006f69 	.word	0x08006f69
 8006ef4:	08006f69 	.word	0x08006f69
 8006ef8:	08006f69 	.word	0x08006f69
 8006efc:	08006f69 	.word	0x08006f69
 8006f00:	08006f69 	.word	0x08006f69
 8006f04:	2b6e      	cmp	r3, #110	@ 0x6e
 8006f06:	d809      	bhi.n	8006f1c <_scanf_float+0x138>
 8006f08:	2b60      	cmp	r3, #96	@ 0x60
 8006f0a:	d8b1      	bhi.n	8006e70 <_scanf_float+0x8c>
 8006f0c:	2b54      	cmp	r3, #84	@ 0x54
 8006f0e:	d07b      	beq.n	8007008 <_scanf_float+0x224>
 8006f10:	2b59      	cmp	r3, #89	@ 0x59
 8006f12:	d19a      	bne.n	8006e4a <_scanf_float+0x66>
 8006f14:	2d07      	cmp	r5, #7
 8006f16:	d198      	bne.n	8006e4a <_scanf_float+0x66>
 8006f18:	2508      	movs	r5, #8
 8006f1a:	e02f      	b.n	8006f7c <_scanf_float+0x198>
 8006f1c:	2b74      	cmp	r3, #116	@ 0x74
 8006f1e:	d073      	beq.n	8007008 <_scanf_float+0x224>
 8006f20:	2b79      	cmp	r3, #121	@ 0x79
 8006f22:	e7f6      	b.n	8006f12 <_scanf_float+0x12e>
 8006f24:	6821      	ldr	r1, [r4, #0]
 8006f26:	05c8      	lsls	r0, r1, #23
 8006f28:	d51e      	bpl.n	8006f68 <_scanf_float+0x184>
 8006f2a:	f021 0180 	bic.w	r1, r1, #128	@ 0x80
 8006f2e:	6021      	str	r1, [r4, #0]
 8006f30:	3701      	adds	r7, #1
 8006f32:	f1bb 0f00 	cmp.w	fp, #0
 8006f36:	d003      	beq.n	8006f40 <_scanf_float+0x15c>
 8006f38:	3201      	adds	r2, #1
 8006f3a:	f10b 3bff 	add.w	fp, fp, #4294967295
 8006f3e:	60a2      	str	r2, [r4, #8]
 8006f40:	68a3      	ldr	r3, [r4, #8]
 8006f42:	3b01      	subs	r3, #1
 8006f44:	60a3      	str	r3, [r4, #8]
 8006f46:	6923      	ldr	r3, [r4, #16]
 8006f48:	3301      	adds	r3, #1
 8006f4a:	6123      	str	r3, [r4, #16]
 8006f4c:	f8d9 3004 	ldr.w	r3, [r9, #4]
 8006f50:	3b01      	subs	r3, #1
 8006f52:	2b00      	cmp	r3, #0
 8006f54:	f8c9 3004 	str.w	r3, [r9, #4]
 8006f58:	f340 8082 	ble.w	8007060 <_scanf_float+0x27c>
 8006f5c:	f8d9 3000 	ldr.w	r3, [r9]
 8006f60:	3301      	adds	r3, #1
 8006f62:	f8c9 3000 	str.w	r3, [r9]
 8006f66:	e762      	b.n	8006e2e <_scanf_float+0x4a>
 8006f68:	eb1a 0105 	adds.w	r1, sl, r5
 8006f6c:	f47f af6d 	bne.w	8006e4a <_scanf_float+0x66>
 8006f70:	6822      	ldr	r2, [r4, #0]
 8006f72:	f422 72c0 	bic.w	r2, r2, #384	@ 0x180
 8006f76:	6022      	str	r2, [r4, #0]
 8006f78:	460d      	mov	r5, r1
 8006f7a:	468a      	mov	sl, r1
 8006f7c:	f806 3b01 	strb.w	r3, [r6], #1
 8006f80:	e7de      	b.n	8006f40 <_scanf_float+0x15c>
 8006f82:	6822      	ldr	r2, [r4, #0]
 8006f84:	0610      	lsls	r0, r2, #24
 8006f86:	f57f af60 	bpl.w	8006e4a <_scanf_float+0x66>
 8006f8a:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8006f8e:	6022      	str	r2, [r4, #0]
 8006f90:	e7f4      	b.n	8006f7c <_scanf_float+0x198>
 8006f92:	f1ba 0f00 	cmp.w	sl, #0
 8006f96:	d10c      	bne.n	8006fb2 <_scanf_float+0x1ce>
 8006f98:	b977      	cbnz	r7, 8006fb8 <_scanf_float+0x1d4>
 8006f9a:	6822      	ldr	r2, [r4, #0]
 8006f9c:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006fa0:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006fa4:	d108      	bne.n	8006fb8 <_scanf_float+0x1d4>
 8006fa6:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006faa:	6022      	str	r2, [r4, #0]
 8006fac:	f04f 0a01 	mov.w	sl, #1
 8006fb0:	e7e4      	b.n	8006f7c <_scanf_float+0x198>
 8006fb2:	f1ba 0f02 	cmp.w	sl, #2
 8006fb6:	d050      	beq.n	800705a <_scanf_float+0x276>
 8006fb8:	2d01      	cmp	r5, #1
 8006fba:	d002      	beq.n	8006fc2 <_scanf_float+0x1de>
 8006fbc:	2d04      	cmp	r5, #4
 8006fbe:	f47f af44 	bne.w	8006e4a <_scanf_float+0x66>
 8006fc2:	3501      	adds	r5, #1
 8006fc4:	b2ed      	uxtb	r5, r5
 8006fc6:	e7d9      	b.n	8006f7c <_scanf_float+0x198>
 8006fc8:	f1ba 0f01 	cmp.w	sl, #1
 8006fcc:	f47f af3d 	bne.w	8006e4a <_scanf_float+0x66>
 8006fd0:	f04f 0a02 	mov.w	sl, #2
 8006fd4:	e7d2      	b.n	8006f7c <_scanf_float+0x198>
 8006fd6:	b975      	cbnz	r5, 8006ff6 <_scanf_float+0x212>
 8006fd8:	2f00      	cmp	r7, #0
 8006fda:	f47f af37 	bne.w	8006e4c <_scanf_float+0x68>
 8006fde:	6822      	ldr	r2, [r4, #0]
 8006fe0:	f402 61e0 	and.w	r1, r2, #1792	@ 0x700
 8006fe4:	f5b1 6fe0 	cmp.w	r1, #1792	@ 0x700
 8006fe8:	f040 8103 	bne.w	80071f2 <_scanf_float+0x40e>
 8006fec:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8006ff0:	6022      	str	r2, [r4, #0]
 8006ff2:	2501      	movs	r5, #1
 8006ff4:	e7c2      	b.n	8006f7c <_scanf_float+0x198>
 8006ff6:	2d03      	cmp	r5, #3
 8006ff8:	d0e3      	beq.n	8006fc2 <_scanf_float+0x1de>
 8006ffa:	2d05      	cmp	r5, #5
 8006ffc:	e7df      	b.n	8006fbe <_scanf_float+0x1da>
 8006ffe:	2d02      	cmp	r5, #2
 8007000:	f47f af23 	bne.w	8006e4a <_scanf_float+0x66>
 8007004:	2503      	movs	r5, #3
 8007006:	e7b9      	b.n	8006f7c <_scanf_float+0x198>
 8007008:	2d06      	cmp	r5, #6
 800700a:	f47f af1e 	bne.w	8006e4a <_scanf_float+0x66>
 800700e:	2507      	movs	r5, #7
 8007010:	e7b4      	b.n	8006f7c <_scanf_float+0x198>
 8007012:	6822      	ldr	r2, [r4, #0]
 8007014:	0591      	lsls	r1, r2, #22
 8007016:	f57f af18 	bpl.w	8006e4a <_scanf_float+0x66>
 800701a:	f422 7220 	bic.w	r2, r2, #640	@ 0x280
 800701e:	6022      	str	r2, [r4, #0]
 8007020:	9702      	str	r7, [sp, #8]
 8007022:	e7ab      	b.n	8006f7c <_scanf_float+0x198>
 8007024:	6822      	ldr	r2, [r4, #0]
 8007026:	f402 61a0 	and.w	r1, r2, #1280	@ 0x500
 800702a:	f5b1 6f80 	cmp.w	r1, #1024	@ 0x400
 800702e:	d005      	beq.n	800703c <_scanf_float+0x258>
 8007030:	0550      	lsls	r0, r2, #21
 8007032:	f57f af0a 	bpl.w	8006e4a <_scanf_float+0x66>
 8007036:	2f00      	cmp	r7, #0
 8007038:	f000 80db 	beq.w	80071f2 <_scanf_float+0x40e>
 800703c:	0591      	lsls	r1, r2, #22
 800703e:	bf58      	it	pl
 8007040:	9902      	ldrpl	r1, [sp, #8]
 8007042:	f422 62f0 	bic.w	r2, r2, #1920	@ 0x780
 8007046:	bf58      	it	pl
 8007048:	1a79      	subpl	r1, r7, r1
 800704a:	f442 72c0 	orr.w	r2, r2, #384	@ 0x180
 800704e:	bf58      	it	pl
 8007050:	e9cd 1604 	strdpl	r1, r6, [sp, #16]
 8007054:	6022      	str	r2, [r4, #0]
 8007056:	2700      	movs	r7, #0
 8007058:	e790      	b.n	8006f7c <_scanf_float+0x198>
 800705a:	f04f 0a03 	mov.w	sl, #3
 800705e:	e78d      	b.n	8006f7c <_scanf_float+0x198>
 8007060:	f8d4 3180 	ldr.w	r3, [r4, #384]	@ 0x180
 8007064:	4649      	mov	r1, r9
 8007066:	4640      	mov	r0, r8
 8007068:	4798      	blx	r3
 800706a:	2800      	cmp	r0, #0
 800706c:	f43f aedf 	beq.w	8006e2e <_scanf_float+0x4a>
 8007070:	e6eb      	b.n	8006e4a <_scanf_float+0x66>
 8007072:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007076:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 800707a:	464a      	mov	r2, r9
 800707c:	4640      	mov	r0, r8
 800707e:	4798      	blx	r3
 8007080:	6923      	ldr	r3, [r4, #16]
 8007082:	3b01      	subs	r3, #1
 8007084:	6123      	str	r3, [r4, #16]
 8007086:	e6eb      	b.n	8006e60 <_scanf_float+0x7c>
 8007088:	1e6b      	subs	r3, r5, #1
 800708a:	2b06      	cmp	r3, #6
 800708c:	d824      	bhi.n	80070d8 <_scanf_float+0x2f4>
 800708e:	2d02      	cmp	r5, #2
 8007090:	d836      	bhi.n	8007100 <_scanf_float+0x31c>
 8007092:	9b01      	ldr	r3, [sp, #4]
 8007094:	429e      	cmp	r6, r3
 8007096:	f67f aee7 	bls.w	8006e68 <_scanf_float+0x84>
 800709a:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 800709e:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070a2:	464a      	mov	r2, r9
 80070a4:	4640      	mov	r0, r8
 80070a6:	4798      	blx	r3
 80070a8:	6923      	ldr	r3, [r4, #16]
 80070aa:	3b01      	subs	r3, #1
 80070ac:	6123      	str	r3, [r4, #16]
 80070ae:	e7f0      	b.n	8007092 <_scanf_float+0x2ae>
 80070b0:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80070b4:	f81b 1d01 	ldrb.w	r1, [fp, #-1]!
 80070b8:	464a      	mov	r2, r9
 80070ba:	4640      	mov	r0, r8
 80070bc:	4798      	blx	r3
 80070be:	6923      	ldr	r3, [r4, #16]
 80070c0:	3b01      	subs	r3, #1
 80070c2:	6123      	str	r3, [r4, #16]
 80070c4:	f10a 3aff 	add.w	sl, sl, #4294967295
 80070c8:	fa5f fa8a 	uxtb.w	sl, sl
 80070cc:	f1ba 0f02 	cmp.w	sl, #2
 80070d0:	d1ee      	bne.n	80070b0 <_scanf_float+0x2cc>
 80070d2:	3d03      	subs	r5, #3
 80070d4:	b2ed      	uxtb	r5, r5
 80070d6:	1b76      	subs	r6, r6, r5
 80070d8:	6823      	ldr	r3, [r4, #0]
 80070da:	05da      	lsls	r2, r3, #23
 80070dc:	d530      	bpl.n	8007140 <_scanf_float+0x35c>
 80070de:	055b      	lsls	r3, r3, #21
 80070e0:	d511      	bpl.n	8007106 <_scanf_float+0x322>
 80070e2:	9b01      	ldr	r3, [sp, #4]
 80070e4:	429e      	cmp	r6, r3
 80070e6:	f67f aebf 	bls.w	8006e68 <_scanf_float+0x84>
 80070ea:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 80070ee:	f816 1d01 	ldrb.w	r1, [r6, #-1]!
 80070f2:	464a      	mov	r2, r9
 80070f4:	4640      	mov	r0, r8
 80070f6:	4798      	blx	r3
 80070f8:	6923      	ldr	r3, [r4, #16]
 80070fa:	3b01      	subs	r3, #1
 80070fc:	6123      	str	r3, [r4, #16]
 80070fe:	e7f0      	b.n	80070e2 <_scanf_float+0x2fe>
 8007100:	46aa      	mov	sl, r5
 8007102:	46b3      	mov	fp, r6
 8007104:	e7de      	b.n	80070c4 <_scanf_float+0x2e0>
 8007106:	f816 1c01 	ldrb.w	r1, [r6, #-1]
 800710a:	6923      	ldr	r3, [r4, #16]
 800710c:	2965      	cmp	r1, #101	@ 0x65
 800710e:	f103 33ff 	add.w	r3, r3, #4294967295
 8007112:	f106 35ff 	add.w	r5, r6, #4294967295
 8007116:	6123      	str	r3, [r4, #16]
 8007118:	d00c      	beq.n	8007134 <_scanf_float+0x350>
 800711a:	2945      	cmp	r1, #69	@ 0x45
 800711c:	d00a      	beq.n	8007134 <_scanf_float+0x350>
 800711e:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007122:	464a      	mov	r2, r9
 8007124:	4640      	mov	r0, r8
 8007126:	4798      	blx	r3
 8007128:	6923      	ldr	r3, [r4, #16]
 800712a:	f816 1c02 	ldrb.w	r1, [r6, #-2]
 800712e:	3b01      	subs	r3, #1
 8007130:	1eb5      	subs	r5, r6, #2
 8007132:	6123      	str	r3, [r4, #16]
 8007134:	f8d4 317c 	ldr.w	r3, [r4, #380]	@ 0x17c
 8007138:	464a      	mov	r2, r9
 800713a:	4640      	mov	r0, r8
 800713c:	4798      	blx	r3
 800713e:	462e      	mov	r6, r5
 8007140:	6822      	ldr	r2, [r4, #0]
 8007142:	f012 0210 	ands.w	r2, r2, #16
 8007146:	d001      	beq.n	800714c <_scanf_float+0x368>
 8007148:	2000      	movs	r0, #0
 800714a:	e68e      	b.n	8006e6a <_scanf_float+0x86>
 800714c:	7032      	strb	r2, [r6, #0]
 800714e:	6823      	ldr	r3, [r4, #0]
 8007150:	f403 63c0 	and.w	r3, r3, #1536	@ 0x600
 8007154:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8007158:	d125      	bne.n	80071a6 <_scanf_float+0x3c2>
 800715a:	9b02      	ldr	r3, [sp, #8]
 800715c:	429f      	cmp	r7, r3
 800715e:	d00a      	beq.n	8007176 <_scanf_float+0x392>
 8007160:	1bda      	subs	r2, r3, r7
 8007162:	f204 136f 	addw	r3, r4, #367	@ 0x16f
 8007166:	429e      	cmp	r6, r3
 8007168:	bf28      	it	cs
 800716a:	f504 76b7 	addcs.w	r6, r4, #366	@ 0x16e
 800716e:	4922      	ldr	r1, [pc, #136]	@ (80071f8 <_scanf_float+0x414>)
 8007170:	4630      	mov	r0, r6
 8007172:	f000 f977 	bl	8007464 <siprintf>
 8007176:	9901      	ldr	r1, [sp, #4]
 8007178:	2200      	movs	r2, #0
 800717a:	4640      	mov	r0, r8
 800717c:	f002 fd0c 	bl	8009b98 <_strtod_r>
 8007180:	9b03      	ldr	r3, [sp, #12]
 8007182:	6821      	ldr	r1, [r4, #0]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	f011 0f02 	tst.w	r1, #2
 800718a:	ec57 6b10 	vmov	r6, r7, d0
 800718e:	f103 0204 	add.w	r2, r3, #4
 8007192:	d015      	beq.n	80071c0 <_scanf_float+0x3dc>
 8007194:	9903      	ldr	r1, [sp, #12]
 8007196:	600a      	str	r2, [r1, #0]
 8007198:	681b      	ldr	r3, [r3, #0]
 800719a:	e9c3 6700 	strd	r6, r7, [r3]
 800719e:	68e3      	ldr	r3, [r4, #12]
 80071a0:	3301      	adds	r3, #1
 80071a2:	60e3      	str	r3, [r4, #12]
 80071a4:	e7d0      	b.n	8007148 <_scanf_float+0x364>
 80071a6:	9b04      	ldr	r3, [sp, #16]
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d0e4      	beq.n	8007176 <_scanf_float+0x392>
 80071ac:	9905      	ldr	r1, [sp, #20]
 80071ae:	230a      	movs	r3, #10
 80071b0:	3101      	adds	r1, #1
 80071b2:	4640      	mov	r0, r8
 80071b4:	f002 fd70 	bl	8009c98 <_strtol_r>
 80071b8:	9b04      	ldr	r3, [sp, #16]
 80071ba:	9e05      	ldr	r6, [sp, #20]
 80071bc:	1ac2      	subs	r2, r0, r3
 80071be:	e7d0      	b.n	8007162 <_scanf_float+0x37e>
 80071c0:	f011 0f04 	tst.w	r1, #4
 80071c4:	9903      	ldr	r1, [sp, #12]
 80071c6:	600a      	str	r2, [r1, #0]
 80071c8:	d1e6      	bne.n	8007198 <_scanf_float+0x3b4>
 80071ca:	681d      	ldr	r5, [r3, #0]
 80071cc:	4632      	mov	r2, r6
 80071ce:	463b      	mov	r3, r7
 80071d0:	4630      	mov	r0, r6
 80071d2:	4639      	mov	r1, r7
 80071d4:	f7f9 fcb2 	bl	8000b3c <__aeabi_dcmpun>
 80071d8:	b128      	cbz	r0, 80071e6 <_scanf_float+0x402>
 80071da:	4808      	ldr	r0, [pc, #32]	@ (80071fc <_scanf_float+0x418>)
 80071dc:	f000 fad2 	bl	8007784 <nanf>
 80071e0:	ed85 0a00 	vstr	s0, [r5]
 80071e4:	e7db      	b.n	800719e <_scanf_float+0x3ba>
 80071e6:	4630      	mov	r0, r6
 80071e8:	4639      	mov	r1, r7
 80071ea:	f7f9 fd05 	bl	8000bf8 <__aeabi_d2f>
 80071ee:	6028      	str	r0, [r5, #0]
 80071f0:	e7d5      	b.n	800719e <_scanf_float+0x3ba>
 80071f2:	2700      	movs	r7, #0
 80071f4:	e62e      	b.n	8006e54 <_scanf_float+0x70>
 80071f6:	bf00      	nop
 80071f8:	0800af60 	.word	0x0800af60
 80071fc:	0800b0a1 	.word	0x0800b0a1

08007200 <std>:
 8007200:	2300      	movs	r3, #0
 8007202:	b510      	push	{r4, lr}
 8007204:	4604      	mov	r4, r0
 8007206:	e9c0 3300 	strd	r3, r3, [r0]
 800720a:	e9c0 3304 	strd	r3, r3, [r0, #16]
 800720e:	6083      	str	r3, [r0, #8]
 8007210:	8181      	strh	r1, [r0, #12]
 8007212:	6643      	str	r3, [r0, #100]	@ 0x64
 8007214:	81c2      	strh	r2, [r0, #14]
 8007216:	6183      	str	r3, [r0, #24]
 8007218:	4619      	mov	r1, r3
 800721a:	2208      	movs	r2, #8
 800721c:	305c      	adds	r0, #92	@ 0x5c
 800721e:	f000 fa1b 	bl	8007658 <memset>
 8007222:	4b0d      	ldr	r3, [pc, #52]	@ (8007258 <std+0x58>)
 8007224:	6263      	str	r3, [r4, #36]	@ 0x24
 8007226:	4b0d      	ldr	r3, [pc, #52]	@ (800725c <std+0x5c>)
 8007228:	62a3      	str	r3, [r4, #40]	@ 0x28
 800722a:	4b0d      	ldr	r3, [pc, #52]	@ (8007260 <std+0x60>)
 800722c:	62e3      	str	r3, [r4, #44]	@ 0x2c
 800722e:	4b0d      	ldr	r3, [pc, #52]	@ (8007264 <std+0x64>)
 8007230:	6323      	str	r3, [r4, #48]	@ 0x30
 8007232:	4b0d      	ldr	r3, [pc, #52]	@ (8007268 <std+0x68>)
 8007234:	6224      	str	r4, [r4, #32]
 8007236:	429c      	cmp	r4, r3
 8007238:	d006      	beq.n	8007248 <std+0x48>
 800723a:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 800723e:	4294      	cmp	r4, r2
 8007240:	d002      	beq.n	8007248 <std+0x48>
 8007242:	33d0      	adds	r3, #208	@ 0xd0
 8007244:	429c      	cmp	r4, r3
 8007246:	d105      	bne.n	8007254 <std+0x54>
 8007248:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 800724c:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007250:	f000 ba94 	b.w	800777c <__retarget_lock_init_recursive>
 8007254:	bd10      	pop	{r4, pc}
 8007256:	bf00      	nop
 8007258:	080074a9 	.word	0x080074a9
 800725c:	080074cb 	.word	0x080074cb
 8007260:	08007503 	.word	0x08007503
 8007264:	08007527 	.word	0x08007527
 8007268:	200007dc 	.word	0x200007dc

0800726c <stdio_exit_handler>:
 800726c:	4a02      	ldr	r2, [pc, #8]	@ (8007278 <stdio_exit_handler+0xc>)
 800726e:	4903      	ldr	r1, [pc, #12]	@ (800727c <stdio_exit_handler+0x10>)
 8007270:	4803      	ldr	r0, [pc, #12]	@ (8007280 <stdio_exit_handler+0x14>)
 8007272:	f000 b869 	b.w	8007348 <_fwalk_sglue>
 8007276:	bf00      	nop
 8007278:	20000028 	.word	0x20000028
 800727c:	0800a2d9 	.word	0x0800a2d9
 8007280:	20000038 	.word	0x20000038

08007284 <cleanup_stdio>:
 8007284:	6841      	ldr	r1, [r0, #4]
 8007286:	4b0c      	ldr	r3, [pc, #48]	@ (80072b8 <cleanup_stdio+0x34>)
 8007288:	4299      	cmp	r1, r3
 800728a:	b510      	push	{r4, lr}
 800728c:	4604      	mov	r4, r0
 800728e:	d001      	beq.n	8007294 <cleanup_stdio+0x10>
 8007290:	f003 f822 	bl	800a2d8 <_fflush_r>
 8007294:	68a1      	ldr	r1, [r4, #8]
 8007296:	4b09      	ldr	r3, [pc, #36]	@ (80072bc <cleanup_stdio+0x38>)
 8007298:	4299      	cmp	r1, r3
 800729a:	d002      	beq.n	80072a2 <cleanup_stdio+0x1e>
 800729c:	4620      	mov	r0, r4
 800729e:	f003 f81b 	bl	800a2d8 <_fflush_r>
 80072a2:	68e1      	ldr	r1, [r4, #12]
 80072a4:	4b06      	ldr	r3, [pc, #24]	@ (80072c0 <cleanup_stdio+0x3c>)
 80072a6:	4299      	cmp	r1, r3
 80072a8:	d004      	beq.n	80072b4 <cleanup_stdio+0x30>
 80072aa:	4620      	mov	r0, r4
 80072ac:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072b0:	f003 b812 	b.w	800a2d8 <_fflush_r>
 80072b4:	bd10      	pop	{r4, pc}
 80072b6:	bf00      	nop
 80072b8:	200007dc 	.word	0x200007dc
 80072bc:	20000844 	.word	0x20000844
 80072c0:	200008ac 	.word	0x200008ac

080072c4 <global_stdio_init.part.0>:
 80072c4:	b510      	push	{r4, lr}
 80072c6:	4b0b      	ldr	r3, [pc, #44]	@ (80072f4 <global_stdio_init.part.0+0x30>)
 80072c8:	4c0b      	ldr	r4, [pc, #44]	@ (80072f8 <global_stdio_init.part.0+0x34>)
 80072ca:	4a0c      	ldr	r2, [pc, #48]	@ (80072fc <global_stdio_init.part.0+0x38>)
 80072cc:	601a      	str	r2, [r3, #0]
 80072ce:	4620      	mov	r0, r4
 80072d0:	2200      	movs	r2, #0
 80072d2:	2104      	movs	r1, #4
 80072d4:	f7ff ff94 	bl	8007200 <std>
 80072d8:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 80072dc:	2201      	movs	r2, #1
 80072de:	2109      	movs	r1, #9
 80072e0:	f7ff ff8e 	bl	8007200 <std>
 80072e4:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 80072e8:	2202      	movs	r2, #2
 80072ea:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 80072ee:	2112      	movs	r1, #18
 80072f0:	f7ff bf86 	b.w	8007200 <std>
 80072f4:	20000914 	.word	0x20000914
 80072f8:	200007dc 	.word	0x200007dc
 80072fc:	0800726d 	.word	0x0800726d

08007300 <__sfp_lock_acquire>:
 8007300:	4801      	ldr	r0, [pc, #4]	@ (8007308 <__sfp_lock_acquire+0x8>)
 8007302:	f000 ba3c 	b.w	800777e <__retarget_lock_acquire_recursive>
 8007306:	bf00      	nop
 8007308:	2000091d 	.word	0x2000091d

0800730c <__sfp_lock_release>:
 800730c:	4801      	ldr	r0, [pc, #4]	@ (8007314 <__sfp_lock_release+0x8>)
 800730e:	f000 ba37 	b.w	8007780 <__retarget_lock_release_recursive>
 8007312:	bf00      	nop
 8007314:	2000091d 	.word	0x2000091d

08007318 <__sinit>:
 8007318:	b510      	push	{r4, lr}
 800731a:	4604      	mov	r4, r0
 800731c:	f7ff fff0 	bl	8007300 <__sfp_lock_acquire>
 8007320:	6a23      	ldr	r3, [r4, #32]
 8007322:	b11b      	cbz	r3, 800732c <__sinit+0x14>
 8007324:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8007328:	f7ff bff0 	b.w	800730c <__sfp_lock_release>
 800732c:	4b04      	ldr	r3, [pc, #16]	@ (8007340 <__sinit+0x28>)
 800732e:	6223      	str	r3, [r4, #32]
 8007330:	4b04      	ldr	r3, [pc, #16]	@ (8007344 <__sinit+0x2c>)
 8007332:	681b      	ldr	r3, [r3, #0]
 8007334:	2b00      	cmp	r3, #0
 8007336:	d1f5      	bne.n	8007324 <__sinit+0xc>
 8007338:	f7ff ffc4 	bl	80072c4 <global_stdio_init.part.0>
 800733c:	e7f2      	b.n	8007324 <__sinit+0xc>
 800733e:	bf00      	nop
 8007340:	08007285 	.word	0x08007285
 8007344:	20000914 	.word	0x20000914

08007348 <_fwalk_sglue>:
 8007348:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800734c:	4607      	mov	r7, r0
 800734e:	4688      	mov	r8, r1
 8007350:	4614      	mov	r4, r2
 8007352:	2600      	movs	r6, #0
 8007354:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8007358:	f1b9 0901 	subs.w	r9, r9, #1
 800735c:	d505      	bpl.n	800736a <_fwalk_sglue+0x22>
 800735e:	6824      	ldr	r4, [r4, #0]
 8007360:	2c00      	cmp	r4, #0
 8007362:	d1f7      	bne.n	8007354 <_fwalk_sglue+0xc>
 8007364:	4630      	mov	r0, r6
 8007366:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800736a:	89ab      	ldrh	r3, [r5, #12]
 800736c:	2b01      	cmp	r3, #1
 800736e:	d907      	bls.n	8007380 <_fwalk_sglue+0x38>
 8007370:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8007374:	3301      	adds	r3, #1
 8007376:	d003      	beq.n	8007380 <_fwalk_sglue+0x38>
 8007378:	4629      	mov	r1, r5
 800737a:	4638      	mov	r0, r7
 800737c:	47c0      	blx	r8
 800737e:	4306      	orrs	r6, r0
 8007380:	3568      	adds	r5, #104	@ 0x68
 8007382:	e7e9      	b.n	8007358 <_fwalk_sglue+0x10>

08007384 <iprintf>:
 8007384:	b40f      	push	{r0, r1, r2, r3}
 8007386:	b507      	push	{r0, r1, r2, lr}
 8007388:	4906      	ldr	r1, [pc, #24]	@ (80073a4 <iprintf+0x20>)
 800738a:	ab04      	add	r3, sp, #16
 800738c:	6808      	ldr	r0, [r1, #0]
 800738e:	f853 2b04 	ldr.w	r2, [r3], #4
 8007392:	6881      	ldr	r1, [r0, #8]
 8007394:	9301      	str	r3, [sp, #4]
 8007396:	f002 fe03 	bl	8009fa0 <_vfiprintf_r>
 800739a:	b003      	add	sp, #12
 800739c:	f85d eb04 	ldr.w	lr, [sp], #4
 80073a0:	b004      	add	sp, #16
 80073a2:	4770      	bx	lr
 80073a4:	20000034 	.word	0x20000034

080073a8 <_puts_r>:
 80073a8:	6a03      	ldr	r3, [r0, #32]
 80073aa:	b570      	push	{r4, r5, r6, lr}
 80073ac:	6884      	ldr	r4, [r0, #8]
 80073ae:	4605      	mov	r5, r0
 80073b0:	460e      	mov	r6, r1
 80073b2:	b90b      	cbnz	r3, 80073b8 <_puts_r+0x10>
 80073b4:	f7ff ffb0 	bl	8007318 <__sinit>
 80073b8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073ba:	07db      	lsls	r3, r3, #31
 80073bc:	d405      	bmi.n	80073ca <_puts_r+0x22>
 80073be:	89a3      	ldrh	r3, [r4, #12]
 80073c0:	0598      	lsls	r0, r3, #22
 80073c2:	d402      	bmi.n	80073ca <_puts_r+0x22>
 80073c4:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073c6:	f000 f9da 	bl	800777e <__retarget_lock_acquire_recursive>
 80073ca:	89a3      	ldrh	r3, [r4, #12]
 80073cc:	0719      	lsls	r1, r3, #28
 80073ce:	d502      	bpl.n	80073d6 <_puts_r+0x2e>
 80073d0:	6923      	ldr	r3, [r4, #16]
 80073d2:	2b00      	cmp	r3, #0
 80073d4:	d135      	bne.n	8007442 <_puts_r+0x9a>
 80073d6:	4621      	mov	r1, r4
 80073d8:	4628      	mov	r0, r5
 80073da:	f000 f8e7 	bl	80075ac <__swsetup_r>
 80073de:	b380      	cbz	r0, 8007442 <_puts_r+0x9a>
 80073e0:	f04f 35ff 	mov.w	r5, #4294967295
 80073e4:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 80073e6:	07da      	lsls	r2, r3, #31
 80073e8:	d405      	bmi.n	80073f6 <_puts_r+0x4e>
 80073ea:	89a3      	ldrh	r3, [r4, #12]
 80073ec:	059b      	lsls	r3, r3, #22
 80073ee:	d402      	bmi.n	80073f6 <_puts_r+0x4e>
 80073f0:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 80073f2:	f000 f9c5 	bl	8007780 <__retarget_lock_release_recursive>
 80073f6:	4628      	mov	r0, r5
 80073f8:	bd70      	pop	{r4, r5, r6, pc}
 80073fa:	2b00      	cmp	r3, #0
 80073fc:	da04      	bge.n	8007408 <_puts_r+0x60>
 80073fe:	69a2      	ldr	r2, [r4, #24]
 8007400:	429a      	cmp	r2, r3
 8007402:	dc17      	bgt.n	8007434 <_puts_r+0x8c>
 8007404:	290a      	cmp	r1, #10
 8007406:	d015      	beq.n	8007434 <_puts_r+0x8c>
 8007408:	6823      	ldr	r3, [r4, #0]
 800740a:	1c5a      	adds	r2, r3, #1
 800740c:	6022      	str	r2, [r4, #0]
 800740e:	7019      	strb	r1, [r3, #0]
 8007410:	68a3      	ldr	r3, [r4, #8]
 8007412:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8007416:	3b01      	subs	r3, #1
 8007418:	60a3      	str	r3, [r4, #8]
 800741a:	2900      	cmp	r1, #0
 800741c:	d1ed      	bne.n	80073fa <_puts_r+0x52>
 800741e:	2b00      	cmp	r3, #0
 8007420:	da11      	bge.n	8007446 <_puts_r+0x9e>
 8007422:	4622      	mov	r2, r4
 8007424:	210a      	movs	r1, #10
 8007426:	4628      	mov	r0, r5
 8007428:	f000 f881 	bl	800752e <__swbuf_r>
 800742c:	3001      	adds	r0, #1
 800742e:	d0d7      	beq.n	80073e0 <_puts_r+0x38>
 8007430:	250a      	movs	r5, #10
 8007432:	e7d7      	b.n	80073e4 <_puts_r+0x3c>
 8007434:	4622      	mov	r2, r4
 8007436:	4628      	mov	r0, r5
 8007438:	f000 f879 	bl	800752e <__swbuf_r>
 800743c:	3001      	adds	r0, #1
 800743e:	d1e7      	bne.n	8007410 <_puts_r+0x68>
 8007440:	e7ce      	b.n	80073e0 <_puts_r+0x38>
 8007442:	3e01      	subs	r6, #1
 8007444:	e7e4      	b.n	8007410 <_puts_r+0x68>
 8007446:	6823      	ldr	r3, [r4, #0]
 8007448:	1c5a      	adds	r2, r3, #1
 800744a:	6022      	str	r2, [r4, #0]
 800744c:	220a      	movs	r2, #10
 800744e:	701a      	strb	r2, [r3, #0]
 8007450:	e7ee      	b.n	8007430 <_puts_r+0x88>
	...

08007454 <puts>:
 8007454:	4b02      	ldr	r3, [pc, #8]	@ (8007460 <puts+0xc>)
 8007456:	4601      	mov	r1, r0
 8007458:	6818      	ldr	r0, [r3, #0]
 800745a:	f7ff bfa5 	b.w	80073a8 <_puts_r>
 800745e:	bf00      	nop
 8007460:	20000034 	.word	0x20000034

08007464 <siprintf>:
 8007464:	b40e      	push	{r1, r2, r3}
 8007466:	b510      	push	{r4, lr}
 8007468:	b09d      	sub	sp, #116	@ 0x74
 800746a:	ab1f      	add	r3, sp, #124	@ 0x7c
 800746c:	9002      	str	r0, [sp, #8]
 800746e:	9006      	str	r0, [sp, #24]
 8007470:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8007474:	480a      	ldr	r0, [pc, #40]	@ (80074a0 <siprintf+0x3c>)
 8007476:	9107      	str	r1, [sp, #28]
 8007478:	9104      	str	r1, [sp, #16]
 800747a:	490a      	ldr	r1, [pc, #40]	@ (80074a4 <siprintf+0x40>)
 800747c:	f853 2b04 	ldr.w	r2, [r3], #4
 8007480:	9105      	str	r1, [sp, #20]
 8007482:	2400      	movs	r4, #0
 8007484:	a902      	add	r1, sp, #8
 8007486:	6800      	ldr	r0, [r0, #0]
 8007488:	9301      	str	r3, [sp, #4]
 800748a:	941b      	str	r4, [sp, #108]	@ 0x6c
 800748c:	f002 fc62 	bl	8009d54 <_svfiprintf_r>
 8007490:	9b02      	ldr	r3, [sp, #8]
 8007492:	701c      	strb	r4, [r3, #0]
 8007494:	b01d      	add	sp, #116	@ 0x74
 8007496:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 800749a:	b003      	add	sp, #12
 800749c:	4770      	bx	lr
 800749e:	bf00      	nop
 80074a0:	20000034 	.word	0x20000034
 80074a4:	ffff0208 	.word	0xffff0208

080074a8 <__sread>:
 80074a8:	b510      	push	{r4, lr}
 80074aa:	460c      	mov	r4, r1
 80074ac:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074b0:	f000 f916 	bl	80076e0 <_read_r>
 80074b4:	2800      	cmp	r0, #0
 80074b6:	bfab      	itete	ge
 80074b8:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 80074ba:	89a3      	ldrhlt	r3, [r4, #12]
 80074bc:	181b      	addge	r3, r3, r0
 80074be:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 80074c2:	bfac      	ite	ge
 80074c4:	6563      	strge	r3, [r4, #84]	@ 0x54
 80074c6:	81a3      	strhlt	r3, [r4, #12]
 80074c8:	bd10      	pop	{r4, pc}

080074ca <__swrite>:
 80074ca:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80074ce:	461f      	mov	r7, r3
 80074d0:	898b      	ldrh	r3, [r1, #12]
 80074d2:	05db      	lsls	r3, r3, #23
 80074d4:	4605      	mov	r5, r0
 80074d6:	460c      	mov	r4, r1
 80074d8:	4616      	mov	r6, r2
 80074da:	d505      	bpl.n	80074e8 <__swrite+0x1e>
 80074dc:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 80074e0:	2302      	movs	r3, #2
 80074e2:	2200      	movs	r2, #0
 80074e4:	f000 f8ea 	bl	80076bc <_lseek_r>
 80074e8:	89a3      	ldrh	r3, [r4, #12]
 80074ea:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80074ee:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 80074f2:	81a3      	strh	r3, [r4, #12]
 80074f4:	4632      	mov	r2, r6
 80074f6:	463b      	mov	r3, r7
 80074f8:	4628      	mov	r0, r5
 80074fa:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 80074fe:	f000 b901 	b.w	8007704 <_write_r>

08007502 <__sseek>:
 8007502:	b510      	push	{r4, lr}
 8007504:	460c      	mov	r4, r1
 8007506:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800750a:	f000 f8d7 	bl	80076bc <_lseek_r>
 800750e:	1c43      	adds	r3, r0, #1
 8007510:	89a3      	ldrh	r3, [r4, #12]
 8007512:	bf15      	itete	ne
 8007514:	6560      	strne	r0, [r4, #84]	@ 0x54
 8007516:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 800751a:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 800751e:	81a3      	strheq	r3, [r4, #12]
 8007520:	bf18      	it	ne
 8007522:	81a3      	strhne	r3, [r4, #12]
 8007524:	bd10      	pop	{r4, pc}

08007526 <__sclose>:
 8007526:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800752a:	f000 b8b7 	b.w	800769c <_close_r>

0800752e <__swbuf_r>:
 800752e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007530:	460e      	mov	r6, r1
 8007532:	4614      	mov	r4, r2
 8007534:	4605      	mov	r5, r0
 8007536:	b118      	cbz	r0, 8007540 <__swbuf_r+0x12>
 8007538:	6a03      	ldr	r3, [r0, #32]
 800753a:	b90b      	cbnz	r3, 8007540 <__swbuf_r+0x12>
 800753c:	f7ff feec 	bl	8007318 <__sinit>
 8007540:	69a3      	ldr	r3, [r4, #24]
 8007542:	60a3      	str	r3, [r4, #8]
 8007544:	89a3      	ldrh	r3, [r4, #12]
 8007546:	071a      	lsls	r2, r3, #28
 8007548:	d501      	bpl.n	800754e <__swbuf_r+0x20>
 800754a:	6923      	ldr	r3, [r4, #16]
 800754c:	b943      	cbnz	r3, 8007560 <__swbuf_r+0x32>
 800754e:	4621      	mov	r1, r4
 8007550:	4628      	mov	r0, r5
 8007552:	f000 f82b 	bl	80075ac <__swsetup_r>
 8007556:	b118      	cbz	r0, 8007560 <__swbuf_r+0x32>
 8007558:	f04f 37ff 	mov.w	r7, #4294967295
 800755c:	4638      	mov	r0, r7
 800755e:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8007560:	6823      	ldr	r3, [r4, #0]
 8007562:	6922      	ldr	r2, [r4, #16]
 8007564:	1a98      	subs	r0, r3, r2
 8007566:	6963      	ldr	r3, [r4, #20]
 8007568:	b2f6      	uxtb	r6, r6
 800756a:	4283      	cmp	r3, r0
 800756c:	4637      	mov	r7, r6
 800756e:	dc05      	bgt.n	800757c <__swbuf_r+0x4e>
 8007570:	4621      	mov	r1, r4
 8007572:	4628      	mov	r0, r5
 8007574:	f002 feb0 	bl	800a2d8 <_fflush_r>
 8007578:	2800      	cmp	r0, #0
 800757a:	d1ed      	bne.n	8007558 <__swbuf_r+0x2a>
 800757c:	68a3      	ldr	r3, [r4, #8]
 800757e:	3b01      	subs	r3, #1
 8007580:	60a3      	str	r3, [r4, #8]
 8007582:	6823      	ldr	r3, [r4, #0]
 8007584:	1c5a      	adds	r2, r3, #1
 8007586:	6022      	str	r2, [r4, #0]
 8007588:	701e      	strb	r6, [r3, #0]
 800758a:	6962      	ldr	r2, [r4, #20]
 800758c:	1c43      	adds	r3, r0, #1
 800758e:	429a      	cmp	r2, r3
 8007590:	d004      	beq.n	800759c <__swbuf_r+0x6e>
 8007592:	89a3      	ldrh	r3, [r4, #12]
 8007594:	07db      	lsls	r3, r3, #31
 8007596:	d5e1      	bpl.n	800755c <__swbuf_r+0x2e>
 8007598:	2e0a      	cmp	r6, #10
 800759a:	d1df      	bne.n	800755c <__swbuf_r+0x2e>
 800759c:	4621      	mov	r1, r4
 800759e:	4628      	mov	r0, r5
 80075a0:	f002 fe9a 	bl	800a2d8 <_fflush_r>
 80075a4:	2800      	cmp	r0, #0
 80075a6:	d0d9      	beq.n	800755c <__swbuf_r+0x2e>
 80075a8:	e7d6      	b.n	8007558 <__swbuf_r+0x2a>
	...

080075ac <__swsetup_r>:
 80075ac:	b538      	push	{r3, r4, r5, lr}
 80075ae:	4b29      	ldr	r3, [pc, #164]	@ (8007654 <__swsetup_r+0xa8>)
 80075b0:	4605      	mov	r5, r0
 80075b2:	6818      	ldr	r0, [r3, #0]
 80075b4:	460c      	mov	r4, r1
 80075b6:	b118      	cbz	r0, 80075c0 <__swsetup_r+0x14>
 80075b8:	6a03      	ldr	r3, [r0, #32]
 80075ba:	b90b      	cbnz	r3, 80075c0 <__swsetup_r+0x14>
 80075bc:	f7ff feac 	bl	8007318 <__sinit>
 80075c0:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80075c4:	0719      	lsls	r1, r3, #28
 80075c6:	d422      	bmi.n	800760e <__swsetup_r+0x62>
 80075c8:	06da      	lsls	r2, r3, #27
 80075ca:	d407      	bmi.n	80075dc <__swsetup_r+0x30>
 80075cc:	2209      	movs	r2, #9
 80075ce:	602a      	str	r2, [r5, #0]
 80075d0:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80075d4:	81a3      	strh	r3, [r4, #12]
 80075d6:	f04f 30ff 	mov.w	r0, #4294967295
 80075da:	e033      	b.n	8007644 <__swsetup_r+0x98>
 80075dc:	0758      	lsls	r0, r3, #29
 80075de:	d512      	bpl.n	8007606 <__swsetup_r+0x5a>
 80075e0:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80075e2:	b141      	cbz	r1, 80075f6 <__swsetup_r+0x4a>
 80075e4:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80075e8:	4299      	cmp	r1, r3
 80075ea:	d002      	beq.n	80075f2 <__swsetup_r+0x46>
 80075ec:	4628      	mov	r0, r5
 80075ee:	f000 ff27 	bl	8008440 <_free_r>
 80075f2:	2300      	movs	r3, #0
 80075f4:	6363      	str	r3, [r4, #52]	@ 0x34
 80075f6:	89a3      	ldrh	r3, [r4, #12]
 80075f8:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 80075fc:	81a3      	strh	r3, [r4, #12]
 80075fe:	2300      	movs	r3, #0
 8007600:	6063      	str	r3, [r4, #4]
 8007602:	6923      	ldr	r3, [r4, #16]
 8007604:	6023      	str	r3, [r4, #0]
 8007606:	89a3      	ldrh	r3, [r4, #12]
 8007608:	f043 0308 	orr.w	r3, r3, #8
 800760c:	81a3      	strh	r3, [r4, #12]
 800760e:	6923      	ldr	r3, [r4, #16]
 8007610:	b94b      	cbnz	r3, 8007626 <__swsetup_r+0x7a>
 8007612:	89a3      	ldrh	r3, [r4, #12]
 8007614:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8007618:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 800761c:	d003      	beq.n	8007626 <__swsetup_r+0x7a>
 800761e:	4621      	mov	r1, r4
 8007620:	4628      	mov	r0, r5
 8007622:	f002 fea7 	bl	800a374 <__smakebuf_r>
 8007626:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800762a:	f013 0201 	ands.w	r2, r3, #1
 800762e:	d00a      	beq.n	8007646 <__swsetup_r+0x9a>
 8007630:	2200      	movs	r2, #0
 8007632:	60a2      	str	r2, [r4, #8]
 8007634:	6962      	ldr	r2, [r4, #20]
 8007636:	4252      	negs	r2, r2
 8007638:	61a2      	str	r2, [r4, #24]
 800763a:	6922      	ldr	r2, [r4, #16]
 800763c:	b942      	cbnz	r2, 8007650 <__swsetup_r+0xa4>
 800763e:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8007642:	d1c5      	bne.n	80075d0 <__swsetup_r+0x24>
 8007644:	bd38      	pop	{r3, r4, r5, pc}
 8007646:	0799      	lsls	r1, r3, #30
 8007648:	bf58      	it	pl
 800764a:	6962      	ldrpl	r2, [r4, #20]
 800764c:	60a2      	str	r2, [r4, #8]
 800764e:	e7f4      	b.n	800763a <__swsetup_r+0x8e>
 8007650:	2000      	movs	r0, #0
 8007652:	e7f7      	b.n	8007644 <__swsetup_r+0x98>
 8007654:	20000034 	.word	0x20000034

08007658 <memset>:
 8007658:	4402      	add	r2, r0
 800765a:	4603      	mov	r3, r0
 800765c:	4293      	cmp	r3, r2
 800765e:	d100      	bne.n	8007662 <memset+0xa>
 8007660:	4770      	bx	lr
 8007662:	f803 1b01 	strb.w	r1, [r3], #1
 8007666:	e7f9      	b.n	800765c <memset+0x4>

08007668 <strstr>:
 8007668:	780a      	ldrb	r2, [r1, #0]
 800766a:	b570      	push	{r4, r5, r6, lr}
 800766c:	b96a      	cbnz	r2, 800768a <strstr+0x22>
 800766e:	bd70      	pop	{r4, r5, r6, pc}
 8007670:	429a      	cmp	r2, r3
 8007672:	d109      	bne.n	8007688 <strstr+0x20>
 8007674:	460c      	mov	r4, r1
 8007676:	4605      	mov	r5, r0
 8007678:	f814 3f01 	ldrb.w	r3, [r4, #1]!
 800767c:	2b00      	cmp	r3, #0
 800767e:	d0f6      	beq.n	800766e <strstr+0x6>
 8007680:	f815 6f01 	ldrb.w	r6, [r5, #1]!
 8007684:	429e      	cmp	r6, r3
 8007686:	d0f7      	beq.n	8007678 <strstr+0x10>
 8007688:	3001      	adds	r0, #1
 800768a:	7803      	ldrb	r3, [r0, #0]
 800768c:	2b00      	cmp	r3, #0
 800768e:	d1ef      	bne.n	8007670 <strstr+0x8>
 8007690:	4618      	mov	r0, r3
 8007692:	e7ec      	b.n	800766e <strstr+0x6>

08007694 <_localeconv_r>:
 8007694:	4800      	ldr	r0, [pc, #0]	@ (8007698 <_localeconv_r+0x4>)
 8007696:	4770      	bx	lr
 8007698:	20000174 	.word	0x20000174

0800769c <_close_r>:
 800769c:	b538      	push	{r3, r4, r5, lr}
 800769e:	4d06      	ldr	r5, [pc, #24]	@ (80076b8 <_close_r+0x1c>)
 80076a0:	2300      	movs	r3, #0
 80076a2:	4604      	mov	r4, r0
 80076a4:	4608      	mov	r0, r1
 80076a6:	602b      	str	r3, [r5, #0]
 80076a8:	f7fa fdc2 	bl	8002230 <_close>
 80076ac:	1c43      	adds	r3, r0, #1
 80076ae:	d102      	bne.n	80076b6 <_close_r+0x1a>
 80076b0:	682b      	ldr	r3, [r5, #0]
 80076b2:	b103      	cbz	r3, 80076b6 <_close_r+0x1a>
 80076b4:	6023      	str	r3, [r4, #0]
 80076b6:	bd38      	pop	{r3, r4, r5, pc}
 80076b8:	20000918 	.word	0x20000918

080076bc <_lseek_r>:
 80076bc:	b538      	push	{r3, r4, r5, lr}
 80076be:	4d07      	ldr	r5, [pc, #28]	@ (80076dc <_lseek_r+0x20>)
 80076c0:	4604      	mov	r4, r0
 80076c2:	4608      	mov	r0, r1
 80076c4:	4611      	mov	r1, r2
 80076c6:	2200      	movs	r2, #0
 80076c8:	602a      	str	r2, [r5, #0]
 80076ca:	461a      	mov	r2, r3
 80076cc:	f7fa fdd7 	bl	800227e <_lseek>
 80076d0:	1c43      	adds	r3, r0, #1
 80076d2:	d102      	bne.n	80076da <_lseek_r+0x1e>
 80076d4:	682b      	ldr	r3, [r5, #0]
 80076d6:	b103      	cbz	r3, 80076da <_lseek_r+0x1e>
 80076d8:	6023      	str	r3, [r4, #0]
 80076da:	bd38      	pop	{r3, r4, r5, pc}
 80076dc:	20000918 	.word	0x20000918

080076e0 <_read_r>:
 80076e0:	b538      	push	{r3, r4, r5, lr}
 80076e2:	4d07      	ldr	r5, [pc, #28]	@ (8007700 <_read_r+0x20>)
 80076e4:	4604      	mov	r4, r0
 80076e6:	4608      	mov	r0, r1
 80076e8:	4611      	mov	r1, r2
 80076ea:	2200      	movs	r2, #0
 80076ec:	602a      	str	r2, [r5, #0]
 80076ee:	461a      	mov	r2, r3
 80076f0:	f7fa fd81 	bl	80021f6 <_read>
 80076f4:	1c43      	adds	r3, r0, #1
 80076f6:	d102      	bne.n	80076fe <_read_r+0x1e>
 80076f8:	682b      	ldr	r3, [r5, #0]
 80076fa:	b103      	cbz	r3, 80076fe <_read_r+0x1e>
 80076fc:	6023      	str	r3, [r4, #0]
 80076fe:	bd38      	pop	{r3, r4, r5, pc}
 8007700:	20000918 	.word	0x20000918

08007704 <_write_r>:
 8007704:	b538      	push	{r3, r4, r5, lr}
 8007706:	4d07      	ldr	r5, [pc, #28]	@ (8007724 <_write_r+0x20>)
 8007708:	4604      	mov	r4, r0
 800770a:	4608      	mov	r0, r1
 800770c:	4611      	mov	r1, r2
 800770e:	2200      	movs	r2, #0
 8007710:	602a      	str	r2, [r5, #0]
 8007712:	461a      	mov	r2, r3
 8007714:	f7f9 fec7 	bl	80014a6 <_write>
 8007718:	1c43      	adds	r3, r0, #1
 800771a:	d102      	bne.n	8007722 <_write_r+0x1e>
 800771c:	682b      	ldr	r3, [r5, #0]
 800771e:	b103      	cbz	r3, 8007722 <_write_r+0x1e>
 8007720:	6023      	str	r3, [r4, #0]
 8007722:	bd38      	pop	{r3, r4, r5, pc}
 8007724:	20000918 	.word	0x20000918

08007728 <__errno>:
 8007728:	4b01      	ldr	r3, [pc, #4]	@ (8007730 <__errno+0x8>)
 800772a:	6818      	ldr	r0, [r3, #0]
 800772c:	4770      	bx	lr
 800772e:	bf00      	nop
 8007730:	20000034 	.word	0x20000034

08007734 <__libc_init_array>:
 8007734:	b570      	push	{r4, r5, r6, lr}
 8007736:	4d0d      	ldr	r5, [pc, #52]	@ (800776c <__libc_init_array+0x38>)
 8007738:	4c0d      	ldr	r4, [pc, #52]	@ (8007770 <__libc_init_array+0x3c>)
 800773a:	1b64      	subs	r4, r4, r5
 800773c:	10a4      	asrs	r4, r4, #2
 800773e:	2600      	movs	r6, #0
 8007740:	42a6      	cmp	r6, r4
 8007742:	d109      	bne.n	8007758 <__libc_init_array+0x24>
 8007744:	4d0b      	ldr	r5, [pc, #44]	@ (8007774 <__libc_init_array+0x40>)
 8007746:	4c0c      	ldr	r4, [pc, #48]	@ (8007778 <__libc_init_array+0x44>)
 8007748:	f003 fae4 	bl	800ad14 <_init>
 800774c:	1b64      	subs	r4, r4, r5
 800774e:	10a4      	asrs	r4, r4, #2
 8007750:	2600      	movs	r6, #0
 8007752:	42a6      	cmp	r6, r4
 8007754:	d105      	bne.n	8007762 <__libc_init_array+0x2e>
 8007756:	bd70      	pop	{r4, r5, r6, pc}
 8007758:	f855 3b04 	ldr.w	r3, [r5], #4
 800775c:	4798      	blx	r3
 800775e:	3601      	adds	r6, #1
 8007760:	e7ee      	b.n	8007740 <__libc_init_array+0xc>
 8007762:	f855 3b04 	ldr.w	r3, [r5], #4
 8007766:	4798      	blx	r3
 8007768:	3601      	adds	r6, #1
 800776a:	e7f2      	b.n	8007752 <__libc_init_array+0x1e>
 800776c:	0800b35c 	.word	0x0800b35c
 8007770:	0800b35c 	.word	0x0800b35c
 8007774:	0800b35c 	.word	0x0800b35c
 8007778:	0800b360 	.word	0x0800b360

0800777c <__retarget_lock_init_recursive>:
 800777c:	4770      	bx	lr

0800777e <__retarget_lock_acquire_recursive>:
 800777e:	4770      	bx	lr

08007780 <__retarget_lock_release_recursive>:
 8007780:	4770      	bx	lr
	...

08007784 <nanf>:
 8007784:	ed9f 0a01 	vldr	s0, [pc, #4]	@ 800778c <nanf+0x8>
 8007788:	4770      	bx	lr
 800778a:	bf00      	nop
 800778c:	7fc00000 	.word	0x7fc00000

08007790 <quorem>:
 8007790:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8007794:	6903      	ldr	r3, [r0, #16]
 8007796:	690c      	ldr	r4, [r1, #16]
 8007798:	42a3      	cmp	r3, r4
 800779a:	4607      	mov	r7, r0
 800779c:	db7e      	blt.n	800789c <quorem+0x10c>
 800779e:	3c01      	subs	r4, #1
 80077a0:	f101 0814 	add.w	r8, r1, #20
 80077a4:	00a3      	lsls	r3, r4, #2
 80077a6:	f100 0514 	add.w	r5, r0, #20
 80077aa:	9300      	str	r3, [sp, #0]
 80077ac:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 80077b0:	9301      	str	r3, [sp, #4]
 80077b2:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 80077b6:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 80077ba:	3301      	adds	r3, #1
 80077bc:	429a      	cmp	r2, r3
 80077be:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 80077c2:	fbb2 f6f3 	udiv	r6, r2, r3
 80077c6:	d32e      	bcc.n	8007826 <quorem+0x96>
 80077c8:	f04f 0a00 	mov.w	sl, #0
 80077cc:	46c4      	mov	ip, r8
 80077ce:	46ae      	mov	lr, r5
 80077d0:	46d3      	mov	fp, sl
 80077d2:	f85c 3b04 	ldr.w	r3, [ip], #4
 80077d6:	b298      	uxth	r0, r3
 80077d8:	fb06 a000 	mla	r0, r6, r0, sl
 80077dc:	0c02      	lsrs	r2, r0, #16
 80077de:	0c1b      	lsrs	r3, r3, #16
 80077e0:	fb06 2303 	mla	r3, r6, r3, r2
 80077e4:	f8de 2000 	ldr.w	r2, [lr]
 80077e8:	b280      	uxth	r0, r0
 80077ea:	b292      	uxth	r2, r2
 80077ec:	1a12      	subs	r2, r2, r0
 80077ee:	445a      	add	r2, fp
 80077f0:	f8de 0000 	ldr.w	r0, [lr]
 80077f4:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 80077f8:	b29b      	uxth	r3, r3
 80077fa:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 80077fe:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8007802:	b292      	uxth	r2, r2
 8007804:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007808:	45e1      	cmp	r9, ip
 800780a:	f84e 2b04 	str.w	r2, [lr], #4
 800780e:	ea4f 4b23 	mov.w	fp, r3, asr #16
 8007812:	d2de      	bcs.n	80077d2 <quorem+0x42>
 8007814:	9b00      	ldr	r3, [sp, #0]
 8007816:	58eb      	ldr	r3, [r5, r3]
 8007818:	b92b      	cbnz	r3, 8007826 <quorem+0x96>
 800781a:	9b01      	ldr	r3, [sp, #4]
 800781c:	3b04      	subs	r3, #4
 800781e:	429d      	cmp	r5, r3
 8007820:	461a      	mov	r2, r3
 8007822:	d32f      	bcc.n	8007884 <quorem+0xf4>
 8007824:	613c      	str	r4, [r7, #16]
 8007826:	4638      	mov	r0, r7
 8007828:	f001 f9c6 	bl	8008bb8 <__mcmp>
 800782c:	2800      	cmp	r0, #0
 800782e:	db25      	blt.n	800787c <quorem+0xec>
 8007830:	4629      	mov	r1, r5
 8007832:	2000      	movs	r0, #0
 8007834:	f858 2b04 	ldr.w	r2, [r8], #4
 8007838:	f8d1 c000 	ldr.w	ip, [r1]
 800783c:	fa1f fe82 	uxth.w	lr, r2
 8007840:	fa1f f38c 	uxth.w	r3, ip
 8007844:	eba3 030e 	sub.w	r3, r3, lr
 8007848:	4403      	add	r3, r0
 800784a:	0c12      	lsrs	r2, r2, #16
 800784c:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 8007850:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 8007854:	b29b      	uxth	r3, r3
 8007856:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 800785a:	45c1      	cmp	r9, r8
 800785c:	f841 3b04 	str.w	r3, [r1], #4
 8007860:	ea4f 4022 	mov.w	r0, r2, asr #16
 8007864:	d2e6      	bcs.n	8007834 <quorem+0xa4>
 8007866:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 800786a:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 800786e:	b922      	cbnz	r2, 800787a <quorem+0xea>
 8007870:	3b04      	subs	r3, #4
 8007872:	429d      	cmp	r5, r3
 8007874:	461a      	mov	r2, r3
 8007876:	d30b      	bcc.n	8007890 <quorem+0x100>
 8007878:	613c      	str	r4, [r7, #16]
 800787a:	3601      	adds	r6, #1
 800787c:	4630      	mov	r0, r6
 800787e:	b003      	add	sp, #12
 8007880:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007884:	6812      	ldr	r2, [r2, #0]
 8007886:	3b04      	subs	r3, #4
 8007888:	2a00      	cmp	r2, #0
 800788a:	d1cb      	bne.n	8007824 <quorem+0x94>
 800788c:	3c01      	subs	r4, #1
 800788e:	e7c6      	b.n	800781e <quorem+0x8e>
 8007890:	6812      	ldr	r2, [r2, #0]
 8007892:	3b04      	subs	r3, #4
 8007894:	2a00      	cmp	r2, #0
 8007896:	d1ef      	bne.n	8007878 <quorem+0xe8>
 8007898:	3c01      	subs	r4, #1
 800789a:	e7ea      	b.n	8007872 <quorem+0xe2>
 800789c:	2000      	movs	r0, #0
 800789e:	e7ee      	b.n	800787e <quorem+0xee>

080078a0 <_dtoa_r>:
 80078a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80078a4:	69c7      	ldr	r7, [r0, #28]
 80078a6:	b097      	sub	sp, #92	@ 0x5c
 80078a8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80078ac:	ec55 4b10 	vmov	r4, r5, d0
 80078b0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80078b2:	9107      	str	r1, [sp, #28]
 80078b4:	4681      	mov	r9, r0
 80078b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80078b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80078ba:	b97f      	cbnz	r7, 80078dc <_dtoa_r+0x3c>
 80078bc:	2010      	movs	r0, #16
 80078be:	f000 fe09 	bl	80084d4 <malloc>
 80078c2:	4602      	mov	r2, r0
 80078c4:	f8c9 001c 	str.w	r0, [r9, #28]
 80078c8:	b920      	cbnz	r0, 80078d4 <_dtoa_r+0x34>
 80078ca:	4ba9      	ldr	r3, [pc, #676]	@ (8007b70 <_dtoa_r+0x2d0>)
 80078cc:	21ef      	movs	r1, #239	@ 0xef
 80078ce:	48a9      	ldr	r0, [pc, #676]	@ (8007b74 <_dtoa_r+0x2d4>)
 80078d0:	f002 fe02 	bl	800a4d8 <__assert_func>
 80078d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80078d8:	6007      	str	r7, [r0, #0]
 80078da:	60c7      	str	r7, [r0, #12]
 80078dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80078e0:	6819      	ldr	r1, [r3, #0]
 80078e2:	b159      	cbz	r1, 80078fc <_dtoa_r+0x5c>
 80078e4:	685a      	ldr	r2, [r3, #4]
 80078e6:	604a      	str	r2, [r1, #4]
 80078e8:	2301      	movs	r3, #1
 80078ea:	4093      	lsls	r3, r2
 80078ec:	608b      	str	r3, [r1, #8]
 80078ee:	4648      	mov	r0, r9
 80078f0:	f000 fee6 	bl	80086c0 <_Bfree>
 80078f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80078f8:	2200      	movs	r2, #0
 80078fa:	601a      	str	r2, [r3, #0]
 80078fc:	1e2b      	subs	r3, r5, #0
 80078fe:	bfb9      	ittee	lt
 8007900:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007904:	9305      	strlt	r3, [sp, #20]
 8007906:	2300      	movge	r3, #0
 8007908:	6033      	strge	r3, [r6, #0]
 800790a:	9f05      	ldr	r7, [sp, #20]
 800790c:	4b9a      	ldr	r3, [pc, #616]	@ (8007b78 <_dtoa_r+0x2d8>)
 800790e:	bfbc      	itt	lt
 8007910:	2201      	movlt	r2, #1
 8007912:	6032      	strlt	r2, [r6, #0]
 8007914:	43bb      	bics	r3, r7
 8007916:	d112      	bne.n	800793e <_dtoa_r+0x9e>
 8007918:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800791a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800791e:	6013      	str	r3, [r2, #0]
 8007920:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007924:	4323      	orrs	r3, r4
 8007926:	f000 855a 	beq.w	80083de <_dtoa_r+0xb3e>
 800792a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800792c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 8007b8c <_dtoa_r+0x2ec>
 8007930:	2b00      	cmp	r3, #0
 8007932:	f000 855c 	beq.w	80083ee <_dtoa_r+0xb4e>
 8007936:	f10a 0303 	add.w	r3, sl, #3
 800793a:	f000 bd56 	b.w	80083ea <_dtoa_r+0xb4a>
 800793e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007942:	2200      	movs	r2, #0
 8007944:	ec51 0b17 	vmov	r0, r1, d7
 8007948:	2300      	movs	r3, #0
 800794a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800794e:	f7f9 f8c3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007952:	4680      	mov	r8, r0
 8007954:	b158      	cbz	r0, 800796e <_dtoa_r+0xce>
 8007956:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007958:	2301      	movs	r3, #1
 800795a:	6013      	str	r3, [r2, #0]
 800795c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800795e:	b113      	cbz	r3, 8007966 <_dtoa_r+0xc6>
 8007960:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007962:	4b86      	ldr	r3, [pc, #536]	@ (8007b7c <_dtoa_r+0x2dc>)
 8007964:	6013      	str	r3, [r2, #0]
 8007966:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007b90 <_dtoa_r+0x2f0>
 800796a:	f000 bd40 	b.w	80083ee <_dtoa_r+0xb4e>
 800796e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007972:	aa14      	add	r2, sp, #80	@ 0x50
 8007974:	a915      	add	r1, sp, #84	@ 0x54
 8007976:	4648      	mov	r0, r9
 8007978:	f001 fa3e 	bl	8008df8 <__d2b>
 800797c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007980:	9002      	str	r0, [sp, #8]
 8007982:	2e00      	cmp	r6, #0
 8007984:	d078      	beq.n	8007a78 <_dtoa_r+0x1d8>
 8007986:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007988:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800798c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007990:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007994:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007998:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800799c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80079a0:	4619      	mov	r1, r3
 80079a2:	2200      	movs	r2, #0
 80079a4:	4b76      	ldr	r3, [pc, #472]	@ (8007b80 <_dtoa_r+0x2e0>)
 80079a6:	f7f8 fc77 	bl	8000298 <__aeabi_dsub>
 80079aa:	a36b      	add	r3, pc, #428	@ (adr r3, 8007b58 <_dtoa_r+0x2b8>)
 80079ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b0:	f7f8 fe2a 	bl	8000608 <__aeabi_dmul>
 80079b4:	a36a      	add	r3, pc, #424	@ (adr r3, 8007b60 <_dtoa_r+0x2c0>)
 80079b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ba:	f7f8 fc6f 	bl	800029c <__adddf3>
 80079be:	4604      	mov	r4, r0
 80079c0:	4630      	mov	r0, r6
 80079c2:	460d      	mov	r5, r1
 80079c4:	f7f8 fdb6 	bl	8000534 <__aeabi_i2d>
 80079c8:	a367      	add	r3, pc, #412	@ (adr r3, 8007b68 <_dtoa_r+0x2c8>)
 80079ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ce:	f7f8 fe1b 	bl	8000608 <__aeabi_dmul>
 80079d2:	4602      	mov	r2, r0
 80079d4:	460b      	mov	r3, r1
 80079d6:	4620      	mov	r0, r4
 80079d8:	4629      	mov	r1, r5
 80079da:	f7f8 fc5f 	bl	800029c <__adddf3>
 80079de:	4604      	mov	r4, r0
 80079e0:	460d      	mov	r5, r1
 80079e2:	f7f9 f8c1 	bl	8000b68 <__aeabi_d2iz>
 80079e6:	2200      	movs	r2, #0
 80079e8:	4607      	mov	r7, r0
 80079ea:	2300      	movs	r3, #0
 80079ec:	4620      	mov	r0, r4
 80079ee:	4629      	mov	r1, r5
 80079f0:	f7f9 f87c 	bl	8000aec <__aeabi_dcmplt>
 80079f4:	b140      	cbz	r0, 8007a08 <_dtoa_r+0x168>
 80079f6:	4638      	mov	r0, r7
 80079f8:	f7f8 fd9c 	bl	8000534 <__aeabi_i2d>
 80079fc:	4622      	mov	r2, r4
 80079fe:	462b      	mov	r3, r5
 8007a00:	f7f9 f86a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007a04:	b900      	cbnz	r0, 8007a08 <_dtoa_r+0x168>
 8007a06:	3f01      	subs	r7, #1
 8007a08:	2f16      	cmp	r7, #22
 8007a0a:	d852      	bhi.n	8007ab2 <_dtoa_r+0x212>
 8007a0c:	4b5d      	ldr	r3, [pc, #372]	@ (8007b84 <_dtoa_r+0x2e4>)
 8007a0e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a16:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007a1a:	f7f9 f867 	bl	8000aec <__aeabi_dcmplt>
 8007a1e:	2800      	cmp	r0, #0
 8007a20:	d049      	beq.n	8007ab6 <_dtoa_r+0x216>
 8007a22:	3f01      	subs	r7, #1
 8007a24:	2300      	movs	r3, #0
 8007a26:	9310      	str	r3, [sp, #64]	@ 0x40
 8007a28:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007a2a:	1b9b      	subs	r3, r3, r6
 8007a2c:	1e5a      	subs	r2, r3, #1
 8007a2e:	bf45      	ittet	mi
 8007a30:	f1c3 0301 	rsbmi	r3, r3, #1
 8007a34:	9300      	strmi	r3, [sp, #0]
 8007a36:	2300      	movpl	r3, #0
 8007a38:	2300      	movmi	r3, #0
 8007a3a:	9206      	str	r2, [sp, #24]
 8007a3c:	bf54      	ite	pl
 8007a3e:	9300      	strpl	r3, [sp, #0]
 8007a40:	9306      	strmi	r3, [sp, #24]
 8007a42:	2f00      	cmp	r7, #0
 8007a44:	db39      	blt.n	8007aba <_dtoa_r+0x21a>
 8007a46:	9b06      	ldr	r3, [sp, #24]
 8007a48:	970d      	str	r7, [sp, #52]	@ 0x34
 8007a4a:	443b      	add	r3, r7
 8007a4c:	9306      	str	r3, [sp, #24]
 8007a4e:	2300      	movs	r3, #0
 8007a50:	9308      	str	r3, [sp, #32]
 8007a52:	9b07      	ldr	r3, [sp, #28]
 8007a54:	2b09      	cmp	r3, #9
 8007a56:	d863      	bhi.n	8007b20 <_dtoa_r+0x280>
 8007a58:	2b05      	cmp	r3, #5
 8007a5a:	bfc4      	itt	gt
 8007a5c:	3b04      	subgt	r3, #4
 8007a5e:	9307      	strgt	r3, [sp, #28]
 8007a60:	9b07      	ldr	r3, [sp, #28]
 8007a62:	f1a3 0302 	sub.w	r3, r3, #2
 8007a66:	bfcc      	ite	gt
 8007a68:	2400      	movgt	r4, #0
 8007a6a:	2401      	movle	r4, #1
 8007a6c:	2b03      	cmp	r3, #3
 8007a6e:	d863      	bhi.n	8007b38 <_dtoa_r+0x298>
 8007a70:	e8df f003 	tbb	[pc, r3]
 8007a74:	2b375452 	.word	0x2b375452
 8007a78:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 8007a7c:	441e      	add	r6, r3
 8007a7e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007a82:	2b20      	cmp	r3, #32
 8007a84:	bfc1      	itttt	gt
 8007a86:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 8007a8a:	409f      	lslgt	r7, r3
 8007a8c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007a90:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007a94:	bfd6      	itet	le
 8007a96:	f1c3 0320 	rsble	r3, r3, #32
 8007a9a:	ea47 0003 	orrgt.w	r0, r7, r3
 8007a9e:	fa04 f003 	lslle.w	r0, r4, r3
 8007aa2:	f7f8 fd37 	bl	8000514 <__aeabi_ui2d>
 8007aa6:	2201      	movs	r2, #1
 8007aa8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 8007aac:	3e01      	subs	r6, #1
 8007aae:	9212      	str	r2, [sp, #72]	@ 0x48
 8007ab0:	e776      	b.n	80079a0 <_dtoa_r+0x100>
 8007ab2:	2301      	movs	r3, #1
 8007ab4:	e7b7      	b.n	8007a26 <_dtoa_r+0x186>
 8007ab6:	9010      	str	r0, [sp, #64]	@ 0x40
 8007ab8:	e7b6      	b.n	8007a28 <_dtoa_r+0x188>
 8007aba:	9b00      	ldr	r3, [sp, #0]
 8007abc:	1bdb      	subs	r3, r3, r7
 8007abe:	9300      	str	r3, [sp, #0]
 8007ac0:	427b      	negs	r3, r7
 8007ac2:	9308      	str	r3, [sp, #32]
 8007ac4:	2300      	movs	r3, #0
 8007ac6:	930d      	str	r3, [sp, #52]	@ 0x34
 8007ac8:	e7c3      	b.n	8007a52 <_dtoa_r+0x1b2>
 8007aca:	2301      	movs	r3, #1
 8007acc:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ace:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ad0:	eb07 0b03 	add.w	fp, r7, r3
 8007ad4:	f10b 0301 	add.w	r3, fp, #1
 8007ad8:	2b01      	cmp	r3, #1
 8007ada:	9303      	str	r3, [sp, #12]
 8007adc:	bfb8      	it	lt
 8007ade:	2301      	movlt	r3, #1
 8007ae0:	e006      	b.n	8007af0 <_dtoa_r+0x250>
 8007ae2:	2301      	movs	r3, #1
 8007ae4:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ae6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007ae8:	2b00      	cmp	r3, #0
 8007aea:	dd28      	ble.n	8007b3e <_dtoa_r+0x29e>
 8007aec:	469b      	mov	fp, r3
 8007aee:	9303      	str	r3, [sp, #12]
 8007af0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 8007af4:	2100      	movs	r1, #0
 8007af6:	2204      	movs	r2, #4
 8007af8:	f102 0514 	add.w	r5, r2, #20
 8007afc:	429d      	cmp	r5, r3
 8007afe:	d926      	bls.n	8007b4e <_dtoa_r+0x2ae>
 8007b00:	6041      	str	r1, [r0, #4]
 8007b02:	4648      	mov	r0, r9
 8007b04:	f000 fd9c 	bl	8008640 <_Balloc>
 8007b08:	4682      	mov	sl, r0
 8007b0a:	2800      	cmp	r0, #0
 8007b0c:	d142      	bne.n	8007b94 <_dtoa_r+0x2f4>
 8007b0e:	4b1e      	ldr	r3, [pc, #120]	@ (8007b88 <_dtoa_r+0x2e8>)
 8007b10:	4602      	mov	r2, r0
 8007b12:	f240 11af 	movw	r1, #431	@ 0x1af
 8007b16:	e6da      	b.n	80078ce <_dtoa_r+0x2e>
 8007b18:	2300      	movs	r3, #0
 8007b1a:	e7e3      	b.n	8007ae4 <_dtoa_r+0x244>
 8007b1c:	2300      	movs	r3, #0
 8007b1e:	e7d5      	b.n	8007acc <_dtoa_r+0x22c>
 8007b20:	2401      	movs	r4, #1
 8007b22:	2300      	movs	r3, #0
 8007b24:	9307      	str	r3, [sp, #28]
 8007b26:	9409      	str	r4, [sp, #36]	@ 0x24
 8007b28:	f04f 3bff 	mov.w	fp, #4294967295
 8007b2c:	2200      	movs	r2, #0
 8007b2e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007b32:	2312      	movs	r3, #18
 8007b34:	920c      	str	r2, [sp, #48]	@ 0x30
 8007b36:	e7db      	b.n	8007af0 <_dtoa_r+0x250>
 8007b38:	2301      	movs	r3, #1
 8007b3a:	9309      	str	r3, [sp, #36]	@ 0x24
 8007b3c:	e7f4      	b.n	8007b28 <_dtoa_r+0x288>
 8007b3e:	f04f 0b01 	mov.w	fp, #1
 8007b42:	f8cd b00c 	str.w	fp, [sp, #12]
 8007b46:	465b      	mov	r3, fp
 8007b48:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 8007b4c:	e7d0      	b.n	8007af0 <_dtoa_r+0x250>
 8007b4e:	3101      	adds	r1, #1
 8007b50:	0052      	lsls	r2, r2, #1
 8007b52:	e7d1      	b.n	8007af8 <_dtoa_r+0x258>
 8007b54:	f3af 8000 	nop.w
 8007b58:	636f4361 	.word	0x636f4361
 8007b5c:	3fd287a7 	.word	0x3fd287a7
 8007b60:	8b60c8b3 	.word	0x8b60c8b3
 8007b64:	3fc68a28 	.word	0x3fc68a28
 8007b68:	509f79fb 	.word	0x509f79fb
 8007b6c:	3fd34413 	.word	0x3fd34413
 8007b70:	0800af72 	.word	0x0800af72
 8007b74:	0800af89 	.word	0x0800af89
 8007b78:	7ff00000 	.word	0x7ff00000
 8007b7c:	0800af3d 	.word	0x0800af3d
 8007b80:	3ff80000 	.word	0x3ff80000
 8007b84:	0800b138 	.word	0x0800b138
 8007b88:	0800afe1 	.word	0x0800afe1
 8007b8c:	0800af6e 	.word	0x0800af6e
 8007b90:	0800af3c 	.word	0x0800af3c
 8007b94:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007b98:	6018      	str	r0, [r3, #0]
 8007b9a:	9b03      	ldr	r3, [sp, #12]
 8007b9c:	2b0e      	cmp	r3, #14
 8007b9e:	f200 80a1 	bhi.w	8007ce4 <_dtoa_r+0x444>
 8007ba2:	2c00      	cmp	r4, #0
 8007ba4:	f000 809e 	beq.w	8007ce4 <_dtoa_r+0x444>
 8007ba8:	2f00      	cmp	r7, #0
 8007baa:	dd33      	ble.n	8007c14 <_dtoa_r+0x374>
 8007bac:	4b9c      	ldr	r3, [pc, #624]	@ (8007e20 <_dtoa_r+0x580>)
 8007bae:	f007 020f 	and.w	r2, r7, #15
 8007bb2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007bb6:	ed93 7b00 	vldr	d7, [r3]
 8007bba:	05f8      	lsls	r0, r7, #23
 8007bbc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 8007bc0:	ea4f 1427 	mov.w	r4, r7, asr #4
 8007bc4:	d516      	bpl.n	8007bf4 <_dtoa_r+0x354>
 8007bc6:	4b97      	ldr	r3, [pc, #604]	@ (8007e24 <_dtoa_r+0x584>)
 8007bc8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007bcc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 8007bd0:	f7f8 fe44 	bl	800085c <__aeabi_ddiv>
 8007bd4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bd8:	f004 040f 	and.w	r4, r4, #15
 8007bdc:	2603      	movs	r6, #3
 8007bde:	4d91      	ldr	r5, [pc, #580]	@ (8007e24 <_dtoa_r+0x584>)
 8007be0:	b954      	cbnz	r4, 8007bf8 <_dtoa_r+0x358>
 8007be2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007be6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007bea:	f7f8 fe37 	bl	800085c <__aeabi_ddiv>
 8007bee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007bf2:	e028      	b.n	8007c46 <_dtoa_r+0x3a6>
 8007bf4:	2602      	movs	r6, #2
 8007bf6:	e7f2      	b.n	8007bde <_dtoa_r+0x33e>
 8007bf8:	07e1      	lsls	r1, r4, #31
 8007bfa:	d508      	bpl.n	8007c0e <_dtoa_r+0x36e>
 8007bfc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007c00:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007c04:	f7f8 fd00 	bl	8000608 <__aeabi_dmul>
 8007c08:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007c0c:	3601      	adds	r6, #1
 8007c0e:	1064      	asrs	r4, r4, #1
 8007c10:	3508      	adds	r5, #8
 8007c12:	e7e5      	b.n	8007be0 <_dtoa_r+0x340>
 8007c14:	f000 80af 	beq.w	8007d76 <_dtoa_r+0x4d6>
 8007c18:	427c      	negs	r4, r7
 8007c1a:	4b81      	ldr	r3, [pc, #516]	@ (8007e20 <_dtoa_r+0x580>)
 8007c1c:	4d81      	ldr	r5, [pc, #516]	@ (8007e24 <_dtoa_r+0x584>)
 8007c1e:	f004 020f 	and.w	r2, r4, #15
 8007c22:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007c26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007c2a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007c2e:	f7f8 fceb 	bl	8000608 <__aeabi_dmul>
 8007c32:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c36:	1124      	asrs	r4, r4, #4
 8007c38:	2300      	movs	r3, #0
 8007c3a:	2602      	movs	r6, #2
 8007c3c:	2c00      	cmp	r4, #0
 8007c3e:	f040 808f 	bne.w	8007d60 <_dtoa_r+0x4c0>
 8007c42:	2b00      	cmp	r3, #0
 8007c44:	d1d3      	bne.n	8007bee <_dtoa_r+0x34e>
 8007c46:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007c48:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007c4c:	2b00      	cmp	r3, #0
 8007c4e:	f000 8094 	beq.w	8007d7a <_dtoa_r+0x4da>
 8007c52:	4b75      	ldr	r3, [pc, #468]	@ (8007e28 <_dtoa_r+0x588>)
 8007c54:	2200      	movs	r2, #0
 8007c56:	4620      	mov	r0, r4
 8007c58:	4629      	mov	r1, r5
 8007c5a:	f7f8 ff47 	bl	8000aec <__aeabi_dcmplt>
 8007c5e:	2800      	cmp	r0, #0
 8007c60:	f000 808b 	beq.w	8007d7a <_dtoa_r+0x4da>
 8007c64:	9b03      	ldr	r3, [sp, #12]
 8007c66:	2b00      	cmp	r3, #0
 8007c68:	f000 8087 	beq.w	8007d7a <_dtoa_r+0x4da>
 8007c6c:	f1bb 0f00 	cmp.w	fp, #0
 8007c70:	dd34      	ble.n	8007cdc <_dtoa_r+0x43c>
 8007c72:	4620      	mov	r0, r4
 8007c74:	4b6d      	ldr	r3, [pc, #436]	@ (8007e2c <_dtoa_r+0x58c>)
 8007c76:	2200      	movs	r2, #0
 8007c78:	4629      	mov	r1, r5
 8007c7a:	f7f8 fcc5 	bl	8000608 <__aeabi_dmul>
 8007c7e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007c82:	f107 38ff 	add.w	r8, r7, #4294967295
 8007c86:	3601      	adds	r6, #1
 8007c88:	465c      	mov	r4, fp
 8007c8a:	4630      	mov	r0, r6
 8007c8c:	f7f8 fc52 	bl	8000534 <__aeabi_i2d>
 8007c90:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007c94:	f7f8 fcb8 	bl	8000608 <__aeabi_dmul>
 8007c98:	4b65      	ldr	r3, [pc, #404]	@ (8007e30 <_dtoa_r+0x590>)
 8007c9a:	2200      	movs	r2, #0
 8007c9c:	f7f8 fafe 	bl	800029c <__adddf3>
 8007ca0:	4605      	mov	r5, r0
 8007ca2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 8007ca6:	2c00      	cmp	r4, #0
 8007ca8:	d16a      	bne.n	8007d80 <_dtoa_r+0x4e0>
 8007caa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cae:	4b61      	ldr	r3, [pc, #388]	@ (8007e34 <_dtoa_r+0x594>)
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f7f8 faf1 	bl	8000298 <__aeabi_dsub>
 8007cb6:	4602      	mov	r2, r0
 8007cb8:	460b      	mov	r3, r1
 8007cba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007cbe:	462a      	mov	r2, r5
 8007cc0:	4633      	mov	r3, r6
 8007cc2:	f7f8 ff31 	bl	8000b28 <__aeabi_dcmpgt>
 8007cc6:	2800      	cmp	r0, #0
 8007cc8:	f040 8298 	bne.w	80081fc <_dtoa_r+0x95c>
 8007ccc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007cd0:	462a      	mov	r2, r5
 8007cd2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 8007cd6:	f7f8 ff09 	bl	8000aec <__aeabi_dcmplt>
 8007cda:	bb38      	cbnz	r0, 8007d2c <_dtoa_r+0x48c>
 8007cdc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 8007ce0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 8007ce4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 8007ce6:	2b00      	cmp	r3, #0
 8007ce8:	f2c0 8157 	blt.w	8007f9a <_dtoa_r+0x6fa>
 8007cec:	2f0e      	cmp	r7, #14
 8007cee:	f300 8154 	bgt.w	8007f9a <_dtoa_r+0x6fa>
 8007cf2:	4b4b      	ldr	r3, [pc, #300]	@ (8007e20 <_dtoa_r+0x580>)
 8007cf4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007cf8:	ed93 7b00 	vldr	d7, [r3]
 8007cfc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007cfe:	2b00      	cmp	r3, #0
 8007d00:	ed8d 7b00 	vstr	d7, [sp]
 8007d04:	f280 80e5 	bge.w	8007ed2 <_dtoa_r+0x632>
 8007d08:	9b03      	ldr	r3, [sp, #12]
 8007d0a:	2b00      	cmp	r3, #0
 8007d0c:	f300 80e1 	bgt.w	8007ed2 <_dtoa_r+0x632>
 8007d10:	d10c      	bne.n	8007d2c <_dtoa_r+0x48c>
 8007d12:	4b48      	ldr	r3, [pc, #288]	@ (8007e34 <_dtoa_r+0x594>)
 8007d14:	2200      	movs	r2, #0
 8007d16:	ec51 0b17 	vmov	r0, r1, d7
 8007d1a:	f7f8 fc75 	bl	8000608 <__aeabi_dmul>
 8007d1e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007d22:	f7f8 fef7 	bl	8000b14 <__aeabi_dcmpge>
 8007d26:	2800      	cmp	r0, #0
 8007d28:	f000 8266 	beq.w	80081f8 <_dtoa_r+0x958>
 8007d2c:	2400      	movs	r4, #0
 8007d2e:	4625      	mov	r5, r4
 8007d30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007d32:	4656      	mov	r6, sl
 8007d34:	ea6f 0803 	mvn.w	r8, r3
 8007d38:	2700      	movs	r7, #0
 8007d3a:	4621      	mov	r1, r4
 8007d3c:	4648      	mov	r0, r9
 8007d3e:	f000 fcbf 	bl	80086c0 <_Bfree>
 8007d42:	2d00      	cmp	r5, #0
 8007d44:	f000 80bd 	beq.w	8007ec2 <_dtoa_r+0x622>
 8007d48:	b12f      	cbz	r7, 8007d56 <_dtoa_r+0x4b6>
 8007d4a:	42af      	cmp	r7, r5
 8007d4c:	d003      	beq.n	8007d56 <_dtoa_r+0x4b6>
 8007d4e:	4639      	mov	r1, r7
 8007d50:	4648      	mov	r0, r9
 8007d52:	f000 fcb5 	bl	80086c0 <_Bfree>
 8007d56:	4629      	mov	r1, r5
 8007d58:	4648      	mov	r0, r9
 8007d5a:	f000 fcb1 	bl	80086c0 <_Bfree>
 8007d5e:	e0b0      	b.n	8007ec2 <_dtoa_r+0x622>
 8007d60:	07e2      	lsls	r2, r4, #31
 8007d62:	d505      	bpl.n	8007d70 <_dtoa_r+0x4d0>
 8007d64:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007d68:	f7f8 fc4e 	bl	8000608 <__aeabi_dmul>
 8007d6c:	3601      	adds	r6, #1
 8007d6e:	2301      	movs	r3, #1
 8007d70:	1064      	asrs	r4, r4, #1
 8007d72:	3508      	adds	r5, #8
 8007d74:	e762      	b.n	8007c3c <_dtoa_r+0x39c>
 8007d76:	2602      	movs	r6, #2
 8007d78:	e765      	b.n	8007c46 <_dtoa_r+0x3a6>
 8007d7a:	9c03      	ldr	r4, [sp, #12]
 8007d7c:	46b8      	mov	r8, r7
 8007d7e:	e784      	b.n	8007c8a <_dtoa_r+0x3ea>
 8007d80:	4b27      	ldr	r3, [pc, #156]	@ (8007e20 <_dtoa_r+0x580>)
 8007d82:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007d84:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007d88:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 8007d8c:	4454      	add	r4, sl
 8007d8e:	2900      	cmp	r1, #0
 8007d90:	d054      	beq.n	8007e3c <_dtoa_r+0x59c>
 8007d92:	4929      	ldr	r1, [pc, #164]	@ (8007e38 <_dtoa_r+0x598>)
 8007d94:	2000      	movs	r0, #0
 8007d96:	f7f8 fd61 	bl	800085c <__aeabi_ddiv>
 8007d9a:	4633      	mov	r3, r6
 8007d9c:	462a      	mov	r2, r5
 8007d9e:	f7f8 fa7b 	bl	8000298 <__aeabi_dsub>
 8007da2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007da6:	4656      	mov	r6, sl
 8007da8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dac:	f7f8 fedc 	bl	8000b68 <__aeabi_d2iz>
 8007db0:	4605      	mov	r5, r0
 8007db2:	f7f8 fbbf 	bl	8000534 <__aeabi_i2d>
 8007db6:	4602      	mov	r2, r0
 8007db8:	460b      	mov	r3, r1
 8007dba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007dbe:	f7f8 fa6b 	bl	8000298 <__aeabi_dsub>
 8007dc2:	3530      	adds	r5, #48	@ 0x30
 8007dc4:	4602      	mov	r2, r0
 8007dc6:	460b      	mov	r3, r1
 8007dc8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007dcc:	f806 5b01 	strb.w	r5, [r6], #1
 8007dd0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007dd4:	f7f8 fe8a 	bl	8000aec <__aeabi_dcmplt>
 8007dd8:	2800      	cmp	r0, #0
 8007dda:	d172      	bne.n	8007ec2 <_dtoa_r+0x622>
 8007ddc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007de0:	4911      	ldr	r1, [pc, #68]	@ (8007e28 <_dtoa_r+0x588>)
 8007de2:	2000      	movs	r0, #0
 8007de4:	f7f8 fa58 	bl	8000298 <__aeabi_dsub>
 8007de8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007dec:	f7f8 fe7e 	bl	8000aec <__aeabi_dcmplt>
 8007df0:	2800      	cmp	r0, #0
 8007df2:	f040 80b4 	bne.w	8007f5e <_dtoa_r+0x6be>
 8007df6:	42a6      	cmp	r6, r4
 8007df8:	f43f af70 	beq.w	8007cdc <_dtoa_r+0x43c>
 8007dfc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007e00:	4b0a      	ldr	r3, [pc, #40]	@ (8007e2c <_dtoa_r+0x58c>)
 8007e02:	2200      	movs	r2, #0
 8007e04:	f7f8 fc00 	bl	8000608 <__aeabi_dmul>
 8007e08:	4b08      	ldr	r3, [pc, #32]	@ (8007e2c <_dtoa_r+0x58c>)
 8007e0a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007e0e:	2200      	movs	r2, #0
 8007e10:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e14:	f7f8 fbf8 	bl	8000608 <__aeabi_dmul>
 8007e18:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007e1c:	e7c4      	b.n	8007da8 <_dtoa_r+0x508>
 8007e1e:	bf00      	nop
 8007e20:	0800b138 	.word	0x0800b138
 8007e24:	0800b110 	.word	0x0800b110
 8007e28:	3ff00000 	.word	0x3ff00000
 8007e2c:	40240000 	.word	0x40240000
 8007e30:	401c0000 	.word	0x401c0000
 8007e34:	40140000 	.word	0x40140000
 8007e38:	3fe00000 	.word	0x3fe00000
 8007e3c:	4631      	mov	r1, r6
 8007e3e:	4628      	mov	r0, r5
 8007e40:	f7f8 fbe2 	bl	8000608 <__aeabi_dmul>
 8007e44:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007e48:	9413      	str	r4, [sp, #76]	@ 0x4c
 8007e4a:	4656      	mov	r6, sl
 8007e4c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e50:	f7f8 fe8a 	bl	8000b68 <__aeabi_d2iz>
 8007e54:	4605      	mov	r5, r0
 8007e56:	f7f8 fb6d 	bl	8000534 <__aeabi_i2d>
 8007e5a:	4602      	mov	r2, r0
 8007e5c:	460b      	mov	r3, r1
 8007e5e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e62:	f7f8 fa19 	bl	8000298 <__aeabi_dsub>
 8007e66:	3530      	adds	r5, #48	@ 0x30
 8007e68:	f806 5b01 	strb.w	r5, [r6], #1
 8007e6c:	4602      	mov	r2, r0
 8007e6e:	460b      	mov	r3, r1
 8007e70:	42a6      	cmp	r6, r4
 8007e72:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007e76:	f04f 0200 	mov.w	r2, #0
 8007e7a:	d124      	bne.n	8007ec6 <_dtoa_r+0x626>
 8007e7c:	4baf      	ldr	r3, [pc, #700]	@ (800813c <_dtoa_r+0x89c>)
 8007e7e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007e82:	f7f8 fa0b 	bl	800029c <__adddf3>
 8007e86:	4602      	mov	r2, r0
 8007e88:	460b      	mov	r3, r1
 8007e8a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007e8e:	f7f8 fe4b 	bl	8000b28 <__aeabi_dcmpgt>
 8007e92:	2800      	cmp	r0, #0
 8007e94:	d163      	bne.n	8007f5e <_dtoa_r+0x6be>
 8007e96:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 8007e9a:	49a8      	ldr	r1, [pc, #672]	@ (800813c <_dtoa_r+0x89c>)
 8007e9c:	2000      	movs	r0, #0
 8007e9e:	f7f8 f9fb 	bl	8000298 <__aeabi_dsub>
 8007ea2:	4602      	mov	r2, r0
 8007ea4:	460b      	mov	r3, r1
 8007ea6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007eaa:	f7f8 fe1f 	bl	8000aec <__aeabi_dcmplt>
 8007eae:	2800      	cmp	r0, #0
 8007eb0:	f43f af14 	beq.w	8007cdc <_dtoa_r+0x43c>
 8007eb4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 8007eb6:	1e73      	subs	r3, r6, #1
 8007eb8:	9313      	str	r3, [sp, #76]	@ 0x4c
 8007eba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 8007ebe:	2b30      	cmp	r3, #48	@ 0x30
 8007ec0:	d0f8      	beq.n	8007eb4 <_dtoa_r+0x614>
 8007ec2:	4647      	mov	r7, r8
 8007ec4:	e03b      	b.n	8007f3e <_dtoa_r+0x69e>
 8007ec6:	4b9e      	ldr	r3, [pc, #632]	@ (8008140 <_dtoa_r+0x8a0>)
 8007ec8:	f7f8 fb9e 	bl	8000608 <__aeabi_dmul>
 8007ecc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007ed0:	e7bc      	b.n	8007e4c <_dtoa_r+0x5ac>
 8007ed2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 8007ed6:	4656      	mov	r6, sl
 8007ed8:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007edc:	4620      	mov	r0, r4
 8007ede:	4629      	mov	r1, r5
 8007ee0:	f7f8 fcbc 	bl	800085c <__aeabi_ddiv>
 8007ee4:	f7f8 fe40 	bl	8000b68 <__aeabi_d2iz>
 8007ee8:	4680      	mov	r8, r0
 8007eea:	f7f8 fb23 	bl	8000534 <__aeabi_i2d>
 8007eee:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007ef2:	f7f8 fb89 	bl	8000608 <__aeabi_dmul>
 8007ef6:	4602      	mov	r2, r0
 8007ef8:	460b      	mov	r3, r1
 8007efa:	4620      	mov	r0, r4
 8007efc:	4629      	mov	r1, r5
 8007efe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007f02:	f7f8 f9c9 	bl	8000298 <__aeabi_dsub>
 8007f06:	f806 4b01 	strb.w	r4, [r6], #1
 8007f0a:	9d03      	ldr	r5, [sp, #12]
 8007f0c:	eba6 040a 	sub.w	r4, r6, sl
 8007f10:	42a5      	cmp	r5, r4
 8007f12:	4602      	mov	r2, r0
 8007f14:	460b      	mov	r3, r1
 8007f16:	d133      	bne.n	8007f80 <_dtoa_r+0x6e0>
 8007f18:	f7f8 f9c0 	bl	800029c <__adddf3>
 8007f1c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f20:	4604      	mov	r4, r0
 8007f22:	460d      	mov	r5, r1
 8007f24:	f7f8 fe00 	bl	8000b28 <__aeabi_dcmpgt>
 8007f28:	b9c0      	cbnz	r0, 8007f5c <_dtoa_r+0x6bc>
 8007f2a:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007f2e:	4620      	mov	r0, r4
 8007f30:	4629      	mov	r1, r5
 8007f32:	f7f8 fdd1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f36:	b110      	cbz	r0, 8007f3e <_dtoa_r+0x69e>
 8007f38:	f018 0f01 	tst.w	r8, #1
 8007f3c:	d10e      	bne.n	8007f5c <_dtoa_r+0x6bc>
 8007f3e:	9902      	ldr	r1, [sp, #8]
 8007f40:	4648      	mov	r0, r9
 8007f42:	f000 fbbd 	bl	80086c0 <_Bfree>
 8007f46:	2300      	movs	r3, #0
 8007f48:	7033      	strb	r3, [r6, #0]
 8007f4a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8007f4c:	3701      	adds	r7, #1
 8007f4e:	601f      	str	r7, [r3, #0]
 8007f50:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007f52:	2b00      	cmp	r3, #0
 8007f54:	f000 824b 	beq.w	80083ee <_dtoa_r+0xb4e>
 8007f58:	601e      	str	r6, [r3, #0]
 8007f5a:	e248      	b.n	80083ee <_dtoa_r+0xb4e>
 8007f5c:	46b8      	mov	r8, r7
 8007f5e:	4633      	mov	r3, r6
 8007f60:	461e      	mov	r6, r3
 8007f62:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007f66:	2a39      	cmp	r2, #57	@ 0x39
 8007f68:	d106      	bne.n	8007f78 <_dtoa_r+0x6d8>
 8007f6a:	459a      	cmp	sl, r3
 8007f6c:	d1f8      	bne.n	8007f60 <_dtoa_r+0x6c0>
 8007f6e:	2230      	movs	r2, #48	@ 0x30
 8007f70:	f108 0801 	add.w	r8, r8, #1
 8007f74:	f88a 2000 	strb.w	r2, [sl]
 8007f78:	781a      	ldrb	r2, [r3, #0]
 8007f7a:	3201      	adds	r2, #1
 8007f7c:	701a      	strb	r2, [r3, #0]
 8007f7e:	e7a0      	b.n	8007ec2 <_dtoa_r+0x622>
 8007f80:	4b6f      	ldr	r3, [pc, #444]	@ (8008140 <_dtoa_r+0x8a0>)
 8007f82:	2200      	movs	r2, #0
 8007f84:	f7f8 fb40 	bl	8000608 <__aeabi_dmul>
 8007f88:	2200      	movs	r2, #0
 8007f8a:	2300      	movs	r3, #0
 8007f8c:	4604      	mov	r4, r0
 8007f8e:	460d      	mov	r5, r1
 8007f90:	f7f8 fda2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007f94:	2800      	cmp	r0, #0
 8007f96:	d09f      	beq.n	8007ed8 <_dtoa_r+0x638>
 8007f98:	e7d1      	b.n	8007f3e <_dtoa_r+0x69e>
 8007f9a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8007f9c:	2a00      	cmp	r2, #0
 8007f9e:	f000 80ea 	beq.w	8008176 <_dtoa_r+0x8d6>
 8007fa2:	9a07      	ldr	r2, [sp, #28]
 8007fa4:	2a01      	cmp	r2, #1
 8007fa6:	f300 80cd 	bgt.w	8008144 <_dtoa_r+0x8a4>
 8007faa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 8007fac:	2a00      	cmp	r2, #0
 8007fae:	f000 80c1 	beq.w	8008134 <_dtoa_r+0x894>
 8007fb2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 8007fb6:	9c08      	ldr	r4, [sp, #32]
 8007fb8:	9e00      	ldr	r6, [sp, #0]
 8007fba:	9a00      	ldr	r2, [sp, #0]
 8007fbc:	441a      	add	r2, r3
 8007fbe:	9200      	str	r2, [sp, #0]
 8007fc0:	9a06      	ldr	r2, [sp, #24]
 8007fc2:	2101      	movs	r1, #1
 8007fc4:	441a      	add	r2, r3
 8007fc6:	4648      	mov	r0, r9
 8007fc8:	9206      	str	r2, [sp, #24]
 8007fca:	f000 fc77 	bl	80088bc <__i2b>
 8007fce:	4605      	mov	r5, r0
 8007fd0:	b166      	cbz	r6, 8007fec <_dtoa_r+0x74c>
 8007fd2:	9b06      	ldr	r3, [sp, #24]
 8007fd4:	2b00      	cmp	r3, #0
 8007fd6:	dd09      	ble.n	8007fec <_dtoa_r+0x74c>
 8007fd8:	42b3      	cmp	r3, r6
 8007fda:	9a00      	ldr	r2, [sp, #0]
 8007fdc:	bfa8      	it	ge
 8007fde:	4633      	movge	r3, r6
 8007fe0:	1ad2      	subs	r2, r2, r3
 8007fe2:	9200      	str	r2, [sp, #0]
 8007fe4:	9a06      	ldr	r2, [sp, #24]
 8007fe6:	1af6      	subs	r6, r6, r3
 8007fe8:	1ad3      	subs	r3, r2, r3
 8007fea:	9306      	str	r3, [sp, #24]
 8007fec:	9b08      	ldr	r3, [sp, #32]
 8007fee:	b30b      	cbz	r3, 8008034 <_dtoa_r+0x794>
 8007ff0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ff2:	2b00      	cmp	r3, #0
 8007ff4:	f000 80c6 	beq.w	8008184 <_dtoa_r+0x8e4>
 8007ff8:	2c00      	cmp	r4, #0
 8007ffa:	f000 80c0 	beq.w	800817e <_dtoa_r+0x8de>
 8007ffe:	4629      	mov	r1, r5
 8008000:	4622      	mov	r2, r4
 8008002:	4648      	mov	r0, r9
 8008004:	f000 fd12 	bl	8008a2c <__pow5mult>
 8008008:	9a02      	ldr	r2, [sp, #8]
 800800a:	4601      	mov	r1, r0
 800800c:	4605      	mov	r5, r0
 800800e:	4648      	mov	r0, r9
 8008010:	f000 fc6a 	bl	80088e8 <__multiply>
 8008014:	9902      	ldr	r1, [sp, #8]
 8008016:	4680      	mov	r8, r0
 8008018:	4648      	mov	r0, r9
 800801a:	f000 fb51 	bl	80086c0 <_Bfree>
 800801e:	9b08      	ldr	r3, [sp, #32]
 8008020:	1b1b      	subs	r3, r3, r4
 8008022:	9308      	str	r3, [sp, #32]
 8008024:	f000 80b1 	beq.w	800818a <_dtoa_r+0x8ea>
 8008028:	9a08      	ldr	r2, [sp, #32]
 800802a:	4641      	mov	r1, r8
 800802c:	4648      	mov	r0, r9
 800802e:	f000 fcfd 	bl	8008a2c <__pow5mult>
 8008032:	9002      	str	r0, [sp, #8]
 8008034:	2101      	movs	r1, #1
 8008036:	4648      	mov	r0, r9
 8008038:	f000 fc40 	bl	80088bc <__i2b>
 800803c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800803e:	4604      	mov	r4, r0
 8008040:	2b00      	cmp	r3, #0
 8008042:	f000 81d8 	beq.w	80083f6 <_dtoa_r+0xb56>
 8008046:	461a      	mov	r2, r3
 8008048:	4601      	mov	r1, r0
 800804a:	4648      	mov	r0, r9
 800804c:	f000 fcee 	bl	8008a2c <__pow5mult>
 8008050:	9b07      	ldr	r3, [sp, #28]
 8008052:	2b01      	cmp	r3, #1
 8008054:	4604      	mov	r4, r0
 8008056:	f300 809f 	bgt.w	8008198 <_dtoa_r+0x8f8>
 800805a:	9b04      	ldr	r3, [sp, #16]
 800805c:	2b00      	cmp	r3, #0
 800805e:	f040 8097 	bne.w	8008190 <_dtoa_r+0x8f0>
 8008062:	9b05      	ldr	r3, [sp, #20]
 8008064:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8008068:	2b00      	cmp	r3, #0
 800806a:	f040 8093 	bne.w	8008194 <_dtoa_r+0x8f4>
 800806e:	9b05      	ldr	r3, [sp, #20]
 8008070:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8008074:	0d1b      	lsrs	r3, r3, #20
 8008076:	051b      	lsls	r3, r3, #20
 8008078:	b133      	cbz	r3, 8008088 <_dtoa_r+0x7e8>
 800807a:	9b00      	ldr	r3, [sp, #0]
 800807c:	3301      	adds	r3, #1
 800807e:	9300      	str	r3, [sp, #0]
 8008080:	9b06      	ldr	r3, [sp, #24]
 8008082:	3301      	adds	r3, #1
 8008084:	9306      	str	r3, [sp, #24]
 8008086:	2301      	movs	r3, #1
 8008088:	9308      	str	r3, [sp, #32]
 800808a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800808c:	2b00      	cmp	r3, #0
 800808e:	f000 81b8 	beq.w	8008402 <_dtoa_r+0xb62>
 8008092:	6923      	ldr	r3, [r4, #16]
 8008094:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8008098:	6918      	ldr	r0, [r3, #16]
 800809a:	f000 fbc3 	bl	8008824 <__hi0bits>
 800809e:	f1c0 0020 	rsb	r0, r0, #32
 80080a2:	9b06      	ldr	r3, [sp, #24]
 80080a4:	4418      	add	r0, r3
 80080a6:	f010 001f 	ands.w	r0, r0, #31
 80080aa:	f000 8082 	beq.w	80081b2 <_dtoa_r+0x912>
 80080ae:	f1c0 0320 	rsb	r3, r0, #32
 80080b2:	2b04      	cmp	r3, #4
 80080b4:	dd73      	ble.n	800819e <_dtoa_r+0x8fe>
 80080b6:	9b00      	ldr	r3, [sp, #0]
 80080b8:	f1c0 001c 	rsb	r0, r0, #28
 80080bc:	4403      	add	r3, r0
 80080be:	9300      	str	r3, [sp, #0]
 80080c0:	9b06      	ldr	r3, [sp, #24]
 80080c2:	4403      	add	r3, r0
 80080c4:	4406      	add	r6, r0
 80080c6:	9306      	str	r3, [sp, #24]
 80080c8:	9b00      	ldr	r3, [sp, #0]
 80080ca:	2b00      	cmp	r3, #0
 80080cc:	dd05      	ble.n	80080da <_dtoa_r+0x83a>
 80080ce:	9902      	ldr	r1, [sp, #8]
 80080d0:	461a      	mov	r2, r3
 80080d2:	4648      	mov	r0, r9
 80080d4:	f000 fd04 	bl	8008ae0 <__lshift>
 80080d8:	9002      	str	r0, [sp, #8]
 80080da:	9b06      	ldr	r3, [sp, #24]
 80080dc:	2b00      	cmp	r3, #0
 80080de:	dd05      	ble.n	80080ec <_dtoa_r+0x84c>
 80080e0:	4621      	mov	r1, r4
 80080e2:	461a      	mov	r2, r3
 80080e4:	4648      	mov	r0, r9
 80080e6:	f000 fcfb 	bl	8008ae0 <__lshift>
 80080ea:	4604      	mov	r4, r0
 80080ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80080ee:	2b00      	cmp	r3, #0
 80080f0:	d061      	beq.n	80081b6 <_dtoa_r+0x916>
 80080f2:	9802      	ldr	r0, [sp, #8]
 80080f4:	4621      	mov	r1, r4
 80080f6:	f000 fd5f 	bl	8008bb8 <__mcmp>
 80080fa:	2800      	cmp	r0, #0
 80080fc:	da5b      	bge.n	80081b6 <_dtoa_r+0x916>
 80080fe:	2300      	movs	r3, #0
 8008100:	9902      	ldr	r1, [sp, #8]
 8008102:	220a      	movs	r2, #10
 8008104:	4648      	mov	r0, r9
 8008106:	f000 fafd 	bl	8008704 <__multadd>
 800810a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800810c:	9002      	str	r0, [sp, #8]
 800810e:	f107 38ff 	add.w	r8, r7, #4294967295
 8008112:	2b00      	cmp	r3, #0
 8008114:	f000 8177 	beq.w	8008406 <_dtoa_r+0xb66>
 8008118:	4629      	mov	r1, r5
 800811a:	2300      	movs	r3, #0
 800811c:	220a      	movs	r2, #10
 800811e:	4648      	mov	r0, r9
 8008120:	f000 faf0 	bl	8008704 <__multadd>
 8008124:	f1bb 0f00 	cmp.w	fp, #0
 8008128:	4605      	mov	r5, r0
 800812a:	dc6f      	bgt.n	800820c <_dtoa_r+0x96c>
 800812c:	9b07      	ldr	r3, [sp, #28]
 800812e:	2b02      	cmp	r3, #2
 8008130:	dc49      	bgt.n	80081c6 <_dtoa_r+0x926>
 8008132:	e06b      	b.n	800820c <_dtoa_r+0x96c>
 8008134:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8008136:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800813a:	e73c      	b.n	8007fb6 <_dtoa_r+0x716>
 800813c:	3fe00000 	.word	0x3fe00000
 8008140:	40240000 	.word	0x40240000
 8008144:	9b03      	ldr	r3, [sp, #12]
 8008146:	1e5c      	subs	r4, r3, #1
 8008148:	9b08      	ldr	r3, [sp, #32]
 800814a:	42a3      	cmp	r3, r4
 800814c:	db09      	blt.n	8008162 <_dtoa_r+0x8c2>
 800814e:	1b1c      	subs	r4, r3, r4
 8008150:	9b03      	ldr	r3, [sp, #12]
 8008152:	2b00      	cmp	r3, #0
 8008154:	f6bf af30 	bge.w	8007fb8 <_dtoa_r+0x718>
 8008158:	9b00      	ldr	r3, [sp, #0]
 800815a:	9a03      	ldr	r2, [sp, #12]
 800815c:	1a9e      	subs	r6, r3, r2
 800815e:	2300      	movs	r3, #0
 8008160:	e72b      	b.n	8007fba <_dtoa_r+0x71a>
 8008162:	9b08      	ldr	r3, [sp, #32]
 8008164:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8008166:	9408      	str	r4, [sp, #32]
 8008168:	1ae3      	subs	r3, r4, r3
 800816a:	441a      	add	r2, r3
 800816c:	9e00      	ldr	r6, [sp, #0]
 800816e:	9b03      	ldr	r3, [sp, #12]
 8008170:	920d      	str	r2, [sp, #52]	@ 0x34
 8008172:	2400      	movs	r4, #0
 8008174:	e721      	b.n	8007fba <_dtoa_r+0x71a>
 8008176:	9c08      	ldr	r4, [sp, #32]
 8008178:	9e00      	ldr	r6, [sp, #0]
 800817a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800817c:	e728      	b.n	8007fd0 <_dtoa_r+0x730>
 800817e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8008182:	e751      	b.n	8008028 <_dtoa_r+0x788>
 8008184:	9a08      	ldr	r2, [sp, #32]
 8008186:	9902      	ldr	r1, [sp, #8]
 8008188:	e750      	b.n	800802c <_dtoa_r+0x78c>
 800818a:	f8cd 8008 	str.w	r8, [sp, #8]
 800818e:	e751      	b.n	8008034 <_dtoa_r+0x794>
 8008190:	2300      	movs	r3, #0
 8008192:	e779      	b.n	8008088 <_dtoa_r+0x7e8>
 8008194:	9b04      	ldr	r3, [sp, #16]
 8008196:	e777      	b.n	8008088 <_dtoa_r+0x7e8>
 8008198:	2300      	movs	r3, #0
 800819a:	9308      	str	r3, [sp, #32]
 800819c:	e779      	b.n	8008092 <_dtoa_r+0x7f2>
 800819e:	d093      	beq.n	80080c8 <_dtoa_r+0x828>
 80081a0:	9a00      	ldr	r2, [sp, #0]
 80081a2:	331c      	adds	r3, #28
 80081a4:	441a      	add	r2, r3
 80081a6:	9200      	str	r2, [sp, #0]
 80081a8:	9a06      	ldr	r2, [sp, #24]
 80081aa:	441a      	add	r2, r3
 80081ac:	441e      	add	r6, r3
 80081ae:	9206      	str	r2, [sp, #24]
 80081b0:	e78a      	b.n	80080c8 <_dtoa_r+0x828>
 80081b2:	4603      	mov	r3, r0
 80081b4:	e7f4      	b.n	80081a0 <_dtoa_r+0x900>
 80081b6:	9b03      	ldr	r3, [sp, #12]
 80081b8:	2b00      	cmp	r3, #0
 80081ba:	46b8      	mov	r8, r7
 80081bc:	dc20      	bgt.n	8008200 <_dtoa_r+0x960>
 80081be:	469b      	mov	fp, r3
 80081c0:	9b07      	ldr	r3, [sp, #28]
 80081c2:	2b02      	cmp	r3, #2
 80081c4:	dd1e      	ble.n	8008204 <_dtoa_r+0x964>
 80081c6:	f1bb 0f00 	cmp.w	fp, #0
 80081ca:	f47f adb1 	bne.w	8007d30 <_dtoa_r+0x490>
 80081ce:	4621      	mov	r1, r4
 80081d0:	465b      	mov	r3, fp
 80081d2:	2205      	movs	r2, #5
 80081d4:	4648      	mov	r0, r9
 80081d6:	f000 fa95 	bl	8008704 <__multadd>
 80081da:	4601      	mov	r1, r0
 80081dc:	4604      	mov	r4, r0
 80081de:	9802      	ldr	r0, [sp, #8]
 80081e0:	f000 fcea 	bl	8008bb8 <__mcmp>
 80081e4:	2800      	cmp	r0, #0
 80081e6:	f77f ada3 	ble.w	8007d30 <_dtoa_r+0x490>
 80081ea:	4656      	mov	r6, sl
 80081ec:	2331      	movs	r3, #49	@ 0x31
 80081ee:	f806 3b01 	strb.w	r3, [r6], #1
 80081f2:	f108 0801 	add.w	r8, r8, #1
 80081f6:	e59f      	b.n	8007d38 <_dtoa_r+0x498>
 80081f8:	9c03      	ldr	r4, [sp, #12]
 80081fa:	46b8      	mov	r8, r7
 80081fc:	4625      	mov	r5, r4
 80081fe:	e7f4      	b.n	80081ea <_dtoa_r+0x94a>
 8008200:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8008204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008206:	2b00      	cmp	r3, #0
 8008208:	f000 8101 	beq.w	800840e <_dtoa_r+0xb6e>
 800820c:	2e00      	cmp	r6, #0
 800820e:	dd05      	ble.n	800821c <_dtoa_r+0x97c>
 8008210:	4629      	mov	r1, r5
 8008212:	4632      	mov	r2, r6
 8008214:	4648      	mov	r0, r9
 8008216:	f000 fc63 	bl	8008ae0 <__lshift>
 800821a:	4605      	mov	r5, r0
 800821c:	9b08      	ldr	r3, [sp, #32]
 800821e:	2b00      	cmp	r3, #0
 8008220:	d05c      	beq.n	80082dc <_dtoa_r+0xa3c>
 8008222:	6869      	ldr	r1, [r5, #4]
 8008224:	4648      	mov	r0, r9
 8008226:	f000 fa0b 	bl	8008640 <_Balloc>
 800822a:	4606      	mov	r6, r0
 800822c:	b928      	cbnz	r0, 800823a <_dtoa_r+0x99a>
 800822e:	4b82      	ldr	r3, [pc, #520]	@ (8008438 <_dtoa_r+0xb98>)
 8008230:	4602      	mov	r2, r0
 8008232:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8008236:	f7ff bb4a 	b.w	80078ce <_dtoa_r+0x2e>
 800823a:	692a      	ldr	r2, [r5, #16]
 800823c:	3202      	adds	r2, #2
 800823e:	0092      	lsls	r2, r2, #2
 8008240:	f105 010c 	add.w	r1, r5, #12
 8008244:	300c      	adds	r0, #12
 8008246:	f002 f92f 	bl	800a4a8 <memcpy>
 800824a:	2201      	movs	r2, #1
 800824c:	4631      	mov	r1, r6
 800824e:	4648      	mov	r0, r9
 8008250:	f000 fc46 	bl	8008ae0 <__lshift>
 8008254:	f10a 0301 	add.w	r3, sl, #1
 8008258:	9300      	str	r3, [sp, #0]
 800825a:	eb0a 030b 	add.w	r3, sl, fp
 800825e:	9308      	str	r3, [sp, #32]
 8008260:	9b04      	ldr	r3, [sp, #16]
 8008262:	f003 0301 	and.w	r3, r3, #1
 8008266:	462f      	mov	r7, r5
 8008268:	9306      	str	r3, [sp, #24]
 800826a:	4605      	mov	r5, r0
 800826c:	9b00      	ldr	r3, [sp, #0]
 800826e:	9802      	ldr	r0, [sp, #8]
 8008270:	4621      	mov	r1, r4
 8008272:	f103 3bff 	add.w	fp, r3, #4294967295
 8008276:	f7ff fa8b 	bl	8007790 <quorem>
 800827a:	4603      	mov	r3, r0
 800827c:	3330      	adds	r3, #48	@ 0x30
 800827e:	9003      	str	r0, [sp, #12]
 8008280:	4639      	mov	r1, r7
 8008282:	9802      	ldr	r0, [sp, #8]
 8008284:	9309      	str	r3, [sp, #36]	@ 0x24
 8008286:	f000 fc97 	bl	8008bb8 <__mcmp>
 800828a:	462a      	mov	r2, r5
 800828c:	9004      	str	r0, [sp, #16]
 800828e:	4621      	mov	r1, r4
 8008290:	4648      	mov	r0, r9
 8008292:	f000 fcad 	bl	8008bf0 <__mdiff>
 8008296:	68c2      	ldr	r2, [r0, #12]
 8008298:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800829a:	4606      	mov	r6, r0
 800829c:	bb02      	cbnz	r2, 80082e0 <_dtoa_r+0xa40>
 800829e:	4601      	mov	r1, r0
 80082a0:	9802      	ldr	r0, [sp, #8]
 80082a2:	f000 fc89 	bl	8008bb8 <__mcmp>
 80082a6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082a8:	4602      	mov	r2, r0
 80082aa:	4631      	mov	r1, r6
 80082ac:	4648      	mov	r0, r9
 80082ae:	920c      	str	r2, [sp, #48]	@ 0x30
 80082b0:	9309      	str	r3, [sp, #36]	@ 0x24
 80082b2:	f000 fa05 	bl	80086c0 <_Bfree>
 80082b6:	9b07      	ldr	r3, [sp, #28]
 80082b8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 80082ba:	9e00      	ldr	r6, [sp, #0]
 80082bc:	ea42 0103 	orr.w	r1, r2, r3
 80082c0:	9b06      	ldr	r3, [sp, #24]
 80082c2:	4319      	orrs	r1, r3
 80082c4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80082c6:	d10d      	bne.n	80082e4 <_dtoa_r+0xa44>
 80082c8:	2b39      	cmp	r3, #57	@ 0x39
 80082ca:	d027      	beq.n	800831c <_dtoa_r+0xa7c>
 80082cc:	9a04      	ldr	r2, [sp, #16]
 80082ce:	2a00      	cmp	r2, #0
 80082d0:	dd01      	ble.n	80082d6 <_dtoa_r+0xa36>
 80082d2:	9b03      	ldr	r3, [sp, #12]
 80082d4:	3331      	adds	r3, #49	@ 0x31
 80082d6:	f88b 3000 	strb.w	r3, [fp]
 80082da:	e52e      	b.n	8007d3a <_dtoa_r+0x49a>
 80082dc:	4628      	mov	r0, r5
 80082de:	e7b9      	b.n	8008254 <_dtoa_r+0x9b4>
 80082e0:	2201      	movs	r2, #1
 80082e2:	e7e2      	b.n	80082aa <_dtoa_r+0xa0a>
 80082e4:	9904      	ldr	r1, [sp, #16]
 80082e6:	2900      	cmp	r1, #0
 80082e8:	db04      	blt.n	80082f4 <_dtoa_r+0xa54>
 80082ea:	9807      	ldr	r0, [sp, #28]
 80082ec:	4301      	orrs	r1, r0
 80082ee:	9806      	ldr	r0, [sp, #24]
 80082f0:	4301      	orrs	r1, r0
 80082f2:	d120      	bne.n	8008336 <_dtoa_r+0xa96>
 80082f4:	2a00      	cmp	r2, #0
 80082f6:	ddee      	ble.n	80082d6 <_dtoa_r+0xa36>
 80082f8:	9902      	ldr	r1, [sp, #8]
 80082fa:	9300      	str	r3, [sp, #0]
 80082fc:	2201      	movs	r2, #1
 80082fe:	4648      	mov	r0, r9
 8008300:	f000 fbee 	bl	8008ae0 <__lshift>
 8008304:	4621      	mov	r1, r4
 8008306:	9002      	str	r0, [sp, #8]
 8008308:	f000 fc56 	bl	8008bb8 <__mcmp>
 800830c:	2800      	cmp	r0, #0
 800830e:	9b00      	ldr	r3, [sp, #0]
 8008310:	dc02      	bgt.n	8008318 <_dtoa_r+0xa78>
 8008312:	d1e0      	bne.n	80082d6 <_dtoa_r+0xa36>
 8008314:	07da      	lsls	r2, r3, #31
 8008316:	d5de      	bpl.n	80082d6 <_dtoa_r+0xa36>
 8008318:	2b39      	cmp	r3, #57	@ 0x39
 800831a:	d1da      	bne.n	80082d2 <_dtoa_r+0xa32>
 800831c:	2339      	movs	r3, #57	@ 0x39
 800831e:	f88b 3000 	strb.w	r3, [fp]
 8008322:	4633      	mov	r3, r6
 8008324:	461e      	mov	r6, r3
 8008326:	3b01      	subs	r3, #1
 8008328:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 800832c:	2a39      	cmp	r2, #57	@ 0x39
 800832e:	d04e      	beq.n	80083ce <_dtoa_r+0xb2e>
 8008330:	3201      	adds	r2, #1
 8008332:	701a      	strb	r2, [r3, #0]
 8008334:	e501      	b.n	8007d3a <_dtoa_r+0x49a>
 8008336:	2a00      	cmp	r2, #0
 8008338:	dd03      	ble.n	8008342 <_dtoa_r+0xaa2>
 800833a:	2b39      	cmp	r3, #57	@ 0x39
 800833c:	d0ee      	beq.n	800831c <_dtoa_r+0xa7c>
 800833e:	3301      	adds	r3, #1
 8008340:	e7c9      	b.n	80082d6 <_dtoa_r+0xa36>
 8008342:	9a00      	ldr	r2, [sp, #0]
 8008344:	9908      	ldr	r1, [sp, #32]
 8008346:	f802 3c01 	strb.w	r3, [r2, #-1]
 800834a:	428a      	cmp	r2, r1
 800834c:	d028      	beq.n	80083a0 <_dtoa_r+0xb00>
 800834e:	9902      	ldr	r1, [sp, #8]
 8008350:	2300      	movs	r3, #0
 8008352:	220a      	movs	r2, #10
 8008354:	4648      	mov	r0, r9
 8008356:	f000 f9d5 	bl	8008704 <__multadd>
 800835a:	42af      	cmp	r7, r5
 800835c:	9002      	str	r0, [sp, #8]
 800835e:	f04f 0300 	mov.w	r3, #0
 8008362:	f04f 020a 	mov.w	r2, #10
 8008366:	4639      	mov	r1, r7
 8008368:	4648      	mov	r0, r9
 800836a:	d107      	bne.n	800837c <_dtoa_r+0xadc>
 800836c:	f000 f9ca 	bl	8008704 <__multadd>
 8008370:	4607      	mov	r7, r0
 8008372:	4605      	mov	r5, r0
 8008374:	9b00      	ldr	r3, [sp, #0]
 8008376:	3301      	adds	r3, #1
 8008378:	9300      	str	r3, [sp, #0]
 800837a:	e777      	b.n	800826c <_dtoa_r+0x9cc>
 800837c:	f000 f9c2 	bl	8008704 <__multadd>
 8008380:	4629      	mov	r1, r5
 8008382:	4607      	mov	r7, r0
 8008384:	2300      	movs	r3, #0
 8008386:	220a      	movs	r2, #10
 8008388:	4648      	mov	r0, r9
 800838a:	f000 f9bb 	bl	8008704 <__multadd>
 800838e:	4605      	mov	r5, r0
 8008390:	e7f0      	b.n	8008374 <_dtoa_r+0xad4>
 8008392:	f1bb 0f00 	cmp.w	fp, #0
 8008396:	bfcc      	ite	gt
 8008398:	465e      	movgt	r6, fp
 800839a:	2601      	movle	r6, #1
 800839c:	4456      	add	r6, sl
 800839e:	2700      	movs	r7, #0
 80083a0:	9902      	ldr	r1, [sp, #8]
 80083a2:	9300      	str	r3, [sp, #0]
 80083a4:	2201      	movs	r2, #1
 80083a6:	4648      	mov	r0, r9
 80083a8:	f000 fb9a 	bl	8008ae0 <__lshift>
 80083ac:	4621      	mov	r1, r4
 80083ae:	9002      	str	r0, [sp, #8]
 80083b0:	f000 fc02 	bl	8008bb8 <__mcmp>
 80083b4:	2800      	cmp	r0, #0
 80083b6:	dcb4      	bgt.n	8008322 <_dtoa_r+0xa82>
 80083b8:	d102      	bne.n	80083c0 <_dtoa_r+0xb20>
 80083ba:	9b00      	ldr	r3, [sp, #0]
 80083bc:	07db      	lsls	r3, r3, #31
 80083be:	d4b0      	bmi.n	8008322 <_dtoa_r+0xa82>
 80083c0:	4633      	mov	r3, r6
 80083c2:	461e      	mov	r6, r3
 80083c4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 80083c8:	2a30      	cmp	r2, #48	@ 0x30
 80083ca:	d0fa      	beq.n	80083c2 <_dtoa_r+0xb22>
 80083cc:	e4b5      	b.n	8007d3a <_dtoa_r+0x49a>
 80083ce:	459a      	cmp	sl, r3
 80083d0:	d1a8      	bne.n	8008324 <_dtoa_r+0xa84>
 80083d2:	2331      	movs	r3, #49	@ 0x31
 80083d4:	f108 0801 	add.w	r8, r8, #1
 80083d8:	f88a 3000 	strb.w	r3, [sl]
 80083dc:	e4ad      	b.n	8007d3a <_dtoa_r+0x49a>
 80083de:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 80083e0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 800843c <_dtoa_r+0xb9c>
 80083e4:	b11b      	cbz	r3, 80083ee <_dtoa_r+0xb4e>
 80083e6:	f10a 0308 	add.w	r3, sl, #8
 80083ea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 80083ec:	6013      	str	r3, [r2, #0]
 80083ee:	4650      	mov	r0, sl
 80083f0:	b017      	add	sp, #92	@ 0x5c
 80083f2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80083f6:	9b07      	ldr	r3, [sp, #28]
 80083f8:	2b01      	cmp	r3, #1
 80083fa:	f77f ae2e 	ble.w	800805a <_dtoa_r+0x7ba>
 80083fe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8008400:	9308      	str	r3, [sp, #32]
 8008402:	2001      	movs	r0, #1
 8008404:	e64d      	b.n	80080a2 <_dtoa_r+0x802>
 8008406:	f1bb 0f00 	cmp.w	fp, #0
 800840a:	f77f aed9 	ble.w	80081c0 <_dtoa_r+0x920>
 800840e:	4656      	mov	r6, sl
 8008410:	9802      	ldr	r0, [sp, #8]
 8008412:	4621      	mov	r1, r4
 8008414:	f7ff f9bc 	bl	8007790 <quorem>
 8008418:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 800841c:	f806 3b01 	strb.w	r3, [r6], #1
 8008420:	eba6 020a 	sub.w	r2, r6, sl
 8008424:	4593      	cmp	fp, r2
 8008426:	ddb4      	ble.n	8008392 <_dtoa_r+0xaf2>
 8008428:	9902      	ldr	r1, [sp, #8]
 800842a:	2300      	movs	r3, #0
 800842c:	220a      	movs	r2, #10
 800842e:	4648      	mov	r0, r9
 8008430:	f000 f968 	bl	8008704 <__multadd>
 8008434:	9002      	str	r0, [sp, #8]
 8008436:	e7eb      	b.n	8008410 <_dtoa_r+0xb70>
 8008438:	0800afe1 	.word	0x0800afe1
 800843c:	0800af65 	.word	0x0800af65

08008440 <_free_r>:
 8008440:	b538      	push	{r3, r4, r5, lr}
 8008442:	4605      	mov	r5, r0
 8008444:	2900      	cmp	r1, #0
 8008446:	d041      	beq.n	80084cc <_free_r+0x8c>
 8008448:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800844c:	1f0c      	subs	r4, r1, #4
 800844e:	2b00      	cmp	r3, #0
 8008450:	bfb8      	it	lt
 8008452:	18e4      	addlt	r4, r4, r3
 8008454:	f000 f8e8 	bl	8008628 <__malloc_lock>
 8008458:	4a1d      	ldr	r2, [pc, #116]	@ (80084d0 <_free_r+0x90>)
 800845a:	6813      	ldr	r3, [r2, #0]
 800845c:	b933      	cbnz	r3, 800846c <_free_r+0x2c>
 800845e:	6063      	str	r3, [r4, #4]
 8008460:	6014      	str	r4, [r2, #0]
 8008462:	4628      	mov	r0, r5
 8008464:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008468:	f000 b8e4 	b.w	8008634 <__malloc_unlock>
 800846c:	42a3      	cmp	r3, r4
 800846e:	d908      	bls.n	8008482 <_free_r+0x42>
 8008470:	6820      	ldr	r0, [r4, #0]
 8008472:	1821      	adds	r1, r4, r0
 8008474:	428b      	cmp	r3, r1
 8008476:	bf01      	itttt	eq
 8008478:	6819      	ldreq	r1, [r3, #0]
 800847a:	685b      	ldreq	r3, [r3, #4]
 800847c:	1809      	addeq	r1, r1, r0
 800847e:	6021      	streq	r1, [r4, #0]
 8008480:	e7ed      	b.n	800845e <_free_r+0x1e>
 8008482:	461a      	mov	r2, r3
 8008484:	685b      	ldr	r3, [r3, #4]
 8008486:	b10b      	cbz	r3, 800848c <_free_r+0x4c>
 8008488:	42a3      	cmp	r3, r4
 800848a:	d9fa      	bls.n	8008482 <_free_r+0x42>
 800848c:	6811      	ldr	r1, [r2, #0]
 800848e:	1850      	adds	r0, r2, r1
 8008490:	42a0      	cmp	r0, r4
 8008492:	d10b      	bne.n	80084ac <_free_r+0x6c>
 8008494:	6820      	ldr	r0, [r4, #0]
 8008496:	4401      	add	r1, r0
 8008498:	1850      	adds	r0, r2, r1
 800849a:	4283      	cmp	r3, r0
 800849c:	6011      	str	r1, [r2, #0]
 800849e:	d1e0      	bne.n	8008462 <_free_r+0x22>
 80084a0:	6818      	ldr	r0, [r3, #0]
 80084a2:	685b      	ldr	r3, [r3, #4]
 80084a4:	6053      	str	r3, [r2, #4]
 80084a6:	4408      	add	r0, r1
 80084a8:	6010      	str	r0, [r2, #0]
 80084aa:	e7da      	b.n	8008462 <_free_r+0x22>
 80084ac:	d902      	bls.n	80084b4 <_free_r+0x74>
 80084ae:	230c      	movs	r3, #12
 80084b0:	602b      	str	r3, [r5, #0]
 80084b2:	e7d6      	b.n	8008462 <_free_r+0x22>
 80084b4:	6820      	ldr	r0, [r4, #0]
 80084b6:	1821      	adds	r1, r4, r0
 80084b8:	428b      	cmp	r3, r1
 80084ba:	bf04      	itt	eq
 80084bc:	6819      	ldreq	r1, [r3, #0]
 80084be:	685b      	ldreq	r3, [r3, #4]
 80084c0:	6063      	str	r3, [r4, #4]
 80084c2:	bf04      	itt	eq
 80084c4:	1809      	addeq	r1, r1, r0
 80084c6:	6021      	streq	r1, [r4, #0]
 80084c8:	6054      	str	r4, [r2, #4]
 80084ca:	e7ca      	b.n	8008462 <_free_r+0x22>
 80084cc:	bd38      	pop	{r3, r4, r5, pc}
 80084ce:	bf00      	nop
 80084d0:	20000924 	.word	0x20000924

080084d4 <malloc>:
 80084d4:	4b02      	ldr	r3, [pc, #8]	@ (80084e0 <malloc+0xc>)
 80084d6:	4601      	mov	r1, r0
 80084d8:	6818      	ldr	r0, [r3, #0]
 80084da:	f000 b825 	b.w	8008528 <_malloc_r>
 80084de:	bf00      	nop
 80084e0:	20000034 	.word	0x20000034

080084e4 <sbrk_aligned>:
 80084e4:	b570      	push	{r4, r5, r6, lr}
 80084e6:	4e0f      	ldr	r6, [pc, #60]	@ (8008524 <sbrk_aligned+0x40>)
 80084e8:	460c      	mov	r4, r1
 80084ea:	6831      	ldr	r1, [r6, #0]
 80084ec:	4605      	mov	r5, r0
 80084ee:	b911      	cbnz	r1, 80084f6 <sbrk_aligned+0x12>
 80084f0:	f001 ffca 	bl	800a488 <_sbrk_r>
 80084f4:	6030      	str	r0, [r6, #0]
 80084f6:	4621      	mov	r1, r4
 80084f8:	4628      	mov	r0, r5
 80084fa:	f001 ffc5 	bl	800a488 <_sbrk_r>
 80084fe:	1c43      	adds	r3, r0, #1
 8008500:	d103      	bne.n	800850a <sbrk_aligned+0x26>
 8008502:	f04f 34ff 	mov.w	r4, #4294967295
 8008506:	4620      	mov	r0, r4
 8008508:	bd70      	pop	{r4, r5, r6, pc}
 800850a:	1cc4      	adds	r4, r0, #3
 800850c:	f024 0403 	bic.w	r4, r4, #3
 8008510:	42a0      	cmp	r0, r4
 8008512:	d0f8      	beq.n	8008506 <sbrk_aligned+0x22>
 8008514:	1a21      	subs	r1, r4, r0
 8008516:	4628      	mov	r0, r5
 8008518:	f001 ffb6 	bl	800a488 <_sbrk_r>
 800851c:	3001      	adds	r0, #1
 800851e:	d1f2      	bne.n	8008506 <sbrk_aligned+0x22>
 8008520:	e7ef      	b.n	8008502 <sbrk_aligned+0x1e>
 8008522:	bf00      	nop
 8008524:	20000920 	.word	0x20000920

08008528 <_malloc_r>:
 8008528:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800852c:	1ccd      	adds	r5, r1, #3
 800852e:	f025 0503 	bic.w	r5, r5, #3
 8008532:	3508      	adds	r5, #8
 8008534:	2d0c      	cmp	r5, #12
 8008536:	bf38      	it	cc
 8008538:	250c      	movcc	r5, #12
 800853a:	2d00      	cmp	r5, #0
 800853c:	4606      	mov	r6, r0
 800853e:	db01      	blt.n	8008544 <_malloc_r+0x1c>
 8008540:	42a9      	cmp	r1, r5
 8008542:	d904      	bls.n	800854e <_malloc_r+0x26>
 8008544:	230c      	movs	r3, #12
 8008546:	6033      	str	r3, [r6, #0]
 8008548:	2000      	movs	r0, #0
 800854a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800854e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8008624 <_malloc_r+0xfc>
 8008552:	f000 f869 	bl	8008628 <__malloc_lock>
 8008556:	f8d8 3000 	ldr.w	r3, [r8]
 800855a:	461c      	mov	r4, r3
 800855c:	bb44      	cbnz	r4, 80085b0 <_malloc_r+0x88>
 800855e:	4629      	mov	r1, r5
 8008560:	4630      	mov	r0, r6
 8008562:	f7ff ffbf 	bl	80084e4 <sbrk_aligned>
 8008566:	1c43      	adds	r3, r0, #1
 8008568:	4604      	mov	r4, r0
 800856a:	d158      	bne.n	800861e <_malloc_r+0xf6>
 800856c:	f8d8 4000 	ldr.w	r4, [r8]
 8008570:	4627      	mov	r7, r4
 8008572:	2f00      	cmp	r7, #0
 8008574:	d143      	bne.n	80085fe <_malloc_r+0xd6>
 8008576:	2c00      	cmp	r4, #0
 8008578:	d04b      	beq.n	8008612 <_malloc_r+0xea>
 800857a:	6823      	ldr	r3, [r4, #0]
 800857c:	4639      	mov	r1, r7
 800857e:	4630      	mov	r0, r6
 8008580:	eb04 0903 	add.w	r9, r4, r3
 8008584:	f001 ff80 	bl	800a488 <_sbrk_r>
 8008588:	4581      	cmp	r9, r0
 800858a:	d142      	bne.n	8008612 <_malloc_r+0xea>
 800858c:	6821      	ldr	r1, [r4, #0]
 800858e:	1a6d      	subs	r5, r5, r1
 8008590:	4629      	mov	r1, r5
 8008592:	4630      	mov	r0, r6
 8008594:	f7ff ffa6 	bl	80084e4 <sbrk_aligned>
 8008598:	3001      	adds	r0, #1
 800859a:	d03a      	beq.n	8008612 <_malloc_r+0xea>
 800859c:	6823      	ldr	r3, [r4, #0]
 800859e:	442b      	add	r3, r5
 80085a0:	6023      	str	r3, [r4, #0]
 80085a2:	f8d8 3000 	ldr.w	r3, [r8]
 80085a6:	685a      	ldr	r2, [r3, #4]
 80085a8:	bb62      	cbnz	r2, 8008604 <_malloc_r+0xdc>
 80085aa:	f8c8 7000 	str.w	r7, [r8]
 80085ae:	e00f      	b.n	80085d0 <_malloc_r+0xa8>
 80085b0:	6822      	ldr	r2, [r4, #0]
 80085b2:	1b52      	subs	r2, r2, r5
 80085b4:	d420      	bmi.n	80085f8 <_malloc_r+0xd0>
 80085b6:	2a0b      	cmp	r2, #11
 80085b8:	d917      	bls.n	80085ea <_malloc_r+0xc2>
 80085ba:	1961      	adds	r1, r4, r5
 80085bc:	42a3      	cmp	r3, r4
 80085be:	6025      	str	r5, [r4, #0]
 80085c0:	bf18      	it	ne
 80085c2:	6059      	strne	r1, [r3, #4]
 80085c4:	6863      	ldr	r3, [r4, #4]
 80085c6:	bf08      	it	eq
 80085c8:	f8c8 1000 	streq.w	r1, [r8]
 80085cc:	5162      	str	r2, [r4, r5]
 80085ce:	604b      	str	r3, [r1, #4]
 80085d0:	4630      	mov	r0, r6
 80085d2:	f000 f82f 	bl	8008634 <__malloc_unlock>
 80085d6:	f104 000b 	add.w	r0, r4, #11
 80085da:	1d23      	adds	r3, r4, #4
 80085dc:	f020 0007 	bic.w	r0, r0, #7
 80085e0:	1ac2      	subs	r2, r0, r3
 80085e2:	bf1c      	itt	ne
 80085e4:	1a1b      	subne	r3, r3, r0
 80085e6:	50a3      	strne	r3, [r4, r2]
 80085e8:	e7af      	b.n	800854a <_malloc_r+0x22>
 80085ea:	6862      	ldr	r2, [r4, #4]
 80085ec:	42a3      	cmp	r3, r4
 80085ee:	bf0c      	ite	eq
 80085f0:	f8c8 2000 	streq.w	r2, [r8]
 80085f4:	605a      	strne	r2, [r3, #4]
 80085f6:	e7eb      	b.n	80085d0 <_malloc_r+0xa8>
 80085f8:	4623      	mov	r3, r4
 80085fa:	6864      	ldr	r4, [r4, #4]
 80085fc:	e7ae      	b.n	800855c <_malloc_r+0x34>
 80085fe:	463c      	mov	r4, r7
 8008600:	687f      	ldr	r7, [r7, #4]
 8008602:	e7b6      	b.n	8008572 <_malloc_r+0x4a>
 8008604:	461a      	mov	r2, r3
 8008606:	685b      	ldr	r3, [r3, #4]
 8008608:	42a3      	cmp	r3, r4
 800860a:	d1fb      	bne.n	8008604 <_malloc_r+0xdc>
 800860c:	2300      	movs	r3, #0
 800860e:	6053      	str	r3, [r2, #4]
 8008610:	e7de      	b.n	80085d0 <_malloc_r+0xa8>
 8008612:	230c      	movs	r3, #12
 8008614:	6033      	str	r3, [r6, #0]
 8008616:	4630      	mov	r0, r6
 8008618:	f000 f80c 	bl	8008634 <__malloc_unlock>
 800861c:	e794      	b.n	8008548 <_malloc_r+0x20>
 800861e:	6005      	str	r5, [r0, #0]
 8008620:	e7d6      	b.n	80085d0 <_malloc_r+0xa8>
 8008622:	bf00      	nop
 8008624:	20000924 	.word	0x20000924

08008628 <__malloc_lock>:
 8008628:	4801      	ldr	r0, [pc, #4]	@ (8008630 <__malloc_lock+0x8>)
 800862a:	f7ff b8a8 	b.w	800777e <__retarget_lock_acquire_recursive>
 800862e:	bf00      	nop
 8008630:	2000091c 	.word	0x2000091c

08008634 <__malloc_unlock>:
 8008634:	4801      	ldr	r0, [pc, #4]	@ (800863c <__malloc_unlock+0x8>)
 8008636:	f7ff b8a3 	b.w	8007780 <__retarget_lock_release_recursive>
 800863a:	bf00      	nop
 800863c:	2000091c 	.word	0x2000091c

08008640 <_Balloc>:
 8008640:	b570      	push	{r4, r5, r6, lr}
 8008642:	69c6      	ldr	r6, [r0, #28]
 8008644:	4604      	mov	r4, r0
 8008646:	460d      	mov	r5, r1
 8008648:	b976      	cbnz	r6, 8008668 <_Balloc+0x28>
 800864a:	2010      	movs	r0, #16
 800864c:	f7ff ff42 	bl	80084d4 <malloc>
 8008650:	4602      	mov	r2, r0
 8008652:	61e0      	str	r0, [r4, #28]
 8008654:	b920      	cbnz	r0, 8008660 <_Balloc+0x20>
 8008656:	4b18      	ldr	r3, [pc, #96]	@ (80086b8 <_Balloc+0x78>)
 8008658:	4818      	ldr	r0, [pc, #96]	@ (80086bc <_Balloc+0x7c>)
 800865a:	216b      	movs	r1, #107	@ 0x6b
 800865c:	f001 ff3c 	bl	800a4d8 <__assert_func>
 8008660:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8008664:	6006      	str	r6, [r0, #0]
 8008666:	60c6      	str	r6, [r0, #12]
 8008668:	69e6      	ldr	r6, [r4, #28]
 800866a:	68f3      	ldr	r3, [r6, #12]
 800866c:	b183      	cbz	r3, 8008690 <_Balloc+0x50>
 800866e:	69e3      	ldr	r3, [r4, #28]
 8008670:	68db      	ldr	r3, [r3, #12]
 8008672:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8008676:	b9b8      	cbnz	r0, 80086a8 <_Balloc+0x68>
 8008678:	2101      	movs	r1, #1
 800867a:	fa01 f605 	lsl.w	r6, r1, r5
 800867e:	1d72      	adds	r2, r6, #5
 8008680:	0092      	lsls	r2, r2, #2
 8008682:	4620      	mov	r0, r4
 8008684:	f001 ff46 	bl	800a514 <_calloc_r>
 8008688:	b160      	cbz	r0, 80086a4 <_Balloc+0x64>
 800868a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 800868e:	e00e      	b.n	80086ae <_Balloc+0x6e>
 8008690:	2221      	movs	r2, #33	@ 0x21
 8008692:	2104      	movs	r1, #4
 8008694:	4620      	mov	r0, r4
 8008696:	f001 ff3d 	bl	800a514 <_calloc_r>
 800869a:	69e3      	ldr	r3, [r4, #28]
 800869c:	60f0      	str	r0, [r6, #12]
 800869e:	68db      	ldr	r3, [r3, #12]
 80086a0:	2b00      	cmp	r3, #0
 80086a2:	d1e4      	bne.n	800866e <_Balloc+0x2e>
 80086a4:	2000      	movs	r0, #0
 80086a6:	bd70      	pop	{r4, r5, r6, pc}
 80086a8:	6802      	ldr	r2, [r0, #0]
 80086aa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 80086ae:	2300      	movs	r3, #0
 80086b0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 80086b4:	e7f7      	b.n	80086a6 <_Balloc+0x66>
 80086b6:	bf00      	nop
 80086b8:	0800af72 	.word	0x0800af72
 80086bc:	0800aff2 	.word	0x0800aff2

080086c0 <_Bfree>:
 80086c0:	b570      	push	{r4, r5, r6, lr}
 80086c2:	69c6      	ldr	r6, [r0, #28]
 80086c4:	4605      	mov	r5, r0
 80086c6:	460c      	mov	r4, r1
 80086c8:	b976      	cbnz	r6, 80086e8 <_Bfree+0x28>
 80086ca:	2010      	movs	r0, #16
 80086cc:	f7ff ff02 	bl	80084d4 <malloc>
 80086d0:	4602      	mov	r2, r0
 80086d2:	61e8      	str	r0, [r5, #28]
 80086d4:	b920      	cbnz	r0, 80086e0 <_Bfree+0x20>
 80086d6:	4b09      	ldr	r3, [pc, #36]	@ (80086fc <_Bfree+0x3c>)
 80086d8:	4809      	ldr	r0, [pc, #36]	@ (8008700 <_Bfree+0x40>)
 80086da:	218f      	movs	r1, #143	@ 0x8f
 80086dc:	f001 fefc 	bl	800a4d8 <__assert_func>
 80086e0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 80086e4:	6006      	str	r6, [r0, #0]
 80086e6:	60c6      	str	r6, [r0, #12]
 80086e8:	b13c      	cbz	r4, 80086fa <_Bfree+0x3a>
 80086ea:	69eb      	ldr	r3, [r5, #28]
 80086ec:	6862      	ldr	r2, [r4, #4]
 80086ee:	68db      	ldr	r3, [r3, #12]
 80086f0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 80086f4:	6021      	str	r1, [r4, #0]
 80086f6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 80086fa:	bd70      	pop	{r4, r5, r6, pc}
 80086fc:	0800af72 	.word	0x0800af72
 8008700:	0800aff2 	.word	0x0800aff2

08008704 <__multadd>:
 8008704:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008708:	690d      	ldr	r5, [r1, #16]
 800870a:	4607      	mov	r7, r0
 800870c:	460c      	mov	r4, r1
 800870e:	461e      	mov	r6, r3
 8008710:	f101 0c14 	add.w	ip, r1, #20
 8008714:	2000      	movs	r0, #0
 8008716:	f8dc 3000 	ldr.w	r3, [ip]
 800871a:	b299      	uxth	r1, r3
 800871c:	fb02 6101 	mla	r1, r2, r1, r6
 8008720:	0c1e      	lsrs	r6, r3, #16
 8008722:	0c0b      	lsrs	r3, r1, #16
 8008724:	fb02 3306 	mla	r3, r2, r6, r3
 8008728:	b289      	uxth	r1, r1
 800872a:	3001      	adds	r0, #1
 800872c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8008730:	4285      	cmp	r5, r0
 8008732:	f84c 1b04 	str.w	r1, [ip], #4
 8008736:	ea4f 4613 	mov.w	r6, r3, lsr #16
 800873a:	dcec      	bgt.n	8008716 <__multadd+0x12>
 800873c:	b30e      	cbz	r6, 8008782 <__multadd+0x7e>
 800873e:	68a3      	ldr	r3, [r4, #8]
 8008740:	42ab      	cmp	r3, r5
 8008742:	dc19      	bgt.n	8008778 <__multadd+0x74>
 8008744:	6861      	ldr	r1, [r4, #4]
 8008746:	4638      	mov	r0, r7
 8008748:	3101      	adds	r1, #1
 800874a:	f7ff ff79 	bl	8008640 <_Balloc>
 800874e:	4680      	mov	r8, r0
 8008750:	b928      	cbnz	r0, 800875e <__multadd+0x5a>
 8008752:	4602      	mov	r2, r0
 8008754:	4b0c      	ldr	r3, [pc, #48]	@ (8008788 <__multadd+0x84>)
 8008756:	480d      	ldr	r0, [pc, #52]	@ (800878c <__multadd+0x88>)
 8008758:	21ba      	movs	r1, #186	@ 0xba
 800875a:	f001 febd 	bl	800a4d8 <__assert_func>
 800875e:	6922      	ldr	r2, [r4, #16]
 8008760:	3202      	adds	r2, #2
 8008762:	f104 010c 	add.w	r1, r4, #12
 8008766:	0092      	lsls	r2, r2, #2
 8008768:	300c      	adds	r0, #12
 800876a:	f001 fe9d 	bl	800a4a8 <memcpy>
 800876e:	4621      	mov	r1, r4
 8008770:	4638      	mov	r0, r7
 8008772:	f7ff ffa5 	bl	80086c0 <_Bfree>
 8008776:	4644      	mov	r4, r8
 8008778:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 800877c:	3501      	adds	r5, #1
 800877e:	615e      	str	r6, [r3, #20]
 8008780:	6125      	str	r5, [r4, #16]
 8008782:	4620      	mov	r0, r4
 8008784:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008788:	0800afe1 	.word	0x0800afe1
 800878c:	0800aff2 	.word	0x0800aff2

08008790 <__s2b>:
 8008790:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008794:	460c      	mov	r4, r1
 8008796:	4615      	mov	r5, r2
 8008798:	461f      	mov	r7, r3
 800879a:	2209      	movs	r2, #9
 800879c:	3308      	adds	r3, #8
 800879e:	4606      	mov	r6, r0
 80087a0:	fb93 f3f2 	sdiv	r3, r3, r2
 80087a4:	2100      	movs	r1, #0
 80087a6:	2201      	movs	r2, #1
 80087a8:	429a      	cmp	r2, r3
 80087aa:	db09      	blt.n	80087c0 <__s2b+0x30>
 80087ac:	4630      	mov	r0, r6
 80087ae:	f7ff ff47 	bl	8008640 <_Balloc>
 80087b2:	b940      	cbnz	r0, 80087c6 <__s2b+0x36>
 80087b4:	4602      	mov	r2, r0
 80087b6:	4b19      	ldr	r3, [pc, #100]	@ (800881c <__s2b+0x8c>)
 80087b8:	4819      	ldr	r0, [pc, #100]	@ (8008820 <__s2b+0x90>)
 80087ba:	21d3      	movs	r1, #211	@ 0xd3
 80087bc:	f001 fe8c 	bl	800a4d8 <__assert_func>
 80087c0:	0052      	lsls	r2, r2, #1
 80087c2:	3101      	adds	r1, #1
 80087c4:	e7f0      	b.n	80087a8 <__s2b+0x18>
 80087c6:	9b08      	ldr	r3, [sp, #32]
 80087c8:	6143      	str	r3, [r0, #20]
 80087ca:	2d09      	cmp	r5, #9
 80087cc:	f04f 0301 	mov.w	r3, #1
 80087d0:	6103      	str	r3, [r0, #16]
 80087d2:	dd16      	ble.n	8008802 <__s2b+0x72>
 80087d4:	f104 0909 	add.w	r9, r4, #9
 80087d8:	46c8      	mov	r8, r9
 80087da:	442c      	add	r4, r5
 80087dc:	f818 3b01 	ldrb.w	r3, [r8], #1
 80087e0:	4601      	mov	r1, r0
 80087e2:	3b30      	subs	r3, #48	@ 0x30
 80087e4:	220a      	movs	r2, #10
 80087e6:	4630      	mov	r0, r6
 80087e8:	f7ff ff8c 	bl	8008704 <__multadd>
 80087ec:	45a0      	cmp	r8, r4
 80087ee:	d1f5      	bne.n	80087dc <__s2b+0x4c>
 80087f0:	f1a5 0408 	sub.w	r4, r5, #8
 80087f4:	444c      	add	r4, r9
 80087f6:	1b2d      	subs	r5, r5, r4
 80087f8:	1963      	adds	r3, r4, r5
 80087fa:	42bb      	cmp	r3, r7
 80087fc:	db04      	blt.n	8008808 <__s2b+0x78>
 80087fe:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008802:	340a      	adds	r4, #10
 8008804:	2509      	movs	r5, #9
 8008806:	e7f6      	b.n	80087f6 <__s2b+0x66>
 8008808:	f814 3b01 	ldrb.w	r3, [r4], #1
 800880c:	4601      	mov	r1, r0
 800880e:	3b30      	subs	r3, #48	@ 0x30
 8008810:	220a      	movs	r2, #10
 8008812:	4630      	mov	r0, r6
 8008814:	f7ff ff76 	bl	8008704 <__multadd>
 8008818:	e7ee      	b.n	80087f8 <__s2b+0x68>
 800881a:	bf00      	nop
 800881c:	0800afe1 	.word	0x0800afe1
 8008820:	0800aff2 	.word	0x0800aff2

08008824 <__hi0bits>:
 8008824:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8008828:	4603      	mov	r3, r0
 800882a:	bf36      	itet	cc
 800882c:	0403      	lslcc	r3, r0, #16
 800882e:	2000      	movcs	r0, #0
 8008830:	2010      	movcc	r0, #16
 8008832:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8008836:	bf3c      	itt	cc
 8008838:	021b      	lslcc	r3, r3, #8
 800883a:	3008      	addcc	r0, #8
 800883c:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8008840:	bf3c      	itt	cc
 8008842:	011b      	lslcc	r3, r3, #4
 8008844:	3004      	addcc	r0, #4
 8008846:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 800884a:	bf3c      	itt	cc
 800884c:	009b      	lslcc	r3, r3, #2
 800884e:	3002      	addcc	r0, #2
 8008850:	2b00      	cmp	r3, #0
 8008852:	db05      	blt.n	8008860 <__hi0bits+0x3c>
 8008854:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8008858:	f100 0001 	add.w	r0, r0, #1
 800885c:	bf08      	it	eq
 800885e:	2020      	moveq	r0, #32
 8008860:	4770      	bx	lr

08008862 <__lo0bits>:
 8008862:	6803      	ldr	r3, [r0, #0]
 8008864:	4602      	mov	r2, r0
 8008866:	f013 0007 	ands.w	r0, r3, #7
 800886a:	d00b      	beq.n	8008884 <__lo0bits+0x22>
 800886c:	07d9      	lsls	r1, r3, #31
 800886e:	d421      	bmi.n	80088b4 <__lo0bits+0x52>
 8008870:	0798      	lsls	r0, r3, #30
 8008872:	bf49      	itett	mi
 8008874:	085b      	lsrmi	r3, r3, #1
 8008876:	089b      	lsrpl	r3, r3, #2
 8008878:	2001      	movmi	r0, #1
 800887a:	6013      	strmi	r3, [r2, #0]
 800887c:	bf5c      	itt	pl
 800887e:	6013      	strpl	r3, [r2, #0]
 8008880:	2002      	movpl	r0, #2
 8008882:	4770      	bx	lr
 8008884:	b299      	uxth	r1, r3
 8008886:	b909      	cbnz	r1, 800888c <__lo0bits+0x2a>
 8008888:	0c1b      	lsrs	r3, r3, #16
 800888a:	2010      	movs	r0, #16
 800888c:	b2d9      	uxtb	r1, r3
 800888e:	b909      	cbnz	r1, 8008894 <__lo0bits+0x32>
 8008890:	3008      	adds	r0, #8
 8008892:	0a1b      	lsrs	r3, r3, #8
 8008894:	0719      	lsls	r1, r3, #28
 8008896:	bf04      	itt	eq
 8008898:	091b      	lsreq	r3, r3, #4
 800889a:	3004      	addeq	r0, #4
 800889c:	0799      	lsls	r1, r3, #30
 800889e:	bf04      	itt	eq
 80088a0:	089b      	lsreq	r3, r3, #2
 80088a2:	3002      	addeq	r0, #2
 80088a4:	07d9      	lsls	r1, r3, #31
 80088a6:	d403      	bmi.n	80088b0 <__lo0bits+0x4e>
 80088a8:	085b      	lsrs	r3, r3, #1
 80088aa:	f100 0001 	add.w	r0, r0, #1
 80088ae:	d003      	beq.n	80088b8 <__lo0bits+0x56>
 80088b0:	6013      	str	r3, [r2, #0]
 80088b2:	4770      	bx	lr
 80088b4:	2000      	movs	r0, #0
 80088b6:	4770      	bx	lr
 80088b8:	2020      	movs	r0, #32
 80088ba:	4770      	bx	lr

080088bc <__i2b>:
 80088bc:	b510      	push	{r4, lr}
 80088be:	460c      	mov	r4, r1
 80088c0:	2101      	movs	r1, #1
 80088c2:	f7ff febd 	bl	8008640 <_Balloc>
 80088c6:	4602      	mov	r2, r0
 80088c8:	b928      	cbnz	r0, 80088d6 <__i2b+0x1a>
 80088ca:	4b05      	ldr	r3, [pc, #20]	@ (80088e0 <__i2b+0x24>)
 80088cc:	4805      	ldr	r0, [pc, #20]	@ (80088e4 <__i2b+0x28>)
 80088ce:	f240 1145 	movw	r1, #325	@ 0x145
 80088d2:	f001 fe01 	bl	800a4d8 <__assert_func>
 80088d6:	2301      	movs	r3, #1
 80088d8:	6144      	str	r4, [r0, #20]
 80088da:	6103      	str	r3, [r0, #16]
 80088dc:	bd10      	pop	{r4, pc}
 80088de:	bf00      	nop
 80088e0:	0800afe1 	.word	0x0800afe1
 80088e4:	0800aff2 	.word	0x0800aff2

080088e8 <__multiply>:
 80088e8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80088ec:	4617      	mov	r7, r2
 80088ee:	690a      	ldr	r2, [r1, #16]
 80088f0:	693b      	ldr	r3, [r7, #16]
 80088f2:	429a      	cmp	r2, r3
 80088f4:	bfa8      	it	ge
 80088f6:	463b      	movge	r3, r7
 80088f8:	4689      	mov	r9, r1
 80088fa:	bfa4      	itt	ge
 80088fc:	460f      	movge	r7, r1
 80088fe:	4699      	movge	r9, r3
 8008900:	693d      	ldr	r5, [r7, #16]
 8008902:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008906:	68bb      	ldr	r3, [r7, #8]
 8008908:	6879      	ldr	r1, [r7, #4]
 800890a:	eb05 060a 	add.w	r6, r5, sl
 800890e:	42b3      	cmp	r3, r6
 8008910:	b085      	sub	sp, #20
 8008912:	bfb8      	it	lt
 8008914:	3101      	addlt	r1, #1
 8008916:	f7ff fe93 	bl	8008640 <_Balloc>
 800891a:	b930      	cbnz	r0, 800892a <__multiply+0x42>
 800891c:	4602      	mov	r2, r0
 800891e:	4b41      	ldr	r3, [pc, #260]	@ (8008a24 <__multiply+0x13c>)
 8008920:	4841      	ldr	r0, [pc, #260]	@ (8008a28 <__multiply+0x140>)
 8008922:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008926:	f001 fdd7 	bl	800a4d8 <__assert_func>
 800892a:	f100 0414 	add.w	r4, r0, #20
 800892e:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 8008932:	4623      	mov	r3, r4
 8008934:	2200      	movs	r2, #0
 8008936:	4573      	cmp	r3, lr
 8008938:	d320      	bcc.n	800897c <__multiply+0x94>
 800893a:	f107 0814 	add.w	r8, r7, #20
 800893e:	f109 0114 	add.w	r1, r9, #20
 8008942:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 8008946:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 800894a:	9302      	str	r3, [sp, #8]
 800894c:	1beb      	subs	r3, r5, r7
 800894e:	3b15      	subs	r3, #21
 8008950:	f023 0303 	bic.w	r3, r3, #3
 8008954:	3304      	adds	r3, #4
 8008956:	3715      	adds	r7, #21
 8008958:	42bd      	cmp	r5, r7
 800895a:	bf38      	it	cc
 800895c:	2304      	movcc	r3, #4
 800895e:	9301      	str	r3, [sp, #4]
 8008960:	9b02      	ldr	r3, [sp, #8]
 8008962:	9103      	str	r1, [sp, #12]
 8008964:	428b      	cmp	r3, r1
 8008966:	d80c      	bhi.n	8008982 <__multiply+0x9a>
 8008968:	2e00      	cmp	r6, #0
 800896a:	dd03      	ble.n	8008974 <__multiply+0x8c>
 800896c:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 8008970:	2b00      	cmp	r3, #0
 8008972:	d055      	beq.n	8008a20 <__multiply+0x138>
 8008974:	6106      	str	r6, [r0, #16]
 8008976:	b005      	add	sp, #20
 8008978:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800897c:	f843 2b04 	str.w	r2, [r3], #4
 8008980:	e7d9      	b.n	8008936 <__multiply+0x4e>
 8008982:	f8b1 a000 	ldrh.w	sl, [r1]
 8008986:	f1ba 0f00 	cmp.w	sl, #0
 800898a:	d01f      	beq.n	80089cc <__multiply+0xe4>
 800898c:	46c4      	mov	ip, r8
 800898e:	46a1      	mov	r9, r4
 8008990:	2700      	movs	r7, #0
 8008992:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008996:	f8d9 3000 	ldr.w	r3, [r9]
 800899a:	fa1f fb82 	uxth.w	fp, r2
 800899e:	b29b      	uxth	r3, r3
 80089a0:	fb0a 330b 	mla	r3, sl, fp, r3
 80089a4:	443b      	add	r3, r7
 80089a6:	f8d9 7000 	ldr.w	r7, [r9]
 80089aa:	0c12      	lsrs	r2, r2, #16
 80089ac:	0c3f      	lsrs	r7, r7, #16
 80089ae:	fb0a 7202 	mla	r2, sl, r2, r7
 80089b2:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 80089b6:	b29b      	uxth	r3, r3
 80089b8:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089bc:	4565      	cmp	r5, ip
 80089be:	f849 3b04 	str.w	r3, [r9], #4
 80089c2:	ea4f 4712 	mov.w	r7, r2, lsr #16
 80089c6:	d8e4      	bhi.n	8008992 <__multiply+0xaa>
 80089c8:	9b01      	ldr	r3, [sp, #4]
 80089ca:	50e7      	str	r7, [r4, r3]
 80089cc:	9b03      	ldr	r3, [sp, #12]
 80089ce:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 80089d2:	3104      	adds	r1, #4
 80089d4:	f1b9 0f00 	cmp.w	r9, #0
 80089d8:	d020      	beq.n	8008a1c <__multiply+0x134>
 80089da:	6823      	ldr	r3, [r4, #0]
 80089dc:	4647      	mov	r7, r8
 80089de:	46a4      	mov	ip, r4
 80089e0:	f04f 0a00 	mov.w	sl, #0
 80089e4:	f8b7 b000 	ldrh.w	fp, [r7]
 80089e8:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 80089ec:	fb09 220b 	mla	r2, r9, fp, r2
 80089f0:	4452      	add	r2, sl
 80089f2:	b29b      	uxth	r3, r3
 80089f4:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 80089f8:	f84c 3b04 	str.w	r3, [ip], #4
 80089fc:	f857 3b04 	ldr.w	r3, [r7], #4
 8008a00:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a04:	f8bc 3000 	ldrh.w	r3, [ip]
 8008a08:	fb09 330a 	mla	r3, r9, sl, r3
 8008a0c:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 8008a10:	42bd      	cmp	r5, r7
 8008a12:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008a16:	d8e5      	bhi.n	80089e4 <__multiply+0xfc>
 8008a18:	9a01      	ldr	r2, [sp, #4]
 8008a1a:	50a3      	str	r3, [r4, r2]
 8008a1c:	3404      	adds	r4, #4
 8008a1e:	e79f      	b.n	8008960 <__multiply+0x78>
 8008a20:	3e01      	subs	r6, #1
 8008a22:	e7a1      	b.n	8008968 <__multiply+0x80>
 8008a24:	0800afe1 	.word	0x0800afe1
 8008a28:	0800aff2 	.word	0x0800aff2

08008a2c <__pow5mult>:
 8008a2c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008a30:	4615      	mov	r5, r2
 8008a32:	f012 0203 	ands.w	r2, r2, #3
 8008a36:	4607      	mov	r7, r0
 8008a38:	460e      	mov	r6, r1
 8008a3a:	d007      	beq.n	8008a4c <__pow5mult+0x20>
 8008a3c:	4c25      	ldr	r4, [pc, #148]	@ (8008ad4 <__pow5mult+0xa8>)
 8008a3e:	3a01      	subs	r2, #1
 8008a40:	2300      	movs	r3, #0
 8008a42:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 8008a46:	f7ff fe5d 	bl	8008704 <__multadd>
 8008a4a:	4606      	mov	r6, r0
 8008a4c:	10ad      	asrs	r5, r5, #2
 8008a4e:	d03d      	beq.n	8008acc <__pow5mult+0xa0>
 8008a50:	69fc      	ldr	r4, [r7, #28]
 8008a52:	b97c      	cbnz	r4, 8008a74 <__pow5mult+0x48>
 8008a54:	2010      	movs	r0, #16
 8008a56:	f7ff fd3d 	bl	80084d4 <malloc>
 8008a5a:	4602      	mov	r2, r0
 8008a5c:	61f8      	str	r0, [r7, #28]
 8008a5e:	b928      	cbnz	r0, 8008a6c <__pow5mult+0x40>
 8008a60:	4b1d      	ldr	r3, [pc, #116]	@ (8008ad8 <__pow5mult+0xac>)
 8008a62:	481e      	ldr	r0, [pc, #120]	@ (8008adc <__pow5mult+0xb0>)
 8008a64:	f240 11b3 	movw	r1, #435	@ 0x1b3
 8008a68:	f001 fd36 	bl	800a4d8 <__assert_func>
 8008a6c:	e9c0 4401 	strd	r4, r4, [r0, #4]
 8008a70:	6004      	str	r4, [r0, #0]
 8008a72:	60c4      	str	r4, [r0, #12]
 8008a74:	f8d7 801c 	ldr.w	r8, [r7, #28]
 8008a78:	f8d8 4008 	ldr.w	r4, [r8, #8]
 8008a7c:	b94c      	cbnz	r4, 8008a92 <__pow5mult+0x66>
 8008a7e:	f240 2171 	movw	r1, #625	@ 0x271
 8008a82:	4638      	mov	r0, r7
 8008a84:	f7ff ff1a 	bl	80088bc <__i2b>
 8008a88:	2300      	movs	r3, #0
 8008a8a:	f8c8 0008 	str.w	r0, [r8, #8]
 8008a8e:	4604      	mov	r4, r0
 8008a90:	6003      	str	r3, [r0, #0]
 8008a92:	f04f 0900 	mov.w	r9, #0
 8008a96:	07eb      	lsls	r3, r5, #31
 8008a98:	d50a      	bpl.n	8008ab0 <__pow5mult+0x84>
 8008a9a:	4631      	mov	r1, r6
 8008a9c:	4622      	mov	r2, r4
 8008a9e:	4638      	mov	r0, r7
 8008aa0:	f7ff ff22 	bl	80088e8 <__multiply>
 8008aa4:	4631      	mov	r1, r6
 8008aa6:	4680      	mov	r8, r0
 8008aa8:	4638      	mov	r0, r7
 8008aaa:	f7ff fe09 	bl	80086c0 <_Bfree>
 8008aae:	4646      	mov	r6, r8
 8008ab0:	106d      	asrs	r5, r5, #1
 8008ab2:	d00b      	beq.n	8008acc <__pow5mult+0xa0>
 8008ab4:	6820      	ldr	r0, [r4, #0]
 8008ab6:	b938      	cbnz	r0, 8008ac8 <__pow5mult+0x9c>
 8008ab8:	4622      	mov	r2, r4
 8008aba:	4621      	mov	r1, r4
 8008abc:	4638      	mov	r0, r7
 8008abe:	f7ff ff13 	bl	80088e8 <__multiply>
 8008ac2:	6020      	str	r0, [r4, #0]
 8008ac4:	f8c0 9000 	str.w	r9, [r0]
 8008ac8:	4604      	mov	r4, r0
 8008aca:	e7e4      	b.n	8008a96 <__pow5mult+0x6a>
 8008acc:	4630      	mov	r0, r6
 8008ace:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8008ad2:	bf00      	nop
 8008ad4:	0800b104 	.word	0x0800b104
 8008ad8:	0800af72 	.word	0x0800af72
 8008adc:	0800aff2 	.word	0x0800aff2

08008ae0 <__lshift>:
 8008ae0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008ae4:	460c      	mov	r4, r1
 8008ae6:	6849      	ldr	r1, [r1, #4]
 8008ae8:	6923      	ldr	r3, [r4, #16]
 8008aea:	eb03 1862 	add.w	r8, r3, r2, asr #5
 8008aee:	68a3      	ldr	r3, [r4, #8]
 8008af0:	4607      	mov	r7, r0
 8008af2:	4691      	mov	r9, r2
 8008af4:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008af8:	f108 0601 	add.w	r6, r8, #1
 8008afc:	42b3      	cmp	r3, r6
 8008afe:	db0b      	blt.n	8008b18 <__lshift+0x38>
 8008b00:	4638      	mov	r0, r7
 8008b02:	f7ff fd9d 	bl	8008640 <_Balloc>
 8008b06:	4605      	mov	r5, r0
 8008b08:	b948      	cbnz	r0, 8008b1e <__lshift+0x3e>
 8008b0a:	4602      	mov	r2, r0
 8008b0c:	4b28      	ldr	r3, [pc, #160]	@ (8008bb0 <__lshift+0xd0>)
 8008b0e:	4829      	ldr	r0, [pc, #164]	@ (8008bb4 <__lshift+0xd4>)
 8008b10:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008b14:	f001 fce0 	bl	800a4d8 <__assert_func>
 8008b18:	3101      	adds	r1, #1
 8008b1a:	005b      	lsls	r3, r3, #1
 8008b1c:	e7ee      	b.n	8008afc <__lshift+0x1c>
 8008b1e:	2300      	movs	r3, #0
 8008b20:	f100 0114 	add.w	r1, r0, #20
 8008b24:	f100 0210 	add.w	r2, r0, #16
 8008b28:	4618      	mov	r0, r3
 8008b2a:	4553      	cmp	r3, sl
 8008b2c:	db33      	blt.n	8008b96 <__lshift+0xb6>
 8008b2e:	6920      	ldr	r0, [r4, #16]
 8008b30:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 8008b34:	f104 0314 	add.w	r3, r4, #20
 8008b38:	f019 091f 	ands.w	r9, r9, #31
 8008b3c:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 8008b40:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 8008b44:	d02b      	beq.n	8008b9e <__lshift+0xbe>
 8008b46:	f1c9 0e20 	rsb	lr, r9, #32
 8008b4a:	468a      	mov	sl, r1
 8008b4c:	2200      	movs	r2, #0
 8008b4e:	6818      	ldr	r0, [r3, #0]
 8008b50:	fa00 f009 	lsl.w	r0, r0, r9
 8008b54:	4310      	orrs	r0, r2
 8008b56:	f84a 0b04 	str.w	r0, [sl], #4
 8008b5a:	f853 2b04 	ldr.w	r2, [r3], #4
 8008b5e:	459c      	cmp	ip, r3
 8008b60:	fa22 f20e 	lsr.w	r2, r2, lr
 8008b64:	d8f3      	bhi.n	8008b4e <__lshift+0x6e>
 8008b66:	ebac 0304 	sub.w	r3, ip, r4
 8008b6a:	3b15      	subs	r3, #21
 8008b6c:	f023 0303 	bic.w	r3, r3, #3
 8008b70:	3304      	adds	r3, #4
 8008b72:	f104 0015 	add.w	r0, r4, #21
 8008b76:	4560      	cmp	r0, ip
 8008b78:	bf88      	it	hi
 8008b7a:	2304      	movhi	r3, #4
 8008b7c:	50ca      	str	r2, [r1, r3]
 8008b7e:	b10a      	cbz	r2, 8008b84 <__lshift+0xa4>
 8008b80:	f108 0602 	add.w	r6, r8, #2
 8008b84:	3e01      	subs	r6, #1
 8008b86:	4638      	mov	r0, r7
 8008b88:	612e      	str	r6, [r5, #16]
 8008b8a:	4621      	mov	r1, r4
 8008b8c:	f7ff fd98 	bl	80086c0 <_Bfree>
 8008b90:	4628      	mov	r0, r5
 8008b92:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008b96:	f842 0f04 	str.w	r0, [r2, #4]!
 8008b9a:	3301      	adds	r3, #1
 8008b9c:	e7c5      	b.n	8008b2a <__lshift+0x4a>
 8008b9e:	3904      	subs	r1, #4
 8008ba0:	f853 2b04 	ldr.w	r2, [r3], #4
 8008ba4:	f841 2f04 	str.w	r2, [r1, #4]!
 8008ba8:	459c      	cmp	ip, r3
 8008baa:	d8f9      	bhi.n	8008ba0 <__lshift+0xc0>
 8008bac:	e7ea      	b.n	8008b84 <__lshift+0xa4>
 8008bae:	bf00      	nop
 8008bb0:	0800afe1 	.word	0x0800afe1
 8008bb4:	0800aff2 	.word	0x0800aff2

08008bb8 <__mcmp>:
 8008bb8:	690a      	ldr	r2, [r1, #16]
 8008bba:	4603      	mov	r3, r0
 8008bbc:	6900      	ldr	r0, [r0, #16]
 8008bbe:	1a80      	subs	r0, r0, r2
 8008bc0:	b530      	push	{r4, r5, lr}
 8008bc2:	d10e      	bne.n	8008be2 <__mcmp+0x2a>
 8008bc4:	3314      	adds	r3, #20
 8008bc6:	3114      	adds	r1, #20
 8008bc8:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008bcc:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 8008bd0:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008bd4:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008bd8:	4295      	cmp	r5, r2
 8008bda:	d003      	beq.n	8008be4 <__mcmp+0x2c>
 8008bdc:	d205      	bcs.n	8008bea <__mcmp+0x32>
 8008bde:	f04f 30ff 	mov.w	r0, #4294967295
 8008be2:	bd30      	pop	{r4, r5, pc}
 8008be4:	42a3      	cmp	r3, r4
 8008be6:	d3f3      	bcc.n	8008bd0 <__mcmp+0x18>
 8008be8:	e7fb      	b.n	8008be2 <__mcmp+0x2a>
 8008bea:	2001      	movs	r0, #1
 8008bec:	e7f9      	b.n	8008be2 <__mcmp+0x2a>
	...

08008bf0 <__mdiff>:
 8008bf0:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008bf4:	4689      	mov	r9, r1
 8008bf6:	4606      	mov	r6, r0
 8008bf8:	4611      	mov	r1, r2
 8008bfa:	4648      	mov	r0, r9
 8008bfc:	4614      	mov	r4, r2
 8008bfe:	f7ff ffdb 	bl	8008bb8 <__mcmp>
 8008c02:	1e05      	subs	r5, r0, #0
 8008c04:	d112      	bne.n	8008c2c <__mdiff+0x3c>
 8008c06:	4629      	mov	r1, r5
 8008c08:	4630      	mov	r0, r6
 8008c0a:	f7ff fd19 	bl	8008640 <_Balloc>
 8008c0e:	4602      	mov	r2, r0
 8008c10:	b928      	cbnz	r0, 8008c1e <__mdiff+0x2e>
 8008c12:	4b3f      	ldr	r3, [pc, #252]	@ (8008d10 <__mdiff+0x120>)
 8008c14:	f240 2137 	movw	r1, #567	@ 0x237
 8008c18:	483e      	ldr	r0, [pc, #248]	@ (8008d14 <__mdiff+0x124>)
 8008c1a:	f001 fc5d 	bl	800a4d8 <__assert_func>
 8008c1e:	2301      	movs	r3, #1
 8008c20:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008c24:	4610      	mov	r0, r2
 8008c26:	b003      	add	sp, #12
 8008c28:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c2c:	bfbc      	itt	lt
 8008c2e:	464b      	movlt	r3, r9
 8008c30:	46a1      	movlt	r9, r4
 8008c32:	4630      	mov	r0, r6
 8008c34:	f8d9 1004 	ldr.w	r1, [r9, #4]
 8008c38:	bfba      	itte	lt
 8008c3a:	461c      	movlt	r4, r3
 8008c3c:	2501      	movlt	r5, #1
 8008c3e:	2500      	movge	r5, #0
 8008c40:	f7ff fcfe 	bl	8008640 <_Balloc>
 8008c44:	4602      	mov	r2, r0
 8008c46:	b918      	cbnz	r0, 8008c50 <__mdiff+0x60>
 8008c48:	4b31      	ldr	r3, [pc, #196]	@ (8008d10 <__mdiff+0x120>)
 8008c4a:	f240 2145 	movw	r1, #581	@ 0x245
 8008c4e:	e7e3      	b.n	8008c18 <__mdiff+0x28>
 8008c50:	f8d9 7010 	ldr.w	r7, [r9, #16]
 8008c54:	6926      	ldr	r6, [r4, #16]
 8008c56:	60c5      	str	r5, [r0, #12]
 8008c58:	f109 0310 	add.w	r3, r9, #16
 8008c5c:	f109 0514 	add.w	r5, r9, #20
 8008c60:	f104 0e14 	add.w	lr, r4, #20
 8008c64:	f100 0b14 	add.w	fp, r0, #20
 8008c68:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 8008c6c:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 8008c70:	9301      	str	r3, [sp, #4]
 8008c72:	46d9      	mov	r9, fp
 8008c74:	f04f 0c00 	mov.w	ip, #0
 8008c78:	9b01      	ldr	r3, [sp, #4]
 8008c7a:	f85e 0b04 	ldr.w	r0, [lr], #4
 8008c7e:	f853 af04 	ldr.w	sl, [r3, #4]!
 8008c82:	9301      	str	r3, [sp, #4]
 8008c84:	fa1f f38a 	uxth.w	r3, sl
 8008c88:	4619      	mov	r1, r3
 8008c8a:	b283      	uxth	r3, r0
 8008c8c:	1acb      	subs	r3, r1, r3
 8008c8e:	0c00      	lsrs	r0, r0, #16
 8008c90:	4463      	add	r3, ip
 8008c92:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008c96:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008c9a:	b29b      	uxth	r3, r3
 8008c9c:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 8008ca0:	4576      	cmp	r6, lr
 8008ca2:	f849 3b04 	str.w	r3, [r9], #4
 8008ca6:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008caa:	d8e5      	bhi.n	8008c78 <__mdiff+0x88>
 8008cac:	1b33      	subs	r3, r6, r4
 8008cae:	3b15      	subs	r3, #21
 8008cb0:	f023 0303 	bic.w	r3, r3, #3
 8008cb4:	3415      	adds	r4, #21
 8008cb6:	3304      	adds	r3, #4
 8008cb8:	42a6      	cmp	r6, r4
 8008cba:	bf38      	it	cc
 8008cbc:	2304      	movcc	r3, #4
 8008cbe:	441d      	add	r5, r3
 8008cc0:	445b      	add	r3, fp
 8008cc2:	461e      	mov	r6, r3
 8008cc4:	462c      	mov	r4, r5
 8008cc6:	4544      	cmp	r4, r8
 8008cc8:	d30e      	bcc.n	8008ce8 <__mdiff+0xf8>
 8008cca:	f108 0103 	add.w	r1, r8, #3
 8008cce:	1b49      	subs	r1, r1, r5
 8008cd0:	f021 0103 	bic.w	r1, r1, #3
 8008cd4:	3d03      	subs	r5, #3
 8008cd6:	45a8      	cmp	r8, r5
 8008cd8:	bf38      	it	cc
 8008cda:	2100      	movcc	r1, #0
 8008cdc:	440b      	add	r3, r1
 8008cde:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008ce2:	b191      	cbz	r1, 8008d0a <__mdiff+0x11a>
 8008ce4:	6117      	str	r7, [r2, #16]
 8008ce6:	e79d      	b.n	8008c24 <__mdiff+0x34>
 8008ce8:	f854 1b04 	ldr.w	r1, [r4], #4
 8008cec:	46e6      	mov	lr, ip
 8008cee:	0c08      	lsrs	r0, r1, #16
 8008cf0:	fa1c fc81 	uxtah	ip, ip, r1
 8008cf4:	4471      	add	r1, lr
 8008cf6:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008cfa:	b289      	uxth	r1, r1
 8008cfc:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 8008d00:	f846 1b04 	str.w	r1, [r6], #4
 8008d04:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008d08:	e7dd      	b.n	8008cc6 <__mdiff+0xd6>
 8008d0a:	3f01      	subs	r7, #1
 8008d0c:	e7e7      	b.n	8008cde <__mdiff+0xee>
 8008d0e:	bf00      	nop
 8008d10:	0800afe1 	.word	0x0800afe1
 8008d14:	0800aff2 	.word	0x0800aff2

08008d18 <__ulp>:
 8008d18:	b082      	sub	sp, #8
 8008d1a:	ed8d 0b00 	vstr	d0, [sp]
 8008d1e:	9a01      	ldr	r2, [sp, #4]
 8008d20:	4b0f      	ldr	r3, [pc, #60]	@ (8008d60 <__ulp+0x48>)
 8008d22:	4013      	ands	r3, r2
 8008d24:	f1a3 7350 	sub.w	r3, r3, #54525952	@ 0x3400000
 8008d28:	2b00      	cmp	r3, #0
 8008d2a:	dc08      	bgt.n	8008d3e <__ulp+0x26>
 8008d2c:	425b      	negs	r3, r3
 8008d2e:	f1b3 7fa0 	cmp.w	r3, #20971520	@ 0x1400000
 8008d32:	ea4f 5223 	mov.w	r2, r3, asr #20
 8008d36:	da04      	bge.n	8008d42 <__ulp+0x2a>
 8008d38:	f44f 2300 	mov.w	r3, #524288	@ 0x80000
 8008d3c:	4113      	asrs	r3, r2
 8008d3e:	2200      	movs	r2, #0
 8008d40:	e008      	b.n	8008d54 <__ulp+0x3c>
 8008d42:	f1a2 0314 	sub.w	r3, r2, #20
 8008d46:	2b1e      	cmp	r3, #30
 8008d48:	bfda      	itte	le
 8008d4a:	f04f 4200 	movle.w	r2, #2147483648	@ 0x80000000
 8008d4e:	40da      	lsrle	r2, r3
 8008d50:	2201      	movgt	r2, #1
 8008d52:	2300      	movs	r3, #0
 8008d54:	4619      	mov	r1, r3
 8008d56:	4610      	mov	r0, r2
 8008d58:	ec41 0b10 	vmov	d0, r0, r1
 8008d5c:	b002      	add	sp, #8
 8008d5e:	4770      	bx	lr
 8008d60:	7ff00000 	.word	0x7ff00000

08008d64 <__b2d>:
 8008d64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008d68:	6906      	ldr	r6, [r0, #16]
 8008d6a:	f100 0814 	add.w	r8, r0, #20
 8008d6e:	eb08 0686 	add.w	r6, r8, r6, lsl #2
 8008d72:	1f37      	subs	r7, r6, #4
 8008d74:	f856 2c04 	ldr.w	r2, [r6, #-4]
 8008d78:	4610      	mov	r0, r2
 8008d7a:	f7ff fd53 	bl	8008824 <__hi0bits>
 8008d7e:	f1c0 0320 	rsb	r3, r0, #32
 8008d82:	280a      	cmp	r0, #10
 8008d84:	600b      	str	r3, [r1, #0]
 8008d86:	491b      	ldr	r1, [pc, #108]	@ (8008df4 <__b2d+0x90>)
 8008d88:	dc15      	bgt.n	8008db6 <__b2d+0x52>
 8008d8a:	f1c0 0c0b 	rsb	ip, r0, #11
 8008d8e:	fa22 f30c 	lsr.w	r3, r2, ip
 8008d92:	45b8      	cmp	r8, r7
 8008d94:	ea43 0501 	orr.w	r5, r3, r1
 8008d98:	bf34      	ite	cc
 8008d9a:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008d9e:	2300      	movcs	r3, #0
 8008da0:	3015      	adds	r0, #21
 8008da2:	fa02 f000 	lsl.w	r0, r2, r0
 8008da6:	fa23 f30c 	lsr.w	r3, r3, ip
 8008daa:	4303      	orrs	r3, r0
 8008dac:	461c      	mov	r4, r3
 8008dae:	ec45 4b10 	vmov	d0, r4, r5
 8008db2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008db6:	45b8      	cmp	r8, r7
 8008db8:	bf3a      	itte	cc
 8008dba:	f856 3c08 	ldrcc.w	r3, [r6, #-8]
 8008dbe:	f1a6 0708 	subcc.w	r7, r6, #8
 8008dc2:	2300      	movcs	r3, #0
 8008dc4:	380b      	subs	r0, #11
 8008dc6:	d012      	beq.n	8008dee <__b2d+0x8a>
 8008dc8:	f1c0 0120 	rsb	r1, r0, #32
 8008dcc:	fa23 f401 	lsr.w	r4, r3, r1
 8008dd0:	4082      	lsls	r2, r0
 8008dd2:	4322      	orrs	r2, r4
 8008dd4:	4547      	cmp	r7, r8
 8008dd6:	f042 557f 	orr.w	r5, r2, #1069547520	@ 0x3fc00000
 8008dda:	bf8c      	ite	hi
 8008ddc:	f857 2c04 	ldrhi.w	r2, [r7, #-4]
 8008de0:	2200      	movls	r2, #0
 8008de2:	4083      	lsls	r3, r0
 8008de4:	40ca      	lsrs	r2, r1
 8008de6:	f445 1540 	orr.w	r5, r5, #3145728	@ 0x300000
 8008dea:	4313      	orrs	r3, r2
 8008dec:	e7de      	b.n	8008dac <__b2d+0x48>
 8008dee:	ea42 0501 	orr.w	r5, r2, r1
 8008df2:	e7db      	b.n	8008dac <__b2d+0x48>
 8008df4:	3ff00000 	.word	0x3ff00000

08008df8 <__d2b>:
 8008df8:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008dfc:	460f      	mov	r7, r1
 8008dfe:	2101      	movs	r1, #1
 8008e00:	ec59 8b10 	vmov	r8, r9, d0
 8008e04:	4616      	mov	r6, r2
 8008e06:	f7ff fc1b 	bl	8008640 <_Balloc>
 8008e0a:	4604      	mov	r4, r0
 8008e0c:	b930      	cbnz	r0, 8008e1c <__d2b+0x24>
 8008e0e:	4602      	mov	r2, r0
 8008e10:	4b23      	ldr	r3, [pc, #140]	@ (8008ea0 <__d2b+0xa8>)
 8008e12:	4824      	ldr	r0, [pc, #144]	@ (8008ea4 <__d2b+0xac>)
 8008e14:	f240 310f 	movw	r1, #783	@ 0x30f
 8008e18:	f001 fb5e 	bl	800a4d8 <__assert_func>
 8008e1c:	f3c9 550a 	ubfx	r5, r9, #20, #11
 8008e20:	f3c9 0313 	ubfx	r3, r9, #0, #20
 8008e24:	b10d      	cbz	r5, 8008e2a <__d2b+0x32>
 8008e26:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8008e2a:	9301      	str	r3, [sp, #4]
 8008e2c:	f1b8 0300 	subs.w	r3, r8, #0
 8008e30:	d023      	beq.n	8008e7a <__d2b+0x82>
 8008e32:	4668      	mov	r0, sp
 8008e34:	9300      	str	r3, [sp, #0]
 8008e36:	f7ff fd14 	bl	8008862 <__lo0bits>
 8008e3a:	e9dd 1200 	ldrd	r1, r2, [sp]
 8008e3e:	b1d0      	cbz	r0, 8008e76 <__d2b+0x7e>
 8008e40:	f1c0 0320 	rsb	r3, r0, #32
 8008e44:	fa02 f303 	lsl.w	r3, r2, r3
 8008e48:	430b      	orrs	r3, r1
 8008e4a:	40c2      	lsrs	r2, r0
 8008e4c:	6163      	str	r3, [r4, #20]
 8008e4e:	9201      	str	r2, [sp, #4]
 8008e50:	9b01      	ldr	r3, [sp, #4]
 8008e52:	61a3      	str	r3, [r4, #24]
 8008e54:	2b00      	cmp	r3, #0
 8008e56:	bf0c      	ite	eq
 8008e58:	2201      	moveq	r2, #1
 8008e5a:	2202      	movne	r2, #2
 8008e5c:	6122      	str	r2, [r4, #16]
 8008e5e:	b1a5      	cbz	r5, 8008e8a <__d2b+0x92>
 8008e60:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 8008e64:	4405      	add	r5, r0
 8008e66:	603d      	str	r5, [r7, #0]
 8008e68:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 8008e6c:	6030      	str	r0, [r6, #0]
 8008e6e:	4620      	mov	r0, r4
 8008e70:	b003      	add	sp, #12
 8008e72:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008e76:	6161      	str	r1, [r4, #20]
 8008e78:	e7ea      	b.n	8008e50 <__d2b+0x58>
 8008e7a:	a801      	add	r0, sp, #4
 8008e7c:	f7ff fcf1 	bl	8008862 <__lo0bits>
 8008e80:	9b01      	ldr	r3, [sp, #4]
 8008e82:	6163      	str	r3, [r4, #20]
 8008e84:	3020      	adds	r0, #32
 8008e86:	2201      	movs	r2, #1
 8008e88:	e7e8      	b.n	8008e5c <__d2b+0x64>
 8008e8a:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 8008e8e:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 8008e92:	6038      	str	r0, [r7, #0]
 8008e94:	6918      	ldr	r0, [r3, #16]
 8008e96:	f7ff fcc5 	bl	8008824 <__hi0bits>
 8008e9a:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 8008e9e:	e7e5      	b.n	8008e6c <__d2b+0x74>
 8008ea0:	0800afe1 	.word	0x0800afe1
 8008ea4:	0800aff2 	.word	0x0800aff2

08008ea8 <__ratio>:
 8008ea8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008eac:	b085      	sub	sp, #20
 8008eae:	e9cd 1000 	strd	r1, r0, [sp]
 8008eb2:	a902      	add	r1, sp, #8
 8008eb4:	f7ff ff56 	bl	8008d64 <__b2d>
 8008eb8:	9800      	ldr	r0, [sp, #0]
 8008eba:	a903      	add	r1, sp, #12
 8008ebc:	ec55 4b10 	vmov	r4, r5, d0
 8008ec0:	f7ff ff50 	bl	8008d64 <__b2d>
 8008ec4:	9b01      	ldr	r3, [sp, #4]
 8008ec6:	6919      	ldr	r1, [r3, #16]
 8008ec8:	9b00      	ldr	r3, [sp, #0]
 8008eca:	691b      	ldr	r3, [r3, #16]
 8008ecc:	1ac9      	subs	r1, r1, r3
 8008ece:	e9dd 3202 	ldrd	r3, r2, [sp, #8]
 8008ed2:	1a9b      	subs	r3, r3, r2
 8008ed4:	ec5b ab10 	vmov	sl, fp, d0
 8008ed8:	eb03 1341 	add.w	r3, r3, r1, lsl #5
 8008edc:	2b00      	cmp	r3, #0
 8008ede:	bfce      	itee	gt
 8008ee0:	462a      	movgt	r2, r5
 8008ee2:	ebc3 3303 	rsble	r3, r3, r3, lsl #12
 8008ee6:	465a      	movle	r2, fp
 8008ee8:	462f      	mov	r7, r5
 8008eea:	46d9      	mov	r9, fp
 8008eec:	bfcc      	ite	gt
 8008eee:	eb02 5703 	addgt.w	r7, r2, r3, lsl #20
 8008ef2:	eb02 5903 	addle.w	r9, r2, r3, lsl #20
 8008ef6:	464b      	mov	r3, r9
 8008ef8:	4652      	mov	r2, sl
 8008efa:	4620      	mov	r0, r4
 8008efc:	4639      	mov	r1, r7
 8008efe:	f7f7 fcad 	bl	800085c <__aeabi_ddiv>
 8008f02:	ec41 0b10 	vmov	d0, r0, r1
 8008f06:	b005      	add	sp, #20
 8008f08:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}

08008f0c <__copybits>:
 8008f0c:	3901      	subs	r1, #1
 8008f0e:	b570      	push	{r4, r5, r6, lr}
 8008f10:	1149      	asrs	r1, r1, #5
 8008f12:	6914      	ldr	r4, [r2, #16]
 8008f14:	3101      	adds	r1, #1
 8008f16:	f102 0314 	add.w	r3, r2, #20
 8008f1a:	eb00 0181 	add.w	r1, r0, r1, lsl #2
 8008f1e:	eb03 0484 	add.w	r4, r3, r4, lsl #2
 8008f22:	1f05      	subs	r5, r0, #4
 8008f24:	42a3      	cmp	r3, r4
 8008f26:	d30c      	bcc.n	8008f42 <__copybits+0x36>
 8008f28:	1aa3      	subs	r3, r4, r2
 8008f2a:	3b11      	subs	r3, #17
 8008f2c:	f023 0303 	bic.w	r3, r3, #3
 8008f30:	3211      	adds	r2, #17
 8008f32:	42a2      	cmp	r2, r4
 8008f34:	bf88      	it	hi
 8008f36:	2300      	movhi	r3, #0
 8008f38:	4418      	add	r0, r3
 8008f3a:	2300      	movs	r3, #0
 8008f3c:	4288      	cmp	r0, r1
 8008f3e:	d305      	bcc.n	8008f4c <__copybits+0x40>
 8008f40:	bd70      	pop	{r4, r5, r6, pc}
 8008f42:	f853 6b04 	ldr.w	r6, [r3], #4
 8008f46:	f845 6f04 	str.w	r6, [r5, #4]!
 8008f4a:	e7eb      	b.n	8008f24 <__copybits+0x18>
 8008f4c:	f840 3b04 	str.w	r3, [r0], #4
 8008f50:	e7f4      	b.n	8008f3c <__copybits+0x30>

08008f52 <__any_on>:
 8008f52:	f100 0214 	add.w	r2, r0, #20
 8008f56:	6900      	ldr	r0, [r0, #16]
 8008f58:	114b      	asrs	r3, r1, #5
 8008f5a:	4298      	cmp	r0, r3
 8008f5c:	b510      	push	{r4, lr}
 8008f5e:	db11      	blt.n	8008f84 <__any_on+0x32>
 8008f60:	dd0a      	ble.n	8008f78 <__any_on+0x26>
 8008f62:	f011 011f 	ands.w	r1, r1, #31
 8008f66:	d007      	beq.n	8008f78 <__any_on+0x26>
 8008f68:	f852 4023 	ldr.w	r4, [r2, r3, lsl #2]
 8008f6c:	fa24 f001 	lsr.w	r0, r4, r1
 8008f70:	fa00 f101 	lsl.w	r1, r0, r1
 8008f74:	428c      	cmp	r4, r1
 8008f76:	d10b      	bne.n	8008f90 <__any_on+0x3e>
 8008f78:	eb02 0383 	add.w	r3, r2, r3, lsl #2
 8008f7c:	4293      	cmp	r3, r2
 8008f7e:	d803      	bhi.n	8008f88 <__any_on+0x36>
 8008f80:	2000      	movs	r0, #0
 8008f82:	bd10      	pop	{r4, pc}
 8008f84:	4603      	mov	r3, r0
 8008f86:	e7f7      	b.n	8008f78 <__any_on+0x26>
 8008f88:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 8008f8c:	2900      	cmp	r1, #0
 8008f8e:	d0f5      	beq.n	8008f7c <__any_on+0x2a>
 8008f90:	2001      	movs	r0, #1
 8008f92:	e7f6      	b.n	8008f82 <__any_on+0x30>

08008f94 <sulp>:
 8008f94:	b570      	push	{r4, r5, r6, lr}
 8008f96:	4604      	mov	r4, r0
 8008f98:	460d      	mov	r5, r1
 8008f9a:	ec45 4b10 	vmov	d0, r4, r5
 8008f9e:	4616      	mov	r6, r2
 8008fa0:	f7ff feba 	bl	8008d18 <__ulp>
 8008fa4:	ec51 0b10 	vmov	r0, r1, d0
 8008fa8:	b17e      	cbz	r6, 8008fca <sulp+0x36>
 8008faa:	f3c5 530a 	ubfx	r3, r5, #20, #11
 8008fae:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8008fb2:	2b00      	cmp	r3, #0
 8008fb4:	dd09      	ble.n	8008fca <sulp+0x36>
 8008fb6:	051b      	lsls	r3, r3, #20
 8008fb8:	f103 557f 	add.w	r5, r3, #1069547520	@ 0x3fc00000
 8008fbc:	2400      	movs	r4, #0
 8008fbe:	f505 1540 	add.w	r5, r5, #3145728	@ 0x300000
 8008fc2:	4622      	mov	r2, r4
 8008fc4:	462b      	mov	r3, r5
 8008fc6:	f7f7 fb1f 	bl	8000608 <__aeabi_dmul>
 8008fca:	ec41 0b10 	vmov	d0, r0, r1
 8008fce:	bd70      	pop	{r4, r5, r6, pc}

08008fd0 <_strtod_l>:
 8008fd0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008fd4:	b09f      	sub	sp, #124	@ 0x7c
 8008fd6:	460c      	mov	r4, r1
 8008fd8:	9217      	str	r2, [sp, #92]	@ 0x5c
 8008fda:	2200      	movs	r2, #0
 8008fdc:	921a      	str	r2, [sp, #104]	@ 0x68
 8008fde:	9005      	str	r0, [sp, #20]
 8008fe0:	f04f 0a00 	mov.w	sl, #0
 8008fe4:	f04f 0b00 	mov.w	fp, #0
 8008fe8:	460a      	mov	r2, r1
 8008fea:	9219      	str	r2, [sp, #100]	@ 0x64
 8008fec:	7811      	ldrb	r1, [r2, #0]
 8008fee:	292b      	cmp	r1, #43	@ 0x2b
 8008ff0:	d04a      	beq.n	8009088 <_strtod_l+0xb8>
 8008ff2:	d838      	bhi.n	8009066 <_strtod_l+0x96>
 8008ff4:	290d      	cmp	r1, #13
 8008ff6:	d832      	bhi.n	800905e <_strtod_l+0x8e>
 8008ff8:	2908      	cmp	r1, #8
 8008ffa:	d832      	bhi.n	8009062 <_strtod_l+0x92>
 8008ffc:	2900      	cmp	r1, #0
 8008ffe:	d03b      	beq.n	8009078 <_strtod_l+0xa8>
 8009000:	2200      	movs	r2, #0
 8009002:	920e      	str	r2, [sp, #56]	@ 0x38
 8009004:	9d19      	ldr	r5, [sp, #100]	@ 0x64
 8009006:	782a      	ldrb	r2, [r5, #0]
 8009008:	2a30      	cmp	r2, #48	@ 0x30
 800900a:	f040 80b2 	bne.w	8009172 <_strtod_l+0x1a2>
 800900e:	786a      	ldrb	r2, [r5, #1]
 8009010:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009014:	2a58      	cmp	r2, #88	@ 0x58
 8009016:	d16e      	bne.n	80090f6 <_strtod_l+0x126>
 8009018:	9302      	str	r3, [sp, #8]
 800901a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800901c:	9301      	str	r3, [sp, #4]
 800901e:	ab1a      	add	r3, sp, #104	@ 0x68
 8009020:	9300      	str	r3, [sp, #0]
 8009022:	4a8f      	ldr	r2, [pc, #572]	@ (8009260 <_strtod_l+0x290>)
 8009024:	9805      	ldr	r0, [sp, #20]
 8009026:	ab1b      	add	r3, sp, #108	@ 0x6c
 8009028:	a919      	add	r1, sp, #100	@ 0x64
 800902a:	f001 faef 	bl	800a60c <__gethex>
 800902e:	f010 060f 	ands.w	r6, r0, #15
 8009032:	4604      	mov	r4, r0
 8009034:	d005      	beq.n	8009042 <_strtod_l+0x72>
 8009036:	2e06      	cmp	r6, #6
 8009038:	d128      	bne.n	800908c <_strtod_l+0xbc>
 800903a:	3501      	adds	r5, #1
 800903c:	2300      	movs	r3, #0
 800903e:	9519      	str	r5, [sp, #100]	@ 0x64
 8009040:	930e      	str	r3, [sp, #56]	@ 0x38
 8009042:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 8009044:	2b00      	cmp	r3, #0
 8009046:	f040 858e 	bne.w	8009b66 <_strtod_l+0xb96>
 800904a:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800904c:	b1cb      	cbz	r3, 8009082 <_strtod_l+0xb2>
 800904e:	4652      	mov	r2, sl
 8009050:	f10b 4300 	add.w	r3, fp, #2147483648	@ 0x80000000
 8009054:	ec43 2b10 	vmov	d0, r2, r3
 8009058:	b01f      	add	sp, #124	@ 0x7c
 800905a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800905e:	2920      	cmp	r1, #32
 8009060:	d1ce      	bne.n	8009000 <_strtod_l+0x30>
 8009062:	3201      	adds	r2, #1
 8009064:	e7c1      	b.n	8008fea <_strtod_l+0x1a>
 8009066:	292d      	cmp	r1, #45	@ 0x2d
 8009068:	d1ca      	bne.n	8009000 <_strtod_l+0x30>
 800906a:	2101      	movs	r1, #1
 800906c:	910e      	str	r1, [sp, #56]	@ 0x38
 800906e:	1c51      	adds	r1, r2, #1
 8009070:	9119      	str	r1, [sp, #100]	@ 0x64
 8009072:	7852      	ldrb	r2, [r2, #1]
 8009074:	2a00      	cmp	r2, #0
 8009076:	d1c5      	bne.n	8009004 <_strtod_l+0x34>
 8009078:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 800907a:	9419      	str	r4, [sp, #100]	@ 0x64
 800907c:	2b00      	cmp	r3, #0
 800907e:	f040 8570 	bne.w	8009b62 <_strtod_l+0xb92>
 8009082:	4652      	mov	r2, sl
 8009084:	465b      	mov	r3, fp
 8009086:	e7e5      	b.n	8009054 <_strtod_l+0x84>
 8009088:	2100      	movs	r1, #0
 800908a:	e7ef      	b.n	800906c <_strtod_l+0x9c>
 800908c:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 800908e:	b13a      	cbz	r2, 80090a0 <_strtod_l+0xd0>
 8009090:	2135      	movs	r1, #53	@ 0x35
 8009092:	a81c      	add	r0, sp, #112	@ 0x70
 8009094:	f7ff ff3a 	bl	8008f0c <__copybits>
 8009098:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800909a:	9805      	ldr	r0, [sp, #20]
 800909c:	f7ff fb10 	bl	80086c0 <_Bfree>
 80090a0:	3e01      	subs	r6, #1
 80090a2:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 80090a4:	2e04      	cmp	r6, #4
 80090a6:	d806      	bhi.n	80090b6 <_strtod_l+0xe6>
 80090a8:	e8df f006 	tbb	[pc, r6]
 80090ac:	201d0314 	.word	0x201d0314
 80090b0:	14          	.byte	0x14
 80090b1:	00          	.byte	0x00
 80090b2:	e9dd ab1c 	ldrd	sl, fp, [sp, #112]	@ 0x70
 80090b6:	05e1      	lsls	r1, r4, #23
 80090b8:	bf48      	it	mi
 80090ba:	f04b 4b00 	orrmi.w	fp, fp, #2147483648	@ 0x80000000
 80090be:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80090c2:	0d1b      	lsrs	r3, r3, #20
 80090c4:	051b      	lsls	r3, r3, #20
 80090c6:	2b00      	cmp	r3, #0
 80090c8:	d1bb      	bne.n	8009042 <_strtod_l+0x72>
 80090ca:	f7fe fb2d 	bl	8007728 <__errno>
 80090ce:	2322      	movs	r3, #34	@ 0x22
 80090d0:	6003      	str	r3, [r0, #0]
 80090d2:	e7b6      	b.n	8009042 <_strtod_l+0x72>
 80090d4:	e9dd a31c 	ldrd	sl, r3, [sp, #112]	@ 0x70
 80090d8:	f202 4233 	addw	r2, r2, #1075	@ 0x433
 80090dc:	f423 1380 	bic.w	r3, r3, #1048576	@ 0x100000
 80090e0:	ea43 5b02 	orr.w	fp, r3, r2, lsl #20
 80090e4:	e7e7      	b.n	80090b6 <_strtod_l+0xe6>
 80090e6:	f8df b180 	ldr.w	fp, [pc, #384]	@ 8009268 <_strtod_l+0x298>
 80090ea:	e7e4      	b.n	80090b6 <_strtod_l+0xe6>
 80090ec:	f06f 4b00 	mvn.w	fp, #2147483648	@ 0x80000000
 80090f0:	f04f 3aff 	mov.w	sl, #4294967295
 80090f4:	e7df      	b.n	80090b6 <_strtod_l+0xe6>
 80090f6:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80090f8:	1c5a      	adds	r2, r3, #1
 80090fa:	9219      	str	r2, [sp, #100]	@ 0x64
 80090fc:	785b      	ldrb	r3, [r3, #1]
 80090fe:	2b30      	cmp	r3, #48	@ 0x30
 8009100:	d0f9      	beq.n	80090f6 <_strtod_l+0x126>
 8009102:	2b00      	cmp	r3, #0
 8009104:	d09d      	beq.n	8009042 <_strtod_l+0x72>
 8009106:	2301      	movs	r3, #1
 8009108:	2700      	movs	r7, #0
 800910a:	9308      	str	r3, [sp, #32]
 800910c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 800910e:	930c      	str	r3, [sp, #48]	@ 0x30
 8009110:	970b      	str	r7, [sp, #44]	@ 0x2c
 8009112:	46b9      	mov	r9, r7
 8009114:	220a      	movs	r2, #10
 8009116:	9819      	ldr	r0, [sp, #100]	@ 0x64
 8009118:	7805      	ldrb	r5, [r0, #0]
 800911a:	f1a5 0330 	sub.w	r3, r5, #48	@ 0x30
 800911e:	b2d9      	uxtb	r1, r3
 8009120:	2909      	cmp	r1, #9
 8009122:	d928      	bls.n	8009176 <_strtod_l+0x1a6>
 8009124:	494f      	ldr	r1, [pc, #316]	@ (8009264 <_strtod_l+0x294>)
 8009126:	2201      	movs	r2, #1
 8009128:	f001 f97a 	bl	800a420 <strncmp>
 800912c:	2800      	cmp	r0, #0
 800912e:	d032      	beq.n	8009196 <_strtod_l+0x1c6>
 8009130:	2000      	movs	r0, #0
 8009132:	462a      	mov	r2, r5
 8009134:	900a      	str	r0, [sp, #40]	@ 0x28
 8009136:	464d      	mov	r5, r9
 8009138:	4603      	mov	r3, r0
 800913a:	2a65      	cmp	r2, #101	@ 0x65
 800913c:	d001      	beq.n	8009142 <_strtod_l+0x172>
 800913e:	2a45      	cmp	r2, #69	@ 0x45
 8009140:	d114      	bne.n	800916c <_strtod_l+0x19c>
 8009142:	b91d      	cbnz	r5, 800914c <_strtod_l+0x17c>
 8009144:	9a08      	ldr	r2, [sp, #32]
 8009146:	4302      	orrs	r2, r0
 8009148:	d096      	beq.n	8009078 <_strtod_l+0xa8>
 800914a:	2500      	movs	r5, #0
 800914c:	9c19      	ldr	r4, [sp, #100]	@ 0x64
 800914e:	1c62      	adds	r2, r4, #1
 8009150:	9219      	str	r2, [sp, #100]	@ 0x64
 8009152:	7862      	ldrb	r2, [r4, #1]
 8009154:	2a2b      	cmp	r2, #43	@ 0x2b
 8009156:	d07a      	beq.n	800924e <_strtod_l+0x27e>
 8009158:	2a2d      	cmp	r2, #45	@ 0x2d
 800915a:	d07e      	beq.n	800925a <_strtod_l+0x28a>
 800915c:	f04f 0c00 	mov.w	ip, #0
 8009160:	f1a2 0130 	sub.w	r1, r2, #48	@ 0x30
 8009164:	2909      	cmp	r1, #9
 8009166:	f240 8085 	bls.w	8009274 <_strtod_l+0x2a4>
 800916a:	9419      	str	r4, [sp, #100]	@ 0x64
 800916c:	f04f 0800 	mov.w	r8, #0
 8009170:	e0a5      	b.n	80092be <_strtod_l+0x2ee>
 8009172:	2300      	movs	r3, #0
 8009174:	e7c8      	b.n	8009108 <_strtod_l+0x138>
 8009176:	f1b9 0f08 	cmp.w	r9, #8
 800917a:	bfd8      	it	le
 800917c:	990b      	ldrle	r1, [sp, #44]	@ 0x2c
 800917e:	f100 0001 	add.w	r0, r0, #1
 8009182:	bfda      	itte	le
 8009184:	fb02 3301 	mlale	r3, r2, r1, r3
 8009188:	930b      	strle	r3, [sp, #44]	@ 0x2c
 800918a:	fb02 3707 	mlagt	r7, r2, r7, r3
 800918e:	f109 0901 	add.w	r9, r9, #1
 8009192:	9019      	str	r0, [sp, #100]	@ 0x64
 8009194:	e7bf      	b.n	8009116 <_strtod_l+0x146>
 8009196:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009198:	1c5a      	adds	r2, r3, #1
 800919a:	9219      	str	r2, [sp, #100]	@ 0x64
 800919c:	785a      	ldrb	r2, [r3, #1]
 800919e:	f1b9 0f00 	cmp.w	r9, #0
 80091a2:	d03b      	beq.n	800921c <_strtod_l+0x24c>
 80091a4:	900a      	str	r0, [sp, #40]	@ 0x28
 80091a6:	464d      	mov	r5, r9
 80091a8:	f1a2 0330 	sub.w	r3, r2, #48	@ 0x30
 80091ac:	2b09      	cmp	r3, #9
 80091ae:	d912      	bls.n	80091d6 <_strtod_l+0x206>
 80091b0:	2301      	movs	r3, #1
 80091b2:	e7c2      	b.n	800913a <_strtod_l+0x16a>
 80091b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091b6:	1c5a      	adds	r2, r3, #1
 80091b8:	9219      	str	r2, [sp, #100]	@ 0x64
 80091ba:	785a      	ldrb	r2, [r3, #1]
 80091bc:	3001      	adds	r0, #1
 80091be:	2a30      	cmp	r2, #48	@ 0x30
 80091c0:	d0f8      	beq.n	80091b4 <_strtod_l+0x1e4>
 80091c2:	f1a2 0331 	sub.w	r3, r2, #49	@ 0x31
 80091c6:	2b08      	cmp	r3, #8
 80091c8:	f200 84d2 	bhi.w	8009b70 <_strtod_l+0xba0>
 80091cc:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80091ce:	900a      	str	r0, [sp, #40]	@ 0x28
 80091d0:	2000      	movs	r0, #0
 80091d2:	930c      	str	r3, [sp, #48]	@ 0x30
 80091d4:	4605      	mov	r5, r0
 80091d6:	3a30      	subs	r2, #48	@ 0x30
 80091d8:	f100 0301 	add.w	r3, r0, #1
 80091dc:	d018      	beq.n	8009210 <_strtod_l+0x240>
 80091de:	990a      	ldr	r1, [sp, #40]	@ 0x28
 80091e0:	4419      	add	r1, r3
 80091e2:	910a      	str	r1, [sp, #40]	@ 0x28
 80091e4:	462e      	mov	r6, r5
 80091e6:	f04f 0e0a 	mov.w	lr, #10
 80091ea:	1c71      	adds	r1, r6, #1
 80091ec:	eba1 0c05 	sub.w	ip, r1, r5
 80091f0:	4563      	cmp	r3, ip
 80091f2:	dc15      	bgt.n	8009220 <_strtod_l+0x250>
 80091f4:	ea20 70e0 	bic.w	r0, r0, r0, asr #31
 80091f8:	182b      	adds	r3, r5, r0
 80091fa:	2b08      	cmp	r3, #8
 80091fc:	f105 0501 	add.w	r5, r5, #1
 8009200:	4405      	add	r5, r0
 8009202:	dc1a      	bgt.n	800923a <_strtod_l+0x26a>
 8009204:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009206:	230a      	movs	r3, #10
 8009208:	fb03 2301 	mla	r3, r3, r1, r2
 800920c:	930b      	str	r3, [sp, #44]	@ 0x2c
 800920e:	2300      	movs	r3, #0
 8009210:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009212:	1c51      	adds	r1, r2, #1
 8009214:	9119      	str	r1, [sp, #100]	@ 0x64
 8009216:	7852      	ldrb	r2, [r2, #1]
 8009218:	4618      	mov	r0, r3
 800921a:	e7c5      	b.n	80091a8 <_strtod_l+0x1d8>
 800921c:	4648      	mov	r0, r9
 800921e:	e7ce      	b.n	80091be <_strtod_l+0x1ee>
 8009220:	2e08      	cmp	r6, #8
 8009222:	dc05      	bgt.n	8009230 <_strtod_l+0x260>
 8009224:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 8009226:	fb0e f606 	mul.w	r6, lr, r6
 800922a:	960b      	str	r6, [sp, #44]	@ 0x2c
 800922c:	460e      	mov	r6, r1
 800922e:	e7dc      	b.n	80091ea <_strtod_l+0x21a>
 8009230:	2910      	cmp	r1, #16
 8009232:	bfd8      	it	le
 8009234:	fb0e f707 	mulle.w	r7, lr, r7
 8009238:	e7f8      	b.n	800922c <_strtod_l+0x25c>
 800923a:	2b0f      	cmp	r3, #15
 800923c:	bfdc      	itt	le
 800923e:	230a      	movle	r3, #10
 8009240:	fb03 2707 	mlale	r7, r3, r7, r2
 8009244:	e7e3      	b.n	800920e <_strtod_l+0x23e>
 8009246:	2300      	movs	r3, #0
 8009248:	930a      	str	r3, [sp, #40]	@ 0x28
 800924a:	2301      	movs	r3, #1
 800924c:	e77a      	b.n	8009144 <_strtod_l+0x174>
 800924e:	f04f 0c00 	mov.w	ip, #0
 8009252:	1ca2      	adds	r2, r4, #2
 8009254:	9219      	str	r2, [sp, #100]	@ 0x64
 8009256:	78a2      	ldrb	r2, [r4, #2]
 8009258:	e782      	b.n	8009160 <_strtod_l+0x190>
 800925a:	f04f 0c01 	mov.w	ip, #1
 800925e:	e7f8      	b.n	8009252 <_strtod_l+0x282>
 8009260:	0800b214 	.word	0x0800b214
 8009264:	0800b04b 	.word	0x0800b04b
 8009268:	7ff00000 	.word	0x7ff00000
 800926c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 800926e:	1c51      	adds	r1, r2, #1
 8009270:	9119      	str	r1, [sp, #100]	@ 0x64
 8009272:	7852      	ldrb	r2, [r2, #1]
 8009274:	2a30      	cmp	r2, #48	@ 0x30
 8009276:	d0f9      	beq.n	800926c <_strtod_l+0x29c>
 8009278:	f1a2 0131 	sub.w	r1, r2, #49	@ 0x31
 800927c:	2908      	cmp	r1, #8
 800927e:	f63f af75 	bhi.w	800916c <_strtod_l+0x19c>
 8009282:	3a30      	subs	r2, #48	@ 0x30
 8009284:	9209      	str	r2, [sp, #36]	@ 0x24
 8009286:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009288:	920f      	str	r2, [sp, #60]	@ 0x3c
 800928a:	f04f 080a 	mov.w	r8, #10
 800928e:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 8009290:	1c56      	adds	r6, r2, #1
 8009292:	9619      	str	r6, [sp, #100]	@ 0x64
 8009294:	7852      	ldrb	r2, [r2, #1]
 8009296:	f1a2 0e30 	sub.w	lr, r2, #48	@ 0x30
 800929a:	f1be 0f09 	cmp.w	lr, #9
 800929e:	d939      	bls.n	8009314 <_strtod_l+0x344>
 80092a0:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 80092a2:	1a76      	subs	r6, r6, r1
 80092a4:	2e08      	cmp	r6, #8
 80092a6:	f644 681f 	movw	r8, #19999	@ 0x4e1f
 80092aa:	dc03      	bgt.n	80092b4 <_strtod_l+0x2e4>
 80092ac:	9909      	ldr	r1, [sp, #36]	@ 0x24
 80092ae:	4588      	cmp	r8, r1
 80092b0:	bfa8      	it	ge
 80092b2:	4688      	movge	r8, r1
 80092b4:	f1bc 0f00 	cmp.w	ip, #0
 80092b8:	d001      	beq.n	80092be <_strtod_l+0x2ee>
 80092ba:	f1c8 0800 	rsb	r8, r8, #0
 80092be:	2d00      	cmp	r5, #0
 80092c0:	d14e      	bne.n	8009360 <_strtod_l+0x390>
 80092c2:	9908      	ldr	r1, [sp, #32]
 80092c4:	4308      	orrs	r0, r1
 80092c6:	f47f aebc 	bne.w	8009042 <_strtod_l+0x72>
 80092ca:	2b00      	cmp	r3, #0
 80092cc:	f47f aed4 	bne.w	8009078 <_strtod_l+0xa8>
 80092d0:	2a69      	cmp	r2, #105	@ 0x69
 80092d2:	d028      	beq.n	8009326 <_strtod_l+0x356>
 80092d4:	dc25      	bgt.n	8009322 <_strtod_l+0x352>
 80092d6:	2a49      	cmp	r2, #73	@ 0x49
 80092d8:	d025      	beq.n	8009326 <_strtod_l+0x356>
 80092da:	2a4e      	cmp	r2, #78	@ 0x4e
 80092dc:	f47f aecc 	bne.w	8009078 <_strtod_l+0xa8>
 80092e0:	499a      	ldr	r1, [pc, #616]	@ (800954c <_strtod_l+0x57c>)
 80092e2:	a819      	add	r0, sp, #100	@ 0x64
 80092e4:	f001 fbb4 	bl	800aa50 <__match>
 80092e8:	2800      	cmp	r0, #0
 80092ea:	f43f aec5 	beq.w	8009078 <_strtod_l+0xa8>
 80092ee:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 80092f0:	781b      	ldrb	r3, [r3, #0]
 80092f2:	2b28      	cmp	r3, #40	@ 0x28
 80092f4:	d12e      	bne.n	8009354 <_strtod_l+0x384>
 80092f6:	4996      	ldr	r1, [pc, #600]	@ (8009550 <_strtod_l+0x580>)
 80092f8:	aa1c      	add	r2, sp, #112	@ 0x70
 80092fa:	a819      	add	r0, sp, #100	@ 0x64
 80092fc:	f001 fbbc 	bl	800aa78 <__hexnan>
 8009300:	2805      	cmp	r0, #5
 8009302:	d127      	bne.n	8009354 <_strtod_l+0x384>
 8009304:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 8009306:	f8dd a070 	ldr.w	sl, [sp, #112]	@ 0x70
 800930a:	f043 4bff 	orr.w	fp, r3, #2139095040	@ 0x7f800000
 800930e:	f44b 0be0 	orr.w	fp, fp, #7340032	@ 0x700000
 8009312:	e696      	b.n	8009042 <_strtod_l+0x72>
 8009314:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8009316:	fb08 2101 	mla	r1, r8, r1, r2
 800931a:	f1a1 0230 	sub.w	r2, r1, #48	@ 0x30
 800931e:	9209      	str	r2, [sp, #36]	@ 0x24
 8009320:	e7b5      	b.n	800928e <_strtod_l+0x2be>
 8009322:	2a6e      	cmp	r2, #110	@ 0x6e
 8009324:	e7da      	b.n	80092dc <_strtod_l+0x30c>
 8009326:	498b      	ldr	r1, [pc, #556]	@ (8009554 <_strtod_l+0x584>)
 8009328:	a819      	add	r0, sp, #100	@ 0x64
 800932a:	f001 fb91 	bl	800aa50 <__match>
 800932e:	2800      	cmp	r0, #0
 8009330:	f43f aea2 	beq.w	8009078 <_strtod_l+0xa8>
 8009334:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009336:	4988      	ldr	r1, [pc, #544]	@ (8009558 <_strtod_l+0x588>)
 8009338:	3b01      	subs	r3, #1
 800933a:	a819      	add	r0, sp, #100	@ 0x64
 800933c:	9319      	str	r3, [sp, #100]	@ 0x64
 800933e:	f001 fb87 	bl	800aa50 <__match>
 8009342:	b910      	cbnz	r0, 800934a <_strtod_l+0x37a>
 8009344:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009346:	3301      	adds	r3, #1
 8009348:	9319      	str	r3, [sp, #100]	@ 0x64
 800934a:	f8df b21c 	ldr.w	fp, [pc, #540]	@ 8009568 <_strtod_l+0x598>
 800934e:	f04f 0a00 	mov.w	sl, #0
 8009352:	e676      	b.n	8009042 <_strtod_l+0x72>
 8009354:	4881      	ldr	r0, [pc, #516]	@ (800955c <_strtod_l+0x58c>)
 8009356:	f001 f8b7 	bl	800a4c8 <nan>
 800935a:	ec5b ab10 	vmov	sl, fp, d0
 800935e:	e670      	b.n	8009042 <_strtod_l+0x72>
 8009360:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009362:	980b      	ldr	r0, [sp, #44]	@ 0x2c
 8009364:	eba8 0303 	sub.w	r3, r8, r3
 8009368:	f1b9 0f00 	cmp.w	r9, #0
 800936c:	bf08      	it	eq
 800936e:	46a9      	moveq	r9, r5
 8009370:	2d10      	cmp	r5, #16
 8009372:	9309      	str	r3, [sp, #36]	@ 0x24
 8009374:	462c      	mov	r4, r5
 8009376:	bfa8      	it	ge
 8009378:	2410      	movge	r4, #16
 800937a:	f7f7 f8cb 	bl	8000514 <__aeabi_ui2d>
 800937e:	2d09      	cmp	r5, #9
 8009380:	4682      	mov	sl, r0
 8009382:	468b      	mov	fp, r1
 8009384:	dc13      	bgt.n	80093ae <_strtod_l+0x3de>
 8009386:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009388:	2b00      	cmp	r3, #0
 800938a:	f43f ae5a 	beq.w	8009042 <_strtod_l+0x72>
 800938e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009390:	dd78      	ble.n	8009484 <_strtod_l+0x4b4>
 8009392:	2b16      	cmp	r3, #22
 8009394:	dc5f      	bgt.n	8009456 <_strtod_l+0x486>
 8009396:	4972      	ldr	r1, [pc, #456]	@ (8009560 <_strtod_l+0x590>)
 8009398:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 800939c:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093a0:	4652      	mov	r2, sl
 80093a2:	465b      	mov	r3, fp
 80093a4:	f7f7 f930 	bl	8000608 <__aeabi_dmul>
 80093a8:	4682      	mov	sl, r0
 80093aa:	468b      	mov	fp, r1
 80093ac:	e649      	b.n	8009042 <_strtod_l+0x72>
 80093ae:	4b6c      	ldr	r3, [pc, #432]	@ (8009560 <_strtod_l+0x590>)
 80093b0:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80093b4:	e953 2312 	ldrd	r2, r3, [r3, #-72]	@ 0x48
 80093b8:	f7f7 f926 	bl	8000608 <__aeabi_dmul>
 80093bc:	4682      	mov	sl, r0
 80093be:	4638      	mov	r0, r7
 80093c0:	468b      	mov	fp, r1
 80093c2:	f7f7 f8a7 	bl	8000514 <__aeabi_ui2d>
 80093c6:	4602      	mov	r2, r0
 80093c8:	460b      	mov	r3, r1
 80093ca:	4650      	mov	r0, sl
 80093cc:	4659      	mov	r1, fp
 80093ce:	f7f6 ff65 	bl	800029c <__adddf3>
 80093d2:	2d0f      	cmp	r5, #15
 80093d4:	4682      	mov	sl, r0
 80093d6:	468b      	mov	fp, r1
 80093d8:	ddd5      	ble.n	8009386 <_strtod_l+0x3b6>
 80093da:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80093dc:	1b2c      	subs	r4, r5, r4
 80093de:	441c      	add	r4, r3
 80093e0:	2c00      	cmp	r4, #0
 80093e2:	f340 8093 	ble.w	800950c <_strtod_l+0x53c>
 80093e6:	f014 030f 	ands.w	r3, r4, #15
 80093ea:	d00a      	beq.n	8009402 <_strtod_l+0x432>
 80093ec:	495c      	ldr	r1, [pc, #368]	@ (8009560 <_strtod_l+0x590>)
 80093ee:	eb01 01c3 	add.w	r1, r1, r3, lsl #3
 80093f2:	4652      	mov	r2, sl
 80093f4:	465b      	mov	r3, fp
 80093f6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80093fa:	f7f7 f905 	bl	8000608 <__aeabi_dmul>
 80093fe:	4682      	mov	sl, r0
 8009400:	468b      	mov	fp, r1
 8009402:	f034 040f 	bics.w	r4, r4, #15
 8009406:	d073      	beq.n	80094f0 <_strtod_l+0x520>
 8009408:	f5b4 7f9a 	cmp.w	r4, #308	@ 0x134
 800940c:	dd49      	ble.n	80094a2 <_strtod_l+0x4d2>
 800940e:	2400      	movs	r4, #0
 8009410:	46a0      	mov	r8, r4
 8009412:	940b      	str	r4, [sp, #44]	@ 0x2c
 8009414:	46a1      	mov	r9, r4
 8009416:	9a05      	ldr	r2, [sp, #20]
 8009418:	f8df b14c 	ldr.w	fp, [pc, #332]	@ 8009568 <_strtod_l+0x598>
 800941c:	2322      	movs	r3, #34	@ 0x22
 800941e:	6013      	str	r3, [r2, #0]
 8009420:	f04f 0a00 	mov.w	sl, #0
 8009424:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009426:	2b00      	cmp	r3, #0
 8009428:	f43f ae0b 	beq.w	8009042 <_strtod_l+0x72>
 800942c:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800942e:	9805      	ldr	r0, [sp, #20]
 8009430:	f7ff f946 	bl	80086c0 <_Bfree>
 8009434:	9805      	ldr	r0, [sp, #20]
 8009436:	4649      	mov	r1, r9
 8009438:	f7ff f942 	bl	80086c0 <_Bfree>
 800943c:	9805      	ldr	r0, [sp, #20]
 800943e:	4641      	mov	r1, r8
 8009440:	f7ff f93e 	bl	80086c0 <_Bfree>
 8009444:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 8009446:	9805      	ldr	r0, [sp, #20]
 8009448:	f7ff f93a 	bl	80086c0 <_Bfree>
 800944c:	9805      	ldr	r0, [sp, #20]
 800944e:	4621      	mov	r1, r4
 8009450:	f7ff f936 	bl	80086c0 <_Bfree>
 8009454:	e5f5      	b.n	8009042 <_strtod_l+0x72>
 8009456:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009458:	f1c5 0325 	rsb	r3, r5, #37	@ 0x25
 800945c:	4293      	cmp	r3, r2
 800945e:	dbbc      	blt.n	80093da <_strtod_l+0x40a>
 8009460:	4c3f      	ldr	r4, [pc, #252]	@ (8009560 <_strtod_l+0x590>)
 8009462:	f1c5 050f 	rsb	r5, r5, #15
 8009466:	eb04 01c5 	add.w	r1, r4, r5, lsl #3
 800946a:	4652      	mov	r2, sl
 800946c:	465b      	mov	r3, fp
 800946e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009472:	f7f7 f8c9 	bl	8000608 <__aeabi_dmul>
 8009476:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009478:	1b5d      	subs	r5, r3, r5
 800947a:	eb04 04c5 	add.w	r4, r4, r5, lsl #3
 800947e:	e9d4 2300 	ldrd	r2, r3, [r4]
 8009482:	e78f      	b.n	80093a4 <_strtod_l+0x3d4>
 8009484:	3316      	adds	r3, #22
 8009486:	dba8      	blt.n	80093da <_strtod_l+0x40a>
 8009488:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800948a:	eba3 0808 	sub.w	r8, r3, r8
 800948e:	4b34      	ldr	r3, [pc, #208]	@ (8009560 <_strtod_l+0x590>)
 8009490:	eb03 08c8 	add.w	r8, r3, r8, lsl #3
 8009494:	e9d8 2300 	ldrd	r2, r3, [r8]
 8009498:	4650      	mov	r0, sl
 800949a:	4659      	mov	r1, fp
 800949c:	f7f7 f9de 	bl	800085c <__aeabi_ddiv>
 80094a0:	e782      	b.n	80093a8 <_strtod_l+0x3d8>
 80094a2:	2300      	movs	r3, #0
 80094a4:	4f2f      	ldr	r7, [pc, #188]	@ (8009564 <_strtod_l+0x594>)
 80094a6:	1124      	asrs	r4, r4, #4
 80094a8:	4650      	mov	r0, sl
 80094aa:	4659      	mov	r1, fp
 80094ac:	461e      	mov	r6, r3
 80094ae:	2c01      	cmp	r4, #1
 80094b0:	dc21      	bgt.n	80094f6 <_strtod_l+0x526>
 80094b2:	b10b      	cbz	r3, 80094b8 <_strtod_l+0x4e8>
 80094b4:	4682      	mov	sl, r0
 80094b6:	468b      	mov	fp, r1
 80094b8:	492a      	ldr	r1, [pc, #168]	@ (8009564 <_strtod_l+0x594>)
 80094ba:	f1ab 7b54 	sub.w	fp, fp, #55574528	@ 0x3500000
 80094be:	eb01 01c6 	add.w	r1, r1, r6, lsl #3
 80094c2:	4652      	mov	r2, sl
 80094c4:	465b      	mov	r3, fp
 80094c6:	e9d1 0100 	ldrd	r0, r1, [r1]
 80094ca:	f7f7 f89d 	bl	8000608 <__aeabi_dmul>
 80094ce:	4b26      	ldr	r3, [pc, #152]	@ (8009568 <_strtod_l+0x598>)
 80094d0:	460a      	mov	r2, r1
 80094d2:	400b      	ands	r3, r1
 80094d4:	4925      	ldr	r1, [pc, #148]	@ (800956c <_strtod_l+0x59c>)
 80094d6:	428b      	cmp	r3, r1
 80094d8:	4682      	mov	sl, r0
 80094da:	d898      	bhi.n	800940e <_strtod_l+0x43e>
 80094dc:	f5a1 1180 	sub.w	r1, r1, #1048576	@ 0x100000
 80094e0:	428b      	cmp	r3, r1
 80094e2:	bf86      	itte	hi
 80094e4:	f8df b088 	ldrhi.w	fp, [pc, #136]	@ 8009570 <_strtod_l+0x5a0>
 80094e8:	f04f 3aff 	movhi.w	sl, #4294967295
 80094ec:	f102 7b54 	addls.w	fp, r2, #55574528	@ 0x3500000
 80094f0:	2300      	movs	r3, #0
 80094f2:	9308      	str	r3, [sp, #32]
 80094f4:	e076      	b.n	80095e4 <_strtod_l+0x614>
 80094f6:	07e2      	lsls	r2, r4, #31
 80094f8:	d504      	bpl.n	8009504 <_strtod_l+0x534>
 80094fa:	e9d7 2300 	ldrd	r2, r3, [r7]
 80094fe:	f7f7 f883 	bl	8000608 <__aeabi_dmul>
 8009502:	2301      	movs	r3, #1
 8009504:	3601      	adds	r6, #1
 8009506:	1064      	asrs	r4, r4, #1
 8009508:	3708      	adds	r7, #8
 800950a:	e7d0      	b.n	80094ae <_strtod_l+0x4de>
 800950c:	d0f0      	beq.n	80094f0 <_strtod_l+0x520>
 800950e:	4264      	negs	r4, r4
 8009510:	f014 020f 	ands.w	r2, r4, #15
 8009514:	d00a      	beq.n	800952c <_strtod_l+0x55c>
 8009516:	4b12      	ldr	r3, [pc, #72]	@ (8009560 <_strtod_l+0x590>)
 8009518:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 800951c:	4650      	mov	r0, sl
 800951e:	4659      	mov	r1, fp
 8009520:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009524:	f7f7 f99a 	bl	800085c <__aeabi_ddiv>
 8009528:	4682      	mov	sl, r0
 800952a:	468b      	mov	fp, r1
 800952c:	1124      	asrs	r4, r4, #4
 800952e:	d0df      	beq.n	80094f0 <_strtod_l+0x520>
 8009530:	2c1f      	cmp	r4, #31
 8009532:	dd1f      	ble.n	8009574 <_strtod_l+0x5a4>
 8009534:	2400      	movs	r4, #0
 8009536:	46a0      	mov	r8, r4
 8009538:	940b      	str	r4, [sp, #44]	@ 0x2c
 800953a:	46a1      	mov	r9, r4
 800953c:	9a05      	ldr	r2, [sp, #20]
 800953e:	2322      	movs	r3, #34	@ 0x22
 8009540:	f04f 0a00 	mov.w	sl, #0
 8009544:	f04f 0b00 	mov.w	fp, #0
 8009548:	6013      	str	r3, [r2, #0]
 800954a:	e76b      	b.n	8009424 <_strtod_l+0x454>
 800954c:	0800af39 	.word	0x0800af39
 8009550:	0800b200 	.word	0x0800b200
 8009554:	0800af31 	.word	0x0800af31
 8009558:	0800af68 	.word	0x0800af68
 800955c:	0800b0a1 	.word	0x0800b0a1
 8009560:	0800b138 	.word	0x0800b138
 8009564:	0800b110 	.word	0x0800b110
 8009568:	7ff00000 	.word	0x7ff00000
 800956c:	7ca00000 	.word	0x7ca00000
 8009570:	7fefffff 	.word	0x7fefffff
 8009574:	f014 0310 	ands.w	r3, r4, #16
 8009578:	bf18      	it	ne
 800957a:	236a      	movne	r3, #106	@ 0x6a
 800957c:	4ea9      	ldr	r6, [pc, #676]	@ (8009824 <_strtod_l+0x854>)
 800957e:	9308      	str	r3, [sp, #32]
 8009580:	4650      	mov	r0, sl
 8009582:	4659      	mov	r1, fp
 8009584:	2300      	movs	r3, #0
 8009586:	07e7      	lsls	r7, r4, #31
 8009588:	d504      	bpl.n	8009594 <_strtod_l+0x5c4>
 800958a:	e9d6 2300 	ldrd	r2, r3, [r6]
 800958e:	f7f7 f83b 	bl	8000608 <__aeabi_dmul>
 8009592:	2301      	movs	r3, #1
 8009594:	1064      	asrs	r4, r4, #1
 8009596:	f106 0608 	add.w	r6, r6, #8
 800959a:	d1f4      	bne.n	8009586 <_strtod_l+0x5b6>
 800959c:	b10b      	cbz	r3, 80095a2 <_strtod_l+0x5d2>
 800959e:	4682      	mov	sl, r0
 80095a0:	468b      	mov	fp, r1
 80095a2:	9b08      	ldr	r3, [sp, #32]
 80095a4:	b1b3      	cbz	r3, 80095d4 <_strtod_l+0x604>
 80095a6:	f3cb 520a 	ubfx	r2, fp, #20, #11
 80095aa:	f1c2 036b 	rsb	r3, r2, #107	@ 0x6b
 80095ae:	2b00      	cmp	r3, #0
 80095b0:	4659      	mov	r1, fp
 80095b2:	dd0f      	ble.n	80095d4 <_strtod_l+0x604>
 80095b4:	2b1f      	cmp	r3, #31
 80095b6:	dd56      	ble.n	8009666 <_strtod_l+0x696>
 80095b8:	2b34      	cmp	r3, #52	@ 0x34
 80095ba:	bfde      	ittt	le
 80095bc:	f04f 33ff 	movle.w	r3, #4294967295
 80095c0:	f1c2 024b 	rsble	r2, r2, #75	@ 0x4b
 80095c4:	4093      	lslle	r3, r2
 80095c6:	f04f 0a00 	mov.w	sl, #0
 80095ca:	bfcc      	ite	gt
 80095cc:	f04f 7b5c 	movgt.w	fp, #57671680	@ 0x3700000
 80095d0:	ea03 0b01 	andle.w	fp, r3, r1
 80095d4:	2200      	movs	r2, #0
 80095d6:	2300      	movs	r3, #0
 80095d8:	4650      	mov	r0, sl
 80095da:	4659      	mov	r1, fp
 80095dc:	f7f7 fa7c 	bl	8000ad8 <__aeabi_dcmpeq>
 80095e0:	2800      	cmp	r0, #0
 80095e2:	d1a7      	bne.n	8009534 <_strtod_l+0x564>
 80095e4:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80095e6:	9300      	str	r3, [sp, #0]
 80095e8:	990c      	ldr	r1, [sp, #48]	@ 0x30
 80095ea:	9805      	ldr	r0, [sp, #20]
 80095ec:	462b      	mov	r3, r5
 80095ee:	464a      	mov	r2, r9
 80095f0:	f7ff f8ce 	bl	8008790 <__s2b>
 80095f4:	900b      	str	r0, [sp, #44]	@ 0x2c
 80095f6:	2800      	cmp	r0, #0
 80095f8:	f43f af09 	beq.w	800940e <_strtod_l+0x43e>
 80095fc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 80095fe:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009600:	2a00      	cmp	r2, #0
 8009602:	eba3 0308 	sub.w	r3, r3, r8
 8009606:	bfa8      	it	ge
 8009608:	2300      	movge	r3, #0
 800960a:	9312      	str	r3, [sp, #72]	@ 0x48
 800960c:	2400      	movs	r4, #0
 800960e:	ea22 73e2 	bic.w	r3, r2, r2, asr #31
 8009612:	9316      	str	r3, [sp, #88]	@ 0x58
 8009614:	46a0      	mov	r8, r4
 8009616:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8009618:	9805      	ldr	r0, [sp, #20]
 800961a:	6859      	ldr	r1, [r3, #4]
 800961c:	f7ff f810 	bl	8008640 <_Balloc>
 8009620:	4681      	mov	r9, r0
 8009622:	2800      	cmp	r0, #0
 8009624:	f43f aef7 	beq.w	8009416 <_strtod_l+0x446>
 8009628:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 800962a:	691a      	ldr	r2, [r3, #16]
 800962c:	3202      	adds	r2, #2
 800962e:	f103 010c 	add.w	r1, r3, #12
 8009632:	0092      	lsls	r2, r2, #2
 8009634:	300c      	adds	r0, #12
 8009636:	f000 ff37 	bl	800a4a8 <memcpy>
 800963a:	ec4b ab10 	vmov	d0, sl, fp
 800963e:	9805      	ldr	r0, [sp, #20]
 8009640:	aa1c      	add	r2, sp, #112	@ 0x70
 8009642:	a91b      	add	r1, sp, #108	@ 0x6c
 8009644:	e9cd ab0c 	strd	sl, fp, [sp, #48]	@ 0x30
 8009648:	f7ff fbd6 	bl	8008df8 <__d2b>
 800964c:	901a      	str	r0, [sp, #104]	@ 0x68
 800964e:	2800      	cmp	r0, #0
 8009650:	f43f aee1 	beq.w	8009416 <_strtod_l+0x446>
 8009654:	9805      	ldr	r0, [sp, #20]
 8009656:	2101      	movs	r1, #1
 8009658:	f7ff f930 	bl	80088bc <__i2b>
 800965c:	4680      	mov	r8, r0
 800965e:	b948      	cbnz	r0, 8009674 <_strtod_l+0x6a4>
 8009660:	f04f 0800 	mov.w	r8, #0
 8009664:	e6d7      	b.n	8009416 <_strtod_l+0x446>
 8009666:	f04f 32ff 	mov.w	r2, #4294967295
 800966a:	fa02 f303 	lsl.w	r3, r2, r3
 800966e:	ea03 0a0a 	and.w	sl, r3, sl
 8009672:	e7af      	b.n	80095d4 <_strtod_l+0x604>
 8009674:	9d1b      	ldr	r5, [sp, #108]	@ 0x6c
 8009676:	9a1c      	ldr	r2, [sp, #112]	@ 0x70
 8009678:	2d00      	cmp	r5, #0
 800967a:	bfab      	itete	ge
 800967c:	9b12      	ldrge	r3, [sp, #72]	@ 0x48
 800967e:	9b16      	ldrlt	r3, [sp, #88]	@ 0x58
 8009680:	9e16      	ldrge	r6, [sp, #88]	@ 0x58
 8009682:	9f12      	ldrlt	r7, [sp, #72]	@ 0x48
 8009684:	bfac      	ite	ge
 8009686:	18ef      	addge	r7, r5, r3
 8009688:	1b5e      	sublt	r6, r3, r5
 800968a:	9b08      	ldr	r3, [sp, #32]
 800968c:	1aed      	subs	r5, r5, r3
 800968e:	4415      	add	r5, r2
 8009690:	4b65      	ldr	r3, [pc, #404]	@ (8009828 <_strtod_l+0x858>)
 8009692:	3d01      	subs	r5, #1
 8009694:	429d      	cmp	r5, r3
 8009696:	f1c2 0236 	rsb	r2, r2, #54	@ 0x36
 800969a:	da50      	bge.n	800973e <_strtod_l+0x76e>
 800969c:	1b5b      	subs	r3, r3, r5
 800969e:	2b1f      	cmp	r3, #31
 80096a0:	eba2 0203 	sub.w	r2, r2, r3
 80096a4:	f04f 0101 	mov.w	r1, #1
 80096a8:	dc3d      	bgt.n	8009726 <_strtod_l+0x756>
 80096aa:	fa01 f303 	lsl.w	r3, r1, r3
 80096ae:	9313      	str	r3, [sp, #76]	@ 0x4c
 80096b0:	2300      	movs	r3, #0
 80096b2:	9310      	str	r3, [sp, #64]	@ 0x40
 80096b4:	18bd      	adds	r5, r7, r2
 80096b6:	9b08      	ldr	r3, [sp, #32]
 80096b8:	42af      	cmp	r7, r5
 80096ba:	4416      	add	r6, r2
 80096bc:	441e      	add	r6, r3
 80096be:	463b      	mov	r3, r7
 80096c0:	bfa8      	it	ge
 80096c2:	462b      	movge	r3, r5
 80096c4:	42b3      	cmp	r3, r6
 80096c6:	bfa8      	it	ge
 80096c8:	4633      	movge	r3, r6
 80096ca:	2b00      	cmp	r3, #0
 80096cc:	bfc2      	ittt	gt
 80096ce:	1aed      	subgt	r5, r5, r3
 80096d0:	1af6      	subgt	r6, r6, r3
 80096d2:	1aff      	subgt	r7, r7, r3
 80096d4:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 80096d6:	2b00      	cmp	r3, #0
 80096d8:	dd16      	ble.n	8009708 <_strtod_l+0x738>
 80096da:	4641      	mov	r1, r8
 80096dc:	9805      	ldr	r0, [sp, #20]
 80096de:	461a      	mov	r2, r3
 80096e0:	f7ff f9a4 	bl	8008a2c <__pow5mult>
 80096e4:	4680      	mov	r8, r0
 80096e6:	2800      	cmp	r0, #0
 80096e8:	d0ba      	beq.n	8009660 <_strtod_l+0x690>
 80096ea:	4601      	mov	r1, r0
 80096ec:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 80096ee:	9805      	ldr	r0, [sp, #20]
 80096f0:	f7ff f8fa 	bl	80088e8 <__multiply>
 80096f4:	900a      	str	r0, [sp, #40]	@ 0x28
 80096f6:	2800      	cmp	r0, #0
 80096f8:	f43f ae8d 	beq.w	8009416 <_strtod_l+0x446>
 80096fc:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80096fe:	9805      	ldr	r0, [sp, #20]
 8009700:	f7fe ffde 	bl	80086c0 <_Bfree>
 8009704:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009706:	931a      	str	r3, [sp, #104]	@ 0x68
 8009708:	2d00      	cmp	r5, #0
 800970a:	dc1d      	bgt.n	8009748 <_strtod_l+0x778>
 800970c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800970e:	2b00      	cmp	r3, #0
 8009710:	dd23      	ble.n	800975a <_strtod_l+0x78a>
 8009712:	4649      	mov	r1, r9
 8009714:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 8009716:	9805      	ldr	r0, [sp, #20]
 8009718:	f7ff f988 	bl	8008a2c <__pow5mult>
 800971c:	4681      	mov	r9, r0
 800971e:	b9e0      	cbnz	r0, 800975a <_strtod_l+0x78a>
 8009720:	f04f 0900 	mov.w	r9, #0
 8009724:	e677      	b.n	8009416 <_strtod_l+0x446>
 8009726:	f1c5 457f 	rsb	r5, r5, #4278190080	@ 0xff000000
 800972a:	f505 057f 	add.w	r5, r5, #16711680	@ 0xff0000
 800972e:	f505 457b 	add.w	r5, r5, #64256	@ 0xfb00
 8009732:	35e2      	adds	r5, #226	@ 0xe2
 8009734:	fa01 f305 	lsl.w	r3, r1, r5
 8009738:	9310      	str	r3, [sp, #64]	@ 0x40
 800973a:	9113      	str	r1, [sp, #76]	@ 0x4c
 800973c:	e7ba      	b.n	80096b4 <_strtod_l+0x6e4>
 800973e:	2300      	movs	r3, #0
 8009740:	9310      	str	r3, [sp, #64]	@ 0x40
 8009742:	2301      	movs	r3, #1
 8009744:	9313      	str	r3, [sp, #76]	@ 0x4c
 8009746:	e7b5      	b.n	80096b4 <_strtod_l+0x6e4>
 8009748:	991a      	ldr	r1, [sp, #104]	@ 0x68
 800974a:	9805      	ldr	r0, [sp, #20]
 800974c:	462a      	mov	r2, r5
 800974e:	f7ff f9c7 	bl	8008ae0 <__lshift>
 8009752:	901a      	str	r0, [sp, #104]	@ 0x68
 8009754:	2800      	cmp	r0, #0
 8009756:	d1d9      	bne.n	800970c <_strtod_l+0x73c>
 8009758:	e65d      	b.n	8009416 <_strtod_l+0x446>
 800975a:	2e00      	cmp	r6, #0
 800975c:	dd07      	ble.n	800976e <_strtod_l+0x79e>
 800975e:	4649      	mov	r1, r9
 8009760:	9805      	ldr	r0, [sp, #20]
 8009762:	4632      	mov	r2, r6
 8009764:	f7ff f9bc 	bl	8008ae0 <__lshift>
 8009768:	4681      	mov	r9, r0
 800976a:	2800      	cmp	r0, #0
 800976c:	d0d8      	beq.n	8009720 <_strtod_l+0x750>
 800976e:	2f00      	cmp	r7, #0
 8009770:	dd08      	ble.n	8009784 <_strtod_l+0x7b4>
 8009772:	4641      	mov	r1, r8
 8009774:	9805      	ldr	r0, [sp, #20]
 8009776:	463a      	mov	r2, r7
 8009778:	f7ff f9b2 	bl	8008ae0 <__lshift>
 800977c:	4680      	mov	r8, r0
 800977e:	2800      	cmp	r0, #0
 8009780:	f43f ae49 	beq.w	8009416 <_strtod_l+0x446>
 8009784:	991a      	ldr	r1, [sp, #104]	@ 0x68
 8009786:	9805      	ldr	r0, [sp, #20]
 8009788:	464a      	mov	r2, r9
 800978a:	f7ff fa31 	bl	8008bf0 <__mdiff>
 800978e:	4604      	mov	r4, r0
 8009790:	2800      	cmp	r0, #0
 8009792:	f43f ae40 	beq.w	8009416 <_strtod_l+0x446>
 8009796:	68c3      	ldr	r3, [r0, #12]
 8009798:	930f      	str	r3, [sp, #60]	@ 0x3c
 800979a:	2300      	movs	r3, #0
 800979c:	60c3      	str	r3, [r0, #12]
 800979e:	4641      	mov	r1, r8
 80097a0:	f7ff fa0a 	bl	8008bb8 <__mcmp>
 80097a4:	2800      	cmp	r0, #0
 80097a6:	da45      	bge.n	8009834 <_strtod_l+0x864>
 80097a8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80097aa:	ea53 030a 	orrs.w	r3, r3, sl
 80097ae:	d16b      	bne.n	8009888 <_strtod_l+0x8b8>
 80097b0:	f3cb 0313 	ubfx	r3, fp, #0, #20
 80097b4:	2b00      	cmp	r3, #0
 80097b6:	d167      	bne.n	8009888 <_strtod_l+0x8b8>
 80097b8:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80097bc:	0d1b      	lsrs	r3, r3, #20
 80097be:	051b      	lsls	r3, r3, #20
 80097c0:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80097c4:	d960      	bls.n	8009888 <_strtod_l+0x8b8>
 80097c6:	6963      	ldr	r3, [r4, #20]
 80097c8:	b913      	cbnz	r3, 80097d0 <_strtod_l+0x800>
 80097ca:	6923      	ldr	r3, [r4, #16]
 80097cc:	2b01      	cmp	r3, #1
 80097ce:	dd5b      	ble.n	8009888 <_strtod_l+0x8b8>
 80097d0:	4621      	mov	r1, r4
 80097d2:	2201      	movs	r2, #1
 80097d4:	9805      	ldr	r0, [sp, #20]
 80097d6:	f7ff f983 	bl	8008ae0 <__lshift>
 80097da:	4641      	mov	r1, r8
 80097dc:	4604      	mov	r4, r0
 80097de:	f7ff f9eb 	bl	8008bb8 <__mcmp>
 80097e2:	2800      	cmp	r0, #0
 80097e4:	dd50      	ble.n	8009888 <_strtod_l+0x8b8>
 80097e6:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 80097ea:	9a08      	ldr	r2, [sp, #32]
 80097ec:	0d1b      	lsrs	r3, r3, #20
 80097ee:	051b      	lsls	r3, r3, #20
 80097f0:	2a00      	cmp	r2, #0
 80097f2:	d06a      	beq.n	80098ca <_strtod_l+0x8fa>
 80097f4:	f1b3 6fd6 	cmp.w	r3, #112197632	@ 0x6b00000
 80097f8:	d867      	bhi.n	80098ca <_strtod_l+0x8fa>
 80097fa:	f1b3 7f5c 	cmp.w	r3, #57671680	@ 0x3700000
 80097fe:	f67f ae9d 	bls.w	800953c <_strtod_l+0x56c>
 8009802:	4b0a      	ldr	r3, [pc, #40]	@ (800982c <_strtod_l+0x85c>)
 8009804:	4650      	mov	r0, sl
 8009806:	4659      	mov	r1, fp
 8009808:	2200      	movs	r2, #0
 800980a:	f7f6 fefd 	bl	8000608 <__aeabi_dmul>
 800980e:	4b08      	ldr	r3, [pc, #32]	@ (8009830 <_strtod_l+0x860>)
 8009810:	400b      	ands	r3, r1
 8009812:	4682      	mov	sl, r0
 8009814:	468b      	mov	fp, r1
 8009816:	2b00      	cmp	r3, #0
 8009818:	f47f ae08 	bne.w	800942c <_strtod_l+0x45c>
 800981c:	9a05      	ldr	r2, [sp, #20]
 800981e:	2322      	movs	r3, #34	@ 0x22
 8009820:	6013      	str	r3, [r2, #0]
 8009822:	e603      	b.n	800942c <_strtod_l+0x45c>
 8009824:	0800b228 	.word	0x0800b228
 8009828:	fffffc02 	.word	0xfffffc02
 800982c:	39500000 	.word	0x39500000
 8009830:	7ff00000 	.word	0x7ff00000
 8009834:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009838:	d165      	bne.n	8009906 <_strtod_l+0x936>
 800983a:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 800983c:	f3cb 0313 	ubfx	r3, fp, #0, #20
 8009840:	b35a      	cbz	r2, 800989a <_strtod_l+0x8ca>
 8009842:	4a9f      	ldr	r2, [pc, #636]	@ (8009ac0 <_strtod_l+0xaf0>)
 8009844:	4293      	cmp	r3, r2
 8009846:	d12b      	bne.n	80098a0 <_strtod_l+0x8d0>
 8009848:	9b08      	ldr	r3, [sp, #32]
 800984a:	4651      	mov	r1, sl
 800984c:	b303      	cbz	r3, 8009890 <_strtod_l+0x8c0>
 800984e:	4b9d      	ldr	r3, [pc, #628]	@ (8009ac4 <_strtod_l+0xaf4>)
 8009850:	465a      	mov	r2, fp
 8009852:	4013      	ands	r3, r2
 8009854:	f1b3 6fd4 	cmp.w	r3, #111149056	@ 0x6a00000
 8009858:	f04f 32ff 	mov.w	r2, #4294967295
 800985c:	d81b      	bhi.n	8009896 <_strtod_l+0x8c6>
 800985e:	0d1b      	lsrs	r3, r3, #20
 8009860:	f1c3 036b 	rsb	r3, r3, #107	@ 0x6b
 8009864:	fa02 f303 	lsl.w	r3, r2, r3
 8009868:	4299      	cmp	r1, r3
 800986a:	d119      	bne.n	80098a0 <_strtod_l+0x8d0>
 800986c:	4b96      	ldr	r3, [pc, #600]	@ (8009ac8 <_strtod_l+0xaf8>)
 800986e:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 8009870:	429a      	cmp	r2, r3
 8009872:	d102      	bne.n	800987a <_strtod_l+0x8aa>
 8009874:	3101      	adds	r1, #1
 8009876:	f43f adce 	beq.w	8009416 <_strtod_l+0x446>
 800987a:	4b92      	ldr	r3, [pc, #584]	@ (8009ac4 <_strtod_l+0xaf4>)
 800987c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 800987e:	401a      	ands	r2, r3
 8009880:	f502 1b80 	add.w	fp, r2, #1048576	@ 0x100000
 8009884:	f04f 0a00 	mov.w	sl, #0
 8009888:	9b08      	ldr	r3, [sp, #32]
 800988a:	2b00      	cmp	r3, #0
 800988c:	d1b9      	bne.n	8009802 <_strtod_l+0x832>
 800988e:	e5cd      	b.n	800942c <_strtod_l+0x45c>
 8009890:	f04f 33ff 	mov.w	r3, #4294967295
 8009894:	e7e8      	b.n	8009868 <_strtod_l+0x898>
 8009896:	4613      	mov	r3, r2
 8009898:	e7e6      	b.n	8009868 <_strtod_l+0x898>
 800989a:	ea53 030a 	orrs.w	r3, r3, sl
 800989e:	d0a2      	beq.n	80097e6 <_strtod_l+0x816>
 80098a0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80098a2:	b1db      	cbz	r3, 80098dc <_strtod_l+0x90c>
 80098a4:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80098a6:	4213      	tst	r3, r2
 80098a8:	d0ee      	beq.n	8009888 <_strtod_l+0x8b8>
 80098aa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 80098ac:	9a08      	ldr	r2, [sp, #32]
 80098ae:	4650      	mov	r0, sl
 80098b0:	4659      	mov	r1, fp
 80098b2:	b1bb      	cbz	r3, 80098e4 <_strtod_l+0x914>
 80098b4:	f7ff fb6e 	bl	8008f94 <sulp>
 80098b8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098bc:	ec53 2b10 	vmov	r2, r3, d0
 80098c0:	f7f6 fcec 	bl	800029c <__adddf3>
 80098c4:	4682      	mov	sl, r0
 80098c6:	468b      	mov	fp, r1
 80098c8:	e7de      	b.n	8009888 <_strtod_l+0x8b8>
 80098ca:	f5a3 1380 	sub.w	r3, r3, #1048576	@ 0x100000
 80098ce:	ea6f 5b13 	mvn.w	fp, r3, lsr #20
 80098d2:	ea6f 5b0b 	mvn.w	fp, fp, lsl #20
 80098d6:	f04f 3aff 	mov.w	sl, #4294967295
 80098da:	e7d5      	b.n	8009888 <_strtod_l+0x8b8>
 80098dc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 80098de:	ea13 0f0a 	tst.w	r3, sl
 80098e2:	e7e1      	b.n	80098a8 <_strtod_l+0x8d8>
 80098e4:	f7ff fb56 	bl	8008f94 <sulp>
 80098e8:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 80098ec:	ec53 2b10 	vmov	r2, r3, d0
 80098f0:	f7f6 fcd2 	bl	8000298 <__aeabi_dsub>
 80098f4:	2200      	movs	r2, #0
 80098f6:	2300      	movs	r3, #0
 80098f8:	4682      	mov	sl, r0
 80098fa:	468b      	mov	fp, r1
 80098fc:	f7f7 f8ec 	bl	8000ad8 <__aeabi_dcmpeq>
 8009900:	2800      	cmp	r0, #0
 8009902:	d0c1      	beq.n	8009888 <_strtod_l+0x8b8>
 8009904:	e61a      	b.n	800953c <_strtod_l+0x56c>
 8009906:	4641      	mov	r1, r8
 8009908:	4620      	mov	r0, r4
 800990a:	f7ff facd 	bl	8008ea8 <__ratio>
 800990e:	ec57 6b10 	vmov	r6, r7, d0
 8009912:	2200      	movs	r2, #0
 8009914:	f04f 4380 	mov.w	r3, #1073741824	@ 0x40000000
 8009918:	4630      	mov	r0, r6
 800991a:	4639      	mov	r1, r7
 800991c:	f7f7 f8f0 	bl	8000b00 <__aeabi_dcmple>
 8009920:	2800      	cmp	r0, #0
 8009922:	d06f      	beq.n	8009a04 <_strtod_l+0xa34>
 8009924:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009926:	2b00      	cmp	r3, #0
 8009928:	d17a      	bne.n	8009a20 <_strtod_l+0xa50>
 800992a:	f1ba 0f00 	cmp.w	sl, #0
 800992e:	d158      	bne.n	80099e2 <_strtod_l+0xa12>
 8009930:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8009932:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8009936:	2b00      	cmp	r3, #0
 8009938:	d15a      	bne.n	80099f0 <_strtod_l+0xa20>
 800993a:	4b64      	ldr	r3, [pc, #400]	@ (8009acc <_strtod_l+0xafc>)
 800993c:	2200      	movs	r2, #0
 800993e:	4630      	mov	r0, r6
 8009940:	4639      	mov	r1, r7
 8009942:	f7f7 f8d3 	bl	8000aec <__aeabi_dcmplt>
 8009946:	2800      	cmp	r0, #0
 8009948:	d159      	bne.n	80099fe <_strtod_l+0xa2e>
 800994a:	4630      	mov	r0, r6
 800994c:	4639      	mov	r1, r7
 800994e:	4b60      	ldr	r3, [pc, #384]	@ (8009ad0 <_strtod_l+0xb00>)
 8009950:	2200      	movs	r2, #0
 8009952:	f7f6 fe59 	bl	8000608 <__aeabi_dmul>
 8009956:	4606      	mov	r6, r0
 8009958:	460f      	mov	r7, r1
 800995a:	f107 4300 	add.w	r3, r7, #2147483648	@ 0x80000000
 800995e:	9606      	str	r6, [sp, #24]
 8009960:	9307      	str	r3, [sp, #28]
 8009962:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009966:	4d57      	ldr	r5, [pc, #348]	@ (8009ac4 <_strtod_l+0xaf4>)
 8009968:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 800996c:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800996e:	401d      	ands	r5, r3
 8009970:	4b58      	ldr	r3, [pc, #352]	@ (8009ad4 <_strtod_l+0xb04>)
 8009972:	429d      	cmp	r5, r3
 8009974:	f040 80b2 	bne.w	8009adc <_strtod_l+0xb0c>
 8009978:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 800997a:	f1a3 7b54 	sub.w	fp, r3, #55574528	@ 0x3500000
 800997e:	ec4b ab10 	vmov	d0, sl, fp
 8009982:	f7ff f9c9 	bl	8008d18 <__ulp>
 8009986:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800998a:	ec51 0b10 	vmov	r0, r1, d0
 800998e:	f7f6 fe3b 	bl	8000608 <__aeabi_dmul>
 8009992:	4652      	mov	r2, sl
 8009994:	465b      	mov	r3, fp
 8009996:	f7f6 fc81 	bl	800029c <__adddf3>
 800999a:	460b      	mov	r3, r1
 800999c:	4949      	ldr	r1, [pc, #292]	@ (8009ac4 <_strtod_l+0xaf4>)
 800999e:	4a4e      	ldr	r2, [pc, #312]	@ (8009ad8 <_strtod_l+0xb08>)
 80099a0:	4019      	ands	r1, r3
 80099a2:	4291      	cmp	r1, r2
 80099a4:	4682      	mov	sl, r0
 80099a6:	d942      	bls.n	8009a2e <_strtod_l+0xa5e>
 80099a8:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 80099aa:	4b47      	ldr	r3, [pc, #284]	@ (8009ac8 <_strtod_l+0xaf8>)
 80099ac:	429a      	cmp	r2, r3
 80099ae:	d103      	bne.n	80099b8 <_strtod_l+0x9e8>
 80099b0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80099b2:	3301      	adds	r3, #1
 80099b4:	f43f ad2f 	beq.w	8009416 <_strtod_l+0x446>
 80099b8:	f8df b10c 	ldr.w	fp, [pc, #268]	@ 8009ac8 <_strtod_l+0xaf8>
 80099bc:	f04f 3aff 	mov.w	sl, #4294967295
 80099c0:	991a      	ldr	r1, [sp, #104]	@ 0x68
 80099c2:	9805      	ldr	r0, [sp, #20]
 80099c4:	f7fe fe7c 	bl	80086c0 <_Bfree>
 80099c8:	9805      	ldr	r0, [sp, #20]
 80099ca:	4649      	mov	r1, r9
 80099cc:	f7fe fe78 	bl	80086c0 <_Bfree>
 80099d0:	9805      	ldr	r0, [sp, #20]
 80099d2:	4641      	mov	r1, r8
 80099d4:	f7fe fe74 	bl	80086c0 <_Bfree>
 80099d8:	9805      	ldr	r0, [sp, #20]
 80099da:	4621      	mov	r1, r4
 80099dc:	f7fe fe70 	bl	80086c0 <_Bfree>
 80099e0:	e619      	b.n	8009616 <_strtod_l+0x646>
 80099e2:	f1ba 0f01 	cmp.w	sl, #1
 80099e6:	d103      	bne.n	80099f0 <_strtod_l+0xa20>
 80099e8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 80099ea:	2b00      	cmp	r3, #0
 80099ec:	f43f ada6 	beq.w	800953c <_strtod_l+0x56c>
 80099f0:	ed9f 7b2b 	vldr	d7, [pc, #172]	@ 8009aa0 <_strtod_l+0xad0>
 80099f4:	4f35      	ldr	r7, [pc, #212]	@ (8009acc <_strtod_l+0xafc>)
 80099f6:	ed8d 7b06 	vstr	d7, [sp, #24]
 80099fa:	2600      	movs	r6, #0
 80099fc:	e7b1      	b.n	8009962 <_strtod_l+0x992>
 80099fe:	4f34      	ldr	r7, [pc, #208]	@ (8009ad0 <_strtod_l+0xb00>)
 8009a00:	2600      	movs	r6, #0
 8009a02:	e7aa      	b.n	800995a <_strtod_l+0x98a>
 8009a04:	4b32      	ldr	r3, [pc, #200]	@ (8009ad0 <_strtod_l+0xb00>)
 8009a06:	4630      	mov	r0, r6
 8009a08:	4639      	mov	r1, r7
 8009a0a:	2200      	movs	r2, #0
 8009a0c:	f7f6 fdfc 	bl	8000608 <__aeabi_dmul>
 8009a10:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a12:	4606      	mov	r6, r0
 8009a14:	460f      	mov	r7, r1
 8009a16:	2b00      	cmp	r3, #0
 8009a18:	d09f      	beq.n	800995a <_strtod_l+0x98a>
 8009a1a:	e9cd 6706 	strd	r6, r7, [sp, #24]
 8009a1e:	e7a0      	b.n	8009962 <_strtod_l+0x992>
 8009a20:	ed9f 7b21 	vldr	d7, [pc, #132]	@ 8009aa8 <_strtod_l+0xad8>
 8009a24:	ed8d 7b06 	vstr	d7, [sp, #24]
 8009a28:	ec57 6b17 	vmov	r6, r7, d7
 8009a2c:	e799      	b.n	8009962 <_strtod_l+0x992>
 8009a2e:	f103 7b54 	add.w	fp, r3, #55574528	@ 0x3500000
 8009a32:	9b08      	ldr	r3, [sp, #32]
 8009a34:	f8cd b028 	str.w	fp, [sp, #40]	@ 0x28
 8009a38:	2b00      	cmp	r3, #0
 8009a3a:	d1c1      	bne.n	80099c0 <_strtod_l+0x9f0>
 8009a3c:	f02b 4300 	bic.w	r3, fp, #2147483648	@ 0x80000000
 8009a40:	0d1b      	lsrs	r3, r3, #20
 8009a42:	051b      	lsls	r3, r3, #20
 8009a44:	429d      	cmp	r5, r3
 8009a46:	d1bb      	bne.n	80099c0 <_strtod_l+0x9f0>
 8009a48:	4630      	mov	r0, r6
 8009a4a:	4639      	mov	r1, r7
 8009a4c:	f7f7 f93c 	bl	8000cc8 <__aeabi_d2lz>
 8009a50:	f7f6 fdac 	bl	80005ac <__aeabi_l2d>
 8009a54:	4602      	mov	r2, r0
 8009a56:	460b      	mov	r3, r1
 8009a58:	4630      	mov	r0, r6
 8009a5a:	4639      	mov	r1, r7
 8009a5c:	f7f6 fc1c 	bl	8000298 <__aeabi_dsub>
 8009a60:	460b      	mov	r3, r1
 8009a62:	4602      	mov	r2, r0
 8009a64:	e9cd 230c 	strd	r2, r3, [sp, #48]	@ 0x30
 8009a68:	f3cb 0613 	ubfx	r6, fp, #0, #20
 8009a6c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009a6e:	ea46 060a 	orr.w	r6, r6, sl
 8009a72:	431e      	orrs	r6, r3
 8009a74:	d06f      	beq.n	8009b56 <_strtod_l+0xb86>
 8009a76:	a30e      	add	r3, pc, #56	@ (adr r3, 8009ab0 <_strtod_l+0xae0>)
 8009a78:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a7c:	f7f7 f836 	bl	8000aec <__aeabi_dcmplt>
 8009a80:	2800      	cmp	r0, #0
 8009a82:	f47f acd3 	bne.w	800942c <_strtod_l+0x45c>
 8009a86:	a30c      	add	r3, pc, #48	@ (adr r3, 8009ab8 <_strtod_l+0xae8>)
 8009a88:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a8c:	e9dd 010c 	ldrd	r0, r1, [sp, #48]	@ 0x30
 8009a90:	f7f7 f84a 	bl	8000b28 <__aeabi_dcmpgt>
 8009a94:	2800      	cmp	r0, #0
 8009a96:	d093      	beq.n	80099c0 <_strtod_l+0x9f0>
 8009a98:	e4c8      	b.n	800942c <_strtod_l+0x45c>
 8009a9a:	bf00      	nop
 8009a9c:	f3af 8000 	nop.w
 8009aa0:	00000000 	.word	0x00000000
 8009aa4:	bff00000 	.word	0xbff00000
 8009aa8:	00000000 	.word	0x00000000
 8009aac:	3ff00000 	.word	0x3ff00000
 8009ab0:	94a03595 	.word	0x94a03595
 8009ab4:	3fdfffff 	.word	0x3fdfffff
 8009ab8:	35afe535 	.word	0x35afe535
 8009abc:	3fe00000 	.word	0x3fe00000
 8009ac0:	000fffff 	.word	0x000fffff
 8009ac4:	7ff00000 	.word	0x7ff00000
 8009ac8:	7fefffff 	.word	0x7fefffff
 8009acc:	3ff00000 	.word	0x3ff00000
 8009ad0:	3fe00000 	.word	0x3fe00000
 8009ad4:	7fe00000 	.word	0x7fe00000
 8009ad8:	7c9fffff 	.word	0x7c9fffff
 8009adc:	9b08      	ldr	r3, [sp, #32]
 8009ade:	b323      	cbz	r3, 8009b2a <_strtod_l+0xb5a>
 8009ae0:	f1b5 6fd4 	cmp.w	r5, #111149056	@ 0x6a00000
 8009ae4:	d821      	bhi.n	8009b2a <_strtod_l+0xb5a>
 8009ae6:	a328      	add	r3, pc, #160	@ (adr r3, 8009b88 <_strtod_l+0xbb8>)
 8009ae8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aec:	4630      	mov	r0, r6
 8009aee:	4639      	mov	r1, r7
 8009af0:	f7f7 f806 	bl	8000b00 <__aeabi_dcmple>
 8009af4:	b1a0      	cbz	r0, 8009b20 <_strtod_l+0xb50>
 8009af6:	4639      	mov	r1, r7
 8009af8:	4630      	mov	r0, r6
 8009afa:	f7f7 f85d 	bl	8000bb8 <__aeabi_d2uiz>
 8009afe:	2801      	cmp	r0, #1
 8009b00:	bf38      	it	cc
 8009b02:	2001      	movcc	r0, #1
 8009b04:	f7f6 fd06 	bl	8000514 <__aeabi_ui2d>
 8009b08:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 8009b0a:	4606      	mov	r6, r0
 8009b0c:	460f      	mov	r7, r1
 8009b0e:	b9fb      	cbnz	r3, 8009b50 <_strtod_l+0xb80>
 8009b10:	f101 4300 	add.w	r3, r1, #2147483648	@ 0x80000000
 8009b14:	9014      	str	r0, [sp, #80]	@ 0x50
 8009b16:	9315      	str	r3, [sp, #84]	@ 0x54
 8009b18:	e9dd 2314 	ldrd	r2, r3, [sp, #80]	@ 0x50
 8009b1c:	e9cd 2310 	strd	r2, r3, [sp, #64]	@ 0x40
 8009b20:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 8009b22:	f103 63d6 	add.w	r3, r3, #112197632	@ 0x6b00000
 8009b26:	1b5b      	subs	r3, r3, r5
 8009b28:	9311      	str	r3, [sp, #68]	@ 0x44
 8009b2a:	ed9d 0b0c 	vldr	d0, [sp, #48]	@ 0x30
 8009b2e:	e9dd ab10 	ldrd	sl, fp, [sp, #64]	@ 0x40
 8009b32:	f7ff f8f1 	bl	8008d18 <__ulp>
 8009b36:	4650      	mov	r0, sl
 8009b38:	ec53 2b10 	vmov	r2, r3, d0
 8009b3c:	4659      	mov	r1, fp
 8009b3e:	f7f6 fd63 	bl	8000608 <__aeabi_dmul>
 8009b42:	e9dd 230c 	ldrd	r2, r3, [sp, #48]	@ 0x30
 8009b46:	f7f6 fba9 	bl	800029c <__adddf3>
 8009b4a:	4682      	mov	sl, r0
 8009b4c:	468b      	mov	fp, r1
 8009b4e:	e770      	b.n	8009a32 <_strtod_l+0xa62>
 8009b50:	e9cd 6714 	strd	r6, r7, [sp, #80]	@ 0x50
 8009b54:	e7e0      	b.n	8009b18 <_strtod_l+0xb48>
 8009b56:	a30e      	add	r3, pc, #56	@ (adr r3, 8009b90 <_strtod_l+0xbc0>)
 8009b58:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b5c:	f7f6 ffc6 	bl	8000aec <__aeabi_dcmplt>
 8009b60:	e798      	b.n	8009a94 <_strtod_l+0xac4>
 8009b62:	2300      	movs	r3, #0
 8009b64:	930e      	str	r3, [sp, #56]	@ 0x38
 8009b66:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 8009b68:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 8009b6a:	6013      	str	r3, [r2, #0]
 8009b6c:	f7ff ba6d 	b.w	800904a <_strtod_l+0x7a>
 8009b70:	2a65      	cmp	r2, #101	@ 0x65
 8009b72:	f43f ab68 	beq.w	8009246 <_strtod_l+0x276>
 8009b76:	2a45      	cmp	r2, #69	@ 0x45
 8009b78:	f43f ab65 	beq.w	8009246 <_strtod_l+0x276>
 8009b7c:	2301      	movs	r3, #1
 8009b7e:	f7ff bba0 	b.w	80092c2 <_strtod_l+0x2f2>
 8009b82:	bf00      	nop
 8009b84:	f3af 8000 	nop.w
 8009b88:	ffc00000 	.word	0xffc00000
 8009b8c:	41dfffff 	.word	0x41dfffff
 8009b90:	94a03595 	.word	0x94a03595
 8009b94:	3fcfffff 	.word	0x3fcfffff

08009b98 <_strtod_r>:
 8009b98:	4b01      	ldr	r3, [pc, #4]	@ (8009ba0 <_strtod_r+0x8>)
 8009b9a:	f7ff ba19 	b.w	8008fd0 <_strtod_l>
 8009b9e:	bf00      	nop
 8009ba0:	20000084 	.word	0x20000084

08009ba4 <_strtol_l.isra.0>:
 8009ba4:	2b24      	cmp	r3, #36	@ 0x24
 8009ba6:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009baa:	4686      	mov	lr, r0
 8009bac:	4690      	mov	r8, r2
 8009bae:	d801      	bhi.n	8009bb4 <_strtol_l.isra.0+0x10>
 8009bb0:	2b01      	cmp	r3, #1
 8009bb2:	d106      	bne.n	8009bc2 <_strtol_l.isra.0+0x1e>
 8009bb4:	f7fd fdb8 	bl	8007728 <__errno>
 8009bb8:	2316      	movs	r3, #22
 8009bba:	6003      	str	r3, [r0, #0]
 8009bbc:	2000      	movs	r0, #0
 8009bbe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009bc2:	4834      	ldr	r0, [pc, #208]	@ (8009c94 <_strtol_l.isra.0+0xf0>)
 8009bc4:	460d      	mov	r5, r1
 8009bc6:	462a      	mov	r2, r5
 8009bc8:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009bcc:	5d06      	ldrb	r6, [r0, r4]
 8009bce:	f016 0608 	ands.w	r6, r6, #8
 8009bd2:	d1f8      	bne.n	8009bc6 <_strtol_l.isra.0+0x22>
 8009bd4:	2c2d      	cmp	r4, #45	@ 0x2d
 8009bd6:	d110      	bne.n	8009bfa <_strtol_l.isra.0+0x56>
 8009bd8:	782c      	ldrb	r4, [r5, #0]
 8009bda:	2601      	movs	r6, #1
 8009bdc:	1c95      	adds	r5, r2, #2
 8009bde:	f033 0210 	bics.w	r2, r3, #16
 8009be2:	d115      	bne.n	8009c10 <_strtol_l.isra.0+0x6c>
 8009be4:	2c30      	cmp	r4, #48	@ 0x30
 8009be6:	d10d      	bne.n	8009c04 <_strtol_l.isra.0+0x60>
 8009be8:	782a      	ldrb	r2, [r5, #0]
 8009bea:	f002 02df 	and.w	r2, r2, #223	@ 0xdf
 8009bee:	2a58      	cmp	r2, #88	@ 0x58
 8009bf0:	d108      	bne.n	8009c04 <_strtol_l.isra.0+0x60>
 8009bf2:	786c      	ldrb	r4, [r5, #1]
 8009bf4:	3502      	adds	r5, #2
 8009bf6:	2310      	movs	r3, #16
 8009bf8:	e00a      	b.n	8009c10 <_strtol_l.isra.0+0x6c>
 8009bfa:	2c2b      	cmp	r4, #43	@ 0x2b
 8009bfc:	bf04      	itt	eq
 8009bfe:	782c      	ldrbeq	r4, [r5, #0]
 8009c00:	1c95      	addeq	r5, r2, #2
 8009c02:	e7ec      	b.n	8009bde <_strtol_l.isra.0+0x3a>
 8009c04:	2b00      	cmp	r3, #0
 8009c06:	d1f6      	bne.n	8009bf6 <_strtol_l.isra.0+0x52>
 8009c08:	2c30      	cmp	r4, #48	@ 0x30
 8009c0a:	bf14      	ite	ne
 8009c0c:	230a      	movne	r3, #10
 8009c0e:	2308      	moveq	r3, #8
 8009c10:	f106 4c00 	add.w	ip, r6, #2147483648	@ 0x80000000
 8009c14:	f10c 3cff 	add.w	ip, ip, #4294967295
 8009c18:	2200      	movs	r2, #0
 8009c1a:	fbbc f9f3 	udiv	r9, ip, r3
 8009c1e:	4610      	mov	r0, r2
 8009c20:	fb03 ca19 	mls	sl, r3, r9, ip
 8009c24:	f1a4 0730 	sub.w	r7, r4, #48	@ 0x30
 8009c28:	2f09      	cmp	r7, #9
 8009c2a:	d80f      	bhi.n	8009c4c <_strtol_l.isra.0+0xa8>
 8009c2c:	463c      	mov	r4, r7
 8009c2e:	42a3      	cmp	r3, r4
 8009c30:	dd1b      	ble.n	8009c6a <_strtol_l.isra.0+0xc6>
 8009c32:	1c57      	adds	r7, r2, #1
 8009c34:	d007      	beq.n	8009c46 <_strtol_l.isra.0+0xa2>
 8009c36:	4581      	cmp	r9, r0
 8009c38:	d314      	bcc.n	8009c64 <_strtol_l.isra.0+0xc0>
 8009c3a:	d101      	bne.n	8009c40 <_strtol_l.isra.0+0x9c>
 8009c3c:	45a2      	cmp	sl, r4
 8009c3e:	db11      	blt.n	8009c64 <_strtol_l.isra.0+0xc0>
 8009c40:	fb00 4003 	mla	r0, r0, r3, r4
 8009c44:	2201      	movs	r2, #1
 8009c46:	f815 4b01 	ldrb.w	r4, [r5], #1
 8009c4a:	e7eb      	b.n	8009c24 <_strtol_l.isra.0+0x80>
 8009c4c:	f1a4 0741 	sub.w	r7, r4, #65	@ 0x41
 8009c50:	2f19      	cmp	r7, #25
 8009c52:	d801      	bhi.n	8009c58 <_strtol_l.isra.0+0xb4>
 8009c54:	3c37      	subs	r4, #55	@ 0x37
 8009c56:	e7ea      	b.n	8009c2e <_strtol_l.isra.0+0x8a>
 8009c58:	f1a4 0761 	sub.w	r7, r4, #97	@ 0x61
 8009c5c:	2f19      	cmp	r7, #25
 8009c5e:	d804      	bhi.n	8009c6a <_strtol_l.isra.0+0xc6>
 8009c60:	3c57      	subs	r4, #87	@ 0x57
 8009c62:	e7e4      	b.n	8009c2e <_strtol_l.isra.0+0x8a>
 8009c64:	f04f 32ff 	mov.w	r2, #4294967295
 8009c68:	e7ed      	b.n	8009c46 <_strtol_l.isra.0+0xa2>
 8009c6a:	1c53      	adds	r3, r2, #1
 8009c6c:	d108      	bne.n	8009c80 <_strtol_l.isra.0+0xdc>
 8009c6e:	2322      	movs	r3, #34	@ 0x22
 8009c70:	f8ce 3000 	str.w	r3, [lr]
 8009c74:	4660      	mov	r0, ip
 8009c76:	f1b8 0f00 	cmp.w	r8, #0
 8009c7a:	d0a0      	beq.n	8009bbe <_strtol_l.isra.0+0x1a>
 8009c7c:	1e69      	subs	r1, r5, #1
 8009c7e:	e006      	b.n	8009c8e <_strtol_l.isra.0+0xea>
 8009c80:	b106      	cbz	r6, 8009c84 <_strtol_l.isra.0+0xe0>
 8009c82:	4240      	negs	r0, r0
 8009c84:	f1b8 0f00 	cmp.w	r8, #0
 8009c88:	d099      	beq.n	8009bbe <_strtol_l.isra.0+0x1a>
 8009c8a:	2a00      	cmp	r2, #0
 8009c8c:	d1f6      	bne.n	8009c7c <_strtol_l.isra.0+0xd8>
 8009c8e:	f8c8 1000 	str.w	r1, [r8]
 8009c92:	e794      	b.n	8009bbe <_strtol_l.isra.0+0x1a>
 8009c94:	0800b251 	.word	0x0800b251

08009c98 <_strtol_r>:
 8009c98:	f7ff bf84 	b.w	8009ba4 <_strtol_l.isra.0>

08009c9c <__ssputs_r>:
 8009c9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8009ca0:	688e      	ldr	r6, [r1, #8]
 8009ca2:	461f      	mov	r7, r3
 8009ca4:	42be      	cmp	r6, r7
 8009ca6:	680b      	ldr	r3, [r1, #0]
 8009ca8:	4682      	mov	sl, r0
 8009caa:	460c      	mov	r4, r1
 8009cac:	4690      	mov	r8, r2
 8009cae:	d82d      	bhi.n	8009d0c <__ssputs_r+0x70>
 8009cb0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 8009cb4:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8009cb8:	d026      	beq.n	8009d08 <__ssputs_r+0x6c>
 8009cba:	6965      	ldr	r5, [r4, #20]
 8009cbc:	6909      	ldr	r1, [r1, #16]
 8009cbe:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 8009cc2:	eba3 0901 	sub.w	r9, r3, r1
 8009cc6:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8009cca:	1c7b      	adds	r3, r7, #1
 8009ccc:	444b      	add	r3, r9
 8009cce:	106d      	asrs	r5, r5, #1
 8009cd0:	429d      	cmp	r5, r3
 8009cd2:	bf38      	it	cc
 8009cd4:	461d      	movcc	r5, r3
 8009cd6:	0553      	lsls	r3, r2, #21
 8009cd8:	d527      	bpl.n	8009d2a <__ssputs_r+0x8e>
 8009cda:	4629      	mov	r1, r5
 8009cdc:	f7fe fc24 	bl	8008528 <_malloc_r>
 8009ce0:	4606      	mov	r6, r0
 8009ce2:	b360      	cbz	r0, 8009d3e <__ssputs_r+0xa2>
 8009ce4:	6921      	ldr	r1, [r4, #16]
 8009ce6:	464a      	mov	r2, r9
 8009ce8:	f000 fbde 	bl	800a4a8 <memcpy>
 8009cec:	89a3      	ldrh	r3, [r4, #12]
 8009cee:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 8009cf2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8009cf6:	81a3      	strh	r3, [r4, #12]
 8009cf8:	6126      	str	r6, [r4, #16]
 8009cfa:	6165      	str	r5, [r4, #20]
 8009cfc:	444e      	add	r6, r9
 8009cfe:	eba5 0509 	sub.w	r5, r5, r9
 8009d02:	6026      	str	r6, [r4, #0]
 8009d04:	60a5      	str	r5, [r4, #8]
 8009d06:	463e      	mov	r6, r7
 8009d08:	42be      	cmp	r6, r7
 8009d0a:	d900      	bls.n	8009d0e <__ssputs_r+0x72>
 8009d0c:	463e      	mov	r6, r7
 8009d0e:	6820      	ldr	r0, [r4, #0]
 8009d10:	4632      	mov	r2, r6
 8009d12:	4641      	mov	r1, r8
 8009d14:	f000 fb6a 	bl	800a3ec <memmove>
 8009d18:	68a3      	ldr	r3, [r4, #8]
 8009d1a:	1b9b      	subs	r3, r3, r6
 8009d1c:	60a3      	str	r3, [r4, #8]
 8009d1e:	6823      	ldr	r3, [r4, #0]
 8009d20:	4433      	add	r3, r6
 8009d22:	6023      	str	r3, [r4, #0]
 8009d24:	2000      	movs	r0, #0
 8009d26:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8009d2a:	462a      	mov	r2, r5
 8009d2c:	f000 ff51 	bl	800abd2 <_realloc_r>
 8009d30:	4606      	mov	r6, r0
 8009d32:	2800      	cmp	r0, #0
 8009d34:	d1e0      	bne.n	8009cf8 <__ssputs_r+0x5c>
 8009d36:	6921      	ldr	r1, [r4, #16]
 8009d38:	4650      	mov	r0, sl
 8009d3a:	f7fe fb81 	bl	8008440 <_free_r>
 8009d3e:	230c      	movs	r3, #12
 8009d40:	f8ca 3000 	str.w	r3, [sl]
 8009d44:	89a3      	ldrh	r3, [r4, #12]
 8009d46:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8009d4a:	81a3      	strh	r3, [r4, #12]
 8009d4c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d50:	e7e9      	b.n	8009d26 <__ssputs_r+0x8a>
	...

08009d54 <_svfiprintf_r>:
 8009d54:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009d58:	4698      	mov	r8, r3
 8009d5a:	898b      	ldrh	r3, [r1, #12]
 8009d5c:	061b      	lsls	r3, r3, #24
 8009d5e:	b09d      	sub	sp, #116	@ 0x74
 8009d60:	4607      	mov	r7, r0
 8009d62:	460d      	mov	r5, r1
 8009d64:	4614      	mov	r4, r2
 8009d66:	d510      	bpl.n	8009d8a <_svfiprintf_r+0x36>
 8009d68:	690b      	ldr	r3, [r1, #16]
 8009d6a:	b973      	cbnz	r3, 8009d8a <_svfiprintf_r+0x36>
 8009d6c:	2140      	movs	r1, #64	@ 0x40
 8009d6e:	f7fe fbdb 	bl	8008528 <_malloc_r>
 8009d72:	6028      	str	r0, [r5, #0]
 8009d74:	6128      	str	r0, [r5, #16]
 8009d76:	b930      	cbnz	r0, 8009d86 <_svfiprintf_r+0x32>
 8009d78:	230c      	movs	r3, #12
 8009d7a:	603b      	str	r3, [r7, #0]
 8009d7c:	f04f 30ff 	mov.w	r0, #4294967295
 8009d80:	b01d      	add	sp, #116	@ 0x74
 8009d82:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009d86:	2340      	movs	r3, #64	@ 0x40
 8009d88:	616b      	str	r3, [r5, #20]
 8009d8a:	2300      	movs	r3, #0
 8009d8c:	9309      	str	r3, [sp, #36]	@ 0x24
 8009d8e:	2320      	movs	r3, #32
 8009d90:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8009d94:	f8cd 800c 	str.w	r8, [sp, #12]
 8009d98:	2330      	movs	r3, #48	@ 0x30
 8009d9a:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 8009f38 <_svfiprintf_r+0x1e4>
 8009d9e:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8009da2:	f04f 0901 	mov.w	r9, #1
 8009da6:	4623      	mov	r3, r4
 8009da8:	469a      	mov	sl, r3
 8009daa:	f813 2b01 	ldrb.w	r2, [r3], #1
 8009dae:	b10a      	cbz	r2, 8009db4 <_svfiprintf_r+0x60>
 8009db0:	2a25      	cmp	r2, #37	@ 0x25
 8009db2:	d1f9      	bne.n	8009da8 <_svfiprintf_r+0x54>
 8009db4:	ebba 0b04 	subs.w	fp, sl, r4
 8009db8:	d00b      	beq.n	8009dd2 <_svfiprintf_r+0x7e>
 8009dba:	465b      	mov	r3, fp
 8009dbc:	4622      	mov	r2, r4
 8009dbe:	4629      	mov	r1, r5
 8009dc0:	4638      	mov	r0, r7
 8009dc2:	f7ff ff6b 	bl	8009c9c <__ssputs_r>
 8009dc6:	3001      	adds	r0, #1
 8009dc8:	f000 80a7 	beq.w	8009f1a <_svfiprintf_r+0x1c6>
 8009dcc:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8009dce:	445a      	add	r2, fp
 8009dd0:	9209      	str	r2, [sp, #36]	@ 0x24
 8009dd2:	f89a 3000 	ldrb.w	r3, [sl]
 8009dd6:	2b00      	cmp	r3, #0
 8009dd8:	f000 809f 	beq.w	8009f1a <_svfiprintf_r+0x1c6>
 8009ddc:	2300      	movs	r3, #0
 8009dde:	f04f 32ff 	mov.w	r2, #4294967295
 8009de2:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8009de6:	f10a 0a01 	add.w	sl, sl, #1
 8009dea:	9304      	str	r3, [sp, #16]
 8009dec:	9307      	str	r3, [sp, #28]
 8009dee:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8009df2:	931a      	str	r3, [sp, #104]	@ 0x68
 8009df4:	4654      	mov	r4, sl
 8009df6:	2205      	movs	r2, #5
 8009df8:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009dfc:	484e      	ldr	r0, [pc, #312]	@ (8009f38 <_svfiprintf_r+0x1e4>)
 8009dfe:	f7f6 f9ef 	bl	80001e0 <memchr>
 8009e02:	9a04      	ldr	r2, [sp, #16]
 8009e04:	b9d8      	cbnz	r0, 8009e3e <_svfiprintf_r+0xea>
 8009e06:	06d0      	lsls	r0, r2, #27
 8009e08:	bf44      	itt	mi
 8009e0a:	2320      	movmi	r3, #32
 8009e0c:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e10:	0711      	lsls	r1, r2, #28
 8009e12:	bf44      	itt	mi
 8009e14:	232b      	movmi	r3, #43	@ 0x2b
 8009e16:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8009e1a:	f89a 3000 	ldrb.w	r3, [sl]
 8009e1e:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e20:	d015      	beq.n	8009e4e <_svfiprintf_r+0xfa>
 8009e22:	9a07      	ldr	r2, [sp, #28]
 8009e24:	4654      	mov	r4, sl
 8009e26:	2000      	movs	r0, #0
 8009e28:	f04f 0c0a 	mov.w	ip, #10
 8009e2c:	4621      	mov	r1, r4
 8009e2e:	f811 3b01 	ldrb.w	r3, [r1], #1
 8009e32:	3b30      	subs	r3, #48	@ 0x30
 8009e34:	2b09      	cmp	r3, #9
 8009e36:	d94b      	bls.n	8009ed0 <_svfiprintf_r+0x17c>
 8009e38:	b1b0      	cbz	r0, 8009e68 <_svfiprintf_r+0x114>
 8009e3a:	9207      	str	r2, [sp, #28]
 8009e3c:	e014      	b.n	8009e68 <_svfiprintf_r+0x114>
 8009e3e:	eba0 0308 	sub.w	r3, r0, r8
 8009e42:	fa09 f303 	lsl.w	r3, r9, r3
 8009e46:	4313      	orrs	r3, r2
 8009e48:	9304      	str	r3, [sp, #16]
 8009e4a:	46a2      	mov	sl, r4
 8009e4c:	e7d2      	b.n	8009df4 <_svfiprintf_r+0xa0>
 8009e4e:	9b03      	ldr	r3, [sp, #12]
 8009e50:	1d19      	adds	r1, r3, #4
 8009e52:	681b      	ldr	r3, [r3, #0]
 8009e54:	9103      	str	r1, [sp, #12]
 8009e56:	2b00      	cmp	r3, #0
 8009e58:	bfbb      	ittet	lt
 8009e5a:	425b      	neglt	r3, r3
 8009e5c:	f042 0202 	orrlt.w	r2, r2, #2
 8009e60:	9307      	strge	r3, [sp, #28]
 8009e62:	9307      	strlt	r3, [sp, #28]
 8009e64:	bfb8      	it	lt
 8009e66:	9204      	strlt	r2, [sp, #16]
 8009e68:	7823      	ldrb	r3, [r4, #0]
 8009e6a:	2b2e      	cmp	r3, #46	@ 0x2e
 8009e6c:	d10a      	bne.n	8009e84 <_svfiprintf_r+0x130>
 8009e6e:	7863      	ldrb	r3, [r4, #1]
 8009e70:	2b2a      	cmp	r3, #42	@ 0x2a
 8009e72:	d132      	bne.n	8009eda <_svfiprintf_r+0x186>
 8009e74:	9b03      	ldr	r3, [sp, #12]
 8009e76:	1d1a      	adds	r2, r3, #4
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	9203      	str	r2, [sp, #12]
 8009e7c:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8009e80:	3402      	adds	r4, #2
 8009e82:	9305      	str	r3, [sp, #20]
 8009e84:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 8009f48 <_svfiprintf_r+0x1f4>
 8009e88:	7821      	ldrb	r1, [r4, #0]
 8009e8a:	2203      	movs	r2, #3
 8009e8c:	4650      	mov	r0, sl
 8009e8e:	f7f6 f9a7 	bl	80001e0 <memchr>
 8009e92:	b138      	cbz	r0, 8009ea4 <_svfiprintf_r+0x150>
 8009e94:	9b04      	ldr	r3, [sp, #16]
 8009e96:	eba0 000a 	sub.w	r0, r0, sl
 8009e9a:	2240      	movs	r2, #64	@ 0x40
 8009e9c:	4082      	lsls	r2, r0
 8009e9e:	4313      	orrs	r3, r2
 8009ea0:	3401      	adds	r4, #1
 8009ea2:	9304      	str	r3, [sp, #16]
 8009ea4:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009ea8:	4824      	ldr	r0, [pc, #144]	@ (8009f3c <_svfiprintf_r+0x1e8>)
 8009eaa:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8009eae:	2206      	movs	r2, #6
 8009eb0:	f7f6 f996 	bl	80001e0 <memchr>
 8009eb4:	2800      	cmp	r0, #0
 8009eb6:	d036      	beq.n	8009f26 <_svfiprintf_r+0x1d2>
 8009eb8:	4b21      	ldr	r3, [pc, #132]	@ (8009f40 <_svfiprintf_r+0x1ec>)
 8009eba:	bb1b      	cbnz	r3, 8009f04 <_svfiprintf_r+0x1b0>
 8009ebc:	9b03      	ldr	r3, [sp, #12]
 8009ebe:	3307      	adds	r3, #7
 8009ec0:	f023 0307 	bic.w	r3, r3, #7
 8009ec4:	3308      	adds	r3, #8
 8009ec6:	9303      	str	r3, [sp, #12]
 8009ec8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8009eca:	4433      	add	r3, r6
 8009ecc:	9309      	str	r3, [sp, #36]	@ 0x24
 8009ece:	e76a      	b.n	8009da6 <_svfiprintf_r+0x52>
 8009ed0:	fb0c 3202 	mla	r2, ip, r2, r3
 8009ed4:	460c      	mov	r4, r1
 8009ed6:	2001      	movs	r0, #1
 8009ed8:	e7a8      	b.n	8009e2c <_svfiprintf_r+0xd8>
 8009eda:	2300      	movs	r3, #0
 8009edc:	3401      	adds	r4, #1
 8009ede:	9305      	str	r3, [sp, #20]
 8009ee0:	4619      	mov	r1, r3
 8009ee2:	f04f 0c0a 	mov.w	ip, #10
 8009ee6:	4620      	mov	r0, r4
 8009ee8:	f810 2b01 	ldrb.w	r2, [r0], #1
 8009eec:	3a30      	subs	r2, #48	@ 0x30
 8009eee:	2a09      	cmp	r2, #9
 8009ef0:	d903      	bls.n	8009efa <_svfiprintf_r+0x1a6>
 8009ef2:	2b00      	cmp	r3, #0
 8009ef4:	d0c6      	beq.n	8009e84 <_svfiprintf_r+0x130>
 8009ef6:	9105      	str	r1, [sp, #20]
 8009ef8:	e7c4      	b.n	8009e84 <_svfiprintf_r+0x130>
 8009efa:	fb0c 2101 	mla	r1, ip, r1, r2
 8009efe:	4604      	mov	r4, r0
 8009f00:	2301      	movs	r3, #1
 8009f02:	e7f0      	b.n	8009ee6 <_svfiprintf_r+0x192>
 8009f04:	ab03      	add	r3, sp, #12
 8009f06:	9300      	str	r3, [sp, #0]
 8009f08:	462a      	mov	r2, r5
 8009f0a:	4b0e      	ldr	r3, [pc, #56]	@ (8009f44 <_svfiprintf_r+0x1f0>)
 8009f0c:	a904      	add	r1, sp, #16
 8009f0e:	4638      	mov	r0, r7
 8009f10:	f7fc fbb2 	bl	8006678 <_printf_float>
 8009f14:	1c42      	adds	r2, r0, #1
 8009f16:	4606      	mov	r6, r0
 8009f18:	d1d6      	bne.n	8009ec8 <_svfiprintf_r+0x174>
 8009f1a:	89ab      	ldrh	r3, [r5, #12]
 8009f1c:	065b      	lsls	r3, r3, #25
 8009f1e:	f53f af2d 	bmi.w	8009d7c <_svfiprintf_r+0x28>
 8009f22:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8009f24:	e72c      	b.n	8009d80 <_svfiprintf_r+0x2c>
 8009f26:	ab03      	add	r3, sp, #12
 8009f28:	9300      	str	r3, [sp, #0]
 8009f2a:	462a      	mov	r2, r5
 8009f2c:	4b05      	ldr	r3, [pc, #20]	@ (8009f44 <_svfiprintf_r+0x1f0>)
 8009f2e:	a904      	add	r1, sp, #16
 8009f30:	4638      	mov	r0, r7
 8009f32:	f7fc fe39 	bl	8006ba8 <_printf_i>
 8009f36:	e7ed      	b.n	8009f14 <_svfiprintf_r+0x1c0>
 8009f38:	0800b04d 	.word	0x0800b04d
 8009f3c:	0800b057 	.word	0x0800b057
 8009f40:	08006679 	.word	0x08006679
 8009f44:	08009c9d 	.word	0x08009c9d
 8009f48:	0800b053 	.word	0x0800b053

08009f4c <__sfputc_r>:
 8009f4c:	6893      	ldr	r3, [r2, #8]
 8009f4e:	3b01      	subs	r3, #1
 8009f50:	2b00      	cmp	r3, #0
 8009f52:	b410      	push	{r4}
 8009f54:	6093      	str	r3, [r2, #8]
 8009f56:	da08      	bge.n	8009f6a <__sfputc_r+0x1e>
 8009f58:	6994      	ldr	r4, [r2, #24]
 8009f5a:	42a3      	cmp	r3, r4
 8009f5c:	db01      	blt.n	8009f62 <__sfputc_r+0x16>
 8009f5e:	290a      	cmp	r1, #10
 8009f60:	d103      	bne.n	8009f6a <__sfputc_r+0x1e>
 8009f62:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f66:	f7fd bae2 	b.w	800752e <__swbuf_r>
 8009f6a:	6813      	ldr	r3, [r2, #0]
 8009f6c:	1c58      	adds	r0, r3, #1
 8009f6e:	6010      	str	r0, [r2, #0]
 8009f70:	7019      	strb	r1, [r3, #0]
 8009f72:	4608      	mov	r0, r1
 8009f74:	f85d 4b04 	ldr.w	r4, [sp], #4
 8009f78:	4770      	bx	lr

08009f7a <__sfputs_r>:
 8009f7a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009f7c:	4606      	mov	r6, r0
 8009f7e:	460f      	mov	r7, r1
 8009f80:	4614      	mov	r4, r2
 8009f82:	18d5      	adds	r5, r2, r3
 8009f84:	42ac      	cmp	r4, r5
 8009f86:	d101      	bne.n	8009f8c <__sfputs_r+0x12>
 8009f88:	2000      	movs	r0, #0
 8009f8a:	e007      	b.n	8009f9c <__sfputs_r+0x22>
 8009f8c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8009f90:	463a      	mov	r2, r7
 8009f92:	4630      	mov	r0, r6
 8009f94:	f7ff ffda 	bl	8009f4c <__sfputc_r>
 8009f98:	1c43      	adds	r3, r0, #1
 8009f9a:	d1f3      	bne.n	8009f84 <__sfputs_r+0xa>
 8009f9c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

08009fa0 <_vfiprintf_r>:
 8009fa0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009fa4:	460d      	mov	r5, r1
 8009fa6:	b09d      	sub	sp, #116	@ 0x74
 8009fa8:	4614      	mov	r4, r2
 8009faa:	4698      	mov	r8, r3
 8009fac:	4606      	mov	r6, r0
 8009fae:	b118      	cbz	r0, 8009fb8 <_vfiprintf_r+0x18>
 8009fb0:	6a03      	ldr	r3, [r0, #32]
 8009fb2:	b90b      	cbnz	r3, 8009fb8 <_vfiprintf_r+0x18>
 8009fb4:	f7fd f9b0 	bl	8007318 <__sinit>
 8009fb8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fba:	07d9      	lsls	r1, r3, #31
 8009fbc:	d405      	bmi.n	8009fca <_vfiprintf_r+0x2a>
 8009fbe:	89ab      	ldrh	r3, [r5, #12]
 8009fc0:	059a      	lsls	r2, r3, #22
 8009fc2:	d402      	bmi.n	8009fca <_vfiprintf_r+0x2a>
 8009fc4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009fc6:	f7fd fbda 	bl	800777e <__retarget_lock_acquire_recursive>
 8009fca:	89ab      	ldrh	r3, [r5, #12]
 8009fcc:	071b      	lsls	r3, r3, #28
 8009fce:	d501      	bpl.n	8009fd4 <_vfiprintf_r+0x34>
 8009fd0:	692b      	ldr	r3, [r5, #16]
 8009fd2:	b99b      	cbnz	r3, 8009ffc <_vfiprintf_r+0x5c>
 8009fd4:	4629      	mov	r1, r5
 8009fd6:	4630      	mov	r0, r6
 8009fd8:	f7fd fae8 	bl	80075ac <__swsetup_r>
 8009fdc:	b170      	cbz	r0, 8009ffc <_vfiprintf_r+0x5c>
 8009fde:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8009fe0:	07dc      	lsls	r4, r3, #31
 8009fe2:	d504      	bpl.n	8009fee <_vfiprintf_r+0x4e>
 8009fe4:	f04f 30ff 	mov.w	r0, #4294967295
 8009fe8:	b01d      	add	sp, #116	@ 0x74
 8009fea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009fee:	89ab      	ldrh	r3, [r5, #12]
 8009ff0:	0598      	lsls	r0, r3, #22
 8009ff2:	d4f7      	bmi.n	8009fe4 <_vfiprintf_r+0x44>
 8009ff4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8009ff6:	f7fd fbc3 	bl	8007780 <__retarget_lock_release_recursive>
 8009ffa:	e7f3      	b.n	8009fe4 <_vfiprintf_r+0x44>
 8009ffc:	2300      	movs	r3, #0
 8009ffe:	9309      	str	r3, [sp, #36]	@ 0x24
 800a000:	2320      	movs	r3, #32
 800a002:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800a006:	f8cd 800c 	str.w	r8, [sp, #12]
 800a00a:	2330      	movs	r3, #48	@ 0x30
 800a00c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 800a1bc <_vfiprintf_r+0x21c>
 800a010:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800a014:	f04f 0901 	mov.w	r9, #1
 800a018:	4623      	mov	r3, r4
 800a01a:	469a      	mov	sl, r3
 800a01c:	f813 2b01 	ldrb.w	r2, [r3], #1
 800a020:	b10a      	cbz	r2, 800a026 <_vfiprintf_r+0x86>
 800a022:	2a25      	cmp	r2, #37	@ 0x25
 800a024:	d1f9      	bne.n	800a01a <_vfiprintf_r+0x7a>
 800a026:	ebba 0b04 	subs.w	fp, sl, r4
 800a02a:	d00b      	beq.n	800a044 <_vfiprintf_r+0xa4>
 800a02c:	465b      	mov	r3, fp
 800a02e:	4622      	mov	r2, r4
 800a030:	4629      	mov	r1, r5
 800a032:	4630      	mov	r0, r6
 800a034:	f7ff ffa1 	bl	8009f7a <__sfputs_r>
 800a038:	3001      	adds	r0, #1
 800a03a:	f000 80a7 	beq.w	800a18c <_vfiprintf_r+0x1ec>
 800a03e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800a040:	445a      	add	r2, fp
 800a042:	9209      	str	r2, [sp, #36]	@ 0x24
 800a044:	f89a 3000 	ldrb.w	r3, [sl]
 800a048:	2b00      	cmp	r3, #0
 800a04a:	f000 809f 	beq.w	800a18c <_vfiprintf_r+0x1ec>
 800a04e:	2300      	movs	r3, #0
 800a050:	f04f 32ff 	mov.w	r2, #4294967295
 800a054:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800a058:	f10a 0a01 	add.w	sl, sl, #1
 800a05c:	9304      	str	r3, [sp, #16]
 800a05e:	9307      	str	r3, [sp, #28]
 800a060:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800a064:	931a      	str	r3, [sp, #104]	@ 0x68
 800a066:	4654      	mov	r4, sl
 800a068:	2205      	movs	r2, #5
 800a06a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a06e:	4853      	ldr	r0, [pc, #332]	@ (800a1bc <_vfiprintf_r+0x21c>)
 800a070:	f7f6 f8b6 	bl	80001e0 <memchr>
 800a074:	9a04      	ldr	r2, [sp, #16]
 800a076:	b9d8      	cbnz	r0, 800a0b0 <_vfiprintf_r+0x110>
 800a078:	06d1      	lsls	r1, r2, #27
 800a07a:	bf44      	itt	mi
 800a07c:	2320      	movmi	r3, #32
 800a07e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a082:	0713      	lsls	r3, r2, #28
 800a084:	bf44      	itt	mi
 800a086:	232b      	movmi	r3, #43	@ 0x2b
 800a088:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800a08c:	f89a 3000 	ldrb.w	r3, [sl]
 800a090:	2b2a      	cmp	r3, #42	@ 0x2a
 800a092:	d015      	beq.n	800a0c0 <_vfiprintf_r+0x120>
 800a094:	9a07      	ldr	r2, [sp, #28]
 800a096:	4654      	mov	r4, sl
 800a098:	2000      	movs	r0, #0
 800a09a:	f04f 0c0a 	mov.w	ip, #10
 800a09e:	4621      	mov	r1, r4
 800a0a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 800a0a4:	3b30      	subs	r3, #48	@ 0x30
 800a0a6:	2b09      	cmp	r3, #9
 800a0a8:	d94b      	bls.n	800a142 <_vfiprintf_r+0x1a2>
 800a0aa:	b1b0      	cbz	r0, 800a0da <_vfiprintf_r+0x13a>
 800a0ac:	9207      	str	r2, [sp, #28]
 800a0ae:	e014      	b.n	800a0da <_vfiprintf_r+0x13a>
 800a0b0:	eba0 0308 	sub.w	r3, r0, r8
 800a0b4:	fa09 f303 	lsl.w	r3, r9, r3
 800a0b8:	4313      	orrs	r3, r2
 800a0ba:	9304      	str	r3, [sp, #16]
 800a0bc:	46a2      	mov	sl, r4
 800a0be:	e7d2      	b.n	800a066 <_vfiprintf_r+0xc6>
 800a0c0:	9b03      	ldr	r3, [sp, #12]
 800a0c2:	1d19      	adds	r1, r3, #4
 800a0c4:	681b      	ldr	r3, [r3, #0]
 800a0c6:	9103      	str	r1, [sp, #12]
 800a0c8:	2b00      	cmp	r3, #0
 800a0ca:	bfbb      	ittet	lt
 800a0cc:	425b      	neglt	r3, r3
 800a0ce:	f042 0202 	orrlt.w	r2, r2, #2
 800a0d2:	9307      	strge	r3, [sp, #28]
 800a0d4:	9307      	strlt	r3, [sp, #28]
 800a0d6:	bfb8      	it	lt
 800a0d8:	9204      	strlt	r2, [sp, #16]
 800a0da:	7823      	ldrb	r3, [r4, #0]
 800a0dc:	2b2e      	cmp	r3, #46	@ 0x2e
 800a0de:	d10a      	bne.n	800a0f6 <_vfiprintf_r+0x156>
 800a0e0:	7863      	ldrb	r3, [r4, #1]
 800a0e2:	2b2a      	cmp	r3, #42	@ 0x2a
 800a0e4:	d132      	bne.n	800a14c <_vfiprintf_r+0x1ac>
 800a0e6:	9b03      	ldr	r3, [sp, #12]
 800a0e8:	1d1a      	adds	r2, r3, #4
 800a0ea:	681b      	ldr	r3, [r3, #0]
 800a0ec:	9203      	str	r2, [sp, #12]
 800a0ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 800a0f2:	3402      	adds	r4, #2
 800a0f4:	9305      	str	r3, [sp, #20]
 800a0f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 800a1cc <_vfiprintf_r+0x22c>
 800a0fa:	7821      	ldrb	r1, [r4, #0]
 800a0fc:	2203      	movs	r2, #3
 800a0fe:	4650      	mov	r0, sl
 800a100:	f7f6 f86e 	bl	80001e0 <memchr>
 800a104:	b138      	cbz	r0, 800a116 <_vfiprintf_r+0x176>
 800a106:	9b04      	ldr	r3, [sp, #16]
 800a108:	eba0 000a 	sub.w	r0, r0, sl
 800a10c:	2240      	movs	r2, #64	@ 0x40
 800a10e:	4082      	lsls	r2, r0
 800a110:	4313      	orrs	r3, r2
 800a112:	3401      	adds	r4, #1
 800a114:	9304      	str	r3, [sp, #16]
 800a116:	f814 1b01 	ldrb.w	r1, [r4], #1
 800a11a:	4829      	ldr	r0, [pc, #164]	@ (800a1c0 <_vfiprintf_r+0x220>)
 800a11c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 800a120:	2206      	movs	r2, #6
 800a122:	f7f6 f85d 	bl	80001e0 <memchr>
 800a126:	2800      	cmp	r0, #0
 800a128:	d03f      	beq.n	800a1aa <_vfiprintf_r+0x20a>
 800a12a:	4b26      	ldr	r3, [pc, #152]	@ (800a1c4 <_vfiprintf_r+0x224>)
 800a12c:	bb1b      	cbnz	r3, 800a176 <_vfiprintf_r+0x1d6>
 800a12e:	9b03      	ldr	r3, [sp, #12]
 800a130:	3307      	adds	r3, #7
 800a132:	f023 0307 	bic.w	r3, r3, #7
 800a136:	3308      	adds	r3, #8
 800a138:	9303      	str	r3, [sp, #12]
 800a13a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800a13c:	443b      	add	r3, r7
 800a13e:	9309      	str	r3, [sp, #36]	@ 0x24
 800a140:	e76a      	b.n	800a018 <_vfiprintf_r+0x78>
 800a142:	fb0c 3202 	mla	r2, ip, r2, r3
 800a146:	460c      	mov	r4, r1
 800a148:	2001      	movs	r0, #1
 800a14a:	e7a8      	b.n	800a09e <_vfiprintf_r+0xfe>
 800a14c:	2300      	movs	r3, #0
 800a14e:	3401      	adds	r4, #1
 800a150:	9305      	str	r3, [sp, #20]
 800a152:	4619      	mov	r1, r3
 800a154:	f04f 0c0a 	mov.w	ip, #10
 800a158:	4620      	mov	r0, r4
 800a15a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a15e:	3a30      	subs	r2, #48	@ 0x30
 800a160:	2a09      	cmp	r2, #9
 800a162:	d903      	bls.n	800a16c <_vfiprintf_r+0x1cc>
 800a164:	2b00      	cmp	r3, #0
 800a166:	d0c6      	beq.n	800a0f6 <_vfiprintf_r+0x156>
 800a168:	9105      	str	r1, [sp, #20]
 800a16a:	e7c4      	b.n	800a0f6 <_vfiprintf_r+0x156>
 800a16c:	fb0c 2101 	mla	r1, ip, r1, r2
 800a170:	4604      	mov	r4, r0
 800a172:	2301      	movs	r3, #1
 800a174:	e7f0      	b.n	800a158 <_vfiprintf_r+0x1b8>
 800a176:	ab03      	add	r3, sp, #12
 800a178:	9300      	str	r3, [sp, #0]
 800a17a:	462a      	mov	r2, r5
 800a17c:	4b12      	ldr	r3, [pc, #72]	@ (800a1c8 <_vfiprintf_r+0x228>)
 800a17e:	a904      	add	r1, sp, #16
 800a180:	4630      	mov	r0, r6
 800a182:	f7fc fa79 	bl	8006678 <_printf_float>
 800a186:	4607      	mov	r7, r0
 800a188:	1c78      	adds	r0, r7, #1
 800a18a:	d1d6      	bne.n	800a13a <_vfiprintf_r+0x19a>
 800a18c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800a18e:	07d9      	lsls	r1, r3, #31
 800a190:	d405      	bmi.n	800a19e <_vfiprintf_r+0x1fe>
 800a192:	89ab      	ldrh	r3, [r5, #12]
 800a194:	059a      	lsls	r2, r3, #22
 800a196:	d402      	bmi.n	800a19e <_vfiprintf_r+0x1fe>
 800a198:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800a19a:	f7fd faf1 	bl	8007780 <__retarget_lock_release_recursive>
 800a19e:	89ab      	ldrh	r3, [r5, #12]
 800a1a0:	065b      	lsls	r3, r3, #25
 800a1a2:	f53f af1f 	bmi.w	8009fe4 <_vfiprintf_r+0x44>
 800a1a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 800a1a8:	e71e      	b.n	8009fe8 <_vfiprintf_r+0x48>
 800a1aa:	ab03      	add	r3, sp, #12
 800a1ac:	9300      	str	r3, [sp, #0]
 800a1ae:	462a      	mov	r2, r5
 800a1b0:	4b05      	ldr	r3, [pc, #20]	@ (800a1c8 <_vfiprintf_r+0x228>)
 800a1b2:	a904      	add	r1, sp, #16
 800a1b4:	4630      	mov	r0, r6
 800a1b6:	f7fc fcf7 	bl	8006ba8 <_printf_i>
 800a1ba:	e7e4      	b.n	800a186 <_vfiprintf_r+0x1e6>
 800a1bc:	0800b04d 	.word	0x0800b04d
 800a1c0:	0800b057 	.word	0x0800b057
 800a1c4:	08006679 	.word	0x08006679
 800a1c8:	08009f7b 	.word	0x08009f7b
 800a1cc:	0800b053 	.word	0x0800b053

0800a1d0 <__sflush_r>:
 800a1d0:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800a1d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a1d8:	0716      	lsls	r6, r2, #28
 800a1da:	4605      	mov	r5, r0
 800a1dc:	460c      	mov	r4, r1
 800a1de:	d454      	bmi.n	800a28a <__sflush_r+0xba>
 800a1e0:	684b      	ldr	r3, [r1, #4]
 800a1e2:	2b00      	cmp	r3, #0
 800a1e4:	dc02      	bgt.n	800a1ec <__sflush_r+0x1c>
 800a1e6:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 800a1e8:	2b00      	cmp	r3, #0
 800a1ea:	dd48      	ble.n	800a27e <__sflush_r+0xae>
 800a1ec:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a1ee:	2e00      	cmp	r6, #0
 800a1f0:	d045      	beq.n	800a27e <__sflush_r+0xae>
 800a1f2:	2300      	movs	r3, #0
 800a1f4:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800a1f8:	682f      	ldr	r7, [r5, #0]
 800a1fa:	6a21      	ldr	r1, [r4, #32]
 800a1fc:	602b      	str	r3, [r5, #0]
 800a1fe:	d030      	beq.n	800a262 <__sflush_r+0x92>
 800a200:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800a202:	89a3      	ldrh	r3, [r4, #12]
 800a204:	0759      	lsls	r1, r3, #29
 800a206:	d505      	bpl.n	800a214 <__sflush_r+0x44>
 800a208:	6863      	ldr	r3, [r4, #4]
 800a20a:	1ad2      	subs	r2, r2, r3
 800a20c:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800a20e:	b10b      	cbz	r3, 800a214 <__sflush_r+0x44>
 800a210:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800a212:	1ad2      	subs	r2, r2, r3
 800a214:	2300      	movs	r3, #0
 800a216:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800a218:	6a21      	ldr	r1, [r4, #32]
 800a21a:	4628      	mov	r0, r5
 800a21c:	47b0      	blx	r6
 800a21e:	1c43      	adds	r3, r0, #1
 800a220:	89a3      	ldrh	r3, [r4, #12]
 800a222:	d106      	bne.n	800a232 <__sflush_r+0x62>
 800a224:	6829      	ldr	r1, [r5, #0]
 800a226:	291d      	cmp	r1, #29
 800a228:	d82b      	bhi.n	800a282 <__sflush_r+0xb2>
 800a22a:	4a2a      	ldr	r2, [pc, #168]	@ (800a2d4 <__sflush_r+0x104>)
 800a22c:	40ca      	lsrs	r2, r1
 800a22e:	07d6      	lsls	r6, r2, #31
 800a230:	d527      	bpl.n	800a282 <__sflush_r+0xb2>
 800a232:	2200      	movs	r2, #0
 800a234:	6062      	str	r2, [r4, #4]
 800a236:	04d9      	lsls	r1, r3, #19
 800a238:	6922      	ldr	r2, [r4, #16]
 800a23a:	6022      	str	r2, [r4, #0]
 800a23c:	d504      	bpl.n	800a248 <__sflush_r+0x78>
 800a23e:	1c42      	adds	r2, r0, #1
 800a240:	d101      	bne.n	800a246 <__sflush_r+0x76>
 800a242:	682b      	ldr	r3, [r5, #0]
 800a244:	b903      	cbnz	r3, 800a248 <__sflush_r+0x78>
 800a246:	6560      	str	r0, [r4, #84]	@ 0x54
 800a248:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800a24a:	602f      	str	r7, [r5, #0]
 800a24c:	b1b9      	cbz	r1, 800a27e <__sflush_r+0xae>
 800a24e:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800a252:	4299      	cmp	r1, r3
 800a254:	d002      	beq.n	800a25c <__sflush_r+0x8c>
 800a256:	4628      	mov	r0, r5
 800a258:	f7fe f8f2 	bl	8008440 <_free_r>
 800a25c:	2300      	movs	r3, #0
 800a25e:	6363      	str	r3, [r4, #52]	@ 0x34
 800a260:	e00d      	b.n	800a27e <__sflush_r+0xae>
 800a262:	2301      	movs	r3, #1
 800a264:	4628      	mov	r0, r5
 800a266:	47b0      	blx	r6
 800a268:	4602      	mov	r2, r0
 800a26a:	1c50      	adds	r0, r2, #1
 800a26c:	d1c9      	bne.n	800a202 <__sflush_r+0x32>
 800a26e:	682b      	ldr	r3, [r5, #0]
 800a270:	2b00      	cmp	r3, #0
 800a272:	d0c6      	beq.n	800a202 <__sflush_r+0x32>
 800a274:	2b1d      	cmp	r3, #29
 800a276:	d001      	beq.n	800a27c <__sflush_r+0xac>
 800a278:	2b16      	cmp	r3, #22
 800a27a:	d11e      	bne.n	800a2ba <__sflush_r+0xea>
 800a27c:	602f      	str	r7, [r5, #0]
 800a27e:	2000      	movs	r0, #0
 800a280:	e022      	b.n	800a2c8 <__sflush_r+0xf8>
 800a282:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a286:	b21b      	sxth	r3, r3
 800a288:	e01b      	b.n	800a2c2 <__sflush_r+0xf2>
 800a28a:	690f      	ldr	r7, [r1, #16]
 800a28c:	2f00      	cmp	r7, #0
 800a28e:	d0f6      	beq.n	800a27e <__sflush_r+0xae>
 800a290:	0793      	lsls	r3, r2, #30
 800a292:	680e      	ldr	r6, [r1, #0]
 800a294:	bf08      	it	eq
 800a296:	694b      	ldreq	r3, [r1, #20]
 800a298:	600f      	str	r7, [r1, #0]
 800a29a:	bf18      	it	ne
 800a29c:	2300      	movne	r3, #0
 800a29e:	eba6 0807 	sub.w	r8, r6, r7
 800a2a2:	608b      	str	r3, [r1, #8]
 800a2a4:	f1b8 0f00 	cmp.w	r8, #0
 800a2a8:	dde9      	ble.n	800a27e <__sflush_r+0xae>
 800a2aa:	6a21      	ldr	r1, [r4, #32]
 800a2ac:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 800a2ae:	4643      	mov	r3, r8
 800a2b0:	463a      	mov	r2, r7
 800a2b2:	4628      	mov	r0, r5
 800a2b4:	47b0      	blx	r6
 800a2b6:	2800      	cmp	r0, #0
 800a2b8:	dc08      	bgt.n	800a2cc <__sflush_r+0xfc>
 800a2ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2be:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800a2c2:	81a3      	strh	r3, [r4, #12]
 800a2c4:	f04f 30ff 	mov.w	r0, #4294967295
 800a2c8:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a2cc:	4407      	add	r7, r0
 800a2ce:	eba8 0800 	sub.w	r8, r8, r0
 800a2d2:	e7e7      	b.n	800a2a4 <__sflush_r+0xd4>
 800a2d4:	20400001 	.word	0x20400001

0800a2d8 <_fflush_r>:
 800a2d8:	b538      	push	{r3, r4, r5, lr}
 800a2da:	690b      	ldr	r3, [r1, #16]
 800a2dc:	4605      	mov	r5, r0
 800a2de:	460c      	mov	r4, r1
 800a2e0:	b913      	cbnz	r3, 800a2e8 <_fflush_r+0x10>
 800a2e2:	2500      	movs	r5, #0
 800a2e4:	4628      	mov	r0, r5
 800a2e6:	bd38      	pop	{r3, r4, r5, pc}
 800a2e8:	b118      	cbz	r0, 800a2f2 <_fflush_r+0x1a>
 800a2ea:	6a03      	ldr	r3, [r0, #32]
 800a2ec:	b90b      	cbnz	r3, 800a2f2 <_fflush_r+0x1a>
 800a2ee:	f7fd f813 	bl	8007318 <__sinit>
 800a2f2:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a2f6:	2b00      	cmp	r3, #0
 800a2f8:	d0f3      	beq.n	800a2e2 <_fflush_r+0xa>
 800a2fa:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 800a2fc:	07d0      	lsls	r0, r2, #31
 800a2fe:	d404      	bmi.n	800a30a <_fflush_r+0x32>
 800a300:	0599      	lsls	r1, r3, #22
 800a302:	d402      	bmi.n	800a30a <_fflush_r+0x32>
 800a304:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a306:	f7fd fa3a 	bl	800777e <__retarget_lock_acquire_recursive>
 800a30a:	4628      	mov	r0, r5
 800a30c:	4621      	mov	r1, r4
 800a30e:	f7ff ff5f 	bl	800a1d0 <__sflush_r>
 800a312:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 800a314:	07da      	lsls	r2, r3, #31
 800a316:	4605      	mov	r5, r0
 800a318:	d4e4      	bmi.n	800a2e4 <_fflush_r+0xc>
 800a31a:	89a3      	ldrh	r3, [r4, #12]
 800a31c:	059b      	lsls	r3, r3, #22
 800a31e:	d4e1      	bmi.n	800a2e4 <_fflush_r+0xc>
 800a320:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800a322:	f7fd fa2d 	bl	8007780 <__retarget_lock_release_recursive>
 800a326:	e7dd      	b.n	800a2e4 <_fflush_r+0xc>

0800a328 <__swhatbuf_r>:
 800a328:	b570      	push	{r4, r5, r6, lr}
 800a32a:	460c      	mov	r4, r1
 800a32c:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 800a330:	2900      	cmp	r1, #0
 800a332:	b096      	sub	sp, #88	@ 0x58
 800a334:	4615      	mov	r5, r2
 800a336:	461e      	mov	r6, r3
 800a338:	da0d      	bge.n	800a356 <__swhatbuf_r+0x2e>
 800a33a:	89a3      	ldrh	r3, [r4, #12]
 800a33c:	f013 0f80 	tst.w	r3, #128	@ 0x80
 800a340:	f04f 0100 	mov.w	r1, #0
 800a344:	bf14      	ite	ne
 800a346:	2340      	movne	r3, #64	@ 0x40
 800a348:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 800a34c:	2000      	movs	r0, #0
 800a34e:	6031      	str	r1, [r6, #0]
 800a350:	602b      	str	r3, [r5, #0]
 800a352:	b016      	add	sp, #88	@ 0x58
 800a354:	bd70      	pop	{r4, r5, r6, pc}
 800a356:	466a      	mov	r2, sp
 800a358:	f000 f874 	bl	800a444 <_fstat_r>
 800a35c:	2800      	cmp	r0, #0
 800a35e:	dbec      	blt.n	800a33a <__swhatbuf_r+0x12>
 800a360:	9901      	ldr	r1, [sp, #4]
 800a362:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800a366:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800a36a:	4259      	negs	r1, r3
 800a36c:	4159      	adcs	r1, r3
 800a36e:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 800a372:	e7eb      	b.n	800a34c <__swhatbuf_r+0x24>

0800a374 <__smakebuf_r>:
 800a374:	898b      	ldrh	r3, [r1, #12]
 800a376:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a378:	079d      	lsls	r5, r3, #30
 800a37a:	4606      	mov	r6, r0
 800a37c:	460c      	mov	r4, r1
 800a37e:	d507      	bpl.n	800a390 <__smakebuf_r+0x1c>
 800a380:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 800a384:	6023      	str	r3, [r4, #0]
 800a386:	6123      	str	r3, [r4, #16]
 800a388:	2301      	movs	r3, #1
 800a38a:	6163      	str	r3, [r4, #20]
 800a38c:	b003      	add	sp, #12
 800a38e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a390:	ab01      	add	r3, sp, #4
 800a392:	466a      	mov	r2, sp
 800a394:	f7ff ffc8 	bl	800a328 <__swhatbuf_r>
 800a398:	9f00      	ldr	r7, [sp, #0]
 800a39a:	4605      	mov	r5, r0
 800a39c:	4639      	mov	r1, r7
 800a39e:	4630      	mov	r0, r6
 800a3a0:	f7fe f8c2 	bl	8008528 <_malloc_r>
 800a3a4:	b948      	cbnz	r0, 800a3ba <__smakebuf_r+0x46>
 800a3a6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800a3aa:	059a      	lsls	r2, r3, #22
 800a3ac:	d4ee      	bmi.n	800a38c <__smakebuf_r+0x18>
 800a3ae:	f023 0303 	bic.w	r3, r3, #3
 800a3b2:	f043 0302 	orr.w	r3, r3, #2
 800a3b6:	81a3      	strh	r3, [r4, #12]
 800a3b8:	e7e2      	b.n	800a380 <__smakebuf_r+0xc>
 800a3ba:	89a3      	ldrh	r3, [r4, #12]
 800a3bc:	6020      	str	r0, [r4, #0]
 800a3be:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800a3c2:	81a3      	strh	r3, [r4, #12]
 800a3c4:	9b01      	ldr	r3, [sp, #4]
 800a3c6:	e9c4 0704 	strd	r0, r7, [r4, #16]
 800a3ca:	b15b      	cbz	r3, 800a3e4 <__smakebuf_r+0x70>
 800a3cc:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 800a3d0:	4630      	mov	r0, r6
 800a3d2:	f000 f849 	bl	800a468 <_isatty_r>
 800a3d6:	b128      	cbz	r0, 800a3e4 <__smakebuf_r+0x70>
 800a3d8:	89a3      	ldrh	r3, [r4, #12]
 800a3da:	f023 0303 	bic.w	r3, r3, #3
 800a3de:	f043 0301 	orr.w	r3, r3, #1
 800a3e2:	81a3      	strh	r3, [r4, #12]
 800a3e4:	89a3      	ldrh	r3, [r4, #12]
 800a3e6:	431d      	orrs	r5, r3
 800a3e8:	81a5      	strh	r5, [r4, #12]
 800a3ea:	e7cf      	b.n	800a38c <__smakebuf_r+0x18>

0800a3ec <memmove>:
 800a3ec:	4288      	cmp	r0, r1
 800a3ee:	b510      	push	{r4, lr}
 800a3f0:	eb01 0402 	add.w	r4, r1, r2
 800a3f4:	d902      	bls.n	800a3fc <memmove+0x10>
 800a3f6:	4284      	cmp	r4, r0
 800a3f8:	4623      	mov	r3, r4
 800a3fa:	d807      	bhi.n	800a40c <memmove+0x20>
 800a3fc:	1e43      	subs	r3, r0, #1
 800a3fe:	42a1      	cmp	r1, r4
 800a400:	d008      	beq.n	800a414 <memmove+0x28>
 800a402:	f811 2b01 	ldrb.w	r2, [r1], #1
 800a406:	f803 2f01 	strb.w	r2, [r3, #1]!
 800a40a:	e7f8      	b.n	800a3fe <memmove+0x12>
 800a40c:	4402      	add	r2, r0
 800a40e:	4601      	mov	r1, r0
 800a410:	428a      	cmp	r2, r1
 800a412:	d100      	bne.n	800a416 <memmove+0x2a>
 800a414:	bd10      	pop	{r4, pc}
 800a416:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 800a41a:	f802 4d01 	strb.w	r4, [r2, #-1]!
 800a41e:	e7f7      	b.n	800a410 <memmove+0x24>

0800a420 <strncmp>:
 800a420:	b510      	push	{r4, lr}
 800a422:	b16a      	cbz	r2, 800a440 <strncmp+0x20>
 800a424:	3901      	subs	r1, #1
 800a426:	1884      	adds	r4, r0, r2
 800a428:	f810 2b01 	ldrb.w	r2, [r0], #1
 800a42c:	f811 3f01 	ldrb.w	r3, [r1, #1]!
 800a430:	429a      	cmp	r2, r3
 800a432:	d103      	bne.n	800a43c <strncmp+0x1c>
 800a434:	42a0      	cmp	r0, r4
 800a436:	d001      	beq.n	800a43c <strncmp+0x1c>
 800a438:	2a00      	cmp	r2, #0
 800a43a:	d1f5      	bne.n	800a428 <strncmp+0x8>
 800a43c:	1ad0      	subs	r0, r2, r3
 800a43e:	bd10      	pop	{r4, pc}
 800a440:	4610      	mov	r0, r2
 800a442:	e7fc      	b.n	800a43e <strncmp+0x1e>

0800a444 <_fstat_r>:
 800a444:	b538      	push	{r3, r4, r5, lr}
 800a446:	4d07      	ldr	r5, [pc, #28]	@ (800a464 <_fstat_r+0x20>)
 800a448:	2300      	movs	r3, #0
 800a44a:	4604      	mov	r4, r0
 800a44c:	4608      	mov	r0, r1
 800a44e:	4611      	mov	r1, r2
 800a450:	602b      	str	r3, [r5, #0]
 800a452:	f7f7 fef9 	bl	8002248 <_fstat>
 800a456:	1c43      	adds	r3, r0, #1
 800a458:	d102      	bne.n	800a460 <_fstat_r+0x1c>
 800a45a:	682b      	ldr	r3, [r5, #0]
 800a45c:	b103      	cbz	r3, 800a460 <_fstat_r+0x1c>
 800a45e:	6023      	str	r3, [r4, #0]
 800a460:	bd38      	pop	{r3, r4, r5, pc}
 800a462:	bf00      	nop
 800a464:	20000918 	.word	0x20000918

0800a468 <_isatty_r>:
 800a468:	b538      	push	{r3, r4, r5, lr}
 800a46a:	4d06      	ldr	r5, [pc, #24]	@ (800a484 <_isatty_r+0x1c>)
 800a46c:	2300      	movs	r3, #0
 800a46e:	4604      	mov	r4, r0
 800a470:	4608      	mov	r0, r1
 800a472:	602b      	str	r3, [r5, #0]
 800a474:	f7f7 fef8 	bl	8002268 <_isatty>
 800a478:	1c43      	adds	r3, r0, #1
 800a47a:	d102      	bne.n	800a482 <_isatty_r+0x1a>
 800a47c:	682b      	ldr	r3, [r5, #0]
 800a47e:	b103      	cbz	r3, 800a482 <_isatty_r+0x1a>
 800a480:	6023      	str	r3, [r4, #0]
 800a482:	bd38      	pop	{r3, r4, r5, pc}
 800a484:	20000918 	.word	0x20000918

0800a488 <_sbrk_r>:
 800a488:	b538      	push	{r3, r4, r5, lr}
 800a48a:	4d06      	ldr	r5, [pc, #24]	@ (800a4a4 <_sbrk_r+0x1c>)
 800a48c:	2300      	movs	r3, #0
 800a48e:	4604      	mov	r4, r0
 800a490:	4608      	mov	r0, r1
 800a492:	602b      	str	r3, [r5, #0]
 800a494:	f7f7 ff00 	bl	8002298 <_sbrk>
 800a498:	1c43      	adds	r3, r0, #1
 800a49a:	d102      	bne.n	800a4a2 <_sbrk_r+0x1a>
 800a49c:	682b      	ldr	r3, [r5, #0]
 800a49e:	b103      	cbz	r3, 800a4a2 <_sbrk_r+0x1a>
 800a4a0:	6023      	str	r3, [r4, #0]
 800a4a2:	bd38      	pop	{r3, r4, r5, pc}
 800a4a4:	20000918 	.word	0x20000918

0800a4a8 <memcpy>:
 800a4a8:	440a      	add	r2, r1
 800a4aa:	4291      	cmp	r1, r2
 800a4ac:	f100 33ff 	add.w	r3, r0, #4294967295
 800a4b0:	d100      	bne.n	800a4b4 <memcpy+0xc>
 800a4b2:	4770      	bx	lr
 800a4b4:	b510      	push	{r4, lr}
 800a4b6:	f811 4b01 	ldrb.w	r4, [r1], #1
 800a4ba:	f803 4f01 	strb.w	r4, [r3, #1]!
 800a4be:	4291      	cmp	r1, r2
 800a4c0:	d1f9      	bne.n	800a4b6 <memcpy+0xe>
 800a4c2:	bd10      	pop	{r4, pc}
 800a4c4:	0000      	movs	r0, r0
	...

0800a4c8 <nan>:
 800a4c8:	ed9f 0b01 	vldr	d0, [pc, #4]	@ 800a4d0 <nan+0x8>
 800a4cc:	4770      	bx	lr
 800a4ce:	bf00      	nop
 800a4d0:	00000000 	.word	0x00000000
 800a4d4:	7ff80000 	.word	0x7ff80000

0800a4d8 <__assert_func>:
 800a4d8:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 800a4da:	4614      	mov	r4, r2
 800a4dc:	461a      	mov	r2, r3
 800a4de:	4b09      	ldr	r3, [pc, #36]	@ (800a504 <__assert_func+0x2c>)
 800a4e0:	681b      	ldr	r3, [r3, #0]
 800a4e2:	4605      	mov	r5, r0
 800a4e4:	68d8      	ldr	r0, [r3, #12]
 800a4e6:	b14c      	cbz	r4, 800a4fc <__assert_func+0x24>
 800a4e8:	4b07      	ldr	r3, [pc, #28]	@ (800a508 <__assert_func+0x30>)
 800a4ea:	9100      	str	r1, [sp, #0]
 800a4ec:	e9cd 3401 	strd	r3, r4, [sp, #4]
 800a4f0:	4906      	ldr	r1, [pc, #24]	@ (800a50c <__assert_func+0x34>)
 800a4f2:	462b      	mov	r3, r5
 800a4f4:	f000 fba8 	bl	800ac48 <fiprintf>
 800a4f8:	f000 fbb8 	bl	800ac6c <abort>
 800a4fc:	4b04      	ldr	r3, [pc, #16]	@ (800a510 <__assert_func+0x38>)
 800a4fe:	461c      	mov	r4, r3
 800a500:	e7f3      	b.n	800a4ea <__assert_func+0x12>
 800a502:	bf00      	nop
 800a504:	20000034 	.word	0x20000034
 800a508:	0800b066 	.word	0x0800b066
 800a50c:	0800b073 	.word	0x0800b073
 800a510:	0800b0a1 	.word	0x0800b0a1

0800a514 <_calloc_r>:
 800a514:	b570      	push	{r4, r5, r6, lr}
 800a516:	fba1 5402 	umull	r5, r4, r1, r2
 800a51a:	b934      	cbnz	r4, 800a52a <_calloc_r+0x16>
 800a51c:	4629      	mov	r1, r5
 800a51e:	f7fe f803 	bl	8008528 <_malloc_r>
 800a522:	4606      	mov	r6, r0
 800a524:	b928      	cbnz	r0, 800a532 <_calloc_r+0x1e>
 800a526:	4630      	mov	r0, r6
 800a528:	bd70      	pop	{r4, r5, r6, pc}
 800a52a:	220c      	movs	r2, #12
 800a52c:	6002      	str	r2, [r0, #0]
 800a52e:	2600      	movs	r6, #0
 800a530:	e7f9      	b.n	800a526 <_calloc_r+0x12>
 800a532:	462a      	mov	r2, r5
 800a534:	4621      	mov	r1, r4
 800a536:	f7fd f88f 	bl	8007658 <memset>
 800a53a:	e7f4      	b.n	800a526 <_calloc_r+0x12>

0800a53c <rshift>:
 800a53c:	6903      	ldr	r3, [r0, #16]
 800a53e:	ebb3 1f61 	cmp.w	r3, r1, asr #5
 800a542:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 800a546:	ea4f 1261 	mov.w	r2, r1, asr #5
 800a54a:	f100 0414 	add.w	r4, r0, #20
 800a54e:	dd45      	ble.n	800a5dc <rshift+0xa0>
 800a550:	f011 011f 	ands.w	r1, r1, #31
 800a554:	eb04 0683 	add.w	r6, r4, r3, lsl #2
 800a558:	eb04 0582 	add.w	r5, r4, r2, lsl #2
 800a55c:	d10c      	bne.n	800a578 <rshift+0x3c>
 800a55e:	f100 0710 	add.w	r7, r0, #16
 800a562:	4629      	mov	r1, r5
 800a564:	42b1      	cmp	r1, r6
 800a566:	d334      	bcc.n	800a5d2 <rshift+0x96>
 800a568:	1a9b      	subs	r3, r3, r2
 800a56a:	009b      	lsls	r3, r3, #2
 800a56c:	1eea      	subs	r2, r5, #3
 800a56e:	4296      	cmp	r6, r2
 800a570:	bf38      	it	cc
 800a572:	2300      	movcc	r3, #0
 800a574:	4423      	add	r3, r4
 800a576:	e015      	b.n	800a5a4 <rshift+0x68>
 800a578:	f854 7022 	ldr.w	r7, [r4, r2, lsl #2]
 800a57c:	f1c1 0820 	rsb	r8, r1, #32
 800a580:	40cf      	lsrs	r7, r1
 800a582:	f105 0e04 	add.w	lr, r5, #4
 800a586:	46a1      	mov	r9, r4
 800a588:	4576      	cmp	r6, lr
 800a58a:	46f4      	mov	ip, lr
 800a58c:	d815      	bhi.n	800a5ba <rshift+0x7e>
 800a58e:	1a9a      	subs	r2, r3, r2
 800a590:	0092      	lsls	r2, r2, #2
 800a592:	3a04      	subs	r2, #4
 800a594:	3501      	adds	r5, #1
 800a596:	42ae      	cmp	r6, r5
 800a598:	bf38      	it	cc
 800a59a:	2200      	movcc	r2, #0
 800a59c:	18a3      	adds	r3, r4, r2
 800a59e:	50a7      	str	r7, [r4, r2]
 800a5a0:	b107      	cbz	r7, 800a5a4 <rshift+0x68>
 800a5a2:	3304      	adds	r3, #4
 800a5a4:	1b1a      	subs	r2, r3, r4
 800a5a6:	42a3      	cmp	r3, r4
 800a5a8:	ea4f 02a2 	mov.w	r2, r2, asr #2
 800a5ac:	bf08      	it	eq
 800a5ae:	2300      	moveq	r3, #0
 800a5b0:	6102      	str	r2, [r0, #16]
 800a5b2:	bf08      	it	eq
 800a5b4:	6143      	streq	r3, [r0, #20]
 800a5b6:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 800a5ba:	f8dc c000 	ldr.w	ip, [ip]
 800a5be:	fa0c fc08 	lsl.w	ip, ip, r8
 800a5c2:	ea4c 0707 	orr.w	r7, ip, r7
 800a5c6:	f849 7b04 	str.w	r7, [r9], #4
 800a5ca:	f85e 7b04 	ldr.w	r7, [lr], #4
 800a5ce:	40cf      	lsrs	r7, r1
 800a5d0:	e7da      	b.n	800a588 <rshift+0x4c>
 800a5d2:	f851 cb04 	ldr.w	ip, [r1], #4
 800a5d6:	f847 cf04 	str.w	ip, [r7, #4]!
 800a5da:	e7c3      	b.n	800a564 <rshift+0x28>
 800a5dc:	4623      	mov	r3, r4
 800a5de:	e7e1      	b.n	800a5a4 <rshift+0x68>

0800a5e0 <__hexdig_fun>:
 800a5e0:	f1a0 0330 	sub.w	r3, r0, #48	@ 0x30
 800a5e4:	2b09      	cmp	r3, #9
 800a5e6:	d802      	bhi.n	800a5ee <__hexdig_fun+0xe>
 800a5e8:	3820      	subs	r0, #32
 800a5ea:	b2c0      	uxtb	r0, r0
 800a5ec:	4770      	bx	lr
 800a5ee:	f1a0 0361 	sub.w	r3, r0, #97	@ 0x61
 800a5f2:	2b05      	cmp	r3, #5
 800a5f4:	d801      	bhi.n	800a5fa <__hexdig_fun+0x1a>
 800a5f6:	3847      	subs	r0, #71	@ 0x47
 800a5f8:	e7f7      	b.n	800a5ea <__hexdig_fun+0xa>
 800a5fa:	f1a0 0341 	sub.w	r3, r0, #65	@ 0x41
 800a5fe:	2b05      	cmp	r3, #5
 800a600:	d801      	bhi.n	800a606 <__hexdig_fun+0x26>
 800a602:	3827      	subs	r0, #39	@ 0x27
 800a604:	e7f1      	b.n	800a5ea <__hexdig_fun+0xa>
 800a606:	2000      	movs	r0, #0
 800a608:	4770      	bx	lr
	...

0800a60c <__gethex>:
 800a60c:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800a610:	b085      	sub	sp, #20
 800a612:	468a      	mov	sl, r1
 800a614:	9302      	str	r3, [sp, #8]
 800a616:	680b      	ldr	r3, [r1, #0]
 800a618:	9001      	str	r0, [sp, #4]
 800a61a:	4690      	mov	r8, r2
 800a61c:	1c9c      	adds	r4, r3, #2
 800a61e:	46a1      	mov	r9, r4
 800a620:	f814 0b01 	ldrb.w	r0, [r4], #1
 800a624:	2830      	cmp	r0, #48	@ 0x30
 800a626:	d0fa      	beq.n	800a61e <__gethex+0x12>
 800a628:	eba9 0303 	sub.w	r3, r9, r3
 800a62c:	f1a3 0b02 	sub.w	fp, r3, #2
 800a630:	f7ff ffd6 	bl	800a5e0 <__hexdig_fun>
 800a634:	4605      	mov	r5, r0
 800a636:	2800      	cmp	r0, #0
 800a638:	d168      	bne.n	800a70c <__gethex+0x100>
 800a63a:	49a0      	ldr	r1, [pc, #640]	@ (800a8bc <__gethex+0x2b0>)
 800a63c:	2201      	movs	r2, #1
 800a63e:	4648      	mov	r0, r9
 800a640:	f7ff feee 	bl	800a420 <strncmp>
 800a644:	4607      	mov	r7, r0
 800a646:	2800      	cmp	r0, #0
 800a648:	d167      	bne.n	800a71a <__gethex+0x10e>
 800a64a:	f899 0001 	ldrb.w	r0, [r9, #1]
 800a64e:	4626      	mov	r6, r4
 800a650:	f7ff ffc6 	bl	800a5e0 <__hexdig_fun>
 800a654:	2800      	cmp	r0, #0
 800a656:	d062      	beq.n	800a71e <__gethex+0x112>
 800a658:	4623      	mov	r3, r4
 800a65a:	7818      	ldrb	r0, [r3, #0]
 800a65c:	2830      	cmp	r0, #48	@ 0x30
 800a65e:	4699      	mov	r9, r3
 800a660:	f103 0301 	add.w	r3, r3, #1
 800a664:	d0f9      	beq.n	800a65a <__gethex+0x4e>
 800a666:	f7ff ffbb 	bl	800a5e0 <__hexdig_fun>
 800a66a:	fab0 f580 	clz	r5, r0
 800a66e:	096d      	lsrs	r5, r5, #5
 800a670:	f04f 0b01 	mov.w	fp, #1
 800a674:	464a      	mov	r2, r9
 800a676:	4616      	mov	r6, r2
 800a678:	3201      	adds	r2, #1
 800a67a:	7830      	ldrb	r0, [r6, #0]
 800a67c:	f7ff ffb0 	bl	800a5e0 <__hexdig_fun>
 800a680:	2800      	cmp	r0, #0
 800a682:	d1f8      	bne.n	800a676 <__gethex+0x6a>
 800a684:	498d      	ldr	r1, [pc, #564]	@ (800a8bc <__gethex+0x2b0>)
 800a686:	2201      	movs	r2, #1
 800a688:	4630      	mov	r0, r6
 800a68a:	f7ff fec9 	bl	800a420 <strncmp>
 800a68e:	2800      	cmp	r0, #0
 800a690:	d13f      	bne.n	800a712 <__gethex+0x106>
 800a692:	b944      	cbnz	r4, 800a6a6 <__gethex+0x9a>
 800a694:	1c74      	adds	r4, r6, #1
 800a696:	4622      	mov	r2, r4
 800a698:	4616      	mov	r6, r2
 800a69a:	3201      	adds	r2, #1
 800a69c:	7830      	ldrb	r0, [r6, #0]
 800a69e:	f7ff ff9f 	bl	800a5e0 <__hexdig_fun>
 800a6a2:	2800      	cmp	r0, #0
 800a6a4:	d1f8      	bne.n	800a698 <__gethex+0x8c>
 800a6a6:	1ba4      	subs	r4, r4, r6
 800a6a8:	00a7      	lsls	r7, r4, #2
 800a6aa:	7833      	ldrb	r3, [r6, #0]
 800a6ac:	f003 03df 	and.w	r3, r3, #223	@ 0xdf
 800a6b0:	2b50      	cmp	r3, #80	@ 0x50
 800a6b2:	d13e      	bne.n	800a732 <__gethex+0x126>
 800a6b4:	7873      	ldrb	r3, [r6, #1]
 800a6b6:	2b2b      	cmp	r3, #43	@ 0x2b
 800a6b8:	d033      	beq.n	800a722 <__gethex+0x116>
 800a6ba:	2b2d      	cmp	r3, #45	@ 0x2d
 800a6bc:	d034      	beq.n	800a728 <__gethex+0x11c>
 800a6be:	1c71      	adds	r1, r6, #1
 800a6c0:	2400      	movs	r4, #0
 800a6c2:	7808      	ldrb	r0, [r1, #0]
 800a6c4:	f7ff ff8c 	bl	800a5e0 <__hexdig_fun>
 800a6c8:	1e43      	subs	r3, r0, #1
 800a6ca:	b2db      	uxtb	r3, r3
 800a6cc:	2b18      	cmp	r3, #24
 800a6ce:	d830      	bhi.n	800a732 <__gethex+0x126>
 800a6d0:	f1a0 0210 	sub.w	r2, r0, #16
 800a6d4:	f811 0f01 	ldrb.w	r0, [r1, #1]!
 800a6d8:	f7ff ff82 	bl	800a5e0 <__hexdig_fun>
 800a6dc:	f100 3cff 	add.w	ip, r0, #4294967295
 800a6e0:	fa5f fc8c 	uxtb.w	ip, ip
 800a6e4:	f1bc 0f18 	cmp.w	ip, #24
 800a6e8:	f04f 030a 	mov.w	r3, #10
 800a6ec:	d91e      	bls.n	800a72c <__gethex+0x120>
 800a6ee:	b104      	cbz	r4, 800a6f2 <__gethex+0xe6>
 800a6f0:	4252      	negs	r2, r2
 800a6f2:	4417      	add	r7, r2
 800a6f4:	f8ca 1000 	str.w	r1, [sl]
 800a6f8:	b1ed      	cbz	r5, 800a736 <__gethex+0x12a>
 800a6fa:	f1bb 0f00 	cmp.w	fp, #0
 800a6fe:	bf0c      	ite	eq
 800a700:	2506      	moveq	r5, #6
 800a702:	2500      	movne	r5, #0
 800a704:	4628      	mov	r0, r5
 800a706:	b005      	add	sp, #20
 800a708:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800a70c:	2500      	movs	r5, #0
 800a70e:	462c      	mov	r4, r5
 800a710:	e7b0      	b.n	800a674 <__gethex+0x68>
 800a712:	2c00      	cmp	r4, #0
 800a714:	d1c7      	bne.n	800a6a6 <__gethex+0x9a>
 800a716:	4627      	mov	r7, r4
 800a718:	e7c7      	b.n	800a6aa <__gethex+0x9e>
 800a71a:	464e      	mov	r6, r9
 800a71c:	462f      	mov	r7, r5
 800a71e:	2501      	movs	r5, #1
 800a720:	e7c3      	b.n	800a6aa <__gethex+0x9e>
 800a722:	2400      	movs	r4, #0
 800a724:	1cb1      	adds	r1, r6, #2
 800a726:	e7cc      	b.n	800a6c2 <__gethex+0xb6>
 800a728:	2401      	movs	r4, #1
 800a72a:	e7fb      	b.n	800a724 <__gethex+0x118>
 800a72c:	fb03 0002 	mla	r0, r3, r2, r0
 800a730:	e7ce      	b.n	800a6d0 <__gethex+0xc4>
 800a732:	4631      	mov	r1, r6
 800a734:	e7de      	b.n	800a6f4 <__gethex+0xe8>
 800a736:	eba6 0309 	sub.w	r3, r6, r9
 800a73a:	3b01      	subs	r3, #1
 800a73c:	4629      	mov	r1, r5
 800a73e:	2b07      	cmp	r3, #7
 800a740:	dc0a      	bgt.n	800a758 <__gethex+0x14c>
 800a742:	9801      	ldr	r0, [sp, #4]
 800a744:	f7fd ff7c 	bl	8008640 <_Balloc>
 800a748:	4604      	mov	r4, r0
 800a74a:	b940      	cbnz	r0, 800a75e <__gethex+0x152>
 800a74c:	4b5c      	ldr	r3, [pc, #368]	@ (800a8c0 <__gethex+0x2b4>)
 800a74e:	4602      	mov	r2, r0
 800a750:	21e4      	movs	r1, #228	@ 0xe4
 800a752:	485c      	ldr	r0, [pc, #368]	@ (800a8c4 <__gethex+0x2b8>)
 800a754:	f7ff fec0 	bl	800a4d8 <__assert_func>
 800a758:	3101      	adds	r1, #1
 800a75a:	105b      	asrs	r3, r3, #1
 800a75c:	e7ef      	b.n	800a73e <__gethex+0x132>
 800a75e:	f100 0a14 	add.w	sl, r0, #20
 800a762:	2300      	movs	r3, #0
 800a764:	4655      	mov	r5, sl
 800a766:	469b      	mov	fp, r3
 800a768:	45b1      	cmp	r9, r6
 800a76a:	d337      	bcc.n	800a7dc <__gethex+0x1d0>
 800a76c:	f845 bb04 	str.w	fp, [r5], #4
 800a770:	eba5 050a 	sub.w	r5, r5, sl
 800a774:	10ad      	asrs	r5, r5, #2
 800a776:	6125      	str	r5, [r4, #16]
 800a778:	4658      	mov	r0, fp
 800a77a:	f7fe f853 	bl	8008824 <__hi0bits>
 800a77e:	016d      	lsls	r5, r5, #5
 800a780:	f8d8 6000 	ldr.w	r6, [r8]
 800a784:	1a2d      	subs	r5, r5, r0
 800a786:	42b5      	cmp	r5, r6
 800a788:	dd54      	ble.n	800a834 <__gethex+0x228>
 800a78a:	1bad      	subs	r5, r5, r6
 800a78c:	4629      	mov	r1, r5
 800a78e:	4620      	mov	r0, r4
 800a790:	f7fe fbdf 	bl	8008f52 <__any_on>
 800a794:	4681      	mov	r9, r0
 800a796:	b178      	cbz	r0, 800a7b8 <__gethex+0x1ac>
 800a798:	1e6b      	subs	r3, r5, #1
 800a79a:	1159      	asrs	r1, r3, #5
 800a79c:	f003 021f 	and.w	r2, r3, #31
 800a7a0:	f85a 1021 	ldr.w	r1, [sl, r1, lsl #2]
 800a7a4:	f04f 0901 	mov.w	r9, #1
 800a7a8:	fa09 f202 	lsl.w	r2, r9, r2
 800a7ac:	420a      	tst	r2, r1
 800a7ae:	d003      	beq.n	800a7b8 <__gethex+0x1ac>
 800a7b0:	454b      	cmp	r3, r9
 800a7b2:	dc36      	bgt.n	800a822 <__gethex+0x216>
 800a7b4:	f04f 0902 	mov.w	r9, #2
 800a7b8:	4629      	mov	r1, r5
 800a7ba:	4620      	mov	r0, r4
 800a7bc:	f7ff febe 	bl	800a53c <rshift>
 800a7c0:	442f      	add	r7, r5
 800a7c2:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800a7c6:	42bb      	cmp	r3, r7
 800a7c8:	da42      	bge.n	800a850 <__gethex+0x244>
 800a7ca:	9801      	ldr	r0, [sp, #4]
 800a7cc:	4621      	mov	r1, r4
 800a7ce:	f7fd ff77 	bl	80086c0 <_Bfree>
 800a7d2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a7d4:	2300      	movs	r3, #0
 800a7d6:	6013      	str	r3, [r2, #0]
 800a7d8:	25a3      	movs	r5, #163	@ 0xa3
 800a7da:	e793      	b.n	800a704 <__gethex+0xf8>
 800a7dc:	f816 2d01 	ldrb.w	r2, [r6, #-1]!
 800a7e0:	2a2e      	cmp	r2, #46	@ 0x2e
 800a7e2:	d012      	beq.n	800a80a <__gethex+0x1fe>
 800a7e4:	2b20      	cmp	r3, #32
 800a7e6:	d104      	bne.n	800a7f2 <__gethex+0x1e6>
 800a7e8:	f845 bb04 	str.w	fp, [r5], #4
 800a7ec:	f04f 0b00 	mov.w	fp, #0
 800a7f0:	465b      	mov	r3, fp
 800a7f2:	7830      	ldrb	r0, [r6, #0]
 800a7f4:	9303      	str	r3, [sp, #12]
 800a7f6:	f7ff fef3 	bl	800a5e0 <__hexdig_fun>
 800a7fa:	9b03      	ldr	r3, [sp, #12]
 800a7fc:	f000 000f 	and.w	r0, r0, #15
 800a800:	4098      	lsls	r0, r3
 800a802:	ea4b 0b00 	orr.w	fp, fp, r0
 800a806:	3304      	adds	r3, #4
 800a808:	e7ae      	b.n	800a768 <__gethex+0x15c>
 800a80a:	45b1      	cmp	r9, r6
 800a80c:	d8ea      	bhi.n	800a7e4 <__gethex+0x1d8>
 800a80e:	492b      	ldr	r1, [pc, #172]	@ (800a8bc <__gethex+0x2b0>)
 800a810:	9303      	str	r3, [sp, #12]
 800a812:	2201      	movs	r2, #1
 800a814:	4630      	mov	r0, r6
 800a816:	f7ff fe03 	bl	800a420 <strncmp>
 800a81a:	9b03      	ldr	r3, [sp, #12]
 800a81c:	2800      	cmp	r0, #0
 800a81e:	d1e1      	bne.n	800a7e4 <__gethex+0x1d8>
 800a820:	e7a2      	b.n	800a768 <__gethex+0x15c>
 800a822:	1ea9      	subs	r1, r5, #2
 800a824:	4620      	mov	r0, r4
 800a826:	f7fe fb94 	bl	8008f52 <__any_on>
 800a82a:	2800      	cmp	r0, #0
 800a82c:	d0c2      	beq.n	800a7b4 <__gethex+0x1a8>
 800a82e:	f04f 0903 	mov.w	r9, #3
 800a832:	e7c1      	b.n	800a7b8 <__gethex+0x1ac>
 800a834:	da09      	bge.n	800a84a <__gethex+0x23e>
 800a836:	1b75      	subs	r5, r6, r5
 800a838:	4621      	mov	r1, r4
 800a83a:	9801      	ldr	r0, [sp, #4]
 800a83c:	462a      	mov	r2, r5
 800a83e:	f7fe f94f 	bl	8008ae0 <__lshift>
 800a842:	1b7f      	subs	r7, r7, r5
 800a844:	4604      	mov	r4, r0
 800a846:	f100 0a14 	add.w	sl, r0, #20
 800a84a:	f04f 0900 	mov.w	r9, #0
 800a84e:	e7b8      	b.n	800a7c2 <__gethex+0x1b6>
 800a850:	f8d8 5004 	ldr.w	r5, [r8, #4]
 800a854:	42bd      	cmp	r5, r7
 800a856:	dd6f      	ble.n	800a938 <__gethex+0x32c>
 800a858:	1bed      	subs	r5, r5, r7
 800a85a:	42ae      	cmp	r6, r5
 800a85c:	dc34      	bgt.n	800a8c8 <__gethex+0x2bc>
 800a85e:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a862:	2b02      	cmp	r3, #2
 800a864:	d022      	beq.n	800a8ac <__gethex+0x2a0>
 800a866:	2b03      	cmp	r3, #3
 800a868:	d024      	beq.n	800a8b4 <__gethex+0x2a8>
 800a86a:	2b01      	cmp	r3, #1
 800a86c:	d115      	bne.n	800a89a <__gethex+0x28e>
 800a86e:	42ae      	cmp	r6, r5
 800a870:	d113      	bne.n	800a89a <__gethex+0x28e>
 800a872:	2e01      	cmp	r6, #1
 800a874:	d10b      	bne.n	800a88e <__gethex+0x282>
 800a876:	9a02      	ldr	r2, [sp, #8]
 800a878:	f8d8 3004 	ldr.w	r3, [r8, #4]
 800a87c:	6013      	str	r3, [r2, #0]
 800a87e:	2301      	movs	r3, #1
 800a880:	6123      	str	r3, [r4, #16]
 800a882:	f8ca 3000 	str.w	r3, [sl]
 800a886:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a888:	2562      	movs	r5, #98	@ 0x62
 800a88a:	601c      	str	r4, [r3, #0]
 800a88c:	e73a      	b.n	800a704 <__gethex+0xf8>
 800a88e:	1e71      	subs	r1, r6, #1
 800a890:	4620      	mov	r0, r4
 800a892:	f7fe fb5e 	bl	8008f52 <__any_on>
 800a896:	2800      	cmp	r0, #0
 800a898:	d1ed      	bne.n	800a876 <__gethex+0x26a>
 800a89a:	9801      	ldr	r0, [sp, #4]
 800a89c:	4621      	mov	r1, r4
 800a89e:	f7fd ff0f 	bl	80086c0 <_Bfree>
 800a8a2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 800a8a4:	2300      	movs	r3, #0
 800a8a6:	6013      	str	r3, [r2, #0]
 800a8a8:	2550      	movs	r5, #80	@ 0x50
 800a8aa:	e72b      	b.n	800a704 <__gethex+0xf8>
 800a8ac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8ae:	2b00      	cmp	r3, #0
 800a8b0:	d1f3      	bne.n	800a89a <__gethex+0x28e>
 800a8b2:	e7e0      	b.n	800a876 <__gethex+0x26a>
 800a8b4:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a8b6:	2b00      	cmp	r3, #0
 800a8b8:	d1dd      	bne.n	800a876 <__gethex+0x26a>
 800a8ba:	e7ee      	b.n	800a89a <__gethex+0x28e>
 800a8bc:	0800b04b 	.word	0x0800b04b
 800a8c0:	0800afe1 	.word	0x0800afe1
 800a8c4:	0800b0a2 	.word	0x0800b0a2
 800a8c8:	1e6f      	subs	r7, r5, #1
 800a8ca:	f1b9 0f00 	cmp.w	r9, #0
 800a8ce:	d130      	bne.n	800a932 <__gethex+0x326>
 800a8d0:	b127      	cbz	r7, 800a8dc <__gethex+0x2d0>
 800a8d2:	4639      	mov	r1, r7
 800a8d4:	4620      	mov	r0, r4
 800a8d6:	f7fe fb3c 	bl	8008f52 <__any_on>
 800a8da:	4681      	mov	r9, r0
 800a8dc:	117a      	asrs	r2, r7, #5
 800a8de:	2301      	movs	r3, #1
 800a8e0:	f85a 2022 	ldr.w	r2, [sl, r2, lsl #2]
 800a8e4:	f007 071f 	and.w	r7, r7, #31
 800a8e8:	40bb      	lsls	r3, r7
 800a8ea:	4213      	tst	r3, r2
 800a8ec:	4629      	mov	r1, r5
 800a8ee:	4620      	mov	r0, r4
 800a8f0:	bf18      	it	ne
 800a8f2:	f049 0902 	orrne.w	r9, r9, #2
 800a8f6:	f7ff fe21 	bl	800a53c <rshift>
 800a8fa:	f8d8 7004 	ldr.w	r7, [r8, #4]
 800a8fe:	1b76      	subs	r6, r6, r5
 800a900:	2502      	movs	r5, #2
 800a902:	f1b9 0f00 	cmp.w	r9, #0
 800a906:	d047      	beq.n	800a998 <__gethex+0x38c>
 800a908:	f8d8 300c 	ldr.w	r3, [r8, #12]
 800a90c:	2b02      	cmp	r3, #2
 800a90e:	d015      	beq.n	800a93c <__gethex+0x330>
 800a910:	2b03      	cmp	r3, #3
 800a912:	d017      	beq.n	800a944 <__gethex+0x338>
 800a914:	2b01      	cmp	r3, #1
 800a916:	d109      	bne.n	800a92c <__gethex+0x320>
 800a918:	f019 0f02 	tst.w	r9, #2
 800a91c:	d006      	beq.n	800a92c <__gethex+0x320>
 800a91e:	f8da 3000 	ldr.w	r3, [sl]
 800a922:	ea49 0903 	orr.w	r9, r9, r3
 800a926:	f019 0f01 	tst.w	r9, #1
 800a92a:	d10e      	bne.n	800a94a <__gethex+0x33e>
 800a92c:	f045 0510 	orr.w	r5, r5, #16
 800a930:	e032      	b.n	800a998 <__gethex+0x38c>
 800a932:	f04f 0901 	mov.w	r9, #1
 800a936:	e7d1      	b.n	800a8dc <__gethex+0x2d0>
 800a938:	2501      	movs	r5, #1
 800a93a:	e7e2      	b.n	800a902 <__gethex+0x2f6>
 800a93c:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a93e:	f1c3 0301 	rsb	r3, r3, #1
 800a942:	930f      	str	r3, [sp, #60]	@ 0x3c
 800a944:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 800a946:	2b00      	cmp	r3, #0
 800a948:	d0f0      	beq.n	800a92c <__gethex+0x320>
 800a94a:	f8d4 b010 	ldr.w	fp, [r4, #16]
 800a94e:	f104 0314 	add.w	r3, r4, #20
 800a952:	ea4f 0a8b 	mov.w	sl, fp, lsl #2
 800a956:	eb03 018b 	add.w	r1, r3, fp, lsl #2
 800a95a:	f04f 0c00 	mov.w	ip, #0
 800a95e:	4618      	mov	r0, r3
 800a960:	f853 2b04 	ldr.w	r2, [r3], #4
 800a964:	f1b2 3fff 	cmp.w	r2, #4294967295
 800a968:	d01b      	beq.n	800a9a2 <__gethex+0x396>
 800a96a:	3201      	adds	r2, #1
 800a96c:	6002      	str	r2, [r0, #0]
 800a96e:	2d02      	cmp	r5, #2
 800a970:	f104 0314 	add.w	r3, r4, #20
 800a974:	d13c      	bne.n	800a9f0 <__gethex+0x3e4>
 800a976:	f8d8 2000 	ldr.w	r2, [r8]
 800a97a:	3a01      	subs	r2, #1
 800a97c:	42b2      	cmp	r2, r6
 800a97e:	d109      	bne.n	800a994 <__gethex+0x388>
 800a980:	1171      	asrs	r1, r6, #5
 800a982:	2201      	movs	r2, #1
 800a984:	f853 3021 	ldr.w	r3, [r3, r1, lsl #2]
 800a988:	f006 061f 	and.w	r6, r6, #31
 800a98c:	fa02 f606 	lsl.w	r6, r2, r6
 800a990:	421e      	tst	r6, r3
 800a992:	d13a      	bne.n	800aa0a <__gethex+0x3fe>
 800a994:	f045 0520 	orr.w	r5, r5, #32
 800a998:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 800a99a:	601c      	str	r4, [r3, #0]
 800a99c:	9b02      	ldr	r3, [sp, #8]
 800a99e:	601f      	str	r7, [r3, #0]
 800a9a0:	e6b0      	b.n	800a704 <__gethex+0xf8>
 800a9a2:	4299      	cmp	r1, r3
 800a9a4:	f843 cc04 	str.w	ip, [r3, #-4]
 800a9a8:	d8d9      	bhi.n	800a95e <__gethex+0x352>
 800a9aa:	68a3      	ldr	r3, [r4, #8]
 800a9ac:	459b      	cmp	fp, r3
 800a9ae:	db17      	blt.n	800a9e0 <__gethex+0x3d4>
 800a9b0:	6861      	ldr	r1, [r4, #4]
 800a9b2:	9801      	ldr	r0, [sp, #4]
 800a9b4:	3101      	adds	r1, #1
 800a9b6:	f7fd fe43 	bl	8008640 <_Balloc>
 800a9ba:	4681      	mov	r9, r0
 800a9bc:	b918      	cbnz	r0, 800a9c6 <__gethex+0x3ba>
 800a9be:	4b1a      	ldr	r3, [pc, #104]	@ (800aa28 <__gethex+0x41c>)
 800a9c0:	4602      	mov	r2, r0
 800a9c2:	2184      	movs	r1, #132	@ 0x84
 800a9c4:	e6c5      	b.n	800a752 <__gethex+0x146>
 800a9c6:	6922      	ldr	r2, [r4, #16]
 800a9c8:	3202      	adds	r2, #2
 800a9ca:	f104 010c 	add.w	r1, r4, #12
 800a9ce:	0092      	lsls	r2, r2, #2
 800a9d0:	300c      	adds	r0, #12
 800a9d2:	f7ff fd69 	bl	800a4a8 <memcpy>
 800a9d6:	4621      	mov	r1, r4
 800a9d8:	9801      	ldr	r0, [sp, #4]
 800a9da:	f7fd fe71 	bl	80086c0 <_Bfree>
 800a9de:	464c      	mov	r4, r9
 800a9e0:	6923      	ldr	r3, [r4, #16]
 800a9e2:	1c5a      	adds	r2, r3, #1
 800a9e4:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 800a9e8:	6122      	str	r2, [r4, #16]
 800a9ea:	2201      	movs	r2, #1
 800a9ec:	615a      	str	r2, [r3, #20]
 800a9ee:	e7be      	b.n	800a96e <__gethex+0x362>
 800a9f0:	6922      	ldr	r2, [r4, #16]
 800a9f2:	455a      	cmp	r2, fp
 800a9f4:	dd0b      	ble.n	800aa0e <__gethex+0x402>
 800a9f6:	2101      	movs	r1, #1
 800a9f8:	4620      	mov	r0, r4
 800a9fa:	f7ff fd9f 	bl	800a53c <rshift>
 800a9fe:	f8d8 3008 	ldr.w	r3, [r8, #8]
 800aa02:	3701      	adds	r7, #1
 800aa04:	42bb      	cmp	r3, r7
 800aa06:	f6ff aee0 	blt.w	800a7ca <__gethex+0x1be>
 800aa0a:	2501      	movs	r5, #1
 800aa0c:	e7c2      	b.n	800a994 <__gethex+0x388>
 800aa0e:	f016 061f 	ands.w	r6, r6, #31
 800aa12:	d0fa      	beq.n	800aa0a <__gethex+0x3fe>
 800aa14:	4453      	add	r3, sl
 800aa16:	f1c6 0620 	rsb	r6, r6, #32
 800aa1a:	f853 0c04 	ldr.w	r0, [r3, #-4]
 800aa1e:	f7fd ff01 	bl	8008824 <__hi0bits>
 800aa22:	42b0      	cmp	r0, r6
 800aa24:	dbe7      	blt.n	800a9f6 <__gethex+0x3ea>
 800aa26:	e7f0      	b.n	800aa0a <__gethex+0x3fe>
 800aa28:	0800afe1 	.word	0x0800afe1

0800aa2c <L_shift>:
 800aa2c:	f1c2 0208 	rsb	r2, r2, #8
 800aa30:	0092      	lsls	r2, r2, #2
 800aa32:	b570      	push	{r4, r5, r6, lr}
 800aa34:	f1c2 0620 	rsb	r6, r2, #32
 800aa38:	6843      	ldr	r3, [r0, #4]
 800aa3a:	6804      	ldr	r4, [r0, #0]
 800aa3c:	fa03 f506 	lsl.w	r5, r3, r6
 800aa40:	432c      	orrs	r4, r5
 800aa42:	40d3      	lsrs	r3, r2
 800aa44:	6004      	str	r4, [r0, #0]
 800aa46:	f840 3f04 	str.w	r3, [r0, #4]!
 800aa4a:	4288      	cmp	r0, r1
 800aa4c:	d3f4      	bcc.n	800aa38 <L_shift+0xc>
 800aa4e:	bd70      	pop	{r4, r5, r6, pc}

0800aa50 <__match>:
 800aa50:	b530      	push	{r4, r5, lr}
 800aa52:	6803      	ldr	r3, [r0, #0]
 800aa54:	3301      	adds	r3, #1
 800aa56:	f811 4b01 	ldrb.w	r4, [r1], #1
 800aa5a:	b914      	cbnz	r4, 800aa62 <__match+0x12>
 800aa5c:	6003      	str	r3, [r0, #0]
 800aa5e:	2001      	movs	r0, #1
 800aa60:	bd30      	pop	{r4, r5, pc}
 800aa62:	f813 2b01 	ldrb.w	r2, [r3], #1
 800aa66:	f1a2 0541 	sub.w	r5, r2, #65	@ 0x41
 800aa6a:	2d19      	cmp	r5, #25
 800aa6c:	bf98      	it	ls
 800aa6e:	3220      	addls	r2, #32
 800aa70:	42a2      	cmp	r2, r4
 800aa72:	d0f0      	beq.n	800aa56 <__match+0x6>
 800aa74:	2000      	movs	r0, #0
 800aa76:	e7f3      	b.n	800aa60 <__match+0x10>

0800aa78 <__hexnan>:
 800aa78:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800aa7c:	680b      	ldr	r3, [r1, #0]
 800aa7e:	6801      	ldr	r1, [r0, #0]
 800aa80:	115e      	asrs	r6, r3, #5
 800aa82:	eb02 0686 	add.w	r6, r2, r6, lsl #2
 800aa86:	f013 031f 	ands.w	r3, r3, #31
 800aa8a:	b087      	sub	sp, #28
 800aa8c:	bf18      	it	ne
 800aa8e:	3604      	addne	r6, #4
 800aa90:	2500      	movs	r5, #0
 800aa92:	1f37      	subs	r7, r6, #4
 800aa94:	4682      	mov	sl, r0
 800aa96:	4690      	mov	r8, r2
 800aa98:	9301      	str	r3, [sp, #4]
 800aa9a:	f846 5c04 	str.w	r5, [r6, #-4]
 800aa9e:	46b9      	mov	r9, r7
 800aaa0:	463c      	mov	r4, r7
 800aaa2:	9502      	str	r5, [sp, #8]
 800aaa4:	46ab      	mov	fp, r5
 800aaa6:	784a      	ldrb	r2, [r1, #1]
 800aaa8:	1c4b      	adds	r3, r1, #1
 800aaaa:	9303      	str	r3, [sp, #12]
 800aaac:	b342      	cbz	r2, 800ab00 <__hexnan+0x88>
 800aaae:	4610      	mov	r0, r2
 800aab0:	9105      	str	r1, [sp, #20]
 800aab2:	9204      	str	r2, [sp, #16]
 800aab4:	f7ff fd94 	bl	800a5e0 <__hexdig_fun>
 800aab8:	2800      	cmp	r0, #0
 800aaba:	d151      	bne.n	800ab60 <__hexnan+0xe8>
 800aabc:	9a04      	ldr	r2, [sp, #16]
 800aabe:	9905      	ldr	r1, [sp, #20]
 800aac0:	2a20      	cmp	r2, #32
 800aac2:	d818      	bhi.n	800aaf6 <__hexnan+0x7e>
 800aac4:	9b02      	ldr	r3, [sp, #8]
 800aac6:	459b      	cmp	fp, r3
 800aac8:	dd13      	ble.n	800aaf2 <__hexnan+0x7a>
 800aaca:	454c      	cmp	r4, r9
 800aacc:	d206      	bcs.n	800aadc <__hexnan+0x64>
 800aace:	2d07      	cmp	r5, #7
 800aad0:	dc04      	bgt.n	800aadc <__hexnan+0x64>
 800aad2:	462a      	mov	r2, r5
 800aad4:	4649      	mov	r1, r9
 800aad6:	4620      	mov	r0, r4
 800aad8:	f7ff ffa8 	bl	800aa2c <L_shift>
 800aadc:	4544      	cmp	r4, r8
 800aade:	d952      	bls.n	800ab86 <__hexnan+0x10e>
 800aae0:	2300      	movs	r3, #0
 800aae2:	f1a4 0904 	sub.w	r9, r4, #4
 800aae6:	f844 3c04 	str.w	r3, [r4, #-4]
 800aaea:	f8cd b008 	str.w	fp, [sp, #8]
 800aaee:	464c      	mov	r4, r9
 800aaf0:	461d      	mov	r5, r3
 800aaf2:	9903      	ldr	r1, [sp, #12]
 800aaf4:	e7d7      	b.n	800aaa6 <__hexnan+0x2e>
 800aaf6:	2a29      	cmp	r2, #41	@ 0x29
 800aaf8:	d157      	bne.n	800abaa <__hexnan+0x132>
 800aafa:	3102      	adds	r1, #2
 800aafc:	f8ca 1000 	str.w	r1, [sl]
 800ab00:	f1bb 0f00 	cmp.w	fp, #0
 800ab04:	d051      	beq.n	800abaa <__hexnan+0x132>
 800ab06:	454c      	cmp	r4, r9
 800ab08:	d206      	bcs.n	800ab18 <__hexnan+0xa0>
 800ab0a:	2d07      	cmp	r5, #7
 800ab0c:	dc04      	bgt.n	800ab18 <__hexnan+0xa0>
 800ab0e:	462a      	mov	r2, r5
 800ab10:	4649      	mov	r1, r9
 800ab12:	4620      	mov	r0, r4
 800ab14:	f7ff ff8a 	bl	800aa2c <L_shift>
 800ab18:	4544      	cmp	r4, r8
 800ab1a:	d936      	bls.n	800ab8a <__hexnan+0x112>
 800ab1c:	f1a8 0204 	sub.w	r2, r8, #4
 800ab20:	4623      	mov	r3, r4
 800ab22:	f853 1b04 	ldr.w	r1, [r3], #4
 800ab26:	f842 1f04 	str.w	r1, [r2, #4]!
 800ab2a:	429f      	cmp	r7, r3
 800ab2c:	d2f9      	bcs.n	800ab22 <__hexnan+0xaa>
 800ab2e:	1b3b      	subs	r3, r7, r4
 800ab30:	f023 0303 	bic.w	r3, r3, #3
 800ab34:	3304      	adds	r3, #4
 800ab36:	3401      	adds	r4, #1
 800ab38:	3e03      	subs	r6, #3
 800ab3a:	42b4      	cmp	r4, r6
 800ab3c:	bf88      	it	hi
 800ab3e:	2304      	movhi	r3, #4
 800ab40:	4443      	add	r3, r8
 800ab42:	2200      	movs	r2, #0
 800ab44:	f843 2b04 	str.w	r2, [r3], #4
 800ab48:	429f      	cmp	r7, r3
 800ab4a:	d2fb      	bcs.n	800ab44 <__hexnan+0xcc>
 800ab4c:	683b      	ldr	r3, [r7, #0]
 800ab4e:	b91b      	cbnz	r3, 800ab58 <__hexnan+0xe0>
 800ab50:	4547      	cmp	r7, r8
 800ab52:	d128      	bne.n	800aba6 <__hexnan+0x12e>
 800ab54:	2301      	movs	r3, #1
 800ab56:	603b      	str	r3, [r7, #0]
 800ab58:	2005      	movs	r0, #5
 800ab5a:	b007      	add	sp, #28
 800ab5c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800ab60:	3501      	adds	r5, #1
 800ab62:	2d08      	cmp	r5, #8
 800ab64:	f10b 0b01 	add.w	fp, fp, #1
 800ab68:	dd06      	ble.n	800ab78 <__hexnan+0x100>
 800ab6a:	4544      	cmp	r4, r8
 800ab6c:	d9c1      	bls.n	800aaf2 <__hexnan+0x7a>
 800ab6e:	2300      	movs	r3, #0
 800ab70:	f844 3c04 	str.w	r3, [r4, #-4]
 800ab74:	2501      	movs	r5, #1
 800ab76:	3c04      	subs	r4, #4
 800ab78:	6822      	ldr	r2, [r4, #0]
 800ab7a:	f000 000f 	and.w	r0, r0, #15
 800ab7e:	ea40 1002 	orr.w	r0, r0, r2, lsl #4
 800ab82:	6020      	str	r0, [r4, #0]
 800ab84:	e7b5      	b.n	800aaf2 <__hexnan+0x7a>
 800ab86:	2508      	movs	r5, #8
 800ab88:	e7b3      	b.n	800aaf2 <__hexnan+0x7a>
 800ab8a:	9b01      	ldr	r3, [sp, #4]
 800ab8c:	2b00      	cmp	r3, #0
 800ab8e:	d0dd      	beq.n	800ab4c <__hexnan+0xd4>
 800ab90:	f1c3 0320 	rsb	r3, r3, #32
 800ab94:	f04f 32ff 	mov.w	r2, #4294967295
 800ab98:	40da      	lsrs	r2, r3
 800ab9a:	f856 3c04 	ldr.w	r3, [r6, #-4]
 800ab9e:	4013      	ands	r3, r2
 800aba0:	f846 3c04 	str.w	r3, [r6, #-4]
 800aba4:	e7d2      	b.n	800ab4c <__hexnan+0xd4>
 800aba6:	3f04      	subs	r7, #4
 800aba8:	e7d0      	b.n	800ab4c <__hexnan+0xd4>
 800abaa:	2004      	movs	r0, #4
 800abac:	e7d5      	b.n	800ab5a <__hexnan+0xe2>

0800abae <__ascii_mbtowc>:
 800abae:	b082      	sub	sp, #8
 800abb0:	b901      	cbnz	r1, 800abb4 <__ascii_mbtowc+0x6>
 800abb2:	a901      	add	r1, sp, #4
 800abb4:	b142      	cbz	r2, 800abc8 <__ascii_mbtowc+0x1a>
 800abb6:	b14b      	cbz	r3, 800abcc <__ascii_mbtowc+0x1e>
 800abb8:	7813      	ldrb	r3, [r2, #0]
 800abba:	600b      	str	r3, [r1, #0]
 800abbc:	7812      	ldrb	r2, [r2, #0]
 800abbe:	1e10      	subs	r0, r2, #0
 800abc0:	bf18      	it	ne
 800abc2:	2001      	movne	r0, #1
 800abc4:	b002      	add	sp, #8
 800abc6:	4770      	bx	lr
 800abc8:	4610      	mov	r0, r2
 800abca:	e7fb      	b.n	800abc4 <__ascii_mbtowc+0x16>
 800abcc:	f06f 0001 	mvn.w	r0, #1
 800abd0:	e7f8      	b.n	800abc4 <__ascii_mbtowc+0x16>

0800abd2 <_realloc_r>:
 800abd2:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800abd6:	4607      	mov	r7, r0
 800abd8:	4614      	mov	r4, r2
 800abda:	460d      	mov	r5, r1
 800abdc:	b921      	cbnz	r1, 800abe8 <_realloc_r+0x16>
 800abde:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 800abe2:	4611      	mov	r1, r2
 800abe4:	f7fd bca0 	b.w	8008528 <_malloc_r>
 800abe8:	b92a      	cbnz	r2, 800abf6 <_realloc_r+0x24>
 800abea:	f7fd fc29 	bl	8008440 <_free_r>
 800abee:	4625      	mov	r5, r4
 800abf0:	4628      	mov	r0, r5
 800abf2:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800abf6:	f000 f840 	bl	800ac7a <_malloc_usable_size_r>
 800abfa:	4284      	cmp	r4, r0
 800abfc:	4606      	mov	r6, r0
 800abfe:	d802      	bhi.n	800ac06 <_realloc_r+0x34>
 800ac00:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 800ac04:	d8f4      	bhi.n	800abf0 <_realloc_r+0x1e>
 800ac06:	4621      	mov	r1, r4
 800ac08:	4638      	mov	r0, r7
 800ac0a:	f7fd fc8d 	bl	8008528 <_malloc_r>
 800ac0e:	4680      	mov	r8, r0
 800ac10:	b908      	cbnz	r0, 800ac16 <_realloc_r+0x44>
 800ac12:	4645      	mov	r5, r8
 800ac14:	e7ec      	b.n	800abf0 <_realloc_r+0x1e>
 800ac16:	42b4      	cmp	r4, r6
 800ac18:	4622      	mov	r2, r4
 800ac1a:	4629      	mov	r1, r5
 800ac1c:	bf28      	it	cs
 800ac1e:	4632      	movcs	r2, r6
 800ac20:	f7ff fc42 	bl	800a4a8 <memcpy>
 800ac24:	4629      	mov	r1, r5
 800ac26:	4638      	mov	r0, r7
 800ac28:	f7fd fc0a 	bl	8008440 <_free_r>
 800ac2c:	e7f1      	b.n	800ac12 <_realloc_r+0x40>

0800ac2e <__ascii_wctomb>:
 800ac2e:	4603      	mov	r3, r0
 800ac30:	4608      	mov	r0, r1
 800ac32:	b141      	cbz	r1, 800ac46 <__ascii_wctomb+0x18>
 800ac34:	2aff      	cmp	r2, #255	@ 0xff
 800ac36:	d904      	bls.n	800ac42 <__ascii_wctomb+0x14>
 800ac38:	228a      	movs	r2, #138	@ 0x8a
 800ac3a:	601a      	str	r2, [r3, #0]
 800ac3c:	f04f 30ff 	mov.w	r0, #4294967295
 800ac40:	4770      	bx	lr
 800ac42:	700a      	strb	r2, [r1, #0]
 800ac44:	2001      	movs	r0, #1
 800ac46:	4770      	bx	lr

0800ac48 <fiprintf>:
 800ac48:	b40e      	push	{r1, r2, r3}
 800ac4a:	b503      	push	{r0, r1, lr}
 800ac4c:	4601      	mov	r1, r0
 800ac4e:	ab03      	add	r3, sp, #12
 800ac50:	4805      	ldr	r0, [pc, #20]	@ (800ac68 <fiprintf+0x20>)
 800ac52:	f853 2b04 	ldr.w	r2, [r3], #4
 800ac56:	6800      	ldr	r0, [r0, #0]
 800ac58:	9301      	str	r3, [sp, #4]
 800ac5a:	f7ff f9a1 	bl	8009fa0 <_vfiprintf_r>
 800ac5e:	b002      	add	sp, #8
 800ac60:	f85d eb04 	ldr.w	lr, [sp], #4
 800ac64:	b003      	add	sp, #12
 800ac66:	4770      	bx	lr
 800ac68:	20000034 	.word	0x20000034

0800ac6c <abort>:
 800ac6c:	b508      	push	{r3, lr}
 800ac6e:	2006      	movs	r0, #6
 800ac70:	f000 f834 	bl	800acdc <raise>
 800ac74:	2001      	movs	r0, #1
 800ac76:	f7f7 fab3 	bl	80021e0 <_exit>

0800ac7a <_malloc_usable_size_r>:
 800ac7a:	f851 3c04 	ldr.w	r3, [r1, #-4]
 800ac7e:	1f18      	subs	r0, r3, #4
 800ac80:	2b00      	cmp	r3, #0
 800ac82:	bfbc      	itt	lt
 800ac84:	580b      	ldrlt	r3, [r1, r0]
 800ac86:	18c0      	addlt	r0, r0, r3
 800ac88:	4770      	bx	lr

0800ac8a <_raise_r>:
 800ac8a:	291f      	cmp	r1, #31
 800ac8c:	b538      	push	{r3, r4, r5, lr}
 800ac8e:	4605      	mov	r5, r0
 800ac90:	460c      	mov	r4, r1
 800ac92:	d904      	bls.n	800ac9e <_raise_r+0x14>
 800ac94:	2316      	movs	r3, #22
 800ac96:	6003      	str	r3, [r0, #0]
 800ac98:	f04f 30ff 	mov.w	r0, #4294967295
 800ac9c:	bd38      	pop	{r3, r4, r5, pc}
 800ac9e:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 800aca0:	b112      	cbz	r2, 800aca8 <_raise_r+0x1e>
 800aca2:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 800aca6:	b94b      	cbnz	r3, 800acbc <_raise_r+0x32>
 800aca8:	4628      	mov	r0, r5
 800acaa:	f000 f831 	bl	800ad10 <_getpid_r>
 800acae:	4622      	mov	r2, r4
 800acb0:	4601      	mov	r1, r0
 800acb2:	4628      	mov	r0, r5
 800acb4:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 800acb8:	f000 b818 	b.w	800acec <_kill_r>
 800acbc:	2b01      	cmp	r3, #1
 800acbe:	d00a      	beq.n	800acd6 <_raise_r+0x4c>
 800acc0:	1c59      	adds	r1, r3, #1
 800acc2:	d103      	bne.n	800accc <_raise_r+0x42>
 800acc4:	2316      	movs	r3, #22
 800acc6:	6003      	str	r3, [r0, #0]
 800acc8:	2001      	movs	r0, #1
 800acca:	e7e7      	b.n	800ac9c <_raise_r+0x12>
 800accc:	2100      	movs	r1, #0
 800acce:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 800acd2:	4620      	mov	r0, r4
 800acd4:	4798      	blx	r3
 800acd6:	2000      	movs	r0, #0
 800acd8:	e7e0      	b.n	800ac9c <_raise_r+0x12>
	...

0800acdc <raise>:
 800acdc:	4b02      	ldr	r3, [pc, #8]	@ (800ace8 <raise+0xc>)
 800acde:	4601      	mov	r1, r0
 800ace0:	6818      	ldr	r0, [r3, #0]
 800ace2:	f7ff bfd2 	b.w	800ac8a <_raise_r>
 800ace6:	bf00      	nop
 800ace8:	20000034 	.word	0x20000034

0800acec <_kill_r>:
 800acec:	b538      	push	{r3, r4, r5, lr}
 800acee:	4d07      	ldr	r5, [pc, #28]	@ (800ad0c <_kill_r+0x20>)
 800acf0:	2300      	movs	r3, #0
 800acf2:	4604      	mov	r4, r0
 800acf4:	4608      	mov	r0, r1
 800acf6:	4611      	mov	r1, r2
 800acf8:	602b      	str	r3, [r5, #0]
 800acfa:	f7f7 fa61 	bl	80021c0 <_kill>
 800acfe:	1c43      	adds	r3, r0, #1
 800ad00:	d102      	bne.n	800ad08 <_kill_r+0x1c>
 800ad02:	682b      	ldr	r3, [r5, #0]
 800ad04:	b103      	cbz	r3, 800ad08 <_kill_r+0x1c>
 800ad06:	6023      	str	r3, [r4, #0]
 800ad08:	bd38      	pop	{r3, r4, r5, pc}
 800ad0a:	bf00      	nop
 800ad0c:	20000918 	.word	0x20000918

0800ad10 <_getpid_r>:
 800ad10:	f7f7 ba4e 	b.w	80021b0 <_getpid>

0800ad14 <_init>:
 800ad14:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad16:	bf00      	nop
 800ad18:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad1a:	bc08      	pop	{r3}
 800ad1c:	469e      	mov	lr, r3
 800ad1e:	4770      	bx	lr

0800ad20 <_fini>:
 800ad20:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800ad22:	bf00      	nop
 800ad24:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800ad26:	bc08      	pop	{r3}
 800ad28:	469e      	mov	lr, r3
 800ad2a:	4770      	bx	lr
