
ESP8266-WiFi.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00003a0c  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000084  08003bac  08003bac  00004bac  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08003c30  08003c30  00005068  2**0
                  CONTENTS
  4 .ARM          00000008  08003c30  08003c30  00004c30  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08003c38  08003c38  00005068  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08003c38  08003c38  00004c38  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  08003c3c  08003c3c  00004c3c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000068  20000000  08003c40  00005000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000220  20000068  08003ca8  00005068  2**2
                  ALLOC
 10 ._user_heap_stack 00000600  20000288  08003ca8  00005288  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00005068  2**0
                  CONTENTS, READONLY
 12 .debug_info   00008b6f  00000000  00000000  00005098  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000018e8  00000000  00000000  0000dc07  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000007a8  00000000  00000000  0000f4f0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 000005cd  00000000  00000000  0000fc98  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016484  00000000  00000000  00010265  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000097ec  00000000  00000000  000266e9  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008788f  00000000  00000000  0002fed5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000b7764  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00002590  00000000  00000000  000b77a8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000068  00000000  00000000  000b9d38  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	20000068 	.word	0x20000068
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08003b94 	.word	0x08003b94

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	2000006c 	.word	0x2000006c
 80001dc:	08003b94 	.word	0x08003b94

080001e0 <strlen>:
 80001e0:	4603      	mov	r3, r0
 80001e2:	f813 2b01 	ldrb.w	r2, [r3], #1
 80001e6:	2a00      	cmp	r2, #0
 80001e8:	d1fb      	bne.n	80001e2 <strlen+0x2>
 80001ea:	1a18      	subs	r0, r3, r0
 80001ec:	3801      	subs	r0, #1
 80001ee:	4770      	bx	lr

080001f0 <memchr>:
 80001f0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001f4:	2a10      	cmp	r2, #16
 80001f6:	db2b      	blt.n	8000250 <memchr+0x60>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	d008      	beq.n	8000210 <memchr+0x20>
 80001fe:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000202:	3a01      	subs	r2, #1
 8000204:	428b      	cmp	r3, r1
 8000206:	d02d      	beq.n	8000264 <memchr+0x74>
 8000208:	f010 0f07 	tst.w	r0, #7
 800020c:	b342      	cbz	r2, 8000260 <memchr+0x70>
 800020e:	d1f6      	bne.n	80001fe <memchr+0xe>
 8000210:	b4f0      	push	{r4, r5, r6, r7}
 8000212:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000216:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800021a:	f022 0407 	bic.w	r4, r2, #7
 800021e:	f07f 0700 	mvns.w	r7, #0
 8000222:	2300      	movs	r3, #0
 8000224:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000228:	3c08      	subs	r4, #8
 800022a:	ea85 0501 	eor.w	r5, r5, r1
 800022e:	ea86 0601 	eor.w	r6, r6, r1
 8000232:	fa85 f547 	uadd8	r5, r5, r7
 8000236:	faa3 f587 	sel	r5, r3, r7
 800023a:	fa86 f647 	uadd8	r6, r6, r7
 800023e:	faa5 f687 	sel	r6, r5, r7
 8000242:	b98e      	cbnz	r6, 8000268 <memchr+0x78>
 8000244:	d1ee      	bne.n	8000224 <memchr+0x34>
 8000246:	bcf0      	pop	{r4, r5, r6, r7}
 8000248:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800024c:	f002 0207 	and.w	r2, r2, #7
 8000250:	b132      	cbz	r2, 8000260 <memchr+0x70>
 8000252:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000256:	3a01      	subs	r2, #1
 8000258:	ea83 0301 	eor.w	r3, r3, r1
 800025c:	b113      	cbz	r3, 8000264 <memchr+0x74>
 800025e:	d1f8      	bne.n	8000252 <memchr+0x62>
 8000260:	2000      	movs	r0, #0
 8000262:	4770      	bx	lr
 8000264:	3801      	subs	r0, #1
 8000266:	4770      	bx	lr
 8000268:	2d00      	cmp	r5, #0
 800026a:	bf06      	itte	eq
 800026c:	4635      	moveq	r5, r6
 800026e:	3803      	subeq	r0, #3
 8000270:	3807      	subne	r0, #7
 8000272:	f015 0f01 	tst.w	r5, #1
 8000276:	d107      	bne.n	8000288 <memchr+0x98>
 8000278:	3001      	adds	r0, #1
 800027a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800027e:	bf02      	ittt	eq
 8000280:	3001      	addeq	r0, #1
 8000282:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000286:	3001      	addeq	r0, #1
 8000288:	bcf0      	pop	{r4, r5, r6, r7}
 800028a:	3801      	subs	r0, #1
 800028c:	4770      	bx	lr
 800028e:	bf00      	nop

08000290 <__aeabi_uldivmod>:
 8000290:	b953      	cbnz	r3, 80002a8 <__aeabi_uldivmod+0x18>
 8000292:	b94a      	cbnz	r2, 80002a8 <__aeabi_uldivmod+0x18>
 8000294:	2900      	cmp	r1, #0
 8000296:	bf08      	it	eq
 8000298:	2800      	cmpeq	r0, #0
 800029a:	bf1c      	itt	ne
 800029c:	f04f 31ff 	movne.w	r1, #4294967295
 80002a0:	f04f 30ff 	movne.w	r0, #4294967295
 80002a4:	f000 b96a 	b.w	800057c <__aeabi_idiv0>
 80002a8:	f1ad 0c08 	sub.w	ip, sp, #8
 80002ac:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 80002b0:	f000 f806 	bl	80002c0 <__udivmoddi4>
 80002b4:	f8dd e004 	ldr.w	lr, [sp, #4]
 80002b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80002bc:	b004      	add	sp, #16
 80002be:	4770      	bx	lr

080002c0 <__udivmoddi4>:
 80002c0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80002c4:	9d08      	ldr	r5, [sp, #32]
 80002c6:	460c      	mov	r4, r1
 80002c8:	2b00      	cmp	r3, #0
 80002ca:	d14e      	bne.n	800036a <__udivmoddi4+0xaa>
 80002cc:	4694      	mov	ip, r2
 80002ce:	458c      	cmp	ip, r1
 80002d0:	4686      	mov	lr, r0
 80002d2:	fab2 f282 	clz	r2, r2
 80002d6:	d962      	bls.n	800039e <__udivmoddi4+0xde>
 80002d8:	b14a      	cbz	r2, 80002ee <__udivmoddi4+0x2e>
 80002da:	f1c2 0320 	rsb	r3, r2, #32
 80002de:	4091      	lsls	r1, r2
 80002e0:	fa20 f303 	lsr.w	r3, r0, r3
 80002e4:	fa0c fc02 	lsl.w	ip, ip, r2
 80002e8:	4319      	orrs	r1, r3
 80002ea:	fa00 fe02 	lsl.w	lr, r0, r2
 80002ee:	ea4f 471c 	mov.w	r7, ip, lsr #16
 80002f2:	fa1f f68c 	uxth.w	r6, ip
 80002f6:	fbb1 f4f7 	udiv	r4, r1, r7
 80002fa:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80002fe:	fb07 1114 	mls	r1, r7, r4, r1
 8000302:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000306:	fb04 f106 	mul.w	r1, r4, r6
 800030a:	4299      	cmp	r1, r3
 800030c:	d90a      	bls.n	8000324 <__udivmoddi4+0x64>
 800030e:	eb1c 0303 	adds.w	r3, ip, r3
 8000312:	f104 30ff 	add.w	r0, r4, #4294967295
 8000316:	f080 8112 	bcs.w	800053e <__udivmoddi4+0x27e>
 800031a:	4299      	cmp	r1, r3
 800031c:	f240 810f 	bls.w	800053e <__udivmoddi4+0x27e>
 8000320:	3c02      	subs	r4, #2
 8000322:	4463      	add	r3, ip
 8000324:	1a59      	subs	r1, r3, r1
 8000326:	fa1f f38e 	uxth.w	r3, lr
 800032a:	fbb1 f0f7 	udiv	r0, r1, r7
 800032e:	fb07 1110 	mls	r1, r7, r0, r1
 8000332:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000336:	fb00 f606 	mul.w	r6, r0, r6
 800033a:	429e      	cmp	r6, r3
 800033c:	d90a      	bls.n	8000354 <__udivmoddi4+0x94>
 800033e:	eb1c 0303 	adds.w	r3, ip, r3
 8000342:	f100 31ff 	add.w	r1, r0, #4294967295
 8000346:	f080 80fc 	bcs.w	8000542 <__udivmoddi4+0x282>
 800034a:	429e      	cmp	r6, r3
 800034c:	f240 80f9 	bls.w	8000542 <__udivmoddi4+0x282>
 8000350:	4463      	add	r3, ip
 8000352:	3802      	subs	r0, #2
 8000354:	1b9b      	subs	r3, r3, r6
 8000356:	ea40 4004 	orr.w	r0, r0, r4, lsl #16
 800035a:	2100      	movs	r1, #0
 800035c:	b11d      	cbz	r5, 8000366 <__udivmoddi4+0xa6>
 800035e:	40d3      	lsrs	r3, r2
 8000360:	2200      	movs	r2, #0
 8000362:	e9c5 3200 	strd	r3, r2, [r5]
 8000366:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800036a:	428b      	cmp	r3, r1
 800036c:	d905      	bls.n	800037a <__udivmoddi4+0xba>
 800036e:	b10d      	cbz	r5, 8000374 <__udivmoddi4+0xb4>
 8000370:	e9c5 0100 	strd	r0, r1, [r5]
 8000374:	2100      	movs	r1, #0
 8000376:	4608      	mov	r0, r1
 8000378:	e7f5      	b.n	8000366 <__udivmoddi4+0xa6>
 800037a:	fab3 f183 	clz	r1, r3
 800037e:	2900      	cmp	r1, #0
 8000380:	d146      	bne.n	8000410 <__udivmoddi4+0x150>
 8000382:	42a3      	cmp	r3, r4
 8000384:	d302      	bcc.n	800038c <__udivmoddi4+0xcc>
 8000386:	4290      	cmp	r0, r2
 8000388:	f0c0 80f0 	bcc.w	800056c <__udivmoddi4+0x2ac>
 800038c:	1a86      	subs	r6, r0, r2
 800038e:	eb64 0303 	sbc.w	r3, r4, r3
 8000392:	2001      	movs	r0, #1
 8000394:	2d00      	cmp	r5, #0
 8000396:	d0e6      	beq.n	8000366 <__udivmoddi4+0xa6>
 8000398:	e9c5 6300 	strd	r6, r3, [r5]
 800039c:	e7e3      	b.n	8000366 <__udivmoddi4+0xa6>
 800039e:	2a00      	cmp	r2, #0
 80003a0:	f040 8090 	bne.w	80004c4 <__udivmoddi4+0x204>
 80003a4:	eba1 040c 	sub.w	r4, r1, ip
 80003a8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80003ac:	fa1f f78c 	uxth.w	r7, ip
 80003b0:	2101      	movs	r1, #1
 80003b2:	fbb4 f6f8 	udiv	r6, r4, r8
 80003b6:	ea4f 431e 	mov.w	r3, lr, lsr #16
 80003ba:	fb08 4416 	mls	r4, r8, r6, r4
 80003be:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003c2:	fb07 f006 	mul.w	r0, r7, r6
 80003c6:	4298      	cmp	r0, r3
 80003c8:	d908      	bls.n	80003dc <__udivmoddi4+0x11c>
 80003ca:	eb1c 0303 	adds.w	r3, ip, r3
 80003ce:	f106 34ff 	add.w	r4, r6, #4294967295
 80003d2:	d202      	bcs.n	80003da <__udivmoddi4+0x11a>
 80003d4:	4298      	cmp	r0, r3
 80003d6:	f200 80cd 	bhi.w	8000574 <__udivmoddi4+0x2b4>
 80003da:	4626      	mov	r6, r4
 80003dc:	1a1c      	subs	r4, r3, r0
 80003de:	fa1f f38e 	uxth.w	r3, lr
 80003e2:	fbb4 f0f8 	udiv	r0, r4, r8
 80003e6:	fb08 4410 	mls	r4, r8, r0, r4
 80003ea:	ea43 4304 	orr.w	r3, r3, r4, lsl #16
 80003ee:	fb00 f707 	mul.w	r7, r0, r7
 80003f2:	429f      	cmp	r7, r3
 80003f4:	d908      	bls.n	8000408 <__udivmoddi4+0x148>
 80003f6:	eb1c 0303 	adds.w	r3, ip, r3
 80003fa:	f100 34ff 	add.w	r4, r0, #4294967295
 80003fe:	d202      	bcs.n	8000406 <__udivmoddi4+0x146>
 8000400:	429f      	cmp	r7, r3
 8000402:	f200 80b0 	bhi.w	8000566 <__udivmoddi4+0x2a6>
 8000406:	4620      	mov	r0, r4
 8000408:	1bdb      	subs	r3, r3, r7
 800040a:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 800040e:	e7a5      	b.n	800035c <__udivmoddi4+0x9c>
 8000410:	f1c1 0620 	rsb	r6, r1, #32
 8000414:	408b      	lsls	r3, r1
 8000416:	fa22 f706 	lsr.w	r7, r2, r6
 800041a:	431f      	orrs	r7, r3
 800041c:	fa20 fc06 	lsr.w	ip, r0, r6
 8000420:	fa04 f301 	lsl.w	r3, r4, r1
 8000424:	ea43 030c 	orr.w	r3, r3, ip
 8000428:	40f4      	lsrs	r4, r6
 800042a:	fa00 f801 	lsl.w	r8, r0, r1
 800042e:	0c38      	lsrs	r0, r7, #16
 8000430:	ea4f 4913 	mov.w	r9, r3, lsr #16
 8000434:	fbb4 fef0 	udiv	lr, r4, r0
 8000438:	fa1f fc87 	uxth.w	ip, r7
 800043c:	fb00 441e 	mls	r4, r0, lr, r4
 8000440:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 8000444:	fb0e f90c 	mul.w	r9, lr, ip
 8000448:	45a1      	cmp	r9, r4
 800044a:	fa02 f201 	lsl.w	r2, r2, r1
 800044e:	d90a      	bls.n	8000466 <__udivmoddi4+0x1a6>
 8000450:	193c      	adds	r4, r7, r4
 8000452:	f10e 3aff 	add.w	sl, lr, #4294967295
 8000456:	f080 8084 	bcs.w	8000562 <__udivmoddi4+0x2a2>
 800045a:	45a1      	cmp	r9, r4
 800045c:	f240 8081 	bls.w	8000562 <__udivmoddi4+0x2a2>
 8000460:	f1ae 0e02 	sub.w	lr, lr, #2
 8000464:	443c      	add	r4, r7
 8000466:	eba4 0409 	sub.w	r4, r4, r9
 800046a:	fa1f f983 	uxth.w	r9, r3
 800046e:	fbb4 f3f0 	udiv	r3, r4, r0
 8000472:	fb00 4413 	mls	r4, r0, r3, r4
 8000476:	ea49 4404 	orr.w	r4, r9, r4, lsl #16
 800047a:	fb03 fc0c 	mul.w	ip, r3, ip
 800047e:	45a4      	cmp	ip, r4
 8000480:	d907      	bls.n	8000492 <__udivmoddi4+0x1d2>
 8000482:	193c      	adds	r4, r7, r4
 8000484:	f103 30ff 	add.w	r0, r3, #4294967295
 8000488:	d267      	bcs.n	800055a <__udivmoddi4+0x29a>
 800048a:	45a4      	cmp	ip, r4
 800048c:	d965      	bls.n	800055a <__udivmoddi4+0x29a>
 800048e:	3b02      	subs	r3, #2
 8000490:	443c      	add	r4, r7
 8000492:	ea43 400e 	orr.w	r0, r3, lr, lsl #16
 8000496:	fba0 9302 	umull	r9, r3, r0, r2
 800049a:	eba4 040c 	sub.w	r4, r4, ip
 800049e:	429c      	cmp	r4, r3
 80004a0:	46ce      	mov	lr, r9
 80004a2:	469c      	mov	ip, r3
 80004a4:	d351      	bcc.n	800054a <__udivmoddi4+0x28a>
 80004a6:	d04e      	beq.n	8000546 <__udivmoddi4+0x286>
 80004a8:	b155      	cbz	r5, 80004c0 <__udivmoddi4+0x200>
 80004aa:	ebb8 030e 	subs.w	r3, r8, lr
 80004ae:	eb64 040c 	sbc.w	r4, r4, ip
 80004b2:	fa04 f606 	lsl.w	r6, r4, r6
 80004b6:	40cb      	lsrs	r3, r1
 80004b8:	431e      	orrs	r6, r3
 80004ba:	40cc      	lsrs	r4, r1
 80004bc:	e9c5 6400 	strd	r6, r4, [r5]
 80004c0:	2100      	movs	r1, #0
 80004c2:	e750      	b.n	8000366 <__udivmoddi4+0xa6>
 80004c4:	f1c2 0320 	rsb	r3, r2, #32
 80004c8:	fa20 f103 	lsr.w	r1, r0, r3
 80004cc:	fa0c fc02 	lsl.w	ip, ip, r2
 80004d0:	fa24 f303 	lsr.w	r3, r4, r3
 80004d4:	4094      	lsls	r4, r2
 80004d6:	430c      	orrs	r4, r1
 80004d8:	ea4f 481c 	mov.w	r8, ip, lsr #16
 80004dc:	fa00 fe02 	lsl.w	lr, r0, r2
 80004e0:	fa1f f78c 	uxth.w	r7, ip
 80004e4:	fbb3 f0f8 	udiv	r0, r3, r8
 80004e8:	fb08 3110 	mls	r1, r8, r0, r3
 80004ec:	0c23      	lsrs	r3, r4, #16
 80004ee:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 80004f2:	fb00 f107 	mul.w	r1, r0, r7
 80004f6:	4299      	cmp	r1, r3
 80004f8:	d908      	bls.n	800050c <__udivmoddi4+0x24c>
 80004fa:	eb1c 0303 	adds.w	r3, ip, r3
 80004fe:	f100 36ff 	add.w	r6, r0, #4294967295
 8000502:	d22c      	bcs.n	800055e <__udivmoddi4+0x29e>
 8000504:	4299      	cmp	r1, r3
 8000506:	d92a      	bls.n	800055e <__udivmoddi4+0x29e>
 8000508:	3802      	subs	r0, #2
 800050a:	4463      	add	r3, ip
 800050c:	1a5b      	subs	r3, r3, r1
 800050e:	b2a4      	uxth	r4, r4
 8000510:	fbb3 f1f8 	udiv	r1, r3, r8
 8000514:	fb08 3311 	mls	r3, r8, r1, r3
 8000518:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 800051c:	fb01 f307 	mul.w	r3, r1, r7
 8000520:	42a3      	cmp	r3, r4
 8000522:	d908      	bls.n	8000536 <__udivmoddi4+0x276>
 8000524:	eb1c 0404 	adds.w	r4, ip, r4
 8000528:	f101 36ff 	add.w	r6, r1, #4294967295
 800052c:	d213      	bcs.n	8000556 <__udivmoddi4+0x296>
 800052e:	42a3      	cmp	r3, r4
 8000530:	d911      	bls.n	8000556 <__udivmoddi4+0x296>
 8000532:	3902      	subs	r1, #2
 8000534:	4464      	add	r4, ip
 8000536:	1ae4      	subs	r4, r4, r3
 8000538:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800053c:	e739      	b.n	80003b2 <__udivmoddi4+0xf2>
 800053e:	4604      	mov	r4, r0
 8000540:	e6f0      	b.n	8000324 <__udivmoddi4+0x64>
 8000542:	4608      	mov	r0, r1
 8000544:	e706      	b.n	8000354 <__udivmoddi4+0x94>
 8000546:	45c8      	cmp	r8, r9
 8000548:	d2ae      	bcs.n	80004a8 <__udivmoddi4+0x1e8>
 800054a:	ebb9 0e02 	subs.w	lr, r9, r2
 800054e:	eb63 0c07 	sbc.w	ip, r3, r7
 8000552:	3801      	subs	r0, #1
 8000554:	e7a8      	b.n	80004a8 <__udivmoddi4+0x1e8>
 8000556:	4631      	mov	r1, r6
 8000558:	e7ed      	b.n	8000536 <__udivmoddi4+0x276>
 800055a:	4603      	mov	r3, r0
 800055c:	e799      	b.n	8000492 <__udivmoddi4+0x1d2>
 800055e:	4630      	mov	r0, r6
 8000560:	e7d4      	b.n	800050c <__udivmoddi4+0x24c>
 8000562:	46d6      	mov	lr, sl
 8000564:	e77f      	b.n	8000466 <__udivmoddi4+0x1a6>
 8000566:	4463      	add	r3, ip
 8000568:	3802      	subs	r0, #2
 800056a:	e74d      	b.n	8000408 <__udivmoddi4+0x148>
 800056c:	4606      	mov	r6, r0
 800056e:	4623      	mov	r3, r4
 8000570:	4608      	mov	r0, r1
 8000572:	e70f      	b.n	8000394 <__udivmoddi4+0xd4>
 8000574:	3e02      	subs	r6, #2
 8000576:	4463      	add	r3, ip
 8000578:	e730      	b.n	80003dc <__udivmoddi4+0x11c>
 800057a:	bf00      	nop

0800057c <__aeabi_idiv0>:
 800057c:	4770      	bx	lr
 800057e:	bf00      	nop

08000580 <sendATCommand>:
static void MX_GPIO_Init(void);
static void MX_USART2_UART_Init(void);
static void MX_NVIC_Init(void); // Agregar prototipo para NVIC init
/* USER CODE BEGIN PFP */

void sendATCommand(char *cmd) {
 8000580:	b580      	push	{r7, lr}
 8000582:	b082      	sub	sp, #8
 8000584:	af00      	add	r7, sp, #0
 8000586:	6078      	str	r0, [r7, #4]
    HAL_UART_Transmit(&huart2, (uint8_t*)cmd, strlen(cmd), HAL_MAX_DELAY);
 8000588:	6878      	ldr	r0, [r7, #4]
 800058a:	f7ff fe29 	bl	80001e0 <strlen>
 800058e:	4603      	mov	r3, r0
 8000590:	b29a      	uxth	r2, r3
 8000592:	f04f 33ff 	mov.w	r3, #4294967295
 8000596:	6879      	ldr	r1, [r7, #4]
 8000598:	4803      	ldr	r0, [pc, #12]	@ (80005a8 <sendATCommand+0x28>)
 800059a:	f001 fbc5 	bl	8001d28 <HAL_UART_Transmit>
}
 800059e:	bf00      	nop
 80005a0:	3708      	adds	r7, #8
 80005a2:	46bd      	mov	sp, r7
 80005a4:	bd80      	pop	{r7, pc}
 80005a6:	bf00      	nop
 80005a8:	20000084 	.word	0x20000084

080005ac <receiveResponse_IT>:

void receiveResponse_IT() {
 80005ac:	b580      	push	{r7, lr}
 80005ae:	af00      	add	r7, sp, #0
    rxIndex = 0;  // Reiniciar índice
 80005b0:	4b0b      	ldr	r3, [pc, #44]	@ (80005e0 <receiveResponse_IT+0x34>)
 80005b2:	2200      	movs	r2, #0
 80005b4:	701a      	strb	r2, [r3, #0]
    rxComplete = 0;  // Limpiar bandera de recepción completa
 80005b6:	4b0b      	ldr	r3, [pc, #44]	@ (80005e4 <receiveResponse_IT+0x38>)
 80005b8:	2200      	movs	r2, #0
 80005ba:	701a      	strb	r2, [r3, #0]
    memset(response, 0, sizeof(response));  // Limpiar el buffer
 80005bc:	2264      	movs	r2, #100	@ 0x64
 80005be:	2100      	movs	r1, #0
 80005c0:	4809      	ldr	r0, [pc, #36]	@ (80005e8 <receiveResponse_IT+0x3c>)
 80005c2:	f002 fcce 	bl	8002f62 <memset>
    HAL_UART_Receive_IT(&huart2, (uint8_t*)&response[rxIndex], 1);  // Recibir primer byte
 80005c6:	4b06      	ldr	r3, [pc, #24]	@ (80005e0 <receiveResponse_IT+0x34>)
 80005c8:	781b      	ldrb	r3, [r3, #0]
 80005ca:	461a      	mov	r2, r3
 80005cc:	4b06      	ldr	r3, [pc, #24]	@ (80005e8 <receiveResponse_IT+0x3c>)
 80005ce:	4413      	add	r3, r2
 80005d0:	2201      	movs	r2, #1
 80005d2:	4619      	mov	r1, r3
 80005d4:	4805      	ldr	r0, [pc, #20]	@ (80005ec <receiveResponse_IT+0x40>)
 80005d6:	f001 fc32 	bl	8001e3e <HAL_UART_Receive_IT>
}
 80005da:	bf00      	nop
 80005dc:	bd80      	pop	{r7, pc}
 80005de:	bf00      	nop
 80005e0:	20000130 	.word	0x20000130
 80005e4:	20000131 	.word	0x20000131
 80005e8:	200000cc 	.word	0x200000cc
 80005ec:	20000084 	.word	0x20000084

080005f0 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart) {
 80005f0:	b580      	push	{r7, lr}
 80005f2:	b082      	sub	sp, #8
 80005f4:	af00      	add	r7, sp, #0
 80005f6:	6078      	str	r0, [r7, #4]
    if (huart->Instance == USART2) {  // Verificar si es el UART correcto
 80005f8:	687b      	ldr	r3, [r7, #4]
 80005fa:	681b      	ldr	r3, [r3, #0]
 80005fc:	4a12      	ldr	r2, [pc, #72]	@ (8000648 <HAL_UART_RxCpltCallback+0x58>)
 80005fe:	4293      	cmp	r3, r2
 8000600:	d11e      	bne.n	8000640 <HAL_UART_RxCpltCallback+0x50>
        if (response[rxIndex] == '\n' || rxIndex >= sizeof(response) - 1) {
 8000602:	4b12      	ldr	r3, [pc, #72]	@ (800064c <HAL_UART_RxCpltCallback+0x5c>)
 8000604:	781b      	ldrb	r3, [r3, #0]
 8000606:	461a      	mov	r2, r3
 8000608:	4b11      	ldr	r3, [pc, #68]	@ (8000650 <HAL_UART_RxCpltCallback+0x60>)
 800060a:	5c9b      	ldrb	r3, [r3, r2]
 800060c:	2b0a      	cmp	r3, #10
 800060e:	d003      	beq.n	8000618 <HAL_UART_RxCpltCallback+0x28>
 8000610:	4b0e      	ldr	r3, [pc, #56]	@ (800064c <HAL_UART_RxCpltCallback+0x5c>)
 8000612:	781b      	ldrb	r3, [r3, #0]
 8000614:	2b62      	cmp	r3, #98	@ 0x62
 8000616:	d903      	bls.n	8000620 <HAL_UART_RxCpltCallback+0x30>
            rxComplete = 1;  // Marcar recepción completa
 8000618:	4b0e      	ldr	r3, [pc, #56]	@ (8000654 <HAL_UART_RxCpltCallback+0x64>)
 800061a:	2201      	movs	r2, #1
 800061c:	701a      	strb	r2, [r3, #0]
        } else {
            rxIndex++;  // Avanzar en el buffer
            HAL_UART_Receive_IT(&huart2, (uint8_t*)&response[rxIndex], 1);  // Seguir recibiendo
        }
    }
}
 800061e:	e00f      	b.n	8000640 <HAL_UART_RxCpltCallback+0x50>
            rxIndex++;  // Avanzar en el buffer
 8000620:	4b0a      	ldr	r3, [pc, #40]	@ (800064c <HAL_UART_RxCpltCallback+0x5c>)
 8000622:	781b      	ldrb	r3, [r3, #0]
 8000624:	3301      	adds	r3, #1
 8000626:	b2da      	uxtb	r2, r3
 8000628:	4b08      	ldr	r3, [pc, #32]	@ (800064c <HAL_UART_RxCpltCallback+0x5c>)
 800062a:	701a      	strb	r2, [r3, #0]
            HAL_UART_Receive_IT(&huart2, (uint8_t*)&response[rxIndex], 1);  // Seguir recibiendo
 800062c:	4b07      	ldr	r3, [pc, #28]	@ (800064c <HAL_UART_RxCpltCallback+0x5c>)
 800062e:	781b      	ldrb	r3, [r3, #0]
 8000630:	461a      	mov	r2, r3
 8000632:	4b07      	ldr	r3, [pc, #28]	@ (8000650 <HAL_UART_RxCpltCallback+0x60>)
 8000634:	4413      	add	r3, r2
 8000636:	2201      	movs	r2, #1
 8000638:	4619      	mov	r1, r3
 800063a:	4807      	ldr	r0, [pc, #28]	@ (8000658 <HAL_UART_RxCpltCallback+0x68>)
 800063c:	f001 fbff 	bl	8001e3e <HAL_UART_Receive_IT>
}
 8000640:	bf00      	nop
 8000642:	3708      	adds	r7, #8
 8000644:	46bd      	mov	sp, r7
 8000646:	bd80      	pop	{r7, pc}
 8000648:	40004400 	.word	0x40004400
 800064c:	20000130 	.word	0x20000130
 8000650:	200000cc 	.word	0x200000cc
 8000654:	20000131 	.word	0x20000131
 8000658:	20000084 	.word	0x20000084

0800065c <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 800065c:	b580      	push	{r7, lr}
 800065e:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8000660:	f000 faa2 	bl	8000ba8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8000664:	f000 f826 	bl	80006b4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8000668:	f000 f8c2 	bl	80007f0 <MX_GPIO_Init>
  MX_USART2_UART_Init();
 800066c:	f000 f88a 	bl	8000784 <MX_USART2_UART_Init>
  MX_NVIC_Init(); // Inicializar NVIC
 8000670:	f000 f8b2 	bl	80007d8 <MX_NVIC_Init>
  /* USER CODE BEGIN 2 */
  HAL_Delay(3000);  // Esperar 3s después de encender el ESP8266
 8000674:	f640 30b8 	movw	r0, #3000	@ 0xbb8
 8000678:	f000 fb08 	bl	8000c8c <HAL_Delay>

  // Enviar comando AT y esperar respuesta con interrupciones
  sendATCommand("AT\r\n.Hoaldsfjlasdfklnasdjkgnsdfg");
 800067c:	4809      	ldr	r0, [pc, #36]	@ (80006a4 <main+0x48>)
 800067e:	f7ff ff7f 	bl	8000580 <sendATCommand>
  receiveResponse_IT();  // Iniciar recepción en interrupciones
 8000682:	f7ff ff93 	bl	80005ac <receiveResponse_IT>
  while (!rxComplete);  // Esperar a que la respuesta llegue completamente
 8000686:	bf00      	nop
 8000688:	4b07      	ldr	r3, [pc, #28]	@ (80006a8 <main+0x4c>)
 800068a:	781b      	ldrb	r3, [r3, #0]
 800068c:	2b00      	cmp	r3, #0
 800068e:	d0fb      	beq.n	8000688 <main+0x2c>
  printf("Respuesta AT: %s\n", response);
 8000690:	4906      	ldr	r1, [pc, #24]	@ (80006ac <main+0x50>)
 8000692:	4807      	ldr	r0, [pc, #28]	@ (80006b0 <main+0x54>)
 8000694:	f002 fc10 	bl	8002eb8 <iprintf>
  while (1)
  {
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
    HAL_Delay(5000);
 8000698:	f241 3088 	movw	r0, #5000	@ 0x1388
 800069c:	f000 faf6 	bl	8000c8c <HAL_Delay>
 80006a0:	e7fa      	b.n	8000698 <main+0x3c>
 80006a2:	bf00      	nop
 80006a4:	08003bac 	.word	0x08003bac
 80006a8:	20000131 	.word	0x20000131
 80006ac:	200000cc 	.word	0x200000cc
 80006b0:	08003bd0 	.word	0x08003bd0

080006b4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80006b4:	b580      	push	{r7, lr}
 80006b6:	b094      	sub	sp, #80	@ 0x50
 80006b8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80006ba:	f107 0320 	add.w	r3, r7, #32
 80006be:	2230      	movs	r2, #48	@ 0x30
 80006c0:	2100      	movs	r1, #0
 80006c2:	4618      	mov	r0, r3
 80006c4:	f002 fc4d 	bl	8002f62 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80006c8:	f107 030c 	add.w	r3, r7, #12
 80006cc:	2200      	movs	r2, #0
 80006ce:	601a      	str	r2, [r3, #0]
 80006d0:	605a      	str	r2, [r3, #4]
 80006d2:	609a      	str	r2, [r3, #8]
 80006d4:	60da      	str	r2, [r3, #12]
 80006d6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80006d8:	2300      	movs	r3, #0
 80006da:	60bb      	str	r3, [r7, #8]
 80006dc:	4b27      	ldr	r3, [pc, #156]	@ (800077c <SystemClock_Config+0xc8>)
 80006de:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006e0:	4a26      	ldr	r2, [pc, #152]	@ (800077c <SystemClock_Config+0xc8>)
 80006e2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80006e6:	6413      	str	r3, [r2, #64]	@ 0x40
 80006e8:	4b24      	ldr	r3, [pc, #144]	@ (800077c <SystemClock_Config+0xc8>)
 80006ea:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80006ec:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80006f0:	60bb      	str	r3, [r7, #8]
 80006f2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80006f4:	2300      	movs	r3, #0
 80006f6:	607b      	str	r3, [r7, #4]
 80006f8:	4b21      	ldr	r3, [pc, #132]	@ (8000780 <SystemClock_Config+0xcc>)
 80006fa:	681b      	ldr	r3, [r3, #0]
 80006fc:	4a20      	ldr	r2, [pc, #128]	@ (8000780 <SystemClock_Config+0xcc>)
 80006fe:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8000702:	6013      	str	r3, [r2, #0]
 8000704:	4b1e      	ldr	r3, [pc, #120]	@ (8000780 <SystemClock_Config+0xcc>)
 8000706:	681b      	ldr	r3, [r3, #0]
 8000708:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 800070c:	607b      	str	r3, [r7, #4]
 800070e:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8000710:	2302      	movs	r3, #2
 8000712:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8000714:	2301      	movs	r3, #1
 8000716:	62fb      	str	r3, [r7, #44]	@ 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8000718:	2310      	movs	r3, #16
 800071a:	633b      	str	r3, [r7, #48]	@ 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800071c:	2302      	movs	r3, #2
 800071e:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8000720:	2300      	movs	r3, #0
 8000722:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8000724:	2308      	movs	r3, #8
 8000726:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 192;
 8000728:	23c0      	movs	r3, #192	@ 0xc0
 800072a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV8;
 800072c:	2308      	movs	r3, #8
 800072e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8000730:	2308      	movs	r3, #8
 8000732:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8000734:	f107 0320 	add.w	r3, r7, #32
 8000738:	4618      	mov	r0, r3
 800073a:	f000 fe0d 	bl	8001358 <HAL_RCC_OscConfig>
 800073e:	4603      	mov	r3, r0
 8000740:	2b00      	cmp	r3, #0
 8000742:	d001      	beq.n	8000748 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8000744:	f000 f898 	bl	8000878 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8000748:	230f      	movs	r3, #15
 800074a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800074c:	2302      	movs	r3, #2
 800074e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8000750:	2300      	movs	r3, #0
 8000752:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV4;
 8000754:	f44f 53a0 	mov.w	r3, #5120	@ 0x1400
 8000758:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800075a:	2300      	movs	r3, #0
 800075c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_1) != HAL_OK)
 800075e:	f107 030c 	add.w	r3, r7, #12
 8000762:	2101      	movs	r1, #1
 8000764:	4618      	mov	r0, r3
 8000766:	f001 f86f 	bl	8001848 <HAL_RCC_ClockConfig>
 800076a:	4603      	mov	r3, r0
 800076c:	2b00      	cmp	r3, #0
 800076e:	d001      	beq.n	8000774 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8000770:	f000 f882 	bl	8000878 <Error_Handler>
  }
}
 8000774:	bf00      	nop
 8000776:	3750      	adds	r7, #80	@ 0x50
 8000778:	46bd      	mov	sp, r7
 800077a:	bd80      	pop	{r7, pc}
 800077c:	40023800 	.word	0x40023800
 8000780:	40007000 	.word	0x40007000

08000784 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 8000784:	b580      	push	{r7, lr}
 8000786:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 8000788:	4b11      	ldr	r3, [pc, #68]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 800078a:	4a12      	ldr	r2, [pc, #72]	@ (80007d4 <MX_USART2_UART_Init+0x50>)
 800078c:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200 ;
 800078e:	4b10      	ldr	r3, [pc, #64]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 8000790:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8000794:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8000796:	4b0e      	ldr	r3, [pc, #56]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 8000798:	2200      	movs	r2, #0
 800079a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800079c:	4b0c      	ldr	r3, [pc, #48]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 800079e:	2200      	movs	r2, #0
 80007a0:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 80007a2:	4b0b      	ldr	r3, [pc, #44]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007a4:	2200      	movs	r2, #0
 80007a6:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80007a8:	4b09      	ldr	r3, [pc, #36]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007aa:	220c      	movs	r2, #12
 80007ac:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80007ae:	4b08      	ldr	r3, [pc, #32]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007b0:	2200      	movs	r2, #0
 80007b2:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80007b4:	4b06      	ldr	r3, [pc, #24]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007b6:	2200      	movs	r2, #0
 80007b8:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80007ba:	4805      	ldr	r0, [pc, #20]	@ (80007d0 <MX_USART2_UART_Init+0x4c>)
 80007bc:	f001 fa64 	bl	8001c88 <HAL_UART_Init>
 80007c0:	4603      	mov	r3, r0
 80007c2:	2b00      	cmp	r3, #0
 80007c4:	d001      	beq.n	80007ca <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 80007c6:	f000 f857 	bl	8000878 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80007ca:	bf00      	nop
 80007cc:	bd80      	pop	{r7, pc}
 80007ce:	bf00      	nop
 80007d0:	20000084 	.word	0x20000084
 80007d4:	40004400 	.word	0x40004400

080007d8 <MX_NVIC_Init>:
  * @param None
  * @retval None
  */

static void MX_NVIC_Init(void)
{
 80007d8:	b580      	push	{r7, lr}
 80007da:	af00      	add	r7, sp, #0
  /* USART2_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80007dc:	2200      	movs	r2, #0
 80007de:	2100      	movs	r1, #0
 80007e0:	2026      	movs	r0, #38	@ 0x26
 80007e2:	f000 fb52 	bl	8000e8a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(USART2_IRQn); // Habilitar interrupciones globales USART2
 80007e6:	2026      	movs	r0, #38	@ 0x26
 80007e8:	f000 fb6b 	bl	8000ec2 <HAL_NVIC_EnableIRQ>
}
 80007ec:	bf00      	nop
 80007ee:	bd80      	pop	{r7, pc}

080007f0 <MX_GPIO_Init>:


static void MX_GPIO_Init(void)
{
 80007f0:	b580      	push	{r7, lr}
 80007f2:	b088      	sub	sp, #32
 80007f4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80007f6:	f107 030c 	add.w	r3, r7, #12
 80007fa:	2200      	movs	r2, #0
 80007fc:	601a      	str	r2, [r3, #0]
 80007fe:	605a      	str	r2, [r3, #4]
 8000800:	609a      	str	r2, [r3, #8]
 8000802:	60da      	str	r2, [r3, #12]
 8000804:	611a      	str	r2, [r3, #16]
/* USER CODE BEGIN MX_GPIO_Init_1 */
/* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8000806:	2300      	movs	r3, #0
 8000808:	60bb      	str	r3, [r7, #8]
 800080a:	4b19      	ldr	r3, [pc, #100]	@ (8000870 <MX_GPIO_Init+0x80>)
 800080c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800080e:	4a18      	ldr	r2, [pc, #96]	@ (8000870 <MX_GPIO_Init+0x80>)
 8000810:	f043 0301 	orr.w	r3, r3, #1
 8000814:	6313      	str	r3, [r2, #48]	@ 0x30
 8000816:	4b16      	ldr	r3, [pc, #88]	@ (8000870 <MX_GPIO_Init+0x80>)
 8000818:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800081a:	f003 0301 	and.w	r3, r3, #1
 800081e:	60bb      	str	r3, [r7, #8]
 8000820:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8000822:	2300      	movs	r3, #0
 8000824:	607b      	str	r3, [r7, #4]
 8000826:	4b12      	ldr	r3, [pc, #72]	@ (8000870 <MX_GPIO_Init+0x80>)
 8000828:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800082a:	4a11      	ldr	r2, [pc, #68]	@ (8000870 <MX_GPIO_Init+0x80>)
 800082c:	f043 0308 	orr.w	r3, r3, #8
 8000830:	6313      	str	r3, [r2, #48]	@ 0x30
 8000832:	4b0f      	ldr	r3, [pc, #60]	@ (8000870 <MX_GPIO_Init+0x80>)
 8000834:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000836:	f003 0308 	and.w	r3, r3, #8
 800083a:	607b      	str	r3, [r7, #4]
 800083c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOD, GPIO_PIN_12, GPIO_PIN_RESET);
 800083e:	2200      	movs	r2, #0
 8000840:	f44f 5180 	mov.w	r1, #4096	@ 0x1000
 8000844:	480b      	ldr	r0, [pc, #44]	@ (8000874 <MX_GPIO_Init+0x84>)
 8000846:	f000 fd6d 	bl	8001324 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : PD12 */
  GPIO_InitStruct.Pin = GPIO_PIN_12;
 800084a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800084e:	60fb      	str	r3, [r7, #12]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8000850:	2301      	movs	r3, #1
 8000852:	613b      	str	r3, [r7, #16]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000854:	2300      	movs	r3, #0
 8000856:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8000858:	2300      	movs	r3, #0
 800085a:	61bb      	str	r3, [r7, #24]
  HAL_GPIO_Init(GPIOD, &GPIO_InitStruct);
 800085c:	f107 030c 	add.w	r3, r7, #12
 8000860:	4619      	mov	r1, r3
 8000862:	4804      	ldr	r0, [pc, #16]	@ (8000874 <MX_GPIO_Init+0x84>)
 8000864:	f000 fbda 	bl	800101c <HAL_GPIO_Init>

/* USER CODE BEGIN MX_GPIO_Init_2 */
/* USER CODE END MX_GPIO_Init_2 */
}
 8000868:	bf00      	nop
 800086a:	3720      	adds	r7, #32
 800086c:	46bd      	mov	sp, r7
 800086e:	bd80      	pop	{r7, pc}
 8000870:	40023800 	.word	0x40023800
 8000874:	40020c00 	.word	0x40020c00

08000878 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8000878:	b480      	push	{r7}
 800087a:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting special-purpose register PRIMASK.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 800087c:	b672      	cpsid	i
}
 800087e:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  __disable_irq();
  while (1)
 8000880:	bf00      	nop
 8000882:	e7fd      	b.n	8000880 <Error_Handler+0x8>

08000884 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8000884:	b580      	push	{r7, lr}
 8000886:	b082      	sub	sp, #8
 8000888:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800088a:	2300      	movs	r3, #0
 800088c:	607b      	str	r3, [r7, #4]
 800088e:	4b10      	ldr	r3, [pc, #64]	@ (80008d0 <HAL_MspInit+0x4c>)
 8000890:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8000892:	4a0f      	ldr	r2, [pc, #60]	@ (80008d0 <HAL_MspInit+0x4c>)
 8000894:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8000898:	6453      	str	r3, [r2, #68]	@ 0x44
 800089a:	4b0d      	ldr	r3, [pc, #52]	@ (80008d0 <HAL_MspInit+0x4c>)
 800089c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800089e:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80008a2:	607b      	str	r3, [r7, #4]
 80008a4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80008a6:	2300      	movs	r3, #0
 80008a8:	603b      	str	r3, [r7, #0]
 80008aa:	4b09      	ldr	r3, [pc, #36]	@ (80008d0 <HAL_MspInit+0x4c>)
 80008ac:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ae:	4a08      	ldr	r2, [pc, #32]	@ (80008d0 <HAL_MspInit+0x4c>)
 80008b0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80008b4:	6413      	str	r3, [r2, #64]	@ 0x40
 80008b6:	4b06      	ldr	r3, [pc, #24]	@ (80008d0 <HAL_MspInit+0x4c>)
 80008b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008ba:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80008be:	603b      	str	r3, [r7, #0]
 80008c0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80008c2:	2007      	movs	r0, #7
 80008c4:	f000 fad6 	bl	8000e74 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80008c8:	bf00      	nop
 80008ca:	3708      	adds	r7, #8
 80008cc:	46bd      	mov	sp, r7
 80008ce:	bd80      	pop	{r7, pc}
 80008d0:	40023800 	.word	0x40023800

080008d4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80008d4:	b580      	push	{r7, lr}
 80008d6:	b08a      	sub	sp, #40	@ 0x28
 80008d8:	af00      	add	r7, sp, #0
 80008da:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80008dc:	f107 0314 	add.w	r3, r7, #20
 80008e0:	2200      	movs	r2, #0
 80008e2:	601a      	str	r2, [r3, #0]
 80008e4:	605a      	str	r2, [r3, #4]
 80008e6:	609a      	str	r2, [r3, #8]
 80008e8:	60da      	str	r2, [r3, #12]
 80008ea:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80008ec:	687b      	ldr	r3, [r7, #4]
 80008ee:	681b      	ldr	r3, [r3, #0]
 80008f0:	4a1d      	ldr	r2, [pc, #116]	@ (8000968 <HAL_UART_MspInit+0x94>)
 80008f2:	4293      	cmp	r3, r2
 80008f4:	d133      	bne.n	800095e <HAL_UART_MspInit+0x8a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80008f6:	2300      	movs	r3, #0
 80008f8:	613b      	str	r3, [r7, #16]
 80008fa:	4b1c      	ldr	r3, [pc, #112]	@ (800096c <HAL_UART_MspInit+0x98>)
 80008fc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80008fe:	4a1b      	ldr	r2, [pc, #108]	@ (800096c <HAL_UART_MspInit+0x98>)
 8000900:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000904:	6413      	str	r3, [r2, #64]	@ 0x40
 8000906:	4b19      	ldr	r3, [pc, #100]	@ (800096c <HAL_UART_MspInit+0x98>)
 8000908:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800090a:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800090e:	613b      	str	r3, [r7, #16]
 8000910:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8000912:	2300      	movs	r3, #0
 8000914:	60fb      	str	r3, [r7, #12]
 8000916:	4b15      	ldr	r3, [pc, #84]	@ (800096c <HAL_UART_MspInit+0x98>)
 8000918:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800091a:	4a14      	ldr	r2, [pc, #80]	@ (800096c <HAL_UART_MspInit+0x98>)
 800091c:	f043 0301 	orr.w	r3, r3, #1
 8000920:	6313      	str	r3, [r2, #48]	@ 0x30
 8000922:	4b12      	ldr	r3, [pc, #72]	@ (800096c <HAL_UART_MspInit+0x98>)
 8000924:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8000926:	f003 0301 	and.w	r3, r3, #1
 800092a:	60fb      	str	r3, [r7, #12]
 800092c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_2|GPIO_PIN_3;
 800092e:	230c      	movs	r3, #12
 8000930:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8000932:	2302      	movs	r3, #2
 8000934:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8000936:	2300      	movs	r3, #0
 8000938:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800093a:	2303      	movs	r3, #3
 800093c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800093e:	2307      	movs	r3, #7
 8000940:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8000942:	f107 0314 	add.w	r3, r7, #20
 8000946:	4619      	mov	r1, r3
 8000948:	4809      	ldr	r0, [pc, #36]	@ (8000970 <HAL_UART_MspInit+0x9c>)
 800094a:	f000 fb67 	bl	800101c <HAL_GPIO_Init>

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800094e:	2200      	movs	r2, #0
 8000950:	2100      	movs	r1, #0
 8000952:	2026      	movs	r0, #38	@ 0x26
 8000954:	f000 fa99 	bl	8000e8a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8000958:	2026      	movs	r0, #38	@ 0x26
 800095a:	f000 fab2 	bl	8000ec2 <HAL_NVIC_EnableIRQ>

  /* USER CODE END USART2_MspInit 1 */

  }

}
 800095e:	bf00      	nop
 8000960:	3728      	adds	r7, #40	@ 0x28
 8000962:	46bd      	mov	sp, r7
 8000964:	bd80      	pop	{r7, pc}
 8000966:	bf00      	nop
 8000968:	40004400 	.word	0x40004400
 800096c:	40023800 	.word	0x40023800
 8000970:	40020000 	.word	0x40020000

08000974 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8000974:	b480      	push	{r7}
 8000976:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 8000978:	bf00      	nop
 800097a:	e7fd      	b.n	8000978 <NMI_Handler+0x4>

0800097c <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800097c:	b480      	push	{r7}
 800097e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8000980:	bf00      	nop
 8000982:	e7fd      	b.n	8000980 <HardFault_Handler+0x4>

08000984 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8000984:	b480      	push	{r7}
 8000986:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8000988:	bf00      	nop
 800098a:	e7fd      	b.n	8000988 <MemManage_Handler+0x4>

0800098c <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 800098c:	b480      	push	{r7}
 800098e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8000990:	bf00      	nop
 8000992:	e7fd      	b.n	8000990 <BusFault_Handler+0x4>

08000994 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8000994:	b480      	push	{r7}
 8000996:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8000998:	bf00      	nop
 800099a:	e7fd      	b.n	8000998 <UsageFault_Handler+0x4>

0800099c <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800099c:	b480      	push	{r7}
 800099e:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80009a0:	bf00      	nop
 80009a2:	46bd      	mov	sp, r7
 80009a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009a8:	4770      	bx	lr

080009aa <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80009aa:	b480      	push	{r7}
 80009ac:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80009ae:	bf00      	nop
 80009b0:	46bd      	mov	sp, r7
 80009b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009b6:	4770      	bx	lr

080009b8 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80009b8:	b480      	push	{r7}
 80009ba:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80009bc:	bf00      	nop
 80009be:	46bd      	mov	sp, r7
 80009c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80009c4:	4770      	bx	lr

080009c6 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80009c6:	b580      	push	{r7, lr}
 80009c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80009ca:	f000 f93f 	bl	8000c4c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80009ce:	bf00      	nop
 80009d0:	bd80      	pop	{r7, pc}
	...

080009d4 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80009d4:	b580      	push	{r7, lr}
 80009d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80009d8:	4802      	ldr	r0, [pc, #8]	@ (80009e4 <USART2_IRQHandler+0x10>)
 80009da:	f001 fa55 	bl	8001e88 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80009de:	bf00      	nop
 80009e0:	bd80      	pop	{r7, pc}
 80009e2:	bf00      	nop
 80009e4:	20000084 	.word	0x20000084

080009e8 <_read>:
  _kill(status, -1);
  while (1) {}    /* Make sure we hang here */
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 80009e8:	b580      	push	{r7, lr}
 80009ea:	b086      	sub	sp, #24
 80009ec:	af00      	add	r7, sp, #0
 80009ee:	60f8      	str	r0, [r7, #12]
 80009f0:	60b9      	str	r1, [r7, #8]
 80009f2:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 80009f4:	2300      	movs	r3, #0
 80009f6:	617b      	str	r3, [r7, #20]
 80009f8:	e00a      	b.n	8000a10 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 80009fa:	f3af 8000 	nop.w
 80009fe:	4601      	mov	r1, r0
 8000a00:	68bb      	ldr	r3, [r7, #8]
 8000a02:	1c5a      	adds	r2, r3, #1
 8000a04:	60ba      	str	r2, [r7, #8]
 8000a06:	b2ca      	uxtb	r2, r1
 8000a08:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a0a:	697b      	ldr	r3, [r7, #20]
 8000a0c:	3301      	adds	r3, #1
 8000a0e:	617b      	str	r3, [r7, #20]
 8000a10:	697a      	ldr	r2, [r7, #20]
 8000a12:	687b      	ldr	r3, [r7, #4]
 8000a14:	429a      	cmp	r2, r3
 8000a16:	dbf0      	blt.n	80009fa <_read+0x12>
  }

  return len;
 8000a18:	687b      	ldr	r3, [r7, #4]
}
 8000a1a:	4618      	mov	r0, r3
 8000a1c:	3718      	adds	r7, #24
 8000a1e:	46bd      	mov	sp, r7
 8000a20:	bd80      	pop	{r7, pc}

08000a22 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 8000a22:	b580      	push	{r7, lr}
 8000a24:	b086      	sub	sp, #24
 8000a26:	af00      	add	r7, sp, #0
 8000a28:	60f8      	str	r0, [r7, #12]
 8000a2a:	60b9      	str	r1, [r7, #8]
 8000a2c:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a2e:	2300      	movs	r3, #0
 8000a30:	617b      	str	r3, [r7, #20]
 8000a32:	e009      	b.n	8000a48 <_write+0x26>
  {
    __io_putchar(*ptr++);
 8000a34:	68bb      	ldr	r3, [r7, #8]
 8000a36:	1c5a      	adds	r2, r3, #1
 8000a38:	60ba      	str	r2, [r7, #8]
 8000a3a:	781b      	ldrb	r3, [r3, #0]
 8000a3c:	4618      	mov	r0, r3
 8000a3e:	f3af 8000 	nop.w
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 8000a42:	697b      	ldr	r3, [r7, #20]
 8000a44:	3301      	adds	r3, #1
 8000a46:	617b      	str	r3, [r7, #20]
 8000a48:	697a      	ldr	r2, [r7, #20]
 8000a4a:	687b      	ldr	r3, [r7, #4]
 8000a4c:	429a      	cmp	r2, r3
 8000a4e:	dbf1      	blt.n	8000a34 <_write+0x12>
  }
  return len;
 8000a50:	687b      	ldr	r3, [r7, #4]
}
 8000a52:	4618      	mov	r0, r3
 8000a54:	3718      	adds	r7, #24
 8000a56:	46bd      	mov	sp, r7
 8000a58:	bd80      	pop	{r7, pc}

08000a5a <_close>:

int _close(int file)
{
 8000a5a:	b480      	push	{r7}
 8000a5c:	b083      	sub	sp, #12
 8000a5e:	af00      	add	r7, sp, #0
 8000a60:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 8000a62:	f04f 33ff 	mov.w	r3, #4294967295
}
 8000a66:	4618      	mov	r0, r3
 8000a68:	370c      	adds	r7, #12
 8000a6a:	46bd      	mov	sp, r7
 8000a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a70:	4770      	bx	lr

08000a72 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8000a72:	b480      	push	{r7}
 8000a74:	b083      	sub	sp, #12
 8000a76:	af00      	add	r7, sp, #0
 8000a78:	6078      	str	r0, [r7, #4]
 8000a7a:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 8000a7c:	683b      	ldr	r3, [r7, #0]
 8000a7e:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8000a82:	605a      	str	r2, [r3, #4]
  return 0;
 8000a84:	2300      	movs	r3, #0
}
 8000a86:	4618      	mov	r0, r3
 8000a88:	370c      	adds	r7, #12
 8000a8a:	46bd      	mov	sp, r7
 8000a8c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000a90:	4770      	bx	lr

08000a92 <_isatty>:

int _isatty(int file)
{
 8000a92:	b480      	push	{r7}
 8000a94:	b083      	sub	sp, #12
 8000a96:	af00      	add	r7, sp, #0
 8000a98:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 8000a9a:	2301      	movs	r3, #1
}
 8000a9c:	4618      	mov	r0, r3
 8000a9e:	370c      	adds	r7, #12
 8000aa0:	46bd      	mov	sp, r7
 8000aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000aa6:	4770      	bx	lr

08000aa8 <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 8000aa8:	b480      	push	{r7}
 8000aaa:	b085      	sub	sp, #20
 8000aac:	af00      	add	r7, sp, #0
 8000aae:	60f8      	str	r0, [r7, #12]
 8000ab0:	60b9      	str	r1, [r7, #8]
 8000ab2:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 8000ab4:	2300      	movs	r3, #0
}
 8000ab6:	4618      	mov	r0, r3
 8000ab8:	3714      	adds	r7, #20
 8000aba:	46bd      	mov	sp, r7
 8000abc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000ac0:	4770      	bx	lr
	...

08000ac4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8000ac4:	b580      	push	{r7, lr}
 8000ac6:	b086      	sub	sp, #24
 8000ac8:	af00      	add	r7, sp, #0
 8000aca:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8000acc:	4a14      	ldr	r2, [pc, #80]	@ (8000b20 <_sbrk+0x5c>)
 8000ace:	4b15      	ldr	r3, [pc, #84]	@ (8000b24 <_sbrk+0x60>)
 8000ad0:	1ad3      	subs	r3, r2, r3
 8000ad2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8000ad4:	697b      	ldr	r3, [r7, #20]
 8000ad6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8000ad8:	4b13      	ldr	r3, [pc, #76]	@ (8000b28 <_sbrk+0x64>)
 8000ada:	681b      	ldr	r3, [r3, #0]
 8000adc:	2b00      	cmp	r3, #0
 8000ade:	d102      	bne.n	8000ae6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8000ae0:	4b11      	ldr	r3, [pc, #68]	@ (8000b28 <_sbrk+0x64>)
 8000ae2:	4a12      	ldr	r2, [pc, #72]	@ (8000b2c <_sbrk+0x68>)
 8000ae4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8000ae6:	4b10      	ldr	r3, [pc, #64]	@ (8000b28 <_sbrk+0x64>)
 8000ae8:	681a      	ldr	r2, [r3, #0]
 8000aea:	687b      	ldr	r3, [r7, #4]
 8000aec:	4413      	add	r3, r2
 8000aee:	693a      	ldr	r2, [r7, #16]
 8000af0:	429a      	cmp	r2, r3
 8000af2:	d207      	bcs.n	8000b04 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8000af4:	f002 fa84 	bl	8003000 <__errno>
 8000af8:	4603      	mov	r3, r0
 8000afa:	220c      	movs	r2, #12
 8000afc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8000afe:	f04f 33ff 	mov.w	r3, #4294967295
 8000b02:	e009      	b.n	8000b18 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8000b04:	4b08      	ldr	r3, [pc, #32]	@ (8000b28 <_sbrk+0x64>)
 8000b06:	681b      	ldr	r3, [r3, #0]
 8000b08:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8000b0a:	4b07      	ldr	r3, [pc, #28]	@ (8000b28 <_sbrk+0x64>)
 8000b0c:	681a      	ldr	r2, [r3, #0]
 8000b0e:	687b      	ldr	r3, [r7, #4]
 8000b10:	4413      	add	r3, r2
 8000b12:	4a05      	ldr	r2, [pc, #20]	@ (8000b28 <_sbrk+0x64>)
 8000b14:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8000b16:	68fb      	ldr	r3, [r7, #12]
}
 8000b18:	4618      	mov	r0, r3
 8000b1a:	3718      	adds	r7, #24
 8000b1c:	46bd      	mov	sp, r7
 8000b1e:	bd80      	pop	{r7, pc}
 8000b20:	20020000 	.word	0x20020000
 8000b24:	00000400 	.word	0x00000400
 8000b28:	20000134 	.word	0x20000134
 8000b2c:	20000288 	.word	0x20000288

08000b30 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8000b30:	b480      	push	{r7}
 8000b32:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8000b34:	4b06      	ldr	r3, [pc, #24]	@ (8000b50 <SystemInit+0x20>)
 8000b36:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 8000b3a:	4a05      	ldr	r2, [pc, #20]	@ (8000b50 <SystemInit+0x20>)
 8000b3c:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 8000b40:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8000b44:	bf00      	nop
 8000b46:	46bd      	mov	sp, r7
 8000b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop
 8000b50:	e000ed00 	.word	0xe000ed00

08000b54 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b54:	f8df d034 	ldr.w	sp, [pc, #52]	@ 8000b8c <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8000b58:	f7ff ffea 	bl	8000b30 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8000b5c:	480c      	ldr	r0, [pc, #48]	@ (8000b90 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 8000b5e:	490d      	ldr	r1, [pc, #52]	@ (8000b94 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 8000b60:	4a0d      	ldr	r2, [pc, #52]	@ (8000b98 <LoopFillZerobss+0x1a>)
  movs r3, #0
 8000b62:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8000b64:	e002      	b.n	8000b6c <LoopCopyDataInit>

08000b66 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8000b66:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8000b68:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8000b6a:	3304      	adds	r3, #4

08000b6c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8000b6c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8000b6e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8000b70:	d3f9      	bcc.n	8000b66 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8000b72:	4a0a      	ldr	r2, [pc, #40]	@ (8000b9c <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 8000b74:	4c0a      	ldr	r4, [pc, #40]	@ (8000ba0 <LoopFillZerobss+0x22>)
  movs r3, #0
 8000b76:	2300      	movs	r3, #0
  b LoopFillZerobss
 8000b78:	e001      	b.n	8000b7e <LoopFillZerobss>

08000b7a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8000b7a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8000b7c:	3204      	adds	r2, #4

08000b7e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8000b7e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8000b80:	d3fb      	bcc.n	8000b7a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 8000b82:	f002 fa43 	bl	800300c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8000b86:	f7ff fd69 	bl	800065c <main>
  bx  lr    
 8000b8a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8000b8c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8000b90:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8000b94:	20000068 	.word	0x20000068
  ldr r2, =_sidata
 8000b98:	08003c40 	.word	0x08003c40
  ldr r2, =_sbss
 8000b9c:	20000068 	.word	0x20000068
  ldr r4, =_ebss
 8000ba0:	20000288 	.word	0x20000288

08000ba4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8000ba4:	e7fe      	b.n	8000ba4 <ADC_IRQHandler>
	...

08000ba8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8000ba8:	b580      	push	{r7, lr}
 8000baa:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8000bac:	4b0e      	ldr	r3, [pc, #56]	@ (8000be8 <HAL_Init+0x40>)
 8000bae:	681b      	ldr	r3, [r3, #0]
 8000bb0:	4a0d      	ldr	r2, [pc, #52]	@ (8000be8 <HAL_Init+0x40>)
 8000bb2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 8000bb6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8000bb8:	4b0b      	ldr	r3, [pc, #44]	@ (8000be8 <HAL_Init+0x40>)
 8000bba:	681b      	ldr	r3, [r3, #0]
 8000bbc:	4a0a      	ldr	r2, [pc, #40]	@ (8000be8 <HAL_Init+0x40>)
 8000bbe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8000bc2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8000bc4:	4b08      	ldr	r3, [pc, #32]	@ (8000be8 <HAL_Init+0x40>)
 8000bc6:	681b      	ldr	r3, [r3, #0]
 8000bc8:	4a07      	ldr	r2, [pc, #28]	@ (8000be8 <HAL_Init+0x40>)
 8000bca:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8000bce:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8000bd0:	2003      	movs	r0, #3
 8000bd2:	f000 f94f 	bl	8000e74 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8000bd6:	2000      	movs	r0, #0
 8000bd8:	f000 f808 	bl	8000bec <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8000bdc:	f7ff fe52 	bl	8000884 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8000be0:	2300      	movs	r3, #0
}
 8000be2:	4618      	mov	r0, r3
 8000be4:	bd80      	pop	{r7, pc}
 8000be6:	bf00      	nop
 8000be8:	40023c00 	.word	0x40023c00

08000bec <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8000bec:	b580      	push	{r7, lr}
 8000bee:	b082      	sub	sp, #8
 8000bf0:	af00      	add	r7, sp, #0
 8000bf2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8000bf4:	4b12      	ldr	r3, [pc, #72]	@ (8000c40 <HAL_InitTick+0x54>)
 8000bf6:	681a      	ldr	r2, [r3, #0]
 8000bf8:	4b12      	ldr	r3, [pc, #72]	@ (8000c44 <HAL_InitTick+0x58>)
 8000bfa:	781b      	ldrb	r3, [r3, #0]
 8000bfc:	4619      	mov	r1, r3
 8000bfe:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8000c02:	fbb3 f3f1 	udiv	r3, r3, r1
 8000c06:	fbb2 f3f3 	udiv	r3, r2, r3
 8000c0a:	4618      	mov	r0, r3
 8000c0c:	f000 f967 	bl	8000ede <HAL_SYSTICK_Config>
 8000c10:	4603      	mov	r3, r0
 8000c12:	2b00      	cmp	r3, #0
 8000c14:	d001      	beq.n	8000c1a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8000c16:	2301      	movs	r3, #1
 8000c18:	e00e      	b.n	8000c38 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8000c1a:	687b      	ldr	r3, [r7, #4]
 8000c1c:	2b0f      	cmp	r3, #15
 8000c1e:	d80a      	bhi.n	8000c36 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8000c20:	2200      	movs	r2, #0
 8000c22:	6879      	ldr	r1, [r7, #4]
 8000c24:	f04f 30ff 	mov.w	r0, #4294967295
 8000c28:	f000 f92f 	bl	8000e8a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8000c2c:	4a06      	ldr	r2, [pc, #24]	@ (8000c48 <HAL_InitTick+0x5c>)
 8000c2e:	687b      	ldr	r3, [r7, #4]
 8000c30:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8000c32:	2300      	movs	r3, #0
 8000c34:	e000      	b.n	8000c38 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8000c36:	2301      	movs	r3, #1
}
 8000c38:	4618      	mov	r0, r3
 8000c3a:	3708      	adds	r7, #8
 8000c3c:	46bd      	mov	sp, r7
 8000c3e:	bd80      	pop	{r7, pc}
 8000c40:	20000000 	.word	0x20000000
 8000c44:	20000008 	.word	0x20000008
 8000c48:	20000004 	.word	0x20000004

08000c4c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8000c4c:	b480      	push	{r7}
 8000c4e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8000c50:	4b06      	ldr	r3, [pc, #24]	@ (8000c6c <HAL_IncTick+0x20>)
 8000c52:	781b      	ldrb	r3, [r3, #0]
 8000c54:	461a      	mov	r2, r3
 8000c56:	4b06      	ldr	r3, [pc, #24]	@ (8000c70 <HAL_IncTick+0x24>)
 8000c58:	681b      	ldr	r3, [r3, #0]
 8000c5a:	4413      	add	r3, r2
 8000c5c:	4a04      	ldr	r2, [pc, #16]	@ (8000c70 <HAL_IncTick+0x24>)
 8000c5e:	6013      	str	r3, [r2, #0]
}
 8000c60:	bf00      	nop
 8000c62:	46bd      	mov	sp, r7
 8000c64:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c68:	4770      	bx	lr
 8000c6a:	bf00      	nop
 8000c6c:	20000008 	.word	0x20000008
 8000c70:	20000138 	.word	0x20000138

08000c74 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8000c74:	b480      	push	{r7}
 8000c76:	af00      	add	r7, sp, #0
  return uwTick;
 8000c78:	4b03      	ldr	r3, [pc, #12]	@ (8000c88 <HAL_GetTick+0x14>)
 8000c7a:	681b      	ldr	r3, [r3, #0]
}
 8000c7c:	4618      	mov	r0, r3
 8000c7e:	46bd      	mov	sp, r7
 8000c80:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000c84:	4770      	bx	lr
 8000c86:	bf00      	nop
 8000c88:	20000138 	.word	0x20000138

08000c8c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8000c8c:	b580      	push	{r7, lr}
 8000c8e:	b084      	sub	sp, #16
 8000c90:	af00      	add	r7, sp, #0
 8000c92:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8000c94:	f7ff ffee 	bl	8000c74 <HAL_GetTick>
 8000c98:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8000c9a:	687b      	ldr	r3, [r7, #4]
 8000c9c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8000c9e:	68fb      	ldr	r3, [r7, #12]
 8000ca0:	f1b3 3fff 	cmp.w	r3, #4294967295
 8000ca4:	d005      	beq.n	8000cb2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8000ca6:	4b0a      	ldr	r3, [pc, #40]	@ (8000cd0 <HAL_Delay+0x44>)
 8000ca8:	781b      	ldrb	r3, [r3, #0]
 8000caa:	461a      	mov	r2, r3
 8000cac:	68fb      	ldr	r3, [r7, #12]
 8000cae:	4413      	add	r3, r2
 8000cb0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8000cb2:	bf00      	nop
 8000cb4:	f7ff ffde 	bl	8000c74 <HAL_GetTick>
 8000cb8:	4602      	mov	r2, r0
 8000cba:	68bb      	ldr	r3, [r7, #8]
 8000cbc:	1ad3      	subs	r3, r2, r3
 8000cbe:	68fa      	ldr	r2, [r7, #12]
 8000cc0:	429a      	cmp	r2, r3
 8000cc2:	d8f7      	bhi.n	8000cb4 <HAL_Delay+0x28>
  {
  }
}
 8000cc4:	bf00      	nop
 8000cc6:	bf00      	nop
 8000cc8:	3710      	adds	r7, #16
 8000cca:	46bd      	mov	sp, r7
 8000ccc:	bd80      	pop	{r7, pc}
 8000cce:	bf00      	nop
 8000cd0:	20000008 	.word	0x20000008

08000cd4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000cd4:	b480      	push	{r7}
 8000cd6:	b085      	sub	sp, #20
 8000cd8:	af00      	add	r7, sp, #0
 8000cda:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8000cdc:	687b      	ldr	r3, [r7, #4]
 8000cde:	f003 0307 	and.w	r3, r3, #7
 8000ce2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8000ce4:	4b0c      	ldr	r3, [pc, #48]	@ (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000ce6:	68db      	ldr	r3, [r3, #12]
 8000ce8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8000cea:	68ba      	ldr	r2, [r7, #8]
 8000cec:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8000cf0:	4013      	ands	r3, r2
 8000cf2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8000cf4:	68fb      	ldr	r3, [r7, #12]
 8000cf6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8000cf8:	68bb      	ldr	r3, [r7, #8]
 8000cfa:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8000cfc:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8000d00:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8000d04:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8000d06:	4a04      	ldr	r2, [pc, #16]	@ (8000d18 <__NVIC_SetPriorityGrouping+0x44>)
 8000d08:	68bb      	ldr	r3, [r7, #8]
 8000d0a:	60d3      	str	r3, [r2, #12]
}
 8000d0c:	bf00      	nop
 8000d0e:	3714      	adds	r7, #20
 8000d10:	46bd      	mov	sp, r7
 8000d12:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d16:	4770      	bx	lr
 8000d18:	e000ed00 	.word	0xe000ed00

08000d1c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8000d1c:	b480      	push	{r7}
 8000d1e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8000d20:	4b04      	ldr	r3, [pc, #16]	@ (8000d34 <__NVIC_GetPriorityGrouping+0x18>)
 8000d22:	68db      	ldr	r3, [r3, #12]
 8000d24:	0a1b      	lsrs	r3, r3, #8
 8000d26:	f003 0307 	and.w	r3, r3, #7
}
 8000d2a:	4618      	mov	r0, r3
 8000d2c:	46bd      	mov	sp, r7
 8000d2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d32:	4770      	bx	lr
 8000d34:	e000ed00 	.word	0xe000ed00

08000d38 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000d38:	b480      	push	{r7}
 8000d3a:	b083      	sub	sp, #12
 8000d3c:	af00      	add	r7, sp, #0
 8000d3e:	4603      	mov	r3, r0
 8000d40:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d42:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d46:	2b00      	cmp	r3, #0
 8000d48:	db0b      	blt.n	8000d62 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8000d4a:	79fb      	ldrb	r3, [r7, #7]
 8000d4c:	f003 021f 	and.w	r2, r3, #31
 8000d50:	4907      	ldr	r1, [pc, #28]	@ (8000d70 <__NVIC_EnableIRQ+0x38>)
 8000d52:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d56:	095b      	lsrs	r3, r3, #5
 8000d58:	2001      	movs	r0, #1
 8000d5a:	fa00 f202 	lsl.w	r2, r0, r2
 8000d5e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8000d62:	bf00      	nop
 8000d64:	370c      	adds	r7, #12
 8000d66:	46bd      	mov	sp, r7
 8000d68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000d6c:	4770      	bx	lr
 8000d6e:	bf00      	nop
 8000d70:	e000e100 	.word	0xe000e100

08000d74 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8000d74:	b480      	push	{r7}
 8000d76:	b083      	sub	sp, #12
 8000d78:	af00      	add	r7, sp, #0
 8000d7a:	4603      	mov	r3, r0
 8000d7c:	6039      	str	r1, [r7, #0]
 8000d7e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8000d80:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d84:	2b00      	cmp	r3, #0
 8000d86:	db0a      	blt.n	8000d9e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d88:	683b      	ldr	r3, [r7, #0]
 8000d8a:	b2da      	uxtb	r2, r3
 8000d8c:	490c      	ldr	r1, [pc, #48]	@ (8000dc0 <__NVIC_SetPriority+0x4c>)
 8000d8e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000d92:	0112      	lsls	r2, r2, #4
 8000d94:	b2d2      	uxtb	r2, r2
 8000d96:	440b      	add	r3, r1
 8000d98:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8000d9c:	e00a      	b.n	8000db4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8000d9e:	683b      	ldr	r3, [r7, #0]
 8000da0:	b2da      	uxtb	r2, r3
 8000da2:	4908      	ldr	r1, [pc, #32]	@ (8000dc4 <__NVIC_SetPriority+0x50>)
 8000da4:	79fb      	ldrb	r3, [r7, #7]
 8000da6:	f003 030f 	and.w	r3, r3, #15
 8000daa:	3b04      	subs	r3, #4
 8000dac:	0112      	lsls	r2, r2, #4
 8000dae:	b2d2      	uxtb	r2, r2
 8000db0:	440b      	add	r3, r1
 8000db2:	761a      	strb	r2, [r3, #24]
}
 8000db4:	bf00      	nop
 8000db6:	370c      	adds	r7, #12
 8000db8:	46bd      	mov	sp, r7
 8000dba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000dbe:	4770      	bx	lr
 8000dc0:	e000e100 	.word	0xe000e100
 8000dc4:	e000ed00 	.word	0xe000ed00

08000dc8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8000dc8:	b480      	push	{r7}
 8000dca:	b089      	sub	sp, #36	@ 0x24
 8000dcc:	af00      	add	r7, sp, #0
 8000dce:	60f8      	str	r0, [r7, #12]
 8000dd0:	60b9      	str	r1, [r7, #8]
 8000dd2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8000dd4:	68fb      	ldr	r3, [r7, #12]
 8000dd6:	f003 0307 	and.w	r3, r3, #7
 8000dda:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8000ddc:	69fb      	ldr	r3, [r7, #28]
 8000dde:	f1c3 0307 	rsb	r3, r3, #7
 8000de2:	2b04      	cmp	r3, #4
 8000de4:	bf28      	it	cs
 8000de6:	2304      	movcs	r3, #4
 8000de8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8000dea:	69fb      	ldr	r3, [r7, #28]
 8000dec:	3304      	adds	r3, #4
 8000dee:	2b06      	cmp	r3, #6
 8000df0:	d902      	bls.n	8000df8 <NVIC_EncodePriority+0x30>
 8000df2:	69fb      	ldr	r3, [r7, #28]
 8000df4:	3b03      	subs	r3, #3
 8000df6:	e000      	b.n	8000dfa <NVIC_EncodePriority+0x32>
 8000df8:	2300      	movs	r3, #0
 8000dfa:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000dfc:	f04f 32ff 	mov.w	r2, #4294967295
 8000e00:	69bb      	ldr	r3, [r7, #24]
 8000e02:	fa02 f303 	lsl.w	r3, r2, r3
 8000e06:	43da      	mvns	r2, r3
 8000e08:	68bb      	ldr	r3, [r7, #8]
 8000e0a:	401a      	ands	r2, r3
 8000e0c:	697b      	ldr	r3, [r7, #20]
 8000e0e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8000e10:	f04f 31ff 	mov.w	r1, #4294967295
 8000e14:	697b      	ldr	r3, [r7, #20]
 8000e16:	fa01 f303 	lsl.w	r3, r1, r3
 8000e1a:	43d9      	mvns	r1, r3
 8000e1c:	687b      	ldr	r3, [r7, #4]
 8000e1e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8000e20:	4313      	orrs	r3, r2
         );
}
 8000e22:	4618      	mov	r0, r3
 8000e24:	3724      	adds	r7, #36	@ 0x24
 8000e26:	46bd      	mov	sp, r7
 8000e28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8000e2c:	4770      	bx	lr
	...

08000e30 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8000e30:	b580      	push	{r7, lr}
 8000e32:	b082      	sub	sp, #8
 8000e34:	af00      	add	r7, sp, #0
 8000e36:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8000e38:	687b      	ldr	r3, [r7, #4]
 8000e3a:	3b01      	subs	r3, #1
 8000e3c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8000e40:	d301      	bcc.n	8000e46 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8000e42:	2301      	movs	r3, #1
 8000e44:	e00f      	b.n	8000e66 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8000e46:	4a0a      	ldr	r2, [pc, #40]	@ (8000e70 <SysTick_Config+0x40>)
 8000e48:	687b      	ldr	r3, [r7, #4]
 8000e4a:	3b01      	subs	r3, #1
 8000e4c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8000e4e:	210f      	movs	r1, #15
 8000e50:	f04f 30ff 	mov.w	r0, #4294967295
 8000e54:	f7ff ff8e 	bl	8000d74 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8000e58:	4b05      	ldr	r3, [pc, #20]	@ (8000e70 <SysTick_Config+0x40>)
 8000e5a:	2200      	movs	r2, #0
 8000e5c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8000e5e:	4b04      	ldr	r3, [pc, #16]	@ (8000e70 <SysTick_Config+0x40>)
 8000e60:	2207      	movs	r2, #7
 8000e62:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8000e64:	2300      	movs	r3, #0
}
 8000e66:	4618      	mov	r0, r3
 8000e68:	3708      	adds	r7, #8
 8000e6a:	46bd      	mov	sp, r7
 8000e6c:	bd80      	pop	{r7, pc}
 8000e6e:	bf00      	nop
 8000e70:	e000e010 	.word	0xe000e010

08000e74 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8000e74:	b580      	push	{r7, lr}
 8000e76:	b082      	sub	sp, #8
 8000e78:	af00      	add	r7, sp, #0
 8000e7a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8000e7c:	6878      	ldr	r0, [r7, #4]
 8000e7e:	f7ff ff29 	bl	8000cd4 <__NVIC_SetPriorityGrouping>
}
 8000e82:	bf00      	nop
 8000e84:	3708      	adds	r7, #8
 8000e86:	46bd      	mov	sp, r7
 8000e88:	bd80      	pop	{r7, pc}

08000e8a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8000e8a:	b580      	push	{r7, lr}
 8000e8c:	b086      	sub	sp, #24
 8000e8e:	af00      	add	r7, sp, #0
 8000e90:	4603      	mov	r3, r0
 8000e92:	60b9      	str	r1, [r7, #8]
 8000e94:	607a      	str	r2, [r7, #4]
 8000e96:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8000e98:	2300      	movs	r3, #0
 8000e9a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8000e9c:	f7ff ff3e 	bl	8000d1c <__NVIC_GetPriorityGrouping>
 8000ea0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8000ea2:	687a      	ldr	r2, [r7, #4]
 8000ea4:	68b9      	ldr	r1, [r7, #8]
 8000ea6:	6978      	ldr	r0, [r7, #20]
 8000ea8:	f7ff ff8e 	bl	8000dc8 <NVIC_EncodePriority>
 8000eac:	4602      	mov	r2, r0
 8000eae:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8000eb2:	4611      	mov	r1, r2
 8000eb4:	4618      	mov	r0, r3
 8000eb6:	f7ff ff5d 	bl	8000d74 <__NVIC_SetPriority>
}
 8000eba:	bf00      	nop
 8000ebc:	3718      	adds	r7, #24
 8000ebe:	46bd      	mov	sp, r7
 8000ec0:	bd80      	pop	{r7, pc}

08000ec2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8000ec2:	b580      	push	{r7, lr}
 8000ec4:	b082      	sub	sp, #8
 8000ec6:	af00      	add	r7, sp, #0
 8000ec8:	4603      	mov	r3, r0
 8000eca:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8000ecc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8000ed0:	4618      	mov	r0, r3
 8000ed2:	f7ff ff31 	bl	8000d38 <__NVIC_EnableIRQ>
}
 8000ed6:	bf00      	nop
 8000ed8:	3708      	adds	r7, #8
 8000eda:	46bd      	mov	sp, r7
 8000edc:	bd80      	pop	{r7, pc}

08000ede <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8000ede:	b580      	push	{r7, lr}
 8000ee0:	b082      	sub	sp, #8
 8000ee2:	af00      	add	r7, sp, #0
 8000ee4:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8000ee6:	6878      	ldr	r0, [r7, #4]
 8000ee8:	f7ff ffa2 	bl	8000e30 <SysTick_Config>
 8000eec:	4603      	mov	r3, r0
}
 8000eee:	4618      	mov	r0, r3
 8000ef0:	3708      	adds	r7, #8
 8000ef2:	46bd      	mov	sp, r7
 8000ef4:	bd80      	pop	{r7, pc}

08000ef6 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8000ef6:	b580      	push	{r7, lr}
 8000ef8:	b084      	sub	sp, #16
 8000efa:	af00      	add	r7, sp, #0
 8000efc:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8000efe:	687b      	ldr	r3, [r7, #4]
 8000f00:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8000f02:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8000f04:	f7ff feb6 	bl	8000c74 <HAL_GetTick>
 8000f08:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000f0a:	687b      	ldr	r3, [r7, #4]
 8000f0c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000f10:	b2db      	uxtb	r3, r3
 8000f12:	2b02      	cmp	r3, #2
 8000f14:	d008      	beq.n	8000f28 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000f16:	687b      	ldr	r3, [r7, #4]
 8000f18:	2280      	movs	r2, #128	@ 0x80
 8000f1a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000f1c:	687b      	ldr	r3, [r7, #4]
 8000f1e:	2200      	movs	r2, #0
 8000f20:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8000f24:	2301      	movs	r3, #1
 8000f26:	e052      	b.n	8000fce <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8000f28:	687b      	ldr	r3, [r7, #4]
 8000f2a:	681b      	ldr	r3, [r3, #0]
 8000f2c:	681a      	ldr	r2, [r3, #0]
 8000f2e:	687b      	ldr	r3, [r7, #4]
 8000f30:	681b      	ldr	r3, [r3, #0]
 8000f32:	f022 0216 	bic.w	r2, r2, #22
 8000f36:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8000f38:	687b      	ldr	r3, [r7, #4]
 8000f3a:	681b      	ldr	r3, [r3, #0]
 8000f3c:	695a      	ldr	r2, [r3, #20]
 8000f3e:	687b      	ldr	r3, [r7, #4]
 8000f40:	681b      	ldr	r3, [r3, #0]
 8000f42:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8000f46:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8000f48:	687b      	ldr	r3, [r7, #4]
 8000f4a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8000f4c:	2b00      	cmp	r3, #0
 8000f4e:	d103      	bne.n	8000f58 <HAL_DMA_Abort+0x62>
 8000f50:	687b      	ldr	r3, [r7, #4]
 8000f52:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8000f54:	2b00      	cmp	r3, #0
 8000f56:	d007      	beq.n	8000f68 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8000f58:	687b      	ldr	r3, [r7, #4]
 8000f5a:	681b      	ldr	r3, [r3, #0]
 8000f5c:	681a      	ldr	r2, [r3, #0]
 8000f5e:	687b      	ldr	r3, [r7, #4]
 8000f60:	681b      	ldr	r3, [r3, #0]
 8000f62:	f022 0208 	bic.w	r2, r2, #8
 8000f66:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000f68:	687b      	ldr	r3, [r7, #4]
 8000f6a:	681b      	ldr	r3, [r3, #0]
 8000f6c:	681a      	ldr	r2, [r3, #0]
 8000f6e:	687b      	ldr	r3, [r7, #4]
 8000f70:	681b      	ldr	r3, [r3, #0]
 8000f72:	f022 0201 	bic.w	r2, r2, #1
 8000f76:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000f78:	e013      	b.n	8000fa2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8000f7a:	f7ff fe7b 	bl	8000c74 <HAL_GetTick>
 8000f7e:	4602      	mov	r2, r0
 8000f80:	68bb      	ldr	r3, [r7, #8]
 8000f82:	1ad3      	subs	r3, r2, r3
 8000f84:	2b05      	cmp	r3, #5
 8000f86:	d90c      	bls.n	8000fa2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8000f88:	687b      	ldr	r3, [r7, #4]
 8000f8a:	2220      	movs	r2, #32
 8000f8c:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8000f8e:	687b      	ldr	r3, [r7, #4]
 8000f90:	2203      	movs	r2, #3
 8000f92:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8000f96:	687b      	ldr	r3, [r7, #4]
 8000f98:	2200      	movs	r2, #0
 8000f9a:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8000f9e:	2303      	movs	r3, #3
 8000fa0:	e015      	b.n	8000fce <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8000fa2:	687b      	ldr	r3, [r7, #4]
 8000fa4:	681b      	ldr	r3, [r3, #0]
 8000fa6:	681b      	ldr	r3, [r3, #0]
 8000fa8:	f003 0301 	and.w	r3, r3, #1
 8000fac:	2b00      	cmp	r3, #0
 8000fae:	d1e4      	bne.n	8000f7a <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8000fb0:	687b      	ldr	r3, [r7, #4]
 8000fb2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8000fb4:	223f      	movs	r2, #63	@ 0x3f
 8000fb6:	409a      	lsls	r2, r3
 8000fb8:	68fb      	ldr	r3, [r7, #12]
 8000fba:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8000fbc:	687b      	ldr	r3, [r7, #4]
 8000fbe:	2201      	movs	r2, #1
 8000fc0:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8000fc4:	687b      	ldr	r3, [r7, #4]
 8000fc6:	2200      	movs	r2, #0
 8000fc8:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8000fcc:	2300      	movs	r3, #0
}
 8000fce:	4618      	mov	r0, r3
 8000fd0:	3710      	adds	r7, #16
 8000fd2:	46bd      	mov	sp, r7
 8000fd4:	bd80      	pop	{r7, pc}

08000fd6 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8000fd6:	b480      	push	{r7}
 8000fd8:	b083      	sub	sp, #12
 8000fda:	af00      	add	r7, sp, #0
 8000fdc:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8000fde:	687b      	ldr	r3, [r7, #4]
 8000fe0:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8000fe4:	b2db      	uxtb	r3, r3
 8000fe6:	2b02      	cmp	r3, #2
 8000fe8:	d004      	beq.n	8000ff4 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8000fea:	687b      	ldr	r3, [r7, #4]
 8000fec:	2280      	movs	r2, #128	@ 0x80
 8000fee:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8000ff0:	2301      	movs	r3, #1
 8000ff2:	e00c      	b.n	800100e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8000ff4:	687b      	ldr	r3, [r7, #4]
 8000ff6:	2205      	movs	r2, #5
 8000ff8:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8000ffc:	687b      	ldr	r3, [r7, #4]
 8000ffe:	681b      	ldr	r3, [r3, #0]
 8001000:	681a      	ldr	r2, [r3, #0]
 8001002:	687b      	ldr	r3, [r7, #4]
 8001004:	681b      	ldr	r3, [r3, #0]
 8001006:	f022 0201 	bic.w	r2, r2, #1
 800100a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800100c:	2300      	movs	r3, #0
}
 800100e:	4618      	mov	r0, r3
 8001010:	370c      	adds	r7, #12
 8001012:	46bd      	mov	sp, r7
 8001014:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001018:	4770      	bx	lr
	...

0800101c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800101c:	b480      	push	{r7}
 800101e:	b089      	sub	sp, #36	@ 0x24
 8001020:	af00      	add	r7, sp, #0
 8001022:	6078      	str	r0, [r7, #4]
 8001024:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8001026:	2300      	movs	r3, #0
 8001028:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800102a:	2300      	movs	r3, #0
 800102c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800102e:	2300      	movs	r3, #0
 8001030:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8001032:	2300      	movs	r3, #0
 8001034:	61fb      	str	r3, [r7, #28]
 8001036:	e159      	b.n	80012ec <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8001038:	2201      	movs	r2, #1
 800103a:	69fb      	ldr	r3, [r7, #28]
 800103c:	fa02 f303 	lsl.w	r3, r2, r3
 8001040:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8001042:	683b      	ldr	r3, [r7, #0]
 8001044:	681b      	ldr	r3, [r3, #0]
 8001046:	697a      	ldr	r2, [r7, #20]
 8001048:	4013      	ands	r3, r2
 800104a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800104c:	693a      	ldr	r2, [r7, #16]
 800104e:	697b      	ldr	r3, [r7, #20]
 8001050:	429a      	cmp	r2, r3
 8001052:	f040 8148 	bne.w	80012e6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8001056:	683b      	ldr	r3, [r7, #0]
 8001058:	685b      	ldr	r3, [r3, #4]
 800105a:	f003 0303 	and.w	r3, r3, #3
 800105e:	2b01      	cmp	r3, #1
 8001060:	d005      	beq.n	800106e <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8001062:	683b      	ldr	r3, [r7, #0]
 8001064:	685b      	ldr	r3, [r3, #4]
 8001066:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800106a:	2b02      	cmp	r3, #2
 800106c:	d130      	bne.n	80010d0 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 800106e:	687b      	ldr	r3, [r7, #4]
 8001070:	689b      	ldr	r3, [r3, #8]
 8001072:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8001074:	69fb      	ldr	r3, [r7, #28]
 8001076:	005b      	lsls	r3, r3, #1
 8001078:	2203      	movs	r2, #3
 800107a:	fa02 f303 	lsl.w	r3, r2, r3
 800107e:	43db      	mvns	r3, r3
 8001080:	69ba      	ldr	r2, [r7, #24]
 8001082:	4013      	ands	r3, r2
 8001084:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8001086:	683b      	ldr	r3, [r7, #0]
 8001088:	68da      	ldr	r2, [r3, #12]
 800108a:	69fb      	ldr	r3, [r7, #28]
 800108c:	005b      	lsls	r3, r3, #1
 800108e:	fa02 f303 	lsl.w	r3, r2, r3
 8001092:	69ba      	ldr	r2, [r7, #24]
 8001094:	4313      	orrs	r3, r2
 8001096:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8001098:	687b      	ldr	r3, [r7, #4]
 800109a:	69ba      	ldr	r2, [r7, #24]
 800109c:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800109e:	687b      	ldr	r3, [r7, #4]
 80010a0:	685b      	ldr	r3, [r3, #4]
 80010a2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80010a4:	2201      	movs	r2, #1
 80010a6:	69fb      	ldr	r3, [r7, #28]
 80010a8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ac:	43db      	mvns	r3, r3
 80010ae:	69ba      	ldr	r2, [r7, #24]
 80010b0:	4013      	ands	r3, r2
 80010b2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 80010b4:	683b      	ldr	r3, [r7, #0]
 80010b6:	685b      	ldr	r3, [r3, #4]
 80010b8:	091b      	lsrs	r3, r3, #4
 80010ba:	f003 0201 	and.w	r2, r3, #1
 80010be:	69fb      	ldr	r3, [r7, #28]
 80010c0:	fa02 f303 	lsl.w	r3, r2, r3
 80010c4:	69ba      	ldr	r2, [r7, #24]
 80010c6:	4313      	orrs	r3, r2
 80010c8:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80010ca:	687b      	ldr	r3, [r7, #4]
 80010cc:	69ba      	ldr	r2, [r7, #24]
 80010ce:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80010d0:	683b      	ldr	r3, [r7, #0]
 80010d2:	685b      	ldr	r3, [r3, #4]
 80010d4:	f003 0303 	and.w	r3, r3, #3
 80010d8:	2b03      	cmp	r3, #3
 80010da:	d017      	beq.n	800110c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80010dc:	687b      	ldr	r3, [r7, #4]
 80010de:	68db      	ldr	r3, [r3, #12]
 80010e0:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80010e2:	69fb      	ldr	r3, [r7, #28]
 80010e4:	005b      	lsls	r3, r3, #1
 80010e6:	2203      	movs	r2, #3
 80010e8:	fa02 f303 	lsl.w	r3, r2, r3
 80010ec:	43db      	mvns	r3, r3
 80010ee:	69ba      	ldr	r2, [r7, #24]
 80010f0:	4013      	ands	r3, r2
 80010f2:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80010f4:	683b      	ldr	r3, [r7, #0]
 80010f6:	689a      	ldr	r2, [r3, #8]
 80010f8:	69fb      	ldr	r3, [r7, #28]
 80010fa:	005b      	lsls	r3, r3, #1
 80010fc:	fa02 f303 	lsl.w	r3, r2, r3
 8001100:	69ba      	ldr	r2, [r7, #24]
 8001102:	4313      	orrs	r3, r2
 8001104:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8001106:	687b      	ldr	r3, [r7, #4]
 8001108:	69ba      	ldr	r2, [r7, #24]
 800110a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800110c:	683b      	ldr	r3, [r7, #0]
 800110e:	685b      	ldr	r3, [r3, #4]
 8001110:	f003 0303 	and.w	r3, r3, #3
 8001114:	2b02      	cmp	r3, #2
 8001116:	d123      	bne.n	8001160 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8001118:	69fb      	ldr	r3, [r7, #28]
 800111a:	08da      	lsrs	r2, r3, #3
 800111c:	687b      	ldr	r3, [r7, #4]
 800111e:	3208      	adds	r2, #8
 8001120:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8001124:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8001126:	69fb      	ldr	r3, [r7, #28]
 8001128:	f003 0307 	and.w	r3, r3, #7
 800112c:	009b      	lsls	r3, r3, #2
 800112e:	220f      	movs	r2, #15
 8001130:	fa02 f303 	lsl.w	r3, r2, r3
 8001134:	43db      	mvns	r3, r3
 8001136:	69ba      	ldr	r2, [r7, #24]
 8001138:	4013      	ands	r3, r2
 800113a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800113c:	683b      	ldr	r3, [r7, #0]
 800113e:	691a      	ldr	r2, [r3, #16]
 8001140:	69fb      	ldr	r3, [r7, #28]
 8001142:	f003 0307 	and.w	r3, r3, #7
 8001146:	009b      	lsls	r3, r3, #2
 8001148:	fa02 f303 	lsl.w	r3, r2, r3
 800114c:	69ba      	ldr	r2, [r7, #24]
 800114e:	4313      	orrs	r3, r2
 8001150:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8001152:	69fb      	ldr	r3, [r7, #28]
 8001154:	08da      	lsrs	r2, r3, #3
 8001156:	687b      	ldr	r3, [r7, #4]
 8001158:	3208      	adds	r2, #8
 800115a:	69b9      	ldr	r1, [r7, #24]
 800115c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8001160:	687b      	ldr	r3, [r7, #4]
 8001162:	681b      	ldr	r3, [r3, #0]
 8001164:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8001166:	69fb      	ldr	r3, [r7, #28]
 8001168:	005b      	lsls	r3, r3, #1
 800116a:	2203      	movs	r2, #3
 800116c:	fa02 f303 	lsl.w	r3, r2, r3
 8001170:	43db      	mvns	r3, r3
 8001172:	69ba      	ldr	r2, [r7, #24]
 8001174:	4013      	ands	r3, r2
 8001176:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8001178:	683b      	ldr	r3, [r7, #0]
 800117a:	685b      	ldr	r3, [r3, #4]
 800117c:	f003 0203 	and.w	r2, r3, #3
 8001180:	69fb      	ldr	r3, [r7, #28]
 8001182:	005b      	lsls	r3, r3, #1
 8001184:	fa02 f303 	lsl.w	r3, r2, r3
 8001188:	69ba      	ldr	r2, [r7, #24]
 800118a:	4313      	orrs	r3, r2
 800118c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 800118e:	687b      	ldr	r3, [r7, #4]
 8001190:	69ba      	ldr	r2, [r7, #24]
 8001192:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8001194:	683b      	ldr	r3, [r7, #0]
 8001196:	685b      	ldr	r3, [r3, #4]
 8001198:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 800119c:	2b00      	cmp	r3, #0
 800119e:	f000 80a2 	beq.w	80012e6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80011a2:	2300      	movs	r3, #0
 80011a4:	60fb      	str	r3, [r7, #12]
 80011a6:	4b57      	ldr	r3, [pc, #348]	@ (8001304 <HAL_GPIO_Init+0x2e8>)
 80011a8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011aa:	4a56      	ldr	r2, [pc, #344]	@ (8001304 <HAL_GPIO_Init+0x2e8>)
 80011ac:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80011b0:	6453      	str	r3, [r2, #68]	@ 0x44
 80011b2:	4b54      	ldr	r3, [pc, #336]	@ (8001304 <HAL_GPIO_Init+0x2e8>)
 80011b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80011b6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80011ba:	60fb      	str	r3, [r7, #12]
 80011bc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80011be:	4a52      	ldr	r2, [pc, #328]	@ (8001308 <HAL_GPIO_Init+0x2ec>)
 80011c0:	69fb      	ldr	r3, [r7, #28]
 80011c2:	089b      	lsrs	r3, r3, #2
 80011c4:	3302      	adds	r3, #2
 80011c6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80011ca:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80011cc:	69fb      	ldr	r3, [r7, #28]
 80011ce:	f003 0303 	and.w	r3, r3, #3
 80011d2:	009b      	lsls	r3, r3, #2
 80011d4:	220f      	movs	r2, #15
 80011d6:	fa02 f303 	lsl.w	r3, r2, r3
 80011da:	43db      	mvns	r3, r3
 80011dc:	69ba      	ldr	r2, [r7, #24]
 80011de:	4013      	ands	r3, r2
 80011e0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80011e2:	687b      	ldr	r3, [r7, #4]
 80011e4:	4a49      	ldr	r2, [pc, #292]	@ (800130c <HAL_GPIO_Init+0x2f0>)
 80011e6:	4293      	cmp	r3, r2
 80011e8:	d019      	beq.n	800121e <HAL_GPIO_Init+0x202>
 80011ea:	687b      	ldr	r3, [r7, #4]
 80011ec:	4a48      	ldr	r2, [pc, #288]	@ (8001310 <HAL_GPIO_Init+0x2f4>)
 80011ee:	4293      	cmp	r3, r2
 80011f0:	d013      	beq.n	800121a <HAL_GPIO_Init+0x1fe>
 80011f2:	687b      	ldr	r3, [r7, #4]
 80011f4:	4a47      	ldr	r2, [pc, #284]	@ (8001314 <HAL_GPIO_Init+0x2f8>)
 80011f6:	4293      	cmp	r3, r2
 80011f8:	d00d      	beq.n	8001216 <HAL_GPIO_Init+0x1fa>
 80011fa:	687b      	ldr	r3, [r7, #4]
 80011fc:	4a46      	ldr	r2, [pc, #280]	@ (8001318 <HAL_GPIO_Init+0x2fc>)
 80011fe:	4293      	cmp	r3, r2
 8001200:	d007      	beq.n	8001212 <HAL_GPIO_Init+0x1f6>
 8001202:	687b      	ldr	r3, [r7, #4]
 8001204:	4a45      	ldr	r2, [pc, #276]	@ (800131c <HAL_GPIO_Init+0x300>)
 8001206:	4293      	cmp	r3, r2
 8001208:	d101      	bne.n	800120e <HAL_GPIO_Init+0x1f2>
 800120a:	2304      	movs	r3, #4
 800120c:	e008      	b.n	8001220 <HAL_GPIO_Init+0x204>
 800120e:	2307      	movs	r3, #7
 8001210:	e006      	b.n	8001220 <HAL_GPIO_Init+0x204>
 8001212:	2303      	movs	r3, #3
 8001214:	e004      	b.n	8001220 <HAL_GPIO_Init+0x204>
 8001216:	2302      	movs	r3, #2
 8001218:	e002      	b.n	8001220 <HAL_GPIO_Init+0x204>
 800121a:	2301      	movs	r3, #1
 800121c:	e000      	b.n	8001220 <HAL_GPIO_Init+0x204>
 800121e:	2300      	movs	r3, #0
 8001220:	69fa      	ldr	r2, [r7, #28]
 8001222:	f002 0203 	and.w	r2, r2, #3
 8001226:	0092      	lsls	r2, r2, #2
 8001228:	4093      	lsls	r3, r2
 800122a:	69ba      	ldr	r2, [r7, #24]
 800122c:	4313      	orrs	r3, r2
 800122e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8001230:	4935      	ldr	r1, [pc, #212]	@ (8001308 <HAL_GPIO_Init+0x2ec>)
 8001232:	69fb      	ldr	r3, [r7, #28]
 8001234:	089b      	lsrs	r3, r3, #2
 8001236:	3302      	adds	r3, #2
 8001238:	69ba      	ldr	r2, [r7, #24]
 800123a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800123e:	4b38      	ldr	r3, [pc, #224]	@ (8001320 <HAL_GPIO_Init+0x304>)
 8001240:	689b      	ldr	r3, [r3, #8]
 8001242:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001244:	693b      	ldr	r3, [r7, #16]
 8001246:	43db      	mvns	r3, r3
 8001248:	69ba      	ldr	r2, [r7, #24]
 800124a:	4013      	ands	r3, r2
 800124c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800124e:	683b      	ldr	r3, [r7, #0]
 8001250:	685b      	ldr	r3, [r3, #4]
 8001252:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8001256:	2b00      	cmp	r3, #0
 8001258:	d003      	beq.n	8001262 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800125a:	69ba      	ldr	r2, [r7, #24]
 800125c:	693b      	ldr	r3, [r7, #16]
 800125e:	4313      	orrs	r3, r2
 8001260:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8001262:	4a2f      	ldr	r2, [pc, #188]	@ (8001320 <HAL_GPIO_Init+0x304>)
 8001264:	69bb      	ldr	r3, [r7, #24]
 8001266:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8001268:	4b2d      	ldr	r3, [pc, #180]	@ (8001320 <HAL_GPIO_Init+0x304>)
 800126a:	68db      	ldr	r3, [r3, #12]
 800126c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800126e:	693b      	ldr	r3, [r7, #16]
 8001270:	43db      	mvns	r3, r3
 8001272:	69ba      	ldr	r2, [r7, #24]
 8001274:	4013      	ands	r3, r2
 8001276:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8001278:	683b      	ldr	r3, [r7, #0]
 800127a:	685b      	ldr	r3, [r3, #4]
 800127c:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8001280:	2b00      	cmp	r3, #0
 8001282:	d003      	beq.n	800128c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8001284:	69ba      	ldr	r2, [r7, #24]
 8001286:	693b      	ldr	r3, [r7, #16]
 8001288:	4313      	orrs	r3, r2
 800128a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 800128c:	4a24      	ldr	r2, [pc, #144]	@ (8001320 <HAL_GPIO_Init+0x304>)
 800128e:	69bb      	ldr	r3, [r7, #24]
 8001290:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8001292:	4b23      	ldr	r3, [pc, #140]	@ (8001320 <HAL_GPIO_Init+0x304>)
 8001294:	685b      	ldr	r3, [r3, #4]
 8001296:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8001298:	693b      	ldr	r3, [r7, #16]
 800129a:	43db      	mvns	r3, r3
 800129c:	69ba      	ldr	r2, [r7, #24]
 800129e:	4013      	ands	r3, r2
 80012a0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 80012a2:	683b      	ldr	r3, [r7, #0]
 80012a4:	685b      	ldr	r3, [r3, #4]
 80012a6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80012aa:	2b00      	cmp	r3, #0
 80012ac:	d003      	beq.n	80012b6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80012ae:	69ba      	ldr	r2, [r7, #24]
 80012b0:	693b      	ldr	r3, [r7, #16]
 80012b2:	4313      	orrs	r3, r2
 80012b4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80012b6:	4a1a      	ldr	r2, [pc, #104]	@ (8001320 <HAL_GPIO_Init+0x304>)
 80012b8:	69bb      	ldr	r3, [r7, #24]
 80012ba:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80012bc:	4b18      	ldr	r3, [pc, #96]	@ (8001320 <HAL_GPIO_Init+0x304>)
 80012be:	681b      	ldr	r3, [r3, #0]
 80012c0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80012c2:	693b      	ldr	r3, [r7, #16]
 80012c4:	43db      	mvns	r3, r3
 80012c6:	69ba      	ldr	r2, [r7, #24]
 80012c8:	4013      	ands	r3, r2
 80012ca:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 80012cc:	683b      	ldr	r3, [r7, #0]
 80012ce:	685b      	ldr	r3, [r3, #4]
 80012d0:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 80012d4:	2b00      	cmp	r3, #0
 80012d6:	d003      	beq.n	80012e0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80012d8:	69ba      	ldr	r2, [r7, #24]
 80012da:	693b      	ldr	r3, [r7, #16]
 80012dc:	4313      	orrs	r3, r2
 80012de:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80012e0:	4a0f      	ldr	r2, [pc, #60]	@ (8001320 <HAL_GPIO_Init+0x304>)
 80012e2:	69bb      	ldr	r3, [r7, #24]
 80012e4:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80012e6:	69fb      	ldr	r3, [r7, #28]
 80012e8:	3301      	adds	r3, #1
 80012ea:	61fb      	str	r3, [r7, #28]
 80012ec:	69fb      	ldr	r3, [r7, #28]
 80012ee:	2b0f      	cmp	r3, #15
 80012f0:	f67f aea2 	bls.w	8001038 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80012f4:	bf00      	nop
 80012f6:	bf00      	nop
 80012f8:	3724      	adds	r7, #36	@ 0x24
 80012fa:	46bd      	mov	sp, r7
 80012fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001300:	4770      	bx	lr
 8001302:	bf00      	nop
 8001304:	40023800 	.word	0x40023800
 8001308:	40013800 	.word	0x40013800
 800130c:	40020000 	.word	0x40020000
 8001310:	40020400 	.word	0x40020400
 8001314:	40020800 	.word	0x40020800
 8001318:	40020c00 	.word	0x40020c00
 800131c:	40021000 	.word	0x40021000
 8001320:	40013c00 	.word	0x40013c00

08001324 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8001324:	b480      	push	{r7}
 8001326:	b083      	sub	sp, #12
 8001328:	af00      	add	r7, sp, #0
 800132a:	6078      	str	r0, [r7, #4]
 800132c:	460b      	mov	r3, r1
 800132e:	807b      	strh	r3, [r7, #2]
 8001330:	4613      	mov	r3, r2
 8001332:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8001334:	787b      	ldrb	r3, [r7, #1]
 8001336:	2b00      	cmp	r3, #0
 8001338:	d003      	beq.n	8001342 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800133a:	887a      	ldrh	r2, [r7, #2]
 800133c:	687b      	ldr	r3, [r7, #4]
 800133e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8001340:	e003      	b.n	800134a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8001342:	887b      	ldrh	r3, [r7, #2]
 8001344:	041a      	lsls	r2, r3, #16
 8001346:	687b      	ldr	r3, [r7, #4]
 8001348:	619a      	str	r2, [r3, #24]
}
 800134a:	bf00      	nop
 800134c:	370c      	adds	r7, #12
 800134e:	46bd      	mov	sp, r7
 8001350:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001354:	4770      	bx	lr
	...

08001358 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8001358:	b580      	push	{r7, lr}
 800135a:	b086      	sub	sp, #24
 800135c:	af00      	add	r7, sp, #0
 800135e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 8001360:	687b      	ldr	r3, [r7, #4]
 8001362:	2b00      	cmp	r3, #0
 8001364:	d101      	bne.n	800136a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8001366:	2301      	movs	r3, #1
 8001368:	e267      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800136a:	687b      	ldr	r3, [r7, #4]
 800136c:	681b      	ldr	r3, [r3, #0]
 800136e:	f003 0301 	and.w	r3, r3, #1
 8001372:	2b00      	cmp	r3, #0
 8001374:	d075      	beq.n	8001462 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 8001376:	4b88      	ldr	r3, [pc, #544]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 8001378:	689b      	ldr	r3, [r3, #8]
 800137a:	f003 030c 	and.w	r3, r3, #12
 800137e:	2b04      	cmp	r3, #4
 8001380:	d00c      	beq.n	800139c <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8001382:	4b85      	ldr	r3, [pc, #532]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 8001384:	689b      	ldr	r3, [r3, #8]
 8001386:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 800138a:	2b08      	cmp	r3, #8
 800138c:	d112      	bne.n	80013b4 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800138e:	4b82      	ldr	r3, [pc, #520]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 8001390:	685b      	ldr	r3, [r3, #4]
 8001392:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001396:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 800139a:	d10b      	bne.n	80013b4 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800139c:	4b7e      	ldr	r3, [pc, #504]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 800139e:	681b      	ldr	r3, [r3, #0]
 80013a0:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80013a4:	2b00      	cmp	r3, #0
 80013a6:	d05b      	beq.n	8001460 <HAL_RCC_OscConfig+0x108>
 80013a8:	687b      	ldr	r3, [r7, #4]
 80013aa:	685b      	ldr	r3, [r3, #4]
 80013ac:	2b00      	cmp	r3, #0
 80013ae:	d157      	bne.n	8001460 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80013b0:	2301      	movs	r3, #1
 80013b2:	e242      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80013b4:	687b      	ldr	r3, [r7, #4]
 80013b6:	685b      	ldr	r3, [r3, #4]
 80013b8:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 80013bc:	d106      	bne.n	80013cc <HAL_RCC_OscConfig+0x74>
 80013be:	4b76      	ldr	r3, [pc, #472]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80013c0:	681b      	ldr	r3, [r3, #0]
 80013c2:	4a75      	ldr	r2, [pc, #468]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80013c4:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013c8:	6013      	str	r3, [r2, #0]
 80013ca:	e01d      	b.n	8001408 <HAL_RCC_OscConfig+0xb0>
 80013cc:	687b      	ldr	r3, [r7, #4]
 80013ce:	685b      	ldr	r3, [r3, #4]
 80013d0:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 80013d4:	d10c      	bne.n	80013f0 <HAL_RCC_OscConfig+0x98>
 80013d6:	4b70      	ldr	r3, [pc, #448]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80013d8:	681b      	ldr	r3, [r3, #0]
 80013da:	4a6f      	ldr	r2, [pc, #444]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80013dc:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 80013e0:	6013      	str	r3, [r2, #0]
 80013e2:	4b6d      	ldr	r3, [pc, #436]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80013e4:	681b      	ldr	r3, [r3, #0]
 80013e6:	4a6c      	ldr	r2, [pc, #432]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80013e8:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 80013ec:	6013      	str	r3, [r2, #0]
 80013ee:	e00b      	b.n	8001408 <HAL_RCC_OscConfig+0xb0>
 80013f0:	4b69      	ldr	r3, [pc, #420]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80013f2:	681b      	ldr	r3, [r3, #0]
 80013f4:	4a68      	ldr	r2, [pc, #416]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80013f6:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 80013fa:	6013      	str	r3, [r2, #0]
 80013fc:	4b66      	ldr	r3, [pc, #408]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80013fe:	681b      	ldr	r3, [r3, #0]
 8001400:	4a65      	ldr	r2, [pc, #404]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 8001402:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8001406:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8001408:	687b      	ldr	r3, [r7, #4]
 800140a:	685b      	ldr	r3, [r3, #4]
 800140c:	2b00      	cmp	r3, #0
 800140e:	d013      	beq.n	8001438 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001410:	f7ff fc30 	bl	8000c74 <HAL_GetTick>
 8001414:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8001416:	e008      	b.n	800142a <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001418:	f7ff fc2c 	bl	8000c74 <HAL_GetTick>
 800141c:	4602      	mov	r2, r0
 800141e:	693b      	ldr	r3, [r7, #16]
 8001420:	1ad3      	subs	r3, r2, r3
 8001422:	2b64      	cmp	r3, #100	@ 0x64
 8001424:	d901      	bls.n	800142a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8001426:	2303      	movs	r3, #3
 8001428:	e207      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800142a:	4b5b      	ldr	r3, [pc, #364]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 800142c:	681b      	ldr	r3, [r3, #0]
 800142e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8001432:	2b00      	cmp	r3, #0
 8001434:	d0f0      	beq.n	8001418 <HAL_RCC_OscConfig+0xc0>
 8001436:	e014      	b.n	8001462 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001438:	f7ff fc1c 	bl	8000c74 <HAL_GetTick>
 800143c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800143e:	e008      	b.n	8001452 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8001440:	f7ff fc18 	bl	8000c74 <HAL_GetTick>
 8001444:	4602      	mov	r2, r0
 8001446:	693b      	ldr	r3, [r7, #16]
 8001448:	1ad3      	subs	r3, r2, r3
 800144a:	2b64      	cmp	r3, #100	@ 0x64
 800144c:	d901      	bls.n	8001452 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800144e:	2303      	movs	r3, #3
 8001450:	e1f3      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8001452:	4b51      	ldr	r3, [pc, #324]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 8001454:	681b      	ldr	r3, [r3, #0]
 8001456:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 800145a:	2b00      	cmp	r3, #0
 800145c:	d1f0      	bne.n	8001440 <HAL_RCC_OscConfig+0xe8>
 800145e:	e000      	b.n	8001462 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8001460:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8001462:	687b      	ldr	r3, [r7, #4]
 8001464:	681b      	ldr	r3, [r3, #0]
 8001466:	f003 0302 	and.w	r3, r3, #2
 800146a:	2b00      	cmp	r3, #0
 800146c:	d063      	beq.n	8001536 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 800146e:	4b4a      	ldr	r3, [pc, #296]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 8001470:	689b      	ldr	r3, [r3, #8]
 8001472:	f003 030c 	and.w	r3, r3, #12
 8001476:	2b00      	cmp	r3, #0
 8001478:	d00b      	beq.n	8001492 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800147a:	4b47      	ldr	r3, [pc, #284]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 800147c:	689b      	ldr	r3, [r3, #8]
 800147e:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8001482:	2b08      	cmp	r3, #8
 8001484:	d11c      	bne.n	80014c0 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8001486:	4b44      	ldr	r3, [pc, #272]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 8001488:	685b      	ldr	r3, [r3, #4]
 800148a:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 800148e:	2b00      	cmp	r3, #0
 8001490:	d116      	bne.n	80014c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8001492:	4b41      	ldr	r3, [pc, #260]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 8001494:	681b      	ldr	r3, [r3, #0]
 8001496:	f003 0302 	and.w	r3, r3, #2
 800149a:	2b00      	cmp	r3, #0
 800149c:	d005      	beq.n	80014aa <HAL_RCC_OscConfig+0x152>
 800149e:	687b      	ldr	r3, [r7, #4]
 80014a0:	68db      	ldr	r3, [r3, #12]
 80014a2:	2b01      	cmp	r3, #1
 80014a4:	d001      	beq.n	80014aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80014a6:	2301      	movs	r3, #1
 80014a8:	e1c7      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014aa:	4b3b      	ldr	r3, [pc, #236]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80014ac:	681b      	ldr	r3, [r3, #0]
 80014ae:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014b2:	687b      	ldr	r3, [r7, #4]
 80014b4:	691b      	ldr	r3, [r3, #16]
 80014b6:	00db      	lsls	r3, r3, #3
 80014b8:	4937      	ldr	r1, [pc, #220]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80014ba:	4313      	orrs	r3, r2
 80014bc:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80014be:	e03a      	b.n	8001536 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 80014c0:	687b      	ldr	r3, [r7, #4]
 80014c2:	68db      	ldr	r3, [r3, #12]
 80014c4:	2b00      	cmp	r3, #0
 80014c6:	d020      	beq.n	800150a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80014c8:	4b34      	ldr	r3, [pc, #208]	@ (800159c <HAL_RCC_OscConfig+0x244>)
 80014ca:	2201      	movs	r2, #1
 80014cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80014ce:	f7ff fbd1 	bl	8000c74 <HAL_GetTick>
 80014d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014d4:	e008      	b.n	80014e8 <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 80014d6:	f7ff fbcd 	bl	8000c74 <HAL_GetTick>
 80014da:	4602      	mov	r2, r0
 80014dc:	693b      	ldr	r3, [r7, #16]
 80014de:	1ad3      	subs	r3, r2, r3
 80014e0:	2b02      	cmp	r3, #2
 80014e2:	d901      	bls.n	80014e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80014e4:	2303      	movs	r3, #3
 80014e6:	e1a8      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80014e8:	4b2b      	ldr	r3, [pc, #172]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80014ea:	681b      	ldr	r3, [r3, #0]
 80014ec:	f003 0302 	and.w	r3, r3, #2
 80014f0:	2b00      	cmp	r3, #0
 80014f2:	d0f0      	beq.n	80014d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80014f4:	4b28      	ldr	r3, [pc, #160]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 80014f6:	681b      	ldr	r3, [r3, #0]
 80014f8:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 80014fc:	687b      	ldr	r3, [r7, #4]
 80014fe:	691b      	ldr	r3, [r3, #16]
 8001500:	00db      	lsls	r3, r3, #3
 8001502:	4925      	ldr	r1, [pc, #148]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 8001504:	4313      	orrs	r3, r2
 8001506:	600b      	str	r3, [r1, #0]
 8001508:	e015      	b.n	8001536 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800150a:	4b24      	ldr	r3, [pc, #144]	@ (800159c <HAL_RCC_OscConfig+0x244>)
 800150c:	2200      	movs	r2, #0
 800150e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8001510:	f7ff fbb0 	bl	8000c74 <HAL_GetTick>
 8001514:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8001516:	e008      	b.n	800152a <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8001518:	f7ff fbac 	bl	8000c74 <HAL_GetTick>
 800151c:	4602      	mov	r2, r0
 800151e:	693b      	ldr	r3, [r7, #16]
 8001520:	1ad3      	subs	r3, r2, r3
 8001522:	2b02      	cmp	r3, #2
 8001524:	d901      	bls.n	800152a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8001526:	2303      	movs	r3, #3
 8001528:	e187      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800152a:	4b1b      	ldr	r3, [pc, #108]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 800152c:	681b      	ldr	r3, [r3, #0]
 800152e:	f003 0302 	and.w	r3, r3, #2
 8001532:	2b00      	cmp	r3, #0
 8001534:	d1f0      	bne.n	8001518 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8001536:	687b      	ldr	r3, [r7, #4]
 8001538:	681b      	ldr	r3, [r3, #0]
 800153a:	f003 0308 	and.w	r3, r3, #8
 800153e:	2b00      	cmp	r3, #0
 8001540:	d036      	beq.n	80015b0 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8001542:	687b      	ldr	r3, [r7, #4]
 8001544:	695b      	ldr	r3, [r3, #20]
 8001546:	2b00      	cmp	r3, #0
 8001548:	d016      	beq.n	8001578 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800154a:	4b15      	ldr	r3, [pc, #84]	@ (80015a0 <HAL_RCC_OscConfig+0x248>)
 800154c:	2201      	movs	r2, #1
 800154e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001550:	f7ff fb90 	bl	8000c74 <HAL_GetTick>
 8001554:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8001556:	e008      	b.n	800156a <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001558:	f7ff fb8c 	bl	8000c74 <HAL_GetTick>
 800155c:	4602      	mov	r2, r0
 800155e:	693b      	ldr	r3, [r7, #16]
 8001560:	1ad3      	subs	r3, r2, r3
 8001562:	2b02      	cmp	r3, #2
 8001564:	d901      	bls.n	800156a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8001566:	2303      	movs	r3, #3
 8001568:	e167      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800156a:	4b0b      	ldr	r3, [pc, #44]	@ (8001598 <HAL_RCC_OscConfig+0x240>)
 800156c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 800156e:	f003 0302 	and.w	r3, r3, #2
 8001572:	2b00      	cmp	r3, #0
 8001574:	d0f0      	beq.n	8001558 <HAL_RCC_OscConfig+0x200>
 8001576:	e01b      	b.n	80015b0 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8001578:	4b09      	ldr	r3, [pc, #36]	@ (80015a0 <HAL_RCC_OscConfig+0x248>)
 800157a:	2200      	movs	r2, #0
 800157c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800157e:	f7ff fb79 	bl	8000c74 <HAL_GetTick>
 8001582:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8001584:	e00e      	b.n	80015a4 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8001586:	f7ff fb75 	bl	8000c74 <HAL_GetTick>
 800158a:	4602      	mov	r2, r0
 800158c:	693b      	ldr	r3, [r7, #16]
 800158e:	1ad3      	subs	r3, r2, r3
 8001590:	2b02      	cmp	r3, #2
 8001592:	d907      	bls.n	80015a4 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8001594:	2303      	movs	r3, #3
 8001596:	e150      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
 8001598:	40023800 	.word	0x40023800
 800159c:	42470000 	.word	0x42470000
 80015a0:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80015a4:	4b88      	ldr	r3, [pc, #544]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015a6:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80015a8:	f003 0302 	and.w	r3, r3, #2
 80015ac:	2b00      	cmp	r3, #0
 80015ae:	d1ea      	bne.n	8001586 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80015b0:	687b      	ldr	r3, [r7, #4]
 80015b2:	681b      	ldr	r3, [r3, #0]
 80015b4:	f003 0304 	and.w	r3, r3, #4
 80015b8:	2b00      	cmp	r3, #0
 80015ba:	f000 8097 	beq.w	80016ec <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 80015be:	2300      	movs	r3, #0
 80015c0:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 80015c2:	4b81      	ldr	r3, [pc, #516]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015c4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015c6:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015ca:	2b00      	cmp	r3, #0
 80015cc:	d10f      	bne.n	80015ee <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60bb      	str	r3, [r7, #8]
 80015d2:	4b7d      	ldr	r3, [pc, #500]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015d4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015d6:	4a7c      	ldr	r2, [pc, #496]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015d8:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80015dc:	6413      	str	r3, [r2, #64]	@ 0x40
 80015de:	4b7a      	ldr	r3, [pc, #488]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80015e0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80015e2:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80015e6:	60bb      	str	r3, [r7, #8]
 80015e8:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80015ea:	2301      	movs	r3, #1
 80015ec:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80015ee:	4b77      	ldr	r3, [pc, #476]	@ (80017cc <HAL_RCC_OscConfig+0x474>)
 80015f0:	681b      	ldr	r3, [r3, #0]
 80015f2:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80015f6:	2b00      	cmp	r3, #0
 80015f8:	d118      	bne.n	800162c <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80015fa:	4b74      	ldr	r3, [pc, #464]	@ (80017cc <HAL_RCC_OscConfig+0x474>)
 80015fc:	681b      	ldr	r3, [r3, #0]
 80015fe:	4a73      	ldr	r2, [pc, #460]	@ (80017cc <HAL_RCC_OscConfig+0x474>)
 8001600:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8001604:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8001606:	f7ff fb35 	bl	8000c74 <HAL_GetTick>
 800160a:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800160c:	e008      	b.n	8001620 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800160e:	f7ff fb31 	bl	8000c74 <HAL_GetTick>
 8001612:	4602      	mov	r2, r0
 8001614:	693b      	ldr	r3, [r7, #16]
 8001616:	1ad3      	subs	r3, r2, r3
 8001618:	2b02      	cmp	r3, #2
 800161a:	d901      	bls.n	8001620 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 800161c:	2303      	movs	r3, #3
 800161e:	e10c      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8001620:	4b6a      	ldr	r3, [pc, #424]	@ (80017cc <HAL_RCC_OscConfig+0x474>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001628:	2b00      	cmp	r3, #0
 800162a:	d0f0      	beq.n	800160e <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800162c:	687b      	ldr	r3, [r7, #4]
 800162e:	689b      	ldr	r3, [r3, #8]
 8001630:	2b01      	cmp	r3, #1
 8001632:	d106      	bne.n	8001642 <HAL_RCC_OscConfig+0x2ea>
 8001634:	4b64      	ldr	r3, [pc, #400]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001636:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001638:	4a63      	ldr	r2, [pc, #396]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 800163a:	f043 0301 	orr.w	r3, r3, #1
 800163e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001640:	e01c      	b.n	800167c <HAL_RCC_OscConfig+0x324>
 8001642:	687b      	ldr	r3, [r7, #4]
 8001644:	689b      	ldr	r3, [r3, #8]
 8001646:	2b05      	cmp	r3, #5
 8001648:	d10c      	bne.n	8001664 <HAL_RCC_OscConfig+0x30c>
 800164a:	4b5f      	ldr	r3, [pc, #380]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 800164c:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800164e:	4a5e      	ldr	r2, [pc, #376]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001650:	f043 0304 	orr.w	r3, r3, #4
 8001654:	6713      	str	r3, [r2, #112]	@ 0x70
 8001656:	4b5c      	ldr	r3, [pc, #368]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001658:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 800165a:	4a5b      	ldr	r2, [pc, #364]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 800165c:	f043 0301 	orr.w	r3, r3, #1
 8001660:	6713      	str	r3, [r2, #112]	@ 0x70
 8001662:	e00b      	b.n	800167c <HAL_RCC_OscConfig+0x324>
 8001664:	4b58      	ldr	r3, [pc, #352]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001666:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001668:	4a57      	ldr	r2, [pc, #348]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 800166a:	f023 0301 	bic.w	r3, r3, #1
 800166e:	6713      	str	r3, [r2, #112]	@ 0x70
 8001670:	4b55      	ldr	r3, [pc, #340]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001672:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8001674:	4a54      	ldr	r2, [pc, #336]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001676:	f023 0304 	bic.w	r3, r3, #4
 800167a:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800167c:	687b      	ldr	r3, [r7, #4]
 800167e:	689b      	ldr	r3, [r3, #8]
 8001680:	2b00      	cmp	r3, #0
 8001682:	d015      	beq.n	80016b0 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8001684:	f7ff faf6 	bl	8000c74 <HAL_GetTick>
 8001688:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 800168a:	e00a      	b.n	80016a2 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 800168c:	f7ff faf2 	bl	8000c74 <HAL_GetTick>
 8001690:	4602      	mov	r2, r0
 8001692:	693b      	ldr	r3, [r7, #16]
 8001694:	1ad3      	subs	r3, r2, r3
 8001696:	f241 3288 	movw	r2, #5000	@ 0x1388
 800169a:	4293      	cmp	r3, r2
 800169c:	d901      	bls.n	80016a2 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 800169e:	2303      	movs	r3, #3
 80016a0:	e0cb      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80016a2:	4b49      	ldr	r3, [pc, #292]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016a4:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016a6:	f003 0302 	and.w	r3, r3, #2
 80016aa:	2b00      	cmp	r3, #0
 80016ac:	d0ee      	beq.n	800168c <HAL_RCC_OscConfig+0x334>
 80016ae:	e014      	b.n	80016da <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80016b0:	f7ff fae0 	bl	8000c74 <HAL_GetTick>
 80016b4:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016b6:	e00a      	b.n	80016ce <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 80016b8:	f7ff fadc 	bl	8000c74 <HAL_GetTick>
 80016bc:	4602      	mov	r2, r0
 80016be:	693b      	ldr	r3, [r7, #16]
 80016c0:	1ad3      	subs	r3, r2, r3
 80016c2:	f241 3288 	movw	r2, #5000	@ 0x1388
 80016c6:	4293      	cmp	r3, r2
 80016c8:	d901      	bls.n	80016ce <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 80016ca:	2303      	movs	r3, #3
 80016cc:	e0b5      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80016ce:	4b3e      	ldr	r3, [pc, #248]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80016d2:	f003 0302 	and.w	r3, r3, #2
 80016d6:	2b00      	cmp	r3, #0
 80016d8:	d1ee      	bne.n	80016b8 <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 80016da:	7dfb      	ldrb	r3, [r7, #23]
 80016dc:	2b01      	cmp	r3, #1
 80016de:	d105      	bne.n	80016ec <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80016e0:	4b39      	ldr	r3, [pc, #228]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016e2:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80016e4:	4a38      	ldr	r2, [pc, #224]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016e6:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 80016ea:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80016ec:	687b      	ldr	r3, [r7, #4]
 80016ee:	699b      	ldr	r3, [r3, #24]
 80016f0:	2b00      	cmp	r3, #0
 80016f2:	f000 80a1 	beq.w	8001838 <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80016f6:	4b34      	ldr	r3, [pc, #208]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80016f8:	689b      	ldr	r3, [r3, #8]
 80016fa:	f003 030c 	and.w	r3, r3, #12
 80016fe:	2b08      	cmp	r3, #8
 8001700:	d05c      	beq.n	80017bc <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8001702:	687b      	ldr	r3, [r7, #4]
 8001704:	699b      	ldr	r3, [r3, #24]
 8001706:	2b02      	cmp	r3, #2
 8001708:	d141      	bne.n	800178e <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800170a:	4b31      	ldr	r3, [pc, #196]	@ (80017d0 <HAL_RCC_OscConfig+0x478>)
 800170c:	2200      	movs	r2, #0
 800170e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001710:	f7ff fab0 	bl	8000c74 <HAL_GetTick>
 8001714:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8001716:	e008      	b.n	800172a <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8001718:	f7ff faac 	bl	8000c74 <HAL_GetTick>
 800171c:	4602      	mov	r2, r0
 800171e:	693b      	ldr	r3, [r7, #16]
 8001720:	1ad3      	subs	r3, r2, r3
 8001722:	2b02      	cmp	r3, #2
 8001724:	d901      	bls.n	800172a <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8001726:	2303      	movs	r3, #3
 8001728:	e087      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800172a:	4b27      	ldr	r3, [pc, #156]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 800172c:	681b      	ldr	r3, [r3, #0]
 800172e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001732:	2b00      	cmp	r3, #0
 8001734:	d1f0      	bne.n	8001718 <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	69da      	ldr	r2, [r3, #28]
 800173a:	687b      	ldr	r3, [r7, #4]
 800173c:	6a1b      	ldr	r3, [r3, #32]
 800173e:	431a      	orrs	r2, r3
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8001744:	019b      	lsls	r3, r3, #6
 8001746:	431a      	orrs	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800174c:	085b      	lsrs	r3, r3, #1
 800174e:	3b01      	subs	r3, #1
 8001750:	041b      	lsls	r3, r3, #16
 8001752:	431a      	orrs	r2, r3
 8001754:	687b      	ldr	r3, [r7, #4]
 8001756:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8001758:	061b      	lsls	r3, r3, #24
 800175a:	491b      	ldr	r1, [pc, #108]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 800175c:	4313      	orrs	r3, r2
 800175e:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8001760:	4b1b      	ldr	r3, [pc, #108]	@ (80017d0 <HAL_RCC_OscConfig+0x478>)
 8001762:	2201      	movs	r2, #1
 8001764:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001766:	f7ff fa85 	bl	8000c74 <HAL_GetTick>
 800176a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800176c:	e008      	b.n	8001780 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800176e:	f7ff fa81 	bl	8000c74 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	693b      	ldr	r3, [r7, #16]
 8001776:	1ad3      	subs	r3, r2, r3
 8001778:	2b02      	cmp	r3, #2
 800177a:	d901      	bls.n	8001780 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 800177c:	2303      	movs	r3, #3
 800177e:	e05c      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001780:	4b11      	ldr	r3, [pc, #68]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8001788:	2b00      	cmp	r3, #0
 800178a:	d0f0      	beq.n	800176e <HAL_RCC_OscConfig+0x416>
 800178c:	e054      	b.n	8001838 <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800178e:	4b10      	ldr	r3, [pc, #64]	@ (80017d0 <HAL_RCC_OscConfig+0x478>)
 8001790:	2200      	movs	r2, #0
 8001792:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8001794:	f7ff fa6e 	bl	8000c74 <HAL_GetTick>
 8001798:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800179a:	e008      	b.n	80017ae <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 800179c:	f7ff fa6a 	bl	8000c74 <HAL_GetTick>
 80017a0:	4602      	mov	r2, r0
 80017a2:	693b      	ldr	r3, [r7, #16]
 80017a4:	1ad3      	subs	r3, r2, r3
 80017a6:	2b02      	cmp	r3, #2
 80017a8:	d901      	bls.n	80017ae <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 80017aa:	2303      	movs	r3, #3
 80017ac:	e045      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80017ae:	4b06      	ldr	r3, [pc, #24]	@ (80017c8 <HAL_RCC_OscConfig+0x470>)
 80017b0:	681b      	ldr	r3, [r3, #0]
 80017b2:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 80017b6:	2b00      	cmp	r3, #0
 80017b8:	d1f0      	bne.n	800179c <HAL_RCC_OscConfig+0x444>
 80017ba:	e03d      	b.n	8001838 <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80017bc:	687b      	ldr	r3, [r7, #4]
 80017be:	699b      	ldr	r3, [r3, #24]
 80017c0:	2b01      	cmp	r3, #1
 80017c2:	d107      	bne.n	80017d4 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 80017c4:	2301      	movs	r3, #1
 80017c6:	e038      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
 80017c8:	40023800 	.word	0x40023800
 80017cc:	40007000 	.word	0x40007000
 80017d0:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80017d4:	4b1b      	ldr	r3, [pc, #108]	@ (8001844 <HAL_RCC_OscConfig+0x4ec>)
 80017d6:	685b      	ldr	r3, [r3, #4]
 80017d8:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017da:	687b      	ldr	r3, [r7, #4]
 80017dc:	699b      	ldr	r3, [r3, #24]
 80017de:	2b01      	cmp	r3, #1
 80017e0:	d028      	beq.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017e2:	68fb      	ldr	r3, [r7, #12]
 80017e4:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80017ec:	429a      	cmp	r2, r3
 80017ee:	d121      	bne.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80017f0:	68fb      	ldr	r3, [r7, #12]
 80017f2:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80017fa:	429a      	cmp	r2, r3
 80017fc:	d11a      	bne.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80017fe:	68fa      	ldr	r2, [r7, #12]
 8001800:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8001804:	4013      	ands	r3, r2
 8001806:	687a      	ldr	r2, [r7, #4]
 8001808:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 800180a:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800180c:	4293      	cmp	r3, r2
 800180e:	d111      	bne.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001810:	68fb      	ldr	r3, [r7, #12]
 8001812:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8001816:	687b      	ldr	r3, [r7, #4]
 8001818:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800181a:	085b      	lsrs	r3, r3, #1
 800181c:	3b01      	subs	r3, #1
 800181e:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8001820:	429a      	cmp	r2, r3
 8001822:	d107      	bne.n	8001834 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8001824:	68fb      	ldr	r3, [r7, #12]
 8001826:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 800182a:	687b      	ldr	r3, [r7, #4]
 800182c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800182e:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8001830:	429a      	cmp	r2, r3
 8001832:	d001      	beq.n	8001838 <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8001834:	2301      	movs	r3, #1
 8001836:	e000      	b.n	800183a <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8001838:	2300      	movs	r3, #0
}
 800183a:	4618      	mov	r0, r3
 800183c:	3718      	adds	r7, #24
 800183e:	46bd      	mov	sp, r7
 8001840:	bd80      	pop	{r7, pc}
 8001842:	bf00      	nop
 8001844:	40023800 	.word	0x40023800

08001848 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8001848:	b580      	push	{r7, lr}
 800184a:	b084      	sub	sp, #16
 800184c:	af00      	add	r7, sp, #0
 800184e:	6078      	str	r0, [r7, #4]
 8001850:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8001852:	687b      	ldr	r3, [r7, #4]
 8001854:	2b00      	cmp	r3, #0
 8001856:	d101      	bne.n	800185c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8001858:	2301      	movs	r3, #1
 800185a:	e0cc      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 800185c:	4b68      	ldr	r3, [pc, #416]	@ (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800185e:	681b      	ldr	r3, [r3, #0]
 8001860:	f003 0307 	and.w	r3, r3, #7
 8001864:	683a      	ldr	r2, [r7, #0]
 8001866:	429a      	cmp	r2, r3
 8001868:	d90c      	bls.n	8001884 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800186a:	4b65      	ldr	r3, [pc, #404]	@ (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800186c:	683a      	ldr	r2, [r7, #0]
 800186e:	b2d2      	uxtb	r2, r2
 8001870:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8001872:	4b63      	ldr	r3, [pc, #396]	@ (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001874:	681b      	ldr	r3, [r3, #0]
 8001876:	f003 0307 	and.w	r3, r3, #7
 800187a:	683a      	ldr	r2, [r7, #0]
 800187c:	429a      	cmp	r2, r3
 800187e:	d001      	beq.n	8001884 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8001880:	2301      	movs	r3, #1
 8001882:	e0b8      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	681b      	ldr	r3, [r3, #0]
 8001888:	f003 0302 	and.w	r3, r3, #2
 800188c:	2b00      	cmp	r3, #0
 800188e:	d020      	beq.n	80018d2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	681b      	ldr	r3, [r3, #0]
 8001894:	f003 0304 	and.w	r3, r3, #4
 8001898:	2b00      	cmp	r3, #0
 800189a:	d005      	beq.n	80018a8 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800189c:	4b59      	ldr	r3, [pc, #356]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 800189e:	689b      	ldr	r3, [r3, #8]
 80018a0:	4a58      	ldr	r2, [pc, #352]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018a2:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 80018a6:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80018a8:	687b      	ldr	r3, [r7, #4]
 80018aa:	681b      	ldr	r3, [r3, #0]
 80018ac:	f003 0308 	and.w	r3, r3, #8
 80018b0:	2b00      	cmp	r3, #0
 80018b2:	d005      	beq.n	80018c0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80018b4:	4b53      	ldr	r3, [pc, #332]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018b6:	689b      	ldr	r3, [r3, #8]
 80018b8:	4a52      	ldr	r2, [pc, #328]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018ba:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 80018be:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80018c0:	4b50      	ldr	r3, [pc, #320]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018c2:	689b      	ldr	r3, [r3, #8]
 80018c4:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 80018c8:	687b      	ldr	r3, [r7, #4]
 80018ca:	689b      	ldr	r3, [r3, #8]
 80018cc:	494d      	ldr	r1, [pc, #308]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018ce:	4313      	orrs	r3, r2
 80018d0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80018d2:	687b      	ldr	r3, [r7, #4]
 80018d4:	681b      	ldr	r3, [r3, #0]
 80018d6:	f003 0301 	and.w	r3, r3, #1
 80018da:	2b00      	cmp	r3, #0
 80018dc:	d044      	beq.n	8001968 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80018de:	687b      	ldr	r3, [r7, #4]
 80018e0:	685b      	ldr	r3, [r3, #4]
 80018e2:	2b01      	cmp	r3, #1
 80018e4:	d107      	bne.n	80018f6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80018e6:	4b47      	ldr	r3, [pc, #284]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80018e8:	681b      	ldr	r3, [r3, #0]
 80018ea:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80018ee:	2b00      	cmp	r3, #0
 80018f0:	d119      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80018f2:	2301      	movs	r3, #1
 80018f4:	e07f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80018f6:	687b      	ldr	r3, [r7, #4]
 80018f8:	685b      	ldr	r3, [r3, #4]
 80018fa:	2b02      	cmp	r3, #2
 80018fc:	d003      	beq.n	8001906 <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80018fe:	687b      	ldr	r3, [r7, #4]
 8001900:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8001902:	2b03      	cmp	r3, #3
 8001904:	d107      	bne.n	8001916 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8001906:	4b3f      	ldr	r3, [pc, #252]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001908:	681b      	ldr	r3, [r3, #0]
 800190a:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 800190e:	2b00      	cmp	r3, #0
 8001910:	d109      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001912:	2301      	movs	r3, #1
 8001914:	e06f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8001916:	4b3b      	ldr	r3, [pc, #236]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001918:	681b      	ldr	r3, [r3, #0]
 800191a:	f003 0302 	and.w	r3, r3, #2
 800191e:	2b00      	cmp	r3, #0
 8001920:	d101      	bne.n	8001926 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8001922:	2301      	movs	r3, #1
 8001924:	e067      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8001926:	4b37      	ldr	r3, [pc, #220]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001928:	689b      	ldr	r3, [r3, #8]
 800192a:	f023 0203 	bic.w	r2, r3, #3
 800192e:	687b      	ldr	r3, [r7, #4]
 8001930:	685b      	ldr	r3, [r3, #4]
 8001932:	4934      	ldr	r1, [pc, #208]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001934:	4313      	orrs	r3, r2
 8001936:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8001938:	f7ff f99c 	bl	8000c74 <HAL_GetTick>
 800193c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800193e:	e00a      	b.n	8001956 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8001940:	f7ff f998 	bl	8000c74 <HAL_GetTick>
 8001944:	4602      	mov	r2, r0
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	1ad3      	subs	r3, r2, r3
 800194a:	f241 3288 	movw	r2, #5000	@ 0x1388
 800194e:	4293      	cmp	r3, r2
 8001950:	d901      	bls.n	8001956 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8001952:	2303      	movs	r3, #3
 8001954:	e04f      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8001956:	4b2b      	ldr	r3, [pc, #172]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 8001958:	689b      	ldr	r3, [r3, #8]
 800195a:	f003 020c 	and.w	r2, r3, #12
 800195e:	687b      	ldr	r3, [r7, #4]
 8001960:	685b      	ldr	r3, [r3, #4]
 8001962:	009b      	lsls	r3, r3, #2
 8001964:	429a      	cmp	r2, r3
 8001966:	d1eb      	bne.n	8001940 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8001968:	4b25      	ldr	r3, [pc, #148]	@ (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 800196a:	681b      	ldr	r3, [r3, #0]
 800196c:	f003 0307 	and.w	r3, r3, #7
 8001970:	683a      	ldr	r2, [r7, #0]
 8001972:	429a      	cmp	r2, r3
 8001974:	d20c      	bcs.n	8001990 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8001976:	4b22      	ldr	r3, [pc, #136]	@ (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001978:	683a      	ldr	r2, [r7, #0]
 800197a:	b2d2      	uxtb	r2, r2
 800197c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 800197e:	4b20      	ldr	r3, [pc, #128]	@ (8001a00 <HAL_RCC_ClockConfig+0x1b8>)
 8001980:	681b      	ldr	r3, [r3, #0]
 8001982:	f003 0307 	and.w	r3, r3, #7
 8001986:	683a      	ldr	r2, [r7, #0]
 8001988:	429a      	cmp	r2, r3
 800198a:	d001      	beq.n	8001990 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800198c:	2301      	movs	r3, #1
 800198e:	e032      	b.n	80019f6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8001990:	687b      	ldr	r3, [r7, #4]
 8001992:	681b      	ldr	r3, [r3, #0]
 8001994:	f003 0304 	and.w	r3, r3, #4
 8001998:	2b00      	cmp	r3, #0
 800199a:	d008      	beq.n	80019ae <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800199c:	4b19      	ldr	r3, [pc, #100]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 800199e:	689b      	ldr	r3, [r3, #8]
 80019a0:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 80019a4:	687b      	ldr	r3, [r7, #4]
 80019a6:	68db      	ldr	r3, [r3, #12]
 80019a8:	4916      	ldr	r1, [pc, #88]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019aa:	4313      	orrs	r3, r2
 80019ac:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80019ae:	687b      	ldr	r3, [r7, #4]
 80019b0:	681b      	ldr	r3, [r3, #0]
 80019b2:	f003 0308 	and.w	r3, r3, #8
 80019b6:	2b00      	cmp	r3, #0
 80019b8:	d009      	beq.n	80019ce <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80019ba:	4b12      	ldr	r3, [pc, #72]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019bc:	689b      	ldr	r3, [r3, #8]
 80019be:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 80019c2:	687b      	ldr	r3, [r7, #4]
 80019c4:	691b      	ldr	r3, [r3, #16]
 80019c6:	00db      	lsls	r3, r3, #3
 80019c8:	490e      	ldr	r1, [pc, #56]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019ca:	4313      	orrs	r3, r2
 80019cc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 80019ce:	f000 f821 	bl	8001a14 <HAL_RCC_GetSysClockFreq>
 80019d2:	4602      	mov	r2, r0
 80019d4:	4b0b      	ldr	r3, [pc, #44]	@ (8001a04 <HAL_RCC_ClockConfig+0x1bc>)
 80019d6:	689b      	ldr	r3, [r3, #8]
 80019d8:	091b      	lsrs	r3, r3, #4
 80019da:	f003 030f 	and.w	r3, r3, #15
 80019de:	490a      	ldr	r1, [pc, #40]	@ (8001a08 <HAL_RCC_ClockConfig+0x1c0>)
 80019e0:	5ccb      	ldrb	r3, [r1, r3]
 80019e2:	fa22 f303 	lsr.w	r3, r2, r3
 80019e6:	4a09      	ldr	r2, [pc, #36]	@ (8001a0c <HAL_RCC_ClockConfig+0x1c4>)
 80019e8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 80019ea:	4b09      	ldr	r3, [pc, #36]	@ (8001a10 <HAL_RCC_ClockConfig+0x1c8>)
 80019ec:	681b      	ldr	r3, [r3, #0]
 80019ee:	4618      	mov	r0, r3
 80019f0:	f7ff f8fc 	bl	8000bec <HAL_InitTick>

  return HAL_OK;
 80019f4:	2300      	movs	r3, #0
}
 80019f6:	4618      	mov	r0, r3
 80019f8:	3710      	adds	r7, #16
 80019fa:	46bd      	mov	sp, r7
 80019fc:	bd80      	pop	{r7, pc}
 80019fe:	bf00      	nop
 8001a00:	40023c00 	.word	0x40023c00
 8001a04:	40023800 	.word	0x40023800
 8001a08:	08003be4 	.word	0x08003be4
 8001a0c:	20000000 	.word	0x20000000
 8001a10:	20000004 	.word	0x20000004

08001a14 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8001a14:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001a18:	b094      	sub	sp, #80	@ 0x50
 8001a1a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8001a1c:	2300      	movs	r3, #0
 8001a1e:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8001a20:	2300      	movs	r3, #0
 8001a22:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8001a24:	2300      	movs	r3, #0
 8001a26:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 8001a28:	2300      	movs	r3, #0
 8001a2a:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8001a2c:	4b79      	ldr	r3, [pc, #484]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a2e:	689b      	ldr	r3, [r3, #8]
 8001a30:	f003 030c 	and.w	r3, r3, #12
 8001a34:	2b08      	cmp	r3, #8
 8001a36:	d00d      	beq.n	8001a54 <HAL_RCC_GetSysClockFreq+0x40>
 8001a38:	2b08      	cmp	r3, #8
 8001a3a:	f200 80e1 	bhi.w	8001c00 <HAL_RCC_GetSysClockFreq+0x1ec>
 8001a3e:	2b00      	cmp	r3, #0
 8001a40:	d002      	beq.n	8001a48 <HAL_RCC_GetSysClockFreq+0x34>
 8001a42:	2b04      	cmp	r3, #4
 8001a44:	d003      	beq.n	8001a4e <HAL_RCC_GetSysClockFreq+0x3a>
 8001a46:	e0db      	b.n	8001c00 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8001a48:	4b73      	ldr	r3, [pc, #460]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8001a4a:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a4c:	e0db      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8001a4e:	4b73      	ldr	r3, [pc, #460]	@ (8001c1c <HAL_RCC_GetSysClockFreq+0x208>)
 8001a50:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001a52:	e0d8      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8001a54:	4b6f      	ldr	r3, [pc, #444]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a56:	685b      	ldr	r3, [r3, #4]
 8001a58:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 8001a5c:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8001a5e:	4b6d      	ldr	r3, [pc, #436]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a60:	685b      	ldr	r3, [r3, #4]
 8001a62:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8001a66:	2b00      	cmp	r3, #0
 8001a68:	d063      	beq.n	8001b32 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001a6a:	4b6a      	ldr	r3, [pc, #424]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001a6c:	685b      	ldr	r3, [r3, #4]
 8001a6e:	099b      	lsrs	r3, r3, #6
 8001a70:	2200      	movs	r2, #0
 8001a72:	63bb      	str	r3, [r7, #56]	@ 0x38
 8001a74:	63fa      	str	r2, [r7, #60]	@ 0x3c
 8001a76:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8001a78:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001a7c:	633b      	str	r3, [r7, #48]	@ 0x30
 8001a7e:	2300      	movs	r3, #0
 8001a80:	637b      	str	r3, [r7, #52]	@ 0x34
 8001a82:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 8001a86:	4622      	mov	r2, r4
 8001a88:	462b      	mov	r3, r5
 8001a8a:	f04f 0000 	mov.w	r0, #0
 8001a8e:	f04f 0100 	mov.w	r1, #0
 8001a92:	0159      	lsls	r1, r3, #5
 8001a94:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001a98:	0150      	lsls	r0, r2, #5
 8001a9a:	4602      	mov	r2, r0
 8001a9c:	460b      	mov	r3, r1
 8001a9e:	4621      	mov	r1, r4
 8001aa0:	1a51      	subs	r1, r2, r1
 8001aa2:	6139      	str	r1, [r7, #16]
 8001aa4:	4629      	mov	r1, r5
 8001aa6:	eb63 0301 	sbc.w	r3, r3, r1
 8001aaa:	617b      	str	r3, [r7, #20]
 8001aac:	f04f 0200 	mov.w	r2, #0
 8001ab0:	f04f 0300 	mov.w	r3, #0
 8001ab4:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8001ab8:	4659      	mov	r1, fp
 8001aba:	018b      	lsls	r3, r1, #6
 8001abc:	4651      	mov	r1, sl
 8001abe:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8001ac2:	4651      	mov	r1, sl
 8001ac4:	018a      	lsls	r2, r1, #6
 8001ac6:	4651      	mov	r1, sl
 8001ac8:	ebb2 0801 	subs.w	r8, r2, r1
 8001acc:	4659      	mov	r1, fp
 8001ace:	eb63 0901 	sbc.w	r9, r3, r1
 8001ad2:	f04f 0200 	mov.w	r2, #0
 8001ad6:	f04f 0300 	mov.w	r3, #0
 8001ada:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8001ade:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8001ae2:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8001ae6:	4690      	mov	r8, r2
 8001ae8:	4699      	mov	r9, r3
 8001aea:	4623      	mov	r3, r4
 8001aec:	eb18 0303 	adds.w	r3, r8, r3
 8001af0:	60bb      	str	r3, [r7, #8]
 8001af2:	462b      	mov	r3, r5
 8001af4:	eb49 0303 	adc.w	r3, r9, r3
 8001af8:	60fb      	str	r3, [r7, #12]
 8001afa:	f04f 0200 	mov.w	r2, #0
 8001afe:	f04f 0300 	mov.w	r3, #0
 8001b02:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 8001b06:	4629      	mov	r1, r5
 8001b08:	024b      	lsls	r3, r1, #9
 8001b0a:	4621      	mov	r1, r4
 8001b0c:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8001b10:	4621      	mov	r1, r4
 8001b12:	024a      	lsls	r2, r1, #9
 8001b14:	4610      	mov	r0, r2
 8001b16:	4619      	mov	r1, r3
 8001b18:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001b1a:	2200      	movs	r2, #0
 8001b1c:	62bb      	str	r3, [r7, #40]	@ 0x28
 8001b1e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8001b20:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8001b24:	f7fe fbb4 	bl	8000290 <__aeabi_uldivmod>
 8001b28:	4602      	mov	r2, r0
 8001b2a:	460b      	mov	r3, r1
 8001b2c:	4613      	mov	r3, r2
 8001b2e:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8001b30:	e058      	b.n	8001be4 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8001b32:	4b38      	ldr	r3, [pc, #224]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001b34:	685b      	ldr	r3, [r3, #4]
 8001b36:	099b      	lsrs	r3, r3, #6
 8001b38:	2200      	movs	r2, #0
 8001b3a:	4618      	mov	r0, r3
 8001b3c:	4611      	mov	r1, r2
 8001b3e:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8001b42:	623b      	str	r3, [r7, #32]
 8001b44:	2300      	movs	r3, #0
 8001b46:	627b      	str	r3, [r7, #36]	@ 0x24
 8001b48:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 8001b4c:	4642      	mov	r2, r8
 8001b4e:	464b      	mov	r3, r9
 8001b50:	f04f 0000 	mov.w	r0, #0
 8001b54:	f04f 0100 	mov.w	r1, #0
 8001b58:	0159      	lsls	r1, r3, #5
 8001b5a:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 8001b5e:	0150      	lsls	r0, r2, #5
 8001b60:	4602      	mov	r2, r0
 8001b62:	460b      	mov	r3, r1
 8001b64:	4641      	mov	r1, r8
 8001b66:	ebb2 0a01 	subs.w	sl, r2, r1
 8001b6a:	4649      	mov	r1, r9
 8001b6c:	eb63 0b01 	sbc.w	fp, r3, r1
 8001b70:	f04f 0200 	mov.w	r2, #0
 8001b74:	f04f 0300 	mov.w	r3, #0
 8001b78:	ea4f 138b 	mov.w	r3, fp, lsl #6
 8001b7c:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 8001b80:	ea4f 128a 	mov.w	r2, sl, lsl #6
 8001b84:	ebb2 040a 	subs.w	r4, r2, sl
 8001b88:	eb63 050b 	sbc.w	r5, r3, fp
 8001b8c:	f04f 0200 	mov.w	r2, #0
 8001b90:	f04f 0300 	mov.w	r3, #0
 8001b94:	00eb      	lsls	r3, r5, #3
 8001b96:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8001b9a:	00e2      	lsls	r2, r4, #3
 8001b9c:	4614      	mov	r4, r2
 8001b9e:	461d      	mov	r5, r3
 8001ba0:	4643      	mov	r3, r8
 8001ba2:	18e3      	adds	r3, r4, r3
 8001ba4:	603b      	str	r3, [r7, #0]
 8001ba6:	464b      	mov	r3, r9
 8001ba8:	eb45 0303 	adc.w	r3, r5, r3
 8001bac:	607b      	str	r3, [r7, #4]
 8001bae:	f04f 0200 	mov.w	r2, #0
 8001bb2:	f04f 0300 	mov.w	r3, #0
 8001bb6:	e9d7 4500 	ldrd	r4, r5, [r7]
 8001bba:	4629      	mov	r1, r5
 8001bbc:	028b      	lsls	r3, r1, #10
 8001bbe:	4621      	mov	r1, r4
 8001bc0:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8001bc4:	4621      	mov	r1, r4
 8001bc6:	028a      	lsls	r2, r1, #10
 8001bc8:	4610      	mov	r0, r2
 8001bca:	4619      	mov	r1, r3
 8001bcc:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8001bce:	2200      	movs	r2, #0
 8001bd0:	61bb      	str	r3, [r7, #24]
 8001bd2:	61fa      	str	r2, [r7, #28]
 8001bd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8001bd8:	f7fe fb5a 	bl	8000290 <__aeabi_uldivmod>
 8001bdc:	4602      	mov	r2, r0
 8001bde:	460b      	mov	r3, r1
 8001be0:	4613      	mov	r3, r2
 8001be2:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8001be4:	4b0b      	ldr	r3, [pc, #44]	@ (8001c14 <HAL_RCC_GetSysClockFreq+0x200>)
 8001be6:	685b      	ldr	r3, [r3, #4]
 8001be8:	0c1b      	lsrs	r3, r3, #16
 8001bea:	f003 0303 	and.w	r3, r3, #3
 8001bee:	3301      	adds	r3, #1
 8001bf0:	005b      	lsls	r3, r3, #1
 8001bf2:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8001bf4:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8001bf6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8001bf8:	fbb2 f3f3 	udiv	r3, r2, r3
 8001bfc:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001bfe:	e002      	b.n	8001c06 <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8001c00:	4b05      	ldr	r3, [pc, #20]	@ (8001c18 <HAL_RCC_GetSysClockFreq+0x204>)
 8001c02:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8001c04:	bf00      	nop
    }
  }
  return sysclockfreq;
 8001c06:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 8001c08:	4618      	mov	r0, r3
 8001c0a:	3750      	adds	r7, #80	@ 0x50
 8001c0c:	46bd      	mov	sp, r7
 8001c0e:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8001c12:	bf00      	nop
 8001c14:	40023800 	.word	0x40023800
 8001c18:	00f42400 	.word	0x00f42400
 8001c1c:	007a1200 	.word	0x007a1200

08001c20 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8001c20:	b480      	push	{r7}
 8001c22:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8001c24:	4b03      	ldr	r3, [pc, #12]	@ (8001c34 <HAL_RCC_GetHCLKFreq+0x14>)
 8001c26:	681b      	ldr	r3, [r3, #0]
}
 8001c28:	4618      	mov	r0, r3
 8001c2a:	46bd      	mov	sp, r7
 8001c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001c30:	4770      	bx	lr
 8001c32:	bf00      	nop
 8001c34:	20000000 	.word	0x20000000

08001c38 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8001c38:	b580      	push	{r7, lr}
 8001c3a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8001c3c:	f7ff fff0 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c40:	4602      	mov	r2, r0
 8001c42:	4b05      	ldr	r3, [pc, #20]	@ (8001c58 <HAL_RCC_GetPCLK1Freq+0x20>)
 8001c44:	689b      	ldr	r3, [r3, #8]
 8001c46:	0a9b      	lsrs	r3, r3, #10
 8001c48:	f003 0307 	and.w	r3, r3, #7
 8001c4c:	4903      	ldr	r1, [pc, #12]	@ (8001c5c <HAL_RCC_GetPCLK1Freq+0x24>)
 8001c4e:	5ccb      	ldrb	r3, [r1, r3]
 8001c50:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c54:	4618      	mov	r0, r3
 8001c56:	bd80      	pop	{r7, pc}
 8001c58:	40023800 	.word	0x40023800
 8001c5c:	08003bf4 	.word	0x08003bf4

08001c60 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8001c60:	b580      	push	{r7, lr}
 8001c62:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8001c64:	f7ff ffdc 	bl	8001c20 <HAL_RCC_GetHCLKFreq>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	4b05      	ldr	r3, [pc, #20]	@ (8001c80 <HAL_RCC_GetPCLK2Freq+0x20>)
 8001c6c:	689b      	ldr	r3, [r3, #8]
 8001c6e:	0b5b      	lsrs	r3, r3, #13
 8001c70:	f003 0307 	and.w	r3, r3, #7
 8001c74:	4903      	ldr	r1, [pc, #12]	@ (8001c84 <HAL_RCC_GetPCLK2Freq+0x24>)
 8001c76:	5ccb      	ldrb	r3, [r1, r3]
 8001c78:	fa22 f303 	lsr.w	r3, r2, r3
}
 8001c7c:	4618      	mov	r0, r3
 8001c7e:	bd80      	pop	{r7, pc}
 8001c80:	40023800 	.word	0x40023800
 8001c84:	08003bf4 	.word	0x08003bf4

08001c88 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8001c88:	b580      	push	{r7, lr}
 8001c8a:	b082      	sub	sp, #8
 8001c8c:	af00      	add	r7, sp, #0
 8001c8e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8001c90:	687b      	ldr	r3, [r7, #4]
 8001c92:	2b00      	cmp	r3, #0
 8001c94:	d101      	bne.n	8001c9a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8001c96:	2301      	movs	r3, #1
 8001c98:	e042      	b.n	8001d20 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8001c9a:	687b      	ldr	r3, [r7, #4]
 8001c9c:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001ca0:	b2db      	uxtb	r3, r3
 8001ca2:	2b00      	cmp	r3, #0
 8001ca4:	d106      	bne.n	8001cb4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8001ca6:	687b      	ldr	r3, [r7, #4]
 8001ca8:	2200      	movs	r2, #0
 8001caa:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8001cae:	6878      	ldr	r0, [r7, #4]
 8001cb0:	f7fe fe10 	bl	80008d4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8001cb4:	687b      	ldr	r3, [r7, #4]
 8001cb6:	2224      	movs	r2, #36	@ 0x24
 8001cb8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8001cbc:	687b      	ldr	r3, [r7, #4]
 8001cbe:	681b      	ldr	r3, [r3, #0]
 8001cc0:	68da      	ldr	r2, [r3, #12]
 8001cc2:	687b      	ldr	r3, [r7, #4]
 8001cc4:	681b      	ldr	r3, [r3, #0]
 8001cc6:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 8001cca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f000 fdbd 	bl	800284c <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8001cd2:	687b      	ldr	r3, [r7, #4]
 8001cd4:	681b      	ldr	r3, [r3, #0]
 8001cd6:	691a      	ldr	r2, [r3, #16]
 8001cd8:	687b      	ldr	r3, [r7, #4]
 8001cda:	681b      	ldr	r3, [r3, #0]
 8001cdc:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8001ce0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8001ce2:	687b      	ldr	r3, [r7, #4]
 8001ce4:	681b      	ldr	r3, [r3, #0]
 8001ce6:	695a      	ldr	r2, [r3, #20]
 8001ce8:	687b      	ldr	r3, [r7, #4]
 8001cea:	681b      	ldr	r3, [r3, #0]
 8001cec:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8001cf0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8001cf2:	687b      	ldr	r3, [r7, #4]
 8001cf4:	681b      	ldr	r3, [r3, #0]
 8001cf6:	68da      	ldr	r2, [r3, #12]
 8001cf8:	687b      	ldr	r3, [r7, #4]
 8001cfa:	681b      	ldr	r3, [r3, #0]
 8001cfc:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8001d00:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d02:	687b      	ldr	r3, [r7, #4]
 8001d04:	2200      	movs	r2, #0
 8001d06:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 8001d08:	687b      	ldr	r3, [r7, #4]
 8001d0a:	2220      	movs	r2, #32
 8001d0c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8001d10:	687b      	ldr	r3, [r7, #4]
 8001d12:	2220      	movs	r2, #32
 8001d14:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8001d18:	687b      	ldr	r3, [r7, #4]
 8001d1a:	2200      	movs	r2, #0
 8001d1c:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8001d1e:	2300      	movs	r3, #0
}
 8001d20:	4618      	mov	r0, r3
 8001d22:	3708      	adds	r7, #8
 8001d24:	46bd      	mov	sp, r7
 8001d26:	bd80      	pop	{r7, pc}

08001d28 <HAL_UART_Transmit>:
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8001d28:	b580      	push	{r7, lr}
 8001d2a:	b08a      	sub	sp, #40	@ 0x28
 8001d2c:	af02      	add	r7, sp, #8
 8001d2e:	60f8      	str	r0, [r7, #12]
 8001d30:	60b9      	str	r1, [r7, #8]
 8001d32:	603b      	str	r3, [r7, #0]
 8001d34:	4613      	mov	r3, r2
 8001d36:	80fb      	strh	r3, [r7, #6]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart = 0U;
 8001d38:	2300      	movs	r3, #0
 8001d3a:	617b      	str	r3, [r7, #20]

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8001d3c:	68fb      	ldr	r3, [r7, #12]
 8001d3e:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8001d42:	b2db      	uxtb	r3, r3
 8001d44:	2b20      	cmp	r3, #32
 8001d46:	d175      	bne.n	8001e34 <HAL_UART_Transmit+0x10c>
  {
    if ((pData == NULL) || (Size == 0U))
 8001d48:	68bb      	ldr	r3, [r7, #8]
 8001d4a:	2b00      	cmp	r3, #0
 8001d4c:	d002      	beq.n	8001d54 <HAL_UART_Transmit+0x2c>
 8001d4e:	88fb      	ldrh	r3, [r7, #6]
 8001d50:	2b00      	cmp	r3, #0
 8001d52:	d101      	bne.n	8001d58 <HAL_UART_Transmit+0x30>
    {
      return  HAL_ERROR;
 8001d54:	2301      	movs	r3, #1
 8001d56:	e06e      	b.n	8001e36 <HAL_UART_Transmit+0x10e>
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8001d58:	68fb      	ldr	r3, [r7, #12]
 8001d5a:	2200      	movs	r2, #0
 8001d5c:	645a      	str	r2, [r3, #68]	@ 0x44
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8001d5e:	68fb      	ldr	r3, [r7, #12]
 8001d60:	2221      	movs	r2, #33	@ 0x21
 8001d62:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 8001d66:	f7fe ff85 	bl	8000c74 <HAL_GetTick>
 8001d6a:	6178      	str	r0, [r7, #20]

    huart->TxXferSize = Size;
 8001d6c:	68fb      	ldr	r3, [r7, #12]
 8001d6e:	88fa      	ldrh	r2, [r7, #6]
 8001d70:	849a      	strh	r2, [r3, #36]	@ 0x24
    huart->TxXferCount = Size;
 8001d72:	68fb      	ldr	r3, [r7, #12]
 8001d74:	88fa      	ldrh	r2, [r7, #6]
 8001d76:	84da      	strh	r2, [r3, #38]	@ 0x26

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8001d78:	68fb      	ldr	r3, [r7, #12]
 8001d7a:	689b      	ldr	r3, [r3, #8]
 8001d7c:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8001d80:	d108      	bne.n	8001d94 <HAL_UART_Transmit+0x6c>
 8001d82:	68fb      	ldr	r3, [r7, #12]
 8001d84:	691b      	ldr	r3, [r3, #16]
 8001d86:	2b00      	cmp	r3, #0
 8001d88:	d104      	bne.n	8001d94 <HAL_UART_Transmit+0x6c>
    {
      pdata8bits  = NULL;
 8001d8a:	2300      	movs	r3, #0
 8001d8c:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 8001d8e:	68bb      	ldr	r3, [r7, #8]
 8001d90:	61bb      	str	r3, [r7, #24]
 8001d92:	e003      	b.n	8001d9c <HAL_UART_Transmit+0x74>
    }
    else
    {
      pdata8bits  = pData;
 8001d94:	68bb      	ldr	r3, [r7, #8]
 8001d96:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 8001d98:	2300      	movs	r3, #0
 8001d9a:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 8001d9c:	e02e      	b.n	8001dfc <HAL_UART_Transmit+0xd4>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 8001d9e:	683b      	ldr	r3, [r7, #0]
 8001da0:	9300      	str	r3, [sp, #0]
 8001da2:	697b      	ldr	r3, [r7, #20]
 8001da4:	2200      	movs	r2, #0
 8001da6:	2180      	movs	r1, #128	@ 0x80
 8001da8:	68f8      	ldr	r0, [r7, #12]
 8001daa:	f000 fb1f 	bl	80023ec <UART_WaitOnFlagUntilTimeout>
 8001dae:	4603      	mov	r3, r0
 8001db0:	2b00      	cmp	r3, #0
 8001db2:	d005      	beq.n	8001dc0 <HAL_UART_Transmit+0x98>
      {
        huart->gState = HAL_UART_STATE_READY;
 8001db4:	68fb      	ldr	r3, [r7, #12]
 8001db6:	2220      	movs	r2, #32
 8001db8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

        return HAL_TIMEOUT;
 8001dbc:	2303      	movs	r3, #3
 8001dbe:	e03a      	b.n	8001e36 <HAL_UART_Transmit+0x10e>
      }
      if (pdata8bits == NULL)
 8001dc0:	69fb      	ldr	r3, [r7, #28]
 8001dc2:	2b00      	cmp	r3, #0
 8001dc4:	d10b      	bne.n	8001dde <HAL_UART_Transmit+0xb6>
      {
        huart->Instance->DR = (uint16_t)(*pdata16bits & 0x01FFU);
 8001dc6:	69bb      	ldr	r3, [r7, #24]
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	68fb      	ldr	r3, [r7, #12]
 8001dce:	681b      	ldr	r3, [r3, #0]
 8001dd0:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8001dd4:	605a      	str	r2, [r3, #4]
        pdata16bits++;
 8001dd6:	69bb      	ldr	r3, [r7, #24]
 8001dd8:	3302      	adds	r3, #2
 8001dda:	61bb      	str	r3, [r7, #24]
 8001ddc:	e007      	b.n	8001dee <HAL_UART_Transmit+0xc6>
      }
      else
      {
        huart->Instance->DR = (uint8_t)(*pdata8bits & 0xFFU);
 8001dde:	69fb      	ldr	r3, [r7, #28]
 8001de0:	781a      	ldrb	r2, [r3, #0]
 8001de2:	68fb      	ldr	r3, [r7, #12]
 8001de4:	681b      	ldr	r3, [r3, #0]
 8001de6:	605a      	str	r2, [r3, #4]
        pdata8bits++;
 8001de8:	69fb      	ldr	r3, [r7, #28]
 8001dea:	3301      	adds	r3, #1
 8001dec:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 8001dee:	68fb      	ldr	r3, [r7, #12]
 8001df0:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001df2:	b29b      	uxth	r3, r3
 8001df4:	3b01      	subs	r3, #1
 8001df6:	b29a      	uxth	r2, r3
 8001df8:	68fb      	ldr	r3, [r7, #12]
 8001dfa:	84da      	strh	r2, [r3, #38]	@ 0x26
    while (huart->TxXferCount > 0U)
 8001dfc:	68fb      	ldr	r3, [r7, #12]
 8001dfe:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8001e00:	b29b      	uxth	r3, r3
 8001e02:	2b00      	cmp	r3, #0
 8001e04:	d1cb      	bne.n	8001d9e <HAL_UART_Transmit+0x76>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 8001e06:	683b      	ldr	r3, [r7, #0]
 8001e08:	9300      	str	r3, [sp, #0]
 8001e0a:	697b      	ldr	r3, [r7, #20]
 8001e0c:	2200      	movs	r2, #0
 8001e0e:	2140      	movs	r1, #64	@ 0x40
 8001e10:	68f8      	ldr	r0, [r7, #12]
 8001e12:	f000 faeb 	bl	80023ec <UART_WaitOnFlagUntilTimeout>
 8001e16:	4603      	mov	r3, r0
 8001e18:	2b00      	cmp	r3, #0
 8001e1a:	d005      	beq.n	8001e28 <HAL_UART_Transmit+0x100>
    {
      huart->gState = HAL_UART_STATE_READY;
 8001e1c:	68fb      	ldr	r3, [r7, #12]
 8001e1e:	2220      	movs	r2, #32
 8001e20:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

      return HAL_TIMEOUT;
 8001e24:	2303      	movs	r3, #3
 8001e26:	e006      	b.n	8001e36 <HAL_UART_Transmit+0x10e>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 8001e28:	68fb      	ldr	r3, [r7, #12]
 8001e2a:	2220      	movs	r2, #32
 8001e2c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

    return HAL_OK;
 8001e30:	2300      	movs	r3, #0
 8001e32:	e000      	b.n	8001e36 <HAL_UART_Transmit+0x10e>
  }
  else
  {
    return HAL_BUSY;
 8001e34:	2302      	movs	r3, #2
  }
}
 8001e36:	4618      	mov	r0, r3
 8001e38:	3720      	adds	r7, #32
 8001e3a:	46bd      	mov	sp, r7
 8001e3c:	bd80      	pop	{r7, pc}

08001e3e <HAL_UART_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8001e3e:	b580      	push	{r7, lr}
 8001e40:	b084      	sub	sp, #16
 8001e42:	af00      	add	r7, sp, #0
 8001e44:	60f8      	str	r0, [r7, #12]
 8001e46:	60b9      	str	r1, [r7, #8]
 8001e48:	4613      	mov	r3, r2
 8001e4a:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 8001e4c:	68fb      	ldr	r3, [r7, #12]
 8001e4e:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8001e52:	b2db      	uxtb	r3, r3
 8001e54:	2b20      	cmp	r3, #32
 8001e56:	d112      	bne.n	8001e7e <HAL_UART_Receive_IT+0x40>
  {
    if ((pData == NULL) || (Size == 0U))
 8001e58:	68bb      	ldr	r3, [r7, #8]
 8001e5a:	2b00      	cmp	r3, #0
 8001e5c:	d002      	beq.n	8001e64 <HAL_UART_Receive_IT+0x26>
 8001e5e:	88fb      	ldrh	r3, [r7, #6]
 8001e60:	2b00      	cmp	r3, #0
 8001e62:	d101      	bne.n	8001e68 <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 8001e64:	2301      	movs	r3, #1
 8001e66:	e00b      	b.n	8001e80 <HAL_UART_Receive_IT+0x42>
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8001e68:	68fb      	ldr	r3, [r7, #12]
 8001e6a:	2200      	movs	r2, #0
 8001e6c:	631a      	str	r2, [r3, #48]	@ 0x30

    return (UART_Start_Receive_IT(huart, pData, Size));
 8001e6e:	88fb      	ldrh	r3, [r7, #6]
 8001e70:	461a      	mov	r2, r3
 8001e72:	68b9      	ldr	r1, [r7, #8]
 8001e74:	68f8      	ldr	r0, [r7, #12]
 8001e76:	f000 fb12 	bl	800249e <UART_Start_Receive_IT>
 8001e7a:	4603      	mov	r3, r0
 8001e7c:	e000      	b.n	8001e80 <HAL_UART_Receive_IT+0x42>
  }
  else
  {
    return HAL_BUSY;
 8001e7e:	2302      	movs	r3, #2
  }
}
 8001e80:	4618      	mov	r0, r3
 8001e82:	3710      	adds	r7, #16
 8001e84:	46bd      	mov	sp, r7
 8001e86:	bd80      	pop	{r7, pc}

08001e88 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8001e88:	b580      	push	{r7, lr}
 8001e8a:	b0ba      	sub	sp, #232	@ 0xe8
 8001e8c:	af00      	add	r7, sp, #0
 8001e8e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001e90:	687b      	ldr	r3, [r7, #4]
 8001e92:	681b      	ldr	r3, [r3, #0]
 8001e94:	681b      	ldr	r3, [r3, #0]
 8001e96:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8001e9a:	687b      	ldr	r3, [r7, #4]
 8001e9c:	681b      	ldr	r3, [r3, #0]
 8001e9e:	68db      	ldr	r3, [r3, #12]
 8001ea0:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8001ea4:	687b      	ldr	r3, [r7, #4]
 8001ea6:	681b      	ldr	r3, [r3, #0]
 8001ea8:	695b      	ldr	r3, [r3, #20]
 8001eaa:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 8001eae:	2300      	movs	r3, #0
 8001eb0:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 8001eb4:	2300      	movs	r3, #0
 8001eb6:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8001eba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ebe:	f003 030f 	and.w	r3, r3, #15
 8001ec2:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 8001ec6:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d10f      	bne.n	8001eee <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001ece:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001ed2:	f003 0320 	and.w	r3, r3, #32
 8001ed6:	2b00      	cmp	r3, #0
 8001ed8:	d009      	beq.n	8001eee <HAL_UART_IRQHandler+0x66>
 8001eda:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001ede:	f003 0320 	and.w	r3, r3, #32
 8001ee2:	2b00      	cmp	r3, #0
 8001ee4:	d003      	beq.n	8001eee <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 8001ee6:	6878      	ldr	r0, [r7, #4]
 8001ee8:	f000 fbf2 	bl	80026d0 <UART_Receive_IT>
      return;
 8001eec:	e25b      	b.n	80023a6 <HAL_UART_IRQHandler+0x51e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 8001eee:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 8001ef2:	2b00      	cmp	r3, #0
 8001ef4:	f000 80de 	beq.w	80020b4 <HAL_UART_IRQHandler+0x22c>
 8001ef8:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001efc:	f003 0301 	and.w	r3, r3, #1
 8001f00:	2b00      	cmp	r3, #0
 8001f02:	d106      	bne.n	8001f12 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8001f04:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f08:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8001f0c:	2b00      	cmp	r3, #0
 8001f0e:	f000 80d1 	beq.w	80020b4 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8001f12:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f16:	f003 0301 	and.w	r3, r3, #1
 8001f1a:	2b00      	cmp	r3, #0
 8001f1c:	d00b      	beq.n	8001f36 <HAL_UART_IRQHandler+0xae>
 8001f1e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f22:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8001f26:	2b00      	cmp	r3, #0
 8001f28:	d005      	beq.n	8001f36 <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8001f2a:	687b      	ldr	r3, [r7, #4]
 8001f2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f2e:	f043 0201 	orr.w	r2, r3, #1
 8001f32:	687b      	ldr	r3, [r7, #4]
 8001f34:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f36:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f3a:	f003 0304 	and.w	r3, r3, #4
 8001f3e:	2b00      	cmp	r3, #0
 8001f40:	d00b      	beq.n	8001f5a <HAL_UART_IRQHandler+0xd2>
 8001f42:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f46:	f003 0301 	and.w	r3, r3, #1
 8001f4a:	2b00      	cmp	r3, #0
 8001f4c:	d005      	beq.n	8001f5a <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8001f4e:	687b      	ldr	r3, [r7, #4]
 8001f50:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f52:	f043 0202 	orr.w	r2, r3, #2
 8001f56:	687b      	ldr	r3, [r7, #4]
 8001f58:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8001f5a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f5e:	f003 0302 	and.w	r3, r3, #2
 8001f62:	2b00      	cmp	r3, #0
 8001f64:	d00b      	beq.n	8001f7e <HAL_UART_IRQHandler+0xf6>
 8001f66:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f6a:	f003 0301 	and.w	r3, r3, #1
 8001f6e:	2b00      	cmp	r3, #0
 8001f70:	d005      	beq.n	8001f7e <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8001f72:	687b      	ldr	r3, [r7, #4]
 8001f74:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001f76:	f043 0204 	orr.w	r2, r3, #4
 8001f7a:	687b      	ldr	r3, [r7, #4]
 8001f7c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8001f7e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001f82:	f003 0308 	and.w	r3, r3, #8
 8001f86:	2b00      	cmp	r3, #0
 8001f88:	d011      	beq.n	8001fae <HAL_UART_IRQHandler+0x126>
 8001f8a:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001f8e:	f003 0320 	and.w	r3, r3, #32
 8001f92:	2b00      	cmp	r3, #0
 8001f94:	d105      	bne.n	8001fa2 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 8001f96:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 8001f9a:	f003 0301 	and.w	r3, r3, #1
 8001f9e:	2b00      	cmp	r3, #0
 8001fa0:	d005      	beq.n	8001fae <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8001fa2:	687b      	ldr	r3, [r7, #4]
 8001fa4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fa6:	f043 0208 	orr.w	r2, r3, #8
 8001faa:	687b      	ldr	r3, [r7, #4]
 8001fac:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8001fae:	687b      	ldr	r3, [r7, #4]
 8001fb0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001fb2:	2b00      	cmp	r3, #0
 8001fb4:	f000 81f2 	beq.w	800239c <HAL_UART_IRQHandler+0x514>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001fb8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8001fbc:	f003 0320 	and.w	r3, r3, #32
 8001fc0:	2b00      	cmp	r3, #0
 8001fc2:	d008      	beq.n	8001fd6 <HAL_UART_IRQHandler+0x14e>
 8001fc4:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8001fc8:	f003 0320 	and.w	r3, r3, #32
 8001fcc:	2b00      	cmp	r3, #0
 8001fce:	d002      	beq.n	8001fd6 <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 8001fd0:	6878      	ldr	r0, [r7, #4]
 8001fd2:	f000 fb7d 	bl	80026d0 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8001fd6:	687b      	ldr	r3, [r7, #4]
 8001fd8:	681b      	ldr	r3, [r3, #0]
 8001fda:	695b      	ldr	r3, [r3, #20]
 8001fdc:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8001fe0:	2b40      	cmp	r3, #64	@ 0x40
 8001fe2:	bf0c      	ite	eq
 8001fe4:	2301      	moveq	r3, #1
 8001fe6:	2300      	movne	r3, #0
 8001fe8:	b2db      	uxtb	r3, r3
 8001fea:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8001fee:	687b      	ldr	r3, [r7, #4]
 8001ff0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8001ff2:	f003 0308 	and.w	r3, r3, #8
 8001ff6:	2b00      	cmp	r3, #0
 8001ff8:	d103      	bne.n	8002002 <HAL_UART_IRQHandler+0x17a>
 8001ffa:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 8001ffe:	2b00      	cmp	r3, #0
 8002000:	d04f      	beq.n	80020a2 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8002002:	6878      	ldr	r0, [r7, #4]
 8002004:	f000 fa85 	bl	8002512 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002008:	687b      	ldr	r3, [r7, #4]
 800200a:	681b      	ldr	r3, [r3, #0]
 800200c:	695b      	ldr	r3, [r3, #20]
 800200e:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002012:	2b40      	cmp	r3, #64	@ 0x40
 8002014:	d141      	bne.n	800209a <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8002016:	687b      	ldr	r3, [r7, #4]
 8002018:	681b      	ldr	r3, [r3, #0]
 800201a:	3314      	adds	r3, #20
 800201c:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002020:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8002024:	e853 3f00 	ldrex	r3, [r3]
 8002028:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 800202c:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8002030:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8002034:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8002038:	687b      	ldr	r3, [r7, #4]
 800203a:	681b      	ldr	r3, [r3, #0]
 800203c:	3314      	adds	r3, #20
 800203e:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8002042:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 8002046:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800204a:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 800204e:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8002052:	e841 2300 	strex	r3, r2, [r1]
 8002056:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800205a:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 800205e:	2b00      	cmp	r3, #0
 8002060:	d1d9      	bne.n	8002016 <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8002062:	687b      	ldr	r3, [r7, #4]
 8002064:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002066:	2b00      	cmp	r3, #0
 8002068:	d013      	beq.n	8002092 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800206a:	687b      	ldr	r3, [r7, #4]
 800206c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800206e:	4a7e      	ldr	r2, [pc, #504]	@ (8002268 <HAL_UART_IRQHandler+0x3e0>)
 8002070:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8002072:	687b      	ldr	r3, [r7, #4]
 8002074:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002076:	4618      	mov	r0, r3
 8002078:	f7fe ffad 	bl	8000fd6 <HAL_DMA_Abort_IT>
 800207c:	4603      	mov	r3, r0
 800207e:	2b00      	cmp	r3, #0
 8002080:	d016      	beq.n	80020b0 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8002082:	687b      	ldr	r3, [r7, #4]
 8002084:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002086:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8002088:	687a      	ldr	r2, [r7, #4]
 800208a:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 800208c:	4610      	mov	r0, r2
 800208e:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002090:	e00e      	b.n	80020b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8002092:	6878      	ldr	r0, [r7, #4]
 8002094:	f000 f994 	bl	80023c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8002098:	e00a      	b.n	80020b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800209a:	6878      	ldr	r0, [r7, #4]
 800209c:	f000 f990 	bl	80023c0 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020a0:	e006      	b.n	80020b0 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80020a2:	6878      	ldr	r0, [r7, #4]
 80020a4:	f000 f98c 	bl	80023c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80020a8:	687b      	ldr	r3, [r7, #4]
 80020aa:	2200      	movs	r2, #0
 80020ac:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80020ae:	e175      	b.n	800239c <HAL_UART_IRQHandler+0x514>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020b0:	bf00      	nop
    return;
 80020b2:	e173      	b.n	800239c <HAL_UART_IRQHandler+0x514>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80020b4:	687b      	ldr	r3, [r7, #4]
 80020b6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80020b8:	2b01      	cmp	r3, #1
 80020ba:	f040 814f 	bne.w	800235c <HAL_UART_IRQHandler+0x4d4>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80020be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80020c2:	f003 0310 	and.w	r3, r3, #16
 80020c6:	2b00      	cmp	r3, #0
 80020c8:	f000 8148 	beq.w	800235c <HAL_UART_IRQHandler+0x4d4>
      && ((cr1its & USART_SR_IDLE) != 0U))
 80020cc:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80020d0:	f003 0310 	and.w	r3, r3, #16
 80020d4:	2b00      	cmp	r3, #0
 80020d6:	f000 8141 	beq.w	800235c <HAL_UART_IRQHandler+0x4d4>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80020da:	2300      	movs	r3, #0
 80020dc:	60bb      	str	r3, [r7, #8]
 80020de:	687b      	ldr	r3, [r7, #4]
 80020e0:	681b      	ldr	r3, [r3, #0]
 80020e2:	681b      	ldr	r3, [r3, #0]
 80020e4:	60bb      	str	r3, [r7, #8]
 80020e6:	687b      	ldr	r3, [r7, #4]
 80020e8:	681b      	ldr	r3, [r3, #0]
 80020ea:	685b      	ldr	r3, [r3, #4]
 80020ec:	60bb      	str	r3, [r7, #8]
 80020ee:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80020f0:	687b      	ldr	r3, [r7, #4]
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	695b      	ldr	r3, [r3, #20]
 80020f6:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80020fa:	2b40      	cmp	r3, #64	@ 0x40
 80020fc:	f040 80b6 	bne.w	800226c <HAL_UART_IRQHandler+0x3e4>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8002100:	687b      	ldr	r3, [r7, #4]
 8002102:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002104:	681b      	ldr	r3, [r3, #0]
 8002106:	685b      	ldr	r3, [r3, #4]
 8002108:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 800210c:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8002110:	2b00      	cmp	r3, #0
 8002112:	f000 8145 	beq.w	80023a0 <HAL_UART_IRQHandler+0x518>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8002116:	687b      	ldr	r3, [r7, #4]
 8002118:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800211a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800211e:	429a      	cmp	r2, r3
 8002120:	f080 813e 	bcs.w	80023a0 <HAL_UART_IRQHandler+0x518>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8002124:	687b      	ldr	r3, [r7, #4]
 8002126:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800212a:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 800212c:	687b      	ldr	r3, [r7, #4]
 800212e:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002130:	69db      	ldr	r3, [r3, #28]
 8002132:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8002136:	f000 8088 	beq.w	800224a <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800213a:	687b      	ldr	r3, [r7, #4]
 800213c:	681b      	ldr	r3, [r3, #0]
 800213e:	330c      	adds	r3, #12
 8002140:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002144:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 8002148:	e853 3f00 	ldrex	r3, [r3]
 800214c:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8002150:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8002154:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 8002158:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 800215c:	687b      	ldr	r3, [r7, #4]
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	330c      	adds	r3, #12
 8002162:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8002166:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800216a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800216e:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8002172:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 8002176:	e841 2300 	strex	r3, r2, [r1]
 800217a:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 800217e:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8002182:	2b00      	cmp	r3, #0
 8002184:	d1d9      	bne.n	800213a <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8002186:	687b      	ldr	r3, [r7, #4]
 8002188:	681b      	ldr	r3, [r3, #0]
 800218a:	3314      	adds	r3, #20
 800218c:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800218e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8002190:	e853 3f00 	ldrex	r3, [r3]
 8002194:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 8002196:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8002198:	f023 0301 	bic.w	r3, r3, #1
 800219c:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 80021a0:	687b      	ldr	r3, [r7, #4]
 80021a2:	681b      	ldr	r3, [r3, #0]
 80021a4:	3314      	adds	r3, #20
 80021a6:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 80021aa:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80021ae:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021b0:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80021b2:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80021b6:	e841 2300 	strex	r3, r2, [r1]
 80021ba:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80021bc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80021be:	2b00      	cmp	r3, #0
 80021c0:	d1e1      	bne.n	8002186 <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80021c2:	687b      	ldr	r3, [r7, #4]
 80021c4:	681b      	ldr	r3, [r3, #0]
 80021c6:	3314      	adds	r3, #20
 80021c8:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80021ca:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80021cc:	e853 3f00 	ldrex	r3, [r3]
 80021d0:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80021d2:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80021d4:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80021d8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80021dc:	687b      	ldr	r3, [r7, #4]
 80021de:	681b      	ldr	r3, [r3, #0]
 80021e0:	3314      	adds	r3, #20
 80021e2:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80021e6:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80021e8:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80021ea:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80021ec:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80021ee:	e841 2300 	strex	r3, r2, [r1]
 80021f2:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80021f4:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80021f6:	2b00      	cmp	r3, #0
 80021f8:	d1e3      	bne.n	80021c2 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80021fa:	687b      	ldr	r3, [r7, #4]
 80021fc:	2220      	movs	r2, #32
 80021fe:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8002202:	687b      	ldr	r3, [r7, #4]
 8002204:	2200      	movs	r2, #0
 8002206:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002208:	687b      	ldr	r3, [r7, #4]
 800220a:	681b      	ldr	r3, [r3, #0]
 800220c:	330c      	adds	r3, #12
 800220e:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002210:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8002212:	e853 3f00 	ldrex	r3, [r3]
 8002216:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 8002218:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800221a:	f023 0310 	bic.w	r3, r3, #16
 800221e:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8002222:	687b      	ldr	r3, [r7, #4]
 8002224:	681b      	ldr	r3, [r3, #0]
 8002226:	330c      	adds	r3, #12
 8002228:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 800222c:	65ba      	str	r2, [r7, #88]	@ 0x58
 800222e:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002230:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8002232:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8002234:	e841 2300 	strex	r3, r2, [r1]
 8002238:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800223a:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 800223c:	2b00      	cmp	r3, #0
 800223e:	d1e3      	bne.n	8002208 <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8002240:	687b      	ldr	r3, [r7, #4]
 8002242:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8002244:	4618      	mov	r0, r3
 8002246:	f7fe fe56 	bl	8000ef6 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800224a:	687b      	ldr	r3, [r7, #4]
 800224c:	2202      	movs	r2, #2
 800224e:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8002250:	687b      	ldr	r3, [r7, #4]
 8002252:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002254:	687b      	ldr	r3, [r7, #4]
 8002256:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002258:	b29b      	uxth	r3, r3
 800225a:	1ad3      	subs	r3, r2, r3
 800225c:	b29b      	uxth	r3, r3
 800225e:	4619      	mov	r1, r3
 8002260:	6878      	ldr	r0, [r7, #4]
 8002262:	f000 f8b7 	bl	80023d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 8002266:	e09b      	b.n	80023a0 <HAL_UART_IRQHandler+0x518>
 8002268:	080025d9 	.word	0x080025d9
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800226c:	687b      	ldr	r3, [r7, #4]
 800226e:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8002270:	687b      	ldr	r3, [r7, #4]
 8002272:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002274:	b29b      	uxth	r3, r3
 8002276:	1ad3      	subs	r3, r2, r3
 8002278:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 800227c:	687b      	ldr	r3, [r7, #4]
 800227e:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002280:	b29b      	uxth	r3, r3
 8002282:	2b00      	cmp	r3, #0
 8002284:	f000 808e 	beq.w	80023a4 <HAL_UART_IRQHandler+0x51c>
          && (nb_rx_data > 0U))
 8002288:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 800228c:	2b00      	cmp	r3, #0
 800228e:	f000 8089 	beq.w	80023a4 <HAL_UART_IRQHandler+0x51c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8002292:	687b      	ldr	r3, [r7, #4]
 8002294:	681b      	ldr	r3, [r3, #0]
 8002296:	330c      	adds	r3, #12
 8002298:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800229a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800229c:	e853 3f00 	ldrex	r3, [r3]
 80022a0:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80022a2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80022a4:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80022a8:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80022ac:	687b      	ldr	r3, [r7, #4]
 80022ae:	681b      	ldr	r3, [r3, #0]
 80022b0:	330c      	adds	r3, #12
 80022b2:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80022b6:	647a      	str	r2, [r7, #68]	@ 0x44
 80022b8:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022ba:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80022bc:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80022be:	e841 2300 	strex	r3, r2, [r1]
 80022c2:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80022c4:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80022c6:	2b00      	cmp	r3, #0
 80022c8:	d1e3      	bne.n	8002292 <HAL_UART_IRQHandler+0x40a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80022ca:	687b      	ldr	r3, [r7, #4]
 80022cc:	681b      	ldr	r3, [r3, #0]
 80022ce:	3314      	adds	r3, #20
 80022d0:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80022d2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80022d4:	e853 3f00 	ldrex	r3, [r3]
 80022d8:	623b      	str	r3, [r7, #32]
   return(result);
 80022da:	6a3b      	ldr	r3, [r7, #32]
 80022dc:	f023 0301 	bic.w	r3, r3, #1
 80022e0:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 80022e4:	687b      	ldr	r3, [r7, #4]
 80022e6:	681b      	ldr	r3, [r3, #0]
 80022e8:	3314      	adds	r3, #20
 80022ea:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 80022ee:	633a      	str	r2, [r7, #48]	@ 0x30
 80022f0:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80022f2:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 80022f4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80022f6:	e841 2300 	strex	r3, r2, [r1]
 80022fa:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 80022fc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80022fe:	2b00      	cmp	r3, #0
 8002300:	d1e3      	bne.n	80022ca <HAL_UART_IRQHandler+0x442>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8002302:	687b      	ldr	r3, [r7, #4]
 8002304:	2220      	movs	r2, #32
 8002306:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800230a:	687b      	ldr	r3, [r7, #4]
 800230c:	2200      	movs	r2, #0
 800230e:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8002310:	687b      	ldr	r3, [r7, #4]
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	330c      	adds	r3, #12
 8002316:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002318:	693b      	ldr	r3, [r7, #16]
 800231a:	e853 3f00 	ldrex	r3, [r3]
 800231e:	60fb      	str	r3, [r7, #12]
   return(result);
 8002320:	68fb      	ldr	r3, [r7, #12]
 8002322:	f023 0310 	bic.w	r3, r3, #16
 8002326:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800232a:	687b      	ldr	r3, [r7, #4]
 800232c:	681b      	ldr	r3, [r3, #0]
 800232e:	330c      	adds	r3, #12
 8002330:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8002334:	61fa      	str	r2, [r7, #28]
 8002336:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002338:	69b9      	ldr	r1, [r7, #24]
 800233a:	69fa      	ldr	r2, [r7, #28]
 800233c:	e841 2300 	strex	r3, r2, [r1]
 8002340:	617b      	str	r3, [r7, #20]
   return(result);
 8002342:	697b      	ldr	r3, [r7, #20]
 8002344:	2b00      	cmp	r3, #0
 8002346:	d1e3      	bne.n	8002310 <HAL_UART_IRQHandler+0x488>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8002348:	687b      	ldr	r3, [r7, #4]
 800234a:	2202      	movs	r2, #2
 800234c:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800234e:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8002352:	4619      	mov	r1, r3
 8002354:	6878      	ldr	r0, [r7, #4]
 8002356:	f000 f83d 	bl	80023d4 <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800235a:	e023      	b.n	80023a4 <HAL_UART_IRQHandler+0x51c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800235c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002360:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002364:	2b00      	cmp	r3, #0
 8002366:	d009      	beq.n	800237c <HAL_UART_IRQHandler+0x4f4>
 8002368:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800236c:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8002370:	2b00      	cmp	r3, #0
 8002372:	d003      	beq.n	800237c <HAL_UART_IRQHandler+0x4f4>
  {
    UART_Transmit_IT(huart);
 8002374:	6878      	ldr	r0, [r7, #4]
 8002376:	f000 f943 	bl	8002600 <UART_Transmit_IT>
    return;
 800237a:	e014      	b.n	80023a6 <HAL_UART_IRQHandler+0x51e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 800237c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8002380:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002384:	2b00      	cmp	r3, #0
 8002386:	d00e      	beq.n	80023a6 <HAL_UART_IRQHandler+0x51e>
 8002388:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 800238c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8002390:	2b00      	cmp	r3, #0
 8002392:	d008      	beq.n	80023a6 <HAL_UART_IRQHandler+0x51e>
  {
    UART_EndTransmit_IT(huart);
 8002394:	6878      	ldr	r0, [r7, #4]
 8002396:	f000 f983 	bl	80026a0 <UART_EndTransmit_IT>
    return;
 800239a:	e004      	b.n	80023a6 <HAL_UART_IRQHandler+0x51e>
    return;
 800239c:	bf00      	nop
 800239e:	e002      	b.n	80023a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80023a0:	bf00      	nop
 80023a2:	e000      	b.n	80023a6 <HAL_UART_IRQHandler+0x51e>
      return;
 80023a4:	bf00      	nop
  }
}
 80023a6:	37e8      	adds	r7, #232	@ 0xe8
 80023a8:	46bd      	mov	sp, r7
 80023aa:	bd80      	pop	{r7, pc}

080023ac <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80023ac:	b480      	push	{r7}
 80023ae:	b083      	sub	sp, #12
 80023b0:	af00      	add	r7, sp, #0
 80023b2:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80023b4:	bf00      	nop
 80023b6:	370c      	adds	r7, #12
 80023b8:	46bd      	mov	sp, r7
 80023ba:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023be:	4770      	bx	lr

080023c0 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80023c0:	b480      	push	{r7}
 80023c2:	b083      	sub	sp, #12
 80023c4:	af00      	add	r7, sp, #0
 80023c6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80023c8:	bf00      	nop
 80023ca:	370c      	adds	r7, #12
 80023cc:	46bd      	mov	sp, r7
 80023ce:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023d2:	4770      	bx	lr

080023d4 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80023d4:	b480      	push	{r7}
 80023d6:	b083      	sub	sp, #12
 80023d8:	af00      	add	r7, sp, #0
 80023da:	6078      	str	r0, [r7, #4]
 80023dc:	460b      	mov	r3, r1
 80023de:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80023e0:	bf00      	nop
 80023e2:	370c      	adds	r7, #12
 80023e4:	46bd      	mov	sp, r7
 80023e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023ea:	4770      	bx	lr

080023ec <UART_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                                     uint32_t Tickstart, uint32_t Timeout)
{
 80023ec:	b580      	push	{r7, lr}
 80023ee:	b086      	sub	sp, #24
 80023f0:	af00      	add	r7, sp, #0
 80023f2:	60f8      	str	r0, [r7, #12]
 80023f4:	60b9      	str	r1, [r7, #8]
 80023f6:	603b      	str	r3, [r7, #0]
 80023f8:	4613      	mov	r3, r2
 80023fa:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80023fc:	e03b      	b.n	8002476 <UART_WaitOnFlagUntilTimeout+0x8a>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 80023fe:	6a3b      	ldr	r3, [r7, #32]
 8002400:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002404:	d037      	beq.n	8002476 <UART_WaitOnFlagUntilTimeout+0x8a>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 8002406:	f7fe fc35 	bl	8000c74 <HAL_GetTick>
 800240a:	4602      	mov	r2, r0
 800240c:	683b      	ldr	r3, [r7, #0]
 800240e:	1ad3      	subs	r3, r2, r3
 8002410:	6a3a      	ldr	r2, [r7, #32]
 8002412:	429a      	cmp	r2, r3
 8002414:	d302      	bcc.n	800241c <UART_WaitOnFlagUntilTimeout+0x30>
 8002416:	6a3b      	ldr	r3, [r7, #32]
 8002418:	2b00      	cmp	r3, #0
 800241a:	d101      	bne.n	8002420 <UART_WaitOnFlagUntilTimeout+0x34>
      {

        return HAL_TIMEOUT;
 800241c:	2303      	movs	r3, #3
 800241e:	e03a      	b.n	8002496 <UART_WaitOnFlagUntilTimeout+0xaa>
      }

      if ((READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U) && (Flag != UART_FLAG_TXE) && (Flag != UART_FLAG_TC))
 8002420:	68fb      	ldr	r3, [r7, #12]
 8002422:	681b      	ldr	r3, [r3, #0]
 8002424:	68db      	ldr	r3, [r3, #12]
 8002426:	f003 0304 	and.w	r3, r3, #4
 800242a:	2b00      	cmp	r3, #0
 800242c:	d023      	beq.n	8002476 <UART_WaitOnFlagUntilTimeout+0x8a>
 800242e:	68bb      	ldr	r3, [r7, #8]
 8002430:	2b80      	cmp	r3, #128	@ 0x80
 8002432:	d020      	beq.n	8002476 <UART_WaitOnFlagUntilTimeout+0x8a>
 8002434:	68bb      	ldr	r3, [r7, #8]
 8002436:	2b40      	cmp	r3, #64	@ 0x40
 8002438:	d01d      	beq.n	8002476 <UART_WaitOnFlagUntilTimeout+0x8a>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 800243a:	68fb      	ldr	r3, [r7, #12]
 800243c:	681b      	ldr	r3, [r3, #0]
 800243e:	681b      	ldr	r3, [r3, #0]
 8002440:	f003 0308 	and.w	r3, r3, #8
 8002444:	2b08      	cmp	r3, #8
 8002446:	d116      	bne.n	8002476 <UART_WaitOnFlagUntilTimeout+0x8a>
        {
          /* Clear Overrun Error flag*/
          __HAL_UART_CLEAR_OREFLAG(huart);
 8002448:	2300      	movs	r3, #0
 800244a:	617b      	str	r3, [r7, #20]
 800244c:	68fb      	ldr	r3, [r7, #12]
 800244e:	681b      	ldr	r3, [r3, #0]
 8002450:	681b      	ldr	r3, [r3, #0]
 8002452:	617b      	str	r3, [r7, #20]
 8002454:	68fb      	ldr	r3, [r7, #12]
 8002456:	681b      	ldr	r3, [r3, #0]
 8002458:	685b      	ldr	r3, [r3, #4]
 800245a:	617b      	str	r3, [r7, #20]
 800245c:	697b      	ldr	r3, [r7, #20]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 800245e:	68f8      	ldr	r0, [r7, #12]
 8002460:	f000 f857 	bl	8002512 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_ORE;
 8002464:	68fb      	ldr	r3, [r7, #12]
 8002466:	2208      	movs	r2, #8
 8002468:	645a      	str	r2, [r3, #68]	@ 0x44

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 800246a:	68fb      	ldr	r3, [r7, #12]
 800246c:	2200      	movs	r2, #0
 800246e:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

          return HAL_ERROR;
 8002472:	2301      	movs	r3, #1
 8002474:	e00f      	b.n	8002496 <UART_WaitOnFlagUntilTimeout+0xaa>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8002476:	68fb      	ldr	r3, [r7, #12]
 8002478:	681b      	ldr	r3, [r3, #0]
 800247a:	681a      	ldr	r2, [r3, #0]
 800247c:	68bb      	ldr	r3, [r7, #8]
 800247e:	4013      	ands	r3, r2
 8002480:	68ba      	ldr	r2, [r7, #8]
 8002482:	429a      	cmp	r2, r3
 8002484:	bf0c      	ite	eq
 8002486:	2301      	moveq	r3, #1
 8002488:	2300      	movne	r3, #0
 800248a:	b2db      	uxtb	r3, r3
 800248c:	461a      	mov	r2, r3
 800248e:	79fb      	ldrb	r3, [r7, #7]
 8002490:	429a      	cmp	r2, r3
 8002492:	d0b4      	beq.n	80023fe <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 8002494:	2300      	movs	r3, #0
}
 8002496:	4618      	mov	r0, r3
 8002498:	3718      	adds	r7, #24
 800249a:	46bd      	mov	sp, r7
 800249c:	bd80      	pop	{r7, pc}

0800249e <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800249e:	b480      	push	{r7}
 80024a0:	b085      	sub	sp, #20
 80024a2:	af00      	add	r7, sp, #0
 80024a4:	60f8      	str	r0, [r7, #12]
 80024a6:	60b9      	str	r1, [r7, #8]
 80024a8:	4613      	mov	r3, r2
 80024aa:	80fb      	strh	r3, [r7, #6]
  huart->pRxBuffPtr = pData;
 80024ac:	68fb      	ldr	r3, [r7, #12]
 80024ae:	68ba      	ldr	r2, [r7, #8]
 80024b0:	629a      	str	r2, [r3, #40]	@ 0x28
  huart->RxXferSize = Size;
 80024b2:	68fb      	ldr	r3, [r7, #12]
 80024b4:	88fa      	ldrh	r2, [r7, #6]
 80024b6:	859a      	strh	r2, [r3, #44]	@ 0x2c
  huart->RxXferCount = Size;
 80024b8:	68fb      	ldr	r3, [r7, #12]
 80024ba:	88fa      	ldrh	r2, [r7, #6]
 80024bc:	85da      	strh	r2, [r3, #46]	@ 0x2e

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80024be:	68fb      	ldr	r3, [r7, #12]
 80024c0:	2200      	movs	r2, #0
 80024c2:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80024c4:	68fb      	ldr	r3, [r7, #12]
 80024c6:	2222      	movs	r2, #34	@ 0x22
 80024c8:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

  if (huart->Init.Parity != UART_PARITY_NONE)
 80024cc:	68fb      	ldr	r3, [r7, #12]
 80024ce:	691b      	ldr	r3, [r3, #16]
 80024d0:	2b00      	cmp	r3, #0
 80024d2:	d007      	beq.n	80024e4 <UART_Start_Receive_IT+0x46>
  {
    /* Enable the UART Parity Error Interrupt */
    __HAL_UART_ENABLE_IT(huart, UART_IT_PE);
 80024d4:	68fb      	ldr	r3, [r7, #12]
 80024d6:	681b      	ldr	r3, [r3, #0]
 80024d8:	68da      	ldr	r2, [r3, #12]
 80024da:	68fb      	ldr	r3, [r7, #12]
 80024dc:	681b      	ldr	r3, [r3, #0]
 80024de:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80024e2:	60da      	str	r2, [r3, #12]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(huart, UART_IT_ERR);
 80024e4:	68fb      	ldr	r3, [r7, #12]
 80024e6:	681b      	ldr	r3, [r3, #0]
 80024e8:	695a      	ldr	r2, [r3, #20]
 80024ea:	68fb      	ldr	r3, [r7, #12]
 80024ec:	681b      	ldr	r3, [r3, #0]
 80024ee:	f042 0201 	orr.w	r2, r2, #1
 80024f2:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(huart, UART_IT_RXNE);
 80024f4:	68fb      	ldr	r3, [r7, #12]
 80024f6:	681b      	ldr	r3, [r3, #0]
 80024f8:	68da      	ldr	r2, [r3, #12]
 80024fa:	68fb      	ldr	r3, [r7, #12]
 80024fc:	681b      	ldr	r3, [r3, #0]
 80024fe:	f042 0220 	orr.w	r2, r2, #32
 8002502:	60da      	str	r2, [r3, #12]

  return HAL_OK;
 8002504:	2300      	movs	r3, #0
}
 8002506:	4618      	mov	r0, r3
 8002508:	3714      	adds	r7, #20
 800250a:	46bd      	mov	sp, r7
 800250c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002510:	4770      	bx	lr

08002512 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8002512:	b480      	push	{r7}
 8002514:	b095      	sub	sp, #84	@ 0x54
 8002516:	af00      	add	r7, sp, #0
 8002518:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800251a:	687b      	ldr	r3, [r7, #4]
 800251c:	681b      	ldr	r3, [r3, #0]
 800251e:	330c      	adds	r3, #12
 8002520:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002522:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8002524:	e853 3f00 	ldrex	r3, [r3]
 8002528:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800252a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800252c:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8002530:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8002532:	687b      	ldr	r3, [r7, #4]
 8002534:	681b      	ldr	r3, [r3, #0]
 8002536:	330c      	adds	r3, #12
 8002538:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800253a:	643a      	str	r2, [r7, #64]	@ 0x40
 800253c:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800253e:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8002540:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8002542:	e841 2300 	strex	r3, r2, [r1]
 8002546:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 8002548:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800254a:	2b00      	cmp	r3, #0
 800254c:	d1e5      	bne.n	800251a <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800254e:	687b      	ldr	r3, [r7, #4]
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	3314      	adds	r3, #20
 8002554:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002556:	6a3b      	ldr	r3, [r7, #32]
 8002558:	e853 3f00 	ldrex	r3, [r3]
 800255c:	61fb      	str	r3, [r7, #28]
   return(result);
 800255e:	69fb      	ldr	r3, [r7, #28]
 8002560:	f023 0301 	bic.w	r3, r3, #1
 8002564:	64bb      	str	r3, [r7, #72]	@ 0x48
 8002566:	687b      	ldr	r3, [r7, #4]
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	3314      	adds	r3, #20
 800256c:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 800256e:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8002570:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8002572:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8002574:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8002576:	e841 2300 	strex	r3, r2, [r1]
 800257a:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800257c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800257e:	2b00      	cmp	r3, #0
 8002580:	d1e5      	bne.n	800254e <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8002582:	687b      	ldr	r3, [r7, #4]
 8002584:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002586:	2b01      	cmp	r3, #1
 8002588:	d119      	bne.n	80025be <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800258a:	687b      	ldr	r3, [r7, #4]
 800258c:	681b      	ldr	r3, [r3, #0]
 800258e:	330c      	adds	r3, #12
 8002590:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8002592:	68fb      	ldr	r3, [r7, #12]
 8002594:	e853 3f00 	ldrex	r3, [r3]
 8002598:	60bb      	str	r3, [r7, #8]
   return(result);
 800259a:	68bb      	ldr	r3, [r7, #8]
 800259c:	f023 0310 	bic.w	r3, r3, #16
 80025a0:	647b      	str	r3, [r7, #68]	@ 0x44
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	330c      	adds	r3, #12
 80025a8:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80025aa:	61ba      	str	r2, [r7, #24]
 80025ac:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80025ae:	6979      	ldr	r1, [r7, #20]
 80025b0:	69ba      	ldr	r2, [r7, #24]
 80025b2:	e841 2300 	strex	r3, r2, [r1]
 80025b6:	613b      	str	r3, [r7, #16]
   return(result);
 80025b8:	693b      	ldr	r3, [r7, #16]
 80025ba:	2b00      	cmp	r3, #0
 80025bc:	d1e5      	bne.n	800258a <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80025be:	687b      	ldr	r3, [r7, #4]
 80025c0:	2220      	movs	r2, #32
 80025c2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80025c6:	687b      	ldr	r3, [r7, #4]
 80025c8:	2200      	movs	r2, #0
 80025ca:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80025cc:	bf00      	nop
 80025ce:	3754      	adds	r7, #84	@ 0x54
 80025d0:	46bd      	mov	sp, r7
 80025d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025d6:	4770      	bx	lr

080025d8 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80025d8:	b580      	push	{r7, lr}
 80025da:	b084      	sub	sp, #16
 80025dc:	af00      	add	r7, sp, #0
 80025de:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80025e0:	687b      	ldr	r3, [r7, #4]
 80025e2:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80025e4:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80025e6:	68fb      	ldr	r3, [r7, #12]
 80025e8:	2200      	movs	r2, #0
 80025ea:	85da      	strh	r2, [r3, #46]	@ 0x2e
  huart->TxXferCount = 0x00U;
 80025ec:	68fb      	ldr	r3, [r7, #12]
 80025ee:	2200      	movs	r2, #0
 80025f0:	84da      	strh	r2, [r3, #38]	@ 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80025f2:	68f8      	ldr	r0, [r7, #12]
 80025f4:	f7ff fee4 	bl	80023c0 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80025f8:	bf00      	nop
 80025fa:	3710      	adds	r7, #16
 80025fc:	46bd      	mov	sp, r7
 80025fe:	bd80      	pop	{r7, pc}

08002600 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8002600:	b480      	push	{r7}
 8002602:	b085      	sub	sp, #20
 8002604:	af00      	add	r7, sp, #0
 8002606:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8002608:	687b      	ldr	r3, [r7, #4]
 800260a:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 800260e:	b2db      	uxtb	r3, r3
 8002610:	2b21      	cmp	r3, #33	@ 0x21
 8002612:	d13e      	bne.n	8002692 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8002614:	687b      	ldr	r3, [r7, #4]
 8002616:	689b      	ldr	r3, [r3, #8]
 8002618:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 800261c:	d114      	bne.n	8002648 <UART_Transmit_IT+0x48>
 800261e:	687b      	ldr	r3, [r7, #4]
 8002620:	691b      	ldr	r3, [r3, #16]
 8002622:	2b00      	cmp	r3, #0
 8002624:	d110      	bne.n	8002648 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8002626:	687b      	ldr	r3, [r7, #4]
 8002628:	6a1b      	ldr	r3, [r3, #32]
 800262a:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 800262c:	68fb      	ldr	r3, [r7, #12]
 800262e:	881b      	ldrh	r3, [r3, #0]
 8002630:	461a      	mov	r2, r3
 8002632:	687b      	ldr	r3, [r7, #4]
 8002634:	681b      	ldr	r3, [r3, #0]
 8002636:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800263a:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 800263c:	687b      	ldr	r3, [r7, #4]
 800263e:	6a1b      	ldr	r3, [r3, #32]
 8002640:	1c9a      	adds	r2, r3, #2
 8002642:	687b      	ldr	r3, [r7, #4]
 8002644:	621a      	str	r2, [r3, #32]
 8002646:	e008      	b.n	800265a <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8002648:	687b      	ldr	r3, [r7, #4]
 800264a:	6a1b      	ldr	r3, [r3, #32]
 800264c:	1c59      	adds	r1, r3, #1
 800264e:	687a      	ldr	r2, [r7, #4]
 8002650:	6211      	str	r1, [r2, #32]
 8002652:	781a      	ldrb	r2, [r3, #0]
 8002654:	687b      	ldr	r3, [r7, #4]
 8002656:	681b      	ldr	r3, [r3, #0]
 8002658:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 800265a:	687b      	ldr	r3, [r7, #4]
 800265c:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 800265e:	b29b      	uxth	r3, r3
 8002660:	3b01      	subs	r3, #1
 8002662:	b29b      	uxth	r3, r3
 8002664:	687a      	ldr	r2, [r7, #4]
 8002666:	4619      	mov	r1, r3
 8002668:	84d1      	strh	r1, [r2, #38]	@ 0x26
 800266a:	2b00      	cmp	r3, #0
 800266c:	d10f      	bne.n	800268e <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800266e:	687b      	ldr	r3, [r7, #4]
 8002670:	681b      	ldr	r3, [r3, #0]
 8002672:	68da      	ldr	r2, [r3, #12]
 8002674:	687b      	ldr	r3, [r7, #4]
 8002676:	681b      	ldr	r3, [r3, #0]
 8002678:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 800267c:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 800267e:	687b      	ldr	r3, [r7, #4]
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	68da      	ldr	r2, [r3, #12]
 8002684:	687b      	ldr	r3, [r7, #4]
 8002686:	681b      	ldr	r3, [r3, #0]
 8002688:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 800268c:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 800268e:	2300      	movs	r3, #0
 8002690:	e000      	b.n	8002694 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8002692:	2302      	movs	r3, #2
  }
}
 8002694:	4618      	mov	r0, r3
 8002696:	3714      	adds	r7, #20
 8002698:	46bd      	mov	sp, r7
 800269a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800269e:	4770      	bx	lr

080026a0 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80026a0:	b580      	push	{r7, lr}
 80026a2:	b082      	sub	sp, #8
 80026a4:	af00      	add	r7, sp, #0
 80026a6:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80026a8:	687b      	ldr	r3, [r7, #4]
 80026aa:	681b      	ldr	r3, [r3, #0]
 80026ac:	68da      	ldr	r2, [r3, #12]
 80026ae:	687b      	ldr	r3, [r7, #4]
 80026b0:	681b      	ldr	r3, [r3, #0]
 80026b2:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 80026b6:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80026b8:	687b      	ldr	r3, [r7, #4]
 80026ba:	2220      	movs	r2, #32
 80026bc:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80026c0:	6878      	ldr	r0, [r7, #4]
 80026c2:	f7ff fe73 	bl	80023ac <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80026c6:	2300      	movs	r3, #0
}
 80026c8:	4618      	mov	r0, r3
 80026ca:	3708      	adds	r7, #8
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bd80      	pop	{r7, pc}

080026d0 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80026d0:	b580      	push	{r7, lr}
 80026d2:	b08c      	sub	sp, #48	@ 0x30
 80026d4:	af00      	add	r7, sp, #0
 80026d6:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80026d8:	687b      	ldr	r3, [r7, #4]
 80026da:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 80026de:	b2db      	uxtb	r3, r3
 80026e0:	2b22      	cmp	r3, #34	@ 0x22
 80026e2:	f040 80ae 	bne.w	8002842 <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80026e6:	687b      	ldr	r3, [r7, #4]
 80026e8:	689b      	ldr	r3, [r3, #8]
 80026ea:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 80026ee:	d117      	bne.n	8002720 <UART_Receive_IT+0x50>
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	691b      	ldr	r3, [r3, #16]
 80026f4:	2b00      	cmp	r3, #0
 80026f6:	d113      	bne.n	8002720 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 80026f8:	2300      	movs	r3, #0
 80026fa:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 80026fc:	687b      	ldr	r3, [r7, #4]
 80026fe:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002700:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8002702:	687b      	ldr	r3, [r7, #4]
 8002704:	681b      	ldr	r3, [r3, #0]
 8002706:	685b      	ldr	r3, [r3, #4]
 8002708:	b29b      	uxth	r3, r3
 800270a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 800270e:	b29a      	uxth	r2, r3
 8002710:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8002712:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8002714:	687b      	ldr	r3, [r7, #4]
 8002716:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002718:	1c9a      	adds	r2, r3, #2
 800271a:	687b      	ldr	r3, [r7, #4]
 800271c:	629a      	str	r2, [r3, #40]	@ 0x28
 800271e:	e026      	b.n	800276e <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8002720:	687b      	ldr	r3, [r7, #4]
 8002722:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002724:	62fb      	str	r3, [r7, #44]	@ 0x2c
      pdata16bits  = NULL;
 8002726:	2300      	movs	r3, #0
 8002728:	62bb      	str	r3, [r7, #40]	@ 0x28

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 800272a:	687b      	ldr	r3, [r7, #4]
 800272c:	689b      	ldr	r3, [r3, #8]
 800272e:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8002732:	d007      	beq.n	8002744 <UART_Receive_IT+0x74>
 8002734:	687b      	ldr	r3, [r7, #4]
 8002736:	689b      	ldr	r3, [r3, #8]
 8002738:	2b00      	cmp	r3, #0
 800273a:	d10a      	bne.n	8002752 <UART_Receive_IT+0x82>
 800273c:	687b      	ldr	r3, [r7, #4]
 800273e:	691b      	ldr	r3, [r3, #16]
 8002740:	2b00      	cmp	r3, #0
 8002742:	d106      	bne.n	8002752 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8002744:	687b      	ldr	r3, [r7, #4]
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	685b      	ldr	r3, [r3, #4]
 800274a:	b2da      	uxtb	r2, r3
 800274c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 800274e:	701a      	strb	r2, [r3, #0]
 8002750:	e008      	b.n	8002764 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8002752:	687b      	ldr	r3, [r7, #4]
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	685b      	ldr	r3, [r3, #4]
 8002758:	b2db      	uxtb	r3, r3
 800275a:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 800275e:	b2da      	uxtb	r2, r3
 8002760:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8002762:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8002764:	687b      	ldr	r3, [r7, #4]
 8002766:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8002768:	1c5a      	adds	r2, r3, #1
 800276a:	687b      	ldr	r3, [r7, #4]
 800276c:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 800276e:	687b      	ldr	r3, [r7, #4]
 8002770:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8002772:	b29b      	uxth	r3, r3
 8002774:	3b01      	subs	r3, #1
 8002776:	b29b      	uxth	r3, r3
 8002778:	687a      	ldr	r2, [r7, #4]
 800277a:	4619      	mov	r1, r3
 800277c:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 800277e:	2b00      	cmp	r3, #0
 8002780:	d15d      	bne.n	800283e <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8002782:	687b      	ldr	r3, [r7, #4]
 8002784:	681b      	ldr	r3, [r3, #0]
 8002786:	68da      	ldr	r2, [r3, #12]
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	f022 0220 	bic.w	r2, r2, #32
 8002790:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8002792:	687b      	ldr	r3, [r7, #4]
 8002794:	681b      	ldr	r3, [r3, #0]
 8002796:	68da      	ldr	r2, [r3, #12]
 8002798:	687b      	ldr	r3, [r7, #4]
 800279a:	681b      	ldr	r3, [r3, #0]
 800279c:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 80027a0:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80027a2:	687b      	ldr	r3, [r7, #4]
 80027a4:	681b      	ldr	r3, [r3, #0]
 80027a6:	695a      	ldr	r2, [r3, #20]
 80027a8:	687b      	ldr	r3, [r7, #4]
 80027aa:	681b      	ldr	r3, [r3, #0]
 80027ac:	f022 0201 	bic.w	r2, r2, #1
 80027b0:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80027b2:	687b      	ldr	r3, [r7, #4]
 80027b4:	2220      	movs	r2, #32
 80027b6:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80027ba:	687b      	ldr	r3, [r7, #4]
 80027bc:	2200      	movs	r2, #0
 80027be:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80027c0:	687b      	ldr	r3, [r7, #4]
 80027c2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80027c4:	2b01      	cmp	r3, #1
 80027c6:	d135      	bne.n	8002834 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80027c8:	687b      	ldr	r3, [r7, #4]
 80027ca:	2200      	movs	r2, #0
 80027cc:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80027ce:	687b      	ldr	r3, [r7, #4]
 80027d0:	681b      	ldr	r3, [r3, #0]
 80027d2:	330c      	adds	r3, #12
 80027d4:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80027d6:	697b      	ldr	r3, [r7, #20]
 80027d8:	e853 3f00 	ldrex	r3, [r3]
 80027dc:	613b      	str	r3, [r7, #16]
   return(result);
 80027de:	693b      	ldr	r3, [r7, #16]
 80027e0:	f023 0310 	bic.w	r3, r3, #16
 80027e4:	627b      	str	r3, [r7, #36]	@ 0x24
 80027e6:	687b      	ldr	r3, [r7, #4]
 80027e8:	681b      	ldr	r3, [r3, #0]
 80027ea:	330c      	adds	r3, #12
 80027ec:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80027ee:	623a      	str	r2, [r7, #32]
 80027f0:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80027f2:	69f9      	ldr	r1, [r7, #28]
 80027f4:	6a3a      	ldr	r2, [r7, #32]
 80027f6:	e841 2300 	strex	r3, r2, [r1]
 80027fa:	61bb      	str	r3, [r7, #24]
   return(result);
 80027fc:	69bb      	ldr	r3, [r7, #24]
 80027fe:	2b00      	cmp	r3, #0
 8002800:	d1e5      	bne.n	80027ce <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8002802:	687b      	ldr	r3, [r7, #4]
 8002804:	681b      	ldr	r3, [r3, #0]
 8002806:	681b      	ldr	r3, [r3, #0]
 8002808:	f003 0310 	and.w	r3, r3, #16
 800280c:	2b10      	cmp	r3, #16
 800280e:	d10a      	bne.n	8002826 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8002810:	2300      	movs	r3, #0
 8002812:	60fb      	str	r3, [r7, #12]
 8002814:	687b      	ldr	r3, [r7, #4]
 8002816:	681b      	ldr	r3, [r3, #0]
 8002818:	681b      	ldr	r3, [r3, #0]
 800281a:	60fb      	str	r3, [r7, #12]
 800281c:	687b      	ldr	r3, [r7, #4]
 800281e:	681b      	ldr	r3, [r3, #0]
 8002820:	685b      	ldr	r3, [r3, #4]
 8002822:	60fb      	str	r3, [r7, #12]
 8002824:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8002826:	687b      	ldr	r3, [r7, #4]
 8002828:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800282a:	4619      	mov	r1, r3
 800282c:	6878      	ldr	r0, [r7, #4]
 800282e:	f7ff fdd1 	bl	80023d4 <HAL_UARTEx_RxEventCallback>
 8002832:	e002      	b.n	800283a <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8002834:	6878      	ldr	r0, [r7, #4]
 8002836:	f7fd fedb 	bl	80005f0 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 800283a:	2300      	movs	r3, #0
 800283c:	e002      	b.n	8002844 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 800283e:	2300      	movs	r3, #0
 8002840:	e000      	b.n	8002844 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8002842:	2302      	movs	r3, #2
  }
}
 8002844:	4618      	mov	r0, r3
 8002846:	3730      	adds	r7, #48	@ 0x30
 8002848:	46bd      	mov	sp, r7
 800284a:	bd80      	pop	{r7, pc}

0800284c <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 800284c:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002850:	b0c0      	sub	sp, #256	@ 0x100
 8002852:	af00      	add	r7, sp, #0
 8002854:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8002858:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800285c:	681b      	ldr	r3, [r3, #0]
 800285e:	691b      	ldr	r3, [r3, #16]
 8002860:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8002864:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002868:	68d9      	ldr	r1, [r3, #12]
 800286a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800286e:	681a      	ldr	r2, [r3, #0]
 8002870:	ea40 0301 	orr.w	r3, r0, r1
 8002874:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8002876:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800287a:	689a      	ldr	r2, [r3, #8]
 800287c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002880:	691b      	ldr	r3, [r3, #16]
 8002882:	431a      	orrs	r2, r3
 8002884:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002888:	695b      	ldr	r3, [r3, #20]
 800288a:	431a      	orrs	r2, r3
 800288c:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002890:	69db      	ldr	r3, [r3, #28]
 8002892:	4313      	orrs	r3, r2
 8002894:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8002898:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800289c:	681b      	ldr	r3, [r3, #0]
 800289e:	68db      	ldr	r3, [r3, #12]
 80028a0:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 80028a4:	f021 010c 	bic.w	r1, r1, #12
 80028a8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ac:	681a      	ldr	r2, [r3, #0]
 80028ae:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 80028b2:	430b      	orrs	r3, r1
 80028b4:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80028b6:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028ba:	681b      	ldr	r3, [r3, #0]
 80028bc:	695b      	ldr	r3, [r3, #20]
 80028be:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 80028c2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028c6:	6999      	ldr	r1, [r3, #24]
 80028c8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028cc:	681a      	ldr	r2, [r3, #0]
 80028ce:	ea40 0301 	orr.w	r3, r0, r1
 80028d2:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80028d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028d8:	681a      	ldr	r2, [r3, #0]
 80028da:	4b8f      	ldr	r3, [pc, #572]	@ (8002b18 <UART_SetConfig+0x2cc>)
 80028dc:	429a      	cmp	r2, r3
 80028de:	d005      	beq.n	80028ec <UART_SetConfig+0xa0>
 80028e0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80028e4:	681a      	ldr	r2, [r3, #0]
 80028e6:	4b8d      	ldr	r3, [pc, #564]	@ (8002b1c <UART_SetConfig+0x2d0>)
 80028e8:	429a      	cmp	r2, r3
 80028ea:	d104      	bne.n	80028f6 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80028ec:	f7ff f9b8 	bl	8001c60 <HAL_RCC_GetPCLK2Freq>
 80028f0:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 80028f4:	e003      	b.n	80028fe <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80028f6:	f7ff f99f 	bl	8001c38 <HAL_RCC_GetPCLK1Freq>
 80028fa:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80028fe:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002902:	69db      	ldr	r3, [r3, #28]
 8002904:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8002908:	f040 810c 	bne.w	8002b24 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800290c:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002910:	2200      	movs	r2, #0
 8002912:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8002916:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 800291a:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 800291e:	4622      	mov	r2, r4
 8002920:	462b      	mov	r3, r5
 8002922:	1891      	adds	r1, r2, r2
 8002924:	65b9      	str	r1, [r7, #88]	@ 0x58
 8002926:	415b      	adcs	r3, r3
 8002928:	65fb      	str	r3, [r7, #92]	@ 0x5c
 800292a:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 800292e:	4621      	mov	r1, r4
 8002930:	eb12 0801 	adds.w	r8, r2, r1
 8002934:	4629      	mov	r1, r5
 8002936:	eb43 0901 	adc.w	r9, r3, r1
 800293a:	f04f 0200 	mov.w	r2, #0
 800293e:	f04f 0300 	mov.w	r3, #0
 8002942:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8002946:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 800294a:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800294e:	4690      	mov	r8, r2
 8002950:	4699      	mov	r9, r3
 8002952:	4623      	mov	r3, r4
 8002954:	eb18 0303 	adds.w	r3, r8, r3
 8002958:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 800295c:	462b      	mov	r3, r5
 800295e:	eb49 0303 	adc.w	r3, r9, r3
 8002962:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8002966:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800296a:	685b      	ldr	r3, [r3, #4]
 800296c:	2200      	movs	r2, #0
 800296e:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8002972:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8002976:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 800297a:	460b      	mov	r3, r1
 800297c:	18db      	adds	r3, r3, r3
 800297e:	653b      	str	r3, [r7, #80]	@ 0x50
 8002980:	4613      	mov	r3, r2
 8002982:	eb42 0303 	adc.w	r3, r2, r3
 8002986:	657b      	str	r3, [r7, #84]	@ 0x54
 8002988:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 800298c:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8002990:	f7fd fc7e 	bl	8000290 <__aeabi_uldivmod>
 8002994:	4602      	mov	r2, r0
 8002996:	460b      	mov	r3, r1
 8002998:	4b61      	ldr	r3, [pc, #388]	@ (8002b20 <UART_SetConfig+0x2d4>)
 800299a:	fba3 2302 	umull	r2, r3, r3, r2
 800299e:	095b      	lsrs	r3, r3, #5
 80029a0:	011c      	lsls	r4, r3, #4
 80029a2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 80029a6:	2200      	movs	r2, #0
 80029a8:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 80029ac:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 80029b0:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 80029b4:	4642      	mov	r2, r8
 80029b6:	464b      	mov	r3, r9
 80029b8:	1891      	adds	r1, r2, r2
 80029ba:	64b9      	str	r1, [r7, #72]	@ 0x48
 80029bc:	415b      	adcs	r3, r3
 80029be:	64fb      	str	r3, [r7, #76]	@ 0x4c
 80029c0:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 80029c4:	4641      	mov	r1, r8
 80029c6:	eb12 0a01 	adds.w	sl, r2, r1
 80029ca:	4649      	mov	r1, r9
 80029cc:	eb43 0b01 	adc.w	fp, r3, r1
 80029d0:	f04f 0200 	mov.w	r2, #0
 80029d4:	f04f 0300 	mov.w	r3, #0
 80029d8:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 80029dc:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 80029e0:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 80029e4:	4692      	mov	sl, r2
 80029e6:	469b      	mov	fp, r3
 80029e8:	4643      	mov	r3, r8
 80029ea:	eb1a 0303 	adds.w	r3, sl, r3
 80029ee:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80029f2:	464b      	mov	r3, r9
 80029f4:	eb4b 0303 	adc.w	r3, fp, r3
 80029f8:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 80029fc:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002a00:	685b      	ldr	r3, [r3, #4]
 8002a02:	2200      	movs	r2, #0
 8002a04:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8002a08:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8002a0c:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8002a10:	460b      	mov	r3, r1
 8002a12:	18db      	adds	r3, r3, r3
 8002a14:	643b      	str	r3, [r7, #64]	@ 0x40
 8002a16:	4613      	mov	r3, r2
 8002a18:	eb42 0303 	adc.w	r3, r2, r3
 8002a1c:	647b      	str	r3, [r7, #68]	@ 0x44
 8002a1e:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8002a22:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8002a26:	f7fd fc33 	bl	8000290 <__aeabi_uldivmod>
 8002a2a:	4602      	mov	r2, r0
 8002a2c:	460b      	mov	r3, r1
 8002a2e:	4611      	mov	r1, r2
 8002a30:	4b3b      	ldr	r3, [pc, #236]	@ (8002b20 <UART_SetConfig+0x2d4>)
 8002a32:	fba3 2301 	umull	r2, r3, r3, r1
 8002a36:	095b      	lsrs	r3, r3, #5
 8002a38:	2264      	movs	r2, #100	@ 0x64
 8002a3a:	fb02 f303 	mul.w	r3, r2, r3
 8002a3e:	1acb      	subs	r3, r1, r3
 8002a40:	00db      	lsls	r3, r3, #3
 8002a42:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8002a46:	4b36      	ldr	r3, [pc, #216]	@ (8002b20 <UART_SetConfig+0x2d4>)
 8002a48:	fba3 2302 	umull	r2, r3, r3, r2
 8002a4c:	095b      	lsrs	r3, r3, #5
 8002a4e:	005b      	lsls	r3, r3, #1
 8002a50:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8002a54:	441c      	add	r4, r3
 8002a56:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002a5a:	2200      	movs	r2, #0
 8002a5c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8002a60:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8002a64:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8002a68:	4642      	mov	r2, r8
 8002a6a:	464b      	mov	r3, r9
 8002a6c:	1891      	adds	r1, r2, r2
 8002a6e:	63b9      	str	r1, [r7, #56]	@ 0x38
 8002a70:	415b      	adcs	r3, r3
 8002a72:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8002a74:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8002a78:	4641      	mov	r1, r8
 8002a7a:	1851      	adds	r1, r2, r1
 8002a7c:	6339      	str	r1, [r7, #48]	@ 0x30
 8002a7e:	4649      	mov	r1, r9
 8002a80:	414b      	adcs	r3, r1
 8002a82:	637b      	str	r3, [r7, #52]	@ 0x34
 8002a84:	f04f 0200 	mov.w	r2, #0
 8002a88:	f04f 0300 	mov.w	r3, #0
 8002a8c:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8002a90:	4659      	mov	r1, fp
 8002a92:	00cb      	lsls	r3, r1, #3
 8002a94:	4651      	mov	r1, sl
 8002a96:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002a9a:	4651      	mov	r1, sl
 8002a9c:	00ca      	lsls	r2, r1, #3
 8002a9e:	4610      	mov	r0, r2
 8002aa0:	4619      	mov	r1, r3
 8002aa2:	4603      	mov	r3, r0
 8002aa4:	4642      	mov	r2, r8
 8002aa6:	189b      	adds	r3, r3, r2
 8002aa8:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8002aac:	464b      	mov	r3, r9
 8002aae:	460a      	mov	r2, r1
 8002ab0:	eb42 0303 	adc.w	r3, r2, r3
 8002ab4:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8002ab8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002abc:	685b      	ldr	r3, [r3, #4]
 8002abe:	2200      	movs	r2, #0
 8002ac0:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8002ac4:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8002ac8:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8002acc:	460b      	mov	r3, r1
 8002ace:	18db      	adds	r3, r3, r3
 8002ad0:	62bb      	str	r3, [r7, #40]	@ 0x28
 8002ad2:	4613      	mov	r3, r2
 8002ad4:	eb42 0303 	adc.w	r3, r2, r3
 8002ad8:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8002ada:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8002ade:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8002ae2:	f7fd fbd5 	bl	8000290 <__aeabi_uldivmod>
 8002ae6:	4602      	mov	r2, r0
 8002ae8:	460b      	mov	r3, r1
 8002aea:	4b0d      	ldr	r3, [pc, #52]	@ (8002b20 <UART_SetConfig+0x2d4>)
 8002aec:	fba3 1302 	umull	r1, r3, r3, r2
 8002af0:	095b      	lsrs	r3, r3, #5
 8002af2:	2164      	movs	r1, #100	@ 0x64
 8002af4:	fb01 f303 	mul.w	r3, r1, r3
 8002af8:	1ad3      	subs	r3, r2, r3
 8002afa:	00db      	lsls	r3, r3, #3
 8002afc:	3332      	adds	r3, #50	@ 0x32
 8002afe:	4a08      	ldr	r2, [pc, #32]	@ (8002b20 <UART_SetConfig+0x2d4>)
 8002b00:	fba2 2303 	umull	r2, r3, r2, r3
 8002b04:	095b      	lsrs	r3, r3, #5
 8002b06:	f003 0207 	and.w	r2, r3, #7
 8002b0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b0e:	681b      	ldr	r3, [r3, #0]
 8002b10:	4422      	add	r2, r4
 8002b12:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8002b14:	e106      	b.n	8002d24 <UART_SetConfig+0x4d8>
 8002b16:	bf00      	nop
 8002b18:	40011000 	.word	0x40011000
 8002b1c:	40011400 	.word	0x40011400
 8002b20:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8002b24:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002b28:	2200      	movs	r2, #0
 8002b2a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8002b2e:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8002b32:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8002b36:	4642      	mov	r2, r8
 8002b38:	464b      	mov	r3, r9
 8002b3a:	1891      	adds	r1, r2, r2
 8002b3c:	6239      	str	r1, [r7, #32]
 8002b3e:	415b      	adcs	r3, r3
 8002b40:	627b      	str	r3, [r7, #36]	@ 0x24
 8002b42:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8002b46:	4641      	mov	r1, r8
 8002b48:	1854      	adds	r4, r2, r1
 8002b4a:	4649      	mov	r1, r9
 8002b4c:	eb43 0501 	adc.w	r5, r3, r1
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	f04f 0300 	mov.w	r3, #0
 8002b58:	00eb      	lsls	r3, r5, #3
 8002b5a:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8002b5e:	00e2      	lsls	r2, r4, #3
 8002b60:	4614      	mov	r4, r2
 8002b62:	461d      	mov	r5, r3
 8002b64:	4643      	mov	r3, r8
 8002b66:	18e3      	adds	r3, r4, r3
 8002b68:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8002b6c:	464b      	mov	r3, r9
 8002b6e:	eb45 0303 	adc.w	r3, r5, r3
 8002b72:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8002b76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002b7a:	685b      	ldr	r3, [r3, #4]
 8002b7c:	2200      	movs	r2, #0
 8002b7e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8002b82:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8002b86:	f04f 0200 	mov.w	r2, #0
 8002b8a:	f04f 0300 	mov.w	r3, #0
 8002b8e:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8002b92:	4629      	mov	r1, r5
 8002b94:	008b      	lsls	r3, r1, #2
 8002b96:	4621      	mov	r1, r4
 8002b98:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002b9c:	4621      	mov	r1, r4
 8002b9e:	008a      	lsls	r2, r1, #2
 8002ba0:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8002ba4:	f7fd fb74 	bl	8000290 <__aeabi_uldivmod>
 8002ba8:	4602      	mov	r2, r0
 8002baa:	460b      	mov	r3, r1
 8002bac:	4b60      	ldr	r3, [pc, #384]	@ (8002d30 <UART_SetConfig+0x4e4>)
 8002bae:	fba3 2302 	umull	r2, r3, r3, r2
 8002bb2:	095b      	lsrs	r3, r3, #5
 8002bb4:	011c      	lsls	r4, r3, #4
 8002bb6:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002bba:	2200      	movs	r2, #0
 8002bbc:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8002bc0:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8002bc4:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8002bc8:	4642      	mov	r2, r8
 8002bca:	464b      	mov	r3, r9
 8002bcc:	1891      	adds	r1, r2, r2
 8002bce:	61b9      	str	r1, [r7, #24]
 8002bd0:	415b      	adcs	r3, r3
 8002bd2:	61fb      	str	r3, [r7, #28]
 8002bd4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8002bd8:	4641      	mov	r1, r8
 8002bda:	1851      	adds	r1, r2, r1
 8002bdc:	6139      	str	r1, [r7, #16]
 8002bde:	4649      	mov	r1, r9
 8002be0:	414b      	adcs	r3, r1
 8002be2:	617b      	str	r3, [r7, #20]
 8002be4:	f04f 0200 	mov.w	r2, #0
 8002be8:	f04f 0300 	mov.w	r3, #0
 8002bec:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8002bf0:	4659      	mov	r1, fp
 8002bf2:	00cb      	lsls	r3, r1, #3
 8002bf4:	4651      	mov	r1, sl
 8002bf6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002bfa:	4651      	mov	r1, sl
 8002bfc:	00ca      	lsls	r2, r1, #3
 8002bfe:	4610      	mov	r0, r2
 8002c00:	4619      	mov	r1, r3
 8002c02:	4603      	mov	r3, r0
 8002c04:	4642      	mov	r2, r8
 8002c06:	189b      	adds	r3, r3, r2
 8002c08:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8002c0c:	464b      	mov	r3, r9
 8002c0e:	460a      	mov	r2, r1
 8002c10:	eb42 0303 	adc.w	r3, r2, r3
 8002c14:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8002c18:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002c1c:	685b      	ldr	r3, [r3, #4]
 8002c1e:	2200      	movs	r2, #0
 8002c20:	67bb      	str	r3, [r7, #120]	@ 0x78
 8002c22:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8002c24:	f04f 0200 	mov.w	r2, #0
 8002c28:	f04f 0300 	mov.w	r3, #0
 8002c2c:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 8002c30:	4649      	mov	r1, r9
 8002c32:	008b      	lsls	r3, r1, #2
 8002c34:	4641      	mov	r1, r8
 8002c36:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002c3a:	4641      	mov	r1, r8
 8002c3c:	008a      	lsls	r2, r1, #2
 8002c3e:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 8002c42:	f7fd fb25 	bl	8000290 <__aeabi_uldivmod>
 8002c46:	4602      	mov	r2, r0
 8002c48:	460b      	mov	r3, r1
 8002c4a:	4611      	mov	r1, r2
 8002c4c:	4b38      	ldr	r3, [pc, #224]	@ (8002d30 <UART_SetConfig+0x4e4>)
 8002c4e:	fba3 2301 	umull	r2, r3, r3, r1
 8002c52:	095b      	lsrs	r3, r3, #5
 8002c54:	2264      	movs	r2, #100	@ 0x64
 8002c56:	fb02 f303 	mul.w	r3, r2, r3
 8002c5a:	1acb      	subs	r3, r1, r3
 8002c5c:	011b      	lsls	r3, r3, #4
 8002c5e:	3332      	adds	r3, #50	@ 0x32
 8002c60:	4a33      	ldr	r2, [pc, #204]	@ (8002d30 <UART_SetConfig+0x4e4>)
 8002c62:	fba2 2303 	umull	r2, r3, r2, r3
 8002c66:	095b      	lsrs	r3, r3, #5
 8002c68:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8002c6c:	441c      	add	r4, r3
 8002c6e:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8002c72:	2200      	movs	r2, #0
 8002c74:	673b      	str	r3, [r7, #112]	@ 0x70
 8002c76:	677a      	str	r2, [r7, #116]	@ 0x74
 8002c78:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8002c7c:	4642      	mov	r2, r8
 8002c7e:	464b      	mov	r3, r9
 8002c80:	1891      	adds	r1, r2, r2
 8002c82:	60b9      	str	r1, [r7, #8]
 8002c84:	415b      	adcs	r3, r3
 8002c86:	60fb      	str	r3, [r7, #12]
 8002c88:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002c8c:	4641      	mov	r1, r8
 8002c8e:	1851      	adds	r1, r2, r1
 8002c90:	6039      	str	r1, [r7, #0]
 8002c92:	4649      	mov	r1, r9
 8002c94:	414b      	adcs	r3, r1
 8002c96:	607b      	str	r3, [r7, #4]
 8002c98:	f04f 0200 	mov.w	r2, #0
 8002c9c:	f04f 0300 	mov.w	r3, #0
 8002ca0:	e9d7 ab00 	ldrd	sl, fp, [r7]
 8002ca4:	4659      	mov	r1, fp
 8002ca6:	00cb      	lsls	r3, r1, #3
 8002ca8:	4651      	mov	r1, sl
 8002caa:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8002cae:	4651      	mov	r1, sl
 8002cb0:	00ca      	lsls	r2, r1, #3
 8002cb2:	4610      	mov	r0, r2
 8002cb4:	4619      	mov	r1, r3
 8002cb6:	4603      	mov	r3, r0
 8002cb8:	4642      	mov	r2, r8
 8002cba:	189b      	adds	r3, r3, r2
 8002cbc:	66bb      	str	r3, [r7, #104]	@ 0x68
 8002cbe:	464b      	mov	r3, r9
 8002cc0:	460a      	mov	r2, r1
 8002cc2:	eb42 0303 	adc.w	r3, r2, r3
 8002cc6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8002cc8:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002ccc:	685b      	ldr	r3, [r3, #4]
 8002cce:	2200      	movs	r2, #0
 8002cd0:	663b      	str	r3, [r7, #96]	@ 0x60
 8002cd2:	667a      	str	r2, [r7, #100]	@ 0x64
 8002cd4:	f04f 0200 	mov.w	r2, #0
 8002cd8:	f04f 0300 	mov.w	r3, #0
 8002cdc:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 8002ce0:	4649      	mov	r1, r9
 8002ce2:	008b      	lsls	r3, r1, #2
 8002ce4:	4641      	mov	r1, r8
 8002ce6:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8002cea:	4641      	mov	r1, r8
 8002cec:	008a      	lsls	r2, r1, #2
 8002cee:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 8002cf2:	f7fd facd 	bl	8000290 <__aeabi_uldivmod>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4b0d      	ldr	r3, [pc, #52]	@ (8002d30 <UART_SetConfig+0x4e4>)
 8002cfc:	fba3 1302 	umull	r1, r3, r3, r2
 8002d00:	095b      	lsrs	r3, r3, #5
 8002d02:	2164      	movs	r1, #100	@ 0x64
 8002d04:	fb01 f303 	mul.w	r3, r1, r3
 8002d08:	1ad3      	subs	r3, r2, r3
 8002d0a:	011b      	lsls	r3, r3, #4
 8002d0c:	3332      	adds	r3, #50	@ 0x32
 8002d0e:	4a08      	ldr	r2, [pc, #32]	@ (8002d30 <UART_SetConfig+0x4e4>)
 8002d10:	fba2 2303 	umull	r2, r3, r2, r3
 8002d14:	095b      	lsrs	r3, r3, #5
 8002d16:	f003 020f 	and.w	r2, r3, #15
 8002d1a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8002d1e:	681b      	ldr	r3, [r3, #0]
 8002d20:	4422      	add	r2, r4
 8002d22:	609a      	str	r2, [r3, #8]
}
 8002d24:	bf00      	nop
 8002d26:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8002d2a:	46bd      	mov	sp, r7
 8002d2c:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8002d30:	51eb851f 	.word	0x51eb851f

08002d34 <std>:
 8002d34:	2300      	movs	r3, #0
 8002d36:	b510      	push	{r4, lr}
 8002d38:	4604      	mov	r4, r0
 8002d3a:	e9c0 3300 	strd	r3, r3, [r0]
 8002d3e:	e9c0 3304 	strd	r3, r3, [r0, #16]
 8002d42:	6083      	str	r3, [r0, #8]
 8002d44:	8181      	strh	r1, [r0, #12]
 8002d46:	6643      	str	r3, [r0, #100]	@ 0x64
 8002d48:	81c2      	strh	r2, [r0, #14]
 8002d4a:	6183      	str	r3, [r0, #24]
 8002d4c:	4619      	mov	r1, r3
 8002d4e:	2208      	movs	r2, #8
 8002d50:	305c      	adds	r0, #92	@ 0x5c
 8002d52:	f000 f906 	bl	8002f62 <memset>
 8002d56:	4b0d      	ldr	r3, [pc, #52]	@ (8002d8c <std+0x58>)
 8002d58:	6263      	str	r3, [r4, #36]	@ 0x24
 8002d5a:	4b0d      	ldr	r3, [pc, #52]	@ (8002d90 <std+0x5c>)
 8002d5c:	62a3      	str	r3, [r4, #40]	@ 0x28
 8002d5e:	4b0d      	ldr	r3, [pc, #52]	@ (8002d94 <std+0x60>)
 8002d60:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8002d62:	4b0d      	ldr	r3, [pc, #52]	@ (8002d98 <std+0x64>)
 8002d64:	6323      	str	r3, [r4, #48]	@ 0x30
 8002d66:	4b0d      	ldr	r3, [pc, #52]	@ (8002d9c <std+0x68>)
 8002d68:	6224      	str	r4, [r4, #32]
 8002d6a:	429c      	cmp	r4, r3
 8002d6c:	d006      	beq.n	8002d7c <std+0x48>
 8002d6e:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8002d72:	4294      	cmp	r4, r2
 8002d74:	d002      	beq.n	8002d7c <std+0x48>
 8002d76:	33d0      	adds	r3, #208	@ 0xd0
 8002d78:	429c      	cmp	r4, r3
 8002d7a:	d105      	bne.n	8002d88 <std+0x54>
 8002d7c:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8002d80:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002d84:	f000 b966 	b.w	8003054 <__retarget_lock_init_recursive>
 8002d88:	bd10      	pop	{r4, pc}
 8002d8a:	bf00      	nop
 8002d8c:	08002edd 	.word	0x08002edd
 8002d90:	08002eff 	.word	0x08002eff
 8002d94:	08002f37 	.word	0x08002f37
 8002d98:	08002f5b 	.word	0x08002f5b
 8002d9c:	2000013c 	.word	0x2000013c

08002da0 <stdio_exit_handler>:
 8002da0:	4a02      	ldr	r2, [pc, #8]	@ (8002dac <stdio_exit_handler+0xc>)
 8002da2:	4903      	ldr	r1, [pc, #12]	@ (8002db0 <stdio_exit_handler+0x10>)
 8002da4:	4803      	ldr	r0, [pc, #12]	@ (8002db4 <stdio_exit_handler+0x14>)
 8002da6:	f000 b869 	b.w	8002e7c <_fwalk_sglue>
 8002daa:	bf00      	nop
 8002dac:	2000000c 	.word	0x2000000c
 8002db0:	080038f5 	.word	0x080038f5
 8002db4:	2000001c 	.word	0x2000001c

08002db8 <cleanup_stdio>:
 8002db8:	6841      	ldr	r1, [r0, #4]
 8002dba:	4b0c      	ldr	r3, [pc, #48]	@ (8002dec <cleanup_stdio+0x34>)
 8002dbc:	4299      	cmp	r1, r3
 8002dbe:	b510      	push	{r4, lr}
 8002dc0:	4604      	mov	r4, r0
 8002dc2:	d001      	beq.n	8002dc8 <cleanup_stdio+0x10>
 8002dc4:	f000 fd96 	bl	80038f4 <_fflush_r>
 8002dc8:	68a1      	ldr	r1, [r4, #8]
 8002dca:	4b09      	ldr	r3, [pc, #36]	@ (8002df0 <cleanup_stdio+0x38>)
 8002dcc:	4299      	cmp	r1, r3
 8002dce:	d002      	beq.n	8002dd6 <cleanup_stdio+0x1e>
 8002dd0:	4620      	mov	r0, r4
 8002dd2:	f000 fd8f 	bl	80038f4 <_fflush_r>
 8002dd6:	68e1      	ldr	r1, [r4, #12]
 8002dd8:	4b06      	ldr	r3, [pc, #24]	@ (8002df4 <cleanup_stdio+0x3c>)
 8002dda:	4299      	cmp	r1, r3
 8002ddc:	d004      	beq.n	8002de8 <cleanup_stdio+0x30>
 8002dde:	4620      	mov	r0, r4
 8002de0:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002de4:	f000 bd86 	b.w	80038f4 <_fflush_r>
 8002de8:	bd10      	pop	{r4, pc}
 8002dea:	bf00      	nop
 8002dec:	2000013c 	.word	0x2000013c
 8002df0:	200001a4 	.word	0x200001a4
 8002df4:	2000020c 	.word	0x2000020c

08002df8 <global_stdio_init.part.0>:
 8002df8:	b510      	push	{r4, lr}
 8002dfa:	4b0b      	ldr	r3, [pc, #44]	@ (8002e28 <global_stdio_init.part.0+0x30>)
 8002dfc:	4c0b      	ldr	r4, [pc, #44]	@ (8002e2c <global_stdio_init.part.0+0x34>)
 8002dfe:	4a0c      	ldr	r2, [pc, #48]	@ (8002e30 <global_stdio_init.part.0+0x38>)
 8002e00:	601a      	str	r2, [r3, #0]
 8002e02:	4620      	mov	r0, r4
 8002e04:	2200      	movs	r2, #0
 8002e06:	2104      	movs	r1, #4
 8002e08:	f7ff ff94 	bl	8002d34 <std>
 8002e0c:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8002e10:	2201      	movs	r2, #1
 8002e12:	2109      	movs	r1, #9
 8002e14:	f7ff ff8e 	bl	8002d34 <std>
 8002e18:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8002e1c:	2202      	movs	r2, #2
 8002e1e:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e22:	2112      	movs	r1, #18
 8002e24:	f7ff bf86 	b.w	8002d34 <std>
 8002e28:	20000274 	.word	0x20000274
 8002e2c:	2000013c 	.word	0x2000013c
 8002e30:	08002da1 	.word	0x08002da1

08002e34 <__sfp_lock_acquire>:
 8002e34:	4801      	ldr	r0, [pc, #4]	@ (8002e3c <__sfp_lock_acquire+0x8>)
 8002e36:	f000 b90e 	b.w	8003056 <__retarget_lock_acquire_recursive>
 8002e3a:	bf00      	nop
 8002e3c:	2000027d 	.word	0x2000027d

08002e40 <__sfp_lock_release>:
 8002e40:	4801      	ldr	r0, [pc, #4]	@ (8002e48 <__sfp_lock_release+0x8>)
 8002e42:	f000 b909 	b.w	8003058 <__retarget_lock_release_recursive>
 8002e46:	bf00      	nop
 8002e48:	2000027d 	.word	0x2000027d

08002e4c <__sinit>:
 8002e4c:	b510      	push	{r4, lr}
 8002e4e:	4604      	mov	r4, r0
 8002e50:	f7ff fff0 	bl	8002e34 <__sfp_lock_acquire>
 8002e54:	6a23      	ldr	r3, [r4, #32]
 8002e56:	b11b      	cbz	r3, 8002e60 <__sinit+0x14>
 8002e58:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8002e5c:	f7ff bff0 	b.w	8002e40 <__sfp_lock_release>
 8002e60:	4b04      	ldr	r3, [pc, #16]	@ (8002e74 <__sinit+0x28>)
 8002e62:	6223      	str	r3, [r4, #32]
 8002e64:	4b04      	ldr	r3, [pc, #16]	@ (8002e78 <__sinit+0x2c>)
 8002e66:	681b      	ldr	r3, [r3, #0]
 8002e68:	2b00      	cmp	r3, #0
 8002e6a:	d1f5      	bne.n	8002e58 <__sinit+0xc>
 8002e6c:	f7ff ffc4 	bl	8002df8 <global_stdio_init.part.0>
 8002e70:	e7f2      	b.n	8002e58 <__sinit+0xc>
 8002e72:	bf00      	nop
 8002e74:	08002db9 	.word	0x08002db9
 8002e78:	20000274 	.word	0x20000274

08002e7c <_fwalk_sglue>:
 8002e7c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8002e80:	4607      	mov	r7, r0
 8002e82:	4688      	mov	r8, r1
 8002e84:	4614      	mov	r4, r2
 8002e86:	2600      	movs	r6, #0
 8002e88:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8002e8c:	f1b9 0901 	subs.w	r9, r9, #1
 8002e90:	d505      	bpl.n	8002e9e <_fwalk_sglue+0x22>
 8002e92:	6824      	ldr	r4, [r4, #0]
 8002e94:	2c00      	cmp	r4, #0
 8002e96:	d1f7      	bne.n	8002e88 <_fwalk_sglue+0xc>
 8002e98:	4630      	mov	r0, r6
 8002e9a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8002e9e:	89ab      	ldrh	r3, [r5, #12]
 8002ea0:	2b01      	cmp	r3, #1
 8002ea2:	d907      	bls.n	8002eb4 <_fwalk_sglue+0x38>
 8002ea4:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8002ea8:	3301      	adds	r3, #1
 8002eaa:	d003      	beq.n	8002eb4 <_fwalk_sglue+0x38>
 8002eac:	4629      	mov	r1, r5
 8002eae:	4638      	mov	r0, r7
 8002eb0:	47c0      	blx	r8
 8002eb2:	4306      	orrs	r6, r0
 8002eb4:	3568      	adds	r5, #104	@ 0x68
 8002eb6:	e7e9      	b.n	8002e8c <_fwalk_sglue+0x10>

08002eb8 <iprintf>:
 8002eb8:	b40f      	push	{r0, r1, r2, r3}
 8002eba:	b507      	push	{r0, r1, r2, lr}
 8002ebc:	4906      	ldr	r1, [pc, #24]	@ (8002ed8 <iprintf+0x20>)
 8002ebe:	ab04      	add	r3, sp, #16
 8002ec0:	6808      	ldr	r0, [r1, #0]
 8002ec2:	f853 2b04 	ldr.w	r2, [r3], #4
 8002ec6:	6881      	ldr	r1, [r0, #8]
 8002ec8:	9301      	str	r3, [sp, #4]
 8002eca:	f000 f9e9 	bl	80032a0 <_vfiprintf_r>
 8002ece:	b003      	add	sp, #12
 8002ed0:	f85d eb04 	ldr.w	lr, [sp], #4
 8002ed4:	b004      	add	sp, #16
 8002ed6:	4770      	bx	lr
 8002ed8:	20000018 	.word	0x20000018

08002edc <__sread>:
 8002edc:	b510      	push	{r4, lr}
 8002ede:	460c      	mov	r4, r1
 8002ee0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002ee4:	f000 f868 	bl	8002fb8 <_read_r>
 8002ee8:	2800      	cmp	r0, #0
 8002eea:	bfab      	itete	ge
 8002eec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8002eee:	89a3      	ldrhlt	r3, [r4, #12]
 8002ef0:	181b      	addge	r3, r3, r0
 8002ef2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8002ef6:	bfac      	ite	ge
 8002ef8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8002efa:	81a3      	strhlt	r3, [r4, #12]
 8002efc:	bd10      	pop	{r4, pc}

08002efe <__swrite>:
 8002efe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8002f02:	461f      	mov	r7, r3
 8002f04:	898b      	ldrh	r3, [r1, #12]
 8002f06:	05db      	lsls	r3, r3, #23
 8002f08:	4605      	mov	r5, r0
 8002f0a:	460c      	mov	r4, r1
 8002f0c:	4616      	mov	r6, r2
 8002f0e:	d505      	bpl.n	8002f1c <__swrite+0x1e>
 8002f10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f14:	2302      	movs	r3, #2
 8002f16:	2200      	movs	r2, #0
 8002f18:	f000 f83c 	bl	8002f94 <_lseek_r>
 8002f1c:	89a3      	ldrh	r3, [r4, #12]
 8002f1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8002f22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8002f26:	81a3      	strh	r3, [r4, #12]
 8002f28:	4632      	mov	r2, r6
 8002f2a:	463b      	mov	r3, r7
 8002f2c:	4628      	mov	r0, r5
 8002f2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8002f32:	f000 b853 	b.w	8002fdc <_write_r>

08002f36 <__sseek>:
 8002f36:	b510      	push	{r4, lr}
 8002f38:	460c      	mov	r4, r1
 8002f3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f3e:	f000 f829 	bl	8002f94 <_lseek_r>
 8002f42:	1c43      	adds	r3, r0, #1
 8002f44:	89a3      	ldrh	r3, [r4, #12]
 8002f46:	bf15      	itete	ne
 8002f48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8002f4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8002f4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8002f52:	81a3      	strheq	r3, [r4, #12]
 8002f54:	bf18      	it	ne
 8002f56:	81a3      	strhne	r3, [r4, #12]
 8002f58:	bd10      	pop	{r4, pc}

08002f5a <__sclose>:
 8002f5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8002f5e:	f000 b809 	b.w	8002f74 <_close_r>

08002f62 <memset>:
 8002f62:	4402      	add	r2, r0
 8002f64:	4603      	mov	r3, r0
 8002f66:	4293      	cmp	r3, r2
 8002f68:	d100      	bne.n	8002f6c <memset+0xa>
 8002f6a:	4770      	bx	lr
 8002f6c:	f803 1b01 	strb.w	r1, [r3], #1
 8002f70:	e7f9      	b.n	8002f66 <memset+0x4>
	...

08002f74 <_close_r>:
 8002f74:	b538      	push	{r3, r4, r5, lr}
 8002f76:	4d06      	ldr	r5, [pc, #24]	@ (8002f90 <_close_r+0x1c>)
 8002f78:	2300      	movs	r3, #0
 8002f7a:	4604      	mov	r4, r0
 8002f7c:	4608      	mov	r0, r1
 8002f7e:	602b      	str	r3, [r5, #0]
 8002f80:	f7fd fd6b 	bl	8000a5a <_close>
 8002f84:	1c43      	adds	r3, r0, #1
 8002f86:	d102      	bne.n	8002f8e <_close_r+0x1a>
 8002f88:	682b      	ldr	r3, [r5, #0]
 8002f8a:	b103      	cbz	r3, 8002f8e <_close_r+0x1a>
 8002f8c:	6023      	str	r3, [r4, #0]
 8002f8e:	bd38      	pop	{r3, r4, r5, pc}
 8002f90:	20000278 	.word	0x20000278

08002f94 <_lseek_r>:
 8002f94:	b538      	push	{r3, r4, r5, lr}
 8002f96:	4d07      	ldr	r5, [pc, #28]	@ (8002fb4 <_lseek_r+0x20>)
 8002f98:	4604      	mov	r4, r0
 8002f9a:	4608      	mov	r0, r1
 8002f9c:	4611      	mov	r1, r2
 8002f9e:	2200      	movs	r2, #0
 8002fa0:	602a      	str	r2, [r5, #0]
 8002fa2:	461a      	mov	r2, r3
 8002fa4:	f7fd fd80 	bl	8000aa8 <_lseek>
 8002fa8:	1c43      	adds	r3, r0, #1
 8002faa:	d102      	bne.n	8002fb2 <_lseek_r+0x1e>
 8002fac:	682b      	ldr	r3, [r5, #0]
 8002fae:	b103      	cbz	r3, 8002fb2 <_lseek_r+0x1e>
 8002fb0:	6023      	str	r3, [r4, #0]
 8002fb2:	bd38      	pop	{r3, r4, r5, pc}
 8002fb4:	20000278 	.word	0x20000278

08002fb8 <_read_r>:
 8002fb8:	b538      	push	{r3, r4, r5, lr}
 8002fba:	4d07      	ldr	r5, [pc, #28]	@ (8002fd8 <_read_r+0x20>)
 8002fbc:	4604      	mov	r4, r0
 8002fbe:	4608      	mov	r0, r1
 8002fc0:	4611      	mov	r1, r2
 8002fc2:	2200      	movs	r2, #0
 8002fc4:	602a      	str	r2, [r5, #0]
 8002fc6:	461a      	mov	r2, r3
 8002fc8:	f7fd fd0e 	bl	80009e8 <_read>
 8002fcc:	1c43      	adds	r3, r0, #1
 8002fce:	d102      	bne.n	8002fd6 <_read_r+0x1e>
 8002fd0:	682b      	ldr	r3, [r5, #0]
 8002fd2:	b103      	cbz	r3, 8002fd6 <_read_r+0x1e>
 8002fd4:	6023      	str	r3, [r4, #0]
 8002fd6:	bd38      	pop	{r3, r4, r5, pc}
 8002fd8:	20000278 	.word	0x20000278

08002fdc <_write_r>:
 8002fdc:	b538      	push	{r3, r4, r5, lr}
 8002fde:	4d07      	ldr	r5, [pc, #28]	@ (8002ffc <_write_r+0x20>)
 8002fe0:	4604      	mov	r4, r0
 8002fe2:	4608      	mov	r0, r1
 8002fe4:	4611      	mov	r1, r2
 8002fe6:	2200      	movs	r2, #0
 8002fe8:	602a      	str	r2, [r5, #0]
 8002fea:	461a      	mov	r2, r3
 8002fec:	f7fd fd19 	bl	8000a22 <_write>
 8002ff0:	1c43      	adds	r3, r0, #1
 8002ff2:	d102      	bne.n	8002ffa <_write_r+0x1e>
 8002ff4:	682b      	ldr	r3, [r5, #0]
 8002ff6:	b103      	cbz	r3, 8002ffa <_write_r+0x1e>
 8002ff8:	6023      	str	r3, [r4, #0]
 8002ffa:	bd38      	pop	{r3, r4, r5, pc}
 8002ffc:	20000278 	.word	0x20000278

08003000 <__errno>:
 8003000:	4b01      	ldr	r3, [pc, #4]	@ (8003008 <__errno+0x8>)
 8003002:	6818      	ldr	r0, [r3, #0]
 8003004:	4770      	bx	lr
 8003006:	bf00      	nop
 8003008:	20000018 	.word	0x20000018

0800300c <__libc_init_array>:
 800300c:	b570      	push	{r4, r5, r6, lr}
 800300e:	4d0d      	ldr	r5, [pc, #52]	@ (8003044 <__libc_init_array+0x38>)
 8003010:	4c0d      	ldr	r4, [pc, #52]	@ (8003048 <__libc_init_array+0x3c>)
 8003012:	1b64      	subs	r4, r4, r5
 8003014:	10a4      	asrs	r4, r4, #2
 8003016:	2600      	movs	r6, #0
 8003018:	42a6      	cmp	r6, r4
 800301a:	d109      	bne.n	8003030 <__libc_init_array+0x24>
 800301c:	4d0b      	ldr	r5, [pc, #44]	@ (800304c <__libc_init_array+0x40>)
 800301e:	4c0c      	ldr	r4, [pc, #48]	@ (8003050 <__libc_init_array+0x44>)
 8003020:	f000 fdb8 	bl	8003b94 <_init>
 8003024:	1b64      	subs	r4, r4, r5
 8003026:	10a4      	asrs	r4, r4, #2
 8003028:	2600      	movs	r6, #0
 800302a:	42a6      	cmp	r6, r4
 800302c:	d105      	bne.n	800303a <__libc_init_array+0x2e>
 800302e:	bd70      	pop	{r4, r5, r6, pc}
 8003030:	f855 3b04 	ldr.w	r3, [r5], #4
 8003034:	4798      	blx	r3
 8003036:	3601      	adds	r6, #1
 8003038:	e7ee      	b.n	8003018 <__libc_init_array+0xc>
 800303a:	f855 3b04 	ldr.w	r3, [r5], #4
 800303e:	4798      	blx	r3
 8003040:	3601      	adds	r6, #1
 8003042:	e7f2      	b.n	800302a <__libc_init_array+0x1e>
 8003044:	08003c38 	.word	0x08003c38
 8003048:	08003c38 	.word	0x08003c38
 800304c:	08003c38 	.word	0x08003c38
 8003050:	08003c3c 	.word	0x08003c3c

08003054 <__retarget_lock_init_recursive>:
 8003054:	4770      	bx	lr

08003056 <__retarget_lock_acquire_recursive>:
 8003056:	4770      	bx	lr

08003058 <__retarget_lock_release_recursive>:
 8003058:	4770      	bx	lr
	...

0800305c <_free_r>:
 800305c:	b538      	push	{r3, r4, r5, lr}
 800305e:	4605      	mov	r5, r0
 8003060:	2900      	cmp	r1, #0
 8003062:	d041      	beq.n	80030e8 <_free_r+0x8c>
 8003064:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8003068:	1f0c      	subs	r4, r1, #4
 800306a:	2b00      	cmp	r3, #0
 800306c:	bfb8      	it	lt
 800306e:	18e4      	addlt	r4, r4, r3
 8003070:	f000 f8e0 	bl	8003234 <__malloc_lock>
 8003074:	4a1d      	ldr	r2, [pc, #116]	@ (80030ec <_free_r+0x90>)
 8003076:	6813      	ldr	r3, [r2, #0]
 8003078:	b933      	cbnz	r3, 8003088 <_free_r+0x2c>
 800307a:	6063      	str	r3, [r4, #4]
 800307c:	6014      	str	r4, [r2, #0]
 800307e:	4628      	mov	r0, r5
 8003080:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8003084:	f000 b8dc 	b.w	8003240 <__malloc_unlock>
 8003088:	42a3      	cmp	r3, r4
 800308a:	d908      	bls.n	800309e <_free_r+0x42>
 800308c:	6820      	ldr	r0, [r4, #0]
 800308e:	1821      	adds	r1, r4, r0
 8003090:	428b      	cmp	r3, r1
 8003092:	bf01      	itttt	eq
 8003094:	6819      	ldreq	r1, [r3, #0]
 8003096:	685b      	ldreq	r3, [r3, #4]
 8003098:	1809      	addeq	r1, r1, r0
 800309a:	6021      	streq	r1, [r4, #0]
 800309c:	e7ed      	b.n	800307a <_free_r+0x1e>
 800309e:	461a      	mov	r2, r3
 80030a0:	685b      	ldr	r3, [r3, #4]
 80030a2:	b10b      	cbz	r3, 80030a8 <_free_r+0x4c>
 80030a4:	42a3      	cmp	r3, r4
 80030a6:	d9fa      	bls.n	800309e <_free_r+0x42>
 80030a8:	6811      	ldr	r1, [r2, #0]
 80030aa:	1850      	adds	r0, r2, r1
 80030ac:	42a0      	cmp	r0, r4
 80030ae:	d10b      	bne.n	80030c8 <_free_r+0x6c>
 80030b0:	6820      	ldr	r0, [r4, #0]
 80030b2:	4401      	add	r1, r0
 80030b4:	1850      	adds	r0, r2, r1
 80030b6:	4283      	cmp	r3, r0
 80030b8:	6011      	str	r1, [r2, #0]
 80030ba:	d1e0      	bne.n	800307e <_free_r+0x22>
 80030bc:	6818      	ldr	r0, [r3, #0]
 80030be:	685b      	ldr	r3, [r3, #4]
 80030c0:	6053      	str	r3, [r2, #4]
 80030c2:	4408      	add	r0, r1
 80030c4:	6010      	str	r0, [r2, #0]
 80030c6:	e7da      	b.n	800307e <_free_r+0x22>
 80030c8:	d902      	bls.n	80030d0 <_free_r+0x74>
 80030ca:	230c      	movs	r3, #12
 80030cc:	602b      	str	r3, [r5, #0]
 80030ce:	e7d6      	b.n	800307e <_free_r+0x22>
 80030d0:	6820      	ldr	r0, [r4, #0]
 80030d2:	1821      	adds	r1, r4, r0
 80030d4:	428b      	cmp	r3, r1
 80030d6:	bf04      	itt	eq
 80030d8:	6819      	ldreq	r1, [r3, #0]
 80030da:	685b      	ldreq	r3, [r3, #4]
 80030dc:	6063      	str	r3, [r4, #4]
 80030de:	bf04      	itt	eq
 80030e0:	1809      	addeq	r1, r1, r0
 80030e2:	6021      	streq	r1, [r4, #0]
 80030e4:	6054      	str	r4, [r2, #4]
 80030e6:	e7ca      	b.n	800307e <_free_r+0x22>
 80030e8:	bd38      	pop	{r3, r4, r5, pc}
 80030ea:	bf00      	nop
 80030ec:	20000284 	.word	0x20000284

080030f0 <sbrk_aligned>:
 80030f0:	b570      	push	{r4, r5, r6, lr}
 80030f2:	4e0f      	ldr	r6, [pc, #60]	@ (8003130 <sbrk_aligned+0x40>)
 80030f4:	460c      	mov	r4, r1
 80030f6:	6831      	ldr	r1, [r6, #0]
 80030f8:	4605      	mov	r5, r0
 80030fa:	b911      	cbnz	r1, 8003102 <sbrk_aligned+0x12>
 80030fc:	f000 fcb6 	bl	8003a6c <_sbrk_r>
 8003100:	6030      	str	r0, [r6, #0]
 8003102:	4621      	mov	r1, r4
 8003104:	4628      	mov	r0, r5
 8003106:	f000 fcb1 	bl	8003a6c <_sbrk_r>
 800310a:	1c43      	adds	r3, r0, #1
 800310c:	d103      	bne.n	8003116 <sbrk_aligned+0x26>
 800310e:	f04f 34ff 	mov.w	r4, #4294967295
 8003112:	4620      	mov	r0, r4
 8003114:	bd70      	pop	{r4, r5, r6, pc}
 8003116:	1cc4      	adds	r4, r0, #3
 8003118:	f024 0403 	bic.w	r4, r4, #3
 800311c:	42a0      	cmp	r0, r4
 800311e:	d0f8      	beq.n	8003112 <sbrk_aligned+0x22>
 8003120:	1a21      	subs	r1, r4, r0
 8003122:	4628      	mov	r0, r5
 8003124:	f000 fca2 	bl	8003a6c <_sbrk_r>
 8003128:	3001      	adds	r0, #1
 800312a:	d1f2      	bne.n	8003112 <sbrk_aligned+0x22>
 800312c:	e7ef      	b.n	800310e <sbrk_aligned+0x1e>
 800312e:	bf00      	nop
 8003130:	20000280 	.word	0x20000280

08003134 <_malloc_r>:
 8003134:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8003138:	1ccd      	adds	r5, r1, #3
 800313a:	f025 0503 	bic.w	r5, r5, #3
 800313e:	3508      	adds	r5, #8
 8003140:	2d0c      	cmp	r5, #12
 8003142:	bf38      	it	cc
 8003144:	250c      	movcc	r5, #12
 8003146:	2d00      	cmp	r5, #0
 8003148:	4606      	mov	r6, r0
 800314a:	db01      	blt.n	8003150 <_malloc_r+0x1c>
 800314c:	42a9      	cmp	r1, r5
 800314e:	d904      	bls.n	800315a <_malloc_r+0x26>
 8003150:	230c      	movs	r3, #12
 8003152:	6033      	str	r3, [r6, #0]
 8003154:	2000      	movs	r0, #0
 8003156:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800315a:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8003230 <_malloc_r+0xfc>
 800315e:	f000 f869 	bl	8003234 <__malloc_lock>
 8003162:	f8d8 3000 	ldr.w	r3, [r8]
 8003166:	461c      	mov	r4, r3
 8003168:	bb44      	cbnz	r4, 80031bc <_malloc_r+0x88>
 800316a:	4629      	mov	r1, r5
 800316c:	4630      	mov	r0, r6
 800316e:	f7ff ffbf 	bl	80030f0 <sbrk_aligned>
 8003172:	1c43      	adds	r3, r0, #1
 8003174:	4604      	mov	r4, r0
 8003176:	d158      	bne.n	800322a <_malloc_r+0xf6>
 8003178:	f8d8 4000 	ldr.w	r4, [r8]
 800317c:	4627      	mov	r7, r4
 800317e:	2f00      	cmp	r7, #0
 8003180:	d143      	bne.n	800320a <_malloc_r+0xd6>
 8003182:	2c00      	cmp	r4, #0
 8003184:	d04b      	beq.n	800321e <_malloc_r+0xea>
 8003186:	6823      	ldr	r3, [r4, #0]
 8003188:	4639      	mov	r1, r7
 800318a:	4630      	mov	r0, r6
 800318c:	eb04 0903 	add.w	r9, r4, r3
 8003190:	f000 fc6c 	bl	8003a6c <_sbrk_r>
 8003194:	4581      	cmp	r9, r0
 8003196:	d142      	bne.n	800321e <_malloc_r+0xea>
 8003198:	6821      	ldr	r1, [r4, #0]
 800319a:	1a6d      	subs	r5, r5, r1
 800319c:	4629      	mov	r1, r5
 800319e:	4630      	mov	r0, r6
 80031a0:	f7ff ffa6 	bl	80030f0 <sbrk_aligned>
 80031a4:	3001      	adds	r0, #1
 80031a6:	d03a      	beq.n	800321e <_malloc_r+0xea>
 80031a8:	6823      	ldr	r3, [r4, #0]
 80031aa:	442b      	add	r3, r5
 80031ac:	6023      	str	r3, [r4, #0]
 80031ae:	f8d8 3000 	ldr.w	r3, [r8]
 80031b2:	685a      	ldr	r2, [r3, #4]
 80031b4:	bb62      	cbnz	r2, 8003210 <_malloc_r+0xdc>
 80031b6:	f8c8 7000 	str.w	r7, [r8]
 80031ba:	e00f      	b.n	80031dc <_malloc_r+0xa8>
 80031bc:	6822      	ldr	r2, [r4, #0]
 80031be:	1b52      	subs	r2, r2, r5
 80031c0:	d420      	bmi.n	8003204 <_malloc_r+0xd0>
 80031c2:	2a0b      	cmp	r2, #11
 80031c4:	d917      	bls.n	80031f6 <_malloc_r+0xc2>
 80031c6:	1961      	adds	r1, r4, r5
 80031c8:	42a3      	cmp	r3, r4
 80031ca:	6025      	str	r5, [r4, #0]
 80031cc:	bf18      	it	ne
 80031ce:	6059      	strne	r1, [r3, #4]
 80031d0:	6863      	ldr	r3, [r4, #4]
 80031d2:	bf08      	it	eq
 80031d4:	f8c8 1000 	streq.w	r1, [r8]
 80031d8:	5162      	str	r2, [r4, r5]
 80031da:	604b      	str	r3, [r1, #4]
 80031dc:	4630      	mov	r0, r6
 80031de:	f000 f82f 	bl	8003240 <__malloc_unlock>
 80031e2:	f104 000b 	add.w	r0, r4, #11
 80031e6:	1d23      	adds	r3, r4, #4
 80031e8:	f020 0007 	bic.w	r0, r0, #7
 80031ec:	1ac2      	subs	r2, r0, r3
 80031ee:	bf1c      	itt	ne
 80031f0:	1a1b      	subne	r3, r3, r0
 80031f2:	50a3      	strne	r3, [r4, r2]
 80031f4:	e7af      	b.n	8003156 <_malloc_r+0x22>
 80031f6:	6862      	ldr	r2, [r4, #4]
 80031f8:	42a3      	cmp	r3, r4
 80031fa:	bf0c      	ite	eq
 80031fc:	f8c8 2000 	streq.w	r2, [r8]
 8003200:	605a      	strne	r2, [r3, #4]
 8003202:	e7eb      	b.n	80031dc <_malloc_r+0xa8>
 8003204:	4623      	mov	r3, r4
 8003206:	6864      	ldr	r4, [r4, #4]
 8003208:	e7ae      	b.n	8003168 <_malloc_r+0x34>
 800320a:	463c      	mov	r4, r7
 800320c:	687f      	ldr	r7, [r7, #4]
 800320e:	e7b6      	b.n	800317e <_malloc_r+0x4a>
 8003210:	461a      	mov	r2, r3
 8003212:	685b      	ldr	r3, [r3, #4]
 8003214:	42a3      	cmp	r3, r4
 8003216:	d1fb      	bne.n	8003210 <_malloc_r+0xdc>
 8003218:	2300      	movs	r3, #0
 800321a:	6053      	str	r3, [r2, #4]
 800321c:	e7de      	b.n	80031dc <_malloc_r+0xa8>
 800321e:	230c      	movs	r3, #12
 8003220:	6033      	str	r3, [r6, #0]
 8003222:	4630      	mov	r0, r6
 8003224:	f000 f80c 	bl	8003240 <__malloc_unlock>
 8003228:	e794      	b.n	8003154 <_malloc_r+0x20>
 800322a:	6005      	str	r5, [r0, #0]
 800322c:	e7d6      	b.n	80031dc <_malloc_r+0xa8>
 800322e:	bf00      	nop
 8003230:	20000284 	.word	0x20000284

08003234 <__malloc_lock>:
 8003234:	4801      	ldr	r0, [pc, #4]	@ (800323c <__malloc_lock+0x8>)
 8003236:	f7ff bf0e 	b.w	8003056 <__retarget_lock_acquire_recursive>
 800323a:	bf00      	nop
 800323c:	2000027c 	.word	0x2000027c

08003240 <__malloc_unlock>:
 8003240:	4801      	ldr	r0, [pc, #4]	@ (8003248 <__malloc_unlock+0x8>)
 8003242:	f7ff bf09 	b.w	8003058 <__retarget_lock_release_recursive>
 8003246:	bf00      	nop
 8003248:	2000027c 	.word	0x2000027c

0800324c <__sfputc_r>:
 800324c:	6893      	ldr	r3, [r2, #8]
 800324e:	3b01      	subs	r3, #1
 8003250:	2b00      	cmp	r3, #0
 8003252:	b410      	push	{r4}
 8003254:	6093      	str	r3, [r2, #8]
 8003256:	da08      	bge.n	800326a <__sfputc_r+0x1e>
 8003258:	6994      	ldr	r4, [r2, #24]
 800325a:	42a3      	cmp	r3, r4
 800325c:	db01      	blt.n	8003262 <__sfputc_r+0x16>
 800325e:	290a      	cmp	r1, #10
 8003260:	d103      	bne.n	800326a <__sfputc_r+0x1e>
 8003262:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003266:	f000 bb6d 	b.w	8003944 <__swbuf_r>
 800326a:	6813      	ldr	r3, [r2, #0]
 800326c:	1c58      	adds	r0, r3, #1
 800326e:	6010      	str	r0, [r2, #0]
 8003270:	7019      	strb	r1, [r3, #0]
 8003272:	4608      	mov	r0, r1
 8003274:	f85d 4b04 	ldr.w	r4, [sp], #4
 8003278:	4770      	bx	lr

0800327a <__sfputs_r>:
 800327a:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800327c:	4606      	mov	r6, r0
 800327e:	460f      	mov	r7, r1
 8003280:	4614      	mov	r4, r2
 8003282:	18d5      	adds	r5, r2, r3
 8003284:	42ac      	cmp	r4, r5
 8003286:	d101      	bne.n	800328c <__sfputs_r+0x12>
 8003288:	2000      	movs	r0, #0
 800328a:	e007      	b.n	800329c <__sfputs_r+0x22>
 800328c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8003290:	463a      	mov	r2, r7
 8003292:	4630      	mov	r0, r6
 8003294:	f7ff ffda 	bl	800324c <__sfputc_r>
 8003298:	1c43      	adds	r3, r0, #1
 800329a:	d1f3      	bne.n	8003284 <__sfputs_r+0xa>
 800329c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

080032a0 <_vfiprintf_r>:
 80032a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80032a4:	460d      	mov	r5, r1
 80032a6:	b09d      	sub	sp, #116	@ 0x74
 80032a8:	4614      	mov	r4, r2
 80032aa:	4698      	mov	r8, r3
 80032ac:	4606      	mov	r6, r0
 80032ae:	b118      	cbz	r0, 80032b8 <_vfiprintf_r+0x18>
 80032b0:	6a03      	ldr	r3, [r0, #32]
 80032b2:	b90b      	cbnz	r3, 80032b8 <_vfiprintf_r+0x18>
 80032b4:	f7ff fdca 	bl	8002e4c <__sinit>
 80032b8:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032ba:	07d9      	lsls	r1, r3, #31
 80032bc:	d405      	bmi.n	80032ca <_vfiprintf_r+0x2a>
 80032be:	89ab      	ldrh	r3, [r5, #12]
 80032c0:	059a      	lsls	r2, r3, #22
 80032c2:	d402      	bmi.n	80032ca <_vfiprintf_r+0x2a>
 80032c4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80032c6:	f7ff fec6 	bl	8003056 <__retarget_lock_acquire_recursive>
 80032ca:	89ab      	ldrh	r3, [r5, #12]
 80032cc:	071b      	lsls	r3, r3, #28
 80032ce:	d501      	bpl.n	80032d4 <_vfiprintf_r+0x34>
 80032d0:	692b      	ldr	r3, [r5, #16]
 80032d2:	b99b      	cbnz	r3, 80032fc <_vfiprintf_r+0x5c>
 80032d4:	4629      	mov	r1, r5
 80032d6:	4630      	mov	r0, r6
 80032d8:	f000 fb72 	bl	80039c0 <__swsetup_r>
 80032dc:	b170      	cbz	r0, 80032fc <_vfiprintf_r+0x5c>
 80032de:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 80032e0:	07dc      	lsls	r4, r3, #31
 80032e2:	d504      	bpl.n	80032ee <_vfiprintf_r+0x4e>
 80032e4:	f04f 30ff 	mov.w	r0, #4294967295
 80032e8:	b01d      	add	sp, #116	@ 0x74
 80032ea:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80032ee:	89ab      	ldrh	r3, [r5, #12]
 80032f0:	0598      	lsls	r0, r3, #22
 80032f2:	d4f7      	bmi.n	80032e4 <_vfiprintf_r+0x44>
 80032f4:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 80032f6:	f7ff feaf 	bl	8003058 <__retarget_lock_release_recursive>
 80032fa:	e7f3      	b.n	80032e4 <_vfiprintf_r+0x44>
 80032fc:	2300      	movs	r3, #0
 80032fe:	9309      	str	r3, [sp, #36]	@ 0x24
 8003300:	2320      	movs	r3, #32
 8003302:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8003306:	f8cd 800c 	str.w	r8, [sp, #12]
 800330a:	2330      	movs	r3, #48	@ 0x30
 800330c:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 80034bc <_vfiprintf_r+0x21c>
 8003310:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8003314:	f04f 0901 	mov.w	r9, #1
 8003318:	4623      	mov	r3, r4
 800331a:	469a      	mov	sl, r3
 800331c:	f813 2b01 	ldrb.w	r2, [r3], #1
 8003320:	b10a      	cbz	r2, 8003326 <_vfiprintf_r+0x86>
 8003322:	2a25      	cmp	r2, #37	@ 0x25
 8003324:	d1f9      	bne.n	800331a <_vfiprintf_r+0x7a>
 8003326:	ebba 0b04 	subs.w	fp, sl, r4
 800332a:	d00b      	beq.n	8003344 <_vfiprintf_r+0xa4>
 800332c:	465b      	mov	r3, fp
 800332e:	4622      	mov	r2, r4
 8003330:	4629      	mov	r1, r5
 8003332:	4630      	mov	r0, r6
 8003334:	f7ff ffa1 	bl	800327a <__sfputs_r>
 8003338:	3001      	adds	r0, #1
 800333a:	f000 80a7 	beq.w	800348c <_vfiprintf_r+0x1ec>
 800333e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8003340:	445a      	add	r2, fp
 8003342:	9209      	str	r2, [sp, #36]	@ 0x24
 8003344:	f89a 3000 	ldrb.w	r3, [sl]
 8003348:	2b00      	cmp	r3, #0
 800334a:	f000 809f 	beq.w	800348c <_vfiprintf_r+0x1ec>
 800334e:	2300      	movs	r3, #0
 8003350:	f04f 32ff 	mov.w	r2, #4294967295
 8003354:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8003358:	f10a 0a01 	add.w	sl, sl, #1
 800335c:	9304      	str	r3, [sp, #16]
 800335e:	9307      	str	r3, [sp, #28]
 8003360:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8003364:	931a      	str	r3, [sp, #104]	@ 0x68
 8003366:	4654      	mov	r4, sl
 8003368:	2205      	movs	r2, #5
 800336a:	f814 1b01 	ldrb.w	r1, [r4], #1
 800336e:	4853      	ldr	r0, [pc, #332]	@ (80034bc <_vfiprintf_r+0x21c>)
 8003370:	f7fc ff3e 	bl	80001f0 <memchr>
 8003374:	9a04      	ldr	r2, [sp, #16]
 8003376:	b9d8      	cbnz	r0, 80033b0 <_vfiprintf_r+0x110>
 8003378:	06d1      	lsls	r1, r2, #27
 800337a:	bf44      	itt	mi
 800337c:	2320      	movmi	r3, #32
 800337e:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8003382:	0713      	lsls	r3, r2, #28
 8003384:	bf44      	itt	mi
 8003386:	232b      	movmi	r3, #43	@ 0x2b
 8003388:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 800338c:	f89a 3000 	ldrb.w	r3, [sl]
 8003390:	2b2a      	cmp	r3, #42	@ 0x2a
 8003392:	d015      	beq.n	80033c0 <_vfiprintf_r+0x120>
 8003394:	9a07      	ldr	r2, [sp, #28]
 8003396:	4654      	mov	r4, sl
 8003398:	2000      	movs	r0, #0
 800339a:	f04f 0c0a 	mov.w	ip, #10
 800339e:	4621      	mov	r1, r4
 80033a0:	f811 3b01 	ldrb.w	r3, [r1], #1
 80033a4:	3b30      	subs	r3, #48	@ 0x30
 80033a6:	2b09      	cmp	r3, #9
 80033a8:	d94b      	bls.n	8003442 <_vfiprintf_r+0x1a2>
 80033aa:	b1b0      	cbz	r0, 80033da <_vfiprintf_r+0x13a>
 80033ac:	9207      	str	r2, [sp, #28]
 80033ae:	e014      	b.n	80033da <_vfiprintf_r+0x13a>
 80033b0:	eba0 0308 	sub.w	r3, r0, r8
 80033b4:	fa09 f303 	lsl.w	r3, r9, r3
 80033b8:	4313      	orrs	r3, r2
 80033ba:	9304      	str	r3, [sp, #16]
 80033bc:	46a2      	mov	sl, r4
 80033be:	e7d2      	b.n	8003366 <_vfiprintf_r+0xc6>
 80033c0:	9b03      	ldr	r3, [sp, #12]
 80033c2:	1d19      	adds	r1, r3, #4
 80033c4:	681b      	ldr	r3, [r3, #0]
 80033c6:	9103      	str	r1, [sp, #12]
 80033c8:	2b00      	cmp	r3, #0
 80033ca:	bfbb      	ittet	lt
 80033cc:	425b      	neglt	r3, r3
 80033ce:	f042 0202 	orrlt.w	r2, r2, #2
 80033d2:	9307      	strge	r3, [sp, #28]
 80033d4:	9307      	strlt	r3, [sp, #28]
 80033d6:	bfb8      	it	lt
 80033d8:	9204      	strlt	r2, [sp, #16]
 80033da:	7823      	ldrb	r3, [r4, #0]
 80033dc:	2b2e      	cmp	r3, #46	@ 0x2e
 80033de:	d10a      	bne.n	80033f6 <_vfiprintf_r+0x156>
 80033e0:	7863      	ldrb	r3, [r4, #1]
 80033e2:	2b2a      	cmp	r3, #42	@ 0x2a
 80033e4:	d132      	bne.n	800344c <_vfiprintf_r+0x1ac>
 80033e6:	9b03      	ldr	r3, [sp, #12]
 80033e8:	1d1a      	adds	r2, r3, #4
 80033ea:	681b      	ldr	r3, [r3, #0]
 80033ec:	9203      	str	r2, [sp, #12]
 80033ee:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 80033f2:	3402      	adds	r4, #2
 80033f4:	9305      	str	r3, [sp, #20]
 80033f6:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 80034cc <_vfiprintf_r+0x22c>
 80033fa:	7821      	ldrb	r1, [r4, #0]
 80033fc:	2203      	movs	r2, #3
 80033fe:	4650      	mov	r0, sl
 8003400:	f7fc fef6 	bl	80001f0 <memchr>
 8003404:	b138      	cbz	r0, 8003416 <_vfiprintf_r+0x176>
 8003406:	9b04      	ldr	r3, [sp, #16]
 8003408:	eba0 000a 	sub.w	r0, r0, sl
 800340c:	2240      	movs	r2, #64	@ 0x40
 800340e:	4082      	lsls	r2, r0
 8003410:	4313      	orrs	r3, r2
 8003412:	3401      	adds	r4, #1
 8003414:	9304      	str	r3, [sp, #16]
 8003416:	f814 1b01 	ldrb.w	r1, [r4], #1
 800341a:	4829      	ldr	r0, [pc, #164]	@ (80034c0 <_vfiprintf_r+0x220>)
 800341c:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8003420:	2206      	movs	r2, #6
 8003422:	f7fc fee5 	bl	80001f0 <memchr>
 8003426:	2800      	cmp	r0, #0
 8003428:	d03f      	beq.n	80034aa <_vfiprintf_r+0x20a>
 800342a:	4b26      	ldr	r3, [pc, #152]	@ (80034c4 <_vfiprintf_r+0x224>)
 800342c:	bb1b      	cbnz	r3, 8003476 <_vfiprintf_r+0x1d6>
 800342e:	9b03      	ldr	r3, [sp, #12]
 8003430:	3307      	adds	r3, #7
 8003432:	f023 0307 	bic.w	r3, r3, #7
 8003436:	3308      	adds	r3, #8
 8003438:	9303      	str	r3, [sp, #12]
 800343a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800343c:	443b      	add	r3, r7
 800343e:	9309      	str	r3, [sp, #36]	@ 0x24
 8003440:	e76a      	b.n	8003318 <_vfiprintf_r+0x78>
 8003442:	fb0c 3202 	mla	r2, ip, r2, r3
 8003446:	460c      	mov	r4, r1
 8003448:	2001      	movs	r0, #1
 800344a:	e7a8      	b.n	800339e <_vfiprintf_r+0xfe>
 800344c:	2300      	movs	r3, #0
 800344e:	3401      	adds	r4, #1
 8003450:	9305      	str	r3, [sp, #20]
 8003452:	4619      	mov	r1, r3
 8003454:	f04f 0c0a 	mov.w	ip, #10
 8003458:	4620      	mov	r0, r4
 800345a:	f810 2b01 	ldrb.w	r2, [r0], #1
 800345e:	3a30      	subs	r2, #48	@ 0x30
 8003460:	2a09      	cmp	r2, #9
 8003462:	d903      	bls.n	800346c <_vfiprintf_r+0x1cc>
 8003464:	2b00      	cmp	r3, #0
 8003466:	d0c6      	beq.n	80033f6 <_vfiprintf_r+0x156>
 8003468:	9105      	str	r1, [sp, #20]
 800346a:	e7c4      	b.n	80033f6 <_vfiprintf_r+0x156>
 800346c:	fb0c 2101 	mla	r1, ip, r1, r2
 8003470:	4604      	mov	r4, r0
 8003472:	2301      	movs	r3, #1
 8003474:	e7f0      	b.n	8003458 <_vfiprintf_r+0x1b8>
 8003476:	ab03      	add	r3, sp, #12
 8003478:	9300      	str	r3, [sp, #0]
 800347a:	462a      	mov	r2, r5
 800347c:	4b12      	ldr	r3, [pc, #72]	@ (80034c8 <_vfiprintf_r+0x228>)
 800347e:	a904      	add	r1, sp, #16
 8003480:	4630      	mov	r0, r6
 8003482:	f3af 8000 	nop.w
 8003486:	4607      	mov	r7, r0
 8003488:	1c78      	adds	r0, r7, #1
 800348a:	d1d6      	bne.n	800343a <_vfiprintf_r+0x19a>
 800348c:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 800348e:	07d9      	lsls	r1, r3, #31
 8003490:	d405      	bmi.n	800349e <_vfiprintf_r+0x1fe>
 8003492:	89ab      	ldrh	r3, [r5, #12]
 8003494:	059a      	lsls	r2, r3, #22
 8003496:	d402      	bmi.n	800349e <_vfiprintf_r+0x1fe>
 8003498:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 800349a:	f7ff fddd 	bl	8003058 <__retarget_lock_release_recursive>
 800349e:	89ab      	ldrh	r3, [r5, #12]
 80034a0:	065b      	lsls	r3, r3, #25
 80034a2:	f53f af1f 	bmi.w	80032e4 <_vfiprintf_r+0x44>
 80034a6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80034a8:	e71e      	b.n	80032e8 <_vfiprintf_r+0x48>
 80034aa:	ab03      	add	r3, sp, #12
 80034ac:	9300      	str	r3, [sp, #0]
 80034ae:	462a      	mov	r2, r5
 80034b0:	4b05      	ldr	r3, [pc, #20]	@ (80034c8 <_vfiprintf_r+0x228>)
 80034b2:	a904      	add	r1, sp, #16
 80034b4:	4630      	mov	r0, r6
 80034b6:	f000 f879 	bl	80035ac <_printf_i>
 80034ba:	e7e4      	b.n	8003486 <_vfiprintf_r+0x1e6>
 80034bc:	08003bfc 	.word	0x08003bfc
 80034c0:	08003c06 	.word	0x08003c06
 80034c4:	00000000 	.word	0x00000000
 80034c8:	0800327b 	.word	0x0800327b
 80034cc:	08003c02 	.word	0x08003c02

080034d0 <_printf_common>:
 80034d0:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80034d4:	4616      	mov	r6, r2
 80034d6:	4698      	mov	r8, r3
 80034d8:	688a      	ldr	r2, [r1, #8]
 80034da:	690b      	ldr	r3, [r1, #16]
 80034dc:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80034e0:	4293      	cmp	r3, r2
 80034e2:	bfb8      	it	lt
 80034e4:	4613      	movlt	r3, r2
 80034e6:	6033      	str	r3, [r6, #0]
 80034e8:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80034ec:	4607      	mov	r7, r0
 80034ee:	460c      	mov	r4, r1
 80034f0:	b10a      	cbz	r2, 80034f6 <_printf_common+0x26>
 80034f2:	3301      	adds	r3, #1
 80034f4:	6033      	str	r3, [r6, #0]
 80034f6:	6823      	ldr	r3, [r4, #0]
 80034f8:	0699      	lsls	r1, r3, #26
 80034fa:	bf42      	ittt	mi
 80034fc:	6833      	ldrmi	r3, [r6, #0]
 80034fe:	3302      	addmi	r3, #2
 8003500:	6033      	strmi	r3, [r6, #0]
 8003502:	6825      	ldr	r5, [r4, #0]
 8003504:	f015 0506 	ands.w	r5, r5, #6
 8003508:	d106      	bne.n	8003518 <_printf_common+0x48>
 800350a:	f104 0a19 	add.w	sl, r4, #25
 800350e:	68e3      	ldr	r3, [r4, #12]
 8003510:	6832      	ldr	r2, [r6, #0]
 8003512:	1a9b      	subs	r3, r3, r2
 8003514:	42ab      	cmp	r3, r5
 8003516:	dc26      	bgt.n	8003566 <_printf_common+0x96>
 8003518:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 800351c:	6822      	ldr	r2, [r4, #0]
 800351e:	3b00      	subs	r3, #0
 8003520:	bf18      	it	ne
 8003522:	2301      	movne	r3, #1
 8003524:	0692      	lsls	r2, r2, #26
 8003526:	d42b      	bmi.n	8003580 <_printf_common+0xb0>
 8003528:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 800352c:	4641      	mov	r1, r8
 800352e:	4638      	mov	r0, r7
 8003530:	47c8      	blx	r9
 8003532:	3001      	adds	r0, #1
 8003534:	d01e      	beq.n	8003574 <_printf_common+0xa4>
 8003536:	6823      	ldr	r3, [r4, #0]
 8003538:	6922      	ldr	r2, [r4, #16]
 800353a:	f003 0306 	and.w	r3, r3, #6
 800353e:	2b04      	cmp	r3, #4
 8003540:	bf02      	ittt	eq
 8003542:	68e5      	ldreq	r5, [r4, #12]
 8003544:	6833      	ldreq	r3, [r6, #0]
 8003546:	1aed      	subeq	r5, r5, r3
 8003548:	68a3      	ldr	r3, [r4, #8]
 800354a:	bf0c      	ite	eq
 800354c:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8003550:	2500      	movne	r5, #0
 8003552:	4293      	cmp	r3, r2
 8003554:	bfc4      	itt	gt
 8003556:	1a9b      	subgt	r3, r3, r2
 8003558:	18ed      	addgt	r5, r5, r3
 800355a:	2600      	movs	r6, #0
 800355c:	341a      	adds	r4, #26
 800355e:	42b5      	cmp	r5, r6
 8003560:	d11a      	bne.n	8003598 <_printf_common+0xc8>
 8003562:	2000      	movs	r0, #0
 8003564:	e008      	b.n	8003578 <_printf_common+0xa8>
 8003566:	2301      	movs	r3, #1
 8003568:	4652      	mov	r2, sl
 800356a:	4641      	mov	r1, r8
 800356c:	4638      	mov	r0, r7
 800356e:	47c8      	blx	r9
 8003570:	3001      	adds	r0, #1
 8003572:	d103      	bne.n	800357c <_printf_common+0xac>
 8003574:	f04f 30ff 	mov.w	r0, #4294967295
 8003578:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800357c:	3501      	adds	r5, #1
 800357e:	e7c6      	b.n	800350e <_printf_common+0x3e>
 8003580:	18e1      	adds	r1, r4, r3
 8003582:	1c5a      	adds	r2, r3, #1
 8003584:	2030      	movs	r0, #48	@ 0x30
 8003586:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800358a:	4422      	add	r2, r4
 800358c:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8003590:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8003594:	3302      	adds	r3, #2
 8003596:	e7c7      	b.n	8003528 <_printf_common+0x58>
 8003598:	2301      	movs	r3, #1
 800359a:	4622      	mov	r2, r4
 800359c:	4641      	mov	r1, r8
 800359e:	4638      	mov	r0, r7
 80035a0:	47c8      	blx	r9
 80035a2:	3001      	adds	r0, #1
 80035a4:	d0e6      	beq.n	8003574 <_printf_common+0xa4>
 80035a6:	3601      	adds	r6, #1
 80035a8:	e7d9      	b.n	800355e <_printf_common+0x8e>
	...

080035ac <_printf_i>:
 80035ac:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80035b0:	7e0f      	ldrb	r7, [r1, #24]
 80035b2:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80035b4:	2f78      	cmp	r7, #120	@ 0x78
 80035b6:	4691      	mov	r9, r2
 80035b8:	4680      	mov	r8, r0
 80035ba:	460c      	mov	r4, r1
 80035bc:	469a      	mov	sl, r3
 80035be:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80035c2:	d807      	bhi.n	80035d4 <_printf_i+0x28>
 80035c4:	2f62      	cmp	r7, #98	@ 0x62
 80035c6:	d80a      	bhi.n	80035de <_printf_i+0x32>
 80035c8:	2f00      	cmp	r7, #0
 80035ca:	f000 80d2 	beq.w	8003772 <_printf_i+0x1c6>
 80035ce:	2f58      	cmp	r7, #88	@ 0x58
 80035d0:	f000 80b9 	beq.w	8003746 <_printf_i+0x19a>
 80035d4:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80035d8:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80035dc:	e03a      	b.n	8003654 <_printf_i+0xa8>
 80035de:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80035e2:	2b15      	cmp	r3, #21
 80035e4:	d8f6      	bhi.n	80035d4 <_printf_i+0x28>
 80035e6:	a101      	add	r1, pc, #4	@ (adr r1, 80035ec <_printf_i+0x40>)
 80035e8:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80035ec:	08003645 	.word	0x08003645
 80035f0:	08003659 	.word	0x08003659
 80035f4:	080035d5 	.word	0x080035d5
 80035f8:	080035d5 	.word	0x080035d5
 80035fc:	080035d5 	.word	0x080035d5
 8003600:	080035d5 	.word	0x080035d5
 8003604:	08003659 	.word	0x08003659
 8003608:	080035d5 	.word	0x080035d5
 800360c:	080035d5 	.word	0x080035d5
 8003610:	080035d5 	.word	0x080035d5
 8003614:	080035d5 	.word	0x080035d5
 8003618:	08003759 	.word	0x08003759
 800361c:	08003683 	.word	0x08003683
 8003620:	08003713 	.word	0x08003713
 8003624:	080035d5 	.word	0x080035d5
 8003628:	080035d5 	.word	0x080035d5
 800362c:	0800377b 	.word	0x0800377b
 8003630:	080035d5 	.word	0x080035d5
 8003634:	08003683 	.word	0x08003683
 8003638:	080035d5 	.word	0x080035d5
 800363c:	080035d5 	.word	0x080035d5
 8003640:	0800371b 	.word	0x0800371b
 8003644:	6833      	ldr	r3, [r6, #0]
 8003646:	1d1a      	adds	r2, r3, #4
 8003648:	681b      	ldr	r3, [r3, #0]
 800364a:	6032      	str	r2, [r6, #0]
 800364c:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8003650:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8003654:	2301      	movs	r3, #1
 8003656:	e09d      	b.n	8003794 <_printf_i+0x1e8>
 8003658:	6833      	ldr	r3, [r6, #0]
 800365a:	6820      	ldr	r0, [r4, #0]
 800365c:	1d19      	adds	r1, r3, #4
 800365e:	6031      	str	r1, [r6, #0]
 8003660:	0606      	lsls	r6, r0, #24
 8003662:	d501      	bpl.n	8003668 <_printf_i+0xbc>
 8003664:	681d      	ldr	r5, [r3, #0]
 8003666:	e003      	b.n	8003670 <_printf_i+0xc4>
 8003668:	0645      	lsls	r5, r0, #25
 800366a:	d5fb      	bpl.n	8003664 <_printf_i+0xb8>
 800366c:	f9b3 5000 	ldrsh.w	r5, [r3]
 8003670:	2d00      	cmp	r5, #0
 8003672:	da03      	bge.n	800367c <_printf_i+0xd0>
 8003674:	232d      	movs	r3, #45	@ 0x2d
 8003676:	426d      	negs	r5, r5
 8003678:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800367c:	4859      	ldr	r0, [pc, #356]	@ (80037e4 <_printf_i+0x238>)
 800367e:	230a      	movs	r3, #10
 8003680:	e011      	b.n	80036a6 <_printf_i+0xfa>
 8003682:	6821      	ldr	r1, [r4, #0]
 8003684:	6833      	ldr	r3, [r6, #0]
 8003686:	0608      	lsls	r0, r1, #24
 8003688:	f853 5b04 	ldr.w	r5, [r3], #4
 800368c:	d402      	bmi.n	8003694 <_printf_i+0xe8>
 800368e:	0649      	lsls	r1, r1, #25
 8003690:	bf48      	it	mi
 8003692:	b2ad      	uxthmi	r5, r5
 8003694:	2f6f      	cmp	r7, #111	@ 0x6f
 8003696:	4853      	ldr	r0, [pc, #332]	@ (80037e4 <_printf_i+0x238>)
 8003698:	6033      	str	r3, [r6, #0]
 800369a:	bf14      	ite	ne
 800369c:	230a      	movne	r3, #10
 800369e:	2308      	moveq	r3, #8
 80036a0:	2100      	movs	r1, #0
 80036a2:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80036a6:	6866      	ldr	r6, [r4, #4]
 80036a8:	60a6      	str	r6, [r4, #8]
 80036aa:	2e00      	cmp	r6, #0
 80036ac:	bfa2      	ittt	ge
 80036ae:	6821      	ldrge	r1, [r4, #0]
 80036b0:	f021 0104 	bicge.w	r1, r1, #4
 80036b4:	6021      	strge	r1, [r4, #0]
 80036b6:	b90d      	cbnz	r5, 80036bc <_printf_i+0x110>
 80036b8:	2e00      	cmp	r6, #0
 80036ba:	d04b      	beq.n	8003754 <_printf_i+0x1a8>
 80036bc:	4616      	mov	r6, r2
 80036be:	fbb5 f1f3 	udiv	r1, r5, r3
 80036c2:	fb03 5711 	mls	r7, r3, r1, r5
 80036c6:	5dc7      	ldrb	r7, [r0, r7]
 80036c8:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80036cc:	462f      	mov	r7, r5
 80036ce:	42bb      	cmp	r3, r7
 80036d0:	460d      	mov	r5, r1
 80036d2:	d9f4      	bls.n	80036be <_printf_i+0x112>
 80036d4:	2b08      	cmp	r3, #8
 80036d6:	d10b      	bne.n	80036f0 <_printf_i+0x144>
 80036d8:	6823      	ldr	r3, [r4, #0]
 80036da:	07df      	lsls	r7, r3, #31
 80036dc:	d508      	bpl.n	80036f0 <_printf_i+0x144>
 80036de:	6923      	ldr	r3, [r4, #16]
 80036e0:	6861      	ldr	r1, [r4, #4]
 80036e2:	4299      	cmp	r1, r3
 80036e4:	bfde      	ittt	le
 80036e6:	2330      	movle	r3, #48	@ 0x30
 80036e8:	f806 3c01 	strble.w	r3, [r6, #-1]
 80036ec:	f106 36ff 	addle.w	r6, r6, #4294967295
 80036f0:	1b92      	subs	r2, r2, r6
 80036f2:	6122      	str	r2, [r4, #16]
 80036f4:	f8cd a000 	str.w	sl, [sp]
 80036f8:	464b      	mov	r3, r9
 80036fa:	aa03      	add	r2, sp, #12
 80036fc:	4621      	mov	r1, r4
 80036fe:	4640      	mov	r0, r8
 8003700:	f7ff fee6 	bl	80034d0 <_printf_common>
 8003704:	3001      	adds	r0, #1
 8003706:	d14a      	bne.n	800379e <_printf_i+0x1f2>
 8003708:	f04f 30ff 	mov.w	r0, #4294967295
 800370c:	b004      	add	sp, #16
 800370e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8003712:	6823      	ldr	r3, [r4, #0]
 8003714:	f043 0320 	orr.w	r3, r3, #32
 8003718:	6023      	str	r3, [r4, #0]
 800371a:	4833      	ldr	r0, [pc, #204]	@ (80037e8 <_printf_i+0x23c>)
 800371c:	2778      	movs	r7, #120	@ 0x78
 800371e:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8003722:	6823      	ldr	r3, [r4, #0]
 8003724:	6831      	ldr	r1, [r6, #0]
 8003726:	061f      	lsls	r7, r3, #24
 8003728:	f851 5b04 	ldr.w	r5, [r1], #4
 800372c:	d402      	bmi.n	8003734 <_printf_i+0x188>
 800372e:	065f      	lsls	r7, r3, #25
 8003730:	bf48      	it	mi
 8003732:	b2ad      	uxthmi	r5, r5
 8003734:	6031      	str	r1, [r6, #0]
 8003736:	07d9      	lsls	r1, r3, #31
 8003738:	bf44      	itt	mi
 800373a:	f043 0320 	orrmi.w	r3, r3, #32
 800373e:	6023      	strmi	r3, [r4, #0]
 8003740:	b11d      	cbz	r5, 800374a <_printf_i+0x19e>
 8003742:	2310      	movs	r3, #16
 8003744:	e7ac      	b.n	80036a0 <_printf_i+0xf4>
 8003746:	4827      	ldr	r0, [pc, #156]	@ (80037e4 <_printf_i+0x238>)
 8003748:	e7e9      	b.n	800371e <_printf_i+0x172>
 800374a:	6823      	ldr	r3, [r4, #0]
 800374c:	f023 0320 	bic.w	r3, r3, #32
 8003750:	6023      	str	r3, [r4, #0]
 8003752:	e7f6      	b.n	8003742 <_printf_i+0x196>
 8003754:	4616      	mov	r6, r2
 8003756:	e7bd      	b.n	80036d4 <_printf_i+0x128>
 8003758:	6833      	ldr	r3, [r6, #0]
 800375a:	6825      	ldr	r5, [r4, #0]
 800375c:	6961      	ldr	r1, [r4, #20]
 800375e:	1d18      	adds	r0, r3, #4
 8003760:	6030      	str	r0, [r6, #0]
 8003762:	062e      	lsls	r6, r5, #24
 8003764:	681b      	ldr	r3, [r3, #0]
 8003766:	d501      	bpl.n	800376c <_printf_i+0x1c0>
 8003768:	6019      	str	r1, [r3, #0]
 800376a:	e002      	b.n	8003772 <_printf_i+0x1c6>
 800376c:	0668      	lsls	r0, r5, #25
 800376e:	d5fb      	bpl.n	8003768 <_printf_i+0x1bc>
 8003770:	8019      	strh	r1, [r3, #0]
 8003772:	2300      	movs	r3, #0
 8003774:	6123      	str	r3, [r4, #16]
 8003776:	4616      	mov	r6, r2
 8003778:	e7bc      	b.n	80036f4 <_printf_i+0x148>
 800377a:	6833      	ldr	r3, [r6, #0]
 800377c:	1d1a      	adds	r2, r3, #4
 800377e:	6032      	str	r2, [r6, #0]
 8003780:	681e      	ldr	r6, [r3, #0]
 8003782:	6862      	ldr	r2, [r4, #4]
 8003784:	2100      	movs	r1, #0
 8003786:	4630      	mov	r0, r6
 8003788:	f7fc fd32 	bl	80001f0 <memchr>
 800378c:	b108      	cbz	r0, 8003792 <_printf_i+0x1e6>
 800378e:	1b80      	subs	r0, r0, r6
 8003790:	6060      	str	r0, [r4, #4]
 8003792:	6863      	ldr	r3, [r4, #4]
 8003794:	6123      	str	r3, [r4, #16]
 8003796:	2300      	movs	r3, #0
 8003798:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800379c:	e7aa      	b.n	80036f4 <_printf_i+0x148>
 800379e:	6923      	ldr	r3, [r4, #16]
 80037a0:	4632      	mov	r2, r6
 80037a2:	4649      	mov	r1, r9
 80037a4:	4640      	mov	r0, r8
 80037a6:	47d0      	blx	sl
 80037a8:	3001      	adds	r0, #1
 80037aa:	d0ad      	beq.n	8003708 <_printf_i+0x15c>
 80037ac:	6823      	ldr	r3, [r4, #0]
 80037ae:	079b      	lsls	r3, r3, #30
 80037b0:	d413      	bmi.n	80037da <_printf_i+0x22e>
 80037b2:	68e0      	ldr	r0, [r4, #12]
 80037b4:	9b03      	ldr	r3, [sp, #12]
 80037b6:	4298      	cmp	r0, r3
 80037b8:	bfb8      	it	lt
 80037ba:	4618      	movlt	r0, r3
 80037bc:	e7a6      	b.n	800370c <_printf_i+0x160>
 80037be:	2301      	movs	r3, #1
 80037c0:	4632      	mov	r2, r6
 80037c2:	4649      	mov	r1, r9
 80037c4:	4640      	mov	r0, r8
 80037c6:	47d0      	blx	sl
 80037c8:	3001      	adds	r0, #1
 80037ca:	d09d      	beq.n	8003708 <_printf_i+0x15c>
 80037cc:	3501      	adds	r5, #1
 80037ce:	68e3      	ldr	r3, [r4, #12]
 80037d0:	9903      	ldr	r1, [sp, #12]
 80037d2:	1a5b      	subs	r3, r3, r1
 80037d4:	42ab      	cmp	r3, r5
 80037d6:	dcf2      	bgt.n	80037be <_printf_i+0x212>
 80037d8:	e7eb      	b.n	80037b2 <_printf_i+0x206>
 80037da:	2500      	movs	r5, #0
 80037dc:	f104 0619 	add.w	r6, r4, #25
 80037e0:	e7f5      	b.n	80037ce <_printf_i+0x222>
 80037e2:	bf00      	nop
 80037e4:	08003c0d 	.word	0x08003c0d
 80037e8:	08003c1e 	.word	0x08003c1e

080037ec <__sflush_r>:
 80037ec:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80037f0:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80037f4:	0716      	lsls	r6, r2, #28
 80037f6:	4605      	mov	r5, r0
 80037f8:	460c      	mov	r4, r1
 80037fa:	d454      	bmi.n	80038a6 <__sflush_r+0xba>
 80037fc:	684b      	ldr	r3, [r1, #4]
 80037fe:	2b00      	cmp	r3, #0
 8003800:	dc02      	bgt.n	8003808 <__sflush_r+0x1c>
 8003802:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 8003804:	2b00      	cmp	r3, #0
 8003806:	dd48      	ble.n	800389a <__sflush_r+0xae>
 8003808:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800380a:	2e00      	cmp	r6, #0
 800380c:	d045      	beq.n	800389a <__sflush_r+0xae>
 800380e:	2300      	movs	r3, #0
 8003810:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 8003814:	682f      	ldr	r7, [r5, #0]
 8003816:	6a21      	ldr	r1, [r4, #32]
 8003818:	602b      	str	r3, [r5, #0]
 800381a:	d030      	beq.n	800387e <__sflush_r+0x92>
 800381c:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 800381e:	89a3      	ldrh	r3, [r4, #12]
 8003820:	0759      	lsls	r1, r3, #29
 8003822:	d505      	bpl.n	8003830 <__sflush_r+0x44>
 8003824:	6863      	ldr	r3, [r4, #4]
 8003826:	1ad2      	subs	r2, r2, r3
 8003828:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 800382a:	b10b      	cbz	r3, 8003830 <__sflush_r+0x44>
 800382c:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 800382e:	1ad2      	subs	r2, r2, r3
 8003830:	2300      	movs	r3, #0
 8003832:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8003834:	6a21      	ldr	r1, [r4, #32]
 8003836:	4628      	mov	r0, r5
 8003838:	47b0      	blx	r6
 800383a:	1c43      	adds	r3, r0, #1
 800383c:	89a3      	ldrh	r3, [r4, #12]
 800383e:	d106      	bne.n	800384e <__sflush_r+0x62>
 8003840:	6829      	ldr	r1, [r5, #0]
 8003842:	291d      	cmp	r1, #29
 8003844:	d82b      	bhi.n	800389e <__sflush_r+0xb2>
 8003846:	4a2a      	ldr	r2, [pc, #168]	@ (80038f0 <__sflush_r+0x104>)
 8003848:	410a      	asrs	r2, r1
 800384a:	07d6      	lsls	r6, r2, #31
 800384c:	d427      	bmi.n	800389e <__sflush_r+0xb2>
 800384e:	2200      	movs	r2, #0
 8003850:	6062      	str	r2, [r4, #4]
 8003852:	04d9      	lsls	r1, r3, #19
 8003854:	6922      	ldr	r2, [r4, #16]
 8003856:	6022      	str	r2, [r4, #0]
 8003858:	d504      	bpl.n	8003864 <__sflush_r+0x78>
 800385a:	1c42      	adds	r2, r0, #1
 800385c:	d101      	bne.n	8003862 <__sflush_r+0x76>
 800385e:	682b      	ldr	r3, [r5, #0]
 8003860:	b903      	cbnz	r3, 8003864 <__sflush_r+0x78>
 8003862:	6560      	str	r0, [r4, #84]	@ 0x54
 8003864:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8003866:	602f      	str	r7, [r5, #0]
 8003868:	b1b9      	cbz	r1, 800389a <__sflush_r+0xae>
 800386a:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 800386e:	4299      	cmp	r1, r3
 8003870:	d002      	beq.n	8003878 <__sflush_r+0x8c>
 8003872:	4628      	mov	r0, r5
 8003874:	f7ff fbf2 	bl	800305c <_free_r>
 8003878:	2300      	movs	r3, #0
 800387a:	6363      	str	r3, [r4, #52]	@ 0x34
 800387c:	e00d      	b.n	800389a <__sflush_r+0xae>
 800387e:	2301      	movs	r3, #1
 8003880:	4628      	mov	r0, r5
 8003882:	47b0      	blx	r6
 8003884:	4602      	mov	r2, r0
 8003886:	1c50      	adds	r0, r2, #1
 8003888:	d1c9      	bne.n	800381e <__sflush_r+0x32>
 800388a:	682b      	ldr	r3, [r5, #0]
 800388c:	2b00      	cmp	r3, #0
 800388e:	d0c6      	beq.n	800381e <__sflush_r+0x32>
 8003890:	2b1d      	cmp	r3, #29
 8003892:	d001      	beq.n	8003898 <__sflush_r+0xac>
 8003894:	2b16      	cmp	r3, #22
 8003896:	d11e      	bne.n	80038d6 <__sflush_r+0xea>
 8003898:	602f      	str	r7, [r5, #0]
 800389a:	2000      	movs	r0, #0
 800389c:	e022      	b.n	80038e4 <__sflush_r+0xf8>
 800389e:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038a2:	b21b      	sxth	r3, r3
 80038a4:	e01b      	b.n	80038de <__sflush_r+0xf2>
 80038a6:	690f      	ldr	r7, [r1, #16]
 80038a8:	2f00      	cmp	r7, #0
 80038aa:	d0f6      	beq.n	800389a <__sflush_r+0xae>
 80038ac:	0793      	lsls	r3, r2, #30
 80038ae:	680e      	ldr	r6, [r1, #0]
 80038b0:	bf08      	it	eq
 80038b2:	694b      	ldreq	r3, [r1, #20]
 80038b4:	600f      	str	r7, [r1, #0]
 80038b6:	bf18      	it	ne
 80038b8:	2300      	movne	r3, #0
 80038ba:	eba6 0807 	sub.w	r8, r6, r7
 80038be:	608b      	str	r3, [r1, #8]
 80038c0:	f1b8 0f00 	cmp.w	r8, #0
 80038c4:	dde9      	ble.n	800389a <__sflush_r+0xae>
 80038c6:	6a21      	ldr	r1, [r4, #32]
 80038c8:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80038ca:	4643      	mov	r3, r8
 80038cc:	463a      	mov	r2, r7
 80038ce:	4628      	mov	r0, r5
 80038d0:	47b0      	blx	r6
 80038d2:	2800      	cmp	r0, #0
 80038d4:	dc08      	bgt.n	80038e8 <__sflush_r+0xfc>
 80038d6:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80038da:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80038de:	81a3      	strh	r3, [r4, #12]
 80038e0:	f04f 30ff 	mov.w	r0, #4294967295
 80038e4:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80038e8:	4407      	add	r7, r0
 80038ea:	eba8 0800 	sub.w	r8, r8, r0
 80038ee:	e7e7      	b.n	80038c0 <__sflush_r+0xd4>
 80038f0:	dfbffffe 	.word	0xdfbffffe

080038f4 <_fflush_r>:
 80038f4:	b538      	push	{r3, r4, r5, lr}
 80038f6:	690b      	ldr	r3, [r1, #16]
 80038f8:	4605      	mov	r5, r0
 80038fa:	460c      	mov	r4, r1
 80038fc:	b913      	cbnz	r3, 8003904 <_fflush_r+0x10>
 80038fe:	2500      	movs	r5, #0
 8003900:	4628      	mov	r0, r5
 8003902:	bd38      	pop	{r3, r4, r5, pc}
 8003904:	b118      	cbz	r0, 800390e <_fflush_r+0x1a>
 8003906:	6a03      	ldr	r3, [r0, #32]
 8003908:	b90b      	cbnz	r3, 800390e <_fflush_r+0x1a>
 800390a:	f7ff fa9f 	bl	8002e4c <__sinit>
 800390e:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003912:	2b00      	cmp	r3, #0
 8003914:	d0f3      	beq.n	80038fe <_fflush_r+0xa>
 8003916:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8003918:	07d0      	lsls	r0, r2, #31
 800391a:	d404      	bmi.n	8003926 <_fflush_r+0x32>
 800391c:	0599      	lsls	r1, r3, #22
 800391e:	d402      	bmi.n	8003926 <_fflush_r+0x32>
 8003920:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8003922:	f7ff fb98 	bl	8003056 <__retarget_lock_acquire_recursive>
 8003926:	4628      	mov	r0, r5
 8003928:	4621      	mov	r1, r4
 800392a:	f7ff ff5f 	bl	80037ec <__sflush_r>
 800392e:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8003930:	07da      	lsls	r2, r3, #31
 8003932:	4605      	mov	r5, r0
 8003934:	d4e4      	bmi.n	8003900 <_fflush_r+0xc>
 8003936:	89a3      	ldrh	r3, [r4, #12]
 8003938:	059b      	lsls	r3, r3, #22
 800393a:	d4e1      	bmi.n	8003900 <_fflush_r+0xc>
 800393c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800393e:	f7ff fb8b 	bl	8003058 <__retarget_lock_release_recursive>
 8003942:	e7dd      	b.n	8003900 <_fflush_r+0xc>

08003944 <__swbuf_r>:
 8003944:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003946:	460e      	mov	r6, r1
 8003948:	4614      	mov	r4, r2
 800394a:	4605      	mov	r5, r0
 800394c:	b118      	cbz	r0, 8003956 <__swbuf_r+0x12>
 800394e:	6a03      	ldr	r3, [r0, #32]
 8003950:	b90b      	cbnz	r3, 8003956 <__swbuf_r+0x12>
 8003952:	f7ff fa7b 	bl	8002e4c <__sinit>
 8003956:	69a3      	ldr	r3, [r4, #24]
 8003958:	60a3      	str	r3, [r4, #8]
 800395a:	89a3      	ldrh	r3, [r4, #12]
 800395c:	071a      	lsls	r2, r3, #28
 800395e:	d501      	bpl.n	8003964 <__swbuf_r+0x20>
 8003960:	6923      	ldr	r3, [r4, #16]
 8003962:	b943      	cbnz	r3, 8003976 <__swbuf_r+0x32>
 8003964:	4621      	mov	r1, r4
 8003966:	4628      	mov	r0, r5
 8003968:	f000 f82a 	bl	80039c0 <__swsetup_r>
 800396c:	b118      	cbz	r0, 8003976 <__swbuf_r+0x32>
 800396e:	f04f 37ff 	mov.w	r7, #4294967295
 8003972:	4638      	mov	r0, r7
 8003974:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8003976:	6823      	ldr	r3, [r4, #0]
 8003978:	6922      	ldr	r2, [r4, #16]
 800397a:	1a98      	subs	r0, r3, r2
 800397c:	6963      	ldr	r3, [r4, #20]
 800397e:	b2f6      	uxtb	r6, r6
 8003980:	4283      	cmp	r3, r0
 8003982:	4637      	mov	r7, r6
 8003984:	dc05      	bgt.n	8003992 <__swbuf_r+0x4e>
 8003986:	4621      	mov	r1, r4
 8003988:	4628      	mov	r0, r5
 800398a:	f7ff ffb3 	bl	80038f4 <_fflush_r>
 800398e:	2800      	cmp	r0, #0
 8003990:	d1ed      	bne.n	800396e <__swbuf_r+0x2a>
 8003992:	68a3      	ldr	r3, [r4, #8]
 8003994:	3b01      	subs	r3, #1
 8003996:	60a3      	str	r3, [r4, #8]
 8003998:	6823      	ldr	r3, [r4, #0]
 800399a:	1c5a      	adds	r2, r3, #1
 800399c:	6022      	str	r2, [r4, #0]
 800399e:	701e      	strb	r6, [r3, #0]
 80039a0:	6962      	ldr	r2, [r4, #20]
 80039a2:	1c43      	adds	r3, r0, #1
 80039a4:	429a      	cmp	r2, r3
 80039a6:	d004      	beq.n	80039b2 <__swbuf_r+0x6e>
 80039a8:	89a3      	ldrh	r3, [r4, #12]
 80039aa:	07db      	lsls	r3, r3, #31
 80039ac:	d5e1      	bpl.n	8003972 <__swbuf_r+0x2e>
 80039ae:	2e0a      	cmp	r6, #10
 80039b0:	d1df      	bne.n	8003972 <__swbuf_r+0x2e>
 80039b2:	4621      	mov	r1, r4
 80039b4:	4628      	mov	r0, r5
 80039b6:	f7ff ff9d 	bl	80038f4 <_fflush_r>
 80039ba:	2800      	cmp	r0, #0
 80039bc:	d0d9      	beq.n	8003972 <__swbuf_r+0x2e>
 80039be:	e7d6      	b.n	800396e <__swbuf_r+0x2a>

080039c0 <__swsetup_r>:
 80039c0:	b538      	push	{r3, r4, r5, lr}
 80039c2:	4b29      	ldr	r3, [pc, #164]	@ (8003a68 <__swsetup_r+0xa8>)
 80039c4:	4605      	mov	r5, r0
 80039c6:	6818      	ldr	r0, [r3, #0]
 80039c8:	460c      	mov	r4, r1
 80039ca:	b118      	cbz	r0, 80039d4 <__swsetup_r+0x14>
 80039cc:	6a03      	ldr	r3, [r0, #32]
 80039ce:	b90b      	cbnz	r3, 80039d4 <__swsetup_r+0x14>
 80039d0:	f7ff fa3c 	bl	8002e4c <__sinit>
 80039d4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80039d8:	0719      	lsls	r1, r3, #28
 80039da:	d422      	bmi.n	8003a22 <__swsetup_r+0x62>
 80039dc:	06da      	lsls	r2, r3, #27
 80039de:	d407      	bmi.n	80039f0 <__swsetup_r+0x30>
 80039e0:	2209      	movs	r2, #9
 80039e2:	602a      	str	r2, [r5, #0]
 80039e4:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80039e8:	81a3      	strh	r3, [r4, #12]
 80039ea:	f04f 30ff 	mov.w	r0, #4294967295
 80039ee:	e033      	b.n	8003a58 <__swsetup_r+0x98>
 80039f0:	0758      	lsls	r0, r3, #29
 80039f2:	d512      	bpl.n	8003a1a <__swsetup_r+0x5a>
 80039f4:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 80039f6:	b141      	cbz	r1, 8003a0a <__swsetup_r+0x4a>
 80039f8:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 80039fc:	4299      	cmp	r1, r3
 80039fe:	d002      	beq.n	8003a06 <__swsetup_r+0x46>
 8003a00:	4628      	mov	r0, r5
 8003a02:	f7ff fb2b 	bl	800305c <_free_r>
 8003a06:	2300      	movs	r3, #0
 8003a08:	6363      	str	r3, [r4, #52]	@ 0x34
 8003a0a:	89a3      	ldrh	r3, [r4, #12]
 8003a0c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8003a10:	81a3      	strh	r3, [r4, #12]
 8003a12:	2300      	movs	r3, #0
 8003a14:	6063      	str	r3, [r4, #4]
 8003a16:	6923      	ldr	r3, [r4, #16]
 8003a18:	6023      	str	r3, [r4, #0]
 8003a1a:	89a3      	ldrh	r3, [r4, #12]
 8003a1c:	f043 0308 	orr.w	r3, r3, #8
 8003a20:	81a3      	strh	r3, [r4, #12]
 8003a22:	6923      	ldr	r3, [r4, #16]
 8003a24:	b94b      	cbnz	r3, 8003a3a <__swsetup_r+0x7a>
 8003a26:	89a3      	ldrh	r3, [r4, #12]
 8003a28:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8003a2c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8003a30:	d003      	beq.n	8003a3a <__swsetup_r+0x7a>
 8003a32:	4621      	mov	r1, r4
 8003a34:	4628      	mov	r0, r5
 8003a36:	f000 f84f 	bl	8003ad8 <__smakebuf_r>
 8003a3a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003a3e:	f013 0201 	ands.w	r2, r3, #1
 8003a42:	d00a      	beq.n	8003a5a <__swsetup_r+0x9a>
 8003a44:	2200      	movs	r2, #0
 8003a46:	60a2      	str	r2, [r4, #8]
 8003a48:	6962      	ldr	r2, [r4, #20]
 8003a4a:	4252      	negs	r2, r2
 8003a4c:	61a2      	str	r2, [r4, #24]
 8003a4e:	6922      	ldr	r2, [r4, #16]
 8003a50:	b942      	cbnz	r2, 8003a64 <__swsetup_r+0xa4>
 8003a52:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8003a56:	d1c5      	bne.n	80039e4 <__swsetup_r+0x24>
 8003a58:	bd38      	pop	{r3, r4, r5, pc}
 8003a5a:	0799      	lsls	r1, r3, #30
 8003a5c:	bf58      	it	pl
 8003a5e:	6962      	ldrpl	r2, [r4, #20]
 8003a60:	60a2      	str	r2, [r4, #8]
 8003a62:	e7f4      	b.n	8003a4e <__swsetup_r+0x8e>
 8003a64:	2000      	movs	r0, #0
 8003a66:	e7f7      	b.n	8003a58 <__swsetup_r+0x98>
 8003a68:	20000018 	.word	0x20000018

08003a6c <_sbrk_r>:
 8003a6c:	b538      	push	{r3, r4, r5, lr}
 8003a6e:	4d06      	ldr	r5, [pc, #24]	@ (8003a88 <_sbrk_r+0x1c>)
 8003a70:	2300      	movs	r3, #0
 8003a72:	4604      	mov	r4, r0
 8003a74:	4608      	mov	r0, r1
 8003a76:	602b      	str	r3, [r5, #0]
 8003a78:	f7fd f824 	bl	8000ac4 <_sbrk>
 8003a7c:	1c43      	adds	r3, r0, #1
 8003a7e:	d102      	bne.n	8003a86 <_sbrk_r+0x1a>
 8003a80:	682b      	ldr	r3, [r5, #0]
 8003a82:	b103      	cbz	r3, 8003a86 <_sbrk_r+0x1a>
 8003a84:	6023      	str	r3, [r4, #0]
 8003a86:	bd38      	pop	{r3, r4, r5, pc}
 8003a88:	20000278 	.word	0x20000278

08003a8c <__swhatbuf_r>:
 8003a8c:	b570      	push	{r4, r5, r6, lr}
 8003a8e:	460c      	mov	r4, r1
 8003a90:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8003a94:	2900      	cmp	r1, #0
 8003a96:	b096      	sub	sp, #88	@ 0x58
 8003a98:	4615      	mov	r5, r2
 8003a9a:	461e      	mov	r6, r3
 8003a9c:	da0d      	bge.n	8003aba <__swhatbuf_r+0x2e>
 8003a9e:	89a3      	ldrh	r3, [r4, #12]
 8003aa0:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8003aa4:	f04f 0100 	mov.w	r1, #0
 8003aa8:	bf14      	ite	ne
 8003aaa:	2340      	movne	r3, #64	@ 0x40
 8003aac:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8003ab0:	2000      	movs	r0, #0
 8003ab2:	6031      	str	r1, [r6, #0]
 8003ab4:	602b      	str	r3, [r5, #0]
 8003ab6:	b016      	add	sp, #88	@ 0x58
 8003ab8:	bd70      	pop	{r4, r5, r6, pc}
 8003aba:	466a      	mov	r2, sp
 8003abc:	f000 f848 	bl	8003b50 <_fstat_r>
 8003ac0:	2800      	cmp	r0, #0
 8003ac2:	dbec      	blt.n	8003a9e <__swhatbuf_r+0x12>
 8003ac4:	9901      	ldr	r1, [sp, #4]
 8003ac6:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 8003aca:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 8003ace:	4259      	negs	r1, r3
 8003ad0:	4159      	adcs	r1, r3
 8003ad2:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8003ad6:	e7eb      	b.n	8003ab0 <__swhatbuf_r+0x24>

08003ad8 <__smakebuf_r>:
 8003ad8:	898b      	ldrh	r3, [r1, #12]
 8003ada:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8003adc:	079d      	lsls	r5, r3, #30
 8003ade:	4606      	mov	r6, r0
 8003ae0:	460c      	mov	r4, r1
 8003ae2:	d507      	bpl.n	8003af4 <__smakebuf_r+0x1c>
 8003ae4:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8003ae8:	6023      	str	r3, [r4, #0]
 8003aea:	6123      	str	r3, [r4, #16]
 8003aec:	2301      	movs	r3, #1
 8003aee:	6163      	str	r3, [r4, #20]
 8003af0:	b003      	add	sp, #12
 8003af2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003af4:	ab01      	add	r3, sp, #4
 8003af6:	466a      	mov	r2, sp
 8003af8:	f7ff ffc8 	bl	8003a8c <__swhatbuf_r>
 8003afc:	9f00      	ldr	r7, [sp, #0]
 8003afe:	4605      	mov	r5, r0
 8003b00:	4639      	mov	r1, r7
 8003b02:	4630      	mov	r0, r6
 8003b04:	f7ff fb16 	bl	8003134 <_malloc_r>
 8003b08:	b948      	cbnz	r0, 8003b1e <__smakebuf_r+0x46>
 8003b0a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8003b0e:	059a      	lsls	r2, r3, #22
 8003b10:	d4ee      	bmi.n	8003af0 <__smakebuf_r+0x18>
 8003b12:	f023 0303 	bic.w	r3, r3, #3
 8003b16:	f043 0302 	orr.w	r3, r3, #2
 8003b1a:	81a3      	strh	r3, [r4, #12]
 8003b1c:	e7e2      	b.n	8003ae4 <__smakebuf_r+0xc>
 8003b1e:	89a3      	ldrh	r3, [r4, #12]
 8003b20:	6020      	str	r0, [r4, #0]
 8003b22:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8003b26:	81a3      	strh	r3, [r4, #12]
 8003b28:	9b01      	ldr	r3, [sp, #4]
 8003b2a:	e9c4 0704 	strd	r0, r7, [r4, #16]
 8003b2e:	b15b      	cbz	r3, 8003b48 <__smakebuf_r+0x70>
 8003b30:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8003b34:	4630      	mov	r0, r6
 8003b36:	f000 f81d 	bl	8003b74 <_isatty_r>
 8003b3a:	b128      	cbz	r0, 8003b48 <__smakebuf_r+0x70>
 8003b3c:	89a3      	ldrh	r3, [r4, #12]
 8003b3e:	f023 0303 	bic.w	r3, r3, #3
 8003b42:	f043 0301 	orr.w	r3, r3, #1
 8003b46:	81a3      	strh	r3, [r4, #12]
 8003b48:	89a3      	ldrh	r3, [r4, #12]
 8003b4a:	431d      	orrs	r5, r3
 8003b4c:	81a5      	strh	r5, [r4, #12]
 8003b4e:	e7cf      	b.n	8003af0 <__smakebuf_r+0x18>

08003b50 <_fstat_r>:
 8003b50:	b538      	push	{r3, r4, r5, lr}
 8003b52:	4d07      	ldr	r5, [pc, #28]	@ (8003b70 <_fstat_r+0x20>)
 8003b54:	2300      	movs	r3, #0
 8003b56:	4604      	mov	r4, r0
 8003b58:	4608      	mov	r0, r1
 8003b5a:	4611      	mov	r1, r2
 8003b5c:	602b      	str	r3, [r5, #0]
 8003b5e:	f7fc ff88 	bl	8000a72 <_fstat>
 8003b62:	1c43      	adds	r3, r0, #1
 8003b64:	d102      	bne.n	8003b6c <_fstat_r+0x1c>
 8003b66:	682b      	ldr	r3, [r5, #0]
 8003b68:	b103      	cbz	r3, 8003b6c <_fstat_r+0x1c>
 8003b6a:	6023      	str	r3, [r4, #0]
 8003b6c:	bd38      	pop	{r3, r4, r5, pc}
 8003b6e:	bf00      	nop
 8003b70:	20000278 	.word	0x20000278

08003b74 <_isatty_r>:
 8003b74:	b538      	push	{r3, r4, r5, lr}
 8003b76:	4d06      	ldr	r5, [pc, #24]	@ (8003b90 <_isatty_r+0x1c>)
 8003b78:	2300      	movs	r3, #0
 8003b7a:	4604      	mov	r4, r0
 8003b7c:	4608      	mov	r0, r1
 8003b7e:	602b      	str	r3, [r5, #0]
 8003b80:	f7fc ff87 	bl	8000a92 <_isatty>
 8003b84:	1c43      	adds	r3, r0, #1
 8003b86:	d102      	bne.n	8003b8e <_isatty_r+0x1a>
 8003b88:	682b      	ldr	r3, [r5, #0]
 8003b8a:	b103      	cbz	r3, 8003b8e <_isatty_r+0x1a>
 8003b8c:	6023      	str	r3, [r4, #0]
 8003b8e:	bd38      	pop	{r3, r4, r5, pc}
 8003b90:	20000278 	.word	0x20000278

08003b94 <_init>:
 8003b94:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003b96:	bf00      	nop
 8003b98:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003b9a:	bc08      	pop	{r3}
 8003b9c:	469e      	mov	lr, r3
 8003b9e:	4770      	bx	lr

08003ba0 <_fini>:
 8003ba0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8003ba2:	bf00      	nop
 8003ba4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8003ba6:	bc08      	pop	{r3}
 8003ba8:	469e      	mov	lr, r3
 8003baa:	4770      	bx	lr
