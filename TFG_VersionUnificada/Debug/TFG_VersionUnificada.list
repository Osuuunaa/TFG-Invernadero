
TFG_VersionUnificada.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00008d78  080001a0  080001a0  000011a0  2**4
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000634  08008f18  08008f18  00009f18  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800954c  0800954c  0000b1d4  2**0
                  CONTENTS
  4 .ARM          00000008  0800954c  0800954c  0000a54c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009554  08009554  0000b1d4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009554  08009554  0000a554  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009558  08009558  0000a558  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000001d4  20000000  0800955c  0000b000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000006e8  200001d4  08009730  0000b1d4  2**2
                  ALLOC
 10 ._user_heap_stack 00000604  200008bc  08009730  0000b8bc  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0000b1d4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000d826  00000000  00000000  0000b204  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00002779  00000000  00000000  00018a2a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000c00  00000000  00000000  0001b1a8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 0000094e  00000000  00000000  0001bda8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00017b5c  00000000  00000000  0001c6f6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0001117e  00000000  00000000  00034252  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008ab03  00000000  00000000  000453d0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000043  00000000  00000000  000cfed3  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000426c  00000000  00000000  000cff18  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 00000070  00000000  00000000  000d4184  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080001a0 <__do_global_dtors_aux>:
 80001a0:	b510      	push	{r4, lr}
 80001a2:	4c05      	ldr	r4, [pc, #20]	@ (80001b8 <__do_global_dtors_aux+0x18>)
 80001a4:	7823      	ldrb	r3, [r4, #0]
 80001a6:	b933      	cbnz	r3, 80001b6 <__do_global_dtors_aux+0x16>
 80001a8:	4b04      	ldr	r3, [pc, #16]	@ (80001bc <__do_global_dtors_aux+0x1c>)
 80001aa:	b113      	cbz	r3, 80001b2 <__do_global_dtors_aux+0x12>
 80001ac:	4804      	ldr	r0, [pc, #16]	@ (80001c0 <__do_global_dtors_aux+0x20>)
 80001ae:	f3af 8000 	nop.w
 80001b2:	2301      	movs	r3, #1
 80001b4:	7023      	strb	r3, [r4, #0]
 80001b6:	bd10      	pop	{r4, pc}
 80001b8:	200001d4 	.word	0x200001d4
 80001bc:	00000000 	.word	0x00000000
 80001c0:	08008f00 	.word	0x08008f00

080001c4 <frame_dummy>:
 80001c4:	b508      	push	{r3, lr}
 80001c6:	4b03      	ldr	r3, [pc, #12]	@ (80001d4 <frame_dummy+0x10>)
 80001c8:	b11b      	cbz	r3, 80001d2 <frame_dummy+0xe>
 80001ca:	4903      	ldr	r1, [pc, #12]	@ (80001d8 <frame_dummy+0x14>)
 80001cc:	4803      	ldr	r0, [pc, #12]	@ (80001dc <frame_dummy+0x18>)
 80001ce:	f3af 8000 	nop.w
 80001d2:	bd08      	pop	{r3, pc}
 80001d4:	00000000 	.word	0x00000000
 80001d8:	200001d8 	.word	0x200001d8
 80001dc:	08008f00 	.word	0x08008f00

080001e0 <memchr>:
 80001e0:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 80001e4:	2a10      	cmp	r2, #16
 80001e6:	db2b      	blt.n	8000240 <memchr+0x60>
 80001e8:	f010 0f07 	tst.w	r0, #7
 80001ec:	d008      	beq.n	8000200 <memchr+0x20>
 80001ee:	f810 3b01 	ldrb.w	r3, [r0], #1
 80001f2:	3a01      	subs	r2, #1
 80001f4:	428b      	cmp	r3, r1
 80001f6:	d02d      	beq.n	8000254 <memchr+0x74>
 80001f8:	f010 0f07 	tst.w	r0, #7
 80001fc:	b342      	cbz	r2, 8000250 <memchr+0x70>
 80001fe:	d1f6      	bne.n	80001ee <memchr+0xe>
 8000200:	b4f0      	push	{r4, r5, r6, r7}
 8000202:	ea41 2101 	orr.w	r1, r1, r1, lsl #8
 8000206:	ea41 4101 	orr.w	r1, r1, r1, lsl #16
 800020a:	f022 0407 	bic.w	r4, r2, #7
 800020e:	f07f 0700 	mvns.w	r7, #0
 8000212:	2300      	movs	r3, #0
 8000214:	e8f0 5602 	ldrd	r5, r6, [r0], #8
 8000218:	3c08      	subs	r4, #8
 800021a:	ea85 0501 	eor.w	r5, r5, r1
 800021e:	ea86 0601 	eor.w	r6, r6, r1
 8000222:	fa85 f547 	uadd8	r5, r5, r7
 8000226:	faa3 f587 	sel	r5, r3, r7
 800022a:	fa86 f647 	uadd8	r6, r6, r7
 800022e:	faa5 f687 	sel	r6, r5, r7
 8000232:	b98e      	cbnz	r6, 8000258 <memchr+0x78>
 8000234:	d1ee      	bne.n	8000214 <memchr+0x34>
 8000236:	bcf0      	pop	{r4, r5, r6, r7}
 8000238:	f001 01ff 	and.w	r1, r1, #255	@ 0xff
 800023c:	f002 0207 	and.w	r2, r2, #7
 8000240:	b132      	cbz	r2, 8000250 <memchr+0x70>
 8000242:	f810 3b01 	ldrb.w	r3, [r0], #1
 8000246:	3a01      	subs	r2, #1
 8000248:	ea83 0301 	eor.w	r3, r3, r1
 800024c:	b113      	cbz	r3, 8000254 <memchr+0x74>
 800024e:	d1f8      	bne.n	8000242 <memchr+0x62>
 8000250:	2000      	movs	r0, #0
 8000252:	4770      	bx	lr
 8000254:	3801      	subs	r0, #1
 8000256:	4770      	bx	lr
 8000258:	2d00      	cmp	r5, #0
 800025a:	bf06      	itte	eq
 800025c:	4635      	moveq	r5, r6
 800025e:	3803      	subeq	r0, #3
 8000260:	3807      	subne	r0, #7
 8000262:	f015 0f01 	tst.w	r5, #1
 8000266:	d107      	bne.n	8000278 <memchr+0x98>
 8000268:	3001      	adds	r0, #1
 800026a:	f415 7f80 	tst.w	r5, #256	@ 0x100
 800026e:	bf02      	ittt	eq
 8000270:	3001      	addeq	r0, #1
 8000272:	f415 3fc0 	tsteq.w	r5, #98304	@ 0x18000
 8000276:	3001      	addeq	r0, #1
 8000278:	bcf0      	pop	{r4, r5, r6, r7}
 800027a:	3801      	subs	r0, #1
 800027c:	4770      	bx	lr
 800027e:	bf00      	nop

08000280 <strlen>:
 8000280:	4603      	mov	r3, r0
 8000282:	f813 2b01 	ldrb.w	r2, [r3], #1
 8000286:	2a00      	cmp	r2, #0
 8000288:	d1fb      	bne.n	8000282 <strlen+0x2>
 800028a:	1a18      	subs	r0, r3, r0
 800028c:	3801      	subs	r0, #1
 800028e:	4770      	bx	lr

08000290 <__aeabi_drsub>:
 8000290:	f081 4100 	eor.w	r1, r1, #2147483648	@ 0x80000000
 8000294:	e002      	b.n	800029c <__adddf3>
 8000296:	bf00      	nop

08000298 <__aeabi_dsub>:
 8000298:	f083 4300 	eor.w	r3, r3, #2147483648	@ 0x80000000

0800029c <__adddf3>:
 800029c:	b530      	push	{r4, r5, lr}
 800029e:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80002a2:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80002a6:	ea94 0f05 	teq	r4, r5
 80002aa:	bf08      	it	eq
 80002ac:	ea90 0f02 	teqeq	r0, r2
 80002b0:	bf1f      	itttt	ne
 80002b2:	ea54 0c00 	orrsne.w	ip, r4, r0
 80002b6:	ea55 0c02 	orrsne.w	ip, r5, r2
 80002ba:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 80002be:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80002c2:	f000 80e2 	beq.w	800048a <__adddf3+0x1ee>
 80002c6:	ea4f 5454 	mov.w	r4, r4, lsr #21
 80002ca:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 80002ce:	bfb8      	it	lt
 80002d0:	426d      	neglt	r5, r5
 80002d2:	dd0c      	ble.n	80002ee <__adddf3+0x52>
 80002d4:	442c      	add	r4, r5
 80002d6:	ea80 0202 	eor.w	r2, r0, r2
 80002da:	ea81 0303 	eor.w	r3, r1, r3
 80002de:	ea82 0000 	eor.w	r0, r2, r0
 80002e2:	ea83 0101 	eor.w	r1, r3, r1
 80002e6:	ea80 0202 	eor.w	r2, r0, r2
 80002ea:	ea81 0303 	eor.w	r3, r1, r3
 80002ee:	2d36      	cmp	r5, #54	@ 0x36
 80002f0:	bf88      	it	hi
 80002f2:	bd30      	pophi	{r4, r5, pc}
 80002f4:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 80002f8:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80002fc:	f44f 1c80 	mov.w	ip, #1048576	@ 0x100000
 8000300:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 8000304:	d002      	beq.n	800030c <__adddf3+0x70>
 8000306:	4240      	negs	r0, r0
 8000308:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800030c:	f013 4f00 	tst.w	r3, #2147483648	@ 0x80000000
 8000310:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000314:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000318:	d002      	beq.n	8000320 <__adddf3+0x84>
 800031a:	4252      	negs	r2, r2
 800031c:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000320:	ea94 0f05 	teq	r4, r5
 8000324:	f000 80a7 	beq.w	8000476 <__adddf3+0x1da>
 8000328:	f1a4 0401 	sub.w	r4, r4, #1
 800032c:	f1d5 0e20 	rsbs	lr, r5, #32
 8000330:	db0d      	blt.n	800034e <__adddf3+0xb2>
 8000332:	fa02 fc0e 	lsl.w	ip, r2, lr
 8000336:	fa22 f205 	lsr.w	r2, r2, r5
 800033a:	1880      	adds	r0, r0, r2
 800033c:	f141 0100 	adc.w	r1, r1, #0
 8000340:	fa03 f20e 	lsl.w	r2, r3, lr
 8000344:	1880      	adds	r0, r0, r2
 8000346:	fa43 f305 	asr.w	r3, r3, r5
 800034a:	4159      	adcs	r1, r3
 800034c:	e00e      	b.n	800036c <__adddf3+0xd0>
 800034e:	f1a5 0520 	sub.w	r5, r5, #32
 8000352:	f10e 0e20 	add.w	lr, lr, #32
 8000356:	2a01      	cmp	r2, #1
 8000358:	fa03 fc0e 	lsl.w	ip, r3, lr
 800035c:	bf28      	it	cs
 800035e:	f04c 0c02 	orrcs.w	ip, ip, #2
 8000362:	fa43 f305 	asr.w	r3, r3, r5
 8000366:	18c0      	adds	r0, r0, r3
 8000368:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 800036c:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000370:	d507      	bpl.n	8000382 <__adddf3+0xe6>
 8000372:	f04f 0e00 	mov.w	lr, #0
 8000376:	f1dc 0c00 	rsbs	ip, ip, #0
 800037a:	eb7e 0000 	sbcs.w	r0, lr, r0
 800037e:	eb6e 0101 	sbc.w	r1, lr, r1
 8000382:	f5b1 1f80 	cmp.w	r1, #1048576	@ 0x100000
 8000386:	d31b      	bcc.n	80003c0 <__adddf3+0x124>
 8000388:	f5b1 1f00 	cmp.w	r1, #2097152	@ 0x200000
 800038c:	d30c      	bcc.n	80003a8 <__adddf3+0x10c>
 800038e:	0849      	lsrs	r1, r1, #1
 8000390:	ea5f 0030 	movs.w	r0, r0, rrx
 8000394:	ea4f 0c3c 	mov.w	ip, ip, rrx
 8000398:	f104 0401 	add.w	r4, r4, #1
 800039c:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80003a0:	f512 0f80 	cmn.w	r2, #4194304	@ 0x400000
 80003a4:	f080 809a 	bcs.w	80004dc <__adddf3+0x240>
 80003a8:	f1bc 4f00 	cmp.w	ip, #2147483648	@ 0x80000000
 80003ac:	bf08      	it	eq
 80003ae:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80003b2:	f150 0000 	adcs.w	r0, r0, #0
 80003b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80003ba:	ea41 0105 	orr.w	r1, r1, r5
 80003be:	bd30      	pop	{r4, r5, pc}
 80003c0:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 80003c4:	4140      	adcs	r0, r0
 80003c6:	eb41 0101 	adc.w	r1, r1, r1
 80003ca:	3c01      	subs	r4, #1
 80003cc:	bf28      	it	cs
 80003ce:	f5b1 1f80 	cmpcs.w	r1, #1048576	@ 0x100000
 80003d2:	d2e9      	bcs.n	80003a8 <__adddf3+0x10c>
 80003d4:	f091 0f00 	teq	r1, #0
 80003d8:	bf04      	itt	eq
 80003da:	4601      	moveq	r1, r0
 80003dc:	2000      	moveq	r0, #0
 80003de:	fab1 f381 	clz	r3, r1
 80003e2:	bf08      	it	eq
 80003e4:	3320      	addeq	r3, #32
 80003e6:	f1a3 030b 	sub.w	r3, r3, #11
 80003ea:	f1b3 0220 	subs.w	r2, r3, #32
 80003ee:	da0c      	bge.n	800040a <__adddf3+0x16e>
 80003f0:	320c      	adds	r2, #12
 80003f2:	dd08      	ble.n	8000406 <__adddf3+0x16a>
 80003f4:	f102 0c14 	add.w	ip, r2, #20
 80003f8:	f1c2 020c 	rsb	r2, r2, #12
 80003fc:	fa01 f00c 	lsl.w	r0, r1, ip
 8000400:	fa21 f102 	lsr.w	r1, r1, r2
 8000404:	e00c      	b.n	8000420 <__adddf3+0x184>
 8000406:	f102 0214 	add.w	r2, r2, #20
 800040a:	bfd8      	it	le
 800040c:	f1c2 0c20 	rsble	ip, r2, #32
 8000410:	fa01 f102 	lsl.w	r1, r1, r2
 8000414:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000418:	bfdc      	itt	le
 800041a:	ea41 010c 	orrle.w	r1, r1, ip
 800041e:	4090      	lslle	r0, r2
 8000420:	1ae4      	subs	r4, r4, r3
 8000422:	bfa2      	ittt	ge
 8000424:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000428:	4329      	orrge	r1, r5
 800042a:	bd30      	popge	{r4, r5, pc}
 800042c:	ea6f 0404 	mvn.w	r4, r4
 8000430:	3c1f      	subs	r4, #31
 8000432:	da1c      	bge.n	800046e <__adddf3+0x1d2>
 8000434:	340c      	adds	r4, #12
 8000436:	dc0e      	bgt.n	8000456 <__adddf3+0x1ba>
 8000438:	f104 0414 	add.w	r4, r4, #20
 800043c:	f1c4 0220 	rsb	r2, r4, #32
 8000440:	fa20 f004 	lsr.w	r0, r0, r4
 8000444:	fa01 f302 	lsl.w	r3, r1, r2
 8000448:	ea40 0003 	orr.w	r0, r0, r3
 800044c:	fa21 f304 	lsr.w	r3, r1, r4
 8000450:	ea45 0103 	orr.w	r1, r5, r3
 8000454:	bd30      	pop	{r4, r5, pc}
 8000456:	f1c4 040c 	rsb	r4, r4, #12
 800045a:	f1c4 0220 	rsb	r2, r4, #32
 800045e:	fa20 f002 	lsr.w	r0, r0, r2
 8000462:	fa01 f304 	lsl.w	r3, r1, r4
 8000466:	ea40 0003 	orr.w	r0, r0, r3
 800046a:	4629      	mov	r1, r5
 800046c:	bd30      	pop	{r4, r5, pc}
 800046e:	fa21 f004 	lsr.w	r0, r1, r4
 8000472:	4629      	mov	r1, r5
 8000474:	bd30      	pop	{r4, r5, pc}
 8000476:	f094 0f00 	teq	r4, #0
 800047a:	f483 1380 	eor.w	r3, r3, #1048576	@ 0x100000
 800047e:	bf06      	itte	eq
 8000480:	f481 1180 	eoreq.w	r1, r1, #1048576	@ 0x100000
 8000484:	3401      	addeq	r4, #1
 8000486:	3d01      	subne	r5, #1
 8000488:	e74e      	b.n	8000328 <__adddf3+0x8c>
 800048a:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 800048e:	bf18      	it	ne
 8000490:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 8000494:	d029      	beq.n	80004ea <__adddf3+0x24e>
 8000496:	ea94 0f05 	teq	r4, r5
 800049a:	bf08      	it	eq
 800049c:	ea90 0f02 	teqeq	r0, r2
 80004a0:	d005      	beq.n	80004ae <__adddf3+0x212>
 80004a2:	ea54 0c00 	orrs.w	ip, r4, r0
 80004a6:	bf04      	itt	eq
 80004a8:	4619      	moveq	r1, r3
 80004aa:	4610      	moveq	r0, r2
 80004ac:	bd30      	pop	{r4, r5, pc}
 80004ae:	ea91 0f03 	teq	r1, r3
 80004b2:	bf1e      	ittt	ne
 80004b4:	2100      	movne	r1, #0
 80004b6:	2000      	movne	r0, #0
 80004b8:	bd30      	popne	{r4, r5, pc}
 80004ba:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 80004be:	d105      	bne.n	80004cc <__adddf3+0x230>
 80004c0:	0040      	lsls	r0, r0, #1
 80004c2:	4149      	adcs	r1, r1
 80004c4:	bf28      	it	cs
 80004c6:	f041 4100 	orrcs.w	r1, r1, #2147483648	@ 0x80000000
 80004ca:	bd30      	pop	{r4, r5, pc}
 80004cc:	f514 0480 	adds.w	r4, r4, #4194304	@ 0x400000
 80004d0:	bf3c      	itt	cc
 80004d2:	f501 1180 	addcc.w	r1, r1, #1048576	@ 0x100000
 80004d6:	bd30      	popcc	{r4, r5, pc}
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 80004dc:	f045 41fe 	orr.w	r1, r5, #2130706432	@ 0x7f000000
 80004e0:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 80004e4:	f04f 0000 	mov.w	r0, #0
 80004e8:	bd30      	pop	{r4, r5, pc}
 80004ea:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80004ee:	bf1a      	itte	ne
 80004f0:	4619      	movne	r1, r3
 80004f2:	4610      	movne	r0, r2
 80004f4:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 80004f8:	bf1c      	itt	ne
 80004fa:	460b      	movne	r3, r1
 80004fc:	4602      	movne	r2, r0
 80004fe:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 8000502:	bf06      	itte	eq
 8000504:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000508:	ea91 0f03 	teqeq	r1, r3
 800050c:	f441 2100 	orrne.w	r1, r1, #524288	@ 0x80000
 8000510:	bd30      	pop	{r4, r5, pc}
 8000512:	bf00      	nop

08000514 <__aeabi_ui2d>:
 8000514:	f090 0f00 	teq	r0, #0
 8000518:	bf04      	itt	eq
 800051a:	2100      	moveq	r1, #0
 800051c:	4770      	bxeq	lr
 800051e:	b530      	push	{r4, r5, lr}
 8000520:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000524:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000528:	f04f 0500 	mov.w	r5, #0
 800052c:	f04f 0100 	mov.w	r1, #0
 8000530:	e750      	b.n	80003d4 <__adddf3+0x138>
 8000532:	bf00      	nop

08000534 <__aeabi_i2d>:
 8000534:	f090 0f00 	teq	r0, #0
 8000538:	bf04      	itt	eq
 800053a:	2100      	moveq	r1, #0
 800053c:	4770      	bxeq	lr
 800053e:	b530      	push	{r4, r5, lr}
 8000540:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 8000544:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 8000548:	f010 4500 	ands.w	r5, r0, #2147483648	@ 0x80000000
 800054c:	bf48      	it	mi
 800054e:	4240      	negmi	r0, r0
 8000550:	f04f 0100 	mov.w	r1, #0
 8000554:	e73e      	b.n	80003d4 <__adddf3+0x138>
 8000556:	bf00      	nop

08000558 <__aeabi_f2d>:
 8000558:	0042      	lsls	r2, r0, #1
 800055a:	ea4f 01e2 	mov.w	r1, r2, asr #3
 800055e:	ea4f 0131 	mov.w	r1, r1, rrx
 8000562:	ea4f 7002 	mov.w	r0, r2, lsl #28
 8000566:	bf1f      	itttt	ne
 8000568:	f012 437f 	andsne.w	r3, r2, #4278190080	@ 0xff000000
 800056c:	f093 4f7f 	teqne	r3, #4278190080	@ 0xff000000
 8000570:	f081 5160 	eorne.w	r1, r1, #939524096	@ 0x38000000
 8000574:	4770      	bxne	lr
 8000576:	f032 427f 	bics.w	r2, r2, #4278190080	@ 0xff000000
 800057a:	bf08      	it	eq
 800057c:	4770      	bxeq	lr
 800057e:	f093 4f7f 	teq	r3, #4278190080	@ 0xff000000
 8000582:	bf04      	itt	eq
 8000584:	f441 2100 	orreq.w	r1, r1, #524288	@ 0x80000
 8000588:	4770      	bxeq	lr
 800058a:	b530      	push	{r4, r5, lr}
 800058c:	f44f 7460 	mov.w	r4, #896	@ 0x380
 8000590:	f001 4500 	and.w	r5, r1, #2147483648	@ 0x80000000
 8000594:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000598:	e71c      	b.n	80003d4 <__adddf3+0x138>
 800059a:	bf00      	nop

0800059c <__aeabi_ul2d>:
 800059c:	ea50 0201 	orrs.w	r2, r0, r1
 80005a0:	bf08      	it	eq
 80005a2:	4770      	bxeq	lr
 80005a4:	b530      	push	{r4, r5, lr}
 80005a6:	f04f 0500 	mov.w	r5, #0
 80005aa:	e00a      	b.n	80005c2 <__aeabi_l2d+0x16>

080005ac <__aeabi_l2d>:
 80005ac:	ea50 0201 	orrs.w	r2, r0, r1
 80005b0:	bf08      	it	eq
 80005b2:	4770      	bxeq	lr
 80005b4:	b530      	push	{r4, r5, lr}
 80005b6:	f011 4500 	ands.w	r5, r1, #2147483648	@ 0x80000000
 80005ba:	d502      	bpl.n	80005c2 <__aeabi_l2d+0x16>
 80005bc:	4240      	negs	r0, r0
 80005be:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 80005c2:	f44f 6480 	mov.w	r4, #1024	@ 0x400
 80005c6:	f104 0432 	add.w	r4, r4, #50	@ 0x32
 80005ca:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 80005ce:	f43f aed8 	beq.w	8000382 <__adddf3+0xe6>
 80005d2:	f04f 0203 	mov.w	r2, #3
 80005d6:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005da:	bf18      	it	ne
 80005dc:	3203      	addne	r2, #3
 80005de:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 80005e2:	bf18      	it	ne
 80005e4:	3203      	addne	r2, #3
 80005e6:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 80005ea:	f1c2 0320 	rsb	r3, r2, #32
 80005ee:	fa00 fc03 	lsl.w	ip, r0, r3
 80005f2:	fa20 f002 	lsr.w	r0, r0, r2
 80005f6:	fa01 fe03 	lsl.w	lr, r1, r3
 80005fa:	ea40 000e 	orr.w	r0, r0, lr
 80005fe:	fa21 f102 	lsr.w	r1, r1, r2
 8000602:	4414      	add	r4, r2
 8000604:	e6bd      	b.n	8000382 <__adddf3+0xe6>
 8000606:	bf00      	nop

08000608 <__aeabi_dmul>:
 8000608:	b570      	push	{r4, r5, r6, lr}
 800060a:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 800060e:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000612:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 8000616:	bf1d      	ittte	ne
 8000618:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 800061c:	ea94 0f0c 	teqne	r4, ip
 8000620:	ea95 0f0c 	teqne	r5, ip
 8000624:	f000 f8de 	bleq	80007e4 <__aeabi_dmul+0x1dc>
 8000628:	442c      	add	r4, r5
 800062a:	ea81 0603 	eor.w	r6, r1, r3
 800062e:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 8000632:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 8000636:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 800063a:	bf18      	it	ne
 800063c:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000640:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000644:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 8000648:	d038      	beq.n	80006bc <__aeabi_dmul+0xb4>
 800064a:	fba0 ce02 	umull	ip, lr, r0, r2
 800064e:	f04f 0500 	mov.w	r5, #0
 8000652:	fbe1 e502 	umlal	lr, r5, r1, r2
 8000656:	f006 4200 	and.w	r2, r6, #2147483648	@ 0x80000000
 800065a:	fbe0 e503 	umlal	lr, r5, r0, r3
 800065e:	f04f 0600 	mov.w	r6, #0
 8000662:	fbe1 5603 	umlal	r5, r6, r1, r3
 8000666:	f09c 0f00 	teq	ip, #0
 800066a:	bf18      	it	ne
 800066c:	f04e 0e01 	orrne.w	lr, lr, #1
 8000670:	f1a4 04ff 	sub.w	r4, r4, #255	@ 0xff
 8000674:	f5b6 7f00 	cmp.w	r6, #512	@ 0x200
 8000678:	f564 7440 	sbc.w	r4, r4, #768	@ 0x300
 800067c:	d204      	bcs.n	8000688 <__aeabi_dmul+0x80>
 800067e:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 8000682:	416d      	adcs	r5, r5
 8000684:	eb46 0606 	adc.w	r6, r6, r6
 8000688:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 800068c:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 8000690:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 8000694:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 8000698:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 800069c:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 80006a0:	bf88      	it	hi
 80006a2:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 80006a6:	d81e      	bhi.n	80006e6 <__aeabi_dmul+0xde>
 80006a8:	f1be 4f00 	cmp.w	lr, #2147483648	@ 0x80000000
 80006ac:	bf08      	it	eq
 80006ae:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80006b2:	f150 0000 	adcs.w	r0, r0, #0
 80006b6:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80006ba:	bd70      	pop	{r4, r5, r6, pc}
 80006bc:	f006 4600 	and.w	r6, r6, #2147483648	@ 0x80000000
 80006c0:	ea46 0101 	orr.w	r1, r6, r1
 80006c4:	ea40 0002 	orr.w	r0, r0, r2
 80006c8:	ea81 0103 	eor.w	r1, r1, r3
 80006cc:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 80006d0:	bfc2      	ittt	gt
 80006d2:	ebd4 050c 	rsbsgt	r5, r4, ip
 80006d6:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80006da:	bd70      	popgt	{r4, r5, r6, pc}
 80006dc:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80006e0:	f04f 0e00 	mov.w	lr, #0
 80006e4:	3c01      	subs	r4, #1
 80006e6:	f300 80ab 	bgt.w	8000840 <__aeabi_dmul+0x238>
 80006ea:	f114 0f36 	cmn.w	r4, #54	@ 0x36
 80006ee:	bfde      	ittt	le
 80006f0:	2000      	movle	r0, #0
 80006f2:	f001 4100 	andle.w	r1, r1, #2147483648	@ 0x80000000
 80006f6:	bd70      	pople	{r4, r5, r6, pc}
 80006f8:	f1c4 0400 	rsb	r4, r4, #0
 80006fc:	3c20      	subs	r4, #32
 80006fe:	da35      	bge.n	800076c <__aeabi_dmul+0x164>
 8000700:	340c      	adds	r4, #12
 8000702:	dc1b      	bgt.n	800073c <__aeabi_dmul+0x134>
 8000704:	f104 0414 	add.w	r4, r4, #20
 8000708:	f1c4 0520 	rsb	r5, r4, #32
 800070c:	fa00 f305 	lsl.w	r3, r0, r5
 8000710:	fa20 f004 	lsr.w	r0, r0, r4
 8000714:	fa01 f205 	lsl.w	r2, r1, r5
 8000718:	ea40 0002 	orr.w	r0, r0, r2
 800071c:	f001 4200 	and.w	r2, r1, #2147483648	@ 0x80000000
 8000720:	f021 4100 	bic.w	r1, r1, #2147483648	@ 0x80000000
 8000724:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000728:	fa21 f604 	lsr.w	r6, r1, r4
 800072c:	eb42 0106 	adc.w	r1, r2, r6
 8000730:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000734:	bf08      	it	eq
 8000736:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800073a:	bd70      	pop	{r4, r5, r6, pc}
 800073c:	f1c4 040c 	rsb	r4, r4, #12
 8000740:	f1c4 0520 	rsb	r5, r4, #32
 8000744:	fa00 f304 	lsl.w	r3, r0, r4
 8000748:	fa20 f005 	lsr.w	r0, r0, r5
 800074c:	fa01 f204 	lsl.w	r2, r1, r4
 8000750:	ea40 0002 	orr.w	r0, r0, r2
 8000754:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000758:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 800075c:	f141 0100 	adc.w	r1, r1, #0
 8000760:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 8000764:	bf08      	it	eq
 8000766:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 800076a:	bd70      	pop	{r4, r5, r6, pc}
 800076c:	f1c4 0520 	rsb	r5, r4, #32
 8000770:	fa00 f205 	lsl.w	r2, r0, r5
 8000774:	ea4e 0e02 	orr.w	lr, lr, r2
 8000778:	fa20 f304 	lsr.w	r3, r0, r4
 800077c:	fa01 f205 	lsl.w	r2, r1, r5
 8000780:	ea43 0302 	orr.w	r3, r3, r2
 8000784:	fa21 f004 	lsr.w	r0, r1, r4
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 800078c:	fa21 f204 	lsr.w	r2, r1, r4
 8000790:	ea20 0002 	bic.w	r0, r0, r2
 8000794:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 8000798:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800079c:	bf08      	it	eq
 800079e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80007a2:	bd70      	pop	{r4, r5, r6, pc}
 80007a4:	f094 0f00 	teq	r4, #0
 80007a8:	d10f      	bne.n	80007ca <__aeabi_dmul+0x1c2>
 80007aa:	f001 4600 	and.w	r6, r1, #2147483648	@ 0x80000000
 80007ae:	0040      	lsls	r0, r0, #1
 80007b0:	eb41 0101 	adc.w	r1, r1, r1
 80007b4:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 80007b8:	bf08      	it	eq
 80007ba:	3c01      	subeq	r4, #1
 80007bc:	d0f7      	beq.n	80007ae <__aeabi_dmul+0x1a6>
 80007be:	ea41 0106 	orr.w	r1, r1, r6
 80007c2:	f095 0f00 	teq	r5, #0
 80007c6:	bf18      	it	ne
 80007c8:	4770      	bxne	lr
 80007ca:	f003 4600 	and.w	r6, r3, #2147483648	@ 0x80000000
 80007ce:	0052      	lsls	r2, r2, #1
 80007d0:	eb43 0303 	adc.w	r3, r3, r3
 80007d4:	f413 1f80 	tst.w	r3, #1048576	@ 0x100000
 80007d8:	bf08      	it	eq
 80007da:	3d01      	subeq	r5, #1
 80007dc:	d0f7      	beq.n	80007ce <__aeabi_dmul+0x1c6>
 80007de:	ea43 0306 	orr.w	r3, r3, r6
 80007e2:	4770      	bx	lr
 80007e4:	ea94 0f0c 	teq	r4, ip
 80007e8:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80007ec:	bf18      	it	ne
 80007ee:	ea95 0f0c 	teqne	r5, ip
 80007f2:	d00c      	beq.n	800080e <__aeabi_dmul+0x206>
 80007f4:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 80007f8:	bf18      	it	ne
 80007fa:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 80007fe:	d1d1      	bne.n	80007a4 <__aeabi_dmul+0x19c>
 8000800:	ea81 0103 	eor.w	r1, r1, r3
 8000804:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000808:	f04f 0000 	mov.w	r0, #0
 800080c:	bd70      	pop	{r4, r5, r6, pc}
 800080e:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000812:	bf06      	itte	eq
 8000814:	4610      	moveq	r0, r2
 8000816:	4619      	moveq	r1, r3
 8000818:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800081c:	d019      	beq.n	8000852 <__aeabi_dmul+0x24a>
 800081e:	ea94 0f0c 	teq	r4, ip
 8000822:	d102      	bne.n	800082a <__aeabi_dmul+0x222>
 8000824:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000828:	d113      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800082a:	ea95 0f0c 	teq	r5, ip
 800082e:	d105      	bne.n	800083c <__aeabi_dmul+0x234>
 8000830:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 8000834:	bf1c      	itt	ne
 8000836:	4610      	movne	r0, r2
 8000838:	4619      	movne	r1, r3
 800083a:	d10a      	bne.n	8000852 <__aeabi_dmul+0x24a>
 800083c:	ea81 0103 	eor.w	r1, r1, r3
 8000840:	f001 4100 	and.w	r1, r1, #2147483648	@ 0x80000000
 8000844:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000848:	f441 0170 	orr.w	r1, r1, #15728640	@ 0xf00000
 800084c:	f04f 0000 	mov.w	r0, #0
 8000850:	bd70      	pop	{r4, r5, r6, pc}
 8000852:	f041 41fe 	orr.w	r1, r1, #2130706432	@ 0x7f000000
 8000856:	f441 0178 	orr.w	r1, r1, #16252928	@ 0xf80000
 800085a:	bd70      	pop	{r4, r5, r6, pc}

0800085c <__aeabi_ddiv>:
 800085c:	b570      	push	{r4, r5, r6, lr}
 800085e:	f04f 0cff 	mov.w	ip, #255	@ 0xff
 8000862:	f44c 6ce0 	orr.w	ip, ip, #1792	@ 0x700
 8000866:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800086a:	bf1d      	ittte	ne
 800086c:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000870:	ea94 0f0c 	teqne	r4, ip
 8000874:	ea95 0f0c 	teqne	r5, ip
 8000878:	f000 f8a7 	bleq	80009ca <__aeabi_ddiv+0x16e>
 800087c:	eba4 0405 	sub.w	r4, r4, r5
 8000880:	ea81 0e03 	eor.w	lr, r1, r3
 8000884:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000888:	ea4f 3101 	mov.w	r1, r1, lsl #12
 800088c:	f000 8088 	beq.w	80009a0 <__aeabi_ddiv+0x144>
 8000890:	ea4f 3303 	mov.w	r3, r3, lsl #12
 8000894:	f04f 5580 	mov.w	r5, #268435456	@ 0x10000000
 8000898:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 800089c:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80008a0:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80008a4:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80008a8:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80008ac:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80008b0:	f00e 4100 	and.w	r1, lr, #2147483648	@ 0x80000000
 80008b4:	429d      	cmp	r5, r3
 80008b6:	bf08      	it	eq
 80008b8:	4296      	cmpeq	r6, r2
 80008ba:	f144 04fd 	adc.w	r4, r4, #253	@ 0xfd
 80008be:	f504 7440 	add.w	r4, r4, #768	@ 0x300
 80008c2:	d202      	bcs.n	80008ca <__aeabi_ddiv+0x6e>
 80008c4:	085b      	lsrs	r3, r3, #1
 80008c6:	ea4f 0232 	mov.w	r2, r2, rrx
 80008ca:	1ab6      	subs	r6, r6, r2
 80008cc:	eb65 0503 	sbc.w	r5, r5, r3
 80008d0:	085b      	lsrs	r3, r3, #1
 80008d2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008d6:	f44f 1080 	mov.w	r0, #1048576	@ 0x100000
 80008da:	f44f 2c00 	mov.w	ip, #524288	@ 0x80000
 80008de:	ebb6 0e02 	subs.w	lr, r6, r2
 80008e2:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008e6:	bf22      	ittt	cs
 80008e8:	1ab6      	subcs	r6, r6, r2
 80008ea:	4675      	movcs	r5, lr
 80008ec:	ea40 000c 	orrcs.w	r0, r0, ip
 80008f0:	085b      	lsrs	r3, r3, #1
 80008f2:	ea4f 0232 	mov.w	r2, r2, rrx
 80008f6:	ebb6 0e02 	subs.w	lr, r6, r2
 80008fa:	eb75 0e03 	sbcs.w	lr, r5, r3
 80008fe:	bf22      	ittt	cs
 8000900:	1ab6      	subcs	r6, r6, r2
 8000902:	4675      	movcs	r5, lr
 8000904:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000908:	085b      	lsrs	r3, r3, #1
 800090a:	ea4f 0232 	mov.w	r2, r2, rrx
 800090e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000912:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000916:	bf22      	ittt	cs
 8000918:	1ab6      	subcs	r6, r6, r2
 800091a:	4675      	movcs	r5, lr
 800091c:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000920:	085b      	lsrs	r3, r3, #1
 8000922:	ea4f 0232 	mov.w	r2, r2, rrx
 8000926:	ebb6 0e02 	subs.w	lr, r6, r2
 800092a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800092e:	bf22      	ittt	cs
 8000930:	1ab6      	subcs	r6, r6, r2
 8000932:	4675      	movcs	r5, lr
 8000934:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000938:	ea55 0e06 	orrs.w	lr, r5, r6
 800093c:	d018      	beq.n	8000970 <__aeabi_ddiv+0x114>
 800093e:	ea4f 1505 	mov.w	r5, r5, lsl #4
 8000942:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 8000946:	ea4f 1606 	mov.w	r6, r6, lsl #4
 800094a:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 800094e:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 8000952:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 8000956:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 800095a:	d1c0      	bne.n	80008de <__aeabi_ddiv+0x82>
 800095c:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000960:	d10b      	bne.n	800097a <__aeabi_ddiv+0x11e>
 8000962:	ea41 0100 	orr.w	r1, r1, r0
 8000966:	f04f 0000 	mov.w	r0, #0
 800096a:	f04f 4c00 	mov.w	ip, #2147483648	@ 0x80000000
 800096e:	e7b6      	b.n	80008de <__aeabi_ddiv+0x82>
 8000970:	f411 1f80 	tst.w	r1, #1048576	@ 0x100000
 8000974:	bf04      	itt	eq
 8000976:	4301      	orreq	r1, r0
 8000978:	2000      	moveq	r0, #0
 800097a:	f1b4 0cfd 	subs.w	ip, r4, #253	@ 0xfd
 800097e:	bf88      	it	hi
 8000980:	f5bc 6fe0 	cmphi.w	ip, #1792	@ 0x700
 8000984:	f63f aeaf 	bhi.w	80006e6 <__aeabi_dmul+0xde>
 8000988:	ebb5 0c03 	subs.w	ip, r5, r3
 800098c:	bf04      	itt	eq
 800098e:	ebb6 0c02 	subseq.w	ip, r6, r2
 8000992:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 8000996:	f150 0000 	adcs.w	r0, r0, #0
 800099a:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 800099e:	bd70      	pop	{r4, r5, r6, pc}
 80009a0:	f00e 4e00 	and.w	lr, lr, #2147483648	@ 0x80000000
 80009a4:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80009a8:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80009ac:	bfc2      	ittt	gt
 80009ae:	ebd4 050c 	rsbsgt	r5, r4, ip
 80009b2:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80009b6:	bd70      	popgt	{r4, r5, r6, pc}
 80009b8:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 80009bc:	f04f 0e00 	mov.w	lr, #0
 80009c0:	3c01      	subs	r4, #1
 80009c2:	e690      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009c4:	ea45 0e06 	orr.w	lr, r5, r6
 80009c8:	e68d      	b.n	80006e6 <__aeabi_dmul+0xde>
 80009ca:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 80009ce:	ea94 0f0c 	teq	r4, ip
 80009d2:	bf08      	it	eq
 80009d4:	ea95 0f0c 	teqeq	r5, ip
 80009d8:	f43f af3b 	beq.w	8000852 <__aeabi_dmul+0x24a>
 80009dc:	ea94 0f0c 	teq	r4, ip
 80009e0:	d10a      	bne.n	80009f8 <__aeabi_ddiv+0x19c>
 80009e2:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 80009e6:	f47f af34 	bne.w	8000852 <__aeabi_dmul+0x24a>
 80009ea:	ea95 0f0c 	teq	r5, ip
 80009ee:	f47f af25 	bne.w	800083c <__aeabi_dmul+0x234>
 80009f2:	4610      	mov	r0, r2
 80009f4:	4619      	mov	r1, r3
 80009f6:	e72c      	b.n	8000852 <__aeabi_dmul+0x24a>
 80009f8:	ea95 0f0c 	teq	r5, ip
 80009fc:	d106      	bne.n	8000a0c <__aeabi_ddiv+0x1b0>
 80009fe:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 8000a02:	f43f aefd 	beq.w	8000800 <__aeabi_dmul+0x1f8>
 8000a06:	4610      	mov	r0, r2
 8000a08:	4619      	mov	r1, r3
 8000a0a:	e722      	b.n	8000852 <__aeabi_dmul+0x24a>
 8000a0c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000a10:	bf18      	it	ne
 8000a12:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000a16:	f47f aec5 	bne.w	80007a4 <__aeabi_dmul+0x19c>
 8000a1a:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000a1e:	f47f af0d 	bne.w	800083c <__aeabi_dmul+0x234>
 8000a22:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 8000a26:	f47f aeeb 	bne.w	8000800 <__aeabi_dmul+0x1f8>
 8000a2a:	e712      	b.n	8000852 <__aeabi_dmul+0x24a>

08000a2c <__gedf2>:
 8000a2c:	f04f 3cff 	mov.w	ip, #4294967295
 8000a30:	e006      	b.n	8000a40 <__cmpdf2+0x4>
 8000a32:	bf00      	nop

08000a34 <__ledf2>:
 8000a34:	f04f 0c01 	mov.w	ip, #1
 8000a38:	e002      	b.n	8000a40 <__cmpdf2+0x4>
 8000a3a:	bf00      	nop

08000a3c <__cmpdf2>:
 8000a3c:	f04f 0c01 	mov.w	ip, #1
 8000a40:	f84d cd04 	str.w	ip, [sp, #-4]!
 8000a44:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a48:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a50:	bf18      	it	ne
 8000a52:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 8000a56:	d01b      	beq.n	8000a90 <__cmpdf2+0x54>
 8000a58:	b001      	add	sp, #4
 8000a5a:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 8000a5e:	bf0c      	ite	eq
 8000a60:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 8000a64:	ea91 0f03 	teqne	r1, r3
 8000a68:	bf02      	ittt	eq
 8000a6a:	ea90 0f02 	teqeq	r0, r2
 8000a6e:	2000      	moveq	r0, #0
 8000a70:	4770      	bxeq	lr
 8000a72:	f110 0f00 	cmn.w	r0, #0
 8000a76:	ea91 0f03 	teq	r1, r3
 8000a7a:	bf58      	it	pl
 8000a7c:	4299      	cmppl	r1, r3
 8000a7e:	bf08      	it	eq
 8000a80:	4290      	cmpeq	r0, r2
 8000a82:	bf2c      	ite	cs
 8000a84:	17d8      	asrcs	r0, r3, #31
 8000a86:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 8000a8a:	f040 0001 	orr.w	r0, r0, #1
 8000a8e:	4770      	bx	lr
 8000a90:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a94:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a98:	d102      	bne.n	8000aa0 <__cmpdf2+0x64>
 8000a9a:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a9e:	d107      	bne.n	8000ab0 <__cmpdf2+0x74>
 8000aa0:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000aa4:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000aa8:	d1d6      	bne.n	8000a58 <__cmpdf2+0x1c>
 8000aaa:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aae:	d0d3      	beq.n	8000a58 <__cmpdf2+0x1c>
 8000ab0:	f85d 0b04 	ldr.w	r0, [sp], #4
 8000ab4:	4770      	bx	lr
 8000ab6:	bf00      	nop

08000ab8 <__aeabi_cdrcmple>:
 8000ab8:	4684      	mov	ip, r0
 8000aba:	4610      	mov	r0, r2
 8000abc:	4662      	mov	r2, ip
 8000abe:	468c      	mov	ip, r1
 8000ac0:	4619      	mov	r1, r3
 8000ac2:	4663      	mov	r3, ip
 8000ac4:	e000      	b.n	8000ac8 <__aeabi_cdcmpeq>
 8000ac6:	bf00      	nop

08000ac8 <__aeabi_cdcmpeq>:
 8000ac8:	b501      	push	{r0, lr}
 8000aca:	f7ff ffb7 	bl	8000a3c <__cmpdf2>
 8000ace:	2800      	cmp	r0, #0
 8000ad0:	bf48      	it	mi
 8000ad2:	f110 0f00 	cmnmi.w	r0, #0
 8000ad6:	bd01      	pop	{r0, pc}

08000ad8 <__aeabi_dcmpeq>:
 8000ad8:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000adc:	f7ff fff4 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000ae0:	bf0c      	ite	eq
 8000ae2:	2001      	moveq	r0, #1
 8000ae4:	2000      	movne	r0, #0
 8000ae6:	f85d fb08 	ldr.w	pc, [sp], #8
 8000aea:	bf00      	nop

08000aec <__aeabi_dcmplt>:
 8000aec:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000af0:	f7ff ffea 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000af4:	bf34      	ite	cc
 8000af6:	2001      	movcc	r0, #1
 8000af8:	2000      	movcs	r0, #0
 8000afa:	f85d fb08 	ldr.w	pc, [sp], #8
 8000afe:	bf00      	nop

08000b00 <__aeabi_dcmple>:
 8000b00:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b04:	f7ff ffe0 	bl	8000ac8 <__aeabi_cdcmpeq>
 8000b08:	bf94      	ite	ls
 8000b0a:	2001      	movls	r0, #1
 8000b0c:	2000      	movhi	r0, #0
 8000b0e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b12:	bf00      	nop

08000b14 <__aeabi_dcmpge>:
 8000b14:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b18:	f7ff ffce 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b1c:	bf94      	ite	ls
 8000b1e:	2001      	movls	r0, #1
 8000b20:	2000      	movhi	r0, #0
 8000b22:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b26:	bf00      	nop

08000b28 <__aeabi_dcmpgt>:
 8000b28:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000b2c:	f7ff ffc4 	bl	8000ab8 <__aeabi_cdrcmple>
 8000b30:	bf34      	ite	cc
 8000b32:	2001      	movcc	r0, #1
 8000b34:	2000      	movcs	r0, #0
 8000b36:	f85d fb08 	ldr.w	pc, [sp], #8
 8000b3a:	bf00      	nop

08000b3c <__aeabi_dcmpun>:
 8000b3c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000b40:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b44:	d102      	bne.n	8000b4c <__aeabi_dcmpun+0x10>
 8000b46:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000b4a:	d10a      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b4c:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000b50:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000b54:	d102      	bne.n	8000b5c <__aeabi_dcmpun+0x20>
 8000b56:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000b5a:	d102      	bne.n	8000b62 <__aeabi_dcmpun+0x26>
 8000b5c:	f04f 0000 	mov.w	r0, #0
 8000b60:	4770      	bx	lr
 8000b62:	f04f 0001 	mov.w	r0, #1
 8000b66:	4770      	bx	lr

08000b68 <__aeabi_d2iz>:
 8000b68:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000b6c:	f512 1200 	adds.w	r2, r2, #2097152	@ 0x200000
 8000b70:	d215      	bcs.n	8000b9e <__aeabi_d2iz+0x36>
 8000b72:	d511      	bpl.n	8000b98 <__aeabi_d2iz+0x30>
 8000b74:	f46f 7378 	mvn.w	r3, #992	@ 0x3e0
 8000b78:	ebb3 5262 	subs.w	r2, r3, r2, asr #21
 8000b7c:	d912      	bls.n	8000ba4 <__aeabi_d2iz+0x3c>
 8000b7e:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b82:	f043 4300 	orr.w	r3, r3, #2147483648	@ 0x80000000
 8000b86:	ea43 5350 	orr.w	r3, r3, r0, lsr #21
 8000b8a:	f011 4f00 	tst.w	r1, #2147483648	@ 0x80000000
 8000b8e:	fa23 f002 	lsr.w	r0, r3, r2
 8000b92:	bf18      	it	ne
 8000b94:	4240      	negne	r0, r0
 8000b96:	4770      	bx	lr
 8000b98:	f04f 0000 	mov.w	r0, #0
 8000b9c:	4770      	bx	lr
 8000b9e:	ea50 3001 	orrs.w	r0, r0, r1, lsl #12
 8000ba2:	d105      	bne.n	8000bb0 <__aeabi_d2iz+0x48>
 8000ba4:	f011 4000 	ands.w	r0, r1, #2147483648	@ 0x80000000
 8000ba8:	bf08      	it	eq
 8000baa:	f06f 4000 	mvneq.w	r0, #2147483648	@ 0x80000000
 8000bae:	4770      	bx	lr
 8000bb0:	f04f 0000 	mov.w	r0, #0
 8000bb4:	4770      	bx	lr
 8000bb6:	bf00      	nop

08000bb8 <__aeabi_d2f>:
 8000bb8:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000bbc:	f1b2 43e0 	subs.w	r3, r2, #1879048192	@ 0x70000000
 8000bc0:	bf24      	itt	cs
 8000bc2:	f5b3 1c00 	subscs.w	ip, r3, #2097152	@ 0x200000
 8000bc6:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	@ 0x1fc00000
 8000bca:	d90d      	bls.n	8000be8 <__aeabi_d2f+0x30>
 8000bcc:	f001 4c00 	and.w	ip, r1, #2147483648	@ 0x80000000
 8000bd0:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000bd4:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000bd8:	f1b2 4f00 	cmp.w	r2, #2147483648	@ 0x80000000
 8000bdc:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000be0:	bf08      	it	eq
 8000be2:	f020 0001 	biceq.w	r0, r0, #1
 8000be6:	4770      	bx	lr
 8000be8:	f011 4f80 	tst.w	r1, #1073741824	@ 0x40000000
 8000bec:	d121      	bne.n	8000c32 <__aeabi_d2f+0x7a>
 8000bee:	f113 7238 	adds.w	r2, r3, #48234496	@ 0x2e00000
 8000bf2:	bfbc      	itt	lt
 8000bf4:	f001 4000 	andlt.w	r0, r1, #2147483648	@ 0x80000000
 8000bf8:	4770      	bxlt	lr
 8000bfa:	f441 1180 	orr.w	r1, r1, #1048576	@ 0x100000
 8000bfe:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000c02:	f1c2 0218 	rsb	r2, r2, #24
 8000c06:	f1c2 0c20 	rsb	ip, r2, #32
 8000c0a:	fa10 f30c 	lsls.w	r3, r0, ip
 8000c0e:	fa20 f002 	lsr.w	r0, r0, r2
 8000c12:	bf18      	it	ne
 8000c14:	f040 0001 	orrne.w	r0, r0, #1
 8000c18:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000c1c:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000c20:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000c24:	ea40 000c 	orr.w	r0, r0, ip
 8000c28:	fa23 f302 	lsr.w	r3, r3, r2
 8000c2c:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000c30:	e7cc      	b.n	8000bcc <__aeabi_d2f+0x14>
 8000c32:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000c36:	d107      	bne.n	8000c48 <__aeabi_d2f+0x90>
 8000c38:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000c3c:	bf1e      	ittt	ne
 8000c3e:	f04f 40fe 	movne.w	r0, #2130706432	@ 0x7f000000
 8000c42:	f440 0040 	orrne.w	r0, r0, #12582912	@ 0xc00000
 8000c46:	4770      	bxne	lr
 8000c48:	f001 4000 	and.w	r0, r1, #2147483648	@ 0x80000000
 8000c4c:	f040 40fe 	orr.w	r0, r0, #2130706432	@ 0x7f000000
 8000c50:	f440 0000 	orr.w	r0, r0, #8388608	@ 0x800000
 8000c54:	4770      	bx	lr
 8000c56:	bf00      	nop

08000c58 <__aeabi_uldivmod>:
 8000c58:	b953      	cbnz	r3, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5a:	b94a      	cbnz	r2, 8000c70 <__aeabi_uldivmod+0x18>
 8000c5c:	2900      	cmp	r1, #0
 8000c5e:	bf08      	it	eq
 8000c60:	2800      	cmpeq	r0, #0
 8000c62:	bf1c      	itt	ne
 8000c64:	f04f 31ff 	movne.w	r1, #4294967295
 8000c68:	f04f 30ff 	movne.w	r0, #4294967295
 8000c6c:	f000 b988 	b.w	8000f80 <__aeabi_idiv0>
 8000c70:	f1ad 0c08 	sub.w	ip, sp, #8
 8000c74:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000c78:	f000 f806 	bl	8000c88 <__udivmoddi4>
 8000c7c:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000c80:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000c84:	b004      	add	sp, #16
 8000c86:	4770      	bx	lr

08000c88 <__udivmoddi4>:
 8000c88:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000c8c:	9d08      	ldr	r5, [sp, #32]
 8000c8e:	468e      	mov	lr, r1
 8000c90:	4604      	mov	r4, r0
 8000c92:	4688      	mov	r8, r1
 8000c94:	2b00      	cmp	r3, #0
 8000c96:	d14a      	bne.n	8000d2e <__udivmoddi4+0xa6>
 8000c98:	428a      	cmp	r2, r1
 8000c9a:	4617      	mov	r7, r2
 8000c9c:	d962      	bls.n	8000d64 <__udivmoddi4+0xdc>
 8000c9e:	fab2 f682 	clz	r6, r2
 8000ca2:	b14e      	cbz	r6, 8000cb8 <__udivmoddi4+0x30>
 8000ca4:	f1c6 0320 	rsb	r3, r6, #32
 8000ca8:	fa01 f806 	lsl.w	r8, r1, r6
 8000cac:	fa20 f303 	lsr.w	r3, r0, r3
 8000cb0:	40b7      	lsls	r7, r6
 8000cb2:	ea43 0808 	orr.w	r8, r3, r8
 8000cb6:	40b4      	lsls	r4, r6
 8000cb8:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000cbc:	fa1f fc87 	uxth.w	ip, r7
 8000cc0:	fbb8 f1fe 	udiv	r1, r8, lr
 8000cc4:	0c23      	lsrs	r3, r4, #16
 8000cc6:	fb0e 8811 	mls	r8, lr, r1, r8
 8000cca:	ea43 4308 	orr.w	r3, r3, r8, lsl #16
 8000cce:	fb01 f20c 	mul.w	r2, r1, ip
 8000cd2:	429a      	cmp	r2, r3
 8000cd4:	d909      	bls.n	8000cea <__udivmoddi4+0x62>
 8000cd6:	18fb      	adds	r3, r7, r3
 8000cd8:	f101 30ff 	add.w	r0, r1, #4294967295
 8000cdc:	f080 80ea 	bcs.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce0:	429a      	cmp	r2, r3
 8000ce2:	f240 80e7 	bls.w	8000eb4 <__udivmoddi4+0x22c>
 8000ce6:	3902      	subs	r1, #2
 8000ce8:	443b      	add	r3, r7
 8000cea:	1a9a      	subs	r2, r3, r2
 8000cec:	b2a3      	uxth	r3, r4
 8000cee:	fbb2 f0fe 	udiv	r0, r2, lr
 8000cf2:	fb0e 2210 	mls	r2, lr, r0, r2
 8000cf6:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000cfa:	fb00 fc0c 	mul.w	ip, r0, ip
 8000cfe:	459c      	cmp	ip, r3
 8000d00:	d909      	bls.n	8000d16 <__udivmoddi4+0x8e>
 8000d02:	18fb      	adds	r3, r7, r3
 8000d04:	f100 32ff 	add.w	r2, r0, #4294967295
 8000d08:	f080 80d6 	bcs.w	8000eb8 <__udivmoddi4+0x230>
 8000d0c:	459c      	cmp	ip, r3
 8000d0e:	f240 80d3 	bls.w	8000eb8 <__udivmoddi4+0x230>
 8000d12:	443b      	add	r3, r7
 8000d14:	3802      	subs	r0, #2
 8000d16:	ea40 4001 	orr.w	r0, r0, r1, lsl #16
 8000d1a:	eba3 030c 	sub.w	r3, r3, ip
 8000d1e:	2100      	movs	r1, #0
 8000d20:	b11d      	cbz	r5, 8000d2a <__udivmoddi4+0xa2>
 8000d22:	40f3      	lsrs	r3, r6
 8000d24:	2200      	movs	r2, #0
 8000d26:	e9c5 3200 	strd	r3, r2, [r5]
 8000d2a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000d2e:	428b      	cmp	r3, r1
 8000d30:	d905      	bls.n	8000d3e <__udivmoddi4+0xb6>
 8000d32:	b10d      	cbz	r5, 8000d38 <__udivmoddi4+0xb0>
 8000d34:	e9c5 0100 	strd	r0, r1, [r5]
 8000d38:	2100      	movs	r1, #0
 8000d3a:	4608      	mov	r0, r1
 8000d3c:	e7f5      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d3e:	fab3 f183 	clz	r1, r3
 8000d42:	2900      	cmp	r1, #0
 8000d44:	d146      	bne.n	8000dd4 <__udivmoddi4+0x14c>
 8000d46:	4573      	cmp	r3, lr
 8000d48:	d302      	bcc.n	8000d50 <__udivmoddi4+0xc8>
 8000d4a:	4282      	cmp	r2, r0
 8000d4c:	f200 8105 	bhi.w	8000f5a <__udivmoddi4+0x2d2>
 8000d50:	1a84      	subs	r4, r0, r2
 8000d52:	eb6e 0203 	sbc.w	r2, lr, r3
 8000d56:	2001      	movs	r0, #1
 8000d58:	4690      	mov	r8, r2
 8000d5a:	2d00      	cmp	r5, #0
 8000d5c:	d0e5      	beq.n	8000d2a <__udivmoddi4+0xa2>
 8000d5e:	e9c5 4800 	strd	r4, r8, [r5]
 8000d62:	e7e2      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000d64:	2a00      	cmp	r2, #0
 8000d66:	f000 8090 	beq.w	8000e8a <__udivmoddi4+0x202>
 8000d6a:	fab2 f682 	clz	r6, r2
 8000d6e:	2e00      	cmp	r6, #0
 8000d70:	f040 80a4 	bne.w	8000ebc <__udivmoddi4+0x234>
 8000d74:	1a8a      	subs	r2, r1, r2
 8000d76:	0c03      	lsrs	r3, r0, #16
 8000d78:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000d7c:	b280      	uxth	r0, r0
 8000d7e:	b2bc      	uxth	r4, r7
 8000d80:	2101      	movs	r1, #1
 8000d82:	fbb2 fcfe 	udiv	ip, r2, lr
 8000d86:	fb0e 221c 	mls	r2, lr, ip, r2
 8000d8a:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8000d8e:	fb04 f20c 	mul.w	r2, r4, ip
 8000d92:	429a      	cmp	r2, r3
 8000d94:	d907      	bls.n	8000da6 <__udivmoddi4+0x11e>
 8000d96:	18fb      	adds	r3, r7, r3
 8000d98:	f10c 38ff 	add.w	r8, ip, #4294967295
 8000d9c:	d202      	bcs.n	8000da4 <__udivmoddi4+0x11c>
 8000d9e:	429a      	cmp	r2, r3
 8000da0:	f200 80e0 	bhi.w	8000f64 <__udivmoddi4+0x2dc>
 8000da4:	46c4      	mov	ip, r8
 8000da6:	1a9b      	subs	r3, r3, r2
 8000da8:	fbb3 f2fe 	udiv	r2, r3, lr
 8000dac:	fb0e 3312 	mls	r3, lr, r2, r3
 8000db0:	ea40 4303 	orr.w	r3, r0, r3, lsl #16
 8000db4:	fb02 f404 	mul.w	r4, r2, r4
 8000db8:	429c      	cmp	r4, r3
 8000dba:	d907      	bls.n	8000dcc <__udivmoddi4+0x144>
 8000dbc:	18fb      	adds	r3, r7, r3
 8000dbe:	f102 30ff 	add.w	r0, r2, #4294967295
 8000dc2:	d202      	bcs.n	8000dca <__udivmoddi4+0x142>
 8000dc4:	429c      	cmp	r4, r3
 8000dc6:	f200 80ca 	bhi.w	8000f5e <__udivmoddi4+0x2d6>
 8000dca:	4602      	mov	r2, r0
 8000dcc:	1b1b      	subs	r3, r3, r4
 8000dce:	ea42 400c 	orr.w	r0, r2, ip, lsl #16
 8000dd2:	e7a5      	b.n	8000d20 <__udivmoddi4+0x98>
 8000dd4:	f1c1 0620 	rsb	r6, r1, #32
 8000dd8:	408b      	lsls	r3, r1
 8000dda:	fa22 f706 	lsr.w	r7, r2, r6
 8000dde:	431f      	orrs	r7, r3
 8000de0:	fa0e f401 	lsl.w	r4, lr, r1
 8000de4:	fa20 f306 	lsr.w	r3, r0, r6
 8000de8:	fa2e fe06 	lsr.w	lr, lr, r6
 8000dec:	ea4f 4917 	mov.w	r9, r7, lsr #16
 8000df0:	4323      	orrs	r3, r4
 8000df2:	fa00 f801 	lsl.w	r8, r0, r1
 8000df6:	fa1f fc87 	uxth.w	ip, r7
 8000dfa:	fbbe f0f9 	udiv	r0, lr, r9
 8000dfe:	0c1c      	lsrs	r4, r3, #16
 8000e00:	fb09 ee10 	mls	lr, r9, r0, lr
 8000e04:	ea44 440e 	orr.w	r4, r4, lr, lsl #16
 8000e08:	fb00 fe0c 	mul.w	lr, r0, ip
 8000e0c:	45a6      	cmp	lr, r4
 8000e0e:	fa02 f201 	lsl.w	r2, r2, r1
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x1a0>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 3aff 	add.w	sl, r0, #4294967295
 8000e1a:	f080 809c 	bcs.w	8000f56 <__udivmoddi4+0x2ce>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8099 	bls.w	8000f56 <__udivmoddi4+0x2ce>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	eba4 040e 	sub.w	r4, r4, lr
 8000e2c:	fa1f fe83 	uxth.w	lr, r3
 8000e30:	fbb4 f3f9 	udiv	r3, r4, r9
 8000e34:	fb09 4413 	mls	r4, r9, r3, r4
 8000e38:	ea4e 4404 	orr.w	r4, lr, r4, lsl #16
 8000e3c:	fb03 fc0c 	mul.w	ip, r3, ip
 8000e40:	45a4      	cmp	ip, r4
 8000e42:	d908      	bls.n	8000e56 <__udivmoddi4+0x1ce>
 8000e44:	193c      	adds	r4, r7, r4
 8000e46:	f103 3eff 	add.w	lr, r3, #4294967295
 8000e4a:	f080 8082 	bcs.w	8000f52 <__udivmoddi4+0x2ca>
 8000e4e:	45a4      	cmp	ip, r4
 8000e50:	d97f      	bls.n	8000f52 <__udivmoddi4+0x2ca>
 8000e52:	3b02      	subs	r3, #2
 8000e54:	443c      	add	r4, r7
 8000e56:	ea43 4000 	orr.w	r0, r3, r0, lsl #16
 8000e5a:	eba4 040c 	sub.w	r4, r4, ip
 8000e5e:	fba0 ec02 	umull	lr, ip, r0, r2
 8000e62:	4564      	cmp	r4, ip
 8000e64:	4673      	mov	r3, lr
 8000e66:	46e1      	mov	r9, ip
 8000e68:	d362      	bcc.n	8000f30 <__udivmoddi4+0x2a8>
 8000e6a:	d05f      	beq.n	8000f2c <__udivmoddi4+0x2a4>
 8000e6c:	b15d      	cbz	r5, 8000e86 <__udivmoddi4+0x1fe>
 8000e6e:	ebb8 0203 	subs.w	r2, r8, r3
 8000e72:	eb64 0409 	sbc.w	r4, r4, r9
 8000e76:	fa04 f606 	lsl.w	r6, r4, r6
 8000e7a:	fa22 f301 	lsr.w	r3, r2, r1
 8000e7e:	431e      	orrs	r6, r3
 8000e80:	40cc      	lsrs	r4, r1
 8000e82:	e9c5 6400 	strd	r6, r4, [r5]
 8000e86:	2100      	movs	r1, #0
 8000e88:	e74f      	b.n	8000d2a <__udivmoddi4+0xa2>
 8000e8a:	fbb1 fcf2 	udiv	ip, r1, r2
 8000e8e:	0c01      	lsrs	r1, r0, #16
 8000e90:	ea41 410e 	orr.w	r1, r1, lr, lsl #16
 8000e94:	b280      	uxth	r0, r0
 8000e96:	ea40 4201 	orr.w	r2, r0, r1, lsl #16
 8000e9a:	463b      	mov	r3, r7
 8000e9c:	4638      	mov	r0, r7
 8000e9e:	463c      	mov	r4, r7
 8000ea0:	46b8      	mov	r8, r7
 8000ea2:	46be      	mov	lr, r7
 8000ea4:	2620      	movs	r6, #32
 8000ea6:	fbb1 f1f7 	udiv	r1, r1, r7
 8000eaa:	eba2 0208 	sub.w	r2, r2, r8
 8000eae:	ea41 410c 	orr.w	r1, r1, ip, lsl #16
 8000eb2:	e766      	b.n	8000d82 <__udivmoddi4+0xfa>
 8000eb4:	4601      	mov	r1, r0
 8000eb6:	e718      	b.n	8000cea <__udivmoddi4+0x62>
 8000eb8:	4610      	mov	r0, r2
 8000eba:	e72c      	b.n	8000d16 <__udivmoddi4+0x8e>
 8000ebc:	f1c6 0220 	rsb	r2, r6, #32
 8000ec0:	fa2e f302 	lsr.w	r3, lr, r2
 8000ec4:	40b7      	lsls	r7, r6
 8000ec6:	40b1      	lsls	r1, r6
 8000ec8:	fa20 f202 	lsr.w	r2, r0, r2
 8000ecc:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000ed0:	430a      	orrs	r2, r1
 8000ed2:	fbb3 f8fe 	udiv	r8, r3, lr
 8000ed6:	b2bc      	uxth	r4, r7
 8000ed8:	fb0e 3318 	mls	r3, lr, r8, r3
 8000edc:	0c11      	lsrs	r1, r2, #16
 8000ede:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000ee2:	fb08 f904 	mul.w	r9, r8, r4
 8000ee6:	40b0      	lsls	r0, r6
 8000ee8:	4589      	cmp	r9, r1
 8000eea:	ea4f 4310 	mov.w	r3, r0, lsr #16
 8000eee:	b280      	uxth	r0, r0
 8000ef0:	d93e      	bls.n	8000f70 <__udivmoddi4+0x2e8>
 8000ef2:	1879      	adds	r1, r7, r1
 8000ef4:	f108 3cff 	add.w	ip, r8, #4294967295
 8000ef8:	d201      	bcs.n	8000efe <__udivmoddi4+0x276>
 8000efa:	4589      	cmp	r9, r1
 8000efc:	d81f      	bhi.n	8000f3e <__udivmoddi4+0x2b6>
 8000efe:	eba1 0109 	sub.w	r1, r1, r9
 8000f02:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f06:	fb09 f804 	mul.w	r8, r9, r4
 8000f0a:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f0e:	b292      	uxth	r2, r2
 8000f10:	ea42 4201 	orr.w	r2, r2, r1, lsl #16
 8000f14:	4542      	cmp	r2, r8
 8000f16:	d229      	bcs.n	8000f6c <__udivmoddi4+0x2e4>
 8000f18:	18ba      	adds	r2, r7, r2
 8000f1a:	f109 31ff 	add.w	r1, r9, #4294967295
 8000f1e:	d2c4      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f20:	4542      	cmp	r2, r8
 8000f22:	d2c2      	bcs.n	8000eaa <__udivmoddi4+0x222>
 8000f24:	f1a9 0102 	sub.w	r1, r9, #2
 8000f28:	443a      	add	r2, r7
 8000f2a:	e7be      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f2c:	45f0      	cmp	r8, lr
 8000f2e:	d29d      	bcs.n	8000e6c <__udivmoddi4+0x1e4>
 8000f30:	ebbe 0302 	subs.w	r3, lr, r2
 8000f34:	eb6c 0c07 	sbc.w	ip, ip, r7
 8000f38:	3801      	subs	r0, #1
 8000f3a:	46e1      	mov	r9, ip
 8000f3c:	e796      	b.n	8000e6c <__udivmoddi4+0x1e4>
 8000f3e:	eba7 0909 	sub.w	r9, r7, r9
 8000f42:	4449      	add	r1, r9
 8000f44:	f1a8 0c02 	sub.w	ip, r8, #2
 8000f48:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f4c:	fb09 f804 	mul.w	r8, r9, r4
 8000f50:	e7db      	b.n	8000f0a <__udivmoddi4+0x282>
 8000f52:	4673      	mov	r3, lr
 8000f54:	e77f      	b.n	8000e56 <__udivmoddi4+0x1ce>
 8000f56:	4650      	mov	r0, sl
 8000f58:	e766      	b.n	8000e28 <__udivmoddi4+0x1a0>
 8000f5a:	4608      	mov	r0, r1
 8000f5c:	e6fd      	b.n	8000d5a <__udivmoddi4+0xd2>
 8000f5e:	443b      	add	r3, r7
 8000f60:	3a02      	subs	r2, #2
 8000f62:	e733      	b.n	8000dcc <__udivmoddi4+0x144>
 8000f64:	f1ac 0c02 	sub.w	ip, ip, #2
 8000f68:	443b      	add	r3, r7
 8000f6a:	e71c      	b.n	8000da6 <__udivmoddi4+0x11e>
 8000f6c:	4649      	mov	r1, r9
 8000f6e:	e79c      	b.n	8000eaa <__udivmoddi4+0x222>
 8000f70:	eba1 0109 	sub.w	r1, r1, r9
 8000f74:	46c4      	mov	ip, r8
 8000f76:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f7a:	fb09 f804 	mul.w	r8, r9, r4
 8000f7e:	e7c4      	b.n	8000f0a <__udivmoddi4+0x282>

08000f80 <__aeabi_idiv0>:
 8000f80:	4770      	bx	lr
 8000f82:	bf00      	nop

08000f84 <ESP_Init>:

#define wifi_uart &huart6


void ESP_Init (char *SSID, char *PASSWD, char *STAIP)
{
 8000f84:	b580      	push	{r7, lr}
 8000f86:	b098      	sub	sp, #96	@ 0x60
 8000f88:	af00      	add	r7, sp, #0
 8000f8a:	60f8      	str	r0, [r7, #12]
 8000f8c:	60b9      	str	r1, [r7, #8]
 8000f8e:	607a      	str	r2, [r7, #4]
	char data[80];

	Ringbuf_init();
 8000f90:	f000 f866 	bl	8001060 <Ringbuf_init>

	Uart_sendstring("AT+RST\r\n");
 8000f94:	482b      	ldr	r0, [pc, #172]	@ (8001044 <ESP_Init+0xc0>)
 8000f96:	f000 f94d 	bl	8001234 <Uart_sendstring>
	HAL_Delay(2000);
 8000f9a:	f44f 60fa 	mov.w	r0, #2000	@ 0x7d0
 8000f9e:	f001 fd15 	bl	80029cc <HAL_Delay>

	/********* AT **********/
	//Uart_flush();
	Uart_sendstring("AT\r\n");
 8000fa2:	4829      	ldr	r0, [pc, #164]	@ (8001048 <ESP_Init+0xc4>)
 8000fa4:	f000 f946 	bl	8001234 <Uart_sendstring>
	while(!(Wait_for("OK\r\n")));
 8000fa8:	bf00      	nop
 8000faa:	4828      	ldr	r0, [pc, #160]	@ (800104c <ESP_Init+0xc8>)
 8000fac:	f000 f9e8 	bl	8001380 <Wait_for>
 8000fb0:	4603      	mov	r3, r0
 8000fb2:	2b00      	cmp	r3, #0
 8000fb4:	d0f9      	beq.n	8000faa <ESP_Init+0x26>


	/********* AT+CWMODE=1 **********/
	Uart_flush();
 8000fb6:	f000 f99d 	bl	80012f4 <Uart_flush>
	Uart_sendstring("AT+CWMODE=1\r\n");
 8000fba:	4825      	ldr	r0, [pc, #148]	@ (8001050 <ESP_Init+0xcc>)
 8000fbc:	f000 f93a 	bl	8001234 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000fc0:	bf00      	nop
 8000fc2:	4822      	ldr	r0, [pc, #136]	@ (800104c <ESP_Init+0xc8>)
 8000fc4:	f000 f9dc 	bl	8001380 <Wait_for>
 8000fc8:	4603      	mov	r3, r0
 8000fca:	2b00      	cmp	r3, #0
 8000fcc:	d0f9      	beq.n	8000fc2 <ESP_Init+0x3e>

	/* Set Static IP Address */
	/********* AT+CWSTAIP=IPADDRESS **********/
	Uart_flush();
 8000fce:	f000 f991 	bl	80012f4 <Uart_flush>
	sprintf (data, "AT+CIPSTA=\"%s\"\r\n", STAIP);
 8000fd2:	f107 0310 	add.w	r3, r7, #16
 8000fd6:	687a      	ldr	r2, [r7, #4]
 8000fd8:	491e      	ldr	r1, [pc, #120]	@ (8001054 <ESP_Init+0xd0>)
 8000fda:	4618      	mov	r0, r3
 8000fdc:	f005 fe5c 	bl	8006c98 <siprintf>
	Uart_sendstring(data);
 8000fe0:	f107 0310 	add.w	r3, r7, #16
 8000fe4:	4618      	mov	r0, r3
 8000fe6:	f000 f925 	bl	8001234 <Uart_sendstring>
	while (!(Wait_for("OK\r\n")));
 8000fea:	bf00      	nop
 8000fec:	4817      	ldr	r0, [pc, #92]	@ (800104c <ESP_Init+0xc8>)
 8000fee:	f000 f9c7 	bl	8001380 <Wait_for>
 8000ff2:	4603      	mov	r3, r0
 8000ff4:	2b00      	cmp	r3, #0
 8000ff6:	d0f9      	beq.n	8000fec <ESP_Init+0x68>

	/********* AT+CWJAP="SSID","PASSWD" **********/
	Uart_flush();
 8000ff8:	f000 f97c 	bl	80012f4 <Uart_flush>
	sprintf (data, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSID, PASSWD);
 8000ffc:	f107 0010 	add.w	r0, r7, #16
 8001000:	68bb      	ldr	r3, [r7, #8]
 8001002:	68fa      	ldr	r2, [r7, #12]
 8001004:	4914      	ldr	r1, [pc, #80]	@ (8001058 <ESP_Init+0xd4>)
 8001006:	f005 fe47 	bl	8006c98 <siprintf>
	Uart_sendstring(data);
 800100a:	f107 0310 	add.w	r3, r7, #16
 800100e:	4618      	mov	r0, r3
 8001010:	f000 f910 	bl	8001234 <Uart_sendstring>
//	while (!(Wait_for("OK\r\n")));

	// Escuchar múltiples posibles respuestas
//	while (!(Wait_for("WIFI CONNECTED")));
//	while (!(Wait_for("WIFI GOT IP")));
	while (!(Wait_for("OK\r\n")));
 8001014:	bf00      	nop
 8001016:	480d      	ldr	r0, [pc, #52]	@ (800104c <ESP_Init+0xc8>)
 8001018:	f000 f9b2 	bl	8001380 <Wait_for>
 800101c:	4603      	mov	r3, r0
 800101e:	2b00      	cmp	r3, #0
 8001020:	d0f9      	beq.n	8001016 <ESP_Init+0x92>



	  Uart_flush();
 8001022:	f000 f967 	bl	80012f4 <Uart_flush>
	  Uart_sendstring("AT+CWJAP?\r\n");
 8001026:	480d      	ldr	r0, [pc, #52]	@ (800105c <ESP_Init+0xd8>)
 8001028:	f000 f904 	bl	8001234 <Uart_sendstring>
	  while (!(Wait_for("OK\r\n")));
 800102c:	bf00      	nop
 800102e:	4807      	ldr	r0, [pc, #28]	@ (800104c <ESP_Init+0xc8>)
 8001030:	f000 f9a6 	bl	8001380 <Wait_for>
 8001034:	4603      	mov	r3, r0
 8001036:	2b00      	cmp	r3, #0
 8001038:	d0f9      	beq.n	800102e <ESP_Init+0xaa>

}
 800103a:	bf00      	nop
 800103c:	bf00      	nop
 800103e:	3760      	adds	r7, #96	@ 0x60
 8001040:	46bd      	mov	sp, r7
 8001042:	bd80      	pop	{r7, pc}
 8001044:	08008f18 	.word	0x08008f18
 8001048:	08008f24 	.word	0x08008f24
 800104c:	08008f2c 	.word	0x08008f2c
 8001050:	08008f34 	.word	0x08008f34
 8001054:	08008f44 	.word	0x08008f44
 8001058:	08008f58 	.word	0x08008f58
 800105c:	08008f70 	.word	0x08008f70

08001060 <Ringbuf_init>:

void store_char(unsigned char c, ring_buffer *buffer);


void Ringbuf_init(void)
{
 8001060:	b580      	push	{r7, lr}
 8001062:	af00      	add	r7, sp, #0
  _rx_buffer = &rx_buffer;
 8001064:	4b1d      	ldr	r3, [pc, #116]	@ (80010dc <Ringbuf_init+0x7c>)
 8001066:	4a1e      	ldr	r2, [pc, #120]	@ (80010e0 <Ringbuf_init+0x80>)
 8001068:	601a      	str	r2, [r3, #0]
  _tx_buffer = &tx_buffer;
 800106a:	4b1e      	ldr	r3, [pc, #120]	@ (80010e4 <Ringbuf_init+0x84>)
 800106c:	4a1e      	ldr	r2, [pc, #120]	@ (80010e8 <Ringbuf_init+0x88>)
 800106e:	601a      	str	r2, [r3, #0]


  // Inicializa los buffers a cero
  memset(_rx_buffer->buffer, 0, UART_BUFFER_SIZE);
 8001070:	4b1a      	ldr	r3, [pc, #104]	@ (80010dc <Ringbuf_init+0x7c>)
 8001072:	681b      	ldr	r3, [r3, #0]
 8001074:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001078:	2100      	movs	r1, #0
 800107a:	4618      	mov	r0, r3
 800107c:	f005 ff06 	bl	8006e8c <memset>
  memset(_tx_buffer->buffer, 0, UART_BUFFER_SIZE);
 8001080:	4b18      	ldr	r3, [pc, #96]	@ (80010e4 <Ringbuf_init+0x84>)
 8001082:	681b      	ldr	r3, [r3, #0]
 8001084:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001088:	2100      	movs	r1, #0
 800108a:	4618      	mov	r0, r3
 800108c:	f005 fefe 	bl	8006e8c <memset>
  _rx_buffer->head = 0;
 8001090:	4b12      	ldr	r3, [pc, #72]	@ (80010dc <Ringbuf_init+0x7c>)
 8001092:	681b      	ldr	r3, [r3, #0]
 8001094:	2200      	movs	r2, #0
 8001096:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  _rx_buffer->tail = 0;
 800109a:	4b10      	ldr	r3, [pc, #64]	@ (80010dc <Ringbuf_init+0x7c>)
 800109c:	681b      	ldr	r3, [r3, #0]
 800109e:	2200      	movs	r2, #0
 80010a0:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
  _tx_buffer->head = 0;
 80010a4:	4b0f      	ldr	r3, [pc, #60]	@ (80010e4 <Ringbuf_init+0x84>)
 80010a6:	681b      	ldr	r3, [r3, #0]
 80010a8:	2200      	movs	r2, #0
 80010aa:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  _tx_buffer->tail = 0;
 80010ae:	4b0d      	ldr	r3, [pc, #52]	@ (80010e4 <Ringbuf_init+0x84>)
 80010b0:	681b      	ldr	r3, [r3, #0]
 80010b2:	2200      	movs	r2, #0
 80010b4:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  __HAL_UART_ENABLE_IT(uart, UART_IT_ERR);
 80010b8:	4b0c      	ldr	r3, [pc, #48]	@ (80010ec <Ringbuf_init+0x8c>)
 80010ba:	681b      	ldr	r3, [r3, #0]
 80010bc:	695a      	ldr	r2, [r3, #20]
 80010be:	4b0b      	ldr	r3, [pc, #44]	@ (80010ec <Ringbuf_init+0x8c>)
 80010c0:	681b      	ldr	r3, [r3, #0]
 80010c2:	f042 0201 	orr.w	r2, r2, #1
 80010c6:	615a      	str	r2, [r3, #20]

  /* Enable the UART Data Register not empty Interrupt */
  __HAL_UART_ENABLE_IT(uart, UART_IT_RXNE);
 80010c8:	4b08      	ldr	r3, [pc, #32]	@ (80010ec <Ringbuf_init+0x8c>)
 80010ca:	681b      	ldr	r3, [r3, #0]
 80010cc:	68da      	ldr	r2, [r3, #12]
 80010ce:	4b07      	ldr	r3, [pc, #28]	@ (80010ec <Ringbuf_init+0x8c>)
 80010d0:	681b      	ldr	r3, [r3, #0]
 80010d2:	f042 0220 	orr.w	r2, r2, #32
 80010d6:	60da      	str	r2, [r3, #12]
}
 80010d8:	bf00      	nop
 80010da:	bd80      	pop	{r7, pc}
 80010dc:	20000600 	.word	0x20000600
 80010e0:	200001f0 	.word	0x200001f0
 80010e4:	20000604 	.word	0x20000604
 80010e8:	200003f8 	.word	0x200003f8
 80010ec:	200006b0 	.word	0x200006b0

080010f0 <store_char>:

void store_char(unsigned char c, ring_buffer *buffer)
{
 80010f0:	b480      	push	{r7}
 80010f2:	b085      	sub	sp, #20
 80010f4:	af00      	add	r7, sp, #0
 80010f6:	4603      	mov	r3, r0
 80010f8:	6039      	str	r1, [r7, #0]
 80010fa:	71fb      	strb	r3, [r7, #7]
  int i = (unsigned int)(buffer->head + 1) % UART_BUFFER_SIZE;
 80010fc:	683b      	ldr	r3, [r7, #0]
 80010fe:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 8001102:	3301      	adds	r3, #1
 8001104:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8001108:	60fb      	str	r3, [r7, #12]

  // if we should be storing the received character into the location
  // just before the tail (meaning that the head would advance to the
  // current location of the tail), we're about to overflow the buffer
  // and so we don't write the character or advance the head.
  if(i != buffer->tail) {
 800110a:	683b      	ldr	r3, [r7, #0]
 800110c:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 8001110:	68fb      	ldr	r3, [r7, #12]
 8001112:	429a      	cmp	r2, r3
 8001114:	d009      	beq.n	800112a <store_char+0x3a>
    buffer->buffer[buffer->head] = c;
 8001116:	683b      	ldr	r3, [r7, #0]
 8001118:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800111c:	683a      	ldr	r2, [r7, #0]
 800111e:	79f9      	ldrb	r1, [r7, #7]
 8001120:	54d1      	strb	r1, [r2, r3]
    buffer->head = i;
 8001122:	68fa      	ldr	r2, [r7, #12]
 8001124:	683b      	ldr	r3, [r7, #0]
 8001126:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200
  }
}
 800112a:	bf00      	nop
 800112c:	3714      	adds	r7, #20
 800112e:	46bd      	mov	sp, r7
 8001130:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001134:	4770      	bx	lr
	...

08001138 <Uart_read>:
	if (so_far == stringlength) return 1;
	else return -1;
}

int Uart_read(void)
{
 8001138:	b480      	push	{r7}
 800113a:	b083      	sub	sp, #12
 800113c:	af00      	add	r7, sp, #0
  // if the head isn't ahead of the tail, we don't have any characters
  if(_rx_buffer->head == _rx_buffer->tail)
 800113e:	4b13      	ldr	r3, [pc, #76]	@ (800118c <Uart_read+0x54>)
 8001140:	681b      	ldr	r3, [r3, #0]
 8001142:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001146:	4b11      	ldr	r3, [pc, #68]	@ (800118c <Uart_read+0x54>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800114e:	429a      	cmp	r2, r3
 8001150:	d102      	bne.n	8001158 <Uart_read+0x20>
  {
    return -1;
 8001152:	f04f 33ff 	mov.w	r3, #4294967295
 8001156:	e013      	b.n	8001180 <Uart_read+0x48>
  }
  else
  {
    unsigned char c = _rx_buffer->buffer[_rx_buffer->tail];
 8001158:	4b0c      	ldr	r3, [pc, #48]	@ (800118c <Uart_read+0x54>)
 800115a:	681a      	ldr	r2, [r3, #0]
 800115c:	4b0b      	ldr	r3, [pc, #44]	@ (800118c <Uart_read+0x54>)
 800115e:	681b      	ldr	r3, [r3, #0]
 8001160:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001164:	5cd3      	ldrb	r3, [r2, r3]
 8001166:	71fb      	strb	r3, [r7, #7]
    _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 8001168:	4b08      	ldr	r3, [pc, #32]	@ (800118c <Uart_read+0x54>)
 800116a:	681b      	ldr	r3, [r3, #0]
 800116c:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001170:	1c5a      	adds	r2, r3, #1
 8001172:	4b06      	ldr	r3, [pc, #24]	@ (800118c <Uart_read+0x54>)
 8001174:	681b      	ldr	r3, [r3, #0]
 8001176:	f3c2 0208 	ubfx	r2, r2, #0, #9
 800117a:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
    return c;
 800117e:	79fb      	ldrb	r3, [r7, #7]
  }
}
 8001180:	4618      	mov	r0, r3
 8001182:	370c      	adds	r7, #12
 8001184:	46bd      	mov	sp, r7
 8001186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800118a:	4770      	bx	lr
 800118c:	20000600 	.word	0x20000600

08001190 <Uart_write>:

void Uart_write(int c)
{
 8001190:	b480      	push	{r7}
 8001192:	b085      	sub	sp, #20
 8001194:	af00      	add	r7, sp, #0
 8001196:	6078      	str	r0, [r7, #4]
	if (c>=0)
 8001198:	687b      	ldr	r3, [r7, #4]
 800119a:	2b00      	cmp	r3, #0
 800119c:	db25      	blt.n	80011ea <Uart_write+0x5a>
	{
		int i = (_tx_buffer->head + 1) % UART_BUFFER_SIZE;
 800119e:	4b16      	ldr	r3, [pc, #88]	@ (80011f8 <Uart_write+0x68>)
 80011a0:	681b      	ldr	r3, [r3, #0]
 80011a2:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80011a6:	3301      	adds	r3, #1
 80011a8:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80011ac:	60fb      	str	r3, [r7, #12]

		// If the output buffer is full, there's nothing for it other than to
		// wait for the interrupt handler to empty it a bit
		// ???: return 0 here instead?
		while (i == _tx_buffer->tail);
 80011ae:	bf00      	nop
 80011b0:	4b11      	ldr	r3, [pc, #68]	@ (80011f8 <Uart_write+0x68>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	f8d3 2204 	ldr.w	r2, [r3, #516]	@ 0x204
 80011b8:	68fb      	ldr	r3, [r7, #12]
 80011ba:	429a      	cmp	r2, r3
 80011bc:	d0f8      	beq.n	80011b0 <Uart_write+0x20>

		_tx_buffer->buffer[_tx_buffer->head] = (uint8_t)c;
 80011be:	4b0e      	ldr	r3, [pc, #56]	@ (80011f8 <Uart_write+0x68>)
 80011c0:	681a      	ldr	r2, [r3, #0]
 80011c2:	4b0d      	ldr	r3, [pc, #52]	@ (80011f8 <Uart_write+0x68>)
 80011c4:	681b      	ldr	r3, [r3, #0]
 80011c6:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 80011ca:	6879      	ldr	r1, [r7, #4]
 80011cc:	b2c9      	uxtb	r1, r1
 80011ce:	54d1      	strb	r1, [r2, r3]
		_tx_buffer->head = i;
 80011d0:	4b09      	ldr	r3, [pc, #36]	@ (80011f8 <Uart_write+0x68>)
 80011d2:	681b      	ldr	r3, [r3, #0]
 80011d4:	68fa      	ldr	r2, [r7, #12]
 80011d6:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200

		__HAL_UART_ENABLE_IT(uart, UART_IT_TXE); // Enable UART transmission interrupt
 80011da:	4b08      	ldr	r3, [pc, #32]	@ (80011fc <Uart_write+0x6c>)
 80011dc:	681b      	ldr	r3, [r3, #0]
 80011de:	68da      	ldr	r2, [r3, #12]
 80011e0:	4b06      	ldr	r3, [pc, #24]	@ (80011fc <Uart_write+0x6c>)
 80011e2:	681b      	ldr	r3, [r3, #0]
 80011e4:	f042 0280 	orr.w	r2, r2, #128	@ 0x80
 80011e8:	60da      	str	r2, [r3, #12]
	}
}
 80011ea:	bf00      	nop
 80011ec:	3714      	adds	r7, #20
 80011ee:	46bd      	mov	sp, r7
 80011f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80011f4:	4770      	bx	lr
 80011f6:	bf00      	nop
 80011f8:	20000604 	.word	0x20000604
 80011fc:	200006b0 	.word	0x200006b0

08001200 <IsDataAvailable>:

int IsDataAvailable(void)
{
 8001200:	b480      	push	{r7}
 8001202:	af00      	add	r7, sp, #0
  return (uint16_t)(UART_BUFFER_SIZE + _rx_buffer->head - _rx_buffer->tail) % UART_BUFFER_SIZE;
 8001204:	4b0a      	ldr	r3, [pc, #40]	@ (8001230 <IsDataAvailable+0x30>)
 8001206:	681b      	ldr	r3, [r3, #0]
 8001208:	f8d3 3200 	ldr.w	r3, [r3, #512]	@ 0x200
 800120c:	b29a      	uxth	r2, r3
 800120e:	4b08      	ldr	r3, [pc, #32]	@ (8001230 <IsDataAvailable+0x30>)
 8001210:	681b      	ldr	r3, [r3, #0]
 8001212:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001216:	b29b      	uxth	r3, r3
 8001218:	1ad3      	subs	r3, r2, r3
 800121a:	b29b      	uxth	r3, r3
 800121c:	f503 7300 	add.w	r3, r3, #512	@ 0x200
 8001220:	b29b      	uxth	r3, r3
 8001222:	f3c3 0308 	ubfx	r3, r3, #0, #9
}
 8001226:	4618      	mov	r0, r3
 8001228:	46bd      	mov	sp, r7
 800122a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800122e:	4770      	bx	lr
 8001230:	20000600 	.word	0x20000600

08001234 <Uart_sendstring>:

void Uart_sendstring (const char *s)
{
 8001234:	b580      	push	{r7, lr}
 8001236:	b082      	sub	sp, #8
 8001238:	af00      	add	r7, sp, #0
 800123a:	6078      	str	r0, [r7, #4]
	while(*s) Uart_write(*s++);
 800123c:	e006      	b.n	800124c <Uart_sendstring+0x18>
 800123e:	687b      	ldr	r3, [r7, #4]
 8001240:	1c5a      	adds	r2, r3, #1
 8001242:	607a      	str	r2, [r7, #4]
 8001244:	781b      	ldrb	r3, [r3, #0]
 8001246:	4618      	mov	r0, r3
 8001248:	f7ff ffa2 	bl	8001190 <Uart_write>
 800124c:	687b      	ldr	r3, [r7, #4]
 800124e:	781b      	ldrb	r3, [r3, #0]
 8001250:	2b00      	cmp	r3, #0
 8001252:	d1f4      	bne.n	800123e <Uart_sendstring+0xa>
}
 8001254:	bf00      	nop
 8001256:	bf00      	nop
 8001258:	3708      	adds	r7, #8
 800125a:	46bd      	mov	sp, r7
 800125c:	bd80      	pop	{r7, pc}

0800125e <Uart_printbase>:

void Uart_printbase (long n, uint8_t base)
{
 800125e:	b580      	push	{r7, lr}
 8001260:	b08e      	sub	sp, #56	@ 0x38
 8001262:	af00      	add	r7, sp, #0
 8001264:	6078      	str	r0, [r7, #4]
 8001266:	460b      	mov	r3, r1
 8001268:	70fb      	strb	r3, [r7, #3]
  char buf[8 * sizeof(long) + 1]; // Assumes 8-bit chars plus zero byte.
  char *s = &buf[sizeof(buf) - 1];
 800126a:	f107 030c 	add.w	r3, r7, #12
 800126e:	3320      	adds	r3, #32
 8001270:	637b      	str	r3, [r7, #52]	@ 0x34

  *s = '\0';
 8001272:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8001274:	2200      	movs	r2, #0
 8001276:	701a      	strb	r2, [r3, #0]

  // prevent crash if called with base == 1
  if (base < 2) base = 10;
 8001278:	78fb      	ldrb	r3, [r7, #3]
 800127a:	2b01      	cmp	r3, #1
 800127c:	d801      	bhi.n	8001282 <Uart_printbase+0x24>
 800127e:	230a      	movs	r3, #10
 8001280:	70fb      	strb	r3, [r7, #3]

  do {
    unsigned long m = n;
 8001282:	687b      	ldr	r3, [r7, #4]
 8001284:	633b      	str	r3, [r7, #48]	@ 0x30
    n /= base;
 8001286:	78fb      	ldrb	r3, [r7, #3]
 8001288:	687a      	ldr	r2, [r7, #4]
 800128a:	fb92 f3f3 	sdiv	r3, r2, r3
 800128e:	607b      	str	r3, [r7, #4]
    char c = m - base * n;
 8001290:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8001292:	b2da      	uxtb	r2, r3
 8001294:	687b      	ldr	r3, [r7, #4]
 8001296:	b2db      	uxtb	r3, r3
 8001298:	78f9      	ldrb	r1, [r7, #3]
 800129a:	fb11 f303 	smulbb	r3, r1, r3
 800129e:	b2db      	uxtb	r3, r3
 80012a0:	1ad3      	subs	r3, r2, r3
 80012a2:	f887 302f 	strb.w	r3, [r7, #47]	@ 0x2f
    *--s = c < 10 ? c + '0' : c + 'A' - 10;
 80012a6:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012aa:	2b09      	cmp	r3, #9
 80012ac:	d804      	bhi.n	80012b8 <Uart_printbase+0x5a>
 80012ae:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012b2:	3330      	adds	r3, #48	@ 0x30
 80012b4:	b2db      	uxtb	r3, r3
 80012b6:	e003      	b.n	80012c0 <Uart_printbase+0x62>
 80012b8:	f897 302f 	ldrb.w	r3, [r7, #47]	@ 0x2f
 80012bc:	3337      	adds	r3, #55	@ 0x37
 80012be:	b2db      	uxtb	r3, r3
 80012c0:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012c2:	3a01      	subs	r2, #1
 80012c4:	637a      	str	r2, [r7, #52]	@ 0x34
 80012c6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 80012c8:	7013      	strb	r3, [r2, #0]
  } while(n);
 80012ca:	687b      	ldr	r3, [r7, #4]
 80012cc:	2b00      	cmp	r3, #0
 80012ce:	d1d8      	bne.n	8001282 <Uart_printbase+0x24>

  while(*s) Uart_write(*s++);
 80012d0:	e006      	b.n	80012e0 <Uart_printbase+0x82>
 80012d2:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012d4:	1c5a      	adds	r2, r3, #1
 80012d6:	637a      	str	r2, [r7, #52]	@ 0x34
 80012d8:	781b      	ldrb	r3, [r3, #0]
 80012da:	4618      	mov	r0, r3
 80012dc:	f7ff ff58 	bl	8001190 <Uart_write>
 80012e0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80012e2:	781b      	ldrb	r3, [r3, #0]
 80012e4:	2b00      	cmp	r3, #0
 80012e6:	d1f4      	bne.n	80012d2 <Uart_printbase+0x74>
}
 80012e8:	bf00      	nop
 80012ea:	bf00      	nop
 80012ec:	3738      	adds	r7, #56	@ 0x38
 80012ee:	46bd      	mov	sp, r7
 80012f0:	bd80      	pop	{r7, pc}
	...

080012f4 <Uart_flush>:
		indx++;
	}
}

void Uart_flush (void)
{
 80012f4:	b580      	push	{r7, lr}
 80012f6:	af00      	add	r7, sp, #0
	memset(_rx_buffer->buffer,'\0', UART_BUFFER_SIZE);
 80012f8:	4b07      	ldr	r3, [pc, #28]	@ (8001318 <Uart_flush+0x24>)
 80012fa:	681b      	ldr	r3, [r3, #0]
 80012fc:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001300:	2100      	movs	r1, #0
 8001302:	4618      	mov	r0, r3
 8001304:	f005 fdc2 	bl	8006e8c <memset>
	_rx_buffer->head = 0;
 8001308:	4b03      	ldr	r3, [pc, #12]	@ (8001318 <Uart_flush+0x24>)
 800130a:	681b      	ldr	r3, [r3, #0]
 800130c:	2200      	movs	r2, #0
 800130e:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200


}
 8001312:	bf00      	nop
 8001314:	bd80      	pop	{r7, pc}
 8001316:	bf00      	nop
 8001318:	20000600 	.word	0x20000600

0800131c <Uart_clear>:

void Uart_clear (void)
{
 800131c:	b580      	push	{r7, lr}
 800131e:	af00      	add	r7, sp, #0
	memset(_tx_buffer->buffer,'\0', UART_BUFFER_SIZE);
 8001320:	4b07      	ldr	r3, [pc, #28]	@ (8001340 <Uart_clear+0x24>)
 8001322:	681b      	ldr	r3, [r3, #0]
 8001324:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8001328:	2100      	movs	r1, #0
 800132a:	4618      	mov	r0, r3
 800132c:	f005 fdae 	bl	8006e8c <memset>
	_tx_buffer->head = 0;
 8001330:	4b03      	ldr	r3, [pc, #12]	@ (8001340 <Uart_clear+0x24>)
 8001332:	681b      	ldr	r3, [r3, #0]
 8001334:	2200      	movs	r2, #0
 8001336:	f8c3 2200 	str.w	r2, [r3, #512]	@ 0x200


}
 800133a:	bf00      	nop
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	20000604 	.word	0x20000604

08001344 <Uart_peek>:



int Uart_peek()
{
 8001344:	b480      	push	{r7}
 8001346:	af00      	add	r7, sp, #0
  if(_rx_buffer->head == _rx_buffer->tail)
 8001348:	4b0c      	ldr	r3, [pc, #48]	@ (800137c <Uart_peek+0x38>)
 800134a:	681b      	ldr	r3, [r3, #0]
 800134c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001350:	4b0a      	ldr	r3, [pc, #40]	@ (800137c <Uart_peek+0x38>)
 8001352:	681b      	ldr	r3, [r3, #0]
 8001354:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001358:	429a      	cmp	r2, r3
 800135a:	d102      	bne.n	8001362 <Uart_peek+0x1e>
  {
    return -1;
 800135c:	f04f 33ff 	mov.w	r3, #4294967295
 8001360:	e006      	b.n	8001370 <Uart_peek+0x2c>
  }
  else
  {
    return _rx_buffer->buffer[_rx_buffer->tail];
 8001362:	4b06      	ldr	r3, [pc, #24]	@ (800137c <Uart_peek+0x38>)
 8001364:	681a      	ldr	r2, [r3, #0]
 8001366:	4b05      	ldr	r3, [pc, #20]	@ (800137c <Uart_peek+0x38>)
 8001368:	681b      	ldr	r3, [r3, #0]
 800136a:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 800136e:	5cd3      	ldrb	r3, [r2, r3]
  }
}
 8001370:	4618      	mov	r0, r3
 8001372:	46bd      	mov	sp, r7
 8001374:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001378:	4770      	bx	lr
 800137a:	bf00      	nop
 800137c:	20000600 	.word	0x20000600

08001380 <Wait_for>:
	return 1;
}


int Wait_for (char *string)
{
 8001380:	b580      	push	{r7, lr}
 8001382:	b084      	sub	sp, #16
 8001384:	af00      	add	r7, sp, #0
 8001386:	6078      	str	r0, [r7, #4]
	int so_far =0;
 8001388:	2300      	movs	r3, #0
 800138a:	60fb      	str	r3, [r7, #12]
	int len = strlen (string);
 800138c:	6878      	ldr	r0, [r7, #4]
 800138e:	f7fe ff77 	bl	8000280 <strlen>
 8001392:	4603      	mov	r3, r0
 8001394:	60bb      	str	r3, [r7, #8]

again:
	while (!IsDataAvailable());
 8001396:	bf00      	nop
 8001398:	f7ff ff32 	bl	8001200 <IsDataAvailable>
 800139c:	4603      	mov	r3, r0
 800139e:	2b00      	cmp	r3, #0
 80013a0:	d0fa      	beq.n	8001398 <Wait_for+0x18>
	while (Uart_peek() != string[so_far]) _rx_buffer->tail = (unsigned int)(_rx_buffer->tail + 1) % UART_BUFFER_SIZE;
 80013a2:	e00a      	b.n	80013ba <Wait_for+0x3a>
 80013a4:	4b20      	ldr	r3, [pc, #128]	@ (8001428 <Wait_for+0xa8>)
 80013a6:	681b      	ldr	r3, [r3, #0]
 80013a8:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80013ac:	1c5a      	adds	r2, r3, #1
 80013ae:	4b1e      	ldr	r3, [pc, #120]	@ (8001428 <Wait_for+0xa8>)
 80013b0:	681b      	ldr	r3, [r3, #0]
 80013b2:	f3c2 0208 	ubfx	r2, r2, #0, #9
 80013b6:	f8c3 2204 	str.w	r2, [r3, #516]	@ 0x204
 80013ba:	f7ff ffc3 	bl	8001344 <Uart_peek>
 80013be:	4601      	mov	r1, r0
 80013c0:	68fb      	ldr	r3, [r7, #12]
 80013c2:	687a      	ldr	r2, [r7, #4]
 80013c4:	4413      	add	r3, r2
 80013c6:	781b      	ldrb	r3, [r3, #0]
 80013c8:	4299      	cmp	r1, r3
 80013ca:	d1eb      	bne.n	80013a4 <Wait_for+0x24>
	while (Uart_peek() == string [so_far])
 80013cc:	e010      	b.n	80013f0 <Wait_for+0x70>
	{
		so_far++;
 80013ce:	68fb      	ldr	r3, [r7, #12]
 80013d0:	3301      	adds	r3, #1
 80013d2:	60fb      	str	r3, [r7, #12]
		Uart_read();
 80013d4:	f7ff feb0 	bl	8001138 <Uart_read>
		if (so_far == len) return 1;
 80013d8:	68fa      	ldr	r2, [r7, #12]
 80013da:	68bb      	ldr	r3, [r7, #8]
 80013dc:	429a      	cmp	r2, r3
 80013de:	d101      	bne.n	80013e4 <Wait_for+0x64>
 80013e0:	2301      	movs	r3, #1
 80013e2:	e01d      	b.n	8001420 <Wait_for+0xa0>
		while (!IsDataAvailable());
 80013e4:	bf00      	nop
 80013e6:	f7ff ff0b 	bl	8001200 <IsDataAvailable>
 80013ea:	4603      	mov	r3, r0
 80013ec:	2b00      	cmp	r3, #0
 80013ee:	d0fa      	beq.n	80013e6 <Wait_for+0x66>
	while (Uart_peek() == string [so_far])
 80013f0:	f7ff ffa8 	bl	8001344 <Uart_peek>
 80013f4:	4601      	mov	r1, r0
 80013f6:	68fb      	ldr	r3, [r7, #12]
 80013f8:	687a      	ldr	r2, [r7, #4]
 80013fa:	4413      	add	r3, r2
 80013fc:	781b      	ldrb	r3, [r3, #0]
 80013fe:	4299      	cmp	r1, r3
 8001400:	d0e5      	beq.n	80013ce <Wait_for+0x4e>
	}

	if (so_far != len)
 8001402:	68fa      	ldr	r2, [r7, #12]
 8001404:	68bb      	ldr	r3, [r7, #8]
 8001406:	429a      	cmp	r2, r3
 8001408:	d002      	beq.n	8001410 <Wait_for+0x90>
	{
		so_far = 0;
 800140a:	2300      	movs	r3, #0
 800140c:	60fb      	str	r3, [r7, #12]
		goto again;
 800140e:	e7c2      	b.n	8001396 <Wait_for+0x16>
	}

	if (so_far == len) return 1;
 8001410:	68fa      	ldr	r2, [r7, #12]
 8001412:	68bb      	ldr	r3, [r7, #8]
 8001414:	429a      	cmp	r2, r3
 8001416:	d101      	bne.n	800141c <Wait_for+0x9c>
 8001418:	2301      	movs	r3, #1
 800141a:	e001      	b.n	8001420 <Wait_for+0xa0>
	else return -1;
 800141c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8001420:	4618      	mov	r0, r3
 8001422:	3710      	adds	r7, #16
 8001424:	46bd      	mov	sp, r7
 8001426:	bd80      	pop	{r7, pc}
 8001428:	20000600 	.word	0x20000600

0800142c <Uart_isr>:




void Uart_isr (UART_HandleTypeDef *huart)
{
 800142c:	b580      	push	{r7, lr}
 800142e:	b086      	sub	sp, #24
 8001430:	af00      	add	r7, sp, #0
 8001432:	6078      	str	r0, [r7, #4]
	  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8001434:	687b      	ldr	r3, [r7, #4]
 8001436:	681b      	ldr	r3, [r3, #0]
 8001438:	681b      	ldr	r3, [r3, #0]
 800143a:	617b      	str	r3, [r7, #20]
	  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800143c:	687b      	ldr	r3, [r7, #4]
 800143e:	681b      	ldr	r3, [r3, #0]
 8001440:	68db      	ldr	r3, [r3, #12]
 8001442:	613b      	str	r3, [r7, #16]

    /* if DR is not empty and the Rx Int is enabled */
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8001444:	697b      	ldr	r3, [r7, #20]
 8001446:	f003 0320 	and.w	r3, r3, #32
 800144a:	2b00      	cmp	r3, #0
 800144c:	d013      	beq.n	8001476 <Uart_isr+0x4a>
 800144e:	693b      	ldr	r3, [r7, #16]
 8001450:	f003 0320 	and.w	r3, r3, #32
 8001454:	2b00      	cmp	r3, #0
 8001456:	d00e      	beq.n	8001476 <Uart_isr+0x4a>
    	    	      * @note   TC flag can be also cleared by software sequence: a read operation to
    	    	      *          USART_SR register followed by a write operation to USART_DR register.
    	    	      * @note   TXE flag is cleared only by a write to the USART_DR register.

    	 *********************/
		huart->Instance->SR;                       /* Read status register */
 8001458:	687b      	ldr	r3, [r7, #4]
 800145a:	681b      	ldr	r3, [r3, #0]
 800145c:	681b      	ldr	r3, [r3, #0]
        unsigned char c = huart->Instance->DR;     /* Read data register */
 800145e:	687b      	ldr	r3, [r7, #4]
 8001460:	681b      	ldr	r3, [r3, #0]
 8001462:	685b      	ldr	r3, [r3, #4]
 8001464:	73fb      	strb	r3, [r7, #15]
        store_char (c, _rx_buffer);  // store data in buffer
 8001466:	4b1e      	ldr	r3, [pc, #120]	@ (80014e0 <Uart_isr+0xb4>)
 8001468:	681a      	ldr	r2, [r3, #0]
 800146a:	7bfb      	ldrb	r3, [r7, #15]
 800146c:	4611      	mov	r1, r2
 800146e:	4618      	mov	r0, r3
 8001470:	f7ff fe3e 	bl	80010f0 <store_char>
        return;
 8001474:	e031      	b.n	80014da <Uart_isr+0xae>
    }

    /*If interrupt is caused due to Transmit Data Register Empty */
    if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8001476:	697b      	ldr	r3, [r7, #20]
 8001478:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 800147c:	2b00      	cmp	r3, #0
 800147e:	d02c      	beq.n	80014da <Uart_isr+0xae>
 8001480:	693b      	ldr	r3, [r7, #16]
 8001482:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001486:	2b00      	cmp	r3, #0
 8001488:	d027      	beq.n	80014da <Uart_isr+0xae>
    {
    	if(tx_buffer.head == tx_buffer.tail)
 800148a:	4b16      	ldr	r3, [pc, #88]	@ (80014e4 <Uart_isr+0xb8>)
 800148c:	f8d3 2200 	ldr.w	r2, [r3, #512]	@ 0x200
 8001490:	4b14      	ldr	r3, [pc, #80]	@ (80014e4 <Uart_isr+0xb8>)
 8001492:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 8001496:	429a      	cmp	r2, r3
 8001498:	d108      	bne.n	80014ac <Uart_isr+0x80>
    	    {
    	      // Buffer empty, so disable interrupts
    	      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 800149a:	687b      	ldr	r3, [r7, #4]
 800149c:	681b      	ldr	r3, [r3, #0]
 800149e:	68da      	ldr	r2, [r3, #12]
 80014a0:	687b      	ldr	r3, [r7, #4]
 80014a2:	681b      	ldr	r3, [r3, #0]
 80014a4:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 80014a8:	60da      	str	r2, [r3, #12]

    	      huart->Instance->SR;
    	      huart->Instance->DR = c;

    	    }
    	return;
 80014aa:	e015      	b.n	80014d8 <Uart_isr+0xac>
    	      unsigned char c = tx_buffer.buffer[tx_buffer.tail];
 80014ac:	4b0d      	ldr	r3, [pc, #52]	@ (80014e4 <Uart_isr+0xb8>)
 80014ae:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80014b2:	4a0c      	ldr	r2, [pc, #48]	@ (80014e4 <Uart_isr+0xb8>)
 80014b4:	5cd3      	ldrb	r3, [r2, r3]
 80014b6:	73bb      	strb	r3, [r7, #14]
    	      tx_buffer.tail = (tx_buffer.tail + 1) % UART_BUFFER_SIZE;
 80014b8:	4b0a      	ldr	r3, [pc, #40]	@ (80014e4 <Uart_isr+0xb8>)
 80014ba:	f8d3 3204 	ldr.w	r3, [r3, #516]	@ 0x204
 80014be:	3301      	adds	r3, #1
 80014c0:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80014c4:	4a07      	ldr	r2, [pc, #28]	@ (80014e4 <Uart_isr+0xb8>)
 80014c6:	f8c2 3204 	str.w	r3, [r2, #516]	@ 0x204
    	      huart->Instance->SR;
 80014ca:	687b      	ldr	r3, [r7, #4]
 80014cc:	681b      	ldr	r3, [r3, #0]
 80014ce:	681b      	ldr	r3, [r3, #0]
    	      huart->Instance->DR = c;
 80014d0:	687b      	ldr	r3, [r7, #4]
 80014d2:	681b      	ldr	r3, [r3, #0]
 80014d4:	7bba      	ldrb	r2, [r7, #14]
 80014d6:	605a      	str	r2, [r3, #4]
    	return;
 80014d8:	bf00      	nop
    }
}
 80014da:	3718      	adds	r7, #24
 80014dc:	46bd      	mov	sp, r7
 80014de:	bd80      	pop	{r7, pc}
 80014e0:	20000600 	.word	0x20000600
 80014e4:	200003f8 	.word	0x200003f8

080014e8 <closeConnection>:


void closeConnection(void){
 80014e8:	b580      	push	{r7, lr}
 80014ea:	af00      	add	r7, sp, #0
 	Uart_flush();		// Error. Cerrar puerto para no bloquar Thingspeak o MQTT
 80014ec:	f7ff ff02 	bl	80012f4 <Uart_flush>
	Uart_sendstring("AT+CIPCLOSE\r\n");
 80014f0:	4804      	ldr	r0, [pc, #16]	@ (8001504 <closeConnection+0x1c>)
 80014f2:	f7ff fe9f 	bl	8001234 <Uart_sendstring>
	HAL_Delay(500);  // Espera 500 ms para asegurar cierre completo
 80014f6:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 80014fa:	f001 fa67 	bl	80029cc <HAL_Delay>
}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	08008fb0 	.word	0x08008fb0

08001508 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001508:	b580      	push	{r7, lr}
 800150a:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN 1 */
	lastTimeMeasurement = HAL_GetTick();
 800150c:	f001 fa52 	bl	80029b4 <HAL_GetTick>
 8001510:	4603      	mov	r3, r0
 8001512:	4a9e      	ldr	r2, [pc, #632]	@ (800178c <main+0x284>)
 8001514:	6013      	str	r3, [r2, #0]
	lastThingSpeakSend = HAL_GetTick();
 8001516:	f001 fa4d 	bl	80029b4 <HAL_GetTick>
 800151a:	4603      	mov	r3, r0
 800151c:	4a9c      	ldr	r2, [pc, #624]	@ (8001790 <main+0x288>)
 800151e:	6013      	str	r3, [r2, #0]
	lastRpiSend = HAL_GetTick();
 8001520:	f001 fa48 	bl	80029b4 <HAL_GetTick>
 8001524:	4603      	mov	r3, r0
 8001526:	4a9b      	ldr	r2, [pc, #620]	@ (8001794 <main+0x28c>)
 8001528:	6013      	str	r3, [r2, #0]
	tsStart = 0;
 800152a:	4b9b      	ldr	r3, [pc, #620]	@ (8001798 <main+0x290>)
 800152c:	2200      	movs	r2, #0
 800152e:	601a      	str	r2, [r3, #0]
	rpiStart = 0;
 8001530:	4b9a      	ldr	r3, [pc, #616]	@ (800179c <main+0x294>)
 8001532:	2200      	movs	r2, #0
 8001534:	601a      	str	r2, [r3, #0]
	nextThingSpeakSend = 30000;
 8001536:	4b9a      	ldr	r3, [pc, #616]	@ (80017a0 <main+0x298>)
 8001538:	f247 5230 	movw	r2, #30000	@ 0x7530
 800153c:	601a      	str	r2, [r3, #0]
	nextRpiSend = 60000;
 800153e:	4b99      	ldr	r3, [pc, #612]	@ (80017a4 <main+0x29c>)
 8001540:	f64e 2260 	movw	r2, #60000	@ 0xea60
 8001544:	601a      	str	r2, [r3, #0]
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001546:	f001 f9cf 	bl	80028e8 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800154a:	f000 f9ab 	bl	80018a4 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 800154e:	f000 fa99 	bl	8001a84 <MX_GPIO_Init>
  MX_USART6_UART_Init();
 8001552:	f000 fa6d 	bl	8001a30 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8001556:	f000 fa0f 	bl	8001978 <MX_I2C1_Init>
  MX_I2C2_Init();
 800155a:	f000 fa3b 	bl	80019d4 <MX_I2C2_Init>
//
//  HAL_UART_Transmit(&huart6, (uint8_t *) text, 4, HAL_MAX_DELAY);
//  HAL_UART_Receive(&huart6, (uint8_t *) textrc, 15, 100);


  ESP_Init("MOVISTAR_1DD2", "55253A2D16DDBF32D47B", "192.168.1.222");
 800155e:	4a92      	ldr	r2, [pc, #584]	@ (80017a8 <main+0x2a0>)
 8001560:	4992      	ldr	r1, [pc, #584]	@ (80017ac <main+0x2a4>)
 8001562:	4893      	ldr	r0, [pc, #588]	@ (80017b0 <main+0x2a8>)
 8001564:	f7ff fd0e 	bl	8000f84 <ESP_Init>

  // ----------------- SENSORS -----------------
  SHT85_Init();
 8001568:	f000 fd10 	bl	8001f8c <SHT85_Init>
  HAL_Delay(500);
 800156c:	f44f 70fa 	mov.w	r0, #500	@ 0x1f4
 8001570:	f001 fa2c 	bl	80029cc <HAL_Delay>
  VEML7700_Init();
 8001574:	f001 f83c 	bl	80025f0 <VEML7700_Init>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1)
  {
	  currentTick = HAL_GetTick();
 8001578:	f001 fa1c 	bl	80029b4 <HAL_GetTick>
 800157c:	4603      	mov	r3, r0
 800157e:	4a8d      	ldr	r2, [pc, #564]	@ (80017b4 <main+0x2ac>)
 8001580:	6013      	str	r3, [r2, #0]

	  // ----------------- SENSORS -----------------
	  if (currentTick - lastTimeMeasurement >= MEASUREMENT_INTERVAL) {
 8001582:	4b8c      	ldr	r3, [pc, #560]	@ (80017b4 <main+0x2ac>)
 8001584:	681a      	ldr	r2, [r3, #0]
 8001586:	4b81      	ldr	r3, [pc, #516]	@ (800178c <main+0x284>)
 8001588:	681b      	ldr	r3, [r3, #0]
 800158a:	1ad3      	subs	r3, r2, r3
 800158c:	f5b3 7f7a 	cmp.w	r3, #1000	@ 0x3e8
 8001590:	d335      	bcc.n	80015fe <main+0xf6>
//		  lastTimeMeasurement += MEASUREMENT_INTERVAL; // Incrementar en lugar de reiniciar
		  lastTimeMeasurement = currentTick;
 8001592:	4b88      	ldr	r3, [pc, #544]	@ (80017b4 <main+0x2ac>)
 8001594:	681b      	ldr	r3, [r3, #0]
 8001596:	4a7d      	ldr	r2, [pc, #500]	@ (800178c <main+0x284>)
 8001598:	6013      	str	r3, [r2, #0]

		  SHT85_ReadSingleShot(&temperature, &humidity);
 800159a:	4987      	ldr	r1, [pc, #540]	@ (80017b8 <main+0x2b0>)
 800159c:	4887      	ldr	r0, [pc, #540]	@ (80017bc <main+0x2b4>)
 800159e:	f000 fd35 	bl	800200c <SHT85_ReadSingleShot>
		  SHT85_ErrorReset(&temperature, &humidity);
 80015a2:	4985      	ldr	r1, [pc, #532]	@ (80017b8 <main+0x2b0>)
 80015a4:	4885      	ldr	r0, [pc, #532]	@ (80017bc <main+0x2b4>)
 80015a6:	f000 fdb7 	bl	8002118 <SHT85_ErrorReset>
		  averageTemperature += temperature;
 80015aa:	4b85      	ldr	r3, [pc, #532]	@ (80017c0 <main+0x2b8>)
 80015ac:	ed93 7a00 	vldr	s14, [r3]
 80015b0:	4b82      	ldr	r3, [pc, #520]	@ (80017bc <main+0x2b4>)
 80015b2:	edd3 7a00 	vldr	s15, [r3]
 80015b6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ba:	4b81      	ldr	r3, [pc, #516]	@ (80017c0 <main+0x2b8>)
 80015bc:	edc3 7a00 	vstr	s15, [r3]
		  averageHumidity += humidity;
 80015c0:	4b80      	ldr	r3, [pc, #512]	@ (80017c4 <main+0x2bc>)
 80015c2:	ed93 7a00 	vldr	s14, [r3]
 80015c6:	4b7c      	ldr	r3, [pc, #496]	@ (80017b8 <main+0x2b0>)
 80015c8:	edd3 7a00 	vldr	s15, [r3]
 80015cc:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015d0:	4b7c      	ldr	r3, [pc, #496]	@ (80017c4 <main+0x2bc>)
 80015d2:	edc3 7a00 	vstr	s15, [r3]

		  ReadVEML7700(&luminosity);
 80015d6:	487c      	ldr	r0, [pc, #496]	@ (80017c8 <main+0x2c0>)
 80015d8:	f001 f826 	bl	8002628 <ReadVEML7700>
		  averageLuminosity += luminosity;
 80015dc:	4b7b      	ldr	r3, [pc, #492]	@ (80017cc <main+0x2c4>)
 80015de:	ed93 7a00 	vldr	s14, [r3]
 80015e2:	4b79      	ldr	r3, [pc, #484]	@ (80017c8 <main+0x2c0>)
 80015e4:	edd3 7a00 	vldr	s15, [r3]
 80015e8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80015ec:	4b77      	ldr	r3, [pc, #476]	@ (80017cc <main+0x2c4>)
 80015ee:	edc3 7a00 	vstr	s15, [r3]
		  countAverage++;
 80015f2:	4b77      	ldr	r3, [pc, #476]	@ (80017d0 <main+0x2c8>)
 80015f4:	781b      	ldrb	r3, [r3, #0]
 80015f6:	3301      	adds	r3, #1
 80015f8:	b2da      	uxtb	r2, r3
 80015fa:	4b75      	ldr	r3, [pc, #468]	@ (80017d0 <main+0x2c8>)
 80015fc:	701a      	strb	r2, [r3, #0]

	  // ----------------- THINGSPEAK + MQTT RASPBERRY -----------------
//	  if (activeTask == TASK_IDLE && currentTick - lastThingSpeakSend >= SEND_THINGSPEAK_INTERVAL) {
//	      lastThingSpeakSend += SEND_THINGSPEAK_INTERVAL;

	  if (activeTask == TASK_IDLE && currentTick >= nextThingSpeakSend) {
 80015fe:	4b75      	ldr	r3, [pc, #468]	@ (80017d4 <main+0x2cc>)
 8001600:	781b      	ldrb	r3, [r3, #0]
 8001602:	2b00      	cmp	r3, #0
 8001604:	d16f      	bne.n	80016e6 <main+0x1de>
 8001606:	4b6b      	ldr	r3, [pc, #428]	@ (80017b4 <main+0x2ac>)
 8001608:	681a      	ldr	r2, [r3, #0]
 800160a:	4b65      	ldr	r3, [pc, #404]	@ (80017a0 <main+0x298>)
 800160c:	681b      	ldr	r3, [r3, #0]
 800160e:	429a      	cmp	r2, r3
 8001610:	d369      	bcc.n	80016e6 <main+0x1de>
	      nextThingSpeakSend += SEND_THINGSPEAK_INTERVAL;
 8001612:	4b63      	ldr	r3, [pc, #396]	@ (80017a0 <main+0x298>)
 8001614:	681b      	ldr	r3, [r3, #0]
 8001616:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 800161a:	3360      	adds	r3, #96	@ 0x60
 800161c:	4a60      	ldr	r2, [pc, #384]	@ (80017a0 <main+0x298>)
 800161e:	6013      	str	r3, [r2, #0]
	      lastThingSpeakSend = currentTick;	// Actualiza el tiempo del ultimo envio (opcional)
 8001620:	4b64      	ldr	r3, [pc, #400]	@ (80017b4 <main+0x2ac>)
 8001622:	681b      	ldr	r3, [r3, #0]
 8001624:	4a5a      	ldr	r2, [pc, #360]	@ (8001790 <main+0x288>)
 8001626:	6013      	str	r3, [r2, #0]

	      // Calcular promedios
	      if(countAverage == 0) {
 8001628:	4b69      	ldr	r3, [pc, #420]	@ (80017d0 <main+0x2c8>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	2b00      	cmp	r3, #0
 800162e:	d10c      	bne.n	800164a <main+0x142>
			  averageTemperature = temperature;
 8001630:	4b62      	ldr	r3, [pc, #392]	@ (80017bc <main+0x2b4>)
 8001632:	681b      	ldr	r3, [r3, #0]
 8001634:	4a62      	ldr	r2, [pc, #392]	@ (80017c0 <main+0x2b8>)
 8001636:	6013      	str	r3, [r2, #0]
			  averageHumidity = humidity;
 8001638:	4b5f      	ldr	r3, [pc, #380]	@ (80017b8 <main+0x2b0>)
 800163a:	681b      	ldr	r3, [r3, #0]
 800163c:	4a61      	ldr	r2, [pc, #388]	@ (80017c4 <main+0x2bc>)
 800163e:	6013      	str	r3, [r2, #0]
			  averageLuminosity = luminosity;
 8001640:	4b61      	ldr	r3, [pc, #388]	@ (80017c8 <main+0x2c0>)
 8001642:	681b      	ldr	r3, [r3, #0]
 8001644:	4a61      	ldr	r2, [pc, #388]	@ (80017cc <main+0x2c4>)
 8001646:	6013      	str	r3, [r2, #0]
 8001648:	e029      	b.n	800169e <main+0x196>
		  } else {
			  averageTemperature = averageTemperature/countAverage;
 800164a:	4b5d      	ldr	r3, [pc, #372]	@ (80017c0 <main+0x2b8>)
 800164c:	edd3 6a00 	vldr	s13, [r3]
 8001650:	4b5f      	ldr	r3, [pc, #380]	@ (80017d0 <main+0x2c8>)
 8001652:	781b      	ldrb	r3, [r3, #0]
 8001654:	ee07 3a90 	vmov	s15, r3
 8001658:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800165c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001660:	4b57      	ldr	r3, [pc, #348]	@ (80017c0 <main+0x2b8>)
 8001662:	edc3 7a00 	vstr	s15, [r3]
			  averageHumidity = averageHumidity/countAverage;
 8001666:	4b57      	ldr	r3, [pc, #348]	@ (80017c4 <main+0x2bc>)
 8001668:	edd3 6a00 	vldr	s13, [r3]
 800166c:	4b58      	ldr	r3, [pc, #352]	@ (80017d0 <main+0x2c8>)
 800166e:	781b      	ldrb	r3, [r3, #0]
 8001670:	ee07 3a90 	vmov	s15, r3
 8001674:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001678:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800167c:	4b51      	ldr	r3, [pc, #324]	@ (80017c4 <main+0x2bc>)
 800167e:	edc3 7a00 	vstr	s15, [r3]
			  averageLuminosity = averageLuminosity/countAverage;
 8001682:	4b52      	ldr	r3, [pc, #328]	@ (80017cc <main+0x2c4>)
 8001684:	edd3 6a00 	vldr	s13, [r3]
 8001688:	4b51      	ldr	r3, [pc, #324]	@ (80017d0 <main+0x2c8>)
 800168a:	781b      	ldrb	r3, [r3, #0]
 800168c:	ee07 3a90 	vmov	s15, r3
 8001690:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001694:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001698:	4b4c      	ldr	r3, [pc, #304]	@ (80017cc <main+0x2c4>)
 800169a:	edc3 7a00 	vstr	s15, [r3]
		  }
	      sendDataToThingSpeak(THINGSPEAK_API_KEY, temperature, humidity, luminosity);
 800169e:	4b47      	ldr	r3, [pc, #284]	@ (80017bc <main+0x2b4>)
 80016a0:	edd3 7a00 	vldr	s15, [r3]
 80016a4:	4b44      	ldr	r3, [pc, #272]	@ (80017b8 <main+0x2b0>)
 80016a6:	ed93 7a00 	vldr	s14, [r3]
 80016aa:	4b47      	ldr	r3, [pc, #284]	@ (80017c8 <main+0x2c0>)
 80016ac:	edd3 6a00 	vldr	s13, [r3]
 80016b0:	eeb0 1a66 	vmov.f32	s2, s13
 80016b4:	eef0 0a47 	vmov.f32	s1, s14
 80016b8:	eeb0 0a67 	vmov.f32	s0, s15
 80016bc:	4846      	ldr	r0, [pc, #280]	@ (80017d8 <main+0x2d0>)
 80016be:	f000 fff3 	bl	80026a8 <sendDataToThingSpeak>
		  averageTemperature = 0.0f;
 80016c2:	4b3f      	ldr	r3, [pc, #252]	@ (80017c0 <main+0x2b8>)
 80016c4:	f04f 0200 	mov.w	r2, #0
 80016c8:	601a      	str	r2, [r3, #0]
		  averageHumidity = 0.0f;
 80016ca:	4b3e      	ldr	r3, [pc, #248]	@ (80017c4 <main+0x2bc>)
 80016cc:	f04f 0200 	mov.w	r2, #0
 80016d0:	601a      	str	r2, [r3, #0]
		  averageLuminosity = 0.0f;
 80016d2:	4b3e      	ldr	r3, [pc, #248]	@ (80017cc <main+0x2c4>)
 80016d4:	f04f 0200 	mov.w	r2, #0
 80016d8:	601a      	str	r2, [r3, #0]
		  countAverage = 0;
 80016da:	4b3d      	ldr	r3, [pc, #244]	@ (80017d0 <main+0x2c8>)
 80016dc:	2200      	movs	r2, #0
 80016de:	701a      	strb	r2, [r3, #0]

	      activeTask = TASK_THINGSPEAK;
 80016e0:	4b3c      	ldr	r3, [pc, #240]	@ (80017d4 <main+0x2cc>)
 80016e2:	2201      	movs	r2, #1
 80016e4:	701a      	strb	r2, [r3, #0]
	  }

	  // Ejecutar la máquina que esté activa. Evita bloques en las máquinas de estado
	  if (activeTask == TASK_THINGSPEAK) {
 80016e6:	4b3b      	ldr	r3, [pc, #236]	@ (80017d4 <main+0x2cc>)
 80016e8:	781b      	ldrb	r3, [r3, #0]
 80016ea:	2b01      	cmp	r3, #1
 80016ec:	d17a      	bne.n	80017e4 <main+0x2dc>
	      if (thingSpeakState != 0 && tsStart == 0)		// Empieza maquina estados
 80016ee:	4b3b      	ldr	r3, [pc, #236]	@ (80017dc <main+0x2d4>)
 80016f0:	781b      	ldrb	r3, [r3, #0]
 80016f2:	2b00      	cmp	r3, #0
 80016f4:	d008      	beq.n	8001708 <main+0x200>
 80016f6:	4b28      	ldr	r3, [pc, #160]	@ (8001798 <main+0x290>)
 80016f8:	681b      	ldr	r3, [r3, #0]
 80016fa:	2b00      	cmp	r3, #0
 80016fc:	d104      	bne.n	8001708 <main+0x200>
	    	  tsStart = HAL_GetTick();
 80016fe:	f001 f959 	bl	80029b4 <HAL_GetTick>
 8001702:	4603      	mov	r3, r0
 8001704:	4a24      	ldr	r2, [pc, #144]	@ (8001798 <main+0x290>)
 8001706:	6013      	str	r3, [r2, #0]

	      processThingSpeakStateMachine();
 8001708:	f000 fff8 	bl	80026fc <processThingSpeakStateMachine>

	      if (thingSpeakState == 0) {
 800170c:	4b33      	ldr	r3, [pc, #204]	@ (80017dc <main+0x2d4>)
 800170e:	781b      	ldrb	r3, [r3, #0]
 8001710:	2b00      	cmp	r3, #0
 8001712:	d12c      	bne.n	800176e <main+0x266>
	          tsStart = 0;  // reiniciar si finaliza bien
 8001714:	4b20      	ldr	r3, [pc, #128]	@ (8001798 <main+0x290>)
 8001716:	2200      	movs	r2, #0
 8001718:	601a      	str	r2, [r3, #0]
	          if(currentTick >= nextRpiSend){
 800171a:	4b26      	ldr	r3, [pc, #152]	@ (80017b4 <main+0x2ac>)
 800171c:	681a      	ldr	r2, [r3, #0]
 800171e:	4b21      	ldr	r3, [pc, #132]	@ (80017a4 <main+0x29c>)
 8001720:	681b      	ldr	r3, [r3, #0]
 8001722:	429a      	cmp	r2, r3
 8001724:	f0c0 8089 	bcc.w	800183a <main+0x332>
				  nextRpiSend += SEND_RASPBERRY_INTERVAL;
 8001728:	4b1e      	ldr	r3, [pc, #120]	@ (80017a4 <main+0x29c>)
 800172a:	681b      	ldr	r3, [r3, #0]
 800172c:	f503 436a 	add.w	r3, r3, #59904	@ 0xea00
 8001730:	3360      	adds	r3, #96	@ 0x60
 8001732:	4a1c      	ldr	r2, [pc, #112]	@ (80017a4 <main+0x29c>)
 8001734:	6013      	str	r3, [r2, #0]
				  lastRpiSend = nextRpiSend - SEND_RASPBERRY_INTERVAL;	// Actualiza el tiempo del ultimo envio (opcional)
 8001736:	4b1b      	ldr	r3, [pc, #108]	@ (80017a4 <main+0x29c>)
 8001738:	681b      	ldr	r3, [r3, #0]
 800173a:	f5a3 436a 	sub.w	r3, r3, #59904	@ 0xea00
 800173e:	3b60      	subs	r3, #96	@ 0x60
 8001740:	4a14      	ldr	r2, [pc, #80]	@ (8001794 <main+0x28c>)
 8001742:	6013      	str	r3, [r2, #0]
				  sendDataToRpi(temperature, humidity, luminosity);
 8001744:	4b1d      	ldr	r3, [pc, #116]	@ (80017bc <main+0x2b4>)
 8001746:	edd3 7a00 	vldr	s15, [r3]
 800174a:	4b1b      	ldr	r3, [pc, #108]	@ (80017b8 <main+0x2b0>)
 800174c:	ed93 7a00 	vldr	s14, [r3]
 8001750:	4b1d      	ldr	r3, [pc, #116]	@ (80017c8 <main+0x2c0>)
 8001752:	edd3 6a00 	vldr	s13, [r3]
 8001756:	eeb0 1a66 	vmov.f32	s2, s13
 800175a:	eef0 0a47 	vmov.f32	s1, s14
 800175e:	eeb0 0a67 	vmov.f32	s0, s15
 8001762:	f000 f9cd 	bl	8001b00 <sendDataToRpi>
				  activeTask = TASK_RPI;
 8001766:	4b1b      	ldr	r3, [pc, #108]	@ (80017d4 <main+0x2cc>)
 8001768:	2202      	movs	r2, #2
 800176a:	701a      	strb	r2, [r3, #0]
 800176c:	e065      	b.n	800183a <main+0x332>
	          }

	      } else if ((HAL_GetTick() - tsStart) > ANTIBLOCK_STATE_MACHINE) {
 800176e:	f001 f921 	bl	80029b4 <HAL_GetTick>
 8001772:	4602      	mov	r2, r0
 8001774:	4b08      	ldr	r3, [pc, #32]	@ (8001798 <main+0x290>)
 8001776:	681b      	ldr	r3, [r3, #0]
 8001778:	1ad3      	subs	r3, r2, r3
 800177a:	f242 7210 	movw	r2, #10000	@ 0x2710
 800177e:	4293      	cmp	r3, r2
 8001780:	d95b      	bls.n	800183a <main+0x332>
	          alertaBloqueo = true;
 8001782:	4b17      	ldr	r3, [pc, #92]	@ (80017e0 <main+0x2d8>)
 8001784:	2201      	movs	r2, #1
 8001786:	701a      	strb	r2, [r3, #0]
 8001788:	e057      	b.n	800183a <main+0x332>
 800178a:	bf00      	nop
 800178c:	20000714 	.word	0x20000714
 8001790:	20000718 	.word	0x20000718
 8001794:	2000071c 	.word	0x2000071c
 8001798:	20000730 	.word	0x20000730
 800179c:	20000734 	.word	0x20000734
 80017a0:	20000724 	.word	0x20000724
 80017a4:	20000728 	.word	0x20000728
 80017a8:	08008fc0 	.word	0x08008fc0
 80017ac:	08008fd0 	.word	0x08008fd0
 80017b0:	08008fe8 	.word	0x08008fe8
 80017b4:	2000072c 	.word	0x2000072c
 80017b8:	20000700 	.word	0x20000700
 80017bc:	200006f8 	.word	0x200006f8
 80017c0:	200006fc 	.word	0x200006fc
 80017c4:	20000704 	.word	0x20000704
 80017c8:	20000708 	.word	0x20000708
 80017cc:	2000070c 	.word	0x2000070c
 80017d0:	20000710 	.word	0x20000710
 80017d4:	20000720 	.word	0x20000720
 80017d8:	08008ff8 	.word	0x08008ff8
 80017dc:	2000075a 	.word	0x2000075a
 80017e0:	20000721 	.word	0x20000721
	      }

	  } else if (activeTask == TASK_RPI) {
 80017e4:	4b26      	ldr	r3, [pc, #152]	@ (8001880 <main+0x378>)
 80017e6:	781b      	ldrb	r3, [r3, #0]
 80017e8:	2b02      	cmp	r3, #2
 80017ea:	d126      	bne.n	800183a <main+0x332>
	      if (rpiState != 0 && rpiStart == 0)		// Empieza maquina estados
 80017ec:	4b25      	ldr	r3, [pc, #148]	@ (8001884 <main+0x37c>)
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	2b00      	cmp	r3, #0
 80017f2:	d008      	beq.n	8001806 <main+0x2fe>
 80017f4:	4b24      	ldr	r3, [pc, #144]	@ (8001888 <main+0x380>)
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	2b00      	cmp	r3, #0
 80017fa:	d104      	bne.n	8001806 <main+0x2fe>
	          rpiStart = HAL_GetTick();
 80017fc:	f001 f8da 	bl	80029b4 <HAL_GetTick>
 8001800:	4603      	mov	r3, r0
 8001802:	4a21      	ldr	r2, [pc, #132]	@ (8001888 <main+0x380>)
 8001804:	6013      	str	r3, [r2, #0]

	      processRpiStateMachine();
 8001806:	f000 fb35 	bl	8001e74 <processRpiStateMachine>

	      if (rpiState == 0) {
 800180a:	4b1e      	ldr	r3, [pc, #120]	@ (8001884 <main+0x37c>)
 800180c:	781b      	ldrb	r3, [r3, #0]
 800180e:	2b00      	cmp	r3, #0
 8001810:	d106      	bne.n	8001820 <main+0x318>
	          rpiStart = 0;
 8001812:	4b1d      	ldr	r3, [pc, #116]	@ (8001888 <main+0x380>)
 8001814:	2200      	movs	r2, #0
 8001816:	601a      	str	r2, [r3, #0]
	          activeTask = TASK_IDLE;
 8001818:	4b19      	ldr	r3, [pc, #100]	@ (8001880 <main+0x378>)
 800181a:	2200      	movs	r2, #0
 800181c:	701a      	strb	r2, [r3, #0]
 800181e:	e00c      	b.n	800183a <main+0x332>
	      } else if ((HAL_GetTick() - rpiStart) > ANTIBLOCK_STATE_MACHINE) {
 8001820:	f001 f8c8 	bl	80029b4 <HAL_GetTick>
 8001824:	4602      	mov	r2, r0
 8001826:	4b18      	ldr	r3, [pc, #96]	@ (8001888 <main+0x380>)
 8001828:	681b      	ldr	r3, [r3, #0]
 800182a:	1ad3      	subs	r3, r2, r3
 800182c:	f242 7210 	movw	r2, #10000	@ 0x2710
 8001830:	4293      	cmp	r3, r2
 8001832:	d902      	bls.n	800183a <main+0x332>
	          alertaBloqueo = true;
 8001834:	4b15      	ldr	r3, [pc, #84]	@ (800188c <main+0x384>)
 8001836:	2201      	movs	r2, #1
 8001838:	701a      	strb	r2, [r3, #0]
	      }
	  }


	  if (alertaBloqueo) {
 800183a:	4b14      	ldr	r3, [pc, #80]	@ (800188c <main+0x384>)
 800183c:	781b      	ldrb	r3, [r3, #0]
 800183e:	b2db      	uxtb	r3, r3
 8001840:	2b00      	cmp	r3, #0
 8001842:	f43f ae99 	beq.w	8001578 <main+0x70>
	      // 1. Resetear variables de estado
	      thingSpeakState = 0;
 8001846:	4b12      	ldr	r3, [pc, #72]	@ (8001890 <main+0x388>)
 8001848:	2200      	movs	r2, #0
 800184a:	701a      	strb	r2, [r3, #0]
	      rpiState = 0;
 800184c:	4b0d      	ldr	r3, [pc, #52]	@ (8001884 <main+0x37c>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
	      activeTask = TASK_IDLE;
 8001852:	4b0b      	ldr	r3, [pc, #44]	@ (8001880 <main+0x378>)
 8001854:	2200      	movs	r2, #0
 8001856:	701a      	strb	r2, [r3, #0]

	      // 2. Limpiar buffers UART
	      Uart_flush();
 8001858:	f7ff fd4c 	bl	80012f4 <Uart_flush>
	      Uart_clear();
 800185c:	f7ff fd5e 	bl	800131c <Uart_clear>

	      ESP_Init("MOVISTAR_1DD2", "55253A2D16DDBF32D47B", "192.168.1.222");
 8001860:	4a0c      	ldr	r2, [pc, #48]	@ (8001894 <main+0x38c>)
 8001862:	490d      	ldr	r1, [pc, #52]	@ (8001898 <main+0x390>)
 8001864:	480d      	ldr	r0, [pc, #52]	@ (800189c <main+0x394>)
 8001866:	f7ff fb8d 	bl	8000f84 <ESP_Init>

	      // 5. Reset de flags y temporizadores
	      alertaBloqueo = false;
 800186a:	4b08      	ldr	r3, [pc, #32]	@ (800188c <main+0x384>)
 800186c:	2200      	movs	r2, #0
 800186e:	701a      	strb	r2, [r3, #0]
	      tsStart = 0;
 8001870:	4b0b      	ldr	r3, [pc, #44]	@ (80018a0 <main+0x398>)
 8001872:	2200      	movs	r2, #0
 8001874:	601a      	str	r2, [r3, #0]
	      rpiStart = 0;
 8001876:	4b04      	ldr	r3, [pc, #16]	@ (8001888 <main+0x380>)
 8001878:	2200      	movs	r2, #0
 800187a:	601a      	str	r2, [r3, #0]
	  currentTick = HAL_GetTick();
 800187c:	e67c      	b.n	8001578 <main+0x70>
 800187e:	bf00      	nop
 8001880:	20000720 	.word	0x20000720
 8001884:	20000738 	.word	0x20000738
 8001888:	20000734 	.word	0x20000734
 800188c:	20000721 	.word	0x20000721
 8001890:	2000075a 	.word	0x2000075a
 8001894:	08008fc0 	.word	0x08008fc0
 8001898:	08008fd0 	.word	0x08008fd0
 800189c:	08008fe8 	.word	0x08008fe8
 80018a0:	20000730 	.word	0x20000730

080018a4 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 80018a4:	b580      	push	{r7, lr}
 80018a6:	b094      	sub	sp, #80	@ 0x50
 80018a8:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 80018aa:	f107 0320 	add.w	r3, r7, #32
 80018ae:	2230      	movs	r2, #48	@ 0x30
 80018b0:	2100      	movs	r1, #0
 80018b2:	4618      	mov	r0, r3
 80018b4:	f005 faea 	bl	8006e8c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80018b8:	f107 030c 	add.w	r3, r7, #12
 80018bc:	2200      	movs	r2, #0
 80018be:	601a      	str	r2, [r3, #0]
 80018c0:	605a      	str	r2, [r3, #4]
 80018c2:	609a      	str	r2, [r3, #8]
 80018c4:	60da      	str	r2, [r3, #12]
 80018c6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80018c8:	2300      	movs	r3, #0
 80018ca:	60bb      	str	r3, [r7, #8]
 80018cc:	4b28      	ldr	r3, [pc, #160]	@ (8001970 <SystemClock_Config+0xcc>)
 80018ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018d0:	4a27      	ldr	r2, [pc, #156]	@ (8001970 <SystemClock_Config+0xcc>)
 80018d2:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80018d6:	6413      	str	r3, [r2, #64]	@ 0x40
 80018d8:	4b25      	ldr	r3, [pc, #148]	@ (8001970 <SystemClock_Config+0xcc>)
 80018da:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80018dc:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80018e0:	60bb      	str	r3, [r7, #8]
 80018e2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80018e4:	2300      	movs	r3, #0
 80018e6:	607b      	str	r3, [r7, #4]
 80018e8:	4b22      	ldr	r3, [pc, #136]	@ (8001974 <SystemClock_Config+0xd0>)
 80018ea:	681b      	ldr	r3, [r3, #0]
 80018ec:	4a21      	ldr	r2, [pc, #132]	@ (8001974 <SystemClock_Config+0xd0>)
 80018ee:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 80018f2:	6013      	str	r3, [r2, #0]
 80018f4:	4b1f      	ldr	r3, [pc, #124]	@ (8001974 <SystemClock_Config+0xd0>)
 80018f6:	681b      	ldr	r3, [r3, #0]
 80018f8:	f403 4340 	and.w	r3, r3, #49152	@ 0xc000
 80018fc:	607b      	str	r3, [r7, #4]
 80018fe:	687b      	ldr	r3, [r7, #4]

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSE;
 8001900:	2301      	movs	r3, #1
 8001902:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSEState = RCC_HSE_ON;
 8001904:	f44f 3380 	mov.w	r3, #65536	@ 0x10000
 8001908:	627b      	str	r3, [r7, #36]	@ 0x24
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800190a:	2302      	movs	r3, #2
 800190c:	63bb      	str	r3, [r7, #56]	@ 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSE;
 800190e:	f44f 0380 	mov.w	r3, #4194304	@ 0x400000
 8001912:	63fb      	str	r3, [r7, #60]	@ 0x3c
  RCC_OscInitStruct.PLL.PLLM = 4;
 8001914:	2304      	movs	r3, #4
 8001916:	643b      	str	r3, [r7, #64]	@ 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001918:	2364      	movs	r3, #100	@ 0x64
 800191a:	647b      	str	r3, [r7, #68]	@ 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800191c:	2302      	movs	r3, #2
 800191e:	64bb      	str	r3, [r7, #72]	@ 0x48
  RCC_OscInitStruct.PLL.PLLQ = 8;
 8001920:	2308      	movs	r3, #8
 8001922:	64fb      	str	r3, [r7, #76]	@ 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001924:	f107 0320 	add.w	r3, r7, #32
 8001928:	4618      	mov	r0, r3
 800192a:	f003 f83f 	bl	80049ac <HAL_RCC_OscConfig>
 800192e:	4603      	mov	r3, r0
 8001930:	2b00      	cmp	r3, #0
 8001932:	d001      	beq.n	8001938 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001934:	f000 f8dc 	bl	8001af0 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001938:	230f      	movs	r3, #15
 800193a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800193c:	2302      	movs	r3, #2
 800193e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001940:	2300      	movs	r3, #0
 8001942:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001944:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 8001948:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV2;
 800194a:	f44f 5380 	mov.w	r3, #4096	@ 0x1000
 800194e:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001950:	f107 030c 	add.w	r3, r7, #12
 8001954:	2103      	movs	r1, #3
 8001956:	4618      	mov	r0, r3
 8001958:	f003 faa0 	bl	8004e9c <HAL_RCC_ClockConfig>
 800195c:	4603      	mov	r3, r0
 800195e:	2b00      	cmp	r3, #0
 8001960:	d001      	beq.n	8001966 <SystemClock_Config+0xc2>
  {
    Error_Handler();
 8001962:	f000 f8c5 	bl	8001af0 <Error_Handler>
  }
}
 8001966:	bf00      	nop
 8001968:	3750      	adds	r7, #80	@ 0x50
 800196a:	46bd      	mov	sp, r7
 800196c:	bd80      	pop	{r7, pc}
 800196e:	bf00      	nop
 8001970:	40023800 	.word	0x40023800
 8001974:	40007000 	.word	0x40007000

08001978 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001978:	b580      	push	{r7, lr}
 800197a:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 800197c:	4b12      	ldr	r3, [pc, #72]	@ (80019c8 <MX_I2C1_Init+0x50>)
 800197e:	4a13      	ldr	r2, [pc, #76]	@ (80019cc <MX_I2C1_Init+0x54>)
 8001980:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001982:	4b11      	ldr	r3, [pc, #68]	@ (80019c8 <MX_I2C1_Init+0x50>)
 8001984:	4a12      	ldr	r2, [pc, #72]	@ (80019d0 <MX_I2C1_Init+0x58>)
 8001986:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001988:	4b0f      	ldr	r3, [pc, #60]	@ (80019c8 <MX_I2C1_Init+0x50>)
 800198a:	2200      	movs	r2, #0
 800198c:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800198e:	4b0e      	ldr	r3, [pc, #56]	@ (80019c8 <MX_I2C1_Init+0x50>)
 8001990:	2200      	movs	r2, #0
 8001992:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001994:	4b0c      	ldr	r3, [pc, #48]	@ (80019c8 <MX_I2C1_Init+0x50>)
 8001996:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 800199a:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800199c:	4b0a      	ldr	r3, [pc, #40]	@ (80019c8 <MX_I2C1_Init+0x50>)
 800199e:	2200      	movs	r2, #0
 80019a0:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 80019a2:	4b09      	ldr	r3, [pc, #36]	@ (80019c8 <MX_I2C1_Init+0x50>)
 80019a4:	2200      	movs	r2, #0
 80019a6:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 80019a8:	4b07      	ldr	r3, [pc, #28]	@ (80019c8 <MX_I2C1_Init+0x50>)
 80019aa:	2200      	movs	r2, #0
 80019ac:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 80019ae:	4b06      	ldr	r3, [pc, #24]	@ (80019c8 <MX_I2C1_Init+0x50>)
 80019b0:	2200      	movs	r2, #0
 80019b2:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80019b4:	4804      	ldr	r0, [pc, #16]	@ (80019c8 <MX_I2C1_Init+0x50>)
 80019b6:	f001 fb55 	bl	8003064 <HAL_I2C_Init>
 80019ba:	4603      	mov	r3, r0
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d001      	beq.n	80019c4 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80019c0:	f000 f896 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80019c4:	bf00      	nop
 80019c6:	bd80      	pop	{r7, pc}
 80019c8:	20000608 	.word	0x20000608
 80019cc:	40005400 	.word	0x40005400
 80019d0:	000186a0 	.word	0x000186a0

080019d4 <MX_I2C2_Init>:
  * @brief I2C2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C2_Init(void)
{
 80019d4:	b580      	push	{r7, lr}
 80019d6:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 80019d8:	4b12      	ldr	r3, [pc, #72]	@ (8001a24 <MX_I2C2_Init+0x50>)
 80019da:	4a13      	ldr	r2, [pc, #76]	@ (8001a28 <MX_I2C2_Init+0x54>)
 80019dc:	601a      	str	r2, [r3, #0]
  hi2c2.Init.ClockSpeed = 100000;
 80019de:	4b11      	ldr	r3, [pc, #68]	@ (8001a24 <MX_I2C2_Init+0x50>)
 80019e0:	4a12      	ldr	r2, [pc, #72]	@ (8001a2c <MX_I2C2_Init+0x58>)
 80019e2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80019e4:	4b0f      	ldr	r3, [pc, #60]	@ (8001a24 <MX_I2C2_Init+0x50>)
 80019e6:	2200      	movs	r2, #0
 80019e8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.OwnAddress1 = 0;
 80019ea:	4b0e      	ldr	r3, [pc, #56]	@ (8001a24 <MX_I2C2_Init+0x50>)
 80019ec:	2200      	movs	r2, #0
 80019ee:	60da      	str	r2, [r3, #12]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 80019f0:	4b0c      	ldr	r3, [pc, #48]	@ (8001a24 <MX_I2C2_Init+0x50>)
 80019f2:	f44f 4280 	mov.w	r2, #16384	@ 0x4000
 80019f6:	611a      	str	r2, [r3, #16]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 80019f8:	4b0a      	ldr	r3, [pc, #40]	@ (8001a24 <MX_I2C2_Init+0x50>)
 80019fa:	2200      	movs	r2, #0
 80019fc:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2 = 0;
 80019fe:	4b09      	ldr	r3, [pc, #36]	@ (8001a24 <MX_I2C2_Init+0x50>)
 8001a00:	2200      	movs	r2, #0
 8001a02:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001a04:	4b07      	ldr	r3, [pc, #28]	@ (8001a24 <MX_I2C2_Init+0x50>)
 8001a06:	2200      	movs	r2, #0
 8001a08:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001a0a:	4b06      	ldr	r3, [pc, #24]	@ (8001a24 <MX_I2C2_Init+0x50>)
 8001a0c:	2200      	movs	r2, #0
 8001a0e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8001a10:	4804      	ldr	r0, [pc, #16]	@ (8001a24 <MX_I2C2_Init+0x50>)
 8001a12:	f001 fb27 	bl	8003064 <HAL_I2C_Init>
 8001a16:	4603      	mov	r3, r0
 8001a18:	2b00      	cmp	r3, #0
 8001a1a:	d001      	beq.n	8001a20 <MX_I2C2_Init+0x4c>
  {
    Error_Handler();
 8001a1c:	f000 f868 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8001a20:	bf00      	nop
 8001a22:	bd80      	pop	{r7, pc}
 8001a24:	2000065c 	.word	0x2000065c
 8001a28:	40005800 	.word	0x40005800
 8001a2c:	000186a0 	.word	0x000186a0

08001a30 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001a30:	b580      	push	{r7, lr}
 8001a32:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001a34:	4b11      	ldr	r3, [pc, #68]	@ (8001a7c <MX_USART6_UART_Init+0x4c>)
 8001a36:	4a12      	ldr	r2, [pc, #72]	@ (8001a80 <MX_USART6_UART_Init+0x50>)
 8001a38:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001a3a:	4b10      	ldr	r3, [pc, #64]	@ (8001a7c <MX_USART6_UART_Init+0x4c>)
 8001a3c:	f44f 32e1 	mov.w	r2, #115200	@ 0x1c200
 8001a40:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001a42:	4b0e      	ldr	r3, [pc, #56]	@ (8001a7c <MX_USART6_UART_Init+0x4c>)
 8001a44:	2200      	movs	r2, #0
 8001a46:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001a48:	4b0c      	ldr	r3, [pc, #48]	@ (8001a7c <MX_USART6_UART_Init+0x4c>)
 8001a4a:	2200      	movs	r2, #0
 8001a4c:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001a4e:	4b0b      	ldr	r3, [pc, #44]	@ (8001a7c <MX_USART6_UART_Init+0x4c>)
 8001a50:	2200      	movs	r2, #0
 8001a52:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001a54:	4b09      	ldr	r3, [pc, #36]	@ (8001a7c <MX_USART6_UART_Init+0x4c>)
 8001a56:	220c      	movs	r2, #12
 8001a58:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001a5a:	4b08      	ldr	r3, [pc, #32]	@ (8001a7c <MX_USART6_UART_Init+0x4c>)
 8001a5c:	2200      	movs	r2, #0
 8001a5e:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001a60:	4b06      	ldr	r3, [pc, #24]	@ (8001a7c <MX_USART6_UART_Init+0x4c>)
 8001a62:	2200      	movs	r2, #0
 8001a64:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001a66:	4805      	ldr	r0, [pc, #20]	@ (8001a7c <MX_USART6_UART_Init+0x4c>)
 8001a68:	f003 fc38 	bl	80052dc <HAL_UART_Init>
 8001a6c:	4603      	mov	r3, r0
 8001a6e:	2b00      	cmp	r3, #0
 8001a70:	d001      	beq.n	8001a76 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001a72:	f000 f83d 	bl	8001af0 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001a76:	bf00      	nop
 8001a78:	bd80      	pop	{r7, pc}
 8001a7a:	bf00      	nop
 8001a7c:	200006b0 	.word	0x200006b0
 8001a80:	40011400 	.word	0x40011400

08001a84 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 8001a84:	b480      	push	{r7}
 8001a86:	b085      	sub	sp, #20
 8001a88:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MX_GPIO_Init_1 */

  /* USER CODE END MX_GPIO_Init_1 */

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOH_CLK_ENABLE();
 8001a8a:	2300      	movs	r3, #0
 8001a8c:	60fb      	str	r3, [r7, #12]
 8001a8e:	4b17      	ldr	r3, [pc, #92]	@ (8001aec <MX_GPIO_Init+0x68>)
 8001a90:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a92:	4a16      	ldr	r2, [pc, #88]	@ (8001aec <MX_GPIO_Init+0x68>)
 8001a94:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 8001a98:	6313      	str	r3, [r2, #48]	@ 0x30
 8001a9a:	4b14      	ldr	r3, [pc, #80]	@ (8001aec <MX_GPIO_Init+0x68>)
 8001a9c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001a9e:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8001aa2:	60fb      	str	r3, [r7, #12]
 8001aa4:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001aa6:	2300      	movs	r3, #0
 8001aa8:	60bb      	str	r3, [r7, #8]
 8001aaa:	4b10      	ldr	r3, [pc, #64]	@ (8001aec <MX_GPIO_Init+0x68>)
 8001aac:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aae:	4a0f      	ldr	r2, [pc, #60]	@ (8001aec <MX_GPIO_Init+0x68>)
 8001ab0:	f043 0302 	orr.w	r3, r3, #2
 8001ab4:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ab6:	4b0d      	ldr	r3, [pc, #52]	@ (8001aec <MX_GPIO_Init+0x68>)
 8001ab8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aba:	f003 0302 	and.w	r3, r3, #2
 8001abe:	60bb      	str	r3, [r7, #8]
 8001ac0:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8001ac2:	2300      	movs	r3, #0
 8001ac4:	607b      	str	r3, [r7, #4]
 8001ac6:	4b09      	ldr	r3, [pc, #36]	@ (8001aec <MX_GPIO_Init+0x68>)
 8001ac8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001aca:	4a08      	ldr	r2, [pc, #32]	@ (8001aec <MX_GPIO_Init+0x68>)
 8001acc:	f043 0304 	orr.w	r3, r3, #4
 8001ad0:	6313      	str	r3, [r2, #48]	@ 0x30
 8001ad2:	4b06      	ldr	r3, [pc, #24]	@ (8001aec <MX_GPIO_Init+0x68>)
 8001ad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8001ad6:	f003 0304 	and.w	r3, r3, #4
 8001ada:	607b      	str	r3, [r7, #4]
 8001adc:	687b      	ldr	r3, [r7, #4]

  /* USER CODE BEGIN MX_GPIO_Init_2 */

  /* USER CODE END MX_GPIO_Init_2 */
}
 8001ade:	bf00      	nop
 8001ae0:	3714      	adds	r7, #20
 8001ae2:	46bd      	mov	sp, r7
 8001ae4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ae8:	4770      	bx	lr
 8001aea:	bf00      	nop
 8001aec:	40023800 	.word	0x40023800

08001af0 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8001af0:	b480      	push	{r7}
 8001af2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */

  /* USER CODE END Error_Handler_Debug */
}
 8001af4:	bf00      	nop
 8001af6:	46bd      	mov	sp, r7
 8001af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001afc:	4770      	bx	lr
	...

08001b00 <sendDataToRpi>:
volatile uint8_t err = 0;

static float wifiTemperatureRpi = 0, wifiHumidityRpi = 0, wifiLuminosityRpi = 0;


void sendDataToRpi(float t, float h, float l) {
 8001b00:	b580      	push	{r7, lr}
 8001b02:	b084      	sub	sp, #16
 8001b04:	af00      	add	r7, sp, #0
 8001b06:	ed87 0a03 	vstr	s0, [r7, #12]
 8001b0a:	edc7 0a02 	vstr	s1, [r7, #8]
 8001b0e:	ed87 1a01 	vstr	s2, [r7, #4]
	Uart_clear ();
 8001b12:	f7ff fc03 	bl	800131c <Uart_clear>
	wifiTemperatureRpi = t;
 8001b16:	4a08      	ldr	r2, [pc, #32]	@ (8001b38 <sendDataToRpi+0x38>)
 8001b18:	68fb      	ldr	r3, [r7, #12]
 8001b1a:	6013      	str	r3, [r2, #0]
	wifiHumidityRpi = h;
 8001b1c:	4a07      	ldr	r2, [pc, #28]	@ (8001b3c <sendDataToRpi+0x3c>)
 8001b1e:	68bb      	ldr	r3, [r7, #8]
 8001b20:	6013      	str	r3, [r2, #0]
	wifiLuminosityRpi = l;
 8001b22:	4a07      	ldr	r2, [pc, #28]	@ (8001b40 <sendDataToRpi+0x40>)
 8001b24:	687b      	ldr	r3, [r7, #4]
 8001b26:	6013      	str	r3, [r2, #0]
    rpiState = 2;	// Iniciar la máquina de estados
 8001b28:	4b06      	ldr	r3, [pc, #24]	@ (8001b44 <sendDataToRpi+0x44>)
 8001b2a:	2202      	movs	r2, #2
 8001b2c:	701a      	strb	r2, [r3, #0]
}
 8001b2e:	bf00      	nop
 8001b30:	3710      	adds	r7, #16
 8001b32:	46bd      	mov	sp, r7
 8001b34:	bd80      	pop	{r7, pc}
 8001b36:	bf00      	nop
 8001b38:	2000073c 	.word	0x2000073c
 8001b3c:	20000740 	.word	0x20000740
 8001b40:	20000744 	.word	0x20000744
 8001b44:	20000738 	.word	0x20000738

08001b48 <mqtt_send_connect_packet>:

void mqtt_send_connect_packet(void)
{
 8001b48:	b5b0      	push	{r4, r5, r7, lr}
 8001b4a:	b094      	sub	sp, #80	@ 0x50
 8001b4c:	af00      	add	r7, sp, #0
    uint8_t packet[] = {
 8001b4e:	4b1e      	ldr	r3, [pc, #120]	@ (8001bc8 <mqtt_send_connect_packet+0x80>)
 8001b50:	f107 0420 	add.w	r4, r7, #32
 8001b54:	461d      	mov	r5, r3
 8001b56:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b58:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b5a:	cd0f      	ldmia	r5!, {r0, r1, r2, r3}
 8001b5c:	c40f      	stmia	r4!, {r0, r1, r2, r3}
 8001b5e:	e895 000f 	ldmia.w	r5, {r0, r1, r2, r3}
 8001b62:	c407      	stmia	r4!, {r0, r1, r2}
 8001b64:	8023      	strh	r3, [r4, #0]
        't','f','g'
    };

    // 1) AT+CIPSEND con longitud total
    char cmd[32];
    sprintf(cmd, "AT+CIPSEND=%u\r\n", sizeof(packet));
 8001b66:	463b      	mov	r3, r7
 8001b68:	222e      	movs	r2, #46	@ 0x2e
 8001b6a:	4918      	ldr	r1, [pc, #96]	@ (8001bcc <mqtt_send_connect_packet+0x84>)
 8001b6c:	4618      	mov	r0, r3
 8001b6e:	f005 f893 	bl	8006c98 <siprintf>

    Uart_flush();
 8001b72:	f7ff fbbf 	bl	80012f4 <Uart_flush>
    Uart_sendstring(cmd);
 8001b76:	463b      	mov	r3, r7
 8001b78:	4618      	mov	r0, r3
 8001b7a:	f7ff fb5b 	bl	8001234 <Uart_sendstring>

    if (!Wait_for(">")) return;
 8001b7e:	4814      	ldr	r0, [pc, #80]	@ (8001bd0 <mqtt_send_connect_packet+0x88>)
 8001b80:	f7ff fbfe 	bl	8001380 <Wait_for>
 8001b84:	4603      	mov	r3, r0
 8001b86:	2b00      	cmp	r3, #0
 8001b88:	d019      	beq.n	8001bbe <mqtt_send_connect_packet+0x76>

    // 2) Enviar byte a byte
    for (uint16_t i = 0; i < sizeof(packet); i++) {
 8001b8a:	2300      	movs	r3, #0
 8001b8c:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001b90:	e00d      	b.n	8001bae <mqtt_send_connect_packet+0x66>
        Uart_write(packet[i]);
 8001b92:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001b96:	3350      	adds	r3, #80	@ 0x50
 8001b98:	443b      	add	r3, r7
 8001b9a:	f813 3c30 	ldrb.w	r3, [r3, #-48]
 8001b9e:	4618      	mov	r0, r3
 8001ba0:	f7ff faf6 	bl	8001190 <Uart_write>
    for (uint16_t i = 0; i < sizeof(packet); i++) {
 8001ba4:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001ba8:	3301      	adds	r3, #1
 8001baa:	f8a7 304e 	strh.w	r3, [r7, #78]	@ 0x4e
 8001bae:	f8b7 304e 	ldrh.w	r3, [r7, #78]	@ 0x4e
 8001bb2:	2b2d      	cmp	r3, #45	@ 0x2d
 8001bb4:	d9ed      	bls.n	8001b92 <mqtt_send_connect_packet+0x4a>
    }

    Wait_for("SEND OK\r\n");
 8001bb6:	4807      	ldr	r0, [pc, #28]	@ (8001bd4 <mqtt_send_connect_packet+0x8c>)
 8001bb8:	f7ff fbe2 	bl	8001380 <Wait_for>
 8001bbc:	e000      	b.n	8001bc0 <mqtt_send_connect_packet+0x78>
    if (!Wait_for(">")) return;
 8001bbe:	bf00      	nop
}
 8001bc0:	3750      	adds	r7, #80	@ 0x50
 8001bc2:	46bd      	mov	sp, r7
 8001bc4:	bdb0      	pop	{r4, r5, r7, pc}
 8001bc6:	bf00      	nop
 8001bc8:	0800902c 	.word	0x0800902c
 8001bcc:	0800900c 	.word	0x0800900c
 8001bd0:	0800901c 	.word	0x0800901c
 8001bd4:	08009020 	.word	0x08009020

08001bd8 <mqtt_wait_connack>:
    return false;
}
*/

bool mqtt_wait_connack(void)
{
 8001bd8:	b580      	push	{r7, lr}
 8001bda:	b086      	sub	sp, #24
 8001bdc:	af00      	add	r7, sp, #0
    const uint8_t expected[] = { 0x20, 0x13, 0x00, 0x00 }; // CONNACK mínimo
 8001bde:	f44f 5399 	mov.w	r3, #4896	@ 0x1320
 8001be2:	607b      	str	r3, [r7, #4]
    uint8_t received[4];
    int idx = 0;
 8001be4:	2300      	movs	r3, #0
 8001be6:	617b      	str	r3, [r7, #20]
    uint32_t start = HAL_GetTick();
 8001be8:	f000 fee4 	bl	80029b4 <HAL_GetTick>
 8001bec:	6138      	str	r0, [r7, #16]
    const uint32_t timeout = 3000;  // Más tiempo
 8001bee:	f640 33b8 	movw	r3, #3000	@ 0xbb8
 8001bf2:	60fb      	str	r3, [r7, #12]

    while ((HAL_GetTick() - start) < timeout)
 8001bf4:	e02b      	b.n	8001c4e <mqtt_wait_connack+0x76>
    {
        if (IsDataAvailable())
 8001bf6:	f7ff fb03 	bl	8001200 <IsDataAvailable>
 8001bfa:	4603      	mov	r3, r0
 8001bfc:	2b00      	cmp	r3, #0
 8001bfe:	d026      	beq.n	8001c4e <mqtt_wait_connack+0x76>
        {
        	uint8_t c = (uint8_t)Uart_read();
 8001c00:	f7ff fa9a 	bl	8001138 <Uart_read>
 8001c04:	4603      	mov	r3, r0
 8001c06:	72fb      	strb	r3, [r7, #11]

			// Solo empezar a almacenar si detectamos el primer byte correcto
			if (idx == 0 && c != expected[0])
 8001c08:	697b      	ldr	r3, [r7, #20]
 8001c0a:	2b00      	cmp	r3, #0
 8001c0c:	d103      	bne.n	8001c16 <mqtt_wait_connack+0x3e>
 8001c0e:	793b      	ldrb	r3, [r7, #4]
 8001c10:	7afa      	ldrb	r2, [r7, #11]
 8001c12:	429a      	cmp	r2, r3
 8001c14:	d11a      	bne.n	8001c4c <mqtt_wait_connack+0x74>
				continue;

			received[idx++] = c;
 8001c16:	697b      	ldr	r3, [r7, #20]
 8001c18:	1c5a      	adds	r2, r3, #1
 8001c1a:	617a      	str	r2, [r7, #20]
 8001c1c:	3318      	adds	r3, #24
 8001c1e:	443b      	add	r3, r7
 8001c20:	7afa      	ldrb	r2, [r7, #11]
 8001c22:	f803 2c18 	strb.w	r2, [r3, #-24]

			if (idx == 4)
 8001c26:	697b      	ldr	r3, [r7, #20]
 8001c28:	2b04      	cmp	r3, #4
 8001c2a:	d110      	bne.n	8001c4e <mqtt_wait_connack+0x76>
				return (received[0] == 0x20 && received[2] == 0x00 && received[3] == 0x00);
 8001c2c:	783b      	ldrb	r3, [r7, #0]
 8001c2e:	2b20      	cmp	r3, #32
 8001c30:	d107      	bne.n	8001c42 <mqtt_wait_connack+0x6a>
 8001c32:	78bb      	ldrb	r3, [r7, #2]
 8001c34:	2b00      	cmp	r3, #0
 8001c36:	d104      	bne.n	8001c42 <mqtt_wait_connack+0x6a>
 8001c38:	78fb      	ldrb	r3, [r7, #3]
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d101      	bne.n	8001c42 <mqtt_wait_connack+0x6a>
 8001c3e:	2301      	movs	r3, #1
 8001c40:	e000      	b.n	8001c44 <mqtt_wait_connack+0x6c>
 8001c42:	2300      	movs	r3, #0
 8001c44:	f003 0301 	and.w	r3, r3, #1
 8001c48:	b2db      	uxtb	r3, r3
 8001c4a:	e009      	b.n	8001c60 <mqtt_wait_connack+0x88>
				continue;
 8001c4c:	bf00      	nop
    while ((HAL_GetTick() - start) < timeout)
 8001c4e:	f000 feb1 	bl	80029b4 <HAL_GetTick>
 8001c52:	4602      	mov	r2, r0
 8001c54:	693b      	ldr	r3, [r7, #16]
 8001c56:	1ad3      	subs	r3, r2, r3
 8001c58:	68fa      	ldr	r2, [r7, #12]
 8001c5a:	429a      	cmp	r2, r3
 8001c5c:	d8cb      	bhi.n	8001bf6 <mqtt_wait_connack+0x1e>
        }
    }

    return false;
 8001c5e:	2300      	movs	r3, #0
}
 8001c60:	4618      	mov	r0, r3
 8001c62:	3718      	adds	r7, #24
 8001c64:	46bd      	mov	sp, r7
 8001c66:	bd80      	pop	{r7, pc}

08001c68 <mqtt_publish_unified_json>:


void mqtt_publish_unified_json(const char* topic)
{
 8001c68:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001c6c:	b0b8      	sub	sp, #224	@ 0xe0
 8001c6e:	af06      	add	r7, sp, #24
 8001c70:	6078      	str	r0, [r7, #4]
    // 1) Formatear payload JSON
    char payload[128];
    int payloadLen = snprintf(payload, sizeof(payload),
 8001c72:	4b78      	ldr	r3, [pc, #480]	@ (8001e54 <mqtt_publish_unified_json+0x1ec>)
 8001c74:	681b      	ldr	r3, [r3, #0]
 8001c76:	4618      	mov	r0, r3
 8001c78:	f7fe fc6e 	bl	8000558 <__aeabi_f2d>
 8001c7c:	4604      	mov	r4, r0
 8001c7e:	460d      	mov	r5, r1
 8001c80:	4b75      	ldr	r3, [pc, #468]	@ (8001e58 <mqtt_publish_unified_json+0x1f0>)
 8001c82:	681b      	ldr	r3, [r3, #0]
 8001c84:	4618      	mov	r0, r3
 8001c86:	f7fe fc67 	bl	8000558 <__aeabi_f2d>
 8001c8a:	4680      	mov	r8, r0
 8001c8c:	4689      	mov	r9, r1
 8001c8e:	4b73      	ldr	r3, [pc, #460]	@ (8001e5c <mqtt_publish_unified_json+0x1f4>)
 8001c90:	681b      	ldr	r3, [r3, #0]
 8001c92:	4618      	mov	r0, r3
 8001c94:	f7fe fc60 	bl	8000558 <__aeabi_f2d>
 8001c98:	4602      	mov	r2, r0
 8001c9a:	460b      	mov	r3, r1
 8001c9c:	f107 0030 	add.w	r0, r7, #48	@ 0x30
 8001ca0:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8001ca4:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8001ca8:	e9cd 4500 	strd	r4, r5, [sp]
 8001cac:	4a6c      	ldr	r2, [pc, #432]	@ (8001e60 <mqtt_publish_unified_json+0x1f8>)
 8001cae:	2180      	movs	r1, #128	@ 0x80
 8001cb0:	f004 ffbc 	bl	8006c2c <sniprintf>
 8001cb4:	f8c7 00b4 	str.w	r0, [r7, #180]	@ 0xb4
                              "{\"temp\":%.2f,\"hum\":%.2f,\"lux\":%.2f}",
							  wifiTemperatureRpi, wifiHumidityRpi, wifiLuminosityRpi);
    if (payloadLen < 0 || payloadLen >= sizeof(payload)) return;
 8001cb8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cbc:	2b00      	cmp	r3, #0
 8001cbe:	f2c0 80c3 	blt.w	8001e48 <mqtt_publish_unified_json+0x1e0>
 8001cc2:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cc6:	2b7f      	cmp	r3, #127	@ 0x7f
 8001cc8:	f200 80be 	bhi.w	8001e48 <mqtt_publish_unified_json+0x1e0>

    // 2) Longitudes
    uint16_t topicLen = strlen(topic);
 8001ccc:	6878      	ldr	r0, [r7, #4]
 8001cce:	f7fe fad7 	bl	8000280 <strlen>
 8001cd2:	4603      	mov	r3, r0
 8001cd4:	f8a7 30b2 	strh.w	r3, [r7, #178]	@ 0xb2
    uint16_t msgLen = 2 + topicLen + 1 + payloadLen;  // topic len (2) + topic + props (1) + payload
 8001cd8:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001cdc:	b29a      	uxth	r2, r3
 8001cde:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8001ce2:	4413      	add	r3, r2
 8001ce4:	b29b      	uxth	r3, r3
 8001ce6:	3303      	adds	r3, #3
 8001ce8:	f8a7 30b0 	strh.w	r3, [r7, #176]	@ 0xb0

    // 3) Fixed header MQTT
    uint8_t header[5];
    uint8_t hdrLen = 0;
 8001cec:	2300      	movs	r3, #0
 8001cee:	f887 30c7 	strb.w	r3, [r7, #199]	@ 0xc7
    header[hdrLen++] = 0x30;  // PUBLISH QoS 0
 8001cf2:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8001cf6:	1c5a      	adds	r2, r3, #1
 8001cf8:	f887 20c7 	strb.w	r2, [r7, #199]	@ 0xc7
 8001cfc:	33c8      	adds	r3, #200	@ 0xc8
 8001cfe:	443b      	add	r3, r7
 8001d00:	2230      	movs	r2, #48	@ 0x30
 8001d02:	f803 2ca0 	strb.w	r2, [r3, #-160]

    // Remaining Length (formato variable)
    uint32_t rem = msgLen;
 8001d06:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8001d0a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
    do {
        uint8_t b = rem & 0x7F;
 8001d0e:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d12:	b2db      	uxtb	r3, r3
 8001d14:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8001d18:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
        rem >>= 7;
 8001d1c:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d20:	09db      	lsrs	r3, r3, #7
 8001d22:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
        if (rem) b |= 0x80;
 8001d26:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d2a:	2b00      	cmp	r3, #0
 8001d2c:	d005      	beq.n	8001d3a <mqtt_publish_unified_json+0xd2>
 8001d2e:	f897 30bf 	ldrb.w	r3, [r7, #191]	@ 0xbf
 8001d32:	f063 037f 	orn	r3, r3, #127	@ 0x7f
 8001d36:	f887 30bf 	strb.w	r3, [r7, #191]	@ 0xbf
        header[hdrLen++] = b;
 8001d3a:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8001d3e:	1c5a      	adds	r2, r3, #1
 8001d40:	f887 20c7 	strb.w	r2, [r7, #199]	@ 0xc7
 8001d44:	33c8      	adds	r3, #200	@ 0xc8
 8001d46:	443b      	add	r3, r7
 8001d48:	f897 20bf 	ldrb.w	r2, [r7, #191]	@ 0xbf
 8001d4c:	f803 2ca0 	strb.w	r2, [r3, #-160]
    } while (rem);
 8001d50:	f8d7 30c0 	ldr.w	r3, [r7, #192]	@ 0xc0
 8001d54:	2b00      	cmp	r3, #0
 8001d56:	d1da      	bne.n	8001d0e <mqtt_publish_unified_json+0xa6>

    // 4) Enviar AT+CIPSEND
    char cmd[32];
    sprintf(cmd, "AT+CIPSEND=%u\r\n", hdrLen + msgLen);
 8001d58:	f897 20c7 	ldrb.w	r2, [r7, #199]	@ 0xc7
 8001d5c:	f8b7 30b0 	ldrh.w	r3, [r7, #176]	@ 0xb0
 8001d60:	441a      	add	r2, r3
 8001d62:	f107 0308 	add.w	r3, r7, #8
 8001d66:	493f      	ldr	r1, [pc, #252]	@ (8001e64 <mqtt_publish_unified_json+0x1fc>)
 8001d68:	4618      	mov	r0, r3
 8001d6a:	f004 ff95 	bl	8006c98 <siprintf>

    Uart_flush();
 8001d6e:	f7ff fac1 	bl	80012f4 <Uart_flush>
    Uart_sendstring(cmd);
 8001d72:	f107 0308 	add.w	r3, r7, #8
 8001d76:	4618      	mov	r0, r3
 8001d78:	f7ff fa5c 	bl	8001234 <Uart_sendstring>

    if (!Wait_for(">")) {
 8001d7c:	483a      	ldr	r0, [pc, #232]	@ (8001e68 <mqtt_publish_unified_json+0x200>)
 8001d7e:	f7ff faff 	bl	8001380 <Wait_for>
 8001d82:	4603      	mov	r3, r0
 8001d84:	2b00      	cmp	r3, #0
 8001d86:	d103      	bne.n	8001d90 <mqtt_publish_unified_json+0x128>
        printf("❌ No llegó '>' en CIPSEND MQTT\r\n");
 8001d88:	4838      	ldr	r0, [pc, #224]	@ (8001e6c <mqtt_publish_unified_json+0x204>)
 8001d8a:	f004 ff47 	bl	8006c1c <puts>
        return;
 8001d8e:	e05c      	b.n	8001e4a <mqtt_publish_unified_json+0x1e2>
    }

    // 5) Enviar el paquete MQTT completo (header + topic + props + payload)

    // → header
    for (uint8_t i = 0; i < hdrLen; i++) {
 8001d90:	2300      	movs	r3, #0
 8001d92:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe
 8001d96:	e00d      	b.n	8001db4 <mqtt_publish_unified_json+0x14c>
        Uart_write(header[i]);
 8001d98:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001d9c:	33c8      	adds	r3, #200	@ 0xc8
 8001d9e:	443b      	add	r3, r7
 8001da0:	f813 3ca0 	ldrb.w	r3, [r3, #-160]
 8001da4:	4618      	mov	r0, r3
 8001da6:	f7ff f9f3 	bl	8001190 <Uart_write>
    for (uint8_t i = 0; i < hdrLen; i++) {
 8001daa:	f897 30be 	ldrb.w	r3, [r7, #190]	@ 0xbe
 8001dae:	3301      	adds	r3, #1
 8001db0:	f887 30be 	strb.w	r3, [r7, #190]	@ 0xbe
 8001db4:	f897 20be 	ldrb.w	r2, [r7, #190]	@ 0xbe
 8001db8:	f897 30c7 	ldrb.w	r3, [r7, #199]	@ 0xc7
 8001dbc:	429a      	cmp	r2, r3
 8001dbe:	d3eb      	bcc.n	8001d98 <mqtt_publish_unified_json+0x130>
    }

    // → topic length (2 bytes)
    Uart_write((uint8_t)(topicLen >> 8));
 8001dc0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8001dc4:	0a1b      	lsrs	r3, r3, #8
 8001dc6:	b29b      	uxth	r3, r3
 8001dc8:	b2db      	uxtb	r3, r3
 8001dca:	4618      	mov	r0, r3
 8001dcc:	f7ff f9e0 	bl	8001190 <Uart_write>
    Uart_write((uint8_t)(topicLen & 0xFF));
 8001dd0:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8001dd4:	b2db      	uxtb	r3, r3
 8001dd6:	4618      	mov	r0, r3
 8001dd8:	f7ff f9da 	bl	8001190 <Uart_write>

    // → topic
    for (uint16_t i = 0; i < topicLen; i++) {
 8001ddc:	2300      	movs	r3, #0
 8001dde:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
 8001de2:	e00c      	b.n	8001dfe <mqtt_publish_unified_json+0x196>
        Uart_write(topic[i]);
 8001de4:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 8001de8:	687a      	ldr	r2, [r7, #4]
 8001dea:	4413      	add	r3, r2
 8001dec:	781b      	ldrb	r3, [r3, #0]
 8001dee:	4618      	mov	r0, r3
 8001df0:	f7ff f9ce 	bl	8001190 <Uart_write>
    for (uint16_t i = 0; i < topicLen; i++) {
 8001df4:	f8b7 30bc 	ldrh.w	r3, [r7, #188]	@ 0xbc
 8001df8:	3301      	adds	r3, #1
 8001dfa:	f8a7 30bc 	strh.w	r3, [r7, #188]	@ 0xbc
 8001dfe:	f8b7 20bc 	ldrh.w	r2, [r7, #188]	@ 0xbc
 8001e02:	f8b7 30b2 	ldrh.w	r3, [r7, #178]	@ 0xb2
 8001e06:	429a      	cmp	r2, r3
 8001e08:	d3ec      	bcc.n	8001de4 <mqtt_publish_unified_json+0x17c>
    }

    // → propiedades (0x00 para MQTT5 sin propiedades)
    Uart_write(0x00);
 8001e0a:	2000      	movs	r0, #0
 8001e0c:	f7ff f9c0 	bl	8001190 <Uart_write>

    // → payload (el JSON)
    for (int i = 0; i < payloadLen; i++) {
 8001e10:	2300      	movs	r3, #0
 8001e12:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e16:	e00d      	b.n	8001e34 <mqtt_publish_unified_json+0x1cc>
        Uart_write(payload[i]);
 8001e18:	f107 0230 	add.w	r2, r7, #48	@ 0x30
 8001e1c:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e20:	4413      	add	r3, r2
 8001e22:	781b      	ldrb	r3, [r3, #0]
 8001e24:	4618      	mov	r0, r3
 8001e26:	f7ff f9b3 	bl	8001190 <Uart_write>
    for (int i = 0; i < payloadLen; i++) {
 8001e2a:	f8d7 30b8 	ldr.w	r3, [r7, #184]	@ 0xb8
 8001e2e:	3301      	adds	r3, #1
 8001e30:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8001e34:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 8001e38:	f8d7 30b4 	ldr.w	r3, [r7, #180]	@ 0xb4
 8001e3c:	429a      	cmp	r2, r3
 8001e3e:	dbeb      	blt.n	8001e18 <mqtt_publish_unified_json+0x1b0>
    }

    // 6) (Opcional) esperar "SEND OK"
    Wait_for("SEND OK\r\n");
 8001e40:	480b      	ldr	r0, [pc, #44]	@ (8001e70 <mqtt_publish_unified_json+0x208>)
 8001e42:	f7ff fa9d 	bl	8001380 <Wait_for>
 8001e46:	e000      	b.n	8001e4a <mqtt_publish_unified_json+0x1e2>
    if (payloadLen < 0 || payloadLen >= sizeof(payload)) return;
 8001e48:	bf00      	nop
}
 8001e4a:	37c8      	adds	r7, #200	@ 0xc8
 8001e4c:	46bd      	mov	sp, r7
 8001e4e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001e52:	bf00      	nop
 8001e54:	2000073c 	.word	0x2000073c
 8001e58:	20000740 	.word	0x20000740
 8001e5c:	20000744 	.word	0x20000744
 8001e60:	0800905c 	.word	0x0800905c
 8001e64:	0800900c 	.word	0x0800900c
 8001e68:	0800901c 	.word	0x0800901c
 8001e6c:	08009080 	.word	0x08009080
 8001e70:	08009020 	.word	0x08009020

08001e74 <processRpiStateMachine>:


void processRpiStateMachine(void) {
 8001e74:	b580      	push	{r7, lr}
 8001e76:	b09a      	sub	sp, #104	@ 0x68
 8001e78:	af00      	add	r7, sp, #0
    static uint32_t stateTimeout = 0;

    switch (rpiState) {
 8001e7a:	4b3e      	ldr	r3, [pc, #248]	@ (8001f74 <processRpiStateMachine+0x100>)
 8001e7c:	781b      	ldrb	r3, [r3, #0]
 8001e7e:	3b01      	subs	r3, #1
 8001e80:	2b05      	cmp	r3, #5
 8001e82:	d86c      	bhi.n	8001f5e <processRpiStateMachine+0xea>
 8001e84:	a201      	add	r2, pc, #4	@ (adr r2, 8001e8c <processRpiStateMachine+0x18>)
 8001e86:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001e8a:	bf00      	nop
 8001e8c:	08001ea5 	.word	0x08001ea5
 8001e90:	08001eb1 	.word	0x08001eb1
 8001e94:	08001eeb 	.word	0x08001eeb
 8001e98:	08001f05 	.word	0x08001f05
 8001e9c:	08001f37 	.word	0x08001f37
 8001ea0:	08001f53 	.word	0x08001f53
    case 1: {  // Cerrar conexión
		closeConnection();
 8001ea4:	f7ff fb20 	bl	80014e8 <closeConnection>
		rpiState = 2;
 8001ea8:	4b32      	ldr	r3, [pc, #200]	@ (8001f74 <processRpiStateMachine+0x100>)
 8001eaa:	2202      	movs	r2, #2
 8001eac:	701a      	strb	r2, [r3, #0]
		break;
 8001eae:	e05d      	b.n	8001f6c <processRpiStateMachine+0xf8>
	}
    case 2: {  // Iniciar conexión TCP
        Uart_flush();
 8001eb0:	f7ff fa20 	bl	80012f4 <Uart_flush>
        char cmd[100];
        sprintf(cmd, "AT+CIPSTART=\"TCP\",\"%s\",%d\r\n", MQTT_BROKER_IP, MQTT_BROKER_PORT);
 8001eb4:	1d38      	adds	r0, r7, #4
 8001eb6:	f240 735b 	movw	r3, #1883	@ 0x75b
 8001eba:	4a2f      	ldr	r2, [pc, #188]	@ (8001f78 <processRpiStateMachine+0x104>)
 8001ebc:	492f      	ldr	r1, [pc, #188]	@ (8001f7c <processRpiStateMachine+0x108>)
 8001ebe:	f004 feeb 	bl	8006c98 <siprintf>
        Uart_sendstring(cmd);
 8001ec2:	1d3b      	adds	r3, r7, #4
 8001ec4:	4618      	mov	r0, r3
 8001ec6:	f7ff f9b5 	bl	8001234 <Uart_sendstring>

        if (!Wait_for("OK\r\n")) {
 8001eca:	482d      	ldr	r0, [pc, #180]	@ (8001f80 <processRpiStateMachine+0x10c>)
 8001ecc:	f7ff fa58 	bl	8001380 <Wait_for>
 8001ed0:	4603      	mov	r3, r0
 8001ed2:	2b00      	cmp	r3, #0
 8001ed4:	d105      	bne.n	8001ee2 <processRpiStateMachine+0x6e>
        	closeConnection();
 8001ed6:	f7ff fb07 	bl	80014e8 <closeConnection>
            rpiState = 0;
 8001eda:	4b26      	ldr	r3, [pc, #152]	@ (8001f74 <processRpiStateMachine+0x100>)
 8001edc:	2200      	movs	r2, #0
 8001ede:	701a      	strb	r2, [r3, #0]
            break;
 8001ee0:	e044      	b.n	8001f6c <processRpiStateMachine+0xf8>
        }

        rpiState = 3;
 8001ee2:	4b24      	ldr	r3, [pc, #144]	@ (8001f74 <processRpiStateMachine+0x100>)
 8001ee4:	2203      	movs	r2, #3
 8001ee6:	701a      	strb	r2, [r3, #0]
        break;
 8001ee8:	e040      	b.n	8001f6c <processRpiStateMachine+0xf8>
    }

    case 3: {  // enviar paquete CONNECT (MQTT 5.0)
        Uart_flush();
 8001eea:	f7ff fa03 	bl	80012f4 <Uart_flush>
        mqtt_send_connect_packet();
 8001eee:	f7ff fe2b 	bl	8001b48 <mqtt_send_connect_packet>

        rpiState = 4;
 8001ef2:	4b20      	ldr	r3, [pc, #128]	@ (8001f74 <processRpiStateMachine+0x100>)
 8001ef4:	2204      	movs	r2, #4
 8001ef6:	701a      	strb	r2, [r3, #0]
        stateTimeout = HAL_GetTick();
 8001ef8:	f000 fd5c 	bl	80029b4 <HAL_GetTick>
 8001efc:	4603      	mov	r3, r0
 8001efe:	4a21      	ldr	r2, [pc, #132]	@ (8001f84 <processRpiStateMachine+0x110>)
 8001f00:	6013      	str	r3, [r2, #0]
        break;
 8001f02:	e033      	b.n	8001f6c <processRpiStateMachine+0xf8>
    }

    case 4: {  // Esperar CONNACK
        if (mqtt_wait_connack()) {
 8001f04:	f7ff fe68 	bl	8001bd8 <mqtt_wait_connack>
 8001f08:	4603      	mov	r3, r0
 8001f0a:	2b00      	cmp	r3, #0
 8001f0c:	d003      	beq.n	8001f16 <processRpiStateMachine+0xa2>
            rpiState = 5;
 8001f0e:	4b19      	ldr	r3, [pc, #100]	@ (8001f74 <processRpiStateMachine+0x100>)
 8001f10:	2205      	movs	r2, #5
 8001f12:	701a      	strb	r2, [r3, #0]
            break;
 8001f14:	e02a      	b.n	8001f6c <processRpiStateMachine+0xf8>
        } else if (HAL_GetTick() - stateTimeout > 5000) {
 8001f16:	f000 fd4d 	bl	80029b4 <HAL_GetTick>
 8001f1a:	4602      	mov	r2, r0
 8001f1c:	4b19      	ldr	r3, [pc, #100]	@ (8001f84 <processRpiStateMachine+0x110>)
 8001f1e:	681b      	ldr	r3, [r3, #0]
 8001f20:	1ad3      	subs	r3, r2, r3
 8001f22:	f241 3288 	movw	r2, #5000	@ 0x1388
 8001f26:	4293      	cmp	r3, r2
 8001f28:	d91f      	bls.n	8001f6a <processRpiStateMachine+0xf6>
        	closeConnection();
 8001f2a:	f7ff fadd 	bl	80014e8 <closeConnection>
			rpiState = 0;
 8001f2e:	4b11      	ldr	r3, [pc, #68]	@ (8001f74 <processRpiStateMachine+0x100>)
 8001f30:	2200      	movs	r2, #0
 8001f32:	701a      	strb	r2, [r3, #0]
			break;
 8001f34:	e01a      	b.n	8001f6c <processRpiStateMachine+0xf8>
		}
        break;
    }

    case 5: {  // MQTT PUBLISH JSON
        Uart_flush();
 8001f36:	f7ff f9dd 	bl	80012f4 <Uart_flush>
        mqtt_publish_unified_json(MQTT_TOPIC_JSON);
 8001f3a:	4813      	ldr	r0, [pc, #76]	@ (8001f88 <processRpiStateMachine+0x114>)
 8001f3c:	f7ff fe94 	bl	8001c68 <mqtt_publish_unified_json>

        rpiState = 6;
 8001f40:	4b0c      	ldr	r3, [pc, #48]	@ (8001f74 <processRpiStateMachine+0x100>)
 8001f42:	2206      	movs	r2, #6
 8001f44:	701a      	strb	r2, [r3, #0]
        stateTimeout = HAL_GetTick();
 8001f46:	f000 fd35 	bl	80029b4 <HAL_GetTick>
 8001f4a:	4603      	mov	r3, r0
 8001f4c:	4a0d      	ldr	r2, [pc, #52]	@ (8001f84 <processRpiStateMachine+0x110>)
 8001f4e:	6013      	str	r3, [r2, #0]
        break;
 8001f50:	e00c      	b.n	8001f6c <processRpiStateMachine+0xf8>
    }

    case 6: {  // Cerrar conexión
        closeConnection();
 8001f52:	f7ff fac9 	bl	80014e8 <closeConnection>
        rpiState = 0;
 8001f56:	4b07      	ldr	r3, [pc, #28]	@ (8001f74 <processRpiStateMachine+0x100>)
 8001f58:	2200      	movs	r2, #0
 8001f5a:	701a      	strb	r2, [r3, #0]
        break;
 8001f5c:	e006      	b.n	8001f6c <processRpiStateMachine+0xf8>

	}
    default:{
    	closeConnection();
 8001f5e:	f7ff fac3 	bl	80014e8 <closeConnection>
		rpiState = 0;
 8001f62:	4b04      	ldr	r3, [pc, #16]	@ (8001f74 <processRpiStateMachine+0x100>)
 8001f64:	2200      	movs	r2, #0
 8001f66:	701a      	strb	r2, [r3, #0]
		break;
 8001f68:	e000      	b.n	8001f6c <processRpiStateMachine+0xf8>
        break;
 8001f6a:	bf00      	nop

    }
    }
}
 8001f6c:	bf00      	nop
 8001f6e:	3768      	adds	r7, #104	@ 0x68
 8001f70:	46bd      	mov	sp, r7
 8001f72:	bd80      	pop	{r7, pc}
 8001f74:	20000738 	.word	0x20000738
 8001f78:	080090a4 	.word	0x080090a4
 8001f7c:	080090b4 	.word	0x080090b4
 8001f80:	080090d0 	.word	0x080090d0
 8001f84:	20000748 	.word	0x20000748
 8001f88:	080090d8 	.word	0x080090d8

08001f8c <SHT85_Init>:
float totalTemperature = 0.0f;
uint8_t sampleCountTemp = 0;
float totalHumidity = 0.0f;
uint8_t sampleCountHum = 0;

void SHT85_Init() {
 8001f8c:	b580      	push	{r7, lr}
 8001f8e:	af00      	add	r7, sp, #0
    // No se requiere inicialización en modo single shot, pero puede hacerse un soft reset por seguridad
    ResetSHT85();
 8001f90:	f000 f8f8 	bl	8002184 <ResetSHT85>
}
 8001f94:	bf00      	nop
 8001f96:	bd80      	pop	{r7, pc}

08001f98 <SHT85_CalculateCRC>:

uint8_t SHT85_CalculateCRC(uint8_t* data, uint8_t len) {
 8001f98:	b480      	push	{r7}
 8001f9a:	b085      	sub	sp, #20
 8001f9c:	af00      	add	r7, sp, #0
 8001f9e:	6078      	str	r0, [r7, #4]
 8001fa0:	460b      	mov	r3, r1
 8001fa2:	70fb      	strb	r3, [r7, #3]
    uint8_t crc = 0xFF;
 8001fa4:	23ff      	movs	r3, #255	@ 0xff
 8001fa6:	73fb      	strb	r3, [r7, #15]
    for (uint8_t i = 0; i < len; i++) {
 8001fa8:	2300      	movs	r3, #0
 8001faa:	73bb      	strb	r3, [r7, #14]
 8001fac:	e022      	b.n	8001ff4 <SHT85_CalculateCRC+0x5c>
        crc ^= data[i];
 8001fae:	7bbb      	ldrb	r3, [r7, #14]
 8001fb0:	687a      	ldr	r2, [r7, #4]
 8001fb2:	4413      	add	r3, r2
 8001fb4:	781a      	ldrb	r2, [r3, #0]
 8001fb6:	7bfb      	ldrb	r3, [r7, #15]
 8001fb8:	4053      	eors	r3, r2
 8001fba:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 8001fbc:	2300      	movs	r3, #0
 8001fbe:	737b      	strb	r3, [r7, #13]
 8001fc0:	e012      	b.n	8001fe8 <SHT85_CalculateCRC+0x50>
            if (crc & 0x80)
 8001fc2:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fc6:	2b00      	cmp	r3, #0
 8001fc8:	da08      	bge.n	8001fdc <SHT85_CalculateCRC+0x44>
                crc = (crc << 1) ^ 0x31;
 8001fca:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8001fce:	005b      	lsls	r3, r3, #1
 8001fd0:	b25b      	sxtb	r3, r3
 8001fd2:	f083 0331 	eor.w	r3, r3, #49	@ 0x31
 8001fd6:	b25b      	sxtb	r3, r3
 8001fd8:	73fb      	strb	r3, [r7, #15]
 8001fda:	e002      	b.n	8001fe2 <SHT85_CalculateCRC+0x4a>
            else
                crc <<= 1;
 8001fdc:	7bfb      	ldrb	r3, [r7, #15]
 8001fde:	005b      	lsls	r3, r3, #1
 8001fe0:	73fb      	strb	r3, [r7, #15]
        for (uint8_t j = 0; j < 8; j++) {
 8001fe2:	7b7b      	ldrb	r3, [r7, #13]
 8001fe4:	3301      	adds	r3, #1
 8001fe6:	737b      	strb	r3, [r7, #13]
 8001fe8:	7b7b      	ldrb	r3, [r7, #13]
 8001fea:	2b07      	cmp	r3, #7
 8001fec:	d9e9      	bls.n	8001fc2 <SHT85_CalculateCRC+0x2a>
    for (uint8_t i = 0; i < len; i++) {
 8001fee:	7bbb      	ldrb	r3, [r7, #14]
 8001ff0:	3301      	adds	r3, #1
 8001ff2:	73bb      	strb	r3, [r7, #14]
 8001ff4:	7bba      	ldrb	r2, [r7, #14]
 8001ff6:	78fb      	ldrb	r3, [r7, #3]
 8001ff8:	429a      	cmp	r2, r3
 8001ffa:	d3d8      	bcc.n	8001fae <SHT85_CalculateCRC+0x16>
        }
    }
    return crc;
 8001ffc:	7bfb      	ldrb	r3, [r7, #15]
}
 8001ffe:	4618      	mov	r0, r3
 8002000:	3714      	adds	r7, #20
 8002002:	46bd      	mov	sp, r7
 8002004:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002008:	4770      	bx	lr
	...

0800200c <SHT85_ReadSingleShot>:

void SHT85_ReadSingleShot(float* temperature, float* humidity) {
 800200c:	b580      	push	{r7, lr}
 800200e:	b088      	sub	sp, #32
 8002010:	af02      	add	r7, sp, #8
 8002012:	6078      	str	r0, [r7, #4]
 8002014:	6039      	str	r1, [r7, #0]
    uint8_t cmd[2] = {0x24, 0x00};  // High repeatability, no clock stretching
 8002016:	2324      	movs	r3, #36	@ 0x24
 8002018:	82bb      	strh	r3, [r7, #20]
    uint8_t data[6];

    HAL_I2C_Master_Transmit(&hi2c1, SHT85_I2C_ADDR, cmd, 2, HAL_MAX_DELAY);
 800201a:	f107 0214 	add.w	r2, r7, #20
 800201e:	f04f 33ff 	mov.w	r3, #4294967295
 8002022:	9300      	str	r3, [sp, #0]
 8002024:	2302      	movs	r3, #2
 8002026:	2188      	movs	r1, #136	@ 0x88
 8002028:	4834      	ldr	r0, [pc, #208]	@ (80020fc <SHT85_ReadSingleShot+0xf0>)
 800202a:	f001 f95f 	bl	80032ec <HAL_I2C_Master_Transmit>
    HAL_Delay(20);  // Tiempo típico de conversión (~15 ms para alta repetibilidad)
 800202e:	2014      	movs	r0, #20
 8002030:	f000 fccc 	bl	80029cc <HAL_Delay>

    HAL_I2C_Master_Receive(&hi2c1, SHT85_I2C_ADDR, data, 6, HAL_MAX_DELAY);
 8002034:	f107 020c 	add.w	r2, r7, #12
 8002038:	f04f 33ff 	mov.w	r3, #4294967295
 800203c:	9300      	str	r3, [sp, #0]
 800203e:	2306      	movs	r3, #6
 8002040:	2188      	movs	r1, #136	@ 0x88
 8002042:	482e      	ldr	r0, [pc, #184]	@ (80020fc <SHT85_ReadSingleShot+0xf0>)
 8002044:	f001 fa50 	bl	80034e8 <HAL_I2C_Master_Receive>

    // Validar CRC
    if (SHT85_CalculateCRC(&data[0], 2) != data[2]) return;
 8002048:	f107 030c 	add.w	r3, r7, #12
 800204c:	2102      	movs	r1, #2
 800204e:	4618      	mov	r0, r3
 8002050:	f7ff ffa2 	bl	8001f98 <SHT85_CalculateCRC>
 8002054:	4603      	mov	r3, r0
 8002056:	461a      	mov	r2, r3
 8002058:	7bbb      	ldrb	r3, [r7, #14]
 800205a:	429a      	cmp	r2, r3
 800205c:	d148      	bne.n	80020f0 <SHT85_ReadSingleShot+0xe4>
    if (SHT85_CalculateCRC(&data[3], 2) != data[5]) return;
 800205e:	f107 030c 	add.w	r3, r7, #12
 8002062:	3303      	adds	r3, #3
 8002064:	2102      	movs	r1, #2
 8002066:	4618      	mov	r0, r3
 8002068:	f7ff ff96 	bl	8001f98 <SHT85_CalculateCRC>
 800206c:	4603      	mov	r3, r0
 800206e:	461a      	mov	r2, r3
 8002070:	7c7b      	ldrb	r3, [r7, #17]
 8002072:	429a      	cmp	r2, r3
 8002074:	d13e      	bne.n	80020f4 <SHT85_ReadSingleShot+0xe8>

    temp_raw = (data[0] << 8) | data[1];
 8002076:	7b3b      	ldrb	r3, [r7, #12]
 8002078:	b21b      	sxth	r3, r3
 800207a:	021b      	lsls	r3, r3, #8
 800207c:	b21a      	sxth	r2, r3
 800207e:	7b7b      	ldrb	r3, [r7, #13]
 8002080:	b21b      	sxth	r3, r3
 8002082:	4313      	orrs	r3, r2
 8002084:	b21b      	sxth	r3, r3
 8002086:	b29a      	uxth	r2, r3
 8002088:	4b1d      	ldr	r3, [pc, #116]	@ (8002100 <SHT85_ReadSingleShot+0xf4>)
 800208a:	801a      	strh	r2, [r3, #0]
    hum_raw  = (data[3] << 8) | data[4];
 800208c:	7bfb      	ldrb	r3, [r7, #15]
 800208e:	b21b      	sxth	r3, r3
 8002090:	021b      	lsls	r3, r3, #8
 8002092:	b21a      	sxth	r2, r3
 8002094:	7c3b      	ldrb	r3, [r7, #16]
 8002096:	b21b      	sxth	r3, r3
 8002098:	4313      	orrs	r3, r2
 800209a:	b21b      	sxth	r3, r3
 800209c:	b29a      	uxth	r2, r3
 800209e:	4b19      	ldr	r3, [pc, #100]	@ (8002104 <SHT85_ReadSingleShot+0xf8>)
 80020a0:	801a      	strh	r2, [r3, #0]

    *temperature = -45 + 175 * (float)temp_raw / 65535.0f;
 80020a2:	4b17      	ldr	r3, [pc, #92]	@ (8002100 <SHT85_ReadSingleShot+0xf4>)
 80020a4:	881b      	ldrh	r3, [r3, #0]
 80020a6:	ee07 3a90 	vmov	s15, r3
 80020aa:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020ae:	ed9f 7a16 	vldr	s14, [pc, #88]	@ 8002108 <SHT85_ReadSingleShot+0xfc>
 80020b2:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020b6:	eddf 6a15 	vldr	s13, [pc, #84]	@ 800210c <SHT85_ReadSingleShot+0x100>
 80020ba:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020be:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 8002110 <SHT85_ReadSingleShot+0x104>
 80020c2:	ee77 7ac7 	vsub.f32	s15, s15, s14
 80020c6:	687b      	ldr	r3, [r7, #4]
 80020c8:	edc3 7a00 	vstr	s15, [r3]
    *humidity    = 100 * (float)hum_raw / 65535.0f;
 80020cc:	4b0d      	ldr	r3, [pc, #52]	@ (8002104 <SHT85_ReadSingleShot+0xf8>)
 80020ce:	881b      	ldrh	r3, [r3, #0]
 80020d0:	ee07 3a90 	vmov	s15, r3
 80020d4:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80020d8:	ed9f 7a0e 	vldr	s14, [pc, #56]	@ 8002114 <SHT85_ReadSingleShot+0x108>
 80020dc:	ee27 7a87 	vmul.f32	s14, s15, s14
 80020e0:	eddf 6a0a 	vldr	s13, [pc, #40]	@ 800210c <SHT85_ReadSingleShot+0x100>
 80020e4:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80020e8:	683b      	ldr	r3, [r7, #0]
 80020ea:	edc3 7a00 	vstr	s15, [r3]
 80020ee:	e002      	b.n	80020f6 <SHT85_ReadSingleShot+0xea>
    if (SHT85_CalculateCRC(&data[0], 2) != data[2]) return;
 80020f0:	bf00      	nop
 80020f2:	e000      	b.n	80020f6 <SHT85_ReadSingleShot+0xea>
    if (SHT85_CalculateCRC(&data[3], 2) != data[5]) return;
 80020f4:	bf00      	nop
}
 80020f6:	3718      	adds	r7, #24
 80020f8:	46bd      	mov	sp, r7
 80020fa:	bd80      	pop	{r7, pc}
 80020fc:	20000608 	.word	0x20000608
 8002100:	2000074c 	.word	0x2000074c
 8002104:	2000074e 	.word	0x2000074e
 8002108:	432f0000 	.word	0x432f0000
 800210c:	477fff00 	.word	0x477fff00
 8002110:	42340000 	.word	0x42340000
 8002114:	42c80000 	.word	0x42c80000

08002118 <SHT85_ErrorReset>:

void SHT85_ErrorReset(float* temperature, float* humidity) {
 8002118:	b580      	push	{r7, lr}
 800211a:	b082      	sub	sp, #8
 800211c:	af00      	add	r7, sp, #0
 800211e:	6078      	str	r0, [r7, #4]
 8002120:	6039      	str	r1, [r7, #0]
    static uint8_t out_of_range_count = 0;

    if (*temperature <= -44.0f || *humidity <= 1) {
 8002122:	687b      	ldr	r3, [r7, #4]
 8002124:	edd3 7a00 	vldr	s15, [r3]
 8002128:	ed9f 7a14 	vldr	s14, [pc, #80]	@ 800217c <SHT85_ErrorReset+0x64>
 800212c:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002130:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002134:	d909      	bls.n	800214a <SHT85_ErrorReset+0x32>
 8002136:	683b      	ldr	r3, [r7, #0]
 8002138:	edd3 7a00 	vldr	s15, [r3]
 800213c:	eeb7 7a00 	vmov.f32	s14, #112	@ 0x3f800000  1.0
 8002140:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002144:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002148:	d810      	bhi.n	800216c <SHT85_ErrorReset+0x54>
        if (out_of_range_count > 5) {
 800214a:	4b0d      	ldr	r3, [pc, #52]	@ (8002180 <SHT85_ErrorReset+0x68>)
 800214c:	781b      	ldrb	r3, [r3, #0]
 800214e:	2b05      	cmp	r3, #5
 8002150:	d905      	bls.n	800215e <SHT85_ErrorReset+0x46>
            ResetSHT85();
 8002152:	f000 f817 	bl	8002184 <ResetSHT85>
            out_of_range_count = 0;
 8002156:	4b0a      	ldr	r3, [pc, #40]	@ (8002180 <SHT85_ErrorReset+0x68>)
 8002158:	2200      	movs	r2, #0
 800215a:	701a      	strb	r2, [r3, #0]
        if (out_of_range_count > 5) {
 800215c:	e00a      	b.n	8002174 <SHT85_ErrorReset+0x5c>
        } else {
            out_of_range_count++;
 800215e:	4b08      	ldr	r3, [pc, #32]	@ (8002180 <SHT85_ErrorReset+0x68>)
 8002160:	781b      	ldrb	r3, [r3, #0]
 8002162:	3301      	adds	r3, #1
 8002164:	b2da      	uxtb	r2, r3
 8002166:	4b06      	ldr	r3, [pc, #24]	@ (8002180 <SHT85_ErrorReset+0x68>)
 8002168:	701a      	strb	r2, [r3, #0]
        if (out_of_range_count > 5) {
 800216a:	e003      	b.n	8002174 <SHT85_ErrorReset+0x5c>
        }
    } else {
        out_of_range_count = 0;
 800216c:	4b04      	ldr	r3, [pc, #16]	@ (8002180 <SHT85_ErrorReset+0x68>)
 800216e:	2200      	movs	r2, #0
 8002170:	701a      	strb	r2, [r3, #0]
    }
}
 8002172:	bf00      	nop
 8002174:	bf00      	nop
 8002176:	3708      	adds	r7, #8
 8002178:	46bd      	mov	sp, r7
 800217a:	bd80      	pop	{r7, pc}
 800217c:	c2300000 	.word	0xc2300000
 8002180:	20000750 	.word	0x20000750

08002184 <ResetSHT85>:

void ResetSHT85() {
 8002184:	b580      	push	{r7, lr}
 8002186:	b084      	sub	sp, #16
 8002188:	af02      	add	r7, sp, #8
    uint8_t reset_command[2] = {0x30, 0xA2};
 800218a:	f24a 2330 	movw	r3, #41520	@ 0xa230
 800218e:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Master_Transmit(&hi2c1, SHT85_I2C_ADDR, reset_command, 2, HAL_MAX_DELAY);
 8002190:	1d3a      	adds	r2, r7, #4
 8002192:	f04f 33ff 	mov.w	r3, #4294967295
 8002196:	9300      	str	r3, [sp, #0]
 8002198:	2302      	movs	r3, #2
 800219a:	2188      	movs	r1, #136	@ 0x88
 800219c:	4804      	ldr	r0, [pc, #16]	@ (80021b0 <ResetSHT85+0x2c>)
 800219e:	f001 f8a5 	bl	80032ec <HAL_I2C_Master_Transmit>
    HAL_Delay(50);
 80021a2:	2032      	movs	r0, #50	@ 0x32
 80021a4:	f000 fc12 	bl	80029cc <HAL_Delay>
}
 80021a8:	bf00      	nop
 80021aa:	3708      	adds	r7, #8
 80021ac:	46bd      	mov	sp, r7
 80021ae:	bd80      	pop	{r7, pc}
 80021b0:	20000608 	.word	0x20000608

080021b4 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80021b4:	b580      	push	{r7, lr}
 80021b6:	b082      	sub	sp, #8
 80021b8:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80021ba:	2300      	movs	r3, #0
 80021bc:	607b      	str	r3, [r7, #4]
 80021be:	4b10      	ldr	r3, [pc, #64]	@ (8002200 <HAL_MspInit+0x4c>)
 80021c0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021c2:	4a0f      	ldr	r2, [pc, #60]	@ (8002200 <HAL_MspInit+0x4c>)
 80021c4:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 80021c8:	6453      	str	r3, [r2, #68]	@ 0x44
 80021ca:	4b0d      	ldr	r3, [pc, #52]	@ (8002200 <HAL_MspInit+0x4c>)
 80021cc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80021ce:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 80021d2:	607b      	str	r3, [r7, #4]
 80021d4:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 80021d6:	2300      	movs	r3, #0
 80021d8:	603b      	str	r3, [r7, #0]
 80021da:	4b09      	ldr	r3, [pc, #36]	@ (8002200 <HAL_MspInit+0x4c>)
 80021dc:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021de:	4a08      	ldr	r2, [pc, #32]	@ (8002200 <HAL_MspInit+0x4c>)
 80021e0:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 80021e4:	6413      	str	r3, [r2, #64]	@ 0x40
 80021e6:	4b06      	ldr	r3, [pc, #24]	@ (8002200 <HAL_MspInit+0x4c>)
 80021e8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80021ea:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 80021ee:	603b      	str	r3, [r7, #0]
 80021f0:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80021f2:	2007      	movs	r0, #7
 80021f4:	f000 fcde 	bl	8002bb4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80021f8:	bf00      	nop
 80021fa:	3708      	adds	r7, #8
 80021fc:	46bd      	mov	sp, r7
 80021fe:	bd80      	pop	{r7, pc}
 8002200:	40023800 	.word	0x40023800

08002204 <HAL_I2C_MspInit>:
  * This function configures the hardware resources used in this example
  * @param hi2c: I2C handle pointer
  * @retval None
  */
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002204:	b580      	push	{r7, lr}
 8002206:	b08c      	sub	sp, #48	@ 0x30
 8002208:	af00      	add	r7, sp, #0
 800220a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800220c:	f107 031c 	add.w	r3, r7, #28
 8002210:	2200      	movs	r2, #0
 8002212:	601a      	str	r2, [r3, #0]
 8002214:	605a      	str	r2, [r3, #4]
 8002216:	609a      	str	r2, [r3, #8]
 8002218:	60da      	str	r2, [r3, #12]
 800221a:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 800221c:	687b      	ldr	r3, [r7, #4]
 800221e:	681b      	ldr	r3, [r3, #0]
 8002220:	4a3a      	ldr	r2, [pc, #232]	@ (800230c <HAL_I2C_MspInit+0x108>)
 8002222:	4293      	cmp	r3, r2
 8002224:	d12c      	bne.n	8002280 <HAL_I2C_MspInit+0x7c>
  {
    /* USER CODE BEGIN I2C1_MspInit 0 */

    /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002226:	2300      	movs	r3, #0
 8002228:	61bb      	str	r3, [r7, #24]
 800222a:	4b39      	ldr	r3, [pc, #228]	@ (8002310 <HAL_I2C_MspInit+0x10c>)
 800222c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800222e:	4a38      	ldr	r2, [pc, #224]	@ (8002310 <HAL_I2C_MspInit+0x10c>)
 8002230:	f043 0302 	orr.w	r3, r3, #2
 8002234:	6313      	str	r3, [r2, #48]	@ 0x30
 8002236:	4b36      	ldr	r3, [pc, #216]	@ (8002310 <HAL_I2C_MspInit+0x10c>)
 8002238:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800223a:	f003 0302 	and.w	r3, r3, #2
 800223e:	61bb      	str	r3, [r7, #24]
 8002240:	69bb      	ldr	r3, [r7, #24]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002242:	23c0      	movs	r3, #192	@ 0xc0
 8002244:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002246:	2312      	movs	r3, #18
 8002248:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800224a:	2300      	movs	r3, #0
 800224c:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800224e:	2303      	movs	r3, #3
 8002250:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002252:	2304      	movs	r3, #4
 8002254:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002256:	f107 031c 	add.w	r3, r7, #28
 800225a:	4619      	mov	r1, r3
 800225c:	482d      	ldr	r0, [pc, #180]	@ (8002314 <HAL_I2C_MspInit+0x110>)
 800225e:	f000 fd7d 	bl	8002d5c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002262:	2300      	movs	r3, #0
 8002264:	617b      	str	r3, [r7, #20]
 8002266:	4b2a      	ldr	r3, [pc, #168]	@ (8002310 <HAL_I2C_MspInit+0x10c>)
 8002268:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800226a:	4a29      	ldr	r2, [pc, #164]	@ (8002310 <HAL_I2C_MspInit+0x10c>)
 800226c:	f443 1300 	orr.w	r3, r3, #2097152	@ 0x200000
 8002270:	6413      	str	r3, [r2, #64]	@ 0x40
 8002272:	4b27      	ldr	r3, [pc, #156]	@ (8002310 <HAL_I2C_MspInit+0x10c>)
 8002274:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002276:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 800227a:	617b      	str	r3, [r7, #20]
 800227c:	697b      	ldr	r3, [r7, #20]
    /* USER CODE BEGIN I2C2_MspInit 1 */

    /* USER CODE END I2C2_MspInit 1 */
  }

}
 800227e:	e041      	b.n	8002304 <HAL_I2C_MspInit+0x100>
  else if(hi2c->Instance==I2C2)
 8002280:	687b      	ldr	r3, [r7, #4]
 8002282:	681b      	ldr	r3, [r3, #0]
 8002284:	4a24      	ldr	r2, [pc, #144]	@ (8002318 <HAL_I2C_MspInit+0x114>)
 8002286:	4293      	cmp	r3, r2
 8002288:	d13c      	bne.n	8002304 <HAL_I2C_MspInit+0x100>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 800228a:	2300      	movs	r3, #0
 800228c:	613b      	str	r3, [r7, #16]
 800228e:	4b20      	ldr	r3, [pc, #128]	@ (8002310 <HAL_I2C_MspInit+0x10c>)
 8002290:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002292:	4a1f      	ldr	r2, [pc, #124]	@ (8002310 <HAL_I2C_MspInit+0x10c>)
 8002294:	f043 0302 	orr.w	r3, r3, #2
 8002298:	6313      	str	r3, [r2, #48]	@ 0x30
 800229a:	4b1d      	ldr	r3, [pc, #116]	@ (8002310 <HAL_I2C_MspInit+0x10c>)
 800229c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800229e:	f003 0302 	and.w	r3, r3, #2
 80022a2:	613b      	str	r3, [r7, #16]
 80022a4:	693b      	ldr	r3, [r7, #16]
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 80022a6:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 80022aa:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022ac:	2312      	movs	r3, #18
 80022ae:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022b0:	2300      	movs	r3, #0
 80022b2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022b4:	2303      	movs	r3, #3
 80022b6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C2;
 80022b8:	2304      	movs	r3, #4
 80022ba:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022bc:	f107 031c 	add.w	r3, r7, #28
 80022c0:	4619      	mov	r1, r3
 80022c2:	4814      	ldr	r0, [pc, #80]	@ (8002314 <HAL_I2C_MspInit+0x110>)
 80022c4:	f000 fd4a 	bl	8002d5c <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_3;
 80022c8:	2308      	movs	r3, #8
 80022ca:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80022cc:	2312      	movs	r3, #18
 80022ce:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80022d0:	2300      	movs	r3, #0
 80022d2:	627b      	str	r3, [r7, #36]	@ 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80022d4:	2303      	movs	r3, #3
 80022d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    GPIO_InitStruct.Alternate = GPIO_AF9_I2C2;
 80022d8:	2309      	movs	r3, #9
 80022da:	62fb      	str	r3, [r7, #44]	@ 0x2c
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80022dc:	f107 031c 	add.w	r3, r7, #28
 80022e0:	4619      	mov	r1, r3
 80022e2:	480c      	ldr	r0, [pc, #48]	@ (8002314 <HAL_I2C_MspInit+0x110>)
 80022e4:	f000 fd3a 	bl	8002d5c <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 80022e8:	2300      	movs	r3, #0
 80022ea:	60fb      	str	r3, [r7, #12]
 80022ec:	4b08      	ldr	r3, [pc, #32]	@ (8002310 <HAL_I2C_MspInit+0x10c>)
 80022ee:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022f0:	4a07      	ldr	r2, [pc, #28]	@ (8002310 <HAL_I2C_MspInit+0x10c>)
 80022f2:	f443 0380 	orr.w	r3, r3, #4194304	@ 0x400000
 80022f6:	6413      	str	r3, [r2, #64]	@ 0x40
 80022f8:	4b05      	ldr	r3, [pc, #20]	@ (8002310 <HAL_I2C_MspInit+0x10c>)
 80022fa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80022fc:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8002300:	60fb      	str	r3, [r7, #12]
 8002302:	68fb      	ldr	r3, [r7, #12]
}
 8002304:	bf00      	nop
 8002306:	3730      	adds	r7, #48	@ 0x30
 8002308:	46bd      	mov	sp, r7
 800230a:	bd80      	pop	{r7, pc}
 800230c:	40005400 	.word	0x40005400
 8002310:	40023800 	.word	0x40023800
 8002314:	40020400 	.word	0x40020400
 8002318:	40005800 	.word	0x40005800

0800231c <HAL_UART_MspInit>:
  * This function configures the hardware resources used in this example
  * @param huart: UART handle pointer
  * @retval None
  */
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 800231c:	b580      	push	{r7, lr}
 800231e:	b08a      	sub	sp, #40	@ 0x28
 8002320:	af00      	add	r7, sp, #0
 8002322:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002324:	f107 0314 	add.w	r3, r7, #20
 8002328:	2200      	movs	r2, #0
 800232a:	601a      	str	r2, [r3, #0]
 800232c:	605a      	str	r2, [r3, #4]
 800232e:	609a      	str	r2, [r3, #8]
 8002330:	60da      	str	r2, [r3, #12]
 8002332:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART6)
 8002334:	687b      	ldr	r3, [r7, #4]
 8002336:	681b      	ldr	r3, [r3, #0]
 8002338:	4a1d      	ldr	r2, [pc, #116]	@ (80023b0 <HAL_UART_MspInit+0x94>)
 800233a:	4293      	cmp	r3, r2
 800233c:	d133      	bne.n	80023a6 <HAL_UART_MspInit+0x8a>
  {
    /* USER CODE BEGIN USART6_MspInit 0 */

    /* USER CODE END USART6_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART6_CLK_ENABLE();
 800233e:	2300      	movs	r3, #0
 8002340:	613b      	str	r3, [r7, #16]
 8002342:	4b1c      	ldr	r3, [pc, #112]	@ (80023b4 <HAL_UART_MspInit+0x98>)
 8002344:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002346:	4a1b      	ldr	r2, [pc, #108]	@ (80023b4 <HAL_UART_MspInit+0x98>)
 8002348:	f043 0320 	orr.w	r3, r3, #32
 800234c:	6453      	str	r3, [r2, #68]	@ 0x44
 800234e:	4b19      	ldr	r3, [pc, #100]	@ (80023b4 <HAL_UART_MspInit+0x98>)
 8002350:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002352:	f003 0320 	and.w	r3, r3, #32
 8002356:	613b      	str	r3, [r7, #16]
 8002358:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800235a:	2300      	movs	r3, #0
 800235c:	60fb      	str	r3, [r7, #12]
 800235e:	4b15      	ldr	r3, [pc, #84]	@ (80023b4 <HAL_UART_MspInit+0x98>)
 8002360:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8002362:	4a14      	ldr	r2, [pc, #80]	@ (80023b4 <HAL_UART_MspInit+0x98>)
 8002364:	f043 0304 	orr.w	r3, r3, #4
 8002368:	6313      	str	r3, [r2, #48]	@ 0x30
 800236a:	4b12      	ldr	r3, [pc, #72]	@ (80023b4 <HAL_UART_MspInit+0x98>)
 800236c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800236e:	f003 0304 	and.w	r3, r3, #4
 8002372:	60fb      	str	r3, [r7, #12]
 8002374:	68fb      	ldr	r3, [r7, #12]
    /**USART6 GPIO Configuration
    PC6     ------> USART6_TX
    PC7     ------> USART6_RX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002376:	23c0      	movs	r3, #192	@ 0xc0
 8002378:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800237a:	2302      	movs	r3, #2
 800237c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800237e:	2300      	movs	r3, #0
 8002380:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002382:	2303      	movs	r3, #3
 8002384:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002386:	2308      	movs	r3, #8
 8002388:	627b      	str	r3, [r7, #36]	@ 0x24
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800238a:	f107 0314 	add.w	r3, r7, #20
 800238e:	4619      	mov	r1, r3
 8002390:	4809      	ldr	r0, [pc, #36]	@ (80023b8 <HAL_UART_MspInit+0x9c>)
 8002392:	f000 fce3 	bl	8002d5c <HAL_GPIO_Init>

    /* USART6 interrupt Init */
    HAL_NVIC_SetPriority(USART6_IRQn, 0, 0);
 8002396:	2200      	movs	r2, #0
 8002398:	2100      	movs	r1, #0
 800239a:	2047      	movs	r0, #71	@ 0x47
 800239c:	f000 fc15 	bl	8002bca <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART6_IRQn);
 80023a0:	2047      	movs	r0, #71	@ 0x47
 80023a2:	f000 fc2e 	bl	8002c02 <HAL_NVIC_EnableIRQ>

    /* USER CODE END USART6_MspInit 1 */

  }

}
 80023a6:	bf00      	nop
 80023a8:	3728      	adds	r7, #40	@ 0x28
 80023aa:	46bd      	mov	sp, r7
 80023ac:	bd80      	pop	{r7, pc}
 80023ae:	bf00      	nop
 80023b0:	40011400 	.word	0x40011400
 80023b4:	40023800 	.word	0x40023800
 80023b8:	40020800 	.word	0x40020800

080023bc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80023bc:	b480      	push	{r7}
 80023be:	af00      	add	r7, sp, #0

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */

  /* USER CODE END NonMaskableInt_IRQn 1 */
}
 80023c0:	bf00      	nop
 80023c2:	46bd      	mov	sp, r7
 80023c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023c8:	4770      	bx	lr

080023ca <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80023ca:	b480      	push	{r7}
 80023cc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80023ce:	bf00      	nop
 80023d0:	e7fd      	b.n	80023ce <HardFault_Handler+0x4>

080023d2 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80023d2:	b480      	push	{r7}
 80023d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80023d6:	bf00      	nop
 80023d8:	e7fd      	b.n	80023d6 <MemManage_Handler+0x4>

080023da <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80023da:	b480      	push	{r7}
 80023dc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80023de:	bf00      	nop
 80023e0:	e7fd      	b.n	80023de <BusFault_Handler+0x4>

080023e2 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80023e2:	b480      	push	{r7}
 80023e4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80023e6:	bf00      	nop
 80023e8:	e7fd      	b.n	80023e6 <UsageFault_Handler+0x4>

080023ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80023ea:	b480      	push	{r7}
 80023ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80023ee:	bf00      	nop
 80023f0:	46bd      	mov	sp, r7
 80023f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023f6:	4770      	bx	lr

080023f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80023f8:	b480      	push	{r7}
 80023fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80023fc:	bf00      	nop
 80023fe:	46bd      	mov	sp, r7
 8002400:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002404:	4770      	bx	lr

08002406 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002406:	b480      	push	{r7}
 8002408:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800240a:	bf00      	nop
 800240c:	46bd      	mov	sp, r7
 800240e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002412:	4770      	bx	lr

08002414 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002414:	b580      	push	{r7, lr}
 8002416:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002418:	f000 fab8 	bl	800298c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800241c:	bf00      	nop
 800241e:	bd80      	pop	{r7, pc}

08002420 <USART6_IRQHandler>:

/**
  * @brief This function handles USART6 global interrupt.
  */
void USART6_IRQHandler(void)
{
 8002420:	b580      	push	{r7, lr}
 8002422:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART6_IRQn 0 */
  Uart_isr(&huart6);
 8002424:	4803      	ldr	r0, [pc, #12]	@ (8002434 <USART6_IRQHandler+0x14>)
 8002426:	f7ff f801 	bl	800142c <Uart_isr>
  /* USER CODE END USART6_IRQn 0 */
  HAL_UART_IRQHandler(&huart6);
 800242a:	4802      	ldr	r0, [pc, #8]	@ (8002434 <USART6_IRQHandler+0x14>)
 800242c:	f002 ffa6 	bl	800537c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART6_IRQn 1 */

  /* USER CODE END USART6_IRQn 1 */
}
 8002430:	bf00      	nop
 8002432:	bd80      	pop	{r7, pc}
 8002434:	200006b0 	.word	0x200006b0

08002438 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 8002438:	b480      	push	{r7}
 800243a:	af00      	add	r7, sp, #0
	return 1;
 800243c:	2301      	movs	r3, #1
}
 800243e:	4618      	mov	r0, r3
 8002440:	46bd      	mov	sp, r7
 8002442:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002446:	4770      	bx	lr

08002448 <_kill>:

int _kill(int pid, int sig)
{
 8002448:	b580      	push	{r7, lr}
 800244a:	b082      	sub	sp, #8
 800244c:	af00      	add	r7, sp, #0
 800244e:	6078      	str	r0, [r7, #4]
 8002450:	6039      	str	r1, [r7, #0]
	errno = EINVAL;
 8002452:	f004 fd6d 	bl	8006f30 <__errno>
 8002456:	4603      	mov	r3, r0
 8002458:	2216      	movs	r2, #22
 800245a:	601a      	str	r2, [r3, #0]
	return -1;
 800245c:	f04f 33ff 	mov.w	r3, #4294967295
}
 8002460:	4618      	mov	r0, r3
 8002462:	3708      	adds	r7, #8
 8002464:	46bd      	mov	sp, r7
 8002466:	bd80      	pop	{r7, pc}

08002468 <_exit>:

void _exit (int status)
{
 8002468:	b580      	push	{r7, lr}
 800246a:	b082      	sub	sp, #8
 800246c:	af00      	add	r7, sp, #0
 800246e:	6078      	str	r0, [r7, #4]
	_kill(status, -1);
 8002470:	f04f 31ff 	mov.w	r1, #4294967295
 8002474:	6878      	ldr	r0, [r7, #4]
 8002476:	f7ff ffe7 	bl	8002448 <_kill>
	while (1) {}		/* Make sure we hang here */
 800247a:	bf00      	nop
 800247c:	e7fd      	b.n	800247a <_exit+0x12>

0800247e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800247e:	b580      	push	{r7, lr}
 8002480:	b086      	sub	sp, #24
 8002482:	af00      	add	r7, sp, #0
 8002484:	60f8      	str	r0, [r7, #12]
 8002486:	60b9      	str	r1, [r7, #8]
 8002488:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 800248a:	2300      	movs	r3, #0
 800248c:	617b      	str	r3, [r7, #20]
 800248e:	e00a      	b.n	80024a6 <_read+0x28>
	{
		*ptr++ = __io_getchar();
 8002490:	f3af 8000 	nop.w
 8002494:	4601      	mov	r1, r0
 8002496:	68bb      	ldr	r3, [r7, #8]
 8002498:	1c5a      	adds	r2, r3, #1
 800249a:	60ba      	str	r2, [r7, #8]
 800249c:	b2ca      	uxtb	r2, r1
 800249e:	701a      	strb	r2, [r3, #0]
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024a0:	697b      	ldr	r3, [r7, #20]
 80024a2:	3301      	adds	r3, #1
 80024a4:	617b      	str	r3, [r7, #20]
 80024a6:	697a      	ldr	r2, [r7, #20]
 80024a8:	687b      	ldr	r3, [r7, #4]
 80024aa:	429a      	cmp	r2, r3
 80024ac:	dbf0      	blt.n	8002490 <_read+0x12>
	}

return len;
 80024ae:	687b      	ldr	r3, [r7, #4]
}
 80024b0:	4618      	mov	r0, r3
 80024b2:	3718      	adds	r7, #24
 80024b4:	46bd      	mov	sp, r7
 80024b6:	bd80      	pop	{r7, pc}

080024b8 <_write>:

__attribute__((weak)) int _write(int file, char *ptr, int len)
{
 80024b8:	b580      	push	{r7, lr}
 80024ba:	b086      	sub	sp, #24
 80024bc:	af00      	add	r7, sp, #0
 80024be:	60f8      	str	r0, [r7, #12]
 80024c0:	60b9      	str	r1, [r7, #8]
 80024c2:	607a      	str	r2, [r7, #4]
	int DataIdx;

	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024c4:	2300      	movs	r3, #0
 80024c6:	617b      	str	r3, [r7, #20]
 80024c8:	e009      	b.n	80024de <_write+0x26>
	{
		__io_putchar(*ptr++);
 80024ca:	68bb      	ldr	r3, [r7, #8]
 80024cc:	1c5a      	adds	r2, r3, #1
 80024ce:	60ba      	str	r2, [r7, #8]
 80024d0:	781b      	ldrb	r3, [r3, #0]
 80024d2:	4618      	mov	r0, r3
 80024d4:	f3af 8000 	nop.w
	for (DataIdx = 0; DataIdx < len; DataIdx++)
 80024d8:	697b      	ldr	r3, [r7, #20]
 80024da:	3301      	adds	r3, #1
 80024dc:	617b      	str	r3, [r7, #20]
 80024de:	697a      	ldr	r2, [r7, #20]
 80024e0:	687b      	ldr	r3, [r7, #4]
 80024e2:	429a      	cmp	r2, r3
 80024e4:	dbf1      	blt.n	80024ca <_write+0x12>
	}
	return len;
 80024e6:	687b      	ldr	r3, [r7, #4]
}
 80024e8:	4618      	mov	r0, r3
 80024ea:	3718      	adds	r7, #24
 80024ec:	46bd      	mov	sp, r7
 80024ee:	bd80      	pop	{r7, pc}

080024f0 <_close>:

int _close(int file)
{
 80024f0:	b480      	push	{r7}
 80024f2:	b083      	sub	sp, #12
 80024f4:	af00      	add	r7, sp, #0
 80024f6:	6078      	str	r0, [r7, #4]
	return -1;
 80024f8:	f04f 33ff 	mov.w	r3, #4294967295
}
 80024fc:	4618      	mov	r0, r3
 80024fe:	370c      	adds	r7, #12
 8002500:	46bd      	mov	sp, r7
 8002502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002506:	4770      	bx	lr

08002508 <_fstat>:


int _fstat(int file, struct stat *st)
{
 8002508:	b480      	push	{r7}
 800250a:	b083      	sub	sp, #12
 800250c:	af00      	add	r7, sp, #0
 800250e:	6078      	str	r0, [r7, #4]
 8002510:	6039      	str	r1, [r7, #0]
	st->st_mode = S_IFCHR;
 8002512:	683b      	ldr	r3, [r7, #0]
 8002514:	f44f 5200 	mov.w	r2, #8192	@ 0x2000
 8002518:	605a      	str	r2, [r3, #4]
	return 0;
 800251a:	2300      	movs	r3, #0
}
 800251c:	4618      	mov	r0, r3
 800251e:	370c      	adds	r7, #12
 8002520:	46bd      	mov	sp, r7
 8002522:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002526:	4770      	bx	lr

08002528 <_isatty>:

int _isatty(int file)
{
 8002528:	b480      	push	{r7}
 800252a:	b083      	sub	sp, #12
 800252c:	af00      	add	r7, sp, #0
 800252e:	6078      	str	r0, [r7, #4]
	return 1;
 8002530:	2301      	movs	r3, #1
}
 8002532:	4618      	mov	r0, r3
 8002534:	370c      	adds	r7, #12
 8002536:	46bd      	mov	sp, r7
 8002538:	f85d 7b04 	ldr.w	r7, [sp], #4
 800253c:	4770      	bx	lr

0800253e <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800253e:	b480      	push	{r7}
 8002540:	b085      	sub	sp, #20
 8002542:	af00      	add	r7, sp, #0
 8002544:	60f8      	str	r0, [r7, #12]
 8002546:	60b9      	str	r1, [r7, #8]
 8002548:	607a      	str	r2, [r7, #4]
	return 0;
 800254a:	2300      	movs	r3, #0
}
 800254c:	4618      	mov	r0, r3
 800254e:	3714      	adds	r7, #20
 8002550:	46bd      	mov	sp, r7
 8002552:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002556:	4770      	bx	lr

08002558 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002558:	b580      	push	{r7, lr}
 800255a:	b086      	sub	sp, #24
 800255c:	af00      	add	r7, sp, #0
 800255e:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002560:	4a14      	ldr	r2, [pc, #80]	@ (80025b4 <_sbrk+0x5c>)
 8002562:	4b15      	ldr	r3, [pc, #84]	@ (80025b8 <_sbrk+0x60>)
 8002564:	1ad3      	subs	r3, r2, r3
 8002566:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002568:	697b      	ldr	r3, [r7, #20]
 800256a:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initalize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800256c:	4b13      	ldr	r3, [pc, #76]	@ (80025bc <_sbrk+0x64>)
 800256e:	681b      	ldr	r3, [r3, #0]
 8002570:	2b00      	cmp	r3, #0
 8002572:	d102      	bne.n	800257a <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002574:	4b11      	ldr	r3, [pc, #68]	@ (80025bc <_sbrk+0x64>)
 8002576:	4a12      	ldr	r2, [pc, #72]	@ (80025c0 <_sbrk+0x68>)
 8002578:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800257a:	4b10      	ldr	r3, [pc, #64]	@ (80025bc <_sbrk+0x64>)
 800257c:	681a      	ldr	r2, [r3, #0]
 800257e:	687b      	ldr	r3, [r7, #4]
 8002580:	4413      	add	r3, r2
 8002582:	693a      	ldr	r2, [r7, #16]
 8002584:	429a      	cmp	r2, r3
 8002586:	d207      	bcs.n	8002598 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002588:	f004 fcd2 	bl	8006f30 <__errno>
 800258c:	4603      	mov	r3, r0
 800258e:	220c      	movs	r2, #12
 8002590:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002592:	f04f 33ff 	mov.w	r3, #4294967295
 8002596:	e009      	b.n	80025ac <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002598:	4b08      	ldr	r3, [pc, #32]	@ (80025bc <_sbrk+0x64>)
 800259a:	681b      	ldr	r3, [r3, #0]
 800259c:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800259e:	4b07      	ldr	r3, [pc, #28]	@ (80025bc <_sbrk+0x64>)
 80025a0:	681a      	ldr	r2, [r3, #0]
 80025a2:	687b      	ldr	r3, [r7, #4]
 80025a4:	4413      	add	r3, r2
 80025a6:	4a05      	ldr	r2, [pc, #20]	@ (80025bc <_sbrk+0x64>)
 80025a8:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 80025aa:	68fb      	ldr	r3, [r7, #12]
}
 80025ac:	4618      	mov	r0, r3
 80025ae:	3718      	adds	r7, #24
 80025b0:	46bd      	mov	sp, r7
 80025b2:	bd80      	pop	{r7, pc}
 80025b4:	20020000 	.word	0x20020000
 80025b8:	00000400 	.word	0x00000400
 80025bc:	20000754 	.word	0x20000754
 80025c0:	200008c0 	.word	0x200008c0

080025c4 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 80025c4:	b480      	push	{r7}
 80025c6:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 80025c8:	4b08      	ldr	r3, [pc, #32]	@ (80025ec <SystemInit+0x28>)
 80025ca:	f8d3 3088 	ldr.w	r3, [r3, #136]	@ 0x88
 80025ce:	4a07      	ldr	r2, [pc, #28]	@ (80025ec <SystemInit+0x28>)
 80025d0:	f443 0370 	orr.w	r3, r3, #15728640	@ 0xf00000
 80025d4:	f8c2 3088 	str.w	r3, [r2, #136]	@ 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 80025d8:	4b04      	ldr	r3, [pc, #16]	@ (80025ec <SystemInit+0x28>)
 80025da:	f04f 6200 	mov.w	r2, #134217728	@ 0x8000000
 80025de:	609a      	str	r2, [r3, #8]
#endif
}
 80025e0:	bf00      	nop
 80025e2:	46bd      	mov	sp, r7
 80025e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80025e8:	4770      	bx	lr
 80025ea:	bf00      	nop
 80025ec:	e000ed00 	.word	0xe000ed00

080025f0 <VEML7700_Init>:
//float luminosity = 0.0;
float totalLuminosity = 0.0f;
uint8_t sampleCountLight = 0;

// Configuración del sensor
void VEML7700_Init(void) {
 80025f0:	b580      	push	{r7, lr}
 80025f2:	b086      	sub	sp, #24
 80025f4:	af04      	add	r7, sp, #16
    uint8_t config[2] = { 0x00, 0x00 };  // GAIN x1, IT 100ms, sensor encendido
 80025f6:	2300      	movs	r3, #0
 80025f8:	80bb      	strh	r3, [r7, #4]
    HAL_I2C_Mem_Write(&hi2c2, VEML7700_I2C_ADDR, VEML7700_REG_CONF, I2C_MEMADD_SIZE_8BIT, config, 2, HAL_MAX_DELAY);
 80025fa:	f04f 33ff 	mov.w	r3, #4294967295
 80025fe:	9302      	str	r3, [sp, #8]
 8002600:	2302      	movs	r3, #2
 8002602:	9301      	str	r3, [sp, #4]
 8002604:	1d3b      	adds	r3, r7, #4
 8002606:	9300      	str	r3, [sp, #0]
 8002608:	2301      	movs	r3, #1
 800260a:	2200      	movs	r2, #0
 800260c:	2120      	movs	r1, #32
 800260e:	4805      	ldr	r0, [pc, #20]	@ (8002624 <VEML7700_Init+0x34>)
 8002610:	f001 f99c 	bl	800394c <HAL_I2C_Mem_Write>
    HAL_Delay(5);
 8002614:	2005      	movs	r0, #5
 8002616:	f000 f9d9 	bl	80029cc <HAL_Delay>
}
 800261a:	bf00      	nop
 800261c:	3708      	adds	r7, #8
 800261e:	46bd      	mov	sp, r7
 8002620:	bd80      	pop	{r7, pc}
 8002622:	bf00      	nop
 8002624:	2000065c 	.word	0x2000065c

08002628 <ReadVEML7700>:

// Lectura de luminosidad
void ReadVEML7700(float *lux) {
 8002628:	b580      	push	{r7, lr}
 800262a:	b088      	sub	sp, #32
 800262c:	af04      	add	r7, sp, #16
 800262e:	6078      	str	r0, [r7, #4]
    uint8_t buffer[2] = { 0x00, 0x00 };
 8002630:	2300      	movs	r3, #0
 8002632:	81bb      	strh	r3, [r7, #12]
    HAL_I2C_Mem_Read(&hi2c2, VEML7700_I2C_ADDR, VEML7700_REG_ALS, I2C_MEMADD_SIZE_8BIT, buffer, 2, HAL_MAX_DELAY);
 8002634:	f04f 33ff 	mov.w	r3, #4294967295
 8002638:	9302      	str	r3, [sp, #8]
 800263a:	2302      	movs	r3, #2
 800263c:	9301      	str	r3, [sp, #4]
 800263e:	f107 030c 	add.w	r3, r7, #12
 8002642:	9300      	str	r3, [sp, #0]
 8002644:	2301      	movs	r3, #1
 8002646:	2204      	movs	r2, #4
 8002648:	2120      	movs	r1, #32
 800264a:	4815      	ldr	r0, [pc, #84]	@ (80026a0 <ReadVEML7700+0x78>)
 800264c:	f001 fa78 	bl	8003b40 <HAL_I2C_Mem_Read>

    lux_raw = (buffer[1] << 8) | buffer[0]; // Convertir a 16 bits
 8002650:	7b7b      	ldrb	r3, [r7, #13]
 8002652:	b21b      	sxth	r3, r3
 8002654:	021b      	lsls	r3, r3, #8
 8002656:	b21a      	sxth	r2, r3
 8002658:	7b3b      	ldrb	r3, [r7, #12]
 800265a:	b21b      	sxth	r3, r3
 800265c:	4313      	orrs	r3, r2
 800265e:	b21b      	sxth	r3, r3
 8002660:	b29a      	uxth	r2, r3
 8002662:	4b10      	ldr	r3, [pc, #64]	@ (80026a4 <ReadVEML7700+0x7c>)
 8002664:	801a      	strh	r2, [r3, #0]
    *lux = lux_raw * 0.0036; // Factor de conversión del datasheet
 8002666:	4b0f      	ldr	r3, [pc, #60]	@ (80026a4 <ReadVEML7700+0x7c>)
 8002668:	881b      	ldrh	r3, [r3, #0]
 800266a:	4618      	mov	r0, r3
 800266c:	f7fd ff62 	bl	8000534 <__aeabi_i2d>
 8002670:	a309      	add	r3, pc, #36	@ (adr r3, 8002698 <ReadVEML7700+0x70>)
 8002672:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002676:	f7fd ffc7 	bl	8000608 <__aeabi_dmul>
 800267a:	4602      	mov	r2, r0
 800267c:	460b      	mov	r3, r1
 800267e:	4610      	mov	r0, r2
 8002680:	4619      	mov	r1, r3
 8002682:	f7fe fa99 	bl	8000bb8 <__aeabi_d2f>
 8002686:	4602      	mov	r2, r0
 8002688:	687b      	ldr	r3, [r7, #4]
 800268a:	601a      	str	r2, [r3, #0]
}
 800268c:	bf00      	nop
 800268e:	3710      	adds	r7, #16
 8002690:	46bd      	mov	sp, r7
 8002692:	bd80      	pop	{r7, pc}
 8002694:	f3af 8000 	nop.w
 8002698:	487fcb92 	.word	0x487fcb92
 800269c:	3f6d7dbf 	.word	0x3f6d7dbf
 80026a0:	2000065c 	.word	0x2000065c
 80026a4:	20000758 	.word	0x20000758

080026a8 <sendDataToThingSpeak>:
static float wifiTemperature;
static float wifiHumidity;
static float wifiLuminosity;


void sendDataToThingSpeak(const char* apiKey, float averageTemperature, float humidity, float luminosity) {	// Almacena los datos a enviar a ThingSpeak y establece el estado para iniciar la máquina de estados
 80026a8:	b480      	push	{r7}
 80026aa:	b085      	sub	sp, #20
 80026ac:	af00      	add	r7, sp, #0
 80026ae:	60f8      	str	r0, [r7, #12]
 80026b0:	ed87 0a02 	vstr	s0, [r7, #8]
 80026b4:	edc7 0a01 	vstr	s1, [r7, #4]
 80026b8:	ed87 1a00 	vstr	s2, [r7]
    wifiApiKey = apiKey;
 80026bc:	4a0a      	ldr	r2, [pc, #40]	@ (80026e8 <sendDataToThingSpeak+0x40>)
 80026be:	68fb      	ldr	r3, [r7, #12]
 80026c0:	6013      	str	r3, [r2, #0]
    wifiTemperature = averageTemperature;
 80026c2:	4a0a      	ldr	r2, [pc, #40]	@ (80026ec <sendDataToThingSpeak+0x44>)
 80026c4:	68bb      	ldr	r3, [r7, #8]
 80026c6:	6013      	str	r3, [r2, #0]
    wifiHumidity = humidity;
 80026c8:	4a09      	ldr	r2, [pc, #36]	@ (80026f0 <sendDataToThingSpeak+0x48>)
 80026ca:	687b      	ldr	r3, [r7, #4]
 80026cc:	6013      	str	r3, [r2, #0]
    wifiLuminosity = luminosity;
 80026ce:	4a09      	ldr	r2, [pc, #36]	@ (80026f4 <sendDataToThingSpeak+0x4c>)
 80026d0:	683b      	ldr	r3, [r7, #0]
 80026d2:	6013      	str	r3, [r2, #0]
    thingSpeakState = 2; // Iniciar la máquina de estados
 80026d4:	4b08      	ldr	r3, [pc, #32]	@ (80026f8 <sendDataToThingSpeak+0x50>)
 80026d6:	2202      	movs	r2, #2
 80026d8:	701a      	strb	r2, [r3, #0]
}
 80026da:	bf00      	nop
 80026dc:	3714      	adds	r7, #20
 80026de:	46bd      	mov	sp, r7
 80026e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80026e4:	4770      	bx	lr
 80026e6:	bf00      	nop
 80026e8:	2000075c 	.word	0x2000075c
 80026ec:	20000760 	.word	0x20000760
 80026f0:	20000764 	.word	0x20000764
 80026f4:	20000768 	.word	0x20000768
 80026f8:	2000075a 	.word	0x2000075a

080026fc <processThingSpeakStateMachine>:

void processThingSpeakStateMachine() {	// Maneja el proceso de comunicación con ThingSpeak a través de comandos AT y gestiona las respuestas del ESP8266 en una máquina de estados
 80026fc:	e92d 43f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, lr}
 8002700:	b0c7      	sub	sp, #284	@ 0x11c
 8002702:	af06      	add	r7, sp, #24
    switch (thingSpeakState) {
 8002704:	4b57      	ldr	r3, [pc, #348]	@ (8002864 <processThingSpeakStateMachine+0x168>)
 8002706:	781b      	ldrb	r3, [r3, #0]
 8002708:	3b01      	subs	r3, #1
 800270a:	2b04      	cmp	r3, #4
 800270c:	f200 809e 	bhi.w	800284c <processThingSpeakStateMachine+0x150>
 8002710:	a201      	add	r2, pc, #4	@ (adr r2, 8002718 <processThingSpeakStateMachine+0x1c>)
 8002712:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002716:	bf00      	nop
 8002718:	0800272d 	.word	0x0800272d
 800271c:	08002739 	.word	0x08002739
 8002720:	08002759 	.word	0x08002759
 8002724:	080027d5 	.word	0x080027d5
 8002728:	08002841 	.word	0x08002841
		case 1: {  // Cerrar conexión
			closeConnection();
 800272c:	f7fe fedc 	bl	80014e8 <closeConnection>
			thingSpeakState = 2;
 8002730:	4b4c      	ldr	r3, [pc, #304]	@ (8002864 <processThingSpeakStateMachine+0x168>)
 8002732:	2202      	movs	r2, #2
 8002734:	701a      	strb	r2, [r3, #0]
			break;
 8002736:	e08f      	b.n	8002858 <processThingSpeakStateMachine+0x15c>

		}
        case 2: {
        	Uart_flush();
 8002738:	f7fe fddc 	bl	80012f4 <Uart_flush>
        	Uart_sendstring("AT+CIPSTART=\"TCP\",\"api.thingspeak.com\",80\r\n");
 800273c:	484a      	ldr	r0, [pc, #296]	@ (8002868 <processThingSpeakStateMachine+0x16c>)
 800273e:	f7fe fd79 	bl	8001234 <Uart_sendstring>
        	while (!(Wait_for("OK\r\n")));
 8002742:	bf00      	nop
 8002744:	4849      	ldr	r0, [pc, #292]	@ (800286c <processThingSpeakStateMachine+0x170>)
 8002746:	f7fe fe1b 	bl	8001380 <Wait_for>
 800274a:	4603      	mov	r3, r0
 800274c:	2b00      	cmp	r3, #0
 800274e:	d0f9      	beq.n	8002744 <processThingSpeakStateMachine+0x48>
        	thingSpeakState = 3;
 8002750:	4b44      	ldr	r3, [pc, #272]	@ (8002864 <processThingSpeakStateMachine+0x168>)
 8002752:	2203      	movs	r2, #3
 8002754:	701a      	strb	r2, [r3, #0]
            break;
 8002756:	e07f      	b.n	8002858 <processThingSpeakStateMachine+0x15c>
        }
        case 3: {
        	Uart_flush();
 8002758:	f7fe fdcc 	bl	80012f4 <Uart_flush>

            // Generar la petición primero
            char http_request[250];
            sprintf(http_request, "GET /update?api_key=%s&field1=%.2f&field2=%.2f&field3=%.2f HTTP/1.1\r\nHost: api.thingspeak.com\r\nConnection: close\r\n\r\n", wifiApiKey, wifiTemperature, wifiHumidity, wifiLuminosity);
 800275c:	4b44      	ldr	r3, [pc, #272]	@ (8002870 <processThingSpeakStateMachine+0x174>)
 800275e:	681e      	ldr	r6, [r3, #0]
 8002760:	4b44      	ldr	r3, [pc, #272]	@ (8002874 <processThingSpeakStateMachine+0x178>)
 8002762:	681b      	ldr	r3, [r3, #0]
 8002764:	4618      	mov	r0, r3
 8002766:	f7fd fef7 	bl	8000558 <__aeabi_f2d>
 800276a:	4604      	mov	r4, r0
 800276c:	460d      	mov	r5, r1
 800276e:	4b42      	ldr	r3, [pc, #264]	@ (8002878 <processThingSpeakStateMachine+0x17c>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4618      	mov	r0, r3
 8002774:	f7fd fef0 	bl	8000558 <__aeabi_f2d>
 8002778:	4680      	mov	r8, r0
 800277a:	4689      	mov	r9, r1
 800277c:	4b3f      	ldr	r3, [pc, #252]	@ (800287c <processThingSpeakStateMachine+0x180>)
 800277e:	681b      	ldr	r3, [r3, #0]
 8002780:	4618      	mov	r0, r3
 8002782:	f7fd fee9 	bl	8000558 <__aeabi_f2d>
 8002786:	4602      	mov	r2, r0
 8002788:	460b      	mov	r3, r1
 800278a:	1d38      	adds	r0, r7, #4
 800278c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8002790:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002794:	e9cd 4500 	strd	r4, r5, [sp]
 8002798:	4632      	mov	r2, r6
 800279a:	4939      	ldr	r1, [pc, #228]	@ (8002880 <processThingSpeakStateMachine+0x184>)
 800279c:	f004 fa7c 	bl	8006c98 <siprintf>

            // Enviar AT+CIPSEND con longitud correcta
            Uart_sendstring("AT+CIPSEND=");
 80027a0:	4838      	ldr	r0, [pc, #224]	@ (8002884 <processThingSpeakStateMachine+0x188>)
 80027a2:	f7fe fd47 	bl	8001234 <Uart_sendstring>
            Uart_printbase(strlen(http_request), 10);
 80027a6:	1d3b      	adds	r3, r7, #4
 80027a8:	4618      	mov	r0, r3
 80027aa:	f7fd fd69 	bl	8000280 <strlen>
 80027ae:	4603      	mov	r3, r0
 80027b0:	210a      	movs	r1, #10
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fe fd53 	bl	800125e <Uart_printbase>
            Uart_sendstring("\r\n");
 80027b8:	4833      	ldr	r0, [pc, #204]	@ (8002888 <processThingSpeakStateMachine+0x18c>)
 80027ba:	f7fe fd3b 	bl	8001234 <Uart_sendstring>

            while (!Wait_for(">"));
 80027be:	bf00      	nop
 80027c0:	4832      	ldr	r0, [pc, #200]	@ (800288c <processThingSpeakStateMachine+0x190>)
 80027c2:	f7fe fddd 	bl	8001380 <Wait_for>
 80027c6:	4603      	mov	r3, r0
 80027c8:	2b00      	cmp	r3, #0
 80027ca:	d0f9      	beq.n	80027c0 <processThingSpeakStateMachine+0xc4>
            thingSpeakState = 4;
 80027cc:	4b25      	ldr	r3, [pc, #148]	@ (8002864 <processThingSpeakStateMachine+0x168>)
 80027ce:	2204      	movs	r2, #4
 80027d0:	701a      	strb	r2, [r3, #0]
            break;
 80027d2:	e041      	b.n	8002858 <processThingSpeakStateMachine+0x15c>
        }
        case 4: {				// Envio mensaje con los campos
        	Uart_flush();
 80027d4:	f7fe fd8e 	bl	80012f4 <Uart_flush>
        	char http_request[250];
        	sprintf(http_request, "GET /update?api_key=%s&field1=%.2f&field2=%.2f&field3=%.2f HTTP/1.1\r\nHost: api.thingspeak.com\r\nConnection: close\r\n\r\n", wifiApiKey, wifiTemperature, wifiHumidity, wifiLuminosity);
 80027d8:	4b25      	ldr	r3, [pc, #148]	@ (8002870 <processThingSpeakStateMachine+0x174>)
 80027da:	681e      	ldr	r6, [r3, #0]
 80027dc:	4b25      	ldr	r3, [pc, #148]	@ (8002874 <processThingSpeakStateMachine+0x178>)
 80027de:	681b      	ldr	r3, [r3, #0]
 80027e0:	4618      	mov	r0, r3
 80027e2:	f7fd feb9 	bl	8000558 <__aeabi_f2d>
 80027e6:	4604      	mov	r4, r0
 80027e8:	460d      	mov	r5, r1
 80027ea:	4b23      	ldr	r3, [pc, #140]	@ (8002878 <processThingSpeakStateMachine+0x17c>)
 80027ec:	681b      	ldr	r3, [r3, #0]
 80027ee:	4618      	mov	r0, r3
 80027f0:	f7fd feb2 	bl	8000558 <__aeabi_f2d>
 80027f4:	4680      	mov	r8, r0
 80027f6:	4689      	mov	r9, r1
 80027f8:	4b20      	ldr	r3, [pc, #128]	@ (800287c <processThingSpeakStateMachine+0x180>)
 80027fa:	681b      	ldr	r3, [r3, #0]
 80027fc:	4618      	mov	r0, r3
 80027fe:	f7fd feab 	bl	8000558 <__aeabi_f2d>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	1d38      	adds	r0, r7, #4
 8002808:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800280c:	e9cd 8902 	strd	r8, r9, [sp, #8]
 8002810:	e9cd 4500 	strd	r4, r5, [sp]
 8002814:	4632      	mov	r2, r6
 8002816:	491a      	ldr	r1, [pc, #104]	@ (8002880 <processThingSpeakStateMachine+0x184>)
 8002818:	f004 fa3e 	bl	8006c98 <siprintf>

        	Uart_sendstring(http_request);
 800281c:	1d3b      	adds	r3, r7, #4
 800281e:	4618      	mov	r0, r3
 8002820:	f7fe fd08 	bl	8001234 <Uart_sendstring>
        	if (Wait_for("SEND OK\r\n")) {
 8002824:	481a      	ldr	r0, [pc, #104]	@ (8002890 <processThingSpeakStateMachine+0x194>)
 8002826:	f7fe fdab 	bl	8001380 <Wait_for>
 800282a:	4603      	mov	r3, r0
 800282c:	2b00      	cmp	r3, #0
 800282e:	d003      	beq.n	8002838 <processThingSpeakStateMachine+0x13c>
				thingSpeakState = 5;
 8002830:	4b0c      	ldr	r3, [pc, #48]	@ (8002864 <processThingSpeakStateMachine+0x168>)
 8002832:	2205      	movs	r2, #5
 8002834:	701a      	strb	r2, [r3, #0]
			}

//
//			while (!(Wait_for("OK\r\n")));
//			thingSpeakState = 4;
			break;
 8002836:	e00f      	b.n	8002858 <processThingSpeakStateMachine+0x15c>
				thingSpeakState = 0;  // Error → reiniciar
 8002838:	4b0a      	ldr	r3, [pc, #40]	@ (8002864 <processThingSpeakStateMachine+0x168>)
 800283a:	2200      	movs	r2, #0
 800283c:	701a      	strb	r2, [r3, #0]
			break;
 800283e:	e00b      	b.n	8002858 <processThingSpeakStateMachine+0x15c>
        }

        case 5: {  // Cerrar conexión
			closeConnection();
 8002840:	f7fe fe52 	bl	80014e8 <closeConnection>
			thingSpeakState = 0;
 8002844:	4b07      	ldr	r3, [pc, #28]	@ (8002864 <processThingSpeakStateMachine+0x168>)
 8002846:	2200      	movs	r2, #0
 8002848:	701a      	strb	r2, [r3, #0]
			break;
 800284a:	e005      	b.n	8002858 <processThingSpeakStateMachine+0x15c>
		}
		default:{
			closeConnection();
 800284c:	f7fe fe4c 	bl	80014e8 <closeConnection>
			thingSpeakState = 0;
 8002850:	4b04      	ldr	r3, [pc, #16]	@ (8002864 <processThingSpeakStateMachine+0x168>)
 8002852:	2200      	movs	r2, #0
 8002854:	701a      	strb	r2, [r3, #0]
			break;
 8002856:	bf00      	nop
		}
	}
}
 8002858:	bf00      	nop
 800285a:	f507 7782 	add.w	r7, r7, #260	@ 0x104
 800285e:	46bd      	mov	sp, r7
 8002860:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8002864:	2000075a 	.word	0x2000075a
 8002868:	080090f0 	.word	0x080090f0
 800286c:	0800911c 	.word	0x0800911c
 8002870:	2000075c 	.word	0x2000075c
 8002874:	20000760 	.word	0x20000760
 8002878:	20000764 	.word	0x20000764
 800287c:	20000768 	.word	0x20000768
 8002880:	08009124 	.word	0x08009124
 8002884:	0800919c 	.word	0x0800919c
 8002888:	080091a8 	.word	0x080091a8
 800288c:	080091ac 	.word	0x080091ac
 8002890:	080091b0 	.word	0x080091b0

08002894 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002894:	f8df d034 	ldr.w	sp, [pc, #52]	@ 80028cc <LoopFillZerobss+0xe>

/* Call the clock system initialization function.*/
  bl  SystemInit   
 8002898:	f7ff fe94 	bl	80025c4 <SystemInit>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 800289c:	480c      	ldr	r0, [pc, #48]	@ (80028d0 <LoopFillZerobss+0x12>)
  ldr r1, =_edata
 800289e:	490d      	ldr	r1, [pc, #52]	@ (80028d4 <LoopFillZerobss+0x16>)
  ldr r2, =_sidata
 80028a0:	4a0d      	ldr	r2, [pc, #52]	@ (80028d8 <LoopFillZerobss+0x1a>)
  movs r3, #0
 80028a2:	2300      	movs	r3, #0
  b LoopCopyDataInit
 80028a4:	e002      	b.n	80028ac <LoopCopyDataInit>

080028a6 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 80028a6:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 80028a8:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 80028aa:	3304      	adds	r3, #4

080028ac <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 80028ac:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 80028ae:	428c      	cmp	r4, r1
  bcc CopyDataInit
 80028b0:	d3f9      	bcc.n	80028a6 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 80028b2:	4a0a      	ldr	r2, [pc, #40]	@ (80028dc <LoopFillZerobss+0x1e>)
  ldr r4, =_ebss
 80028b4:	4c0a      	ldr	r4, [pc, #40]	@ (80028e0 <LoopFillZerobss+0x22>)
  movs r3, #0
 80028b6:	2300      	movs	r3, #0
  b LoopFillZerobss
 80028b8:	e001      	b.n	80028be <LoopFillZerobss>

080028ba <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 80028ba:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 80028bc:	3204      	adds	r2, #4

080028be <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 80028be:	42a2      	cmp	r2, r4
  bcc FillZerobss
 80028c0:	d3fb      	bcc.n	80028ba <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 80028c2:	f004 fb3b 	bl	8006f3c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 80028c6:	f7fe fe1f 	bl	8001508 <main>
  bx  lr    
 80028ca:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 80028cc:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 80028d0:	20000000 	.word	0x20000000
  ldr r1, =_edata
 80028d4:	200001d4 	.word	0x200001d4
  ldr r2, =_sidata
 80028d8:	0800955c 	.word	0x0800955c
  ldr r2, =_sbss
 80028dc:	200001d4 	.word	0x200001d4
  ldr r4, =_ebss
 80028e0:	200008bc 	.word	0x200008bc

080028e4 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80028e4:	e7fe      	b.n	80028e4 <ADC_IRQHandler>
	...

080028e8 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80028e8:	b580      	push	{r7, lr}
 80028ea:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80028ec:	4b0e      	ldr	r3, [pc, #56]	@ (8002928 <HAL_Init+0x40>)
 80028ee:	681b      	ldr	r3, [r3, #0]
 80028f0:	4a0d      	ldr	r2, [pc, #52]	@ (8002928 <HAL_Init+0x40>)
 80028f2:	f443 7300 	orr.w	r3, r3, #512	@ 0x200
 80028f6:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80028f8:	4b0b      	ldr	r3, [pc, #44]	@ (8002928 <HAL_Init+0x40>)
 80028fa:	681b      	ldr	r3, [r3, #0]
 80028fc:	4a0a      	ldr	r2, [pc, #40]	@ (8002928 <HAL_Init+0x40>)
 80028fe:	f443 6380 	orr.w	r3, r3, #1024	@ 0x400
 8002902:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002904:	4b08      	ldr	r3, [pc, #32]	@ (8002928 <HAL_Init+0x40>)
 8002906:	681b      	ldr	r3, [r3, #0]
 8002908:	4a07      	ldr	r2, [pc, #28]	@ (8002928 <HAL_Init+0x40>)
 800290a:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 800290e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002910:	2003      	movs	r0, #3
 8002912:	f000 f94f 	bl	8002bb4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002916:	2000      	movs	r0, #0
 8002918:	f000 f808 	bl	800292c <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 800291c:	f7ff fc4a 	bl	80021b4 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002920:	2300      	movs	r3, #0
}
 8002922:	4618      	mov	r0, r3
 8002924:	bd80      	pop	{r7, pc}
 8002926:	bf00      	nop
 8002928:	40023c00 	.word	0x40023c00

0800292c <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800292c:	b580      	push	{r7, lr}
 800292e:	b082      	sub	sp, #8
 8002930:	af00      	add	r7, sp, #0
 8002932:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002934:	4b12      	ldr	r3, [pc, #72]	@ (8002980 <HAL_InitTick+0x54>)
 8002936:	681a      	ldr	r2, [r3, #0]
 8002938:	4b12      	ldr	r3, [pc, #72]	@ (8002984 <HAL_InitTick+0x58>)
 800293a:	781b      	ldrb	r3, [r3, #0]
 800293c:	4619      	mov	r1, r3
 800293e:	f44f 737a 	mov.w	r3, #1000	@ 0x3e8
 8002942:	fbb3 f3f1 	udiv	r3, r3, r1
 8002946:	fbb2 f3f3 	udiv	r3, r2, r3
 800294a:	4618      	mov	r0, r3
 800294c:	f000 f967 	bl	8002c1e <HAL_SYSTICK_Config>
 8002950:	4603      	mov	r3, r0
 8002952:	2b00      	cmp	r3, #0
 8002954:	d001      	beq.n	800295a <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002956:	2301      	movs	r3, #1
 8002958:	e00e      	b.n	8002978 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800295a:	687b      	ldr	r3, [r7, #4]
 800295c:	2b0f      	cmp	r3, #15
 800295e:	d80a      	bhi.n	8002976 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002960:	2200      	movs	r2, #0
 8002962:	6879      	ldr	r1, [r7, #4]
 8002964:	f04f 30ff 	mov.w	r0, #4294967295
 8002968:	f000 f92f 	bl	8002bca <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800296c:	4a06      	ldr	r2, [pc, #24]	@ (8002988 <HAL_InitTick+0x5c>)
 800296e:	687b      	ldr	r3, [r7, #4]
 8002970:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002972:	2300      	movs	r3, #0
 8002974:	e000      	b.n	8002978 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002976:	2301      	movs	r3, #1
}
 8002978:	4618      	mov	r0, r3
 800297a:	3708      	adds	r7, #8
 800297c:	46bd      	mov	sp, r7
 800297e:	bd80      	pop	{r7, pc}
 8002980:	20000000 	.word	0x20000000
 8002984:	20000008 	.word	0x20000008
 8002988:	20000004 	.word	0x20000004

0800298c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800298c:	b480      	push	{r7}
 800298e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002990:	4b06      	ldr	r3, [pc, #24]	@ (80029ac <HAL_IncTick+0x20>)
 8002992:	781b      	ldrb	r3, [r3, #0]
 8002994:	461a      	mov	r2, r3
 8002996:	4b06      	ldr	r3, [pc, #24]	@ (80029b0 <HAL_IncTick+0x24>)
 8002998:	681b      	ldr	r3, [r3, #0]
 800299a:	4413      	add	r3, r2
 800299c:	4a04      	ldr	r2, [pc, #16]	@ (80029b0 <HAL_IncTick+0x24>)
 800299e:	6013      	str	r3, [r2, #0]
}
 80029a0:	bf00      	nop
 80029a2:	46bd      	mov	sp, r7
 80029a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029a8:	4770      	bx	lr
 80029aa:	bf00      	nop
 80029ac:	20000008 	.word	0x20000008
 80029b0:	2000076c 	.word	0x2000076c

080029b4 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 80029b4:	b480      	push	{r7}
 80029b6:	af00      	add	r7, sp, #0
  return uwTick;
 80029b8:	4b03      	ldr	r3, [pc, #12]	@ (80029c8 <HAL_GetTick+0x14>)
 80029ba:	681b      	ldr	r3, [r3, #0]
}
 80029bc:	4618      	mov	r0, r3
 80029be:	46bd      	mov	sp, r7
 80029c0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80029c4:	4770      	bx	lr
 80029c6:	bf00      	nop
 80029c8:	2000076c 	.word	0x2000076c

080029cc <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 80029cc:	b580      	push	{r7, lr}
 80029ce:	b084      	sub	sp, #16
 80029d0:	af00      	add	r7, sp, #0
 80029d2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 80029d4:	f7ff ffee 	bl	80029b4 <HAL_GetTick>
 80029d8:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 80029da:	687b      	ldr	r3, [r7, #4]
 80029dc:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 80029de:	68fb      	ldr	r3, [r7, #12]
 80029e0:	f1b3 3fff 	cmp.w	r3, #4294967295
 80029e4:	d005      	beq.n	80029f2 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 80029e6:	4b0a      	ldr	r3, [pc, #40]	@ (8002a10 <HAL_Delay+0x44>)
 80029e8:	781b      	ldrb	r3, [r3, #0]
 80029ea:	461a      	mov	r2, r3
 80029ec:	68fb      	ldr	r3, [r7, #12]
 80029ee:	4413      	add	r3, r2
 80029f0:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 80029f2:	bf00      	nop
 80029f4:	f7ff ffde 	bl	80029b4 <HAL_GetTick>
 80029f8:	4602      	mov	r2, r0
 80029fa:	68bb      	ldr	r3, [r7, #8]
 80029fc:	1ad3      	subs	r3, r2, r3
 80029fe:	68fa      	ldr	r2, [r7, #12]
 8002a00:	429a      	cmp	r2, r3
 8002a02:	d8f7      	bhi.n	80029f4 <HAL_Delay+0x28>
  {
  }
}
 8002a04:	bf00      	nop
 8002a06:	bf00      	nop
 8002a08:	3710      	adds	r7, #16
 8002a0a:	46bd      	mov	sp, r7
 8002a0c:	bd80      	pop	{r7, pc}
 8002a0e:	bf00      	nop
 8002a10:	20000008 	.word	0x20000008

08002a14 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a14:	b480      	push	{r7}
 8002a16:	b085      	sub	sp, #20
 8002a18:	af00      	add	r7, sp, #0
 8002a1a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a1c:	687b      	ldr	r3, [r7, #4]
 8002a1e:	f003 0307 	and.w	r3, r3, #7
 8002a22:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a24:	4b0c      	ldr	r3, [pc, #48]	@ (8002a58 <__NVIC_SetPriorityGrouping+0x44>)
 8002a26:	68db      	ldr	r3, [r3, #12]
 8002a28:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a2a:	68ba      	ldr	r2, [r7, #8]
 8002a2c:	f64f 03ff 	movw	r3, #63743	@ 0xf8ff
 8002a30:	4013      	ands	r3, r2
 8002a32:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a34:	68fb      	ldr	r3, [r7, #12]
 8002a36:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a38:	68bb      	ldr	r3, [r7, #8]
 8002a3a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a3c:	f043 63bf 	orr.w	r3, r3, #100139008	@ 0x5f80000
 8002a40:	f443 3300 	orr.w	r3, r3, #131072	@ 0x20000
 8002a44:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a46:	4a04      	ldr	r2, [pc, #16]	@ (8002a58 <__NVIC_SetPriorityGrouping+0x44>)
 8002a48:	68bb      	ldr	r3, [r7, #8]
 8002a4a:	60d3      	str	r3, [r2, #12]
}
 8002a4c:	bf00      	nop
 8002a4e:	3714      	adds	r7, #20
 8002a50:	46bd      	mov	sp, r7
 8002a52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a56:	4770      	bx	lr
 8002a58:	e000ed00 	.word	0xe000ed00

08002a5c <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002a5c:	b480      	push	{r7}
 8002a5e:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002a60:	4b04      	ldr	r3, [pc, #16]	@ (8002a74 <__NVIC_GetPriorityGrouping+0x18>)
 8002a62:	68db      	ldr	r3, [r3, #12]
 8002a64:	0a1b      	lsrs	r3, r3, #8
 8002a66:	f003 0307 	and.w	r3, r3, #7
}
 8002a6a:	4618      	mov	r0, r3
 8002a6c:	46bd      	mov	sp, r7
 8002a6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a72:	4770      	bx	lr
 8002a74:	e000ed00 	.word	0xe000ed00

08002a78 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	b083      	sub	sp, #12
 8002a7c:	af00      	add	r7, sp, #0
 8002a7e:	4603      	mov	r3, r0
 8002a80:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002a82:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a86:	2b00      	cmp	r3, #0
 8002a88:	db0b      	blt.n	8002aa2 <__NVIC_EnableIRQ+0x2a>
  {
    __COMPILER_BARRIER();
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002a8a:	79fb      	ldrb	r3, [r7, #7]
 8002a8c:	f003 021f 	and.w	r2, r3, #31
 8002a90:	4907      	ldr	r1, [pc, #28]	@ (8002ab0 <__NVIC_EnableIRQ+0x38>)
 8002a92:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002a96:	095b      	lsrs	r3, r3, #5
 8002a98:	2001      	movs	r0, #1
 8002a9a:	fa00 f202 	lsl.w	r2, r0, r2
 8002a9e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
    __COMPILER_BARRIER();
  }
}
 8002aa2:	bf00      	nop
 8002aa4:	370c      	adds	r7, #12
 8002aa6:	46bd      	mov	sp, r7
 8002aa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aac:	4770      	bx	lr
 8002aae:	bf00      	nop
 8002ab0:	e000e100 	.word	0xe000e100

08002ab4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ab4:	b480      	push	{r7}
 8002ab6:	b083      	sub	sp, #12
 8002ab8:	af00      	add	r7, sp, #0
 8002aba:	4603      	mov	r3, r0
 8002abc:	6039      	str	r1, [r7, #0]
 8002abe:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ac0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ac4:	2b00      	cmp	r3, #0
 8002ac6:	db0a      	blt.n	8002ade <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ac8:	683b      	ldr	r3, [r7, #0]
 8002aca:	b2da      	uxtb	r2, r3
 8002acc:	490c      	ldr	r1, [pc, #48]	@ (8002b00 <__NVIC_SetPriority+0x4c>)
 8002ace:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad2:	0112      	lsls	r2, r2, #4
 8002ad4:	b2d2      	uxtb	r2, r2
 8002ad6:	440b      	add	r3, r1
 8002ad8:	f883 2300 	strb.w	r2, [r3, #768]	@ 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002adc:	e00a      	b.n	8002af4 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002ade:	683b      	ldr	r3, [r7, #0]
 8002ae0:	b2da      	uxtb	r2, r3
 8002ae2:	4908      	ldr	r1, [pc, #32]	@ (8002b04 <__NVIC_SetPriority+0x50>)
 8002ae4:	79fb      	ldrb	r3, [r7, #7]
 8002ae6:	f003 030f 	and.w	r3, r3, #15
 8002aea:	3b04      	subs	r3, #4
 8002aec:	0112      	lsls	r2, r2, #4
 8002aee:	b2d2      	uxtb	r2, r2
 8002af0:	440b      	add	r3, r1
 8002af2:	761a      	strb	r2, [r3, #24]
}
 8002af4:	bf00      	nop
 8002af6:	370c      	adds	r7, #12
 8002af8:	46bd      	mov	sp, r7
 8002afa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afe:	4770      	bx	lr
 8002b00:	e000e100 	.word	0xe000e100
 8002b04:	e000ed00 	.word	0xe000ed00

08002b08 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002b08:	b480      	push	{r7}
 8002b0a:	b089      	sub	sp, #36	@ 0x24
 8002b0c:	af00      	add	r7, sp, #0
 8002b0e:	60f8      	str	r0, [r7, #12]
 8002b10:	60b9      	str	r1, [r7, #8]
 8002b12:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002b14:	68fb      	ldr	r3, [r7, #12]
 8002b16:	f003 0307 	and.w	r3, r3, #7
 8002b1a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002b1c:	69fb      	ldr	r3, [r7, #28]
 8002b1e:	f1c3 0307 	rsb	r3, r3, #7
 8002b22:	2b04      	cmp	r3, #4
 8002b24:	bf28      	it	cs
 8002b26:	2304      	movcs	r3, #4
 8002b28:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002b2a:	69fb      	ldr	r3, [r7, #28]
 8002b2c:	3304      	adds	r3, #4
 8002b2e:	2b06      	cmp	r3, #6
 8002b30:	d902      	bls.n	8002b38 <NVIC_EncodePriority+0x30>
 8002b32:	69fb      	ldr	r3, [r7, #28]
 8002b34:	3b03      	subs	r3, #3
 8002b36:	e000      	b.n	8002b3a <NVIC_EncodePriority+0x32>
 8002b38:	2300      	movs	r3, #0
 8002b3a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b3c:	f04f 32ff 	mov.w	r2, #4294967295
 8002b40:	69bb      	ldr	r3, [r7, #24]
 8002b42:	fa02 f303 	lsl.w	r3, r2, r3
 8002b46:	43da      	mvns	r2, r3
 8002b48:	68bb      	ldr	r3, [r7, #8]
 8002b4a:	401a      	ands	r2, r3
 8002b4c:	697b      	ldr	r3, [r7, #20]
 8002b4e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002b50:	f04f 31ff 	mov.w	r1, #4294967295
 8002b54:	697b      	ldr	r3, [r7, #20]
 8002b56:	fa01 f303 	lsl.w	r3, r1, r3
 8002b5a:	43d9      	mvns	r1, r3
 8002b5c:	687b      	ldr	r3, [r7, #4]
 8002b5e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002b60:	4313      	orrs	r3, r2
         );
}
 8002b62:	4618      	mov	r0, r3
 8002b64:	3724      	adds	r7, #36	@ 0x24
 8002b66:	46bd      	mov	sp, r7
 8002b68:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b6c:	4770      	bx	lr
	...

08002b70 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002b70:	b580      	push	{r7, lr}
 8002b72:	b082      	sub	sp, #8
 8002b74:	af00      	add	r7, sp, #0
 8002b76:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	3b01      	subs	r3, #1
 8002b7c:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8002b80:	d301      	bcc.n	8002b86 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002b82:	2301      	movs	r3, #1
 8002b84:	e00f      	b.n	8002ba6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002b86:	4a0a      	ldr	r2, [pc, #40]	@ (8002bb0 <SysTick_Config+0x40>)
 8002b88:	687b      	ldr	r3, [r7, #4]
 8002b8a:	3b01      	subs	r3, #1
 8002b8c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002b8e:	210f      	movs	r1, #15
 8002b90:	f04f 30ff 	mov.w	r0, #4294967295
 8002b94:	f7ff ff8e 	bl	8002ab4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002b98:	4b05      	ldr	r3, [pc, #20]	@ (8002bb0 <SysTick_Config+0x40>)
 8002b9a:	2200      	movs	r2, #0
 8002b9c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002b9e:	4b04      	ldr	r3, [pc, #16]	@ (8002bb0 <SysTick_Config+0x40>)
 8002ba0:	2207      	movs	r2, #7
 8002ba2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002ba4:	2300      	movs	r3, #0
}
 8002ba6:	4618      	mov	r0, r3
 8002ba8:	3708      	adds	r7, #8
 8002baa:	46bd      	mov	sp, r7
 8002bac:	bd80      	pop	{r7, pc}
 8002bae:	bf00      	nop
 8002bb0:	e000e010 	.word	0xe000e010

08002bb4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	b082      	sub	sp, #8
 8002bb8:	af00      	add	r7, sp, #0
 8002bba:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002bbc:	6878      	ldr	r0, [r7, #4]
 8002bbe:	f7ff ff29 	bl	8002a14 <__NVIC_SetPriorityGrouping>
}
 8002bc2:	bf00      	nop
 8002bc4:	3708      	adds	r7, #8
 8002bc6:	46bd      	mov	sp, r7
 8002bc8:	bd80      	pop	{r7, pc}

08002bca <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002bca:	b580      	push	{r7, lr}
 8002bcc:	b086      	sub	sp, #24
 8002bce:	af00      	add	r7, sp, #0
 8002bd0:	4603      	mov	r3, r0
 8002bd2:	60b9      	str	r1, [r7, #8]
 8002bd4:	607a      	str	r2, [r7, #4]
 8002bd6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002bd8:	2300      	movs	r3, #0
 8002bda:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002bdc:	f7ff ff3e 	bl	8002a5c <__NVIC_GetPriorityGrouping>
 8002be0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002be2:	687a      	ldr	r2, [r7, #4]
 8002be4:	68b9      	ldr	r1, [r7, #8]
 8002be6:	6978      	ldr	r0, [r7, #20]
 8002be8:	f7ff ff8e 	bl	8002b08 <NVIC_EncodePriority>
 8002bec:	4602      	mov	r2, r0
 8002bee:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002bf2:	4611      	mov	r1, r2
 8002bf4:	4618      	mov	r0, r3
 8002bf6:	f7ff ff5d 	bl	8002ab4 <__NVIC_SetPriority>
}
 8002bfa:	bf00      	nop
 8002bfc:	3718      	adds	r7, #24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	bd80      	pop	{r7, pc}

08002c02 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c02:	b580      	push	{r7, lr}
 8002c04:	b082      	sub	sp, #8
 8002c06:	af00      	add	r7, sp, #0
 8002c08:	4603      	mov	r3, r0
 8002c0a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002c0c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002c10:	4618      	mov	r0, r3
 8002c12:	f7ff ff31 	bl	8002a78 <__NVIC_EnableIRQ>
}
 8002c16:	bf00      	nop
 8002c18:	3708      	adds	r7, #8
 8002c1a:	46bd      	mov	sp, r7
 8002c1c:	bd80      	pop	{r7, pc}

08002c1e <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002c1e:	b580      	push	{r7, lr}
 8002c20:	b082      	sub	sp, #8
 8002c22:	af00      	add	r7, sp, #0
 8002c24:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002c26:	6878      	ldr	r0, [r7, #4]
 8002c28:	f7ff ffa2 	bl	8002b70 <SysTick_Config>
 8002c2c:	4603      	mov	r3, r0
}
 8002c2e:	4618      	mov	r0, r3
 8002c30:	3708      	adds	r7, #8
 8002c32:	46bd      	mov	sp, r7
 8002c34:	bd80      	pop	{r7, pc}

08002c36 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8002c36:	b580      	push	{r7, lr}
 8002c38:	b084      	sub	sp, #16
 8002c3a:	af00      	add	r7, sp, #0
 8002c3c:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8002c3e:	687b      	ldr	r3, [r7, #4]
 8002c40:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 8002c42:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8002c44:	f7ff feb6 	bl	80029b4 <HAL_GetTick>
 8002c48:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002c4a:	687b      	ldr	r3, [r7, #4]
 8002c4c:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002c50:	b2db      	uxtb	r3, r3
 8002c52:	2b02      	cmp	r3, #2
 8002c54:	d008      	beq.n	8002c68 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002c56:	687b      	ldr	r3, [r7, #4]
 8002c58:	2280      	movs	r2, #128	@ 0x80
 8002c5a:	655a      	str	r2, [r3, #84]	@ 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002c5c:	687b      	ldr	r3, [r7, #4]
 8002c5e:	2200      	movs	r2, #0
 8002c60:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
    
    return HAL_ERROR;
 8002c64:	2301      	movs	r3, #1
 8002c66:	e052      	b.n	8002d0e <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8002c68:	687b      	ldr	r3, [r7, #4]
 8002c6a:	681b      	ldr	r3, [r3, #0]
 8002c6c:	681a      	ldr	r2, [r3, #0]
 8002c6e:	687b      	ldr	r3, [r7, #4]
 8002c70:	681b      	ldr	r3, [r3, #0]
 8002c72:	f022 0216 	bic.w	r2, r2, #22
 8002c76:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8002c78:	687b      	ldr	r3, [r7, #4]
 8002c7a:	681b      	ldr	r3, [r3, #0]
 8002c7c:	695a      	ldr	r2, [r3, #20]
 8002c7e:	687b      	ldr	r3, [r7, #4]
 8002c80:	681b      	ldr	r3, [r3, #0]
 8002c82:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8002c86:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8002c88:	687b      	ldr	r3, [r7, #4]
 8002c8a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8002c8c:	2b00      	cmp	r3, #0
 8002c8e:	d103      	bne.n	8002c98 <HAL_DMA_Abort+0x62>
 8002c90:	687b      	ldr	r3, [r7, #4]
 8002c92:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 8002c94:	2b00      	cmp	r3, #0
 8002c96:	d007      	beq.n	8002ca8 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8002c98:	687b      	ldr	r3, [r7, #4]
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	681a      	ldr	r2, [r3, #0]
 8002c9e:	687b      	ldr	r3, [r7, #4]
 8002ca0:	681b      	ldr	r3, [r3, #0]
 8002ca2:	f022 0208 	bic.w	r2, r2, #8
 8002ca6:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002ca8:	687b      	ldr	r3, [r7, #4]
 8002caa:	681b      	ldr	r3, [r3, #0]
 8002cac:	681a      	ldr	r2, [r3, #0]
 8002cae:	687b      	ldr	r3, [r7, #4]
 8002cb0:	681b      	ldr	r3, [r3, #0]
 8002cb2:	f022 0201 	bic.w	r2, r2, #1
 8002cb6:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002cb8:	e013      	b.n	8002ce2 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8002cba:	f7ff fe7b 	bl	80029b4 <HAL_GetTick>
 8002cbe:	4602      	mov	r2, r0
 8002cc0:	68bb      	ldr	r3, [r7, #8]
 8002cc2:	1ad3      	subs	r3, r2, r3
 8002cc4:	2b05      	cmp	r3, #5
 8002cc6:	d90c      	bls.n	8002ce2 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8002cc8:	687b      	ldr	r3, [r7, #4]
 8002cca:	2220      	movs	r2, #32
 8002ccc:	655a      	str	r2, [r3, #84]	@ 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8002cce:	687b      	ldr	r3, [r7, #4]
 8002cd0:	2203      	movs	r2, #3
 8002cd2:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8002cd6:	687b      	ldr	r3, [r7, #4]
 8002cd8:	2200      	movs	r2, #0
 8002cda:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
        
        return HAL_TIMEOUT;
 8002cde:	2303      	movs	r3, #3
 8002ce0:	e015      	b.n	8002d0e <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8002ce2:	687b      	ldr	r3, [r7, #4]
 8002ce4:	681b      	ldr	r3, [r3, #0]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	f003 0301 	and.w	r3, r3, #1
 8002cec:	2b00      	cmp	r3, #0
 8002cee:	d1e4      	bne.n	8002cba <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8002cf0:	687b      	ldr	r3, [r7, #4]
 8002cf2:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8002cf4:	223f      	movs	r2, #63	@ 0x3f
 8002cf6:	409a      	lsls	r2, r3
 8002cf8:	68fb      	ldr	r3, [r7, #12]
 8002cfa:	609a      	str	r2, [r3, #8]
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8002cfc:	687b      	ldr	r3, [r7, #4]
 8002cfe:	2201      	movs	r2, #1
 8002d00:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8002d04:	687b      	ldr	r3, [r7, #4]
 8002d06:	2200      	movs	r2, #0
 8002d08:	f883 2034 	strb.w	r2, [r3, #52]	@ 0x34
  }
  return HAL_OK;
 8002d0c:	2300      	movs	r3, #0
}
 8002d0e:	4618      	mov	r0, r3
 8002d10:	3710      	adds	r7, #16
 8002d12:	46bd      	mov	sp, r7
 8002d14:	bd80      	pop	{r7, pc}

08002d16 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002d16:	b480      	push	{r7}
 8002d18:	b083      	sub	sp, #12
 8002d1a:	af00      	add	r7, sp, #0
 8002d1c:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002d1e:	687b      	ldr	r3, [r7, #4]
 8002d20:	f893 3035 	ldrb.w	r3, [r3, #53]	@ 0x35
 8002d24:	b2db      	uxtb	r3, r3
 8002d26:	2b02      	cmp	r3, #2
 8002d28:	d004      	beq.n	8002d34 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002d2a:	687b      	ldr	r3, [r7, #4]
 8002d2c:	2280      	movs	r2, #128	@ 0x80
 8002d2e:	655a      	str	r2, [r3, #84]	@ 0x54
    return HAL_ERROR;
 8002d30:	2301      	movs	r3, #1
 8002d32:	e00c      	b.n	8002d4e <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002d34:	687b      	ldr	r3, [r7, #4]
 8002d36:	2205      	movs	r2, #5
 8002d38:	f883 2035 	strb.w	r2, [r3, #53]	@ 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002d3c:	687b      	ldr	r3, [r7, #4]
 8002d3e:	681b      	ldr	r3, [r3, #0]
 8002d40:	681a      	ldr	r2, [r3, #0]
 8002d42:	687b      	ldr	r3, [r7, #4]
 8002d44:	681b      	ldr	r3, [r3, #0]
 8002d46:	f022 0201 	bic.w	r2, r2, #1
 8002d4a:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002d4c:	2300      	movs	r3, #0
}
 8002d4e:	4618      	mov	r0, r3
 8002d50:	370c      	adds	r7, #12
 8002d52:	46bd      	mov	sp, r7
 8002d54:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d58:	4770      	bx	lr
	...

08002d5c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002d5c:	b480      	push	{r7}
 8002d5e:	b089      	sub	sp, #36	@ 0x24
 8002d60:	af00      	add	r7, sp, #0
 8002d62:	6078      	str	r0, [r7, #4]
 8002d64:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002d66:	2300      	movs	r3, #0
 8002d68:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002d6a:	2300      	movs	r3, #0
 8002d6c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002d6e:	2300      	movs	r3, #0
 8002d70:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_ALL_INSTANCE(GPIOx));
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d72:	2300      	movs	r3, #0
 8002d74:	61fb      	str	r3, [r7, #28]
 8002d76:	e159      	b.n	800302c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d78:	2201      	movs	r2, #1
 8002d7a:	69fb      	ldr	r3, [r7, #28]
 8002d7c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d80:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d82:	683b      	ldr	r3, [r7, #0]
 8002d84:	681b      	ldr	r3, [r3, #0]
 8002d86:	697a      	ldr	r2, [r7, #20]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d8c:	693a      	ldr	r2, [r7, #16]
 8002d8e:	697b      	ldr	r3, [r7, #20]
 8002d90:	429a      	cmp	r2, r3
 8002d92:	f040 8148 	bne.w	8003026 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002d96:	683b      	ldr	r3, [r7, #0]
 8002d98:	685b      	ldr	r3, [r3, #4]
 8002d9a:	f003 0303 	and.w	r3, r3, #3
 8002d9e:	2b01      	cmp	r3, #1
 8002da0:	d005      	beq.n	8002dae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002da2:	683b      	ldr	r3, [r7, #0]
 8002da4:	685b      	ldr	r3, [r3, #4]
 8002da6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8002daa:	2b02      	cmp	r3, #2
 8002dac:	d130      	bne.n	8002e10 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002dae:	687b      	ldr	r3, [r7, #4]
 8002db0:	689b      	ldr	r3, [r3, #8]
 8002db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	005b      	lsls	r3, r3, #1
 8002db8:	2203      	movs	r2, #3
 8002dba:	fa02 f303 	lsl.w	r3, r2, r3
 8002dbe:	43db      	mvns	r3, r3
 8002dc0:	69ba      	ldr	r2, [r7, #24]
 8002dc2:	4013      	ands	r3, r2
 8002dc4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002dc6:	683b      	ldr	r3, [r7, #0]
 8002dc8:	68da      	ldr	r2, [r3, #12]
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	005b      	lsls	r3, r3, #1
 8002dce:	fa02 f303 	lsl.w	r3, r2, r3
 8002dd2:	69ba      	ldr	r2, [r7, #24]
 8002dd4:	4313      	orrs	r3, r2
 8002dd6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002dd8:	687b      	ldr	r3, [r7, #4]
 8002dda:	69ba      	ldr	r2, [r7, #24]
 8002ddc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002dde:	687b      	ldr	r3, [r7, #4]
 8002de0:	685b      	ldr	r3, [r3, #4]
 8002de2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002de4:	2201      	movs	r2, #1
 8002de6:	69fb      	ldr	r3, [r7, #28]
 8002de8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dec:	43db      	mvns	r3, r3
 8002dee:	69ba      	ldr	r2, [r7, #24]
 8002df0:	4013      	ands	r3, r2
 8002df2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 8002df4:	683b      	ldr	r3, [r7, #0]
 8002df6:	685b      	ldr	r3, [r3, #4]
 8002df8:	091b      	lsrs	r3, r3, #4
 8002dfa:	f003 0201 	and.w	r2, r3, #1
 8002dfe:	69fb      	ldr	r3, [r7, #28]
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	69ba      	ldr	r2, [r7, #24]
 8002e06:	4313      	orrs	r3, r2
 8002e08:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002e0a:	687b      	ldr	r3, [r7, #4]
 8002e0c:	69ba      	ldr	r2, [r7, #24]
 8002e0e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8002e10:	683b      	ldr	r3, [r7, #0]
 8002e12:	685b      	ldr	r3, [r3, #4]
 8002e14:	f003 0303 	and.w	r3, r3, #3
 8002e18:	2b03      	cmp	r3, #3
 8002e1a:	d017      	beq.n	8002e4c <HAL_GPIO_Init+0xf0>
      {
        /* Check the parameters */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));
        
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8002e1c:	687b      	ldr	r3, [r7, #4]
 8002e1e:	68db      	ldr	r3, [r3, #12]
 8002e20:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	005b      	lsls	r3, r3, #1
 8002e26:	2203      	movs	r2, #3
 8002e28:	fa02 f303 	lsl.w	r3, r2, r3
 8002e2c:	43db      	mvns	r3, r3
 8002e2e:	69ba      	ldr	r2, [r7, #24]
 8002e30:	4013      	ands	r3, r2
 8002e32:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002e34:	683b      	ldr	r3, [r7, #0]
 8002e36:	689a      	ldr	r2, [r3, #8]
 8002e38:	69fb      	ldr	r3, [r7, #28]
 8002e3a:	005b      	lsls	r3, r3, #1
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	69ba      	ldr	r2, [r7, #24]
 8002e42:	4313      	orrs	r3, r2
 8002e44:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8002e46:	687b      	ldr	r3, [r7, #4]
 8002e48:	69ba      	ldr	r2, [r7, #24]
 8002e4a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8002e4c:	683b      	ldr	r3, [r7, #0]
 8002e4e:	685b      	ldr	r3, [r3, #4]
 8002e50:	f003 0303 	and.w	r3, r3, #3
 8002e54:	2b02      	cmp	r3, #2
 8002e56:	d123      	bne.n	8002ea0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002e58:	69fb      	ldr	r3, [r7, #28]
 8002e5a:	08da      	lsrs	r2, r3, #3
 8002e5c:	687b      	ldr	r3, [r7, #4]
 8002e5e:	3208      	adds	r2, #8
 8002e60:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002e64:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002e66:	69fb      	ldr	r3, [r7, #28]
 8002e68:	f003 0307 	and.w	r3, r3, #7
 8002e6c:	009b      	lsls	r3, r3, #2
 8002e6e:	220f      	movs	r2, #15
 8002e70:	fa02 f303 	lsl.w	r3, r2, r3
 8002e74:	43db      	mvns	r3, r3
 8002e76:	69ba      	ldr	r2, [r7, #24]
 8002e78:	4013      	ands	r3, r2
 8002e7a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e7c:	683b      	ldr	r3, [r7, #0]
 8002e7e:	691a      	ldr	r2, [r3, #16]
 8002e80:	69fb      	ldr	r3, [r7, #28]
 8002e82:	f003 0307 	and.w	r3, r3, #7
 8002e86:	009b      	lsls	r3, r3, #2
 8002e88:	fa02 f303 	lsl.w	r3, r2, r3
 8002e8c:	69ba      	ldr	r2, [r7, #24]
 8002e8e:	4313      	orrs	r3, r2
 8002e90:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e92:	69fb      	ldr	r3, [r7, #28]
 8002e94:	08da      	lsrs	r2, r3, #3
 8002e96:	687b      	ldr	r3, [r7, #4]
 8002e98:	3208      	adds	r2, #8
 8002e9a:	69b9      	ldr	r1, [r7, #24]
 8002e9c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002ea0:	687b      	ldr	r3, [r7, #4]
 8002ea2:	681b      	ldr	r3, [r3, #0]
 8002ea4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002ea6:	69fb      	ldr	r3, [r7, #28]
 8002ea8:	005b      	lsls	r3, r3, #1
 8002eaa:	2203      	movs	r2, #3
 8002eac:	fa02 f303 	lsl.w	r3, r2, r3
 8002eb0:	43db      	mvns	r3, r3
 8002eb2:	69ba      	ldr	r2, [r7, #24]
 8002eb4:	4013      	ands	r3, r2
 8002eb6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002eb8:	683b      	ldr	r3, [r7, #0]
 8002eba:	685b      	ldr	r3, [r3, #4]
 8002ebc:	f003 0203 	and.w	r2, r3, #3
 8002ec0:	69fb      	ldr	r3, [r7, #28]
 8002ec2:	005b      	lsls	r3, r3, #1
 8002ec4:	fa02 f303 	lsl.w	r3, r2, r3
 8002ec8:	69ba      	ldr	r2, [r7, #24]
 8002eca:	4313      	orrs	r3, r2
 8002ecc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002ece:	687b      	ldr	r3, [r7, #4]
 8002ed0:	69ba      	ldr	r2, [r7, #24]
 8002ed2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 8002ed4:	683b      	ldr	r3, [r7, #0]
 8002ed6:	685b      	ldr	r3, [r3, #4]
 8002ed8:	f403 3340 	and.w	r3, r3, #196608	@ 0x30000
 8002edc:	2b00      	cmp	r3, #0
 8002ede:	f000 80a2 	beq.w	8003026 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002ee2:	2300      	movs	r3, #0
 8002ee4:	60fb      	str	r3, [r7, #12]
 8002ee6:	4b57      	ldr	r3, [pc, #348]	@ (8003044 <HAL_GPIO_Init+0x2e8>)
 8002ee8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002eea:	4a56      	ldr	r2, [pc, #344]	@ (8003044 <HAL_GPIO_Init+0x2e8>)
 8002eec:	f443 4380 	orr.w	r3, r3, #16384	@ 0x4000
 8002ef0:	6453      	str	r3, [r2, #68]	@ 0x44
 8002ef2:	4b54      	ldr	r3, [pc, #336]	@ (8003044 <HAL_GPIO_Init+0x2e8>)
 8002ef4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8002ef6:	f403 4380 	and.w	r3, r3, #16384	@ 0x4000
 8002efa:	60fb      	str	r3, [r7, #12]
 8002efc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002efe:	4a52      	ldr	r2, [pc, #328]	@ (8003048 <HAL_GPIO_Init+0x2ec>)
 8002f00:	69fb      	ldr	r3, [r7, #28]
 8002f02:	089b      	lsrs	r3, r3, #2
 8002f04:	3302      	adds	r3, #2
 8002f06:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002f0a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002f0c:	69fb      	ldr	r3, [r7, #28]
 8002f0e:	f003 0303 	and.w	r3, r3, #3
 8002f12:	009b      	lsls	r3, r3, #2
 8002f14:	220f      	movs	r2, #15
 8002f16:	fa02 f303 	lsl.w	r3, r2, r3
 8002f1a:	43db      	mvns	r3, r3
 8002f1c:	69ba      	ldr	r2, [r7, #24]
 8002f1e:	4013      	ands	r3, r2
 8002f20:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002f22:	687b      	ldr	r3, [r7, #4]
 8002f24:	4a49      	ldr	r2, [pc, #292]	@ (800304c <HAL_GPIO_Init+0x2f0>)
 8002f26:	4293      	cmp	r3, r2
 8002f28:	d019      	beq.n	8002f5e <HAL_GPIO_Init+0x202>
 8002f2a:	687b      	ldr	r3, [r7, #4]
 8002f2c:	4a48      	ldr	r2, [pc, #288]	@ (8003050 <HAL_GPIO_Init+0x2f4>)
 8002f2e:	4293      	cmp	r3, r2
 8002f30:	d013      	beq.n	8002f5a <HAL_GPIO_Init+0x1fe>
 8002f32:	687b      	ldr	r3, [r7, #4]
 8002f34:	4a47      	ldr	r2, [pc, #284]	@ (8003054 <HAL_GPIO_Init+0x2f8>)
 8002f36:	4293      	cmp	r3, r2
 8002f38:	d00d      	beq.n	8002f56 <HAL_GPIO_Init+0x1fa>
 8002f3a:	687b      	ldr	r3, [r7, #4]
 8002f3c:	4a46      	ldr	r2, [pc, #280]	@ (8003058 <HAL_GPIO_Init+0x2fc>)
 8002f3e:	4293      	cmp	r3, r2
 8002f40:	d007      	beq.n	8002f52 <HAL_GPIO_Init+0x1f6>
 8002f42:	687b      	ldr	r3, [r7, #4]
 8002f44:	4a45      	ldr	r2, [pc, #276]	@ (800305c <HAL_GPIO_Init+0x300>)
 8002f46:	4293      	cmp	r3, r2
 8002f48:	d101      	bne.n	8002f4e <HAL_GPIO_Init+0x1f2>
 8002f4a:	2304      	movs	r3, #4
 8002f4c:	e008      	b.n	8002f60 <HAL_GPIO_Init+0x204>
 8002f4e:	2307      	movs	r3, #7
 8002f50:	e006      	b.n	8002f60 <HAL_GPIO_Init+0x204>
 8002f52:	2303      	movs	r3, #3
 8002f54:	e004      	b.n	8002f60 <HAL_GPIO_Init+0x204>
 8002f56:	2302      	movs	r3, #2
 8002f58:	e002      	b.n	8002f60 <HAL_GPIO_Init+0x204>
 8002f5a:	2301      	movs	r3, #1
 8002f5c:	e000      	b.n	8002f60 <HAL_GPIO_Init+0x204>
 8002f5e:	2300      	movs	r3, #0
 8002f60:	69fa      	ldr	r2, [r7, #28]
 8002f62:	f002 0203 	and.w	r2, r2, #3
 8002f66:	0092      	lsls	r2, r2, #2
 8002f68:	4093      	lsls	r3, r2
 8002f6a:	69ba      	ldr	r2, [r7, #24]
 8002f6c:	4313      	orrs	r3, r2
 8002f6e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f70:	4935      	ldr	r1, [pc, #212]	@ (8003048 <HAL_GPIO_Init+0x2ec>)
 8002f72:	69fb      	ldr	r3, [r7, #28]
 8002f74:	089b      	lsrs	r3, r3, #2
 8002f76:	3302      	adds	r3, #2
 8002f78:	69ba      	ldr	r2, [r7, #24]
 8002f7a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f7e:	4b38      	ldr	r3, [pc, #224]	@ (8003060 <HAL_GPIO_Init+0x304>)
 8002f80:	689b      	ldr	r3, [r3, #8]
 8002f82:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f84:	693b      	ldr	r3, [r7, #16]
 8002f86:	43db      	mvns	r3, r3
 8002f88:	69ba      	ldr	r2, [r7, #24]
 8002f8a:	4013      	ands	r3, r2
 8002f8c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	f403 1380 	and.w	r3, r3, #1048576	@ 0x100000
 8002f96:	2b00      	cmp	r3, #0
 8002f98:	d003      	beq.n	8002fa2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f9a:	69ba      	ldr	r2, [r7, #24]
 8002f9c:	693b      	ldr	r3, [r7, #16]
 8002f9e:	4313      	orrs	r3, r2
 8002fa0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002fa2:	4a2f      	ldr	r2, [pc, #188]	@ (8003060 <HAL_GPIO_Init+0x304>)
 8002fa4:	69bb      	ldr	r3, [r7, #24]
 8002fa6:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002fa8:	4b2d      	ldr	r3, [pc, #180]	@ (8003060 <HAL_GPIO_Init+0x304>)
 8002faa:	68db      	ldr	r3, [r3, #12]
 8002fac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fae:	693b      	ldr	r3, [r7, #16]
 8002fb0:	43db      	mvns	r3, r3
 8002fb2:	69ba      	ldr	r2, [r7, #24]
 8002fb4:	4013      	ands	r3, r2
 8002fb6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 8002fb8:	683b      	ldr	r3, [r7, #0]
 8002fba:	685b      	ldr	r3, [r3, #4]
 8002fbc:	f403 1300 	and.w	r3, r3, #2097152	@ 0x200000
 8002fc0:	2b00      	cmp	r3, #0
 8002fc2:	d003      	beq.n	8002fcc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002fc4:	69ba      	ldr	r2, [r7, #24]
 8002fc6:	693b      	ldr	r3, [r7, #16]
 8002fc8:	4313      	orrs	r3, r2
 8002fca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fcc:	4a24      	ldr	r2, [pc, #144]	@ (8003060 <HAL_GPIO_Init+0x304>)
 8002fce:	69bb      	ldr	r3, [r7, #24]
 8002fd0:	60d3      	str	r3, [r2, #12]

        temp = EXTI->EMR;
 8002fd2:	4b23      	ldr	r3, [pc, #140]	@ (8003060 <HAL_GPIO_Init+0x304>)
 8002fd4:	685b      	ldr	r3, [r3, #4]
 8002fd6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002fd8:	693b      	ldr	r3, [r7, #16]
 8002fda:	43db      	mvns	r3, r3
 8002fdc:	69ba      	ldr	r2, [r7, #24]
 8002fde:	4013      	ands	r3, r2
 8002fe0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 8002fe2:	683b      	ldr	r3, [r7, #0]
 8002fe4:	685b      	ldr	r3, [r3, #4]
 8002fe6:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8002fea:	2b00      	cmp	r3, #0
 8002fec:	d003      	beq.n	8002ff6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002fee:	69ba      	ldr	r2, [r7, #24]
 8002ff0:	693b      	ldr	r3, [r7, #16]
 8002ff2:	4313      	orrs	r3, r2
 8002ff4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002ff6:	4a1a      	ldr	r2, [pc, #104]	@ (8003060 <HAL_GPIO_Init+0x304>)
 8002ff8:	69bb      	ldr	r3, [r7, #24]
 8002ffa:	6053      	str	r3, [r2, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002ffc:	4b18      	ldr	r3, [pc, #96]	@ (8003060 <HAL_GPIO_Init+0x304>)
 8002ffe:	681b      	ldr	r3, [r3, #0]
 8003000:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003002:	693b      	ldr	r3, [r7, #16]
 8003004:	43db      	mvns	r3, r3
 8003006:	69ba      	ldr	r2, [r7, #24]
 8003008:	4013      	ands	r3, r2
 800300a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800300c:	683b      	ldr	r3, [r7, #0]
 800300e:	685b      	ldr	r3, [r3, #4]
 8003010:	f403 3380 	and.w	r3, r3, #65536	@ 0x10000
 8003014:	2b00      	cmp	r3, #0
 8003016:	d003      	beq.n	8003020 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003018:	69ba      	ldr	r2, [r7, #24]
 800301a:	693b      	ldr	r3, [r7, #16]
 800301c:	4313      	orrs	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003020:	4a0f      	ldr	r2, [pc, #60]	@ (8003060 <HAL_GPIO_Init+0x304>)
 8003022:	69bb      	ldr	r3, [r7, #24]
 8003024:	6013      	str	r3, [r2, #0]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003026:	69fb      	ldr	r3, [r7, #28]
 8003028:	3301      	adds	r3, #1
 800302a:	61fb      	str	r3, [r7, #28]
 800302c:	69fb      	ldr	r3, [r7, #28]
 800302e:	2b0f      	cmp	r3, #15
 8003030:	f67f aea2 	bls.w	8002d78 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003034:	bf00      	nop
 8003036:	bf00      	nop
 8003038:	3724      	adds	r7, #36	@ 0x24
 800303a:	46bd      	mov	sp, r7
 800303c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003040:	4770      	bx	lr
 8003042:	bf00      	nop
 8003044:	40023800 	.word	0x40023800
 8003048:	40013800 	.word	0x40013800
 800304c:	40020000 	.word	0x40020000
 8003050:	40020400 	.word	0x40020400
 8003054:	40020800 	.word	0x40020800
 8003058:	40020c00 	.word	0x40020c00
 800305c:	40021000 	.word	0x40021000
 8003060:	40013c00 	.word	0x40013c00

08003064 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003064:	b580      	push	{r7, lr}
 8003066:	b084      	sub	sp, #16
 8003068:	af00      	add	r7, sp, #0
 800306a:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800306c:	687b      	ldr	r3, [r7, #4]
 800306e:	2b00      	cmp	r3, #0
 8003070:	d101      	bne.n	8003076 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003072:	2301      	movs	r3, #1
 8003074:	e12b      	b.n	80032ce <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003076:	687b      	ldr	r3, [r7, #4]
 8003078:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800307c:	b2db      	uxtb	r3, r3
 800307e:	2b00      	cmp	r3, #0
 8003080:	d106      	bne.n	8003090 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003082:	687b      	ldr	r3, [r7, #4]
 8003084:	2200      	movs	r2, #0
 8003086:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 800308a:	6878      	ldr	r0, [r7, #4]
 800308c:	f7ff f8ba 	bl	8002204 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	2224      	movs	r2, #36	@ 0x24
 8003094:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003098:	687b      	ldr	r3, [r7, #4]
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	681a      	ldr	r2, [r3, #0]
 800309e:	687b      	ldr	r3, [r7, #4]
 80030a0:	681b      	ldr	r3, [r3, #0]
 80030a2:	f022 0201 	bic.w	r2, r2, #1
 80030a6:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	681b      	ldr	r3, [r3, #0]
 80030ac:	681a      	ldr	r2, [r3, #0]
 80030ae:	687b      	ldr	r3, [r7, #4]
 80030b0:	681b      	ldr	r3, [r3, #0]
 80030b2:	f442 4200 	orr.w	r2, r2, #32768	@ 0x8000
 80030b6:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80030b8:	687b      	ldr	r3, [r7, #4]
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	681a      	ldr	r2, [r3, #0]
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	f422 4200 	bic.w	r2, r2, #32768	@ 0x8000
 80030c6:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80030c8:	f002 f8e0 	bl	800528c <HAL_RCC_GetPCLK1Freq>
 80030cc:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80030ce:	687b      	ldr	r3, [r7, #4]
 80030d0:	685b      	ldr	r3, [r3, #4]
 80030d2:	4a81      	ldr	r2, [pc, #516]	@ (80032d8 <HAL_I2C_Init+0x274>)
 80030d4:	4293      	cmp	r3, r2
 80030d6:	d807      	bhi.n	80030e8 <HAL_I2C_Init+0x84>
 80030d8:	68fb      	ldr	r3, [r7, #12]
 80030da:	4a80      	ldr	r2, [pc, #512]	@ (80032dc <HAL_I2C_Init+0x278>)
 80030dc:	4293      	cmp	r3, r2
 80030de:	bf94      	ite	ls
 80030e0:	2301      	movls	r3, #1
 80030e2:	2300      	movhi	r3, #0
 80030e4:	b2db      	uxtb	r3, r3
 80030e6:	e006      	b.n	80030f6 <HAL_I2C_Init+0x92>
 80030e8:	68fb      	ldr	r3, [r7, #12]
 80030ea:	4a7d      	ldr	r2, [pc, #500]	@ (80032e0 <HAL_I2C_Init+0x27c>)
 80030ec:	4293      	cmp	r3, r2
 80030ee:	bf94      	ite	ls
 80030f0:	2301      	movls	r3, #1
 80030f2:	2300      	movhi	r3, #0
 80030f4:	b2db      	uxtb	r3, r3
 80030f6:	2b00      	cmp	r3, #0
 80030f8:	d001      	beq.n	80030fe <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80030fa:	2301      	movs	r3, #1
 80030fc:	e0e7      	b.n	80032ce <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80030fe:	68fb      	ldr	r3, [r7, #12]
 8003100:	4a78      	ldr	r2, [pc, #480]	@ (80032e4 <HAL_I2C_Init+0x280>)
 8003102:	fba2 2303 	umull	r2, r3, r2, r3
 8003106:	0c9b      	lsrs	r3, r3, #18
 8003108:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800310a:	687b      	ldr	r3, [r7, #4]
 800310c:	681b      	ldr	r3, [r3, #0]
 800310e:	685b      	ldr	r3, [r3, #4]
 8003110:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003114:	687b      	ldr	r3, [r7, #4]
 8003116:	681b      	ldr	r3, [r3, #0]
 8003118:	68ba      	ldr	r2, [r7, #8]
 800311a:	430a      	orrs	r2, r1
 800311c:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800311e:	687b      	ldr	r3, [r7, #4]
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	6a1b      	ldr	r3, [r3, #32]
 8003124:	f023 013f 	bic.w	r1, r3, #63	@ 0x3f
 8003128:	687b      	ldr	r3, [r7, #4]
 800312a:	685b      	ldr	r3, [r3, #4]
 800312c:	4a6a      	ldr	r2, [pc, #424]	@ (80032d8 <HAL_I2C_Init+0x274>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d802      	bhi.n	8003138 <HAL_I2C_Init+0xd4>
 8003132:	68bb      	ldr	r3, [r7, #8]
 8003134:	3301      	adds	r3, #1
 8003136:	e009      	b.n	800314c <HAL_I2C_Init+0xe8>
 8003138:	68bb      	ldr	r3, [r7, #8]
 800313a:	f44f 7296 	mov.w	r2, #300	@ 0x12c
 800313e:	fb02 f303 	mul.w	r3, r2, r3
 8003142:	4a69      	ldr	r2, [pc, #420]	@ (80032e8 <HAL_I2C_Init+0x284>)
 8003144:	fba2 2303 	umull	r2, r3, r2, r3
 8003148:	099b      	lsrs	r3, r3, #6
 800314a:	3301      	adds	r3, #1
 800314c:	687a      	ldr	r2, [r7, #4]
 800314e:	6812      	ldr	r2, [r2, #0]
 8003150:	430b      	orrs	r3, r1
 8003152:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8003154:	687b      	ldr	r3, [r7, #4]
 8003156:	681b      	ldr	r3, [r3, #0]
 8003158:	69db      	ldr	r3, [r3, #28]
 800315a:	f423 424f 	bic.w	r2, r3, #52992	@ 0xcf00
 800315e:	f022 02ff 	bic.w	r2, r2, #255	@ 0xff
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	685b      	ldr	r3, [r3, #4]
 8003166:	495c      	ldr	r1, [pc, #368]	@ (80032d8 <HAL_I2C_Init+0x274>)
 8003168:	428b      	cmp	r3, r1
 800316a:	d819      	bhi.n	80031a0 <HAL_I2C_Init+0x13c>
 800316c:	68fb      	ldr	r3, [r7, #12]
 800316e:	1e59      	subs	r1, r3, #1
 8003170:	687b      	ldr	r3, [r7, #4]
 8003172:	685b      	ldr	r3, [r3, #4]
 8003174:	005b      	lsls	r3, r3, #1
 8003176:	fbb1 f3f3 	udiv	r3, r1, r3
 800317a:	1c59      	adds	r1, r3, #1
 800317c:	f640 73fc 	movw	r3, #4092	@ 0xffc
 8003180:	400b      	ands	r3, r1
 8003182:	2b00      	cmp	r3, #0
 8003184:	d00a      	beq.n	800319c <HAL_I2C_Init+0x138>
 8003186:	68fb      	ldr	r3, [r7, #12]
 8003188:	1e59      	subs	r1, r3, #1
 800318a:	687b      	ldr	r3, [r7, #4]
 800318c:	685b      	ldr	r3, [r3, #4]
 800318e:	005b      	lsls	r3, r3, #1
 8003190:	fbb1 f3f3 	udiv	r3, r1, r3
 8003194:	3301      	adds	r3, #1
 8003196:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800319a:	e051      	b.n	8003240 <HAL_I2C_Init+0x1dc>
 800319c:	2304      	movs	r3, #4
 800319e:	e04f      	b.n	8003240 <HAL_I2C_Init+0x1dc>
 80031a0:	687b      	ldr	r3, [r7, #4]
 80031a2:	689b      	ldr	r3, [r3, #8]
 80031a4:	2b00      	cmp	r3, #0
 80031a6:	d111      	bne.n	80031cc <HAL_I2C_Init+0x168>
 80031a8:	68fb      	ldr	r3, [r7, #12]
 80031aa:	1e58      	subs	r0, r3, #1
 80031ac:	687b      	ldr	r3, [r7, #4]
 80031ae:	6859      	ldr	r1, [r3, #4]
 80031b0:	460b      	mov	r3, r1
 80031b2:	005b      	lsls	r3, r3, #1
 80031b4:	440b      	add	r3, r1
 80031b6:	fbb0 f3f3 	udiv	r3, r0, r3
 80031ba:	3301      	adds	r3, #1
 80031bc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031c0:	2b00      	cmp	r3, #0
 80031c2:	bf0c      	ite	eq
 80031c4:	2301      	moveq	r3, #1
 80031c6:	2300      	movne	r3, #0
 80031c8:	b2db      	uxtb	r3, r3
 80031ca:	e012      	b.n	80031f2 <HAL_I2C_Init+0x18e>
 80031cc:	68fb      	ldr	r3, [r7, #12]
 80031ce:	1e58      	subs	r0, r3, #1
 80031d0:	687b      	ldr	r3, [r7, #4]
 80031d2:	6859      	ldr	r1, [r3, #4]
 80031d4:	460b      	mov	r3, r1
 80031d6:	009b      	lsls	r3, r3, #2
 80031d8:	440b      	add	r3, r1
 80031da:	0099      	lsls	r1, r3, #2
 80031dc:	440b      	add	r3, r1
 80031de:	fbb0 f3f3 	udiv	r3, r0, r3
 80031e2:	3301      	adds	r3, #1
 80031e4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80031e8:	2b00      	cmp	r3, #0
 80031ea:	bf0c      	ite	eq
 80031ec:	2301      	moveq	r3, #1
 80031ee:	2300      	movne	r3, #0
 80031f0:	b2db      	uxtb	r3, r3
 80031f2:	2b00      	cmp	r3, #0
 80031f4:	d001      	beq.n	80031fa <HAL_I2C_Init+0x196>
 80031f6:	2301      	movs	r3, #1
 80031f8:	e022      	b.n	8003240 <HAL_I2C_Init+0x1dc>
 80031fa:	687b      	ldr	r3, [r7, #4]
 80031fc:	689b      	ldr	r3, [r3, #8]
 80031fe:	2b00      	cmp	r3, #0
 8003200:	d10e      	bne.n	8003220 <HAL_I2C_Init+0x1bc>
 8003202:	68fb      	ldr	r3, [r7, #12]
 8003204:	1e58      	subs	r0, r3, #1
 8003206:	687b      	ldr	r3, [r7, #4]
 8003208:	6859      	ldr	r1, [r3, #4]
 800320a:	460b      	mov	r3, r1
 800320c:	005b      	lsls	r3, r3, #1
 800320e:	440b      	add	r3, r1
 8003210:	fbb0 f3f3 	udiv	r3, r0, r3
 8003214:	3301      	adds	r3, #1
 8003216:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800321a:	f443 4300 	orr.w	r3, r3, #32768	@ 0x8000
 800321e:	e00f      	b.n	8003240 <HAL_I2C_Init+0x1dc>
 8003220:	68fb      	ldr	r3, [r7, #12]
 8003222:	1e58      	subs	r0, r3, #1
 8003224:	687b      	ldr	r3, [r7, #4]
 8003226:	6859      	ldr	r1, [r3, #4]
 8003228:	460b      	mov	r3, r1
 800322a:	009b      	lsls	r3, r3, #2
 800322c:	440b      	add	r3, r1
 800322e:	0099      	lsls	r1, r3, #2
 8003230:	440b      	add	r3, r1
 8003232:	fbb0 f3f3 	udiv	r3, r0, r3
 8003236:	3301      	adds	r3, #1
 8003238:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800323c:	f443 4340 	orr.w	r3, r3, #49152	@ 0xc000
 8003240:	6879      	ldr	r1, [r7, #4]
 8003242:	6809      	ldr	r1, [r1, #0]
 8003244:	4313      	orrs	r3, r2
 8003246:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003248:	687b      	ldr	r3, [r7, #4]
 800324a:	681b      	ldr	r3, [r3, #0]
 800324c:	681b      	ldr	r3, [r3, #0]
 800324e:	f023 01c0 	bic.w	r1, r3, #192	@ 0xc0
 8003252:	687b      	ldr	r3, [r7, #4]
 8003254:	69da      	ldr	r2, [r3, #28]
 8003256:	687b      	ldr	r3, [r7, #4]
 8003258:	6a1b      	ldr	r3, [r3, #32]
 800325a:	431a      	orrs	r2, r3
 800325c:	687b      	ldr	r3, [r7, #4]
 800325e:	681b      	ldr	r3, [r3, #0]
 8003260:	430a      	orrs	r2, r1
 8003262:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8003264:	687b      	ldr	r3, [r7, #4]
 8003266:	681b      	ldr	r3, [r3, #0]
 8003268:	689b      	ldr	r3, [r3, #8]
 800326a:	f423 4303 	bic.w	r3, r3, #33536	@ 0x8300
 800326e:	f023 03ff 	bic.w	r3, r3, #255	@ 0xff
 8003272:	687a      	ldr	r2, [r7, #4]
 8003274:	6911      	ldr	r1, [r2, #16]
 8003276:	687a      	ldr	r2, [r7, #4]
 8003278:	68d2      	ldr	r2, [r2, #12]
 800327a:	4311      	orrs	r1, r2
 800327c:	687a      	ldr	r2, [r7, #4]
 800327e:	6812      	ldr	r2, [r2, #0]
 8003280:	430b      	orrs	r3, r1
 8003282:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8003284:	687b      	ldr	r3, [r7, #4]
 8003286:	681b      	ldr	r3, [r3, #0]
 8003288:	68db      	ldr	r3, [r3, #12]
 800328a:	f023 01ff 	bic.w	r1, r3, #255	@ 0xff
 800328e:	687b      	ldr	r3, [r7, #4]
 8003290:	695a      	ldr	r2, [r3, #20]
 8003292:	687b      	ldr	r3, [r7, #4]
 8003294:	699b      	ldr	r3, [r3, #24]
 8003296:	431a      	orrs	r2, r3
 8003298:	687b      	ldr	r3, [r7, #4]
 800329a:	681b      	ldr	r3, [r3, #0]
 800329c:	430a      	orrs	r2, r1
 800329e:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80032a0:	687b      	ldr	r3, [r7, #4]
 80032a2:	681b      	ldr	r3, [r3, #0]
 80032a4:	681a      	ldr	r2, [r3, #0]
 80032a6:	687b      	ldr	r3, [r7, #4]
 80032a8:	681b      	ldr	r3, [r3, #0]
 80032aa:	f042 0201 	orr.w	r2, r2, #1
 80032ae:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80032b0:	687b      	ldr	r3, [r7, #4]
 80032b2:	2200      	movs	r2, #0
 80032b4:	641a      	str	r2, [r3, #64]	@ 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	2220      	movs	r2, #32
 80032ba:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	2200      	movs	r2, #0
 80032c2:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80032c4:	687b      	ldr	r3, [r7, #4]
 80032c6:	2200      	movs	r2, #0
 80032c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

  return HAL_OK;
 80032cc:	2300      	movs	r3, #0
}
 80032ce:	4618      	mov	r0, r3
 80032d0:	3710      	adds	r7, #16
 80032d2:	46bd      	mov	sp, r7
 80032d4:	bd80      	pop	{r7, pc}
 80032d6:	bf00      	nop
 80032d8:	000186a0 	.word	0x000186a0
 80032dc:	001e847f 	.word	0x001e847f
 80032e0:	003d08ff 	.word	0x003d08ff
 80032e4:	431bde83 	.word	0x431bde83
 80032e8:	10624dd3 	.word	0x10624dd3

080032ec <HAL_I2C_Master_Transmit>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80032ec:	b580      	push	{r7, lr}
 80032ee:	b088      	sub	sp, #32
 80032f0:	af02      	add	r7, sp, #8
 80032f2:	60f8      	str	r0, [r7, #12]
 80032f4:	607a      	str	r2, [r7, #4]
 80032f6:	461a      	mov	r2, r3
 80032f8:	460b      	mov	r3, r1
 80032fa:	817b      	strh	r3, [r7, #10]
 80032fc:	4613      	mov	r3, r2
 80032fe:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003300:	f7ff fb58 	bl	80029b4 <HAL_GetTick>
 8003304:	6178      	str	r0, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003306:	68fb      	ldr	r3, [r7, #12]
 8003308:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 800330c:	b2db      	uxtb	r3, r3
 800330e:	2b20      	cmp	r3, #32
 8003310:	f040 80e0 	bne.w	80034d4 <HAL_I2C_Master_Transmit+0x1e8>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003314:	697b      	ldr	r3, [r7, #20]
 8003316:	9300      	str	r3, [sp, #0]
 8003318:	2319      	movs	r3, #25
 800331a:	2201      	movs	r2, #1
 800331c:	4970      	ldr	r1, [pc, #448]	@ (80034e0 <HAL_I2C_Master_Transmit+0x1f4>)
 800331e:	68f8      	ldr	r0, [r7, #12]
 8003320:	f001 f90e 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003324:	4603      	mov	r3, r0
 8003326:	2b00      	cmp	r3, #0
 8003328:	d001      	beq.n	800332e <HAL_I2C_Master_Transmit+0x42>
    {
      return HAL_BUSY;
 800332a:	2302      	movs	r3, #2
 800332c:	e0d3      	b.n	80034d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800332e:	68fb      	ldr	r3, [r7, #12]
 8003330:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003334:	2b01      	cmp	r3, #1
 8003336:	d101      	bne.n	800333c <HAL_I2C_Master_Transmit+0x50>
 8003338:	2302      	movs	r3, #2
 800333a:	e0cc      	b.n	80034d6 <HAL_I2C_Master_Transmit+0x1ea>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	2201      	movs	r2, #1
 8003340:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003344:	68fb      	ldr	r3, [r7, #12]
 8003346:	681b      	ldr	r3, [r3, #0]
 8003348:	681b      	ldr	r3, [r3, #0]
 800334a:	f003 0301 	and.w	r3, r3, #1
 800334e:	2b01      	cmp	r3, #1
 8003350:	d007      	beq.n	8003362 <HAL_I2C_Master_Transmit+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	681b      	ldr	r3, [r3, #0]
 8003356:	681a      	ldr	r2, [r3, #0]
 8003358:	68fb      	ldr	r3, [r7, #12]
 800335a:	681b      	ldr	r3, [r3, #0]
 800335c:	f042 0201 	orr.w	r2, r2, #1
 8003360:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003362:	68fb      	ldr	r3, [r7, #12]
 8003364:	681b      	ldr	r3, [r3, #0]
 8003366:	681a      	ldr	r2, [r3, #0]
 8003368:	68fb      	ldr	r3, [r7, #12]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003370:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 8003372:	68fb      	ldr	r3, [r7, #12]
 8003374:	2221      	movs	r2, #33	@ 0x21
 8003376:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800337a:	68fb      	ldr	r3, [r7, #12]
 800337c:	2210      	movs	r2, #16
 800337e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 8003382:	68fb      	ldr	r3, [r7, #12]
 8003384:	2200      	movs	r2, #0
 8003386:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003388:	68fb      	ldr	r3, [r7, #12]
 800338a:	687a      	ldr	r2, [r7, #4]
 800338c:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800338e:	68fb      	ldr	r3, [r7, #12]
 8003390:	893a      	ldrh	r2, [r7, #8]
 8003392:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003394:	68fb      	ldr	r3, [r7, #12]
 8003396:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003398:	b29a      	uxth	r2, r3
 800339a:	68fb      	ldr	r3, [r7, #12]
 800339c:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800339e:	68fb      	ldr	r3, [r7, #12]
 80033a0:	4a50      	ldr	r2, [pc, #320]	@ (80034e4 <HAL_I2C_Master_Transmit+0x1f8>)
 80033a2:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestWrite(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80033a4:	8979      	ldrh	r1, [r7, #10]
 80033a6:	697b      	ldr	r3, [r7, #20]
 80033a8:	6a3a      	ldr	r2, [r7, #32]
 80033aa:	68f8      	ldr	r0, [r7, #12]
 80033ac:	f000 fdfa 	bl	8003fa4 <I2C_MasterRequestWrite>
 80033b0:	4603      	mov	r3, r0
 80033b2:	2b00      	cmp	r3, #0
 80033b4:	d001      	beq.n	80033ba <HAL_I2C_Master_Transmit+0xce>
    {
      return HAL_ERROR;
 80033b6:	2301      	movs	r3, #1
 80033b8:	e08d      	b.n	80034d6 <HAL_I2C_Master_Transmit+0x1ea>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80033ba:	2300      	movs	r3, #0
 80033bc:	613b      	str	r3, [r7, #16]
 80033be:	68fb      	ldr	r3, [r7, #12]
 80033c0:	681b      	ldr	r3, [r3, #0]
 80033c2:	695b      	ldr	r3, [r3, #20]
 80033c4:	613b      	str	r3, [r7, #16]
 80033c6:	68fb      	ldr	r3, [r7, #12]
 80033c8:	681b      	ldr	r3, [r3, #0]
 80033ca:	699b      	ldr	r3, [r3, #24]
 80033cc:	613b      	str	r3, [r7, #16]
 80033ce:	693b      	ldr	r3, [r7, #16]

    while (hi2c->XferSize > 0U)
 80033d0:	e066      	b.n	80034a0 <HAL_I2C_Master_Transmit+0x1b4>
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80033d2:	697a      	ldr	r2, [r7, #20]
 80033d4:	6a39      	ldr	r1, [r7, #32]
 80033d6:	68f8      	ldr	r0, [r7, #12]
 80033d8:	f001 f9cc 	bl	8004774 <I2C_WaitOnTXEFlagUntilTimeout>
 80033dc:	4603      	mov	r3, r0
 80033de:	2b00      	cmp	r3, #0
 80033e0:	d00d      	beq.n	80033fe <HAL_I2C_Master_Transmit+0x112>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80033e2:	68fb      	ldr	r3, [r7, #12]
 80033e4:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80033e6:	2b04      	cmp	r3, #4
 80033e8:	d107      	bne.n	80033fa <HAL_I2C_Master_Transmit+0x10e>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80033ea:	68fb      	ldr	r3, [r7, #12]
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	681a      	ldr	r2, [r3, #0]
 80033f0:	68fb      	ldr	r3, [r7, #12]
 80033f2:	681b      	ldr	r3, [r3, #0]
 80033f4:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80033f8:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 80033fa:	2301      	movs	r3, #1
 80033fc:	e06b      	b.n	80034d6 <HAL_I2C_Master_Transmit+0x1ea>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80033fe:	68fb      	ldr	r3, [r7, #12]
 8003400:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003402:	781a      	ldrb	r2, [r3, #0]
 8003404:	68fb      	ldr	r3, [r7, #12]
 8003406:	681b      	ldr	r3, [r3, #0]
 8003408:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800340a:	68fb      	ldr	r3, [r7, #12]
 800340c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800340e:	1c5a      	adds	r2, r3, #1
 8003410:	68fb      	ldr	r3, [r7, #12]
 8003412:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003414:	68fb      	ldr	r3, [r7, #12]
 8003416:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003418:	b29b      	uxth	r3, r3
 800341a:	3b01      	subs	r3, #1
 800341c:	b29a      	uxth	r2, r3
 800341e:	68fb      	ldr	r3, [r7, #12]
 8003420:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 8003422:	68fb      	ldr	r3, [r7, #12]
 8003424:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003426:	3b01      	subs	r3, #1
 8003428:	b29a      	uxth	r2, r3
 800342a:	68fb      	ldr	r3, [r7, #12]
 800342c:	851a      	strh	r2, [r3, #40]	@ 0x28

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 800342e:	68fb      	ldr	r3, [r7, #12]
 8003430:	681b      	ldr	r3, [r3, #0]
 8003432:	695b      	ldr	r3, [r3, #20]
 8003434:	f003 0304 	and.w	r3, r3, #4
 8003438:	2b04      	cmp	r3, #4
 800343a:	d11b      	bne.n	8003474 <HAL_I2C_Master_Transmit+0x188>
 800343c:	68fb      	ldr	r3, [r7, #12]
 800343e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003440:	2b00      	cmp	r3, #0
 8003442:	d017      	beq.n	8003474 <HAL_I2C_Master_Transmit+0x188>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003444:	68fb      	ldr	r3, [r7, #12]
 8003446:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003448:	781a      	ldrb	r2, [r3, #0]
 800344a:	68fb      	ldr	r3, [r7, #12]
 800344c:	681b      	ldr	r3, [r3, #0]
 800344e:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003450:	68fb      	ldr	r3, [r7, #12]
 8003452:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003454:	1c5a      	adds	r2, r3, #1
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferCount--;
 800345a:	68fb      	ldr	r3, [r7, #12]
 800345c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800345e:	b29b      	uxth	r3, r3
 8003460:	3b01      	subs	r3, #1
 8003462:	b29a      	uxth	r2, r3
 8003464:	68fb      	ldr	r3, [r7, #12]
 8003466:	855a      	strh	r2, [r3, #42]	@ 0x2a
        hi2c->XferSize--;
 8003468:	68fb      	ldr	r3, [r7, #12]
 800346a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800346c:	3b01      	subs	r3, #1
 800346e:	b29a      	uxth	r2, r3
 8003470:	68fb      	ldr	r3, [r7, #12]
 8003472:	851a      	strh	r2, [r3, #40]	@ 0x28
      }

      /* Wait until BTF flag is set */
      if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003474:	697a      	ldr	r2, [r7, #20]
 8003476:	6a39      	ldr	r1, [r7, #32]
 8003478:	68f8      	ldr	r0, [r7, #12]
 800347a:	f001 f9c3 	bl	8004804 <I2C_WaitOnBTFFlagUntilTimeout>
 800347e:	4603      	mov	r3, r0
 8003480:	2b00      	cmp	r3, #0
 8003482:	d00d      	beq.n	80034a0 <HAL_I2C_Master_Transmit+0x1b4>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003484:	68fb      	ldr	r3, [r7, #12]
 8003486:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003488:	2b04      	cmp	r3, #4
 800348a:	d107      	bne.n	800349c <HAL_I2C_Master_Transmit+0x1b0>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800348c:	68fb      	ldr	r3, [r7, #12]
 800348e:	681b      	ldr	r3, [r3, #0]
 8003490:	681a      	ldr	r2, [r3, #0]
 8003492:	68fb      	ldr	r3, [r7, #12]
 8003494:	681b      	ldr	r3, [r3, #0]
 8003496:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800349a:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 800349c:	2301      	movs	r3, #1
 800349e:	e01a      	b.n	80034d6 <HAL_I2C_Master_Transmit+0x1ea>
    while (hi2c->XferSize > 0U)
 80034a0:	68fb      	ldr	r3, [r7, #12]
 80034a2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80034a4:	2b00      	cmp	r3, #0
 80034a6:	d194      	bne.n	80033d2 <HAL_I2C_Master_Transmit+0xe6>
      }
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80034a8:	68fb      	ldr	r3, [r7, #12]
 80034aa:	681b      	ldr	r3, [r3, #0]
 80034ac:	681a      	ldr	r2, [r3, #0]
 80034ae:	68fb      	ldr	r3, [r7, #12]
 80034b0:	681b      	ldr	r3, [r3, #0]
 80034b2:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80034b6:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 80034b8:	68fb      	ldr	r3, [r7, #12]
 80034ba:	2220      	movs	r2, #32
 80034bc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 80034c0:	68fb      	ldr	r3, [r7, #12]
 80034c2:	2200      	movs	r2, #0
 80034c4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80034c8:	68fb      	ldr	r3, [r7, #12]
 80034ca:	2200      	movs	r2, #0
 80034cc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 80034d0:	2300      	movs	r3, #0
 80034d2:	e000      	b.n	80034d6 <HAL_I2C_Master_Transmit+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 80034d4:	2302      	movs	r3, #2
  }
}
 80034d6:	4618      	mov	r0, r3
 80034d8:	3718      	adds	r7, #24
 80034da:	46bd      	mov	sp, r7
 80034dc:	bd80      	pop	{r7, pc}
 80034de:	bf00      	nop
 80034e0:	00100002 	.word	0x00100002
 80034e4:	ffff0000 	.word	0xffff0000

080034e8 <HAL_I2C_Master_Receive>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 80034e8:	b580      	push	{r7, lr}
 80034ea:	b08c      	sub	sp, #48	@ 0x30
 80034ec:	af02      	add	r7, sp, #8
 80034ee:	60f8      	str	r0, [r7, #12]
 80034f0:	607a      	str	r2, [r7, #4]
 80034f2:	461a      	mov	r2, r3
 80034f4:	460b      	mov	r3, r1
 80034f6:	817b      	strh	r3, [r7, #10]
 80034f8:	4613      	mov	r3, r2
 80034fa:	813b      	strh	r3, [r7, #8]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 80034fc:	f7ff fa5a 	bl	80029b4 <HAL_GetTick>
 8003500:	6278      	str	r0, [r7, #36]	@ 0x24

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003502:	68fb      	ldr	r3, [r7, #12]
 8003504:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003508:	b2db      	uxtb	r3, r3
 800350a:	2b20      	cmp	r3, #32
 800350c:	f040 8217 	bne.w	800393e <HAL_I2C_Master_Receive+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003510:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003512:	9300      	str	r3, [sp, #0]
 8003514:	2319      	movs	r3, #25
 8003516:	2201      	movs	r2, #1
 8003518:	497c      	ldr	r1, [pc, #496]	@ (800370c <HAL_I2C_Master_Receive+0x224>)
 800351a:	68f8      	ldr	r0, [r7, #12]
 800351c:	f001 f810 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003520:	4603      	mov	r3, r0
 8003522:	2b00      	cmp	r3, #0
 8003524:	d001      	beq.n	800352a <HAL_I2C_Master_Receive+0x42>
    {
      return HAL_BUSY;
 8003526:	2302      	movs	r3, #2
 8003528:	e20a      	b.n	8003940 <HAL_I2C_Master_Receive+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800352a:	68fb      	ldr	r3, [r7, #12]
 800352c:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003530:	2b01      	cmp	r3, #1
 8003532:	d101      	bne.n	8003538 <HAL_I2C_Master_Receive+0x50>
 8003534:	2302      	movs	r3, #2
 8003536:	e203      	b.n	8003940 <HAL_I2C_Master_Receive+0x458>
 8003538:	68fb      	ldr	r3, [r7, #12]
 800353a:	2201      	movs	r2, #1
 800353c:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003540:	68fb      	ldr	r3, [r7, #12]
 8003542:	681b      	ldr	r3, [r3, #0]
 8003544:	681b      	ldr	r3, [r3, #0]
 8003546:	f003 0301 	and.w	r3, r3, #1
 800354a:	2b01      	cmp	r3, #1
 800354c:	d007      	beq.n	800355e <HAL_I2C_Master_Receive+0x76>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 800354e:	68fb      	ldr	r3, [r7, #12]
 8003550:	681b      	ldr	r3, [r3, #0]
 8003552:	681a      	ldr	r2, [r3, #0]
 8003554:	68fb      	ldr	r3, [r7, #12]
 8003556:	681b      	ldr	r3, [r3, #0]
 8003558:	f042 0201 	orr.w	r2, r2, #1
 800355c:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800355e:	68fb      	ldr	r3, [r7, #12]
 8003560:	681b      	ldr	r3, [r3, #0]
 8003562:	681a      	ldr	r2, [r3, #0]
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	681b      	ldr	r3, [r3, #0]
 8003568:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 800356c:	601a      	str	r2, [r3, #0]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	2222      	movs	r2, #34	@ 0x22
 8003572:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 8003576:	68fb      	ldr	r3, [r7, #12]
 8003578:	2210      	movs	r2, #16
 800357a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	2200      	movs	r2, #0
 8003582:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003584:	68fb      	ldr	r3, [r7, #12]
 8003586:	687a      	ldr	r2, [r7, #4]
 8003588:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800358a:	68fb      	ldr	r3, [r7, #12]
 800358c:	893a      	ldrh	r2, [r7, #8]
 800358e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003590:	68fb      	ldr	r3, [r7, #12]
 8003592:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003594:	b29a      	uxth	r2, r3
 8003596:	68fb      	ldr	r3, [r7, #12]
 8003598:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	4a5c      	ldr	r2, [pc, #368]	@ (8003710 <HAL_I2C_Master_Receive+0x228>)
 800359e:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address */
    if (I2C_MasterRequestRead(hi2c, DevAddress, Timeout, tickstart) != HAL_OK)
 80035a0:	8979      	ldrh	r1, [r7, #10]
 80035a2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80035a4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 80035a6:	68f8      	ldr	r0, [r7, #12]
 80035a8:	f000 fd7e 	bl	80040a8 <I2C_MasterRequestRead>
 80035ac:	4603      	mov	r3, r0
 80035ae:	2b00      	cmp	r3, #0
 80035b0:	d001      	beq.n	80035b6 <HAL_I2C_Master_Receive+0xce>
    {
      return HAL_ERROR;
 80035b2:	2301      	movs	r3, #1
 80035b4:	e1c4      	b.n	8003940 <HAL_I2C_Master_Receive+0x458>
    }

    if (hi2c->XferSize == 0U)
 80035b6:	68fb      	ldr	r3, [r7, #12]
 80035b8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ba:	2b00      	cmp	r3, #0
 80035bc:	d113      	bne.n	80035e6 <HAL_I2C_Master_Receive+0xfe>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035be:	2300      	movs	r3, #0
 80035c0:	623b      	str	r3, [r7, #32]
 80035c2:	68fb      	ldr	r3, [r7, #12]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	695b      	ldr	r3, [r3, #20]
 80035c8:	623b      	str	r3, [r7, #32]
 80035ca:	68fb      	ldr	r3, [r7, #12]
 80035cc:	681b      	ldr	r3, [r3, #0]
 80035ce:	699b      	ldr	r3, [r3, #24]
 80035d0:	623b      	str	r3, [r7, #32]
 80035d2:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80035d4:	68fb      	ldr	r3, [r7, #12]
 80035d6:	681b      	ldr	r3, [r3, #0]
 80035d8:	681a      	ldr	r2, [r3, #0]
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	681b      	ldr	r3, [r3, #0]
 80035de:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80035e2:	601a      	str	r2, [r3, #0]
 80035e4:	e198      	b.n	8003918 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 1U)
 80035e6:	68fb      	ldr	r3, [r7, #12]
 80035e8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80035ea:	2b01      	cmp	r3, #1
 80035ec:	d11b      	bne.n	8003626 <HAL_I2C_Master_Receive+0x13e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80035ee:	68fb      	ldr	r3, [r7, #12]
 80035f0:	681b      	ldr	r3, [r3, #0]
 80035f2:	681a      	ldr	r2, [r3, #0]
 80035f4:	68fb      	ldr	r3, [r7, #12]
 80035f6:	681b      	ldr	r3, [r3, #0]
 80035f8:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80035fc:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80035fe:	2300      	movs	r3, #0
 8003600:	61fb      	str	r3, [r7, #28]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	695b      	ldr	r3, [r3, #20]
 8003608:	61fb      	str	r3, [r7, #28]
 800360a:	68fb      	ldr	r3, [r7, #12]
 800360c:	681b      	ldr	r3, [r3, #0]
 800360e:	699b      	ldr	r3, [r3, #24]
 8003610:	61fb      	str	r3, [r7, #28]
 8003612:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	681b      	ldr	r3, [r3, #0]
 8003618:	681a      	ldr	r2, [r3, #0]
 800361a:	68fb      	ldr	r3, [r7, #12]
 800361c:	681b      	ldr	r3, [r3, #0]
 800361e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003622:	601a      	str	r2, [r3, #0]
 8003624:	e178      	b.n	8003918 <HAL_I2C_Master_Receive+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003626:	68fb      	ldr	r3, [r7, #12]
 8003628:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800362a:	2b02      	cmp	r3, #2
 800362c:	d11b      	bne.n	8003666 <HAL_I2C_Master_Receive+0x17e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	681b      	ldr	r3, [r3, #0]
 8003632:	681a      	ldr	r2, [r3, #0]
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	681b      	ldr	r3, [r3, #0]
 8003638:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 800363c:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800363e:	68fb      	ldr	r3, [r7, #12]
 8003640:	681b      	ldr	r3, [r3, #0]
 8003642:	681a      	ldr	r2, [r3, #0]
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 800364c:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800364e:	2300      	movs	r3, #0
 8003650:	61bb      	str	r3, [r7, #24]
 8003652:	68fb      	ldr	r3, [r7, #12]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	695b      	ldr	r3, [r3, #20]
 8003658:	61bb      	str	r3, [r7, #24]
 800365a:	68fb      	ldr	r3, [r7, #12]
 800365c:	681b      	ldr	r3, [r3, #0]
 800365e:	699b      	ldr	r3, [r3, #24]
 8003660:	61bb      	str	r3, [r7, #24]
 8003662:	69bb      	ldr	r3, [r7, #24]
 8003664:	e158      	b.n	8003918 <HAL_I2C_Master_Receive+0x430>
    }
    else
    {
      /* Enable Acknowledge */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003666:	68fb      	ldr	r3, [r7, #12]
 8003668:	681b      	ldr	r3, [r3, #0]
 800366a:	681a      	ldr	r2, [r3, #0]
 800366c:	68fb      	ldr	r3, [r7, #12]
 800366e:	681b      	ldr	r3, [r3, #0]
 8003670:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8003674:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003676:	2300      	movs	r3, #0
 8003678:	617b      	str	r3, [r7, #20]
 800367a:	68fb      	ldr	r3, [r7, #12]
 800367c:	681b      	ldr	r3, [r3, #0]
 800367e:	695b      	ldr	r3, [r3, #20]
 8003680:	617b      	str	r3, [r7, #20]
 8003682:	68fb      	ldr	r3, [r7, #12]
 8003684:	681b      	ldr	r3, [r3, #0]
 8003686:	699b      	ldr	r3, [r3, #24]
 8003688:	617b      	str	r3, [r7, #20]
 800368a:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 800368c:	e144      	b.n	8003918 <HAL_I2C_Master_Receive+0x430>
    {
      if (hi2c->XferSize <= 3U)
 800368e:	68fb      	ldr	r3, [r7, #12]
 8003690:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003692:	2b03      	cmp	r3, #3
 8003694:	f200 80f1 	bhi.w	800387a <HAL_I2C_Master_Receive+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003698:	68fb      	ldr	r3, [r7, #12]
 800369a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800369c:	2b01      	cmp	r3, #1
 800369e:	d123      	bne.n	80036e8 <HAL_I2C_Master_Receive+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 80036a0:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80036a2:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 80036a4:	68f8      	ldr	r0, [r7, #12]
 80036a6:	f001 f8f5 	bl	8004894 <I2C_WaitOnRXNEFlagUntilTimeout>
 80036aa:	4603      	mov	r3, r0
 80036ac:	2b00      	cmp	r3, #0
 80036ae:	d001      	beq.n	80036b4 <HAL_I2C_Master_Receive+0x1cc>
          {
            return HAL_ERROR;
 80036b0:	2301      	movs	r3, #1
 80036b2:	e145      	b.n	8003940 <HAL_I2C_Master_Receive+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80036b4:	68fb      	ldr	r3, [r7, #12]
 80036b6:	681b      	ldr	r3, [r3, #0]
 80036b8:	691a      	ldr	r2, [r3, #16]
 80036ba:	68fb      	ldr	r3, [r7, #12]
 80036bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036be:	b2d2      	uxtb	r2, r2
 80036c0:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80036c2:	68fb      	ldr	r3, [r7, #12]
 80036c4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80036c6:	1c5a      	adds	r2, r3, #1
 80036c8:	68fb      	ldr	r3, [r7, #12]
 80036ca:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80036cc:	68fb      	ldr	r3, [r7, #12]
 80036ce:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036d0:	3b01      	subs	r3, #1
 80036d2:	b29a      	uxth	r2, r3
 80036d4:	68fb      	ldr	r3, [r7, #12]
 80036d6:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80036d8:	68fb      	ldr	r3, [r7, #12]
 80036da:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80036dc:	b29b      	uxth	r3, r3
 80036de:	3b01      	subs	r3, #1
 80036e0:	b29a      	uxth	r2, r3
 80036e2:	68fb      	ldr	r3, [r7, #12]
 80036e4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 80036e6:	e117      	b.n	8003918 <HAL_I2C_Master_Receive+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80036ec:	2b02      	cmp	r3, #2
 80036ee:	d14e      	bne.n	800378e <HAL_I2C_Master_Receive+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80036f0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80036f2:	9300      	str	r3, [sp, #0]
 80036f4:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80036f6:	2200      	movs	r2, #0
 80036f8:	4906      	ldr	r1, [pc, #24]	@ (8003714 <HAL_I2C_Master_Receive+0x22c>)
 80036fa:	68f8      	ldr	r0, [r7, #12]
 80036fc:	f000 ff20 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003700:	4603      	mov	r3, r0
 8003702:	2b00      	cmp	r3, #0
 8003704:	d008      	beq.n	8003718 <HAL_I2C_Master_Receive+0x230>
          {
            return HAL_ERROR;
 8003706:	2301      	movs	r3, #1
 8003708:	e11a      	b.n	8003940 <HAL_I2C_Master_Receive+0x458>
 800370a:	bf00      	nop
 800370c:	00100002 	.word	0x00100002
 8003710:	ffff0000 	.word	0xffff0000
 8003714:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003718:	68fb      	ldr	r3, [r7, #12]
 800371a:	681b      	ldr	r3, [r3, #0]
 800371c:	681a      	ldr	r2, [r3, #0]
 800371e:	68fb      	ldr	r3, [r7, #12]
 8003720:	681b      	ldr	r3, [r3, #0]
 8003722:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003726:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003728:	68fb      	ldr	r3, [r7, #12]
 800372a:	681b      	ldr	r3, [r3, #0]
 800372c:	691a      	ldr	r2, [r3, #16]
 800372e:	68fb      	ldr	r3, [r7, #12]
 8003730:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003732:	b2d2      	uxtb	r2, r2
 8003734:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003736:	68fb      	ldr	r3, [r7, #12]
 8003738:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800373a:	1c5a      	adds	r2, r3, #1
 800373c:	68fb      	ldr	r3, [r7, #12]
 800373e:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003740:	68fb      	ldr	r3, [r7, #12]
 8003742:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003744:	3b01      	subs	r3, #1
 8003746:	b29a      	uxth	r2, r3
 8003748:	68fb      	ldr	r3, [r7, #12]
 800374a:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800374c:	68fb      	ldr	r3, [r7, #12]
 800374e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003750:	b29b      	uxth	r3, r3
 8003752:	3b01      	subs	r3, #1
 8003754:	b29a      	uxth	r2, r3
 8003756:	68fb      	ldr	r3, [r7, #12]
 8003758:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800375a:	68fb      	ldr	r3, [r7, #12]
 800375c:	681b      	ldr	r3, [r3, #0]
 800375e:	691a      	ldr	r2, [r3, #16]
 8003760:	68fb      	ldr	r3, [r7, #12]
 8003762:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003764:	b2d2      	uxtb	r2, r2
 8003766:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003768:	68fb      	ldr	r3, [r7, #12]
 800376a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800376c:	1c5a      	adds	r2, r3, #1
 800376e:	68fb      	ldr	r3, [r7, #12]
 8003770:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003772:	68fb      	ldr	r3, [r7, #12]
 8003774:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003776:	3b01      	subs	r3, #1
 8003778:	b29a      	uxth	r2, r3
 800377a:	68fb      	ldr	r3, [r7, #12]
 800377c:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800377e:	68fb      	ldr	r3, [r7, #12]
 8003780:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003782:	b29b      	uxth	r3, r3
 8003784:	3b01      	subs	r3, #1
 8003786:	b29a      	uxth	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800378c:	e0c4      	b.n	8003918 <HAL_I2C_Master_Receive+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 800378e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003790:	9300      	str	r3, [sp, #0]
 8003792:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8003794:	2200      	movs	r2, #0
 8003796:	496c      	ldr	r1, [pc, #432]	@ (8003948 <HAL_I2C_Master_Receive+0x460>)
 8003798:	68f8      	ldr	r0, [r7, #12]
 800379a:	f000 fed1 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 800379e:	4603      	mov	r3, r0
 80037a0:	2b00      	cmp	r3, #0
 80037a2:	d001      	beq.n	80037a8 <HAL_I2C_Master_Receive+0x2c0>
          {
            return HAL_ERROR;
 80037a4:	2301      	movs	r3, #1
 80037a6:	e0cb      	b.n	8003940 <HAL_I2C_Master_Receive+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80037a8:	68fb      	ldr	r3, [r7, #12]
 80037aa:	681b      	ldr	r3, [r3, #0]
 80037ac:	681a      	ldr	r2, [r3, #0]
 80037ae:	68fb      	ldr	r3, [r7, #12]
 80037b0:	681b      	ldr	r3, [r3, #0]
 80037b2:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80037b6:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80037b8:	68fb      	ldr	r3, [r7, #12]
 80037ba:	681b      	ldr	r3, [r3, #0]
 80037bc:	691a      	ldr	r2, [r3, #16]
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037c2:	b2d2      	uxtb	r2, r2
 80037c4:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80037c6:	68fb      	ldr	r3, [r7, #12]
 80037c8:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80037ca:	1c5a      	adds	r2, r3, #1
 80037cc:	68fb      	ldr	r3, [r7, #12]
 80037ce:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80037d0:	68fb      	ldr	r3, [r7, #12]
 80037d2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80037d4:	3b01      	subs	r3, #1
 80037d6:	b29a      	uxth	r2, r3
 80037d8:	68fb      	ldr	r3, [r7, #12]
 80037da:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 80037dc:	68fb      	ldr	r3, [r7, #12]
 80037de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80037e0:	b29b      	uxth	r3, r3
 80037e2:	3b01      	subs	r3, #1
 80037e4:	b29a      	uxth	r2, r3
 80037e6:	68fb      	ldr	r3, [r7, #12]
 80037e8:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 80037ea:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80037ec:	9300      	str	r3, [sp, #0]
 80037ee:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80037f0:	2200      	movs	r2, #0
 80037f2:	4955      	ldr	r1, [pc, #340]	@ (8003948 <HAL_I2C_Master_Receive+0x460>)
 80037f4:	68f8      	ldr	r0, [r7, #12]
 80037f6:	f000 fea3 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 80037fa:	4603      	mov	r3, r0
 80037fc:	2b00      	cmp	r3, #0
 80037fe:	d001      	beq.n	8003804 <HAL_I2C_Master_Receive+0x31c>
          {
            return HAL_ERROR;
 8003800:	2301      	movs	r3, #1
 8003802:	e09d      	b.n	8003940 <HAL_I2C_Master_Receive+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003804:	68fb      	ldr	r3, [r7, #12]
 8003806:	681b      	ldr	r3, [r3, #0]
 8003808:	681a      	ldr	r2, [r3, #0]
 800380a:	68fb      	ldr	r3, [r7, #12]
 800380c:	681b      	ldr	r3, [r3, #0]
 800380e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003812:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003814:	68fb      	ldr	r3, [r7, #12]
 8003816:	681b      	ldr	r3, [r3, #0]
 8003818:	691a      	ldr	r2, [r3, #16]
 800381a:	68fb      	ldr	r3, [r7, #12]
 800381c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800381e:	b2d2      	uxtb	r2, r2
 8003820:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003822:	68fb      	ldr	r3, [r7, #12]
 8003824:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003826:	1c5a      	adds	r2, r3, #1
 8003828:	68fb      	ldr	r3, [r7, #12]
 800382a:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800382c:	68fb      	ldr	r3, [r7, #12]
 800382e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003830:	3b01      	subs	r3, #1
 8003832:	b29a      	uxth	r2, r3
 8003834:	68fb      	ldr	r3, [r7, #12]
 8003836:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003838:	68fb      	ldr	r3, [r7, #12]
 800383a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800383c:	b29b      	uxth	r3, r3
 800383e:	3b01      	subs	r3, #1
 8003840:	b29a      	uxth	r2, r3
 8003842:	68fb      	ldr	r3, [r7, #12]
 8003844:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003846:	68fb      	ldr	r3, [r7, #12]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	691a      	ldr	r2, [r3, #16]
 800384c:	68fb      	ldr	r3, [r7, #12]
 800384e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003850:	b2d2      	uxtb	r2, r2
 8003852:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003854:	68fb      	ldr	r3, [r7, #12]
 8003856:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003858:	1c5a      	adds	r2, r3, #1
 800385a:	68fb      	ldr	r3, [r7, #12]
 800385c:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 800385e:	68fb      	ldr	r3, [r7, #12]
 8003860:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003862:	3b01      	subs	r3, #1
 8003864:	b29a      	uxth	r2, r3
 8003866:	68fb      	ldr	r3, [r7, #12]
 8003868:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800386a:	68fb      	ldr	r3, [r7, #12]
 800386c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800386e:	b29b      	uxth	r3, r3
 8003870:	3b01      	subs	r3, #1
 8003872:	b29a      	uxth	r2, r3
 8003874:	68fb      	ldr	r3, [r7, #12]
 8003876:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003878:	e04e      	b.n	8003918 <HAL_I2C_Master_Receive+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 800387a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800387c:	6b39      	ldr	r1, [r7, #48]	@ 0x30
 800387e:	68f8      	ldr	r0, [r7, #12]
 8003880:	f001 f808 	bl	8004894 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003884:	4603      	mov	r3, r0
 8003886:	2b00      	cmp	r3, #0
 8003888:	d001      	beq.n	800388e <HAL_I2C_Master_Receive+0x3a6>
        {
          return HAL_ERROR;
 800388a:	2301      	movs	r3, #1
 800388c:	e058      	b.n	8003940 <HAL_I2C_Master_Receive+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800388e:	68fb      	ldr	r3, [r7, #12]
 8003890:	681b      	ldr	r3, [r3, #0]
 8003892:	691a      	ldr	r2, [r3, #16]
 8003894:	68fb      	ldr	r3, [r7, #12]
 8003896:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003898:	b2d2      	uxtb	r2, r2
 800389a:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 800389c:	68fb      	ldr	r3, [r7, #12]
 800389e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038a0:	1c5a      	adds	r2, r3, #1
 80038a2:	68fb      	ldr	r3, [r7, #12]
 80038a4:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 80038a6:	68fb      	ldr	r3, [r7, #12]
 80038a8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038aa:	3b01      	subs	r3, #1
 80038ac:	b29a      	uxth	r2, r3
 80038ae:	68fb      	ldr	r3, [r7, #12]
 80038b0:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 80038b2:	68fb      	ldr	r3, [r7, #12]
 80038b4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80038b6:	b29b      	uxth	r3, r3
 80038b8:	3b01      	subs	r3, #1
 80038ba:	b29a      	uxth	r2, r3
 80038bc:	68fb      	ldr	r3, [r7, #12]
 80038be:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 80038c0:	68fb      	ldr	r3, [r7, #12]
 80038c2:	681b      	ldr	r3, [r3, #0]
 80038c4:	695b      	ldr	r3, [r3, #20]
 80038c6:	f003 0304 	and.w	r3, r3, #4
 80038ca:	2b04      	cmp	r3, #4
 80038cc:	d124      	bne.n	8003918 <HAL_I2C_Master_Receive+0x430>
        {

          if (hi2c->XferSize == 3U)
 80038ce:	68fb      	ldr	r3, [r7, #12]
 80038d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 80038d2:	2b03      	cmp	r3, #3
 80038d4:	d107      	bne.n	80038e6 <HAL_I2C_Master_Receive+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80038d6:	68fb      	ldr	r3, [r7, #12]
 80038d8:	681b      	ldr	r3, [r3, #0]
 80038da:	681a      	ldr	r2, [r3, #0]
 80038dc:	68fb      	ldr	r3, [r7, #12]
 80038de:	681b      	ldr	r3, [r3, #0]
 80038e0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 80038e4:	601a      	str	r2, [r3, #0]
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80038e6:	68fb      	ldr	r3, [r7, #12]
 80038e8:	681b      	ldr	r3, [r3, #0]
 80038ea:	691a      	ldr	r2, [r3, #16]
 80038ec:	68fb      	ldr	r3, [r7, #12]
 80038ee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f0:	b2d2      	uxtb	r2, r2
 80038f2:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 80038f4:	68fb      	ldr	r3, [r7, #12]
 80038f6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80038f8:	1c5a      	adds	r2, r3, #1
 80038fa:	68fb      	ldr	r3, [r7, #12]
 80038fc:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 80038fe:	68fb      	ldr	r3, [r7, #12]
 8003900:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003902:	3b01      	subs	r3, #1
 8003904:	b29a      	uxth	r2, r3
 8003906:	68fb      	ldr	r3, [r7, #12]
 8003908:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 800390a:	68fb      	ldr	r3, [r7, #12]
 800390c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800390e:	b29b      	uxth	r3, r3
 8003910:	3b01      	subs	r3, #1
 8003912:	b29a      	uxth	r2, r3
 8003914:	68fb      	ldr	r3, [r7, #12]
 8003916:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003918:	68fb      	ldr	r3, [r7, #12]
 800391a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800391c:	2b00      	cmp	r3, #0
 800391e:	f47f aeb6 	bne.w	800368e <HAL_I2C_Master_Receive+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003922:	68fb      	ldr	r3, [r7, #12]
 8003924:	2220      	movs	r2, #32
 8003926:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 800392a:	68fb      	ldr	r3, [r7, #12]
 800392c:	2200      	movs	r2, #0
 800392e:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003932:	68fb      	ldr	r3, [r7, #12]
 8003934:	2200      	movs	r2, #0
 8003936:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 800393a:	2300      	movs	r3, #0
 800393c:	e000      	b.n	8003940 <HAL_I2C_Master_Receive+0x458>
  }
  else
  {
    return HAL_BUSY;
 800393e:	2302      	movs	r3, #2
  }
}
 8003940:	4618      	mov	r0, r3
 8003942:	3728      	adds	r7, #40	@ 0x28
 8003944:	46bd      	mov	sp, r7
 8003946:	bd80      	pop	{r7, pc}
 8003948:	00010004 	.word	0x00010004

0800394c <HAL_I2C_Mem_Write>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Write(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 800394c:	b580      	push	{r7, lr}
 800394e:	b088      	sub	sp, #32
 8003950:	af02      	add	r7, sp, #8
 8003952:	60f8      	str	r0, [r7, #12]
 8003954:	4608      	mov	r0, r1
 8003956:	4611      	mov	r1, r2
 8003958:	461a      	mov	r2, r3
 800395a:	4603      	mov	r3, r0
 800395c:	817b      	strh	r3, [r7, #10]
 800395e:	460b      	mov	r3, r1
 8003960:	813b      	strh	r3, [r7, #8]
 8003962:	4613      	mov	r3, r2
 8003964:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003966:	f7ff f825 	bl	80029b4 <HAL_GetTick>
 800396a:	6178      	str	r0, [r7, #20]

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800396c:	68fb      	ldr	r3, [r7, #12]
 800396e:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003972:	b2db      	uxtb	r3, r3
 8003974:	2b20      	cmp	r3, #32
 8003976:	f040 80d9 	bne.w	8003b2c <HAL_I2C_Mem_Write+0x1e0>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 800397a:	697b      	ldr	r3, [r7, #20]
 800397c:	9300      	str	r3, [sp, #0]
 800397e:	2319      	movs	r3, #25
 8003980:	2201      	movs	r2, #1
 8003982:	496d      	ldr	r1, [pc, #436]	@ (8003b38 <HAL_I2C_Mem_Write+0x1ec>)
 8003984:	68f8      	ldr	r0, [r7, #12]
 8003986:	f000 fddb 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 800398a:	4603      	mov	r3, r0
 800398c:	2b00      	cmp	r3, #0
 800398e:	d001      	beq.n	8003994 <HAL_I2C_Mem_Write+0x48>
    {
      return HAL_BUSY;
 8003990:	2302      	movs	r3, #2
 8003992:	e0cc      	b.n	8003b2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003994:	68fb      	ldr	r3, [r7, #12]
 8003996:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 800399a:	2b01      	cmp	r3, #1
 800399c:	d101      	bne.n	80039a2 <HAL_I2C_Mem_Write+0x56>
 800399e:	2302      	movs	r3, #2
 80039a0:	e0c5      	b.n	8003b2e <HAL_I2C_Mem_Write+0x1e2>
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2201      	movs	r2, #1
 80039a6:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80039aa:	68fb      	ldr	r3, [r7, #12]
 80039ac:	681b      	ldr	r3, [r3, #0]
 80039ae:	681b      	ldr	r3, [r3, #0]
 80039b0:	f003 0301 	and.w	r3, r3, #1
 80039b4:	2b01      	cmp	r3, #1
 80039b6:	d007      	beq.n	80039c8 <HAL_I2C_Mem_Write+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80039b8:	68fb      	ldr	r3, [r7, #12]
 80039ba:	681b      	ldr	r3, [r3, #0]
 80039bc:	681a      	ldr	r2, [r3, #0]
 80039be:	68fb      	ldr	r3, [r7, #12]
 80039c0:	681b      	ldr	r3, [r3, #0]
 80039c2:	f042 0201 	orr.w	r2, r2, #1
 80039c6:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80039c8:	68fb      	ldr	r3, [r7, #12]
 80039ca:	681b      	ldr	r3, [r3, #0]
 80039cc:	681a      	ldr	r2, [r3, #0]
 80039ce:	68fb      	ldr	r3, [r7, #12]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 80039d6:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80039d8:	68fb      	ldr	r3, [r7, #12]
 80039da:	2221      	movs	r2, #33	@ 0x21
 80039dc:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 80039e0:	68fb      	ldr	r3, [r7, #12]
 80039e2:	2240      	movs	r2, #64	@ 0x40
 80039e4:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80039e8:	68fb      	ldr	r3, [r7, #12]
 80039ea:	2200      	movs	r2, #0
 80039ec:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80039ee:	68fb      	ldr	r3, [r7, #12]
 80039f0:	6a3a      	ldr	r2, [r7, #32]
 80039f2:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 80039f4:	68fb      	ldr	r3, [r7, #12]
 80039f6:	8cba      	ldrh	r2, [r7, #36]	@ 0x24
 80039f8:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80039fa:	68fb      	ldr	r3, [r7, #12]
 80039fc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 80039fe:	b29a      	uxth	r2, r3
 8003a00:	68fb      	ldr	r3, [r7, #12]
 8003a02:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003a04:	68fb      	ldr	r3, [r7, #12]
 8003a06:	4a4d      	ldr	r2, [pc, #308]	@ (8003b3c <HAL_I2C_Mem_Write+0x1f0>)
 8003a08:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryWrite(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003a0a:	88f8      	ldrh	r0, [r7, #6]
 8003a0c:	893a      	ldrh	r2, [r7, #8]
 8003a0e:	8979      	ldrh	r1, [r7, #10]
 8003a10:	697b      	ldr	r3, [r7, #20]
 8003a12:	9301      	str	r3, [sp, #4]
 8003a14:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8003a16:	9300      	str	r3, [sp, #0]
 8003a18:	4603      	mov	r3, r0
 8003a1a:	68f8      	ldr	r0, [r7, #12]
 8003a1c:	f000 fc12 	bl	8004244 <I2C_RequestMemoryWrite>
 8003a20:	4603      	mov	r3, r0
 8003a22:	2b00      	cmp	r3, #0
 8003a24:	d052      	beq.n	8003acc <HAL_I2C_Mem_Write+0x180>
    {
      return HAL_ERROR;
 8003a26:	2301      	movs	r3, #1
 8003a28:	e081      	b.n	8003b2e <HAL_I2C_Mem_Write+0x1e2>
    }

    while (hi2c->XferSize > 0U)
    {
      /* Wait until TXE flag is set */
      if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003a2a:	697a      	ldr	r2, [r7, #20]
 8003a2c:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003a2e:	68f8      	ldr	r0, [r7, #12]
 8003a30:	f000 fea0 	bl	8004774 <I2C_WaitOnTXEFlagUntilTimeout>
 8003a34:	4603      	mov	r3, r0
 8003a36:	2b00      	cmp	r3, #0
 8003a38:	d00d      	beq.n	8003a56 <HAL_I2C_Mem_Write+0x10a>
      {
        if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003a3a:	68fb      	ldr	r3, [r7, #12]
 8003a3c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003a3e:	2b04      	cmp	r3, #4
 8003a40:	d107      	bne.n	8003a52 <HAL_I2C_Mem_Write+0x106>
        {
          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003a42:	68fb      	ldr	r3, [r7, #12]
 8003a44:	681b      	ldr	r3, [r3, #0]
 8003a46:	681a      	ldr	r2, [r3, #0]
 8003a48:	68fb      	ldr	r3, [r7, #12]
 8003a4a:	681b      	ldr	r3, [r3, #0]
 8003a4c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003a50:	601a      	str	r2, [r3, #0]
        }
        return HAL_ERROR;
 8003a52:	2301      	movs	r3, #1
 8003a54:	e06b      	b.n	8003b2e <HAL_I2C_Mem_Write+0x1e2>
      }

      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a56:	68fb      	ldr	r3, [r7, #12]
 8003a58:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a5a:	781a      	ldrb	r2, [r3, #0]
 8003a5c:	68fb      	ldr	r3, [r7, #12]
 8003a5e:	681b      	ldr	r3, [r3, #0]
 8003a60:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003a66:	1c5a      	adds	r2, r3, #1
 8003a68:	68fb      	ldr	r3, [r7, #12]
 8003a6a:	625a      	str	r2, [r3, #36]	@ 0x24

      /* Update counter */
      hi2c->XferSize--;
 8003a6c:	68fb      	ldr	r3, [r7, #12]
 8003a6e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a70:	3b01      	subs	r3, #1
 8003a72:	b29a      	uxth	r2, r3
 8003a74:	68fb      	ldr	r3, [r7, #12]
 8003a76:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 8003a78:	68fb      	ldr	r3, [r7, #12]
 8003a7a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003a7c:	b29b      	uxth	r3, r3
 8003a7e:	3b01      	subs	r3, #1
 8003a80:	b29a      	uxth	r2, r3
 8003a82:	68fb      	ldr	r3, [r7, #12]
 8003a84:	855a      	strh	r2, [r3, #42]	@ 0x2a

      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET) && (hi2c->XferSize != 0U))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	681b      	ldr	r3, [r3, #0]
 8003a8a:	695b      	ldr	r3, [r3, #20]
 8003a8c:	f003 0304 	and.w	r3, r3, #4
 8003a90:	2b04      	cmp	r3, #4
 8003a92:	d11b      	bne.n	8003acc <HAL_I2C_Mem_Write+0x180>
 8003a94:	68fb      	ldr	r3, [r7, #12]
 8003a96:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003a98:	2b00      	cmp	r3, #0
 8003a9a:	d017      	beq.n	8003acc <HAL_I2C_Mem_Write+0x180>
      {
        /* Write data to DR */
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003a9c:	68fb      	ldr	r3, [r7, #12]
 8003a9e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aa0:	781a      	ldrb	r2, [r3, #0]
 8003aa2:	68fb      	ldr	r3, [r7, #12]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	611a      	str	r2, [r3, #16]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003aa8:	68fb      	ldr	r3, [r7, #12]
 8003aaa:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003aac:	1c5a      	adds	r2, r3, #1
 8003aae:	68fb      	ldr	r3, [r7, #12]
 8003ab0:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003ab2:	68fb      	ldr	r3, [r7, #12]
 8003ab4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ab6:	3b01      	subs	r3, #1
 8003ab8:	b29a      	uxth	r2, r3
 8003aba:	68fb      	ldr	r3, [r7, #12]
 8003abc:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ac2:	b29b      	uxth	r3, r3
 8003ac4:	3b01      	subs	r3, #1
 8003ac6:	b29a      	uxth	r2, r3
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003acc:	68fb      	ldr	r3, [r7, #12]
 8003ace:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003ad0:	2b00      	cmp	r3, #0
 8003ad2:	d1aa      	bne.n	8003a2a <HAL_I2C_Mem_Write+0xde>
      }
    }

    /* Wait until BTF flag is set */
    if (I2C_WaitOnBTFFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ad4:	697a      	ldr	r2, [r7, #20]
 8003ad6:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8003ad8:	68f8      	ldr	r0, [r7, #12]
 8003ada:	f000 fe93 	bl	8004804 <I2C_WaitOnBTFFlagUntilTimeout>
 8003ade:	4603      	mov	r3, r0
 8003ae0:	2b00      	cmp	r3, #0
 8003ae2:	d00d      	beq.n	8003b00 <HAL_I2C_Mem_Write+0x1b4>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8003ae4:	68fb      	ldr	r3, [r7, #12]
 8003ae6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8003ae8:	2b04      	cmp	r3, #4
 8003aea:	d107      	bne.n	8003afc <HAL_I2C_Mem_Write+0x1b0>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003aec:	68fb      	ldr	r3, [r7, #12]
 8003aee:	681b      	ldr	r3, [r3, #0]
 8003af0:	681a      	ldr	r2, [r3, #0]
 8003af2:	68fb      	ldr	r3, [r7, #12]
 8003af4:	681b      	ldr	r3, [r3, #0]
 8003af6:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003afa:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8003afc:	2301      	movs	r3, #1
 8003afe:	e016      	b.n	8003b2e <HAL_I2C_Mem_Write+0x1e2>
    }

    /* Generate Stop */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003b00:	68fb      	ldr	r3, [r7, #12]
 8003b02:	681b      	ldr	r3, [r3, #0]
 8003b04:	681a      	ldr	r2, [r3, #0]
 8003b06:	68fb      	ldr	r3, [r7, #12]
 8003b08:	681b      	ldr	r3, [r3, #0]
 8003b0a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003b0e:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 8003b10:	68fb      	ldr	r3, [r7, #12]
 8003b12:	2220      	movs	r2, #32
 8003b14:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003b18:	68fb      	ldr	r3, [r7, #12]
 8003b1a:	2200      	movs	r2, #0
 8003b1c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003b20:	68fb      	ldr	r3, [r7, #12]
 8003b22:	2200      	movs	r2, #0
 8003b24:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003b28:	2300      	movs	r3, #0
 8003b2a:	e000      	b.n	8003b2e <HAL_I2C_Mem_Write+0x1e2>
  }
  else
  {
    return HAL_BUSY;
 8003b2c:	2302      	movs	r3, #2
  }
}
 8003b2e:	4618      	mov	r0, r3
 8003b30:	3718      	adds	r7, #24
 8003b32:	46bd      	mov	sp, r7
 8003b34:	bd80      	pop	{r7, pc}
 8003b36:	bf00      	nop
 8003b38:	00100002 	.word	0x00100002
 8003b3c:	ffff0000 	.word	0xffff0000

08003b40 <HAL_I2C_Mem_Read>:
  * @param  Size Amount of data to be sent
  * @param  Timeout Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Mem_Read(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8003b40:	b580      	push	{r7, lr}
 8003b42:	b08c      	sub	sp, #48	@ 0x30
 8003b44:	af02      	add	r7, sp, #8
 8003b46:	60f8      	str	r0, [r7, #12]
 8003b48:	4608      	mov	r0, r1
 8003b4a:	4611      	mov	r1, r2
 8003b4c:	461a      	mov	r2, r3
 8003b4e:	4603      	mov	r3, r0
 8003b50:	817b      	strh	r3, [r7, #10]
 8003b52:	460b      	mov	r3, r1
 8003b54:	813b      	strh	r3, [r7, #8]
 8003b56:	4613      	mov	r3, r2
 8003b58:	80fb      	strh	r3, [r7, #6]
  /* Init tickstart for timeout management*/
  uint32_t tickstart = HAL_GetTick();
 8003b5a:	f7fe ff2b 	bl	80029b4 <HAL_GetTick>
 8003b5e:	6278      	str	r0, [r7, #36]	@ 0x24

  /* Check the parameters */
  assert_param(IS_I2C_MEMADD_SIZE(MemAddSize));

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003b60:	68fb      	ldr	r3, [r7, #12]
 8003b62:	f893 303d 	ldrb.w	r3, [r3, #61]	@ 0x3d
 8003b66:	b2db      	uxtb	r3, r3
 8003b68:	2b20      	cmp	r3, #32
 8003b6a:	f040 8214 	bne.w	8003f96 <HAL_I2C_Mem_Read+0x456>
  {
    /* Wait until BUSY flag is reset */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BUSY, SET, I2C_TIMEOUT_BUSY_FLAG, tickstart) != HAL_OK)
 8003b6e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003b70:	9300      	str	r3, [sp, #0]
 8003b72:	2319      	movs	r3, #25
 8003b74:	2201      	movs	r2, #1
 8003b76:	497b      	ldr	r1, [pc, #492]	@ (8003d64 <HAL_I2C_Mem_Read+0x224>)
 8003b78:	68f8      	ldr	r0, [r7, #12]
 8003b7a:	f000 fce1 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003b7e:	4603      	mov	r3, r0
 8003b80:	2b00      	cmp	r3, #0
 8003b82:	d001      	beq.n	8003b88 <HAL_I2C_Mem_Read+0x48>
    {
      return HAL_BUSY;
 8003b84:	2302      	movs	r3, #2
 8003b86:	e207      	b.n	8003f98 <HAL_I2C_Mem_Read+0x458>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8003b88:	68fb      	ldr	r3, [r7, #12]
 8003b8a:	f893 303c 	ldrb.w	r3, [r3, #60]	@ 0x3c
 8003b8e:	2b01      	cmp	r3, #1
 8003b90:	d101      	bne.n	8003b96 <HAL_I2C_Mem_Read+0x56>
 8003b92:	2302      	movs	r3, #2
 8003b94:	e200      	b.n	8003f98 <HAL_I2C_Mem_Read+0x458>
 8003b96:	68fb      	ldr	r3, [r7, #12]
 8003b98:	2201      	movs	r2, #1
 8003b9a:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8003b9e:	68fb      	ldr	r3, [r7, #12]
 8003ba0:	681b      	ldr	r3, [r3, #0]
 8003ba2:	681b      	ldr	r3, [r3, #0]
 8003ba4:	f003 0301 	and.w	r3, r3, #1
 8003ba8:	2b01      	cmp	r3, #1
 8003baa:	d007      	beq.n	8003bbc <HAL_I2C_Mem_Read+0x7c>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8003bac:	68fb      	ldr	r3, [r7, #12]
 8003bae:	681b      	ldr	r3, [r3, #0]
 8003bb0:	681a      	ldr	r2, [r3, #0]
 8003bb2:	68fb      	ldr	r3, [r7, #12]
 8003bb4:	681b      	ldr	r3, [r3, #0]
 8003bb6:	f042 0201 	orr.w	r2, r2, #1
 8003bba:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	681a      	ldr	r2, [r3, #0]
 8003bc2:	68fb      	ldr	r3, [r7, #12]
 8003bc4:	681b      	ldr	r3, [r3, #0]
 8003bc6:	f422 6200 	bic.w	r2, r2, #2048	@ 0x800
 8003bca:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8003bcc:	68fb      	ldr	r3, [r7, #12]
 8003bce:	2222      	movs	r2, #34	@ 0x22
 8003bd0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MEM;
 8003bd4:	68fb      	ldr	r3, [r7, #12]
 8003bd6:	2240      	movs	r2, #64	@ 0x40
 8003bd8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003bdc:	68fb      	ldr	r3, [r7, #12]
 8003bde:	2200      	movs	r2, #0
 8003be0:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003be2:	68fb      	ldr	r3, [r7, #12]
 8003be4:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 8003be6:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 8003be8:	68fb      	ldr	r3, [r7, #12]
 8003bea:	8eba      	ldrh	r2, [r7, #52]	@ 0x34
 8003bec:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8003bee:	68fb      	ldr	r3, [r7, #12]
 8003bf0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003bf2:	b29a      	uxth	r2, r3
 8003bf4:	68fb      	ldr	r3, [r7, #12]
 8003bf6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003bf8:	68fb      	ldr	r3, [r7, #12]
 8003bfa:	4a5b      	ldr	r2, [pc, #364]	@ (8003d68 <HAL_I2C_Mem_Read+0x228>)
 8003bfc:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Send Slave Address and Memory Address */
    if (I2C_RequestMemoryRead(hi2c, DevAddress, MemAddress, MemAddSize, Timeout, tickstart) != HAL_OK)
 8003bfe:	88f8      	ldrh	r0, [r7, #6]
 8003c00:	893a      	ldrh	r2, [r7, #8]
 8003c02:	8979      	ldrh	r1, [r7, #10]
 8003c04:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003c06:	9301      	str	r3, [sp, #4]
 8003c08:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003c0a:	9300      	str	r3, [sp, #0]
 8003c0c:	4603      	mov	r3, r0
 8003c0e:	68f8      	ldr	r0, [r7, #12]
 8003c10:	f000 fbae 	bl	8004370 <I2C_RequestMemoryRead>
 8003c14:	4603      	mov	r3, r0
 8003c16:	2b00      	cmp	r3, #0
 8003c18:	d001      	beq.n	8003c1e <HAL_I2C_Mem_Read+0xde>
    {
      return HAL_ERROR;
 8003c1a:	2301      	movs	r3, #1
 8003c1c:	e1bc      	b.n	8003f98 <HAL_I2C_Mem_Read+0x458>
    }

    if (hi2c->XferSize == 0U)
 8003c1e:	68fb      	ldr	r3, [r7, #12]
 8003c20:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c22:	2b00      	cmp	r3, #0
 8003c24:	d113      	bne.n	8003c4e <HAL_I2C_Mem_Read+0x10e>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c26:	2300      	movs	r3, #0
 8003c28:	623b      	str	r3, [r7, #32]
 8003c2a:	68fb      	ldr	r3, [r7, #12]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	695b      	ldr	r3, [r3, #20]
 8003c30:	623b      	str	r3, [r7, #32]
 8003c32:	68fb      	ldr	r3, [r7, #12]
 8003c34:	681b      	ldr	r3, [r3, #0]
 8003c36:	699b      	ldr	r3, [r3, #24]
 8003c38:	623b      	str	r3, [r7, #32]
 8003c3a:	6a3b      	ldr	r3, [r7, #32]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c3c:	68fb      	ldr	r3, [r7, #12]
 8003c3e:	681b      	ldr	r3, [r3, #0]
 8003c40:	681a      	ldr	r2, [r3, #0]
 8003c42:	68fb      	ldr	r3, [r7, #12]
 8003c44:	681b      	ldr	r3, [r3, #0]
 8003c46:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c4a:	601a      	str	r2, [r3, #0]
 8003c4c:	e190      	b.n	8003f70 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 1U)
 8003c4e:	68fb      	ldr	r3, [r7, #12]
 8003c50:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c52:	2b01      	cmp	r3, #1
 8003c54:	d11b      	bne.n	8003c8e <HAL_I2C_Mem_Read+0x14e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c56:	68fb      	ldr	r3, [r7, #12]
 8003c58:	681b      	ldr	r3, [r3, #0]
 8003c5a:	681a      	ldr	r2, [r3, #0]
 8003c5c:	68fb      	ldr	r3, [r7, #12]
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003c64:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003c66:	2300      	movs	r3, #0
 8003c68:	61fb      	str	r3, [r7, #28]
 8003c6a:	68fb      	ldr	r3, [r7, #12]
 8003c6c:	681b      	ldr	r3, [r3, #0]
 8003c6e:	695b      	ldr	r3, [r3, #20]
 8003c70:	61fb      	str	r3, [r7, #28]
 8003c72:	68fb      	ldr	r3, [r7, #12]
 8003c74:	681b      	ldr	r3, [r3, #0]
 8003c76:	699b      	ldr	r3, [r3, #24]
 8003c78:	61fb      	str	r3, [r7, #28]
 8003c7a:	69fb      	ldr	r3, [r7, #28]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c7c:	68fb      	ldr	r3, [r7, #12]
 8003c7e:	681b      	ldr	r3, [r3, #0]
 8003c80:	681a      	ldr	r2, [r3, #0]
 8003c82:	68fb      	ldr	r3, [r7, #12]
 8003c84:	681b      	ldr	r3, [r3, #0]
 8003c86:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003c8a:	601a      	str	r2, [r3, #0]
 8003c8c:	e170      	b.n	8003f70 <HAL_I2C_Mem_Read+0x430>
    }
    else if (hi2c->XferSize == 2U)
 8003c8e:	68fb      	ldr	r3, [r7, #12]
 8003c90:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003c92:	2b02      	cmp	r3, #2
 8003c94:	d11b      	bne.n	8003cce <HAL_I2C_Mem_Read+0x18e>
    {
      /* Disable Acknowledge */
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003c96:	68fb      	ldr	r3, [r7, #12]
 8003c98:	681b      	ldr	r3, [r3, #0]
 8003c9a:	681a      	ldr	r2, [r3, #0]
 8003c9c:	68fb      	ldr	r3, [r7, #12]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003ca4:	601a      	str	r2, [r3, #0]

      /* Enable Pos */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8003ca6:	68fb      	ldr	r3, [r7, #12]
 8003ca8:	681b      	ldr	r3, [r3, #0]
 8003caa:	681a      	ldr	r2, [r3, #0]
 8003cac:	68fb      	ldr	r3, [r7, #12]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	f442 6200 	orr.w	r2, r2, #2048	@ 0x800
 8003cb4:	601a      	str	r2, [r3, #0]

      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cb6:	2300      	movs	r3, #0
 8003cb8:	61bb      	str	r3, [r7, #24]
 8003cba:	68fb      	ldr	r3, [r7, #12]
 8003cbc:	681b      	ldr	r3, [r3, #0]
 8003cbe:	695b      	ldr	r3, [r3, #20]
 8003cc0:	61bb      	str	r3, [r7, #24]
 8003cc2:	68fb      	ldr	r3, [r7, #12]
 8003cc4:	681b      	ldr	r3, [r3, #0]
 8003cc6:	699b      	ldr	r3, [r3, #24]
 8003cc8:	61bb      	str	r3, [r7, #24]
 8003cca:	69bb      	ldr	r3, [r7, #24]
 8003ccc:	e150      	b.n	8003f70 <HAL_I2C_Mem_Read+0x430>
    }
    else
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8003cce:	2300      	movs	r3, #0
 8003cd0:	617b      	str	r3, [r7, #20]
 8003cd2:	68fb      	ldr	r3, [r7, #12]
 8003cd4:	681b      	ldr	r3, [r3, #0]
 8003cd6:	695b      	ldr	r3, [r3, #20]
 8003cd8:	617b      	str	r3, [r7, #20]
 8003cda:	68fb      	ldr	r3, [r7, #12]
 8003cdc:	681b      	ldr	r3, [r3, #0]
 8003cde:	699b      	ldr	r3, [r3, #24]
 8003ce0:	617b      	str	r3, [r7, #20]
 8003ce2:	697b      	ldr	r3, [r7, #20]
    }

    while (hi2c->XferSize > 0U)
 8003ce4:	e144      	b.n	8003f70 <HAL_I2C_Mem_Read+0x430>
    {
      if (hi2c->XferSize <= 3U)
 8003ce6:	68fb      	ldr	r3, [r7, #12]
 8003ce8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cea:	2b03      	cmp	r3, #3
 8003cec:	f200 80f1 	bhi.w	8003ed2 <HAL_I2C_Mem_Read+0x392>
      {
        /* One byte */
        if (hi2c->XferSize == 1U)
 8003cf0:	68fb      	ldr	r3, [r7, #12]
 8003cf2:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003cf4:	2b01      	cmp	r3, #1
 8003cf6:	d123      	bne.n	8003d40 <HAL_I2C_Mem_Read+0x200>
        {
          /* Wait until RXNE flag is set */
          if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003cf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003cfa:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003cfc:	68f8      	ldr	r0, [r7, #12]
 8003cfe:	f000 fdc9 	bl	8004894 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003d02:	4603      	mov	r3, r0
 8003d04:	2b00      	cmp	r3, #0
 8003d06:	d001      	beq.n	8003d0c <HAL_I2C_Mem_Read+0x1cc>
          {
            return HAL_ERROR;
 8003d08:	2301      	movs	r3, #1
 8003d0a:	e145      	b.n	8003f98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d0c:	68fb      	ldr	r3, [r7, #12]
 8003d0e:	681b      	ldr	r3, [r3, #0]
 8003d10:	691a      	ldr	r2, [r3, #16]
 8003d12:	68fb      	ldr	r3, [r7, #12]
 8003d14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d16:	b2d2      	uxtb	r2, r2
 8003d18:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d1a:	68fb      	ldr	r3, [r7, #12]
 8003d1c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d1e:	1c5a      	adds	r2, r3, #1
 8003d20:	68fb      	ldr	r3, [r7, #12]
 8003d22:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d24:	68fb      	ldr	r3, [r7, #12]
 8003d26:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d28:	3b01      	subs	r3, #1
 8003d2a:	b29a      	uxth	r2, r3
 8003d2c:	68fb      	ldr	r3, [r7, #12]
 8003d2e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003d30:	68fb      	ldr	r3, [r7, #12]
 8003d32:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003d34:	b29b      	uxth	r3, r3
 8003d36:	3b01      	subs	r3, #1
 8003d38:	b29a      	uxth	r2, r3
 8003d3a:	68fb      	ldr	r3, [r7, #12]
 8003d3c:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003d3e:	e117      	b.n	8003f70 <HAL_I2C_Mem_Read+0x430>
        }
        /* Two bytes */
        else if (hi2c->XferSize == 2U)
 8003d40:	68fb      	ldr	r3, [r7, #12]
 8003d42:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d44:	2b02      	cmp	r3, #2
 8003d46:	d14e      	bne.n	8003de6 <HAL_I2C_Mem_Read+0x2a6>
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003d48:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003d4a:	9300      	str	r3, [sp, #0]
 8003d4c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003d4e:	2200      	movs	r2, #0
 8003d50:	4906      	ldr	r1, [pc, #24]	@ (8003d6c <HAL_I2C_Mem_Read+0x22c>)
 8003d52:	68f8      	ldr	r0, [r7, #12]
 8003d54:	f000 fbf4 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003d58:	4603      	mov	r3, r0
 8003d5a:	2b00      	cmp	r3, #0
 8003d5c:	d008      	beq.n	8003d70 <HAL_I2C_Mem_Read+0x230>
          {
            return HAL_ERROR;
 8003d5e:	2301      	movs	r3, #1
 8003d60:	e11a      	b.n	8003f98 <HAL_I2C_Mem_Read+0x458>
 8003d62:	bf00      	nop
 8003d64:	00100002 	.word	0x00100002
 8003d68:	ffff0000 	.word	0xffff0000
 8003d6c:	00010004 	.word	0x00010004
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d70:	68fb      	ldr	r3, [r7, #12]
 8003d72:	681b      	ldr	r3, [r3, #0]
 8003d74:	681a      	ldr	r2, [r3, #0]
 8003d76:	68fb      	ldr	r3, [r7, #12]
 8003d78:	681b      	ldr	r3, [r3, #0]
 8003d7a:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003d7e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d80:	68fb      	ldr	r3, [r7, #12]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	68fb      	ldr	r3, [r7, #12]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003d8e:	68fb      	ldr	r3, [r7, #12]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	68fb      	ldr	r3, [r7, #12]
 8003d96:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003d98:	68fb      	ldr	r3, [r7, #12]
 8003d9a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003d9c:	3b01      	subs	r3, #1
 8003d9e:	b29a      	uxth	r2, r3
 8003da0:	68fb      	ldr	r3, [r7, #12]
 8003da2:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003da4:	68fb      	ldr	r3, [r7, #12]
 8003da6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003da8:	b29b      	uxth	r3, r3
 8003daa:	3b01      	subs	r3, #1
 8003dac:	b29a      	uxth	r2, r3
 8003dae:	68fb      	ldr	r3, [r7, #12]
 8003db0:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003db2:	68fb      	ldr	r3, [r7, #12]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	691a      	ldr	r2, [r3, #16]
 8003db8:	68fb      	ldr	r3, [r7, #12]
 8003dba:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003dc0:	68fb      	ldr	r3, [r7, #12]
 8003dc2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003dc4:	1c5a      	adds	r2, r3, #1
 8003dc6:	68fb      	ldr	r3, [r7, #12]
 8003dc8:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003dca:	68fb      	ldr	r3, [r7, #12]
 8003dcc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003dce:	3b01      	subs	r3, #1
 8003dd0:	b29a      	uxth	r2, r3
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003dd6:	68fb      	ldr	r3, [r7, #12]
 8003dd8:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003dda:	b29b      	uxth	r3, r3
 8003ddc:	3b01      	subs	r3, #1
 8003dde:	b29a      	uxth	r2, r3
 8003de0:	68fb      	ldr	r3, [r7, #12]
 8003de2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003de4:	e0c4      	b.n	8003f70 <HAL_I2C_Mem_Read+0x430>
        }
        /* 3 Last bytes */
        else
        {
          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003de6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003de8:	9300      	str	r3, [sp, #0]
 8003dea:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003dec:	2200      	movs	r2, #0
 8003dee:	496c      	ldr	r1, [pc, #432]	@ (8003fa0 <HAL_I2C_Mem_Read+0x460>)
 8003df0:	68f8      	ldr	r0, [r7, #12]
 8003df2:	f000 fba5 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003df6:	4603      	mov	r3, r0
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d001      	beq.n	8003e00 <HAL_I2C_Mem_Read+0x2c0>
          {
            return HAL_ERROR;
 8003dfc:	2301      	movs	r3, #1
 8003dfe:	e0cb      	b.n	8003f98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003e00:	68fb      	ldr	r3, [r7, #12]
 8003e02:	681b      	ldr	r3, [r3, #0]
 8003e04:	681a      	ldr	r2, [r3, #0]
 8003e06:	68fb      	ldr	r3, [r7, #12]
 8003e08:	681b      	ldr	r3, [r3, #0]
 8003e0a:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003e0e:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e10:	68fb      	ldr	r3, [r7, #12]
 8003e12:	681b      	ldr	r3, [r3, #0]
 8003e14:	691a      	ldr	r2, [r3, #16]
 8003e16:	68fb      	ldr	r3, [r7, #12]
 8003e18:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e1a:	b2d2      	uxtb	r2, r2
 8003e1c:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e1e:	68fb      	ldr	r3, [r7, #12]
 8003e20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e22:	1c5a      	adds	r2, r3, #1
 8003e24:	68fb      	ldr	r3, [r7, #12]
 8003e26:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e28:	68fb      	ldr	r3, [r7, #12]
 8003e2a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e2c:	3b01      	subs	r3, #1
 8003e2e:	b29a      	uxth	r2, r3
 8003e30:	68fb      	ldr	r3, [r7, #12]
 8003e32:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e34:	68fb      	ldr	r3, [r7, #12]
 8003e36:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e38:	b29b      	uxth	r3, r3
 8003e3a:	3b01      	subs	r3, #1
 8003e3c:	b29a      	uxth	r2, r3
 8003e3e:	68fb      	ldr	r3, [r7, #12]
 8003e40:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Wait until BTF flag is set */
          if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_BTF, RESET, Timeout, tickstart) != HAL_OK)
 8003e42:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8003e44:	9300      	str	r3, [sp, #0]
 8003e46:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8003e48:	2200      	movs	r2, #0
 8003e4a:	4955      	ldr	r1, [pc, #340]	@ (8003fa0 <HAL_I2C_Mem_Read+0x460>)
 8003e4c:	68f8      	ldr	r0, [r7, #12]
 8003e4e:	f000 fb77 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8003e52:	4603      	mov	r3, r0
 8003e54:	2b00      	cmp	r3, #0
 8003e56:	d001      	beq.n	8003e5c <HAL_I2C_Mem_Read+0x31c>
          {
            return HAL_ERROR;
 8003e58:	2301      	movs	r3, #1
 8003e5a:	e09d      	b.n	8003f98 <HAL_I2C_Mem_Read+0x458>
          }

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003e5c:	68fb      	ldr	r3, [r7, #12]
 8003e5e:	681b      	ldr	r3, [r3, #0]
 8003e60:	681a      	ldr	r2, [r3, #0]
 8003e62:	68fb      	ldr	r3, [r7, #12]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8003e6a:	601a      	str	r2, [r3, #0]

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e6c:	68fb      	ldr	r3, [r7, #12]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	691a      	ldr	r2, [r3, #16]
 8003e72:	68fb      	ldr	r3, [r7, #12]
 8003e74:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e76:	b2d2      	uxtb	r2, r2
 8003e78:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003e7a:	68fb      	ldr	r3, [r7, #12]
 8003e7c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003e7e:	1c5a      	adds	r2, r3, #1
 8003e80:	68fb      	ldr	r3, [r7, #12]
 8003e82:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003e84:	68fb      	ldr	r3, [r7, #12]
 8003e86:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003e88:	3b01      	subs	r3, #1
 8003e8a:	b29a      	uxth	r2, r3
 8003e8c:	68fb      	ldr	r3, [r7, #12]
 8003e8e:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003e90:	68fb      	ldr	r3, [r7, #12]
 8003e92:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003e94:	b29b      	uxth	r3, r3
 8003e96:	3b01      	subs	r3, #1
 8003e98:	b29a      	uxth	r2, r3
 8003e9a:	68fb      	ldr	r3, [r7, #12]
 8003e9c:	855a      	strh	r2, [r3, #42]	@ 0x2a

          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e9e:	68fb      	ldr	r3, [r7, #12]
 8003ea0:	681b      	ldr	r3, [r3, #0]
 8003ea2:	691a      	ldr	r2, [r3, #16]
 8003ea4:	68fb      	ldr	r3, [r7, #12]
 8003ea6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ea8:	b2d2      	uxtb	r2, r2
 8003eaa:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003eac:	68fb      	ldr	r3, [r7, #12]
 8003eae:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003eb0:	1c5a      	adds	r2, r3, #1
 8003eb2:	68fb      	ldr	r3, [r7, #12]
 8003eb4:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003eb6:	68fb      	ldr	r3, [r7, #12]
 8003eb8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003eba:	3b01      	subs	r3, #1
 8003ebc:	b29a      	uxth	r2, r3
 8003ebe:	68fb      	ldr	r3, [r7, #12]
 8003ec0:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003ec2:	68fb      	ldr	r3, [r7, #12]
 8003ec4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003ec6:	b29b      	uxth	r3, r3
 8003ec8:	3b01      	subs	r3, #1
 8003eca:	b29a      	uxth	r2, r3
 8003ecc:	68fb      	ldr	r3, [r7, #12]
 8003ece:	855a      	strh	r2, [r3, #42]	@ 0x2a
 8003ed0:	e04e      	b.n	8003f70 <HAL_I2C_Mem_Read+0x430>
        }
      }
      else
      {
        /* Wait until RXNE flag is set */
        if (I2C_WaitOnRXNEFlagUntilTimeout(hi2c, Timeout, tickstart) != HAL_OK)
 8003ed2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8003ed4:	6bb9      	ldr	r1, [r7, #56]	@ 0x38
 8003ed6:	68f8      	ldr	r0, [r7, #12]
 8003ed8:	f000 fcdc 	bl	8004894 <I2C_WaitOnRXNEFlagUntilTimeout>
 8003edc:	4603      	mov	r3, r0
 8003ede:	2b00      	cmp	r3, #0
 8003ee0:	d001      	beq.n	8003ee6 <HAL_I2C_Mem_Read+0x3a6>
        {
          return HAL_ERROR;
 8003ee2:	2301      	movs	r3, #1
 8003ee4:	e058      	b.n	8003f98 <HAL_I2C_Mem_Read+0x458>
        }

        /* Read data from DR */
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	68fb      	ldr	r3, [r7, #12]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	701a      	strb	r2, [r3, #0]

        /* Increment Buffer pointer */
        hi2c->pBuffPtr++;
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	625a      	str	r2, [r3, #36]	@ 0x24

        /* Update counter */
        hi2c->XferSize--;
 8003efe:	68fb      	ldr	r3, [r7, #12]
 8003f00:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f02:	3b01      	subs	r3, #1
 8003f04:	b29a      	uxth	r2, r3
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	851a      	strh	r2, [r3, #40]	@ 0x28
        hi2c->XferCount--;
 8003f0a:	68fb      	ldr	r3, [r7, #12]
 8003f0c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f0e:	b29b      	uxth	r3, r3
 8003f10:	3b01      	subs	r3, #1
 8003f12:	b29a      	uxth	r2, r3
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	855a      	strh	r2, [r3, #42]	@ 0x2a

        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8003f18:	68fb      	ldr	r3, [r7, #12]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	695b      	ldr	r3, [r3, #20]
 8003f1e:	f003 0304 	and.w	r3, r3, #4
 8003f22:	2b04      	cmp	r3, #4
 8003f24:	d124      	bne.n	8003f70 <HAL_I2C_Mem_Read+0x430>
        {
          if (hi2c->XferSize == 3U)
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f2a:	2b03      	cmp	r3, #3
 8003f2c:	d107      	bne.n	8003f3e <HAL_I2C_Mem_Read+0x3fe>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	681b      	ldr	r3, [r3, #0]
 8003f32:	681a      	ldr	r2, [r3, #0]
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	f422 6280 	bic.w	r2, r2, #1024	@ 0x400
 8003f3c:	601a      	str	r2, [r3, #0]
          }
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	691a      	ldr	r2, [r3, #16]
 8003f44:	68fb      	ldr	r3, [r7, #12]
 8003f46:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f48:	b2d2      	uxtb	r2, r2
 8003f4a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8003f4c:	68fb      	ldr	r3, [r7, #12]
 8003f4e:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8003f50:	1c5a      	adds	r2, r3, #1
 8003f52:	68fb      	ldr	r3, [r7, #12]
 8003f54:	625a      	str	r2, [r3, #36]	@ 0x24

          /* Update counter */
          hi2c->XferSize--;
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f5a:	3b01      	subs	r3, #1
 8003f5c:	b29a      	uxth	r2, r3
 8003f5e:	68fb      	ldr	r3, [r7, #12]
 8003f60:	851a      	strh	r2, [r3, #40]	@ 0x28
          hi2c->XferCount--;
 8003f62:	68fb      	ldr	r3, [r7, #12]
 8003f64:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 8003f66:	b29b      	uxth	r3, r3
 8003f68:	3b01      	subs	r3, #1
 8003f6a:	b29a      	uxth	r2, r3
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	855a      	strh	r2, [r3, #42]	@ 0x2a
    while (hi2c->XferSize > 0U)
 8003f70:	68fb      	ldr	r3, [r7, #12]
 8003f72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 8003f74:	2b00      	cmp	r3, #0
 8003f76:	f47f aeb6 	bne.w	8003ce6 <HAL_I2C_Mem_Read+0x1a6>
        }
      }
    }

    hi2c->State = HAL_I2C_STATE_READY;
 8003f7a:	68fb      	ldr	r3, [r7, #12]
 8003f7c:	2220      	movs	r2, #32
 8003f7e:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode = HAL_I2C_MODE_NONE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	2200      	movs	r2, #0
 8003f86:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003f8a:	68fb      	ldr	r3, [r7, #12]
 8003f8c:	2200      	movs	r2, #0
 8003f8e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_OK;
 8003f92:	2300      	movs	r3, #0
 8003f94:	e000      	b.n	8003f98 <HAL_I2C_Mem_Read+0x458>
  }
  else
  {
    return HAL_BUSY;
 8003f96:	2302      	movs	r3, #2
  }
}
 8003f98:	4618      	mov	r0, r3
 8003f9a:	3728      	adds	r7, #40	@ 0x28
 8003f9c:	46bd      	mov	sp, r7
 8003f9e:	bd80      	pop	{r7, pc}
 8003fa0:	00010004 	.word	0x00010004

08003fa4 <I2C_MasterRequestWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 8003fa4:	b580      	push	{r7, lr}
 8003fa6:	b088      	sub	sp, #32
 8003fa8:	af02      	add	r7, sp, #8
 8003faa:	60f8      	str	r0, [r7, #12]
 8003fac:	607a      	str	r2, [r7, #4]
 8003fae:	603b      	str	r3, [r7, #0]
 8003fb0:	460b      	mov	r3, r1
 8003fb2:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003fb4:	68fb      	ldr	r3, [r7, #12]
 8003fb6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8003fb8:	617b      	str	r3, [r7, #20]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 8003fba:	697b      	ldr	r3, [r7, #20]
 8003fbc:	2b08      	cmp	r3, #8
 8003fbe:	d006      	beq.n	8003fce <I2C_MasterRequestWrite+0x2a>
 8003fc0:	697b      	ldr	r3, [r7, #20]
 8003fc2:	2b01      	cmp	r3, #1
 8003fc4:	d003      	beq.n	8003fce <I2C_MasterRequestWrite+0x2a>
 8003fc6:	697b      	ldr	r3, [r7, #20]
 8003fc8:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 8003fcc:	d108      	bne.n	8003fe0 <I2C_MasterRequestWrite+0x3c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fce:	68fb      	ldr	r3, [r7, #12]
 8003fd0:	681b      	ldr	r3, [r3, #0]
 8003fd2:	681a      	ldr	r2, [r3, #0]
 8003fd4:	68fb      	ldr	r3, [r7, #12]
 8003fd6:	681b      	ldr	r3, [r3, #0]
 8003fd8:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003fdc:	601a      	str	r2, [r3, #0]
 8003fde:	e00b      	b.n	8003ff8 <I2C_MasterRequestWrite+0x54>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_RX)
 8003fe0:	68fb      	ldr	r3, [r7, #12]
 8003fe2:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8003fe4:	2b12      	cmp	r3, #18
 8003fe6:	d107      	bne.n	8003ff8 <I2C_MasterRequestWrite+0x54>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003fe8:	68fb      	ldr	r3, [r7, #12]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	681a      	ldr	r2, [r3, #0]
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 8003ff6:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 8003ff8:	683b      	ldr	r3, [r7, #0]
 8003ffa:	9300      	str	r3, [sp, #0]
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	2200      	movs	r2, #0
 8004000:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004004:	68f8      	ldr	r0, [r7, #12]
 8004006:	f000 fa9b 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 800400a:	4603      	mov	r3, r0
 800400c:	2b00      	cmp	r3, #0
 800400e:	d00d      	beq.n	800402c <I2C_MasterRequestWrite+0x88>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004010:	68fb      	ldr	r3, [r7, #12]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	681b      	ldr	r3, [r3, #0]
 8004016:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800401a:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800401e:	d103      	bne.n	8004028 <I2C_MasterRequestWrite+0x84>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004020:	68fb      	ldr	r3, [r7, #12]
 8004022:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004026:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004028:	2303      	movs	r3, #3
 800402a:	e035      	b.n	8004098 <I2C_MasterRequestWrite+0xf4>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800402c:	68fb      	ldr	r3, [r7, #12]
 800402e:	691b      	ldr	r3, [r3, #16]
 8004030:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004034:	d108      	bne.n	8004048 <I2C_MasterRequestWrite+0xa4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 8004036:	897b      	ldrh	r3, [r7, #10]
 8004038:	b2db      	uxtb	r3, r3
 800403a:	461a      	mov	r2, r3
 800403c:	68fb      	ldr	r3, [r7, #12]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 8004044:	611a      	str	r2, [r3, #16]
 8004046:	e01b      	b.n	8004080 <I2C_MasterRequestWrite+0xdc>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 8004048:	897b      	ldrh	r3, [r7, #10]
 800404a:	11db      	asrs	r3, r3, #7
 800404c:	b2db      	uxtb	r3, r3
 800404e:	f003 0306 	and.w	r3, r3, #6
 8004052:	b2db      	uxtb	r3, r3
 8004054:	f063 030f 	orn	r3, r3, #15
 8004058:	b2da      	uxtb	r2, r3
 800405a:	68fb      	ldr	r3, [r7, #12]
 800405c:	681b      	ldr	r3, [r3, #0]
 800405e:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004060:	683b      	ldr	r3, [r7, #0]
 8004062:	687a      	ldr	r2, [r7, #4]
 8004064:	490e      	ldr	r1, [pc, #56]	@ (80040a0 <I2C_MasterRequestWrite+0xfc>)
 8004066:	68f8      	ldr	r0, [r7, #12]
 8004068:	f000 fae4 	bl	8004634 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800406c:	4603      	mov	r3, r0
 800406e:	2b00      	cmp	r3, #0
 8004070:	d001      	beq.n	8004076 <I2C_MasterRequestWrite+0xd2>
    {
      return HAL_ERROR;
 8004072:	2301      	movs	r3, #1
 8004074:	e010      	b.n	8004098 <I2C_MasterRequestWrite+0xf4>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 8004076:	897b      	ldrh	r3, [r7, #10]
 8004078:	b2da      	uxtb	r2, r3
 800407a:	68fb      	ldr	r3, [r7, #12]
 800407c:	681b      	ldr	r3, [r3, #0]
 800407e:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004080:	683b      	ldr	r3, [r7, #0]
 8004082:	687a      	ldr	r2, [r7, #4]
 8004084:	4907      	ldr	r1, [pc, #28]	@ (80040a4 <I2C_MasterRequestWrite+0x100>)
 8004086:	68f8      	ldr	r0, [r7, #12]
 8004088:	f000 fad4 	bl	8004634 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 800408c:	4603      	mov	r3, r0
 800408e:	2b00      	cmp	r3, #0
 8004090:	d001      	beq.n	8004096 <I2C_MasterRequestWrite+0xf2>
  {
    return HAL_ERROR;
 8004092:	2301      	movs	r3, #1
 8004094:	e000      	b.n	8004098 <I2C_MasterRequestWrite+0xf4>
  }

  return HAL_OK;
 8004096:	2300      	movs	r3, #0
}
 8004098:	4618      	mov	r0, r3
 800409a:	3718      	adds	r7, #24
 800409c:	46bd      	mov	sp, r7
 800409e:	bd80      	pop	{r7, pc}
 80040a0:	00010008 	.word	0x00010008
 80040a4:	00010002 	.word	0x00010002

080040a8 <I2C_MasterRequestRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_MasterRequestRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint32_t Timeout, uint32_t Tickstart)
{
 80040a8:	b580      	push	{r7, lr}
 80040aa:	b088      	sub	sp, #32
 80040ac:	af02      	add	r7, sp, #8
 80040ae:	60f8      	str	r0, [r7, #12]
 80040b0:	607a      	str	r2, [r7, #4]
 80040b2:	603b      	str	r3, [r7, #0]
 80040b4:	460b      	mov	r3, r1
 80040b6:	817b      	strh	r3, [r7, #10]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80040b8:	68fb      	ldr	r3, [r7, #12]
 80040ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 80040bc:	617b      	str	r3, [r7, #20]

  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	681a      	ldr	r2, [r3, #0]
 80040c4:	68fb      	ldr	r3, [r7, #12]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 80040cc:	601a      	str	r2, [r3, #0]

  /* Generate Start condition if first transfer */
  if ((CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME)  || (CurrentXferOptions == I2C_NO_OPTION_FRAME))
 80040ce:	697b      	ldr	r3, [r7, #20]
 80040d0:	2b08      	cmp	r3, #8
 80040d2:	d006      	beq.n	80040e2 <I2C_MasterRequestRead+0x3a>
 80040d4:	697b      	ldr	r3, [r7, #20]
 80040d6:	2b01      	cmp	r3, #1
 80040d8:	d003      	beq.n	80040e2 <I2C_MasterRequestRead+0x3a>
 80040da:	697b      	ldr	r3, [r7, #20]
 80040dc:	f513 3f80 	cmn.w	r3, #65536	@ 0x10000
 80040e0:	d108      	bne.n	80040f4 <I2C_MasterRequestRead+0x4c>
  {
    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040e2:	68fb      	ldr	r3, [r7, #12]
 80040e4:	681b      	ldr	r3, [r3, #0]
 80040e6:	681a      	ldr	r2, [r3, #0]
 80040e8:	68fb      	ldr	r3, [r7, #12]
 80040ea:	681b      	ldr	r3, [r3, #0]
 80040ec:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80040f0:	601a      	str	r2, [r3, #0]
 80040f2:	e00b      	b.n	800410c <I2C_MasterRequestRead+0x64>
  }
  else if (hi2c->PreviousState == I2C_STATE_MASTER_BUSY_TX)
 80040f4:	68fb      	ldr	r3, [r7, #12]
 80040f6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80040f8:	2b11      	cmp	r3, #17
 80040fa:	d107      	bne.n	800410c <I2C_MasterRequestRead+0x64>
  {
    /* Generate ReStart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80040fc:	68fb      	ldr	r3, [r7, #12]
 80040fe:	681b      	ldr	r3, [r3, #0]
 8004100:	681a      	ldr	r2, [r3, #0]
 8004102:	68fb      	ldr	r3, [r7, #12]
 8004104:	681b      	ldr	r3, [r3, #0]
 8004106:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800410a:	601a      	str	r2, [r3, #0]
  {
    /* Do nothing */
  }

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800410c:	683b      	ldr	r3, [r7, #0]
 800410e:	9300      	str	r3, [sp, #0]
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	2200      	movs	r2, #0
 8004114:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 8004118:	68f8      	ldr	r0, [r7, #12]
 800411a:	f000 fa11 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 800411e:	4603      	mov	r3, r0
 8004120:	2b00      	cmp	r3, #0
 8004122:	d00d      	beq.n	8004140 <I2C_MasterRequestRead+0x98>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004124:	68fb      	ldr	r3, [r7, #12]
 8004126:	681b      	ldr	r3, [r3, #0]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800412e:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004132:	d103      	bne.n	800413c <I2C_MasterRequestRead+0x94>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004134:	68fb      	ldr	r3, [r7, #12]
 8004136:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800413a:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800413c:	2303      	movs	r3, #3
 800413e:	e079      	b.n	8004234 <I2C_MasterRequestRead+0x18c>
  }

  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	691b      	ldr	r3, [r3, #16]
 8004144:	f5b3 4f80 	cmp.w	r3, #16384	@ 0x4000
 8004148:	d108      	bne.n	800415c <I2C_MasterRequestRead+0xb4>
  {
    /* Send slave address */
    hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800414a:	897b      	ldrh	r3, [r7, #10]
 800414c:	b2db      	uxtb	r3, r3
 800414e:	f043 0301 	orr.w	r3, r3, #1
 8004152:	b2da      	uxtb	r2, r3
 8004154:	68fb      	ldr	r3, [r7, #12]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	611a      	str	r2, [r3, #16]
 800415a:	e05f      	b.n	800421c <I2C_MasterRequestRead+0x174>
  }
  else
  {
    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(DevAddress);
 800415c:	897b      	ldrh	r3, [r7, #10]
 800415e:	11db      	asrs	r3, r3, #7
 8004160:	b2db      	uxtb	r3, r3
 8004162:	f003 0306 	and.w	r3, r3, #6
 8004166:	b2db      	uxtb	r3, r3
 8004168:	f063 030f 	orn	r3, r3, #15
 800416c:	b2da      	uxtb	r2, r3
 800416e:	68fb      	ldr	r3, [r7, #12]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	611a      	str	r2, [r3, #16]

    /* Wait until ADD10 flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADD10, Timeout, Tickstart) != HAL_OK)
 8004174:	683b      	ldr	r3, [r7, #0]
 8004176:	687a      	ldr	r2, [r7, #4]
 8004178:	4930      	ldr	r1, [pc, #192]	@ (800423c <I2C_MasterRequestRead+0x194>)
 800417a:	68f8      	ldr	r0, [r7, #12]
 800417c:	f000 fa5a 	bl	8004634 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004180:	4603      	mov	r3, r0
 8004182:	2b00      	cmp	r3, #0
 8004184:	d001      	beq.n	800418a <I2C_MasterRequestRead+0xe2>
    {
      return HAL_ERROR;
 8004186:	2301      	movs	r3, #1
 8004188:	e054      	b.n	8004234 <I2C_MasterRequestRead+0x18c>
    }

    /* Send slave address */
    hi2c->Instance->DR = I2C_10BIT_ADDRESS(DevAddress);
 800418a:	897b      	ldrh	r3, [r7, #10]
 800418c:	b2da      	uxtb	r2, r3
 800418e:	68fb      	ldr	r3, [r7, #12]
 8004190:	681b      	ldr	r3, [r3, #0]
 8004192:	611a      	str	r2, [r3, #16]

    /* Wait until ADDR flag is set */
    if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 8004194:	683b      	ldr	r3, [r7, #0]
 8004196:	687a      	ldr	r2, [r7, #4]
 8004198:	4929      	ldr	r1, [pc, #164]	@ (8004240 <I2C_MasterRequestRead+0x198>)
 800419a:	68f8      	ldr	r0, [r7, #12]
 800419c:	f000 fa4a 	bl	8004634 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80041a0:	4603      	mov	r3, r0
 80041a2:	2b00      	cmp	r3, #0
 80041a4:	d001      	beq.n	80041aa <I2C_MasterRequestRead+0x102>
    {
      return HAL_ERROR;
 80041a6:	2301      	movs	r3, #1
 80041a8:	e044      	b.n	8004234 <I2C_MasterRequestRead+0x18c>
    }

    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80041aa:	2300      	movs	r3, #0
 80041ac:	613b      	str	r3, [r7, #16]
 80041ae:	68fb      	ldr	r3, [r7, #12]
 80041b0:	681b      	ldr	r3, [r3, #0]
 80041b2:	695b      	ldr	r3, [r3, #20]
 80041b4:	613b      	str	r3, [r7, #16]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	699b      	ldr	r3, [r3, #24]
 80041bc:	613b      	str	r3, [r7, #16]
 80041be:	693b      	ldr	r3, [r7, #16]

    /* Generate Restart */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	681a      	ldr	r2, [r3, #0]
 80041c6:	68fb      	ldr	r3, [r7, #12]
 80041c8:	681b      	ldr	r3, [r3, #0]
 80041ca:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80041ce:	601a      	str	r2, [r3, #0]

    /* Wait until SB flag is set */
    if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80041d0:	683b      	ldr	r3, [r7, #0]
 80041d2:	9300      	str	r3, [sp, #0]
 80041d4:	687b      	ldr	r3, [r7, #4]
 80041d6:	2200      	movs	r2, #0
 80041d8:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80041dc:	68f8      	ldr	r0, [r7, #12]
 80041de:	f000 f9af 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 80041e2:	4603      	mov	r3, r0
 80041e4:	2b00      	cmp	r3, #0
 80041e6:	d00d      	beq.n	8004204 <I2C_MasterRequestRead+0x15c>
    {
      if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80041e8:	68fb      	ldr	r3, [r7, #12]
 80041ea:	681b      	ldr	r3, [r3, #0]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80041f2:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80041f6:	d103      	bne.n	8004200 <I2C_MasterRequestRead+0x158>
      {
        hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80041f8:	68fb      	ldr	r3, [r7, #12]
 80041fa:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80041fe:	641a      	str	r2, [r3, #64]	@ 0x40
      }
      return HAL_TIMEOUT;
 8004200:	2303      	movs	r3, #3
 8004202:	e017      	b.n	8004234 <I2C_MasterRequestRead+0x18c>
    }

    /* Send header of slave address */
    hi2c->Instance->DR = I2C_10BIT_HEADER_READ(DevAddress);
 8004204:	897b      	ldrh	r3, [r7, #10]
 8004206:	11db      	asrs	r3, r3, #7
 8004208:	b2db      	uxtb	r3, r3
 800420a:	f003 0306 	and.w	r3, r3, #6
 800420e:	b2db      	uxtb	r3, r3
 8004210:	f063 030e 	orn	r3, r3, #14
 8004214:	b2da      	uxtb	r2, r3
 8004216:	68fb      	ldr	r3, [r7, #12]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800421c:	683b      	ldr	r3, [r7, #0]
 800421e:	687a      	ldr	r2, [r7, #4]
 8004220:	4907      	ldr	r1, [pc, #28]	@ (8004240 <I2C_MasterRequestRead+0x198>)
 8004222:	68f8      	ldr	r0, [r7, #12]
 8004224:	f000 fa06 	bl	8004634 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004228:	4603      	mov	r3, r0
 800422a:	2b00      	cmp	r3, #0
 800422c:	d001      	beq.n	8004232 <I2C_MasterRequestRead+0x18a>
  {
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e000      	b.n	8004234 <I2C_MasterRequestRead+0x18c>
  }

  return HAL_OK;
 8004232:	2300      	movs	r3, #0
}
 8004234:	4618      	mov	r0, r3
 8004236:	3718      	adds	r7, #24
 8004238:	46bd      	mov	sp, r7
 800423a:	bd80      	pop	{r7, pc}
 800423c:	00010008 	.word	0x00010008
 8004240:	00010002 	.word	0x00010002

08004244 <I2C_RequestMemoryWrite>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryWrite(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004244:	b580      	push	{r7, lr}
 8004246:	b088      	sub	sp, #32
 8004248:	af02      	add	r7, sp, #8
 800424a:	60f8      	str	r0, [r7, #12]
 800424c:	4608      	mov	r0, r1
 800424e:	4611      	mov	r1, r2
 8004250:	461a      	mov	r2, r3
 8004252:	4603      	mov	r3, r0
 8004254:	817b      	strh	r3, [r7, #10]
 8004256:	460b      	mov	r3, r1
 8004258:	813b      	strh	r3, [r7, #8]
 800425a:	4613      	mov	r3, r2
 800425c:	80fb      	strh	r3, [r7, #6]
  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800425e:	68fb      	ldr	r3, [r7, #12]
 8004260:	681b      	ldr	r3, [r3, #0]
 8004262:	681a      	ldr	r2, [r3, #0]
 8004264:	68fb      	ldr	r3, [r7, #12]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 800426c:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 800426e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8004270:	9300      	str	r3, [sp, #0]
 8004272:	6a3b      	ldr	r3, [r7, #32]
 8004274:	2200      	movs	r2, #0
 8004276:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 800427a:	68f8      	ldr	r0, [r7, #12]
 800427c:	f000 f960 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 8004280:	4603      	mov	r3, r0
 8004282:	2b00      	cmp	r3, #0
 8004284:	d00d      	beq.n	80042a2 <I2C_RequestMemoryWrite+0x5e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 8004286:	68fb      	ldr	r3, [r7, #12]
 8004288:	681b      	ldr	r3, [r3, #0]
 800428a:	681b      	ldr	r3, [r3, #0]
 800428c:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004290:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8004294:	d103      	bne.n	800429e <I2C_RequestMemoryWrite+0x5a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	f44f 7200 	mov.w	r2, #512	@ 0x200
 800429c:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 800429e:	2303      	movs	r3, #3
 80042a0:	e05f      	b.n	8004362 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80042a2:	897b      	ldrh	r3, [r7, #10]
 80042a4:	b2db      	uxtb	r3, r3
 80042a6:	461a      	mov	r2, r3
 80042a8:	68fb      	ldr	r3, [r7, #12]
 80042aa:	681b      	ldr	r3, [r3, #0]
 80042ac:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80042b0:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80042b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80042b4:	6a3a      	ldr	r2, [r7, #32]
 80042b6:	492d      	ldr	r1, [pc, #180]	@ (800436c <I2C_RequestMemoryWrite+0x128>)
 80042b8:	68f8      	ldr	r0, [r7, #12]
 80042ba:	f000 f9bb 	bl	8004634 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80042be:	4603      	mov	r3, r0
 80042c0:	2b00      	cmp	r3, #0
 80042c2:	d001      	beq.n	80042c8 <I2C_RequestMemoryWrite+0x84>
  {
    return HAL_ERROR;
 80042c4:	2301      	movs	r3, #1
 80042c6:	e04c      	b.n	8004362 <I2C_RequestMemoryWrite+0x11e>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80042c8:	2300      	movs	r3, #0
 80042ca:	617b      	str	r3, [r7, #20]
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	681b      	ldr	r3, [r3, #0]
 80042d0:	695b      	ldr	r3, [r3, #20]
 80042d2:	617b      	str	r3, [r7, #20]
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	681b      	ldr	r3, [r3, #0]
 80042d8:	699b      	ldr	r3, [r3, #24]
 80042da:	617b      	str	r3, [r7, #20]
 80042dc:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 80042de:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80042e0:	6a39      	ldr	r1, [r7, #32]
 80042e2:	68f8      	ldr	r0, [r7, #12]
 80042e4:	f000 fa46 	bl	8004774 <I2C_WaitOnTXEFlagUntilTimeout>
 80042e8:	4603      	mov	r3, r0
 80042ea:	2b00      	cmp	r3, #0
 80042ec:	d00d      	beq.n	800430a <I2C_RequestMemoryWrite+0xc6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80042ee:	68fb      	ldr	r3, [r7, #12]
 80042f0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80042f2:	2b04      	cmp	r3, #4
 80042f4:	d107      	bne.n	8004306 <I2C_RequestMemoryWrite+0xc2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042f6:	68fb      	ldr	r3, [r7, #12]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	681a      	ldr	r2, [r3, #0]
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004304:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004306:	2301      	movs	r3, #1
 8004308:	e02b      	b.n	8004362 <I2C_RequestMemoryWrite+0x11e>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 800430a:	88fb      	ldrh	r3, [r7, #6]
 800430c:	2b01      	cmp	r3, #1
 800430e:	d105      	bne.n	800431c <I2C_RequestMemoryWrite+0xd8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004310:	893b      	ldrh	r3, [r7, #8]
 8004312:	b2da      	uxtb	r2, r3
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	611a      	str	r2, [r3, #16]
 800431a:	e021      	b.n	8004360 <I2C_RequestMemoryWrite+0x11c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 800431c:	893b      	ldrh	r3, [r7, #8]
 800431e:	0a1b      	lsrs	r3, r3, #8
 8004320:	b29b      	uxth	r3, r3
 8004322:	b2da      	uxtb	r2, r3
 8004324:	68fb      	ldr	r3, [r7, #12]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800432a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800432c:	6a39      	ldr	r1, [r7, #32]
 800432e:	68f8      	ldr	r0, [r7, #12]
 8004330:	f000 fa20 	bl	8004774 <I2C_WaitOnTXEFlagUntilTimeout>
 8004334:	4603      	mov	r3, r0
 8004336:	2b00      	cmp	r3, #0
 8004338:	d00d      	beq.n	8004356 <I2C_RequestMemoryWrite+0x112>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800433a:	68fb      	ldr	r3, [r7, #12]
 800433c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800433e:	2b04      	cmp	r3, #4
 8004340:	d107      	bne.n	8004352 <I2C_RequestMemoryWrite+0x10e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004342:	68fb      	ldr	r3, [r7, #12]
 8004344:	681b      	ldr	r3, [r3, #0]
 8004346:	681a      	ldr	r2, [r3, #0]
 8004348:	68fb      	ldr	r3, [r7, #12]
 800434a:	681b      	ldr	r3, [r3, #0]
 800434c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004350:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 8004352:	2301      	movs	r3, #1
 8004354:	e005      	b.n	8004362 <I2C_RequestMemoryWrite+0x11e>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004356:	893b      	ldrh	r3, [r7, #8]
 8004358:	b2da      	uxtb	r2, r3
 800435a:	68fb      	ldr	r3, [r7, #12]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	611a      	str	r2, [r3, #16]
  }

  return HAL_OK;
 8004360:	2300      	movs	r3, #0
}
 8004362:	4618      	mov	r0, r3
 8004364:	3718      	adds	r7, #24
 8004366:	46bd      	mov	sp, r7
 8004368:	bd80      	pop	{r7, pc}
 800436a:	bf00      	nop
 800436c:	00010002 	.word	0x00010002

08004370 <I2C_RequestMemoryRead>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_RequestMemoryRead(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint16_t MemAddress, uint16_t MemAddSize, uint32_t Timeout, uint32_t Tickstart)
{
 8004370:	b580      	push	{r7, lr}
 8004372:	b088      	sub	sp, #32
 8004374:	af02      	add	r7, sp, #8
 8004376:	60f8      	str	r0, [r7, #12]
 8004378:	4608      	mov	r0, r1
 800437a:	4611      	mov	r1, r2
 800437c:	461a      	mov	r2, r3
 800437e:	4603      	mov	r3, r0
 8004380:	817b      	strh	r3, [r7, #10]
 8004382:	460b      	mov	r3, r1
 8004384:	813b      	strh	r3, [r7, #8]
 8004386:	4613      	mov	r3, r2
 8004388:	80fb      	strh	r3, [r7, #6]
  /* Enable Acknowledge */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800438a:	68fb      	ldr	r3, [r7, #12]
 800438c:	681b      	ldr	r3, [r3, #0]
 800438e:	681a      	ldr	r2, [r3, #0]
 8004390:	68fb      	ldr	r3, [r7, #12]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	f442 6280 	orr.w	r2, r2, #1024	@ 0x400
 8004398:	601a      	str	r2, [r3, #0]

  /* Generate Start */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800439a:	68fb      	ldr	r3, [r7, #12]
 800439c:	681b      	ldr	r3, [r3, #0]
 800439e:	681a      	ldr	r2, [r3, #0]
 80043a0:	68fb      	ldr	r3, [r7, #12]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80043a8:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80043aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043ac:	9300      	str	r3, [sp, #0]
 80043ae:	6a3b      	ldr	r3, [r7, #32]
 80043b0:	2200      	movs	r2, #0
 80043b2:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80043b6:	68f8      	ldr	r0, [r7, #12]
 80043b8:	f000 f8c2 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 80043bc:	4603      	mov	r3, r0
 80043be:	2b00      	cmp	r3, #0
 80043c0:	d00d      	beq.n	80043de <I2C_RequestMemoryRead+0x6e>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80043c2:	68fb      	ldr	r3, [r7, #12]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	681b      	ldr	r3, [r3, #0]
 80043c8:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80043cc:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80043d0:	d103      	bne.n	80043da <I2C_RequestMemoryRead+0x6a>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	f44f 7200 	mov.w	r2, #512	@ 0x200
 80043d8:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 80043da:	2303      	movs	r3, #3
 80043dc:	e0aa      	b.n	8004534 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(DevAddress);
 80043de:	897b      	ldrh	r3, [r7, #10]
 80043e0:	b2db      	uxtb	r3, r3
 80043e2:	461a      	mov	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	681b      	ldr	r3, [r3, #0]
 80043e8:	f002 02fe 	and.w	r2, r2, #254	@ 0xfe
 80043ec:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 80043ee:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80043f0:	6a3a      	ldr	r2, [r7, #32]
 80043f2:	4952      	ldr	r1, [pc, #328]	@ (800453c <I2C_RequestMemoryRead+0x1cc>)
 80043f4:	68f8      	ldr	r0, [r7, #12]
 80043f6:	f000 f91d 	bl	8004634 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 80043fa:	4603      	mov	r3, r0
 80043fc:	2b00      	cmp	r3, #0
 80043fe:	d001      	beq.n	8004404 <I2C_RequestMemoryRead+0x94>
  {
    return HAL_ERROR;
 8004400:	2301      	movs	r3, #1
 8004402:	e097      	b.n	8004534 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Clear ADDR flag */
  __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004404:	2300      	movs	r3, #0
 8004406:	617b      	str	r3, [r7, #20]
 8004408:	68fb      	ldr	r3, [r7, #12]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	695b      	ldr	r3, [r3, #20]
 800440e:	617b      	str	r3, [r7, #20]
 8004410:	68fb      	ldr	r3, [r7, #12]
 8004412:	681b      	ldr	r3, [r3, #0]
 8004414:	699b      	ldr	r3, [r3, #24]
 8004416:	617b      	str	r3, [r7, #20]
 8004418:	697b      	ldr	r3, [r7, #20]

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800441a:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800441c:	6a39      	ldr	r1, [r7, #32]
 800441e:	68f8      	ldr	r0, [r7, #12]
 8004420:	f000 f9a8 	bl	8004774 <I2C_WaitOnTXEFlagUntilTimeout>
 8004424:	4603      	mov	r3, r0
 8004426:	2b00      	cmp	r3, #0
 8004428:	d00d      	beq.n	8004446 <I2C_RequestMemoryRead+0xd6>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 800442a:	68fb      	ldr	r3, [r7, #12]
 800442c:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800442e:	2b04      	cmp	r3, #4
 8004430:	d107      	bne.n	8004442 <I2C_RequestMemoryRead+0xd2>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004432:	68fb      	ldr	r3, [r7, #12]
 8004434:	681b      	ldr	r3, [r3, #0]
 8004436:	681a      	ldr	r2, [r3, #0]
 8004438:	68fb      	ldr	r3, [r7, #12]
 800443a:	681b      	ldr	r3, [r3, #0]
 800443c:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004440:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 8004442:	2301      	movs	r3, #1
 8004444:	e076      	b.n	8004534 <I2C_RequestMemoryRead+0x1c4>
  }

  /* If Memory address size is 8Bit */
  if (MemAddSize == I2C_MEMADD_SIZE_8BIT)
 8004446:	88fb      	ldrh	r3, [r7, #6]
 8004448:	2b01      	cmp	r3, #1
 800444a:	d105      	bne.n	8004458 <I2C_RequestMemoryRead+0xe8>
  {
    /* Send Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 800444c:	893b      	ldrh	r3, [r7, #8]
 800444e:	b2da      	uxtb	r2, r3
 8004450:	68fb      	ldr	r3, [r7, #12]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	611a      	str	r2, [r3, #16]
 8004456:	e021      	b.n	800449c <I2C_RequestMemoryRead+0x12c>
  }
  /* If Memory address size is 16Bit */
  else
  {
    /* Send MSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_MSB(MemAddress);
 8004458:	893b      	ldrh	r3, [r7, #8]
 800445a:	0a1b      	lsrs	r3, r3, #8
 800445c:	b29b      	uxth	r3, r3
 800445e:	b2da      	uxtb	r2, r3
 8004460:	68fb      	ldr	r3, [r7, #12]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	611a      	str	r2, [r3, #16]

    /* Wait until TXE flag is set */
    if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 8004466:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8004468:	6a39      	ldr	r1, [r7, #32]
 800446a:	68f8      	ldr	r0, [r7, #12]
 800446c:	f000 f982 	bl	8004774 <I2C_WaitOnTXEFlagUntilTimeout>
 8004470:	4603      	mov	r3, r0
 8004472:	2b00      	cmp	r3, #0
 8004474:	d00d      	beq.n	8004492 <I2C_RequestMemoryRead+0x122>
    {
      if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 8004476:	68fb      	ldr	r3, [r7, #12]
 8004478:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800447a:	2b04      	cmp	r3, #4
 800447c:	d107      	bne.n	800448e <I2C_RequestMemoryRead+0x11e>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800447e:	68fb      	ldr	r3, [r7, #12]
 8004480:	681b      	ldr	r3, [r3, #0]
 8004482:	681a      	ldr	r2, [r3, #0]
 8004484:	68fb      	ldr	r3, [r7, #12]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 800448c:	601a      	str	r2, [r3, #0]
      }
      return HAL_ERROR;
 800448e:	2301      	movs	r3, #1
 8004490:	e050      	b.n	8004534 <I2C_RequestMemoryRead+0x1c4>
    }

    /* Send LSB of Memory Address */
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(MemAddress);
 8004492:	893b      	ldrh	r3, [r7, #8]
 8004494:	b2da      	uxtb	r2, r3
 8004496:	68fb      	ldr	r3, [r7, #12]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	611a      	str	r2, [r3, #16]
  }

  /* Wait until TXE flag is set */
  if (I2C_WaitOnTXEFlagUntilTimeout(hi2c, Timeout, Tickstart) != HAL_OK)
 800449c:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800449e:	6a39      	ldr	r1, [r7, #32]
 80044a0:	68f8      	ldr	r0, [r7, #12]
 80044a2:	f000 f967 	bl	8004774 <I2C_WaitOnTXEFlagUntilTimeout>
 80044a6:	4603      	mov	r3, r0
 80044a8:	2b00      	cmp	r3, #0
 80044aa:	d00d      	beq.n	80044c8 <I2C_RequestMemoryRead+0x158>
  {
    if (hi2c->ErrorCode == HAL_I2C_ERROR_AF)
 80044ac:	68fb      	ldr	r3, [r7, #12]
 80044ae:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80044b0:	2b04      	cmp	r3, #4
 80044b2:	d107      	bne.n	80044c4 <I2C_RequestMemoryRead+0x154>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044b4:	68fb      	ldr	r3, [r7, #12]
 80044b6:	681b      	ldr	r3, [r3, #0]
 80044b8:	681a      	ldr	r2, [r3, #0]
 80044ba:	68fb      	ldr	r3, [r7, #12]
 80044bc:	681b      	ldr	r3, [r3, #0]
 80044be:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 80044c2:	601a      	str	r2, [r3, #0]
    }
    return HAL_ERROR;
 80044c4:	2301      	movs	r3, #1
 80044c6:	e035      	b.n	8004534 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Generate Restart */
  SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80044c8:	68fb      	ldr	r3, [r7, #12]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	681a      	ldr	r2, [r3, #0]
 80044ce:	68fb      	ldr	r3, [r7, #12]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f442 7280 	orr.w	r2, r2, #256	@ 0x100
 80044d6:	601a      	str	r2, [r3, #0]

  /* Wait until SB flag is set */
  if (I2C_WaitOnFlagUntilTimeout(hi2c, I2C_FLAG_SB, RESET, Timeout, Tickstart) != HAL_OK)
 80044d8:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80044da:	9300      	str	r3, [sp, #0]
 80044dc:	6a3b      	ldr	r3, [r7, #32]
 80044de:	2200      	movs	r2, #0
 80044e0:	f04f 1101 	mov.w	r1, #65537	@ 0x10001
 80044e4:	68f8      	ldr	r0, [r7, #12]
 80044e6:	f000 f82b 	bl	8004540 <I2C_WaitOnFlagUntilTimeout>
 80044ea:	4603      	mov	r3, r0
 80044ec:	2b00      	cmp	r3, #0
 80044ee:	d00d      	beq.n	800450c <I2C_RequestMemoryRead+0x19c>
  {
    if (READ_BIT(hi2c->Instance->CR1, I2C_CR1_START) == I2C_CR1_START)
 80044f0:	68fb      	ldr	r3, [r7, #12]
 80044f2:	681b      	ldr	r3, [r3, #0]
 80044f4:	681b      	ldr	r3, [r3, #0]
 80044f6:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 80044fa:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 80044fe:	d103      	bne.n	8004508 <I2C_RequestMemoryRead+0x198>
    {
      hi2c->ErrorCode = HAL_I2C_WRONG_START;
 8004500:	68fb      	ldr	r3, [r7, #12]
 8004502:	f44f 7200 	mov.w	r2, #512	@ 0x200
 8004506:	641a      	str	r2, [r3, #64]	@ 0x40
    }
    return HAL_TIMEOUT;
 8004508:	2303      	movs	r3, #3
 800450a:	e013      	b.n	8004534 <I2C_RequestMemoryRead+0x1c4>
  }

  /* Send slave address */
  hi2c->Instance->DR = I2C_7BIT_ADD_READ(DevAddress);
 800450c:	897b      	ldrh	r3, [r7, #10]
 800450e:	b2db      	uxtb	r3, r3
 8004510:	f043 0301 	orr.w	r3, r3, #1
 8004514:	b2da      	uxtb	r2, r3
 8004516:	68fb      	ldr	r3, [r7, #12]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	611a      	str	r2, [r3, #16]

  /* Wait until ADDR flag is set */
  if (I2C_WaitOnMasterAddressFlagUntilTimeout(hi2c, I2C_FLAG_ADDR, Timeout, Tickstart) != HAL_OK)
 800451c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800451e:	6a3a      	ldr	r2, [r7, #32]
 8004520:	4906      	ldr	r1, [pc, #24]	@ (800453c <I2C_RequestMemoryRead+0x1cc>)
 8004522:	68f8      	ldr	r0, [r7, #12]
 8004524:	f000 f886 	bl	8004634 <I2C_WaitOnMasterAddressFlagUntilTimeout>
 8004528:	4603      	mov	r3, r0
 800452a:	2b00      	cmp	r3, #0
 800452c:	d001      	beq.n	8004532 <I2C_RequestMemoryRead+0x1c2>
  {
    return HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	e000      	b.n	8004534 <I2C_RequestMemoryRead+0x1c4>
  }

  return HAL_OK;
 8004532:	2300      	movs	r3, #0
}
 8004534:	4618      	mov	r0, r3
 8004536:	3718      	adds	r7, #24
 8004538:	46bd      	mov	sp, r7
 800453a:	bd80      	pop	{r7, pc}
 800453c:	00010002 	.word	0x00010002

08004540 <I2C_WaitOnFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, FlagStatus Status, uint32_t Timeout, uint32_t Tickstart)
{
 8004540:	b580      	push	{r7, lr}
 8004542:	b084      	sub	sp, #16
 8004544:	af00      	add	r7, sp, #0
 8004546:	60f8      	str	r0, [r7, #12]
 8004548:	60b9      	str	r1, [r7, #8]
 800454a:	603b      	str	r3, [r7, #0]
 800454c:	4613      	mov	r3, r2
 800454e:	71fb      	strb	r3, [r7, #7]
  /* Wait until flag is set */
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 8004550:	e048      	b.n	80045e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004552:	683b      	ldr	r3, [r7, #0]
 8004554:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004558:	d044      	beq.n	80045e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800455a:	f7fe fa2b 	bl	80029b4 <HAL_GetTick>
 800455e:	4602      	mov	r2, r0
 8004560:	69bb      	ldr	r3, [r7, #24]
 8004562:	1ad3      	subs	r3, r2, r3
 8004564:	683a      	ldr	r2, [r7, #0]
 8004566:	429a      	cmp	r2, r3
 8004568:	d302      	bcc.n	8004570 <I2C_WaitOnFlagUntilTimeout+0x30>
 800456a:	683b      	ldr	r3, [r7, #0]
 800456c:	2b00      	cmp	r3, #0
 800456e:	d139      	bne.n	80045e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == Status))
 8004570:	68bb      	ldr	r3, [r7, #8]
 8004572:	0c1b      	lsrs	r3, r3, #16
 8004574:	b2db      	uxtb	r3, r3
 8004576:	2b01      	cmp	r3, #1
 8004578:	d10d      	bne.n	8004596 <I2C_WaitOnFlagUntilTimeout+0x56>
 800457a:	68fb      	ldr	r3, [r7, #12]
 800457c:	681b      	ldr	r3, [r3, #0]
 800457e:	695b      	ldr	r3, [r3, #20]
 8004580:	43da      	mvns	r2, r3
 8004582:	68bb      	ldr	r3, [r7, #8]
 8004584:	4013      	ands	r3, r2
 8004586:	b29b      	uxth	r3, r3
 8004588:	2b00      	cmp	r3, #0
 800458a:	bf0c      	ite	eq
 800458c:	2301      	moveq	r3, #1
 800458e:	2300      	movne	r3, #0
 8004590:	b2db      	uxtb	r3, r3
 8004592:	461a      	mov	r2, r3
 8004594:	e00c      	b.n	80045b0 <I2C_WaitOnFlagUntilTimeout+0x70>
 8004596:	68fb      	ldr	r3, [r7, #12]
 8004598:	681b      	ldr	r3, [r3, #0]
 800459a:	699b      	ldr	r3, [r3, #24]
 800459c:	43da      	mvns	r2, r3
 800459e:	68bb      	ldr	r3, [r7, #8]
 80045a0:	4013      	ands	r3, r2
 80045a2:	b29b      	uxth	r3, r3
 80045a4:	2b00      	cmp	r3, #0
 80045a6:	bf0c      	ite	eq
 80045a8:	2301      	moveq	r3, #1
 80045aa:	2300      	movne	r3, #0
 80045ac:	b2db      	uxtb	r3, r3
 80045ae:	461a      	mov	r2, r3
 80045b0:	79fb      	ldrb	r3, [r7, #7]
 80045b2:	429a      	cmp	r2, r3
 80045b4:	d116      	bne.n	80045e4 <I2C_WaitOnFlagUntilTimeout+0xa4>
        {
          hi2c->PreviousState     = I2C_STATE_NONE;
 80045b6:	68fb      	ldr	r3, [r7, #12]
 80045b8:	2200      	movs	r2, #0
 80045ba:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State             = HAL_I2C_STATE_READY;
 80045bc:	68fb      	ldr	r3, [r7, #12]
 80045be:	2220      	movs	r2, #32
 80045c0:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode              = HAL_I2C_MODE_NONE;
 80045c4:	68fb      	ldr	r3, [r7, #12]
 80045c6:	2200      	movs	r2, #0
 80045c8:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode         |= HAL_I2C_ERROR_TIMEOUT;
 80045cc:	68fb      	ldr	r3, [r7, #12]
 80045ce:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80045d0:	f043 0220 	orr.w	r2, r3, #32
 80045d4:	68fb      	ldr	r3, [r7, #12]
 80045d6:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80045d8:	68fb      	ldr	r3, [r7, #12]
 80045da:	2200      	movs	r2, #0
 80045dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80045e0:	2301      	movs	r3, #1
 80045e2:	e023      	b.n	800462c <I2C_WaitOnFlagUntilTimeout+0xec>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == Status)
 80045e4:	68bb      	ldr	r3, [r7, #8]
 80045e6:	0c1b      	lsrs	r3, r3, #16
 80045e8:	b2db      	uxtb	r3, r3
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d10d      	bne.n	800460a <I2C_WaitOnFlagUntilTimeout+0xca>
 80045ee:	68fb      	ldr	r3, [r7, #12]
 80045f0:	681b      	ldr	r3, [r3, #0]
 80045f2:	695b      	ldr	r3, [r3, #20]
 80045f4:	43da      	mvns	r2, r3
 80045f6:	68bb      	ldr	r3, [r7, #8]
 80045f8:	4013      	ands	r3, r2
 80045fa:	b29b      	uxth	r3, r3
 80045fc:	2b00      	cmp	r3, #0
 80045fe:	bf0c      	ite	eq
 8004600:	2301      	moveq	r3, #1
 8004602:	2300      	movne	r3, #0
 8004604:	b2db      	uxtb	r3, r3
 8004606:	461a      	mov	r2, r3
 8004608:	e00c      	b.n	8004624 <I2C_WaitOnFlagUntilTimeout+0xe4>
 800460a:	68fb      	ldr	r3, [r7, #12]
 800460c:	681b      	ldr	r3, [r3, #0]
 800460e:	699b      	ldr	r3, [r3, #24]
 8004610:	43da      	mvns	r2, r3
 8004612:	68bb      	ldr	r3, [r7, #8]
 8004614:	4013      	ands	r3, r2
 8004616:	b29b      	uxth	r3, r3
 8004618:	2b00      	cmp	r3, #0
 800461a:	bf0c      	ite	eq
 800461c:	2301      	moveq	r3, #1
 800461e:	2300      	movne	r3, #0
 8004620:	b2db      	uxtb	r3, r3
 8004622:	461a      	mov	r2, r3
 8004624:	79fb      	ldrb	r3, [r7, #7]
 8004626:	429a      	cmp	r2, r3
 8004628:	d093      	beq.n	8004552 <I2C_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 800462a:	2300      	movs	r3, #0
}
 800462c:	4618      	mov	r0, r3
 800462e:	3710      	adds	r7, #16
 8004630:	46bd      	mov	sp, r7
 8004632:	bd80      	pop	{r7, pc}

08004634 <I2C_WaitOnMasterAddressFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnMasterAddressFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Flag, uint32_t Timeout, uint32_t Tickstart)
{
 8004634:	b580      	push	{r7, lr}
 8004636:	b084      	sub	sp, #16
 8004638:	af00      	add	r7, sp, #0
 800463a:	60f8      	str	r0, [r7, #12]
 800463c:	60b9      	str	r1, [r7, #8]
 800463e:	607a      	str	r2, [r7, #4]
 8004640:	603b      	str	r3, [r7, #0]
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004642:	e071      	b.n	8004728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004644:	68fb      	ldr	r3, [r7, #12]
 8004646:	681b      	ldr	r3, [r3, #0]
 8004648:	695b      	ldr	r3, [r3, #20]
 800464a:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 800464e:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004652:	d123      	bne.n	800469c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x68>
    {
      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004654:	68fb      	ldr	r3, [r7, #12]
 8004656:	681b      	ldr	r3, [r3, #0]
 8004658:	681a      	ldr	r2, [r3, #0]
 800465a:	68fb      	ldr	r3, [r7, #12]
 800465c:	681b      	ldr	r3, [r3, #0]
 800465e:	f442 7200 	orr.w	r2, r2, #512	@ 0x200
 8004662:	601a      	str	r2, [r3, #0]

      /* Clear AF Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004664:	68fb      	ldr	r3, [r7, #12]
 8004666:	681b      	ldr	r3, [r3, #0]
 8004668:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800466c:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	2200      	movs	r2, #0
 8004672:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 8004674:	68fb      	ldr	r3, [r7, #12]
 8004676:	2220      	movs	r2, #32
 8004678:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 800467c:	68fb      	ldr	r3, [r7, #12]
 800467e:	2200      	movs	r2, #0
 8004680:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004684:	68fb      	ldr	r3, [r7, #12]
 8004686:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004688:	f043 0204 	orr.w	r2, r3, #4
 800468c:	68fb      	ldr	r3, [r7, #12]
 800468e:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 8004690:	68fb      	ldr	r3, [r7, #12]
 8004692:	2200      	movs	r2, #0
 8004694:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 8004698:	2301      	movs	r3, #1
 800469a:	e067      	b.n	800476c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	f1b3 3fff 	cmp.w	r3, #4294967295
 80046a2:	d041      	beq.n	8004728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80046a4:	f7fe f986 	bl	80029b4 <HAL_GetTick>
 80046a8:	4602      	mov	r2, r0
 80046aa:	683b      	ldr	r3, [r7, #0]
 80046ac:	1ad3      	subs	r3, r2, r3
 80046ae:	687a      	ldr	r2, [r7, #4]
 80046b0:	429a      	cmp	r2, r3
 80046b2:	d302      	bcc.n	80046ba <I2C_WaitOnMasterAddressFlagUntilTimeout+0x86>
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	2b00      	cmp	r3, #0
 80046b8:	d136      	bne.n	8004728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET))
 80046ba:	68bb      	ldr	r3, [r7, #8]
 80046bc:	0c1b      	lsrs	r3, r3, #16
 80046be:	b2db      	uxtb	r3, r3
 80046c0:	2b01      	cmp	r3, #1
 80046c2:	d10c      	bne.n	80046de <I2C_WaitOnMasterAddressFlagUntilTimeout+0xaa>
 80046c4:	68fb      	ldr	r3, [r7, #12]
 80046c6:	681b      	ldr	r3, [r3, #0]
 80046c8:	695b      	ldr	r3, [r3, #20]
 80046ca:	43da      	mvns	r2, r3
 80046cc:	68bb      	ldr	r3, [r7, #8]
 80046ce:	4013      	ands	r3, r2
 80046d0:	b29b      	uxth	r3, r3
 80046d2:	2b00      	cmp	r3, #0
 80046d4:	bf14      	ite	ne
 80046d6:	2301      	movne	r3, #1
 80046d8:	2300      	moveq	r3, #0
 80046da:	b2db      	uxtb	r3, r3
 80046dc:	e00b      	b.n	80046f6 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xc2>
 80046de:	68fb      	ldr	r3, [r7, #12]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	699b      	ldr	r3, [r3, #24]
 80046e4:	43da      	mvns	r2, r3
 80046e6:	68bb      	ldr	r3, [r7, #8]
 80046e8:	4013      	ands	r3, r2
 80046ea:	b29b      	uxth	r3, r3
 80046ec:	2b00      	cmp	r3, #0
 80046ee:	bf14      	ite	ne
 80046f0:	2301      	movne	r3, #1
 80046f2:	2300      	moveq	r3, #0
 80046f4:	b2db      	uxtb	r3, r3
 80046f6:	2b00      	cmp	r3, #0
 80046f8:	d016      	beq.n	8004728 <I2C_WaitOnMasterAddressFlagUntilTimeout+0xf4>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80046fa:	68fb      	ldr	r3, [r7, #12]
 80046fc:	2200      	movs	r2, #0
 80046fe:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004700:	68fb      	ldr	r3, [r7, #12]
 8004702:	2220      	movs	r2, #32
 8004704:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004708:	68fb      	ldr	r3, [r7, #12]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004710:	68fb      	ldr	r3, [r7, #12]
 8004712:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004714:	f043 0220 	orr.w	r2, r3, #32
 8004718:	68fb      	ldr	r3, [r7, #12]
 800471a:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800471c:	68fb      	ldr	r3, [r7, #12]
 800471e:	2200      	movs	r2, #0
 8004720:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004724:	2301      	movs	r3, #1
 8004726:	e021      	b.n	800476c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x138>
  while (__HAL_I2C_GET_FLAG(hi2c, Flag) == RESET)
 8004728:	68bb      	ldr	r3, [r7, #8]
 800472a:	0c1b      	lsrs	r3, r3, #16
 800472c:	b2db      	uxtb	r3, r3
 800472e:	2b01      	cmp	r3, #1
 8004730:	d10c      	bne.n	800474c <I2C_WaitOnMasterAddressFlagUntilTimeout+0x118>
 8004732:	68fb      	ldr	r3, [r7, #12]
 8004734:	681b      	ldr	r3, [r3, #0]
 8004736:	695b      	ldr	r3, [r3, #20]
 8004738:	43da      	mvns	r2, r3
 800473a:	68bb      	ldr	r3, [r7, #8]
 800473c:	4013      	ands	r3, r2
 800473e:	b29b      	uxth	r3, r3
 8004740:	2b00      	cmp	r3, #0
 8004742:	bf14      	ite	ne
 8004744:	2301      	movne	r3, #1
 8004746:	2300      	moveq	r3, #0
 8004748:	b2db      	uxtb	r3, r3
 800474a:	e00b      	b.n	8004764 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x130>
 800474c:	68fb      	ldr	r3, [r7, #12]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	699b      	ldr	r3, [r3, #24]
 8004752:	43da      	mvns	r2, r3
 8004754:	68bb      	ldr	r3, [r7, #8]
 8004756:	4013      	ands	r3, r2
 8004758:	b29b      	uxth	r3, r3
 800475a:	2b00      	cmp	r3, #0
 800475c:	bf14      	ite	ne
 800475e:	2301      	movne	r3, #1
 8004760:	2300      	moveq	r3, #0
 8004762:	b2db      	uxtb	r3, r3
 8004764:	2b00      	cmp	r3, #0
 8004766:	f47f af6d 	bne.w	8004644 <I2C_WaitOnMasterAddressFlagUntilTimeout+0x10>
        }
      }
    }
  }
  return HAL_OK;
 800476a:	2300      	movs	r3, #0
}
 800476c:	4618      	mov	r0, r3
 800476e:	3710      	adds	r7, #16
 8004770:	46bd      	mov	sp, r7
 8004772:	bd80      	pop	{r7, pc}

08004774 <I2C_WaitOnTXEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnTXEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004774:	b580      	push	{r7, lr}
 8004776:	b084      	sub	sp, #16
 8004778:	af00      	add	r7, sp, #0
 800477a:	60f8      	str	r0, [r7, #12]
 800477c:	60b9      	str	r1, [r7, #8]
 800477e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 8004780:	e034      	b.n	80047ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004782:	68f8      	ldr	r0, [r7, #12]
 8004784:	f000 f8e3 	bl	800494e <I2C_IsAcknowledgeFailed>
 8004788:	4603      	mov	r3, r0
 800478a:	2b00      	cmp	r3, #0
 800478c:	d001      	beq.n	8004792 <I2C_WaitOnTXEFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800478e:	2301      	movs	r3, #1
 8004790:	e034      	b.n	80047fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004792:	68bb      	ldr	r3, [r7, #8]
 8004794:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004798:	d028      	beq.n	80047ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800479a:	f7fe f90b 	bl	80029b4 <HAL_GetTick>
 800479e:	4602      	mov	r2, r0
 80047a0:	687b      	ldr	r3, [r7, #4]
 80047a2:	1ad3      	subs	r3, r2, r3
 80047a4:	68ba      	ldr	r2, [r7, #8]
 80047a6:	429a      	cmp	r2, r3
 80047a8:	d302      	bcc.n	80047b0 <I2C_WaitOnTXEFlagUntilTimeout+0x3c>
 80047aa:	68bb      	ldr	r3, [r7, #8]
 80047ac:	2b00      	cmp	r3, #0
 80047ae:	d11d      	bne.n	80047ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET))
 80047b0:	68fb      	ldr	r3, [r7, #12]
 80047b2:	681b      	ldr	r3, [r3, #0]
 80047b4:	695b      	ldr	r3, [r3, #20]
 80047b6:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047ba:	2b80      	cmp	r3, #128	@ 0x80
 80047bc:	d016      	beq.n	80047ec <I2C_WaitOnTXEFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 80047be:	68fb      	ldr	r3, [r7, #12]
 80047c0:	2200      	movs	r2, #0
 80047c2:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 80047c4:	68fb      	ldr	r3, [r7, #12]
 80047c6:	2220      	movs	r2, #32
 80047c8:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 80047cc:	68fb      	ldr	r3, [r7, #12]
 80047ce:	2200      	movs	r2, #0
 80047d0:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80047d4:	68fb      	ldr	r3, [r7, #12]
 80047d6:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 80047d8:	f043 0220 	orr.w	r2, r3, #32
 80047dc:	68fb      	ldr	r3, [r7, #12]
 80047de:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 80047e0:	68fb      	ldr	r3, [r7, #12]
 80047e2:	2200      	movs	r2, #0
 80047e4:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 80047e8:	2301      	movs	r3, #1
 80047ea:	e007      	b.n	80047fc <I2C_WaitOnTXEFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 80047ec:	68fb      	ldr	r3, [r7, #12]
 80047ee:	681b      	ldr	r3, [r3, #0]
 80047f0:	695b      	ldr	r3, [r3, #20]
 80047f2:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 80047f6:	2b80      	cmp	r3, #128	@ 0x80
 80047f8:	d1c3      	bne.n	8004782 <I2C_WaitOnTXEFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 80047fa:	2300      	movs	r3, #0
}
 80047fc:	4618      	mov	r0, r3
 80047fe:	3710      	adds	r7, #16
 8004800:	46bd      	mov	sp, r7
 8004802:	bd80      	pop	{r7, pc}

08004804 <I2C_WaitOnBTFFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnBTFFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004804:	b580      	push	{r7, lr}
 8004806:	b084      	sub	sp, #16
 8004808:	af00      	add	r7, sp, #0
 800480a:	60f8      	str	r0, [r7, #12]
 800480c:	60b9      	str	r1, [r7, #8]
 800480e:	607a      	str	r2, [r7, #4]
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 8004810:	e034      	b.n	800487c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
  {
    /* Check if a NACK is detected */
    if (I2C_IsAcknowledgeFailed(hi2c) != HAL_OK)
 8004812:	68f8      	ldr	r0, [r7, #12]
 8004814:	f000 f89b 	bl	800494e <I2C_IsAcknowledgeFailed>
 8004818:	4603      	mov	r3, r0
 800481a:	2b00      	cmp	r3, #0
 800481c:	d001      	beq.n	8004822 <I2C_WaitOnBTFFlagUntilTimeout+0x1e>
    {
      return HAL_ERROR;
 800481e:	2301      	movs	r3, #1
 8004820:	e034      	b.n	800488c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
    }

    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8004822:	68bb      	ldr	r3, [r7, #8]
 8004824:	f1b3 3fff 	cmp.w	r3, #4294967295
 8004828:	d028      	beq.n	800487c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 800482a:	f7fe f8c3 	bl	80029b4 <HAL_GetTick>
 800482e:	4602      	mov	r2, r0
 8004830:	687b      	ldr	r3, [r7, #4]
 8004832:	1ad3      	subs	r3, r2, r3
 8004834:	68ba      	ldr	r2, [r7, #8]
 8004836:	429a      	cmp	r2, r3
 8004838:	d302      	bcc.n	8004840 <I2C_WaitOnBTFFlagUntilTimeout+0x3c>
 800483a:	68bb      	ldr	r3, [r7, #8]
 800483c:	2b00      	cmp	r3, #0
 800483e:	d11d      	bne.n	800487c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
      {
        if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET))
 8004840:	68fb      	ldr	r3, [r7, #12]
 8004842:	681b      	ldr	r3, [r3, #0]
 8004844:	695b      	ldr	r3, [r3, #20]
 8004846:	f003 0304 	and.w	r3, r3, #4
 800484a:	2b04      	cmp	r3, #4
 800484c:	d016      	beq.n	800487c <I2C_WaitOnBTFFlagUntilTimeout+0x78>
        {
          hi2c->PreviousState       = I2C_STATE_NONE;
 800484e:	68fb      	ldr	r3, [r7, #12]
 8004850:	2200      	movs	r2, #0
 8004852:	631a      	str	r2, [r3, #48]	@ 0x30
          hi2c->State               = HAL_I2C_STATE_READY;
 8004854:	68fb      	ldr	r3, [r7, #12]
 8004856:	2220      	movs	r2, #32
 8004858:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
          hi2c->Mode                = HAL_I2C_MODE_NONE;
 800485c:	68fb      	ldr	r3, [r7, #12]
 800485e:	2200      	movs	r2, #0
 8004860:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
          hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004864:	68fb      	ldr	r3, [r7, #12]
 8004866:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004868:	f043 0220 	orr.w	r2, r3, #32
 800486c:	68fb      	ldr	r3, [r7, #12]
 800486e:	641a      	str	r2, [r3, #64]	@ 0x40

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 8004870:	68fb      	ldr	r3, [r7, #12]
 8004872:	2200      	movs	r2, #0
 8004874:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

          return HAL_ERROR;
 8004878:	2301      	movs	r3, #1
 800487a:	e007      	b.n	800488c <I2C_WaitOnBTFFlagUntilTimeout+0x88>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == RESET)
 800487c:	68fb      	ldr	r3, [r7, #12]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	695b      	ldr	r3, [r3, #20]
 8004882:	f003 0304 	and.w	r3, r3, #4
 8004886:	2b04      	cmp	r3, #4
 8004888:	d1c3      	bne.n	8004812 <I2C_WaitOnBTFFlagUntilTimeout+0xe>
        }
      }
    }
  }
  return HAL_OK;
 800488a:	2300      	movs	r3, #0
}
 800488c:	4618      	mov	r0, r3
 800488e:	3710      	adds	r7, #16
 8004890:	46bd      	mov	sp, r7
 8004892:	bd80      	pop	{r7, pc}

08004894 <I2C_WaitOnRXNEFlagUntilTimeout>:
  * @param  Timeout Timeout duration
  * @param  Tickstart Tick start value
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnRXNEFlagUntilTimeout(I2C_HandleTypeDef *hi2c, uint32_t Timeout, uint32_t Tickstart)
{
 8004894:	b580      	push	{r7, lr}
 8004896:	b084      	sub	sp, #16
 8004898:	af00      	add	r7, sp, #0
 800489a:	60f8      	str	r0, [r7, #12]
 800489c:	60b9      	str	r1, [r7, #8]
 800489e:	607a      	str	r2, [r7, #4]

  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 80048a0:	e049      	b.n	8004936 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
  {
    /* Check if a STOPF is detected */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 80048a2:	68fb      	ldr	r3, [r7, #12]
 80048a4:	681b      	ldr	r3, [r3, #0]
 80048a6:	695b      	ldr	r3, [r3, #20]
 80048a8:	f003 0310 	and.w	r3, r3, #16
 80048ac:	2b10      	cmp	r3, #16
 80048ae:	d119      	bne.n	80048e4 <I2C_WaitOnRXNEFlagUntilTimeout+0x50>
    {
      /* Clear STOP Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 80048b0:	68fb      	ldr	r3, [r7, #12]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f06f 0210 	mvn.w	r2, #16
 80048b8:	615a      	str	r2, [r3, #20]

      hi2c->PreviousState       = I2C_STATE_NONE;
 80048ba:	68fb      	ldr	r3, [r7, #12]
 80048bc:	2200      	movs	r2, #0
 80048be:	631a      	str	r2, [r3, #48]	@ 0x30
      hi2c->State               = HAL_I2C_STATE_READY;
 80048c0:	68fb      	ldr	r3, [r7, #12]
 80048c2:	2220      	movs	r2, #32
 80048c4:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
      hi2c->Mode                = HAL_I2C_MODE_NONE;
 80048c8:	68fb      	ldr	r3, [r7, #12]
 80048ca:	2200      	movs	r2, #0
 80048cc:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
      hi2c->ErrorCode           |= HAL_I2C_ERROR_NONE;
 80048d0:	68fb      	ldr	r3, [r7, #12]
 80048d2:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 80048d4:	68fb      	ldr	r3, [r7, #12]
 80048d6:	641a      	str	r2, [r3, #64]	@ 0x40

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 80048d8:	68fb      	ldr	r3, [r7, #12]
 80048da:	2200      	movs	r2, #0
 80048dc:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

      return HAL_ERROR;
 80048e0:	2301      	movs	r3, #1
 80048e2:	e030      	b.n	8004946 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
    }

    /* Check for the Timeout */
    if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 80048e4:	f7fe f866 	bl	80029b4 <HAL_GetTick>
 80048e8:	4602      	mov	r2, r0
 80048ea:	687b      	ldr	r3, [r7, #4]
 80048ec:	1ad3      	subs	r3, r2, r3
 80048ee:	68ba      	ldr	r2, [r7, #8]
 80048f0:	429a      	cmp	r2, r3
 80048f2:	d302      	bcc.n	80048fa <I2C_WaitOnRXNEFlagUntilTimeout+0x66>
 80048f4:	68bb      	ldr	r3, [r7, #8]
 80048f6:	2b00      	cmp	r3, #0
 80048f8:	d11d      	bne.n	8004936 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
    {
      if ((__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET))
 80048fa:	68fb      	ldr	r3, [r7, #12]
 80048fc:	681b      	ldr	r3, [r3, #0]
 80048fe:	695b      	ldr	r3, [r3, #20]
 8004900:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004904:	2b40      	cmp	r3, #64	@ 0x40
 8004906:	d016      	beq.n	8004936 <I2C_WaitOnRXNEFlagUntilTimeout+0xa2>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004908:	68fb      	ldr	r3, [r7, #12]
 800490a:	2200      	movs	r2, #0
 800490c:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800490e:	68fb      	ldr	r3, [r7, #12]
 8004910:	2220      	movs	r2, #32
 8004912:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004916:	68fb      	ldr	r3, [r7, #12]
 8004918:	2200      	movs	r2, #0
 800491a:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800491e:	68fb      	ldr	r3, [r7, #12]
 8004920:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004922:	f043 0220 	orr.w	r2, r3, #32
 8004926:	68fb      	ldr	r3, [r7, #12]
 8004928:	641a      	str	r2, [r3, #64]	@ 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800492a:	68fb      	ldr	r3, [r7, #12]
 800492c:	2200      	movs	r2, #0
 800492e:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

        return HAL_ERROR;
 8004932:	2301      	movs	r3, #1
 8004934:	e007      	b.n	8004946 <I2C_WaitOnRXNEFlagUntilTimeout+0xb2>
  while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == RESET)
 8004936:	68fb      	ldr	r3, [r7, #12]
 8004938:	681b      	ldr	r3, [r3, #0]
 800493a:	695b      	ldr	r3, [r3, #20]
 800493c:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8004940:	2b40      	cmp	r3, #64	@ 0x40
 8004942:	d1ae      	bne.n	80048a2 <I2C_WaitOnRXNEFlagUntilTimeout+0xe>
      }
    }
  }
  return HAL_OK;
 8004944:	2300      	movs	r3, #0
}
 8004946:	4618      	mov	r0, r3
 8004948:	3710      	adds	r7, #16
 800494a:	46bd      	mov	sp, r7
 800494c:	bd80      	pop	{r7, pc}

0800494e <I2C_IsAcknowledgeFailed>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_IsAcknowledgeFailed(I2C_HandleTypeDef *hi2c)
{
 800494e:	b480      	push	{r7}
 8004950:	b083      	sub	sp, #12
 8004952:	af00      	add	r7, sp, #0
 8004954:	6078      	str	r0, [r7, #4]
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 8004956:	687b      	ldr	r3, [r7, #4]
 8004958:	681b      	ldr	r3, [r3, #0]
 800495a:	695b      	ldr	r3, [r3, #20]
 800495c:	f403 6380 	and.w	r3, r3, #1024	@ 0x400
 8004960:	f5b3 6f80 	cmp.w	r3, #1024	@ 0x400
 8004964:	d11b      	bne.n	800499e <I2C_IsAcknowledgeFailed+0x50>
  {
    /* Clear NACKF Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	681b      	ldr	r3, [r3, #0]
 800496a:	f46f 6280 	mvn.w	r2, #1024	@ 0x400
 800496e:	615a      	str	r2, [r3, #20]

    hi2c->PreviousState       = I2C_STATE_NONE;
 8004970:	687b      	ldr	r3, [r7, #4]
 8004972:	2200      	movs	r2, #0
 8004974:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->State               = HAL_I2C_STATE_READY;
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	2220      	movs	r2, #32
 800497a:	f883 203d 	strb.w	r2, [r3, #61]	@ 0x3d
    hi2c->Mode                = HAL_I2C_MODE_NONE;
 800497e:	687b      	ldr	r3, [r7, #4]
 8004980:	2200      	movs	r2, #0
 8004982:	f883 203e 	strb.w	r2, [r3, #62]	@ 0x3e
    hi2c->ErrorCode           |= HAL_I2C_ERROR_AF;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800498a:	f043 0204 	orr.w	r2, r3, #4
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	641a      	str	r2, [r3, #64]	@ 0x40

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004992:	687b      	ldr	r3, [r7, #4]
 8004994:	2200      	movs	r2, #0
 8004996:	f883 203c 	strb.w	r2, [r3, #60]	@ 0x3c

    return HAL_ERROR;
 800499a:	2301      	movs	r3, #1
 800499c:	e000      	b.n	80049a0 <I2C_IsAcknowledgeFailed+0x52>
  }
  return HAL_OK;
 800499e:	2300      	movs	r3, #0
}
 80049a0:	4618      	mov	r0, r3
 80049a2:	370c      	adds	r7, #12
 80049a4:	46bd      	mov	sp, r7
 80049a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80049aa:	4770      	bx	lr

080049ac <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(const RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80049ac:	b580      	push	{r7, lr}
 80049ae:	b086      	sub	sp, #24
 80049b0:	af00      	add	r7, sp, #0
 80049b2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t pll_config;
  /* Check Null pointer */
  if (RCC_OscInitStruct == NULL)
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	2b00      	cmp	r3, #0
 80049b8:	d101      	bne.n	80049be <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80049ba:	2301      	movs	r3, #1
 80049bc:	e267      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80049be:	687b      	ldr	r3, [r7, #4]
 80049c0:	681b      	ldr	r3, [r3, #0]
 80049c2:	f003 0301 	and.w	r3, r3, #1
 80049c6:	2b00      	cmp	r3, #0
 80049c8:	d075      	beq.n	8004ab6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049ca:	4b88      	ldr	r3, [pc, #544]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 80049cc:	689b      	ldr	r3, [r3, #8]
 80049ce:	f003 030c 	and.w	r3, r3, #12
 80049d2:	2b04      	cmp	r3, #4
 80049d4:	d00c      	beq.n	80049f0 <HAL_RCC_OscConfig+0x44>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049d6:	4b85      	ldr	r3, [pc, #532]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 80049d8:	689b      	ldr	r3, [r3, #8]
 80049da:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) || \
 80049de:	2b08      	cmp	r3, #8
 80049e0:	d112      	bne.n	8004a08 <HAL_RCC_OscConfig+0x5c>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80049e2:	4b82      	ldr	r3, [pc, #520]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80049ea:	f5b3 0f80 	cmp.w	r3, #4194304	@ 0x400000
 80049ee:	d10b      	bne.n	8004a08 <HAL_RCC_OscConfig+0x5c>
    {
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80049f0:	4b7e      	ldr	r3, [pc, #504]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 80049f2:	681b      	ldr	r3, [r3, #0]
 80049f4:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 80049f8:	2b00      	cmp	r3, #0
 80049fa:	d05b      	beq.n	8004ab4 <HAL_RCC_OscConfig+0x108>
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	2b00      	cmp	r3, #0
 8004a02:	d157      	bne.n	8004ab4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004a04:	2301      	movs	r3, #1
 8004a06:	e242      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	685b      	ldr	r3, [r3, #4]
 8004a0c:	f5b3 3f80 	cmp.w	r3, #65536	@ 0x10000
 8004a10:	d106      	bne.n	8004a20 <HAL_RCC_OscConfig+0x74>
 8004a12:	4b76      	ldr	r3, [pc, #472]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a14:	681b      	ldr	r3, [r3, #0]
 8004a16:	4a75      	ldr	r2, [pc, #468]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a18:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a1c:	6013      	str	r3, [r2, #0]
 8004a1e:	e01d      	b.n	8004a5c <HAL_RCC_OscConfig+0xb0>
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	685b      	ldr	r3, [r3, #4]
 8004a24:	f5b3 2fa0 	cmp.w	r3, #327680	@ 0x50000
 8004a28:	d10c      	bne.n	8004a44 <HAL_RCC_OscConfig+0x98>
 8004a2a:	4b70      	ldr	r3, [pc, #448]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a2c:	681b      	ldr	r3, [r3, #0]
 8004a2e:	4a6f      	ldr	r2, [pc, #444]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a30:	f443 2380 	orr.w	r3, r3, #262144	@ 0x40000
 8004a34:	6013      	str	r3, [r2, #0]
 8004a36:	4b6d      	ldr	r3, [pc, #436]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	4a6c      	ldr	r2, [pc, #432]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a3c:	f443 3380 	orr.w	r3, r3, #65536	@ 0x10000
 8004a40:	6013      	str	r3, [r2, #0]
 8004a42:	e00b      	b.n	8004a5c <HAL_RCC_OscConfig+0xb0>
 8004a44:	4b69      	ldr	r3, [pc, #420]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a46:	681b      	ldr	r3, [r3, #0]
 8004a48:	4a68      	ldr	r2, [pc, #416]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a4a:	f423 3380 	bic.w	r3, r3, #65536	@ 0x10000
 8004a4e:	6013      	str	r3, [r2, #0]
 8004a50:	4b66      	ldr	r3, [pc, #408]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	4a65      	ldr	r2, [pc, #404]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a56:	f423 2380 	bic.w	r3, r3, #262144	@ 0x40000
 8004a5a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if ((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	685b      	ldr	r3, [r3, #4]
 8004a60:	2b00      	cmp	r3, #0
 8004a62:	d013      	beq.n	8004a8c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a64:	f7fd ffa6 	bl	80029b4 <HAL_GetTick>
 8004a68:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a6a:	e008      	b.n	8004a7e <HAL_RCC_OscConfig+0xd2>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a6c:	f7fd ffa2 	bl	80029b4 <HAL_GetTick>
 8004a70:	4602      	mov	r2, r0
 8004a72:	693b      	ldr	r3, [r7, #16]
 8004a74:	1ad3      	subs	r3, r2, r3
 8004a76:	2b64      	cmp	r3, #100	@ 0x64
 8004a78:	d901      	bls.n	8004a7e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004a7a:	2303      	movs	r3, #3
 8004a7c:	e207      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004a7e:	4b5b      	ldr	r3, [pc, #364]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004a80:	681b      	ldr	r3, [r3, #0]
 8004a82:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004a86:	2b00      	cmp	r3, #0
 8004a88:	d0f0      	beq.n	8004a6c <HAL_RCC_OscConfig+0xc0>
 8004a8a:	e014      	b.n	8004ab6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004a8c:	f7fd ff92 	bl	80029b4 <HAL_GetTick>
 8004a90:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004a92:	e008      	b.n	8004aa6 <HAL_RCC_OscConfig+0xfa>
        {
          if ((HAL_GetTick() - tickstart) > HSE_TIMEOUT_VALUE)
 8004a94:	f7fd ff8e 	bl	80029b4 <HAL_GetTick>
 8004a98:	4602      	mov	r2, r0
 8004a9a:	693b      	ldr	r3, [r7, #16]
 8004a9c:	1ad3      	subs	r3, r2, r3
 8004a9e:	2b64      	cmp	r3, #100	@ 0x64
 8004aa0:	d901      	bls.n	8004aa6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004aa2:	2303      	movs	r3, #3
 8004aa4:	e1f3      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004aa6:	4b51      	ldr	r3, [pc, #324]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004aae:	2b00      	cmp	r3, #0
 8004ab0:	d1f0      	bne.n	8004a94 <HAL_RCC_OscConfig+0xe8>
 8004ab2:	e000      	b.n	8004ab6 <HAL_RCC_OscConfig+0x10a>
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ab4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	681b      	ldr	r3, [r3, #0]
 8004aba:	f003 0302 	and.w	r3, r3, #2
 8004abe:	2b00      	cmp	r3, #0
 8004ac0:	d063      	beq.n	8004b8a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ac2:	4b4a      	ldr	r3, [pc, #296]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004ac4:	689b      	ldr	r3, [r3, #8]
 8004ac6:	f003 030c 	and.w	r3, r3, #12
 8004aca:	2b00      	cmp	r3, #0
 8004acc:	d00b      	beq.n	8004ae6 <HAL_RCC_OscConfig+0x13a>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ace:	4b47      	ldr	r3, [pc, #284]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004ad0:	689b      	ldr	r3, [r3, #8]
 8004ad2:	f003 030c 	and.w	r3, r3, #12
    if ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) || \
 8004ad6:	2b08      	cmp	r3, #8
 8004ad8:	d11c      	bne.n	8004b14 <HAL_RCC_OscConfig+0x168>
        ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ada:	4b44      	ldr	r3, [pc, #272]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004adc:	685b      	ldr	r3, [r3, #4]
 8004ade:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d116      	bne.n	8004b14 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004ae6:	4b41      	ldr	r3, [pc, #260]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004ae8:	681b      	ldr	r3, [r3, #0]
 8004aea:	f003 0302 	and.w	r3, r3, #2
 8004aee:	2b00      	cmp	r3, #0
 8004af0:	d005      	beq.n	8004afe <HAL_RCC_OscConfig+0x152>
 8004af2:	687b      	ldr	r3, [r7, #4]
 8004af4:	68db      	ldr	r3, [r3, #12]
 8004af6:	2b01      	cmp	r3, #1
 8004af8:	d001      	beq.n	8004afe <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004afa:	2301      	movs	r3, #1
 8004afc:	e1c7      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004afe:	4b3b      	ldr	r3, [pc, #236]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004b00:	681b      	ldr	r3, [r3, #0]
 8004b02:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b06:	687b      	ldr	r3, [r7, #4]
 8004b08:	691b      	ldr	r3, [r3, #16]
 8004b0a:	00db      	lsls	r3, r3, #3
 8004b0c:	4937      	ldr	r1, [pc, #220]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004b0e:	4313      	orrs	r3, r2
 8004b10:	600b      	str	r3, [r1, #0]
      if ((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004b12:	e03a      	b.n	8004b8a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if ((RCC_OscInitStruct->HSIState) != RCC_HSI_OFF)
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	68db      	ldr	r3, [r3, #12]
 8004b18:	2b00      	cmp	r3, #0
 8004b1a:	d020      	beq.n	8004b5e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004b1c:	4b34      	ldr	r3, [pc, #208]	@ (8004bf0 <HAL_RCC_OscConfig+0x244>)
 8004b1e:	2201      	movs	r2, #1
 8004b20:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b22:	f7fd ff47 	bl	80029b4 <HAL_GetTick>
 8004b26:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b28:	e008      	b.n	8004b3c <HAL_RCC_OscConfig+0x190>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b2a:	f7fd ff43 	bl	80029b4 <HAL_GetTick>
 8004b2e:	4602      	mov	r2, r0
 8004b30:	693b      	ldr	r3, [r7, #16]
 8004b32:	1ad3      	subs	r3, r2, r3
 8004b34:	2b02      	cmp	r3, #2
 8004b36:	d901      	bls.n	8004b3c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004b38:	2303      	movs	r3, #3
 8004b3a:	e1a8      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004b3c:	4b2b      	ldr	r3, [pc, #172]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004b3e:	681b      	ldr	r3, [r3, #0]
 8004b40:	f003 0302 	and.w	r3, r3, #2
 8004b44:	2b00      	cmp	r3, #0
 8004b46:	d0f0      	beq.n	8004b2a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004b48:	4b28      	ldr	r3, [pc, #160]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004b4a:	681b      	ldr	r3, [r3, #0]
 8004b4c:	f023 02f8 	bic.w	r2, r3, #248	@ 0xf8
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	691b      	ldr	r3, [r3, #16]
 8004b54:	00db      	lsls	r3, r3, #3
 8004b56:	4925      	ldr	r1, [pc, #148]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004b58:	4313      	orrs	r3, r2
 8004b5a:	600b      	str	r3, [r1, #0]
 8004b5c:	e015      	b.n	8004b8a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004b5e:	4b24      	ldr	r3, [pc, #144]	@ (8004bf0 <HAL_RCC_OscConfig+0x244>)
 8004b60:	2200      	movs	r2, #0
 8004b62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004b64:	f7fd ff26 	bl	80029b4 <HAL_GetTick>
 8004b68:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b6a:	e008      	b.n	8004b7e <HAL_RCC_OscConfig+0x1d2>
        {
          if ((HAL_GetTick() - tickstart) > HSI_TIMEOUT_VALUE)
 8004b6c:	f7fd ff22 	bl	80029b4 <HAL_GetTick>
 8004b70:	4602      	mov	r2, r0
 8004b72:	693b      	ldr	r3, [r7, #16]
 8004b74:	1ad3      	subs	r3, r2, r3
 8004b76:	2b02      	cmp	r3, #2
 8004b78:	d901      	bls.n	8004b7e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004b7a:	2303      	movs	r3, #3
 8004b7c:	e187      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004b7e:	4b1b      	ldr	r3, [pc, #108]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004b80:	681b      	ldr	r3, [r3, #0]
 8004b82:	f003 0302 	and.w	r3, r3, #2
 8004b86:	2b00      	cmp	r3, #0
 8004b88:	d1f0      	bne.n	8004b6c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004b8a:	687b      	ldr	r3, [r7, #4]
 8004b8c:	681b      	ldr	r3, [r3, #0]
 8004b8e:	f003 0308 	and.w	r3, r3, #8
 8004b92:	2b00      	cmp	r3, #0
 8004b94:	d036      	beq.n	8004c04 <HAL_RCC_OscConfig+0x258>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if ((RCC_OscInitStruct->LSIState) != RCC_LSI_OFF)
 8004b96:	687b      	ldr	r3, [r7, #4]
 8004b98:	695b      	ldr	r3, [r3, #20]
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d016      	beq.n	8004bcc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004b9e:	4b15      	ldr	r3, [pc, #84]	@ (8004bf4 <HAL_RCC_OscConfig+0x248>)
 8004ba0:	2201      	movs	r2, #1
 8004ba2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004ba4:	f7fd ff06 	bl	80029b4 <HAL_GetTick>
 8004ba8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004baa:	e008      	b.n	8004bbe <HAL_RCC_OscConfig+0x212>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bac:	f7fd ff02 	bl	80029b4 <HAL_GetTick>
 8004bb0:	4602      	mov	r2, r0
 8004bb2:	693b      	ldr	r3, [r7, #16]
 8004bb4:	1ad3      	subs	r3, r2, r3
 8004bb6:	2b02      	cmp	r3, #2
 8004bb8:	d901      	bls.n	8004bbe <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004bba:	2303      	movs	r3, #3
 8004bbc:	e167      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004bbe:	4b0b      	ldr	r3, [pc, #44]	@ (8004bec <HAL_RCC_OscConfig+0x240>)
 8004bc0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bc2:	f003 0302 	and.w	r3, r3, #2
 8004bc6:	2b00      	cmp	r3, #0
 8004bc8:	d0f0      	beq.n	8004bac <HAL_RCC_OscConfig+0x200>
 8004bca:	e01b      	b.n	8004c04 <HAL_RCC_OscConfig+0x258>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004bcc:	4b09      	ldr	r3, [pc, #36]	@ (8004bf4 <HAL_RCC_OscConfig+0x248>)
 8004bce:	2200      	movs	r2, #0
 8004bd0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004bd2:	f7fd feef 	bl	80029b4 <HAL_GetTick>
 8004bd6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bd8:	e00e      	b.n	8004bf8 <HAL_RCC_OscConfig+0x24c>
      {
        if ((HAL_GetTick() - tickstart) > LSI_TIMEOUT_VALUE)
 8004bda:	f7fd feeb 	bl	80029b4 <HAL_GetTick>
 8004bde:	4602      	mov	r2, r0
 8004be0:	693b      	ldr	r3, [r7, #16]
 8004be2:	1ad3      	subs	r3, r2, r3
 8004be4:	2b02      	cmp	r3, #2
 8004be6:	d907      	bls.n	8004bf8 <HAL_RCC_OscConfig+0x24c>
        {
          return HAL_TIMEOUT;
 8004be8:	2303      	movs	r3, #3
 8004bea:	e150      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
 8004bec:	40023800 	.word	0x40023800
 8004bf0:	42470000 	.word	0x42470000
 8004bf4:	42470e80 	.word	0x42470e80
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004bf8:	4b88      	ldr	r3, [pc, #544]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004bfa:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8004bfc:	f003 0302 	and.w	r3, r3, #2
 8004c00:	2b00      	cmp	r3, #0
 8004c02:	d1ea      	bne.n	8004bda <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if (((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	681b      	ldr	r3, [r3, #0]
 8004c08:	f003 0304 	and.w	r3, r3, #4
 8004c0c:	2b00      	cmp	r3, #0
 8004c0e:	f000 8097 	beq.w	8004d40 <HAL_RCC_OscConfig+0x394>
  {
    FlagStatus       pwrclkchanged = RESET;
 8004c12:	2300      	movs	r3, #0
 8004c14:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if (__HAL_RCC_PWR_IS_CLK_DISABLED())
 8004c16:	4b81      	ldr	r3, [pc, #516]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004c18:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c1a:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c1e:	2b00      	cmp	r3, #0
 8004c20:	d10f      	bne.n	8004c42 <HAL_RCC_OscConfig+0x296>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8004c22:	2300      	movs	r3, #0
 8004c24:	60bb      	str	r3, [r7, #8]
 8004c26:	4b7d      	ldr	r3, [pc, #500]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004c28:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c2a:	4a7c      	ldr	r2, [pc, #496]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004c2c:	f043 5380 	orr.w	r3, r3, #268435456	@ 0x10000000
 8004c30:	6413      	str	r3, [r2, #64]	@ 0x40
 8004c32:	4b7a      	ldr	r3, [pc, #488]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004c34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004c36:	f003 5380 	and.w	r3, r3, #268435456	@ 0x10000000
 8004c3a:	60bb      	str	r3, [r7, #8]
 8004c3c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8004c3e:	2301      	movs	r3, #1
 8004c40:	75fb      	strb	r3, [r7, #23]
    }

    if (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c42:	4b77      	ldr	r3, [pc, #476]	@ (8004e20 <HAL_RCC_OscConfig+0x474>)
 8004c44:	681b      	ldr	r3, [r3, #0]
 8004c46:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c4a:	2b00      	cmp	r3, #0
 8004c4c:	d118      	bne.n	8004c80 <HAL_RCC_OscConfig+0x2d4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8004c4e:	4b74      	ldr	r3, [pc, #464]	@ (8004e20 <HAL_RCC_OscConfig+0x474>)
 8004c50:	681b      	ldr	r3, [r3, #0]
 8004c52:	4a73      	ldr	r2, [pc, #460]	@ (8004e20 <HAL_RCC_OscConfig+0x474>)
 8004c54:	f443 7380 	orr.w	r3, r3, #256	@ 0x100
 8004c58:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8004c5a:	f7fd feab 	bl	80029b4 <HAL_GetTick>
 8004c5e:	6138      	str	r0, [r7, #16]

      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c60:	e008      	b.n	8004c74 <HAL_RCC_OscConfig+0x2c8>
      {
        if ((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8004c62:	f7fd fea7 	bl	80029b4 <HAL_GetTick>
 8004c66:	4602      	mov	r2, r0
 8004c68:	693b      	ldr	r3, [r7, #16]
 8004c6a:	1ad3      	subs	r3, r2, r3
 8004c6c:	2b02      	cmp	r3, #2
 8004c6e:	d901      	bls.n	8004c74 <HAL_RCC_OscConfig+0x2c8>
        {
          return HAL_TIMEOUT;
 8004c70:	2303      	movs	r3, #3
 8004c72:	e10c      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
      while (HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8004c74:	4b6a      	ldr	r3, [pc, #424]	@ (8004e20 <HAL_RCC_OscConfig+0x474>)
 8004c76:	681b      	ldr	r3, [r3, #0]
 8004c78:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 8004c7c:	2b00      	cmp	r3, #0
 8004c7e:	d0f0      	beq.n	8004c62 <HAL_RCC_OscConfig+0x2b6>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	689b      	ldr	r3, [r3, #8]
 8004c84:	2b01      	cmp	r3, #1
 8004c86:	d106      	bne.n	8004c96 <HAL_RCC_OscConfig+0x2ea>
 8004c88:	4b64      	ldr	r3, [pc, #400]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004c8a:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004c8c:	4a63      	ldr	r2, [pc, #396]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004c8e:	f043 0301 	orr.w	r3, r3, #1
 8004c92:	6713      	str	r3, [r2, #112]	@ 0x70
 8004c94:	e01c      	b.n	8004cd0 <HAL_RCC_OscConfig+0x324>
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	689b      	ldr	r3, [r3, #8]
 8004c9a:	2b05      	cmp	r3, #5
 8004c9c:	d10c      	bne.n	8004cb8 <HAL_RCC_OscConfig+0x30c>
 8004c9e:	4b5f      	ldr	r3, [pc, #380]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004ca0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004ca2:	4a5e      	ldr	r2, [pc, #376]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004ca4:	f043 0304 	orr.w	r3, r3, #4
 8004ca8:	6713      	str	r3, [r2, #112]	@ 0x70
 8004caa:	4b5c      	ldr	r3, [pc, #368]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004cac:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cae:	4a5b      	ldr	r2, [pc, #364]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004cb0:	f043 0301 	orr.w	r3, r3, #1
 8004cb4:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cb6:	e00b      	b.n	8004cd0 <HAL_RCC_OscConfig+0x324>
 8004cb8:	4b58      	ldr	r3, [pc, #352]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004cba:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cbc:	4a57      	ldr	r2, [pc, #348]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004cbe:	f023 0301 	bic.w	r3, r3, #1
 8004cc2:	6713      	str	r3, [r2, #112]	@ 0x70
 8004cc4:	4b55      	ldr	r3, [pc, #340]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004cc6:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cc8:	4a54      	ldr	r2, [pc, #336]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004cca:	f023 0304 	bic.w	r3, r3, #4
 8004cce:	6713      	str	r3, [r2, #112]	@ 0x70
    /* Check the LSE State */
    if ((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8004cd0:	687b      	ldr	r3, [r7, #4]
 8004cd2:	689b      	ldr	r3, [r3, #8]
 8004cd4:	2b00      	cmp	r3, #0
 8004cd6:	d015      	beq.n	8004d04 <HAL_RCC_OscConfig+0x358>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004cd8:	f7fd fe6c 	bl	80029b4 <HAL_GetTick>
 8004cdc:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cde:	e00a      	b.n	8004cf6 <HAL_RCC_OscConfig+0x34a>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004ce0:	f7fd fe68 	bl	80029b4 <HAL_GetTick>
 8004ce4:	4602      	mov	r2, r0
 8004ce6:	693b      	ldr	r3, [r7, #16]
 8004ce8:	1ad3      	subs	r3, r2, r3
 8004cea:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004cee:	4293      	cmp	r3, r2
 8004cf0:	d901      	bls.n	8004cf6 <HAL_RCC_OscConfig+0x34a>
        {
          return HAL_TIMEOUT;
 8004cf2:	2303      	movs	r3, #3
 8004cf4:	e0cb      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8004cf6:	4b49      	ldr	r3, [pc, #292]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004cf8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004cfa:	f003 0302 	and.w	r3, r3, #2
 8004cfe:	2b00      	cmp	r3, #0
 8004d00:	d0ee      	beq.n	8004ce0 <HAL_RCC_OscConfig+0x334>
 8004d02:	e014      	b.n	8004d2e <HAL_RCC_OscConfig+0x382>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004d04:	f7fd fe56 	bl	80029b4 <HAL_GetTick>
 8004d08:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d0a:	e00a      	b.n	8004d22 <HAL_RCC_OscConfig+0x376>
      {
        if ((HAL_GetTick() - tickstart) > RCC_LSE_TIMEOUT_VALUE)
 8004d0c:	f7fd fe52 	bl	80029b4 <HAL_GetTick>
 8004d10:	4602      	mov	r2, r0
 8004d12:	693b      	ldr	r3, [r7, #16]
 8004d14:	1ad3      	subs	r3, r2, r3
 8004d16:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004d1a:	4293      	cmp	r3, r2
 8004d1c:	d901      	bls.n	8004d22 <HAL_RCC_OscConfig+0x376>
        {
          return HAL_TIMEOUT;
 8004d1e:	2303      	movs	r3, #3
 8004d20:	e0b5      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
      while (__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8004d22:	4b3e      	ldr	r3, [pc, #248]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004d24:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 8004d26:	f003 0302 	and.w	r3, r3, #2
 8004d2a:	2b00      	cmp	r3, #0
 8004d2c:	d1ee      	bne.n	8004d0c <HAL_RCC_OscConfig+0x360>
        }
      }
    }

    /* Restore clock configuration if changed */
    if (pwrclkchanged == SET)
 8004d2e:	7dfb      	ldrb	r3, [r7, #23]
 8004d30:	2b01      	cmp	r3, #1
 8004d32:	d105      	bne.n	8004d40 <HAL_RCC_OscConfig+0x394>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8004d34:	4b39      	ldr	r3, [pc, #228]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004d36:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8004d38:	4a38      	ldr	r2, [pc, #224]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004d3a:	f023 5380 	bic.w	r3, r3, #268435456	@ 0x10000000
 8004d3e:	6413      	str	r3, [r2, #64]	@ 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	2b00      	cmp	r3, #0
 8004d46:	f000 80a1 	beq.w	8004e8c <HAL_RCC_OscConfig+0x4e0>
  {
    /* Check if the PLL is used as system clock or not */
    if (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8004d4a:	4b34      	ldr	r3, [pc, #208]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004d4c:	689b      	ldr	r3, [r3, #8]
 8004d4e:	f003 030c 	and.w	r3, r3, #12
 8004d52:	2b08      	cmp	r3, #8
 8004d54:	d05c      	beq.n	8004e10 <HAL_RCC_OscConfig+0x464>
    {
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	699b      	ldr	r3, [r3, #24]
 8004d5a:	2b02      	cmp	r3, #2
 8004d5c:	d141      	bne.n	8004de2 <HAL_RCC_OscConfig+0x436>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004d5e:	4b31      	ldr	r3, [pc, #196]	@ (8004e24 <HAL_RCC_OscConfig+0x478>)
 8004d60:	2200      	movs	r2, #0
 8004d62:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004d64:	f7fd fe26 	bl	80029b4 <HAL_GetTick>
 8004d68:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d6a:	e008      	b.n	8004d7e <HAL_RCC_OscConfig+0x3d2>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004d6c:	f7fd fe22 	bl	80029b4 <HAL_GetTick>
 8004d70:	4602      	mov	r2, r0
 8004d72:	693b      	ldr	r3, [r7, #16]
 8004d74:	1ad3      	subs	r3, r2, r3
 8004d76:	2b02      	cmp	r3, #2
 8004d78:	d901      	bls.n	8004d7e <HAL_RCC_OscConfig+0x3d2>
          {
            return HAL_TIMEOUT;
 8004d7a:	2303      	movs	r3, #3
 8004d7c:	e087      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004d7e:	4b27      	ldr	r3, [pc, #156]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004d86:	2b00      	cmp	r3, #0
 8004d88:	d1f0      	bne.n	8004d6c <HAL_RCC_OscConfig+0x3c0>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8004d8a:	687b      	ldr	r3, [r7, #4]
 8004d8c:	69da      	ldr	r2, [r3, #28]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	6a1b      	ldr	r3, [r3, #32]
 8004d92:	431a      	orrs	r2, r3
 8004d94:	687b      	ldr	r3, [r7, #4]
 8004d96:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8004d98:	019b      	lsls	r3, r3, #6
 8004d9a:	431a      	orrs	r2, r3
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004da0:	085b      	lsrs	r3, r3, #1
 8004da2:	3b01      	subs	r3, #1
 8004da4:	041b      	lsls	r3, r3, #16
 8004da6:	431a      	orrs	r2, r3
 8004da8:	687b      	ldr	r3, [r7, #4]
 8004daa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004dac:	061b      	lsls	r3, r3, #24
 8004dae:	491b      	ldr	r1, [pc, #108]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004db0:	4313      	orrs	r3, r2
 8004db2:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8004db4:	4b1b      	ldr	r3, [pc, #108]	@ (8004e24 <HAL_RCC_OscConfig+0x478>)
 8004db6:	2201      	movs	r2, #1
 8004db8:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004dba:	f7fd fdfb 	bl	80029b4 <HAL_GetTick>
 8004dbe:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dc0:	e008      	b.n	8004dd4 <HAL_RCC_OscConfig+0x428>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004dc2:	f7fd fdf7 	bl	80029b4 <HAL_GetTick>
 8004dc6:	4602      	mov	r2, r0
 8004dc8:	693b      	ldr	r3, [r7, #16]
 8004dca:	1ad3      	subs	r3, r2, r3
 8004dcc:	2b02      	cmp	r3, #2
 8004dce:	d901      	bls.n	8004dd4 <HAL_RCC_OscConfig+0x428>
          {
            return HAL_TIMEOUT;
 8004dd0:	2303      	movs	r3, #3
 8004dd2:	e05c      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004dd4:	4b11      	ldr	r3, [pc, #68]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004dd6:	681b      	ldr	r3, [r3, #0]
 8004dd8:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004ddc:	2b00      	cmp	r3, #0
 8004dde:	d0f0      	beq.n	8004dc2 <HAL_RCC_OscConfig+0x416>
 8004de0:	e054      	b.n	8004e8c <HAL_RCC_OscConfig+0x4e0>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8004de2:	4b10      	ldr	r3, [pc, #64]	@ (8004e24 <HAL_RCC_OscConfig+0x478>)
 8004de4:	2200      	movs	r2, #0
 8004de6:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004de8:	f7fd fde4 	bl	80029b4 <HAL_GetTick>
 8004dec:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is disabled */
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004dee:	e008      	b.n	8004e02 <HAL_RCC_OscConfig+0x456>
        {
          if ((HAL_GetTick() - tickstart) > PLL_TIMEOUT_VALUE)
 8004df0:	f7fd fde0 	bl	80029b4 <HAL_GetTick>
 8004df4:	4602      	mov	r2, r0
 8004df6:	693b      	ldr	r3, [r7, #16]
 8004df8:	1ad3      	subs	r3, r2, r3
 8004dfa:	2b02      	cmp	r3, #2
 8004dfc:	d901      	bls.n	8004e02 <HAL_RCC_OscConfig+0x456>
          {
            return HAL_TIMEOUT;
 8004dfe:	2303      	movs	r3, #3
 8004e00:	e045      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
        while (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8004e02:	4b06      	ldr	r3, [pc, #24]	@ (8004e1c <HAL_RCC_OscConfig+0x470>)
 8004e04:	681b      	ldr	r3, [r3, #0]
 8004e06:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d1f0      	bne.n	8004df0 <HAL_RCC_OscConfig+0x444>
 8004e0e:	e03d      	b.n	8004e8c <HAL_RCC_OscConfig+0x4e0>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if ((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8004e10:	687b      	ldr	r3, [r7, #4]
 8004e12:	699b      	ldr	r3, [r3, #24]
 8004e14:	2b01      	cmp	r3, #1
 8004e16:	d107      	bne.n	8004e28 <HAL_RCC_OscConfig+0x47c>
      {
        return HAL_ERROR;
 8004e18:	2301      	movs	r3, #1
 8004e1a:	e038      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
 8004e1c:	40023800 	.word	0x40023800
 8004e20:	40007000 	.word	0x40007000
 8004e24:	42470060 	.word	0x42470060
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8004e28:	4b1b      	ldr	r3, [pc, #108]	@ (8004e98 <HAL_RCC_OscConfig+0x4ec>)
 8004e2a:	685b      	ldr	r3, [r3, #4]
 8004e2c:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	699b      	ldr	r3, [r3, #24]
 8004e32:	2b01      	cmp	r3, #1
 8004e34:	d028      	beq.n	8004e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e36:	68fb      	ldr	r3, [r7, #12]
 8004e38:	f403 0280 	and.w	r2, r3, #4194304	@ 0x400000
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8004e40:	429a      	cmp	r2, r3
 8004e42:	d121      	bne.n	8004e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e44:	68fb      	ldr	r3, [r7, #12]
 8004e46:	f003 023f 	and.w	r2, r3, #63	@ 0x3f
 8004e4a:	687b      	ldr	r3, [r7, #4]
 8004e4c:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8004e4e:	429a      	cmp	r2, r3
 8004e50:	d11a      	bne.n	8004e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e52:	68fa      	ldr	r2, [r7, #12]
 8004e54:	f647 73c0 	movw	r3, #32704	@ 0x7fc0
 8004e58:	4013      	ands	r3, r2
 8004e5a:	687a      	ldr	r2, [r7, #4]
 8004e5c:	6a52      	ldr	r2, [r2, #36]	@ 0x24
 8004e5e:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8004e60:	4293      	cmp	r3, r2
 8004e62:	d111      	bne.n	8004e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e64:	68fb      	ldr	r3, [r7, #12]
 8004e66:	f403 3240 	and.w	r2, r3, #196608	@ 0x30000
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8004e6e:	085b      	lsrs	r3, r3, #1
 8004e70:	3b01      	subs	r3, #1
 8004e72:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8004e74:	429a      	cmp	r2, r3
 8004e76:	d107      	bne.n	8004e88 <HAL_RCC_OscConfig+0x4dc>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8004e78:	68fb      	ldr	r3, [r7, #12]
 8004e7a:	f003 6270 	and.w	r2, r3, #251658240	@ 0xf000000
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8004e82:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8004e84:	429a      	cmp	r2, r3
 8004e86:	d001      	beq.n	8004e8c <HAL_RCC_OscConfig+0x4e0>
#endif /* RCC_PLLCFGR_PLLR */
        {
          return HAL_ERROR;
 8004e88:	2301      	movs	r3, #1
 8004e8a:	e000      	b.n	8004e8e <HAL_RCC_OscConfig+0x4e2>
        }
      }
    }
  }
  return HAL_OK;
 8004e8c:	2300      	movs	r3, #0
}
 8004e8e:	4618      	mov	r0, r3
 8004e90:	3718      	adds	r7, #24
 8004e92:	46bd      	mov	sp, r7
 8004e94:	bd80      	pop	{r7, pc}
 8004e96:	bf00      	nop
 8004e98:	40023800 	.word	0x40023800

08004e9c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(const RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8004e9c:	b580      	push	{r7, lr}
 8004e9e:	b084      	sub	sp, #16
 8004ea0:	af00      	add	r7, sp, #0
 8004ea2:	6078      	str	r0, [r7, #4]
 8004ea4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if (RCC_ClkInitStruct == NULL)
 8004ea6:	687b      	ldr	r3, [r7, #4]
 8004ea8:	2b00      	cmp	r3, #0
 8004eaa:	d101      	bne.n	8004eb0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8004eac:	2301      	movs	r3, #1
 8004eae:	e0cc      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if (FLatency > __HAL_FLASH_GET_LATENCY())
 8004eb0:	4b68      	ldr	r3, [pc, #416]	@ (8005054 <HAL_RCC_ClockConfig+0x1b8>)
 8004eb2:	681b      	ldr	r3, [r3, #0]
 8004eb4:	f003 0307 	and.w	r3, r3, #7
 8004eb8:	683a      	ldr	r2, [r7, #0]
 8004eba:	429a      	cmp	r2, r3
 8004ebc:	d90c      	bls.n	8004ed8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004ebe:	4b65      	ldr	r3, [pc, #404]	@ (8005054 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec0:	683a      	ldr	r2, [r7, #0]
 8004ec2:	b2d2      	uxtb	r2, r2
 8004ec4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004ec6:	4b63      	ldr	r3, [pc, #396]	@ (8005054 <HAL_RCC_ClockConfig+0x1b8>)
 8004ec8:	681b      	ldr	r3, [r3, #0]
 8004eca:	f003 0307 	and.w	r3, r3, #7
 8004ece:	683a      	ldr	r2, [r7, #0]
 8004ed0:	429a      	cmp	r2, r3
 8004ed2:	d001      	beq.n	8004ed8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8004ed4:	2301      	movs	r3, #1
 8004ed6:	e0b8      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8004ed8:	687b      	ldr	r3, [r7, #4]
 8004eda:	681b      	ldr	r3, [r3, #0]
 8004edc:	f003 0302 	and.w	r3, r3, #2
 8004ee0:	2b00      	cmp	r3, #0
 8004ee2:	d020      	beq.n	8004f26 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004ee4:	687b      	ldr	r3, [r7, #4]
 8004ee6:	681b      	ldr	r3, [r3, #0]
 8004ee8:	f003 0304 	and.w	r3, r3, #4
 8004eec:	2b00      	cmp	r3, #0
 8004eee:	d005      	beq.n	8004efc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8004ef0:	4b59      	ldr	r3, [pc, #356]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef2:	689b      	ldr	r3, [r3, #8]
 8004ef4:	4a58      	ldr	r2, [pc, #352]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004ef6:	f443 53e0 	orr.w	r3, r3, #7168	@ 0x1c00
 8004efa:	6093      	str	r3, [r2, #8]
    }

    if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8004efc:	687b      	ldr	r3, [r7, #4]
 8004efe:	681b      	ldr	r3, [r3, #0]
 8004f00:	f003 0308 	and.w	r3, r3, #8
 8004f04:	2b00      	cmp	r3, #0
 8004f06:	d005      	beq.n	8004f14 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8004f08:	4b53      	ldr	r3, [pc, #332]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0a:	689b      	ldr	r3, [r3, #8]
 8004f0c:	4a52      	ldr	r2, [pc, #328]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f0e:	f443 4360 	orr.w	r3, r3, #57344	@ 0xe000
 8004f12:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8004f14:	4b50      	ldr	r3, [pc, #320]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f16:	689b      	ldr	r3, [r3, #8]
 8004f18:	f023 02f0 	bic.w	r2, r3, #240	@ 0xf0
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	689b      	ldr	r3, [r3, #8]
 8004f20:	494d      	ldr	r1, [pc, #308]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f22:	4313      	orrs	r3, r2
 8004f24:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8004f26:	687b      	ldr	r3, [r7, #4]
 8004f28:	681b      	ldr	r3, [r3, #0]
 8004f2a:	f003 0301 	and.w	r3, r3, #1
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d044      	beq.n	8004fbc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	685b      	ldr	r3, [r3, #4]
 8004f36:	2b01      	cmp	r3, #1
 8004f38:	d107      	bne.n	8004f4a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004f3a:	4b47      	ldr	r3, [pc, #284]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f3c:	681b      	ldr	r3, [r3, #0]
 8004f3e:	f403 3300 	and.w	r3, r3, #131072	@ 0x20000
 8004f42:	2b00      	cmp	r3, #0
 8004f44:	d119      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f46:	2301      	movs	r3, #1
 8004f48:	e07f      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f4a:	687b      	ldr	r3, [r7, #4]
 8004f4c:	685b      	ldr	r3, [r3, #4]
 8004f4e:	2b02      	cmp	r3, #2
 8004f50:	d003      	beq.n	8004f5a <HAL_RCC_ClockConfig+0xbe>
             (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8004f52:	687b      	ldr	r3, [r7, #4]
 8004f54:	685b      	ldr	r3, [r3, #4]
    else if ((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8004f56:	2b03      	cmp	r3, #3
 8004f58:	d107      	bne.n	8004f6a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8004f5a:	4b3f      	ldr	r3, [pc, #252]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f5c:	681b      	ldr	r3, [r3, #0]
 8004f5e:	f003 7300 	and.w	r3, r3, #33554432	@ 0x2000000
 8004f62:	2b00      	cmp	r3, #0
 8004f64:	d109      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f66:	2301      	movs	r3, #1
 8004f68:	e06f      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f6a:	4b3b      	ldr	r3, [pc, #236]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f6c:	681b      	ldr	r3, [r3, #0]
 8004f6e:	f003 0302 	and.w	r3, r3, #2
 8004f72:	2b00      	cmp	r3, #0
 8004f74:	d101      	bne.n	8004f7a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8004f76:	2301      	movs	r3, #1
 8004f78:	e067      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8004f7a:	4b37      	ldr	r3, [pc, #220]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f7c:	689b      	ldr	r3, [r3, #8]
 8004f7e:	f023 0203 	bic.w	r2, r3, #3
 8004f82:	687b      	ldr	r3, [r7, #4]
 8004f84:	685b      	ldr	r3, [r3, #4]
 8004f86:	4934      	ldr	r1, [pc, #208]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004f88:	4313      	orrs	r3, r2
 8004f8a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8004f8c:	f7fd fd12 	bl	80029b4 <HAL_GetTick>
 8004f90:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004f92:	e00a      	b.n	8004faa <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8004f94:	f7fd fd0e 	bl	80029b4 <HAL_GetTick>
 8004f98:	4602      	mov	r2, r0
 8004f9a:	68fb      	ldr	r3, [r7, #12]
 8004f9c:	1ad3      	subs	r3, r2, r3
 8004f9e:	f241 3288 	movw	r2, #5000	@ 0x1388
 8004fa2:	4293      	cmp	r3, r2
 8004fa4:	d901      	bls.n	8004faa <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8004fa6:	2303      	movs	r3, #3
 8004fa8:	e04f      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8004faa:	4b2b      	ldr	r3, [pc, #172]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004fac:	689b      	ldr	r3, [r3, #8]
 8004fae:	f003 020c 	and.w	r2, r3, #12
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	685b      	ldr	r3, [r3, #4]
 8004fb6:	009b      	lsls	r3, r3, #2
 8004fb8:	429a      	cmp	r2, r3
 8004fba:	d1eb      	bne.n	8004f94 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if (FLatency < __HAL_FLASH_GET_LATENCY())
 8004fbc:	4b25      	ldr	r3, [pc, #148]	@ (8005054 <HAL_RCC_ClockConfig+0x1b8>)
 8004fbe:	681b      	ldr	r3, [r3, #0]
 8004fc0:	f003 0307 	and.w	r3, r3, #7
 8004fc4:	683a      	ldr	r2, [r7, #0]
 8004fc6:	429a      	cmp	r2, r3
 8004fc8:	d20c      	bcs.n	8004fe4 <HAL_RCC_ClockConfig+0x148>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8004fca:	4b22      	ldr	r3, [pc, #136]	@ (8005054 <HAL_RCC_ClockConfig+0x1b8>)
 8004fcc:	683a      	ldr	r2, [r7, #0]
 8004fce:	b2d2      	uxtb	r2, r2
 8004fd0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if (__HAL_FLASH_GET_LATENCY() != FLatency)
 8004fd2:	4b20      	ldr	r3, [pc, #128]	@ (8005054 <HAL_RCC_ClockConfig+0x1b8>)
 8004fd4:	681b      	ldr	r3, [r3, #0]
 8004fd6:	f003 0307 	and.w	r3, r3, #7
 8004fda:	683a      	ldr	r2, [r7, #0]
 8004fdc:	429a      	cmp	r2, r3
 8004fde:	d001      	beq.n	8004fe4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8004fe0:	2301      	movs	r3, #1
 8004fe2:	e032      	b.n	800504a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	f003 0304 	and.w	r3, r3, #4
 8004fec:	2b00      	cmp	r3, #0
 8004fee:	d008      	beq.n	8005002 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8004ff0:	4b19      	ldr	r3, [pc, #100]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004ff2:	689b      	ldr	r3, [r3, #8]
 8004ff4:	f423 52e0 	bic.w	r2, r3, #7168	@ 0x1c00
 8004ff8:	687b      	ldr	r3, [r7, #4]
 8004ffa:	68db      	ldr	r3, [r3, #12]
 8004ffc:	4916      	ldr	r1, [pc, #88]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8004ffe:	4313      	orrs	r3, r2
 8005000:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if (((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005002:	687b      	ldr	r3, [r7, #4]
 8005004:	681b      	ldr	r3, [r3, #0]
 8005006:	f003 0308 	and.w	r3, r3, #8
 800500a:	2b00      	cmp	r3, #0
 800500c:	d009      	beq.n	8005022 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800500e:	4b12      	ldr	r3, [pc, #72]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 8005010:	689b      	ldr	r3, [r3, #8]
 8005012:	f423 4260 	bic.w	r2, r3, #57344	@ 0xe000
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	691b      	ldr	r3, [r3, #16]
 800501a:	00db      	lsls	r3, r3, #3
 800501c:	490e      	ldr	r1, [pc, #56]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 800501e:	4313      	orrs	r3, r2
 8005020:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos];
 8005022:	f000 f821 	bl	8005068 <HAL_RCC_GetSysClockFreq>
 8005026:	4602      	mov	r2, r0
 8005028:	4b0b      	ldr	r3, [pc, #44]	@ (8005058 <HAL_RCC_ClockConfig+0x1bc>)
 800502a:	689b      	ldr	r3, [r3, #8]
 800502c:	091b      	lsrs	r3, r3, #4
 800502e:	f003 030f 	and.w	r3, r3, #15
 8005032:	490a      	ldr	r1, [pc, #40]	@ (800505c <HAL_RCC_ClockConfig+0x1c0>)
 8005034:	5ccb      	ldrb	r3, [r1, r3]
 8005036:	fa22 f303 	lsr.w	r3, r2, r3
 800503a:	4a09      	ldr	r2, [pc, #36]	@ (8005060 <HAL_RCC_ClockConfig+0x1c4>)
 800503c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick(uwTickPrio);
 800503e:	4b09      	ldr	r3, [pc, #36]	@ (8005064 <HAL_RCC_ClockConfig+0x1c8>)
 8005040:	681b      	ldr	r3, [r3, #0]
 8005042:	4618      	mov	r0, r3
 8005044:	f7fd fc72 	bl	800292c <HAL_InitTick>

  return HAL_OK;
 8005048:	2300      	movs	r3, #0
}
 800504a:	4618      	mov	r0, r3
 800504c:	3710      	adds	r7, #16
 800504e:	46bd      	mov	sp, r7
 8005050:	bd80      	pop	{r7, pc}
 8005052:	bf00      	nop
 8005054:	40023c00 	.word	0x40023c00
 8005058:	40023800 	.word	0x40023800
 800505c:	080091bc 	.word	0x080091bc
 8005060:	20000000 	.word	0x20000000
 8005064:	20000004 	.word	0x20000004

08005068 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005068:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 800506c:	b094      	sub	sp, #80	@ 0x50
 800506e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U;
 8005070:	2300      	movs	r3, #0
 8005072:	647b      	str	r3, [r7, #68]	@ 0x44
  uint32_t pllvco = 0U;
 8005074:	2300      	movs	r3, #0
 8005076:	64fb      	str	r3, [r7, #76]	@ 0x4c
  uint32_t pllp = 0U;
 8005078:	2300      	movs	r3, #0
 800507a:	643b      	str	r3, [r7, #64]	@ 0x40
  uint32_t sysclockfreq = 0U;
 800507c:	2300      	movs	r3, #0
 800507e:	64bb      	str	r3, [r7, #72]	@ 0x48

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005080:	4b79      	ldr	r3, [pc, #484]	@ (8005268 <HAL_RCC_GetSysClockFreq+0x200>)
 8005082:	689b      	ldr	r3, [r3, #8]
 8005084:	f003 030c 	and.w	r3, r3, #12
 8005088:	2b08      	cmp	r3, #8
 800508a:	d00d      	beq.n	80050a8 <HAL_RCC_GetSysClockFreq+0x40>
 800508c:	2b08      	cmp	r3, #8
 800508e:	f200 80e1 	bhi.w	8005254 <HAL_RCC_GetSysClockFreq+0x1ec>
 8005092:	2b00      	cmp	r3, #0
 8005094:	d002      	beq.n	800509c <HAL_RCC_GetSysClockFreq+0x34>
 8005096:	2b04      	cmp	r3, #4
 8005098:	d003      	beq.n	80050a2 <HAL_RCC_GetSysClockFreq+0x3a>
 800509a:	e0db      	b.n	8005254 <HAL_RCC_GetSysClockFreq+0x1ec>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 800509c:	4b73      	ldr	r3, [pc, #460]	@ (800526c <HAL_RCC_GetSysClockFreq+0x204>)
 800509e:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050a0:	e0db      	b.n	800525a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80050a2:	4b73      	ldr	r3, [pc, #460]	@ (8005270 <HAL_RCC_GetSysClockFreq+0x208>)
 80050a4:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 80050a6:	e0d8      	b.n	800525a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80050a8:	4b6f      	ldr	r3, [pc, #444]	@ (8005268 <HAL_RCC_GetSysClockFreq+0x200>)
 80050aa:	685b      	ldr	r3, [r3, #4]
 80050ac:	f003 033f 	and.w	r3, r3, #63	@ 0x3f
 80050b0:	647b      	str	r3, [r7, #68]	@ 0x44
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80050b2:	4b6d      	ldr	r3, [pc, #436]	@ (8005268 <HAL_RCC_GetSysClockFreq+0x200>)
 80050b4:	685b      	ldr	r3, [r3, #4]
 80050b6:	f403 0380 	and.w	r3, r3, #4194304	@ 0x400000
 80050ba:	2b00      	cmp	r3, #0
 80050bc:	d063      	beq.n	8005186 <HAL_RCC_GetSysClockFreq+0x11e>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSE_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80050be:	4b6a      	ldr	r3, [pc, #424]	@ (8005268 <HAL_RCC_GetSysClockFreq+0x200>)
 80050c0:	685b      	ldr	r3, [r3, #4]
 80050c2:	099b      	lsrs	r3, r3, #6
 80050c4:	2200      	movs	r2, #0
 80050c6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80050c8:	63fa      	str	r2, [r7, #60]	@ 0x3c
 80050ca:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80050cc:	f3c3 0308 	ubfx	r3, r3, #0, #9
 80050d0:	633b      	str	r3, [r7, #48]	@ 0x30
 80050d2:	2300      	movs	r3, #0
 80050d4:	637b      	str	r3, [r7, #52]	@ 0x34
 80050d6:	e9d7 450c 	ldrd	r4, r5, [r7, #48]	@ 0x30
 80050da:	4622      	mov	r2, r4
 80050dc:	462b      	mov	r3, r5
 80050de:	f04f 0000 	mov.w	r0, #0
 80050e2:	f04f 0100 	mov.w	r1, #0
 80050e6:	0159      	lsls	r1, r3, #5
 80050e8:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80050ec:	0150      	lsls	r0, r2, #5
 80050ee:	4602      	mov	r2, r0
 80050f0:	460b      	mov	r3, r1
 80050f2:	4621      	mov	r1, r4
 80050f4:	1a51      	subs	r1, r2, r1
 80050f6:	6139      	str	r1, [r7, #16]
 80050f8:	4629      	mov	r1, r5
 80050fa:	eb63 0301 	sbc.w	r3, r3, r1
 80050fe:	617b      	str	r3, [r7, #20]
 8005100:	f04f 0200 	mov.w	r2, #0
 8005104:	f04f 0300 	mov.w	r3, #0
 8005108:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 800510c:	4659      	mov	r1, fp
 800510e:	018b      	lsls	r3, r1, #6
 8005110:	4651      	mov	r1, sl
 8005112:	ea43 6391 	orr.w	r3, r3, r1, lsr #26
 8005116:	4651      	mov	r1, sl
 8005118:	018a      	lsls	r2, r1, #6
 800511a:	4651      	mov	r1, sl
 800511c:	ebb2 0801 	subs.w	r8, r2, r1
 8005120:	4659      	mov	r1, fp
 8005122:	eb63 0901 	sbc.w	r9, r3, r1
 8005126:	f04f 0200 	mov.w	r2, #0
 800512a:	f04f 0300 	mov.w	r3, #0
 800512e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005132:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005136:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 800513a:	4690      	mov	r8, r2
 800513c:	4699      	mov	r9, r3
 800513e:	4623      	mov	r3, r4
 8005140:	eb18 0303 	adds.w	r3, r8, r3
 8005144:	60bb      	str	r3, [r7, #8]
 8005146:	462b      	mov	r3, r5
 8005148:	eb49 0303 	adc.w	r3, r9, r3
 800514c:	60fb      	str	r3, [r7, #12]
 800514e:	f04f 0200 	mov.w	r2, #0
 8005152:	f04f 0300 	mov.w	r3, #0
 8005156:	e9d7 4502 	ldrd	r4, r5, [r7, #8]
 800515a:	4629      	mov	r1, r5
 800515c:	024b      	lsls	r3, r1, #9
 800515e:	4621      	mov	r1, r4
 8005160:	ea43 53d1 	orr.w	r3, r3, r1, lsr #23
 8005164:	4621      	mov	r1, r4
 8005166:	024a      	lsls	r2, r1, #9
 8005168:	4610      	mov	r0, r2
 800516a:	4619      	mov	r1, r3
 800516c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 800516e:	2200      	movs	r2, #0
 8005170:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005172:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005174:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005178:	f7fb fd6e 	bl	8000c58 <__aeabi_uldivmod>
 800517c:	4602      	mov	r2, r0
 800517e:	460b      	mov	r3, r1
 8005180:	4613      	mov	r3, r2
 8005182:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005184:	e058      	b.n	8005238 <HAL_RCC_GetSysClockFreq+0x1d0>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t)((((uint64_t) HSI_VALUE * ((uint64_t)((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005186:	4b38      	ldr	r3, [pc, #224]	@ (8005268 <HAL_RCC_GetSysClockFreq+0x200>)
 8005188:	685b      	ldr	r3, [r3, #4]
 800518a:	099b      	lsrs	r3, r3, #6
 800518c:	2200      	movs	r2, #0
 800518e:	4618      	mov	r0, r3
 8005190:	4611      	mov	r1, r2
 8005192:	f3c0 0308 	ubfx	r3, r0, #0, #9
 8005196:	623b      	str	r3, [r7, #32]
 8005198:	2300      	movs	r3, #0
 800519a:	627b      	str	r3, [r7, #36]	@ 0x24
 800519c:	e9d7 8908 	ldrd	r8, r9, [r7, #32]
 80051a0:	4642      	mov	r2, r8
 80051a2:	464b      	mov	r3, r9
 80051a4:	f04f 0000 	mov.w	r0, #0
 80051a8:	f04f 0100 	mov.w	r1, #0
 80051ac:	0159      	lsls	r1, r3, #5
 80051ae:	ea41 61d2 	orr.w	r1, r1, r2, lsr #27
 80051b2:	0150      	lsls	r0, r2, #5
 80051b4:	4602      	mov	r2, r0
 80051b6:	460b      	mov	r3, r1
 80051b8:	4641      	mov	r1, r8
 80051ba:	ebb2 0a01 	subs.w	sl, r2, r1
 80051be:	4649      	mov	r1, r9
 80051c0:	eb63 0b01 	sbc.w	fp, r3, r1
 80051c4:	f04f 0200 	mov.w	r2, #0
 80051c8:	f04f 0300 	mov.w	r3, #0
 80051cc:	ea4f 138b 	mov.w	r3, fp, lsl #6
 80051d0:	ea43 639a 	orr.w	r3, r3, sl, lsr #26
 80051d4:	ea4f 128a 	mov.w	r2, sl, lsl #6
 80051d8:	ebb2 040a 	subs.w	r4, r2, sl
 80051dc:	eb63 050b 	sbc.w	r5, r3, fp
 80051e0:	f04f 0200 	mov.w	r2, #0
 80051e4:	f04f 0300 	mov.w	r3, #0
 80051e8:	00eb      	lsls	r3, r5, #3
 80051ea:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 80051ee:	00e2      	lsls	r2, r4, #3
 80051f0:	4614      	mov	r4, r2
 80051f2:	461d      	mov	r5, r3
 80051f4:	4643      	mov	r3, r8
 80051f6:	18e3      	adds	r3, r4, r3
 80051f8:	603b      	str	r3, [r7, #0]
 80051fa:	464b      	mov	r3, r9
 80051fc:	eb45 0303 	adc.w	r3, r5, r3
 8005200:	607b      	str	r3, [r7, #4]
 8005202:	f04f 0200 	mov.w	r2, #0
 8005206:	f04f 0300 	mov.w	r3, #0
 800520a:	e9d7 4500 	ldrd	r4, r5, [r7]
 800520e:	4629      	mov	r1, r5
 8005210:	028b      	lsls	r3, r1, #10
 8005212:	4621      	mov	r1, r4
 8005214:	ea43 5391 	orr.w	r3, r3, r1, lsr #22
 8005218:	4621      	mov	r1, r4
 800521a:	028a      	lsls	r2, r1, #10
 800521c:	4610      	mov	r0, r2
 800521e:	4619      	mov	r1, r3
 8005220:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8005222:	2200      	movs	r2, #0
 8005224:	61bb      	str	r3, [r7, #24]
 8005226:	61fa      	str	r2, [r7, #28]
 8005228:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 800522c:	f7fb fd14 	bl	8000c58 <__aeabi_uldivmod>
 8005230:	4602      	mov	r2, r0
 8005232:	460b      	mov	r3, r1
 8005234:	4613      	mov	r3, r2
 8005236:	64fb      	str	r3, [r7, #76]	@ 0x4c
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) * 2U);
 8005238:	4b0b      	ldr	r3, [pc, #44]	@ (8005268 <HAL_RCC_GetSysClockFreq+0x200>)
 800523a:	685b      	ldr	r3, [r3, #4]
 800523c:	0c1b      	lsrs	r3, r3, #16
 800523e:	f003 0303 	and.w	r3, r3, #3
 8005242:	3301      	adds	r3, #1
 8005244:	005b      	lsls	r3, r3, #1
 8005246:	643b      	str	r3, [r7, #64]	@ 0x40

      sysclockfreq = pllvco / pllp;
 8005248:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800524a:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 800524c:	fbb2 f3f3 	udiv	r3, r2, r3
 8005250:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005252:	e002      	b.n	800525a <HAL_RCC_GetSysClockFreq+0x1f2>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005254:	4b05      	ldr	r3, [pc, #20]	@ (800526c <HAL_RCC_GetSysClockFreq+0x204>)
 8005256:	64bb      	str	r3, [r7, #72]	@ 0x48
      break;
 8005258:	bf00      	nop
    }
  }
  return sysclockfreq;
 800525a:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
}
 800525c:	4618      	mov	r0, r3
 800525e:	3750      	adds	r7, #80	@ 0x50
 8005260:	46bd      	mov	sp, r7
 8005262:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8005266:	bf00      	nop
 8005268:	40023800 	.word	0x40023800
 800526c:	00f42400 	.word	0x00f42400
 8005270:	007a1200 	.word	0x007a1200

08005274 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005274:	b480      	push	{r7}
 8005276:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8005278:	4b03      	ldr	r3, [pc, #12]	@ (8005288 <HAL_RCC_GetHCLKFreq+0x14>)
 800527a:	681b      	ldr	r3, [r3, #0]
}
 800527c:	4618      	mov	r0, r3
 800527e:	46bd      	mov	sp, r7
 8005280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005284:	4770      	bx	lr
 8005286:	bf00      	nop
 8005288:	20000000 	.word	0x20000000

0800528c <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 800528c:	b580      	push	{r7, lr}
 800528e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 8005290:	f7ff fff0 	bl	8005274 <HAL_RCC_GetHCLKFreq>
 8005294:	4602      	mov	r2, r0
 8005296:	4b05      	ldr	r3, [pc, #20]	@ (80052ac <HAL_RCC_GetPCLK1Freq+0x20>)
 8005298:	689b      	ldr	r3, [r3, #8]
 800529a:	0a9b      	lsrs	r3, r3, #10
 800529c:	f003 0307 	and.w	r3, r3, #7
 80052a0:	4903      	ldr	r1, [pc, #12]	@ (80052b0 <HAL_RCC_GetPCLK1Freq+0x24>)
 80052a2:	5ccb      	ldrb	r3, [r1, r3]
 80052a4:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052a8:	4618      	mov	r0, r3
 80052aa:	bd80      	pop	{r7, pc}
 80052ac:	40023800 	.word	0x40023800
 80052b0:	080091cc 	.word	0x080091cc

080052b4 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 80052b4:	b580      	push	{r7, lr}
 80052b6:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 80052b8:	f7ff ffdc 	bl	8005274 <HAL_RCC_GetHCLKFreq>
 80052bc:	4602      	mov	r2, r0
 80052be:	4b05      	ldr	r3, [pc, #20]	@ (80052d4 <HAL_RCC_GetPCLK2Freq+0x20>)
 80052c0:	689b      	ldr	r3, [r3, #8]
 80052c2:	0b5b      	lsrs	r3, r3, #13
 80052c4:	f003 0307 	and.w	r3, r3, #7
 80052c8:	4903      	ldr	r1, [pc, #12]	@ (80052d8 <HAL_RCC_GetPCLK2Freq+0x24>)
 80052ca:	5ccb      	ldrb	r3, [r1, r3]
 80052cc:	fa22 f303 	lsr.w	r3, r2, r3
}
 80052d0:	4618      	mov	r0, r3
 80052d2:	bd80      	pop	{r7, pc}
 80052d4:	40023800 	.word	0x40023800
 80052d8:	080091cc 	.word	0x080091cc

080052dc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80052dc:	b580      	push	{r7, lr}
 80052de:	b082      	sub	sp, #8
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	2b00      	cmp	r3, #0
 80052e8:	d101      	bne.n	80052ee <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80052ea:	2301      	movs	r3, #1
 80052ec:	e042      	b.n	8005374 <HAL_UART_Init+0x98>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 80052f4:	b2db      	uxtb	r3, r3
 80052f6:	2b00      	cmp	r3, #0
 80052f8:	d106      	bne.n	8005308 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	2200      	movs	r2, #0
 80052fe:	f883 2040 	strb.w	r2, [r3, #64]	@ 0x40

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8005302:	6878      	ldr	r0, [r7, #4]
 8005304:	f7fd f80a 	bl	800231c <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	2224      	movs	r2, #36	@ 0x24
 800530c:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8005310:	687b      	ldr	r3, [r7, #4]
 8005312:	681b      	ldr	r3, [r3, #0]
 8005314:	68da      	ldr	r2, [r3, #12]
 8005316:	687b      	ldr	r3, [r7, #4]
 8005318:	681b      	ldr	r3, [r3, #0]
 800531a:	f422 5200 	bic.w	r2, r2, #8192	@ 0x2000
 800531e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8005320:	6878      	ldr	r0, [r7, #4]
 8005322:	f000 fc99 	bl	8005c58 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8005326:	687b      	ldr	r3, [r7, #4]
 8005328:	681b      	ldr	r3, [r3, #0]
 800532a:	691a      	ldr	r2, [r3, #16]
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	f422 4290 	bic.w	r2, r2, #18432	@ 0x4800
 8005334:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	681b      	ldr	r3, [r3, #0]
 800533a:	695a      	ldr	r2, [r3, #20]
 800533c:	687b      	ldr	r3, [r7, #4]
 800533e:	681b      	ldr	r3, [r3, #0]
 8005340:	f022 022a 	bic.w	r2, r2, #42	@ 0x2a
 8005344:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	68da      	ldr	r2, [r3, #12]
 800534c:	687b      	ldr	r3, [r7, #4]
 800534e:	681b      	ldr	r3, [r3, #0]
 8005350:	f442 5200 	orr.w	r2, r2, #8192	@ 0x2000
 8005354:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	2200      	movs	r2, #0
 800535a:	645a      	str	r2, [r3, #68]	@ 0x44
  huart->gState = HAL_UART_STATE_READY;
 800535c:	687b      	ldr	r3, [r7, #4]
 800535e:	2220      	movs	r2, #32
 8005360:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
  huart->RxState = HAL_UART_STATE_READY;
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	2220      	movs	r2, #32
 8005368:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 800536c:	687b      	ldr	r3, [r7, #4]
 800536e:	2200      	movs	r2, #0
 8005370:	635a      	str	r2, [r3, #52]	@ 0x34

  return HAL_OK;
 8005372:	2300      	movs	r3, #0
}
 8005374:	4618      	mov	r0, r3
 8005376:	3708      	adds	r7, #8
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800537c:	b580      	push	{r7, lr}
 800537e:	b0ba      	sub	sp, #232	@ 0xe8
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8005384:	687b      	ldr	r3, [r7, #4]
 8005386:	681b      	ldr	r3, [r3, #0]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	681b      	ldr	r3, [r3, #0]
 8005392:	68db      	ldr	r3, [r3, #12]
 8005394:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8005398:	687b      	ldr	r3, [r7, #4]
 800539a:	681b      	ldr	r3, [r3, #0]
 800539c:	695b      	ldr	r3, [r3, #20]
 800539e:	f8c7 30dc 	str.w	r3, [r7, #220]	@ 0xdc
  uint32_t errorflags = 0x00U;
 80053a2:	2300      	movs	r3, #0
 80053a4:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  uint32_t dmarequest = 0x00U;
 80053a8:	2300      	movs	r3, #0
 80053aa:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 80053ae:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053b2:	f003 030f 	and.w	r3, r3, #15
 80053b6:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
  if (errorflags == RESET)
 80053ba:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053be:	2b00      	cmp	r3, #0
 80053c0:	d10f      	bne.n	80053e2 <HAL_UART_IRQHandler+0x66>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80053c2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80053c6:	f003 0320 	and.w	r3, r3, #32
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d009      	beq.n	80053e2 <HAL_UART_IRQHandler+0x66>
 80053ce:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053d2:	f003 0320 	and.w	r3, r3, #32
 80053d6:	2b00      	cmp	r3, #0
 80053d8:	d003      	beq.n	80053e2 <HAL_UART_IRQHandler+0x66>
    {
      UART_Receive_IT(huart);
 80053da:	6878      	ldr	r0, [r7, #4]
 80053dc:	f000 fb7e 	bl	8005adc <UART_Receive_IT>
      return;
 80053e0:	e273      	b.n	80058ca <HAL_UART_IRQHandler+0x54e>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET)
 80053e2:	f8d7 30d8 	ldr.w	r3, [r7, #216]	@ 0xd8
 80053e6:	2b00      	cmp	r3, #0
 80053e8:	f000 80de 	beq.w	80055a8 <HAL_UART_IRQHandler+0x22c>
 80053ec:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 80053f0:	f003 0301 	and.w	r3, r3, #1
 80053f4:	2b00      	cmp	r3, #0
 80053f6:	d106      	bne.n	8005406 <HAL_UART_IRQHandler+0x8a>
                                || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 80053f8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80053fc:	f403 7390 	and.w	r3, r3, #288	@ 0x120
 8005400:	2b00      	cmp	r3, #0
 8005402:	f000 80d1 	beq.w	80055a8 <HAL_UART_IRQHandler+0x22c>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8005406:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800540a:	f003 0301 	and.w	r3, r3, #1
 800540e:	2b00      	cmp	r3, #0
 8005410:	d00b      	beq.n	800542a <HAL_UART_IRQHandler+0xae>
 8005412:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005416:	f403 7380 	and.w	r3, r3, #256	@ 0x100
 800541a:	2b00      	cmp	r3, #0
 800541c:	d005      	beq.n	800542a <HAL_UART_IRQHandler+0xae>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 800541e:	687b      	ldr	r3, [r7, #4]
 8005420:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005422:	f043 0201 	orr.w	r2, r3, #1
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800542a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 800542e:	f003 0304 	and.w	r3, r3, #4
 8005432:	2b00      	cmp	r3, #0
 8005434:	d00b      	beq.n	800544e <HAL_UART_IRQHandler+0xd2>
 8005436:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800543a:	f003 0301 	and.w	r3, r3, #1
 800543e:	2b00      	cmp	r3, #0
 8005440:	d005      	beq.n	800544e <HAL_UART_IRQHandler+0xd2>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 8005446:	f043 0202 	orr.w	r2, r3, #2
 800544a:	687b      	ldr	r3, [r7, #4]
 800544c:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800544e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005452:	f003 0302 	and.w	r3, r3, #2
 8005456:	2b00      	cmp	r3, #0
 8005458:	d00b      	beq.n	8005472 <HAL_UART_IRQHandler+0xf6>
 800545a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800545e:	f003 0301 	and.w	r3, r3, #1
 8005462:	2b00      	cmp	r3, #0
 8005464:	d005      	beq.n	8005472 <HAL_UART_IRQHandler+0xf6>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8005466:	687b      	ldr	r3, [r7, #4]
 8005468:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800546a:	f043 0204 	orr.w	r2, r3, #4
 800546e:	687b      	ldr	r3, [r7, #4]
 8005470:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET)
 8005472:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005476:	f003 0308 	and.w	r3, r3, #8
 800547a:	2b00      	cmp	r3, #0
 800547c:	d011      	beq.n	80054a2 <HAL_UART_IRQHandler+0x126>
 800547e:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005482:	f003 0320 	and.w	r3, r3, #32
 8005486:	2b00      	cmp	r3, #0
 8005488:	d105      	bne.n	8005496 <HAL_UART_IRQHandler+0x11a>
                                                 || ((cr3its & USART_CR3_EIE) != RESET)))
 800548a:	f8d7 30dc 	ldr.w	r3, [r7, #220]	@ 0xdc
 800548e:	f003 0301 	and.w	r3, r3, #1
 8005492:	2b00      	cmp	r3, #0
 8005494:	d005      	beq.n	80054a2 <HAL_UART_IRQHandler+0x126>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8005496:	687b      	ldr	r3, [r7, #4]
 8005498:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800549a:	f043 0208 	orr.w	r2, r3, #8
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	645a      	str	r2, [r3, #68]	@ 0x44
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054a6:	2b00      	cmp	r3, #0
 80054a8:	f000 820a 	beq.w	80058c0 <HAL_UART_IRQHandler+0x544>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80054ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80054b0:	f003 0320 	and.w	r3, r3, #32
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d008      	beq.n	80054ca <HAL_UART_IRQHandler+0x14e>
 80054b8:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80054bc:	f003 0320 	and.w	r3, r3, #32
 80054c0:	2b00      	cmp	r3, #0
 80054c2:	d002      	beq.n	80054ca <HAL_UART_IRQHandler+0x14e>
      {
        UART_Receive_IT(huart);
 80054c4:	6878      	ldr	r0, [r7, #4]
 80054c6:	f000 fb09 	bl	8005adc <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	695b      	ldr	r3, [r3, #20]
 80054d0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80054d4:	2b40      	cmp	r3, #64	@ 0x40
 80054d6:	bf0c      	ite	eq
 80054d8:	2301      	moveq	r3, #1
 80054da:	2300      	movne	r3, #0
 80054dc:	b2db      	uxtb	r3, r3
 80054de:	f8c7 30d4 	str.w	r3, [r7, #212]	@ 0xd4
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 80054e6:	f003 0308 	and.w	r3, r3, #8
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d103      	bne.n	80054f6 <HAL_UART_IRQHandler+0x17a>
 80054ee:	f8d7 30d4 	ldr.w	r3, [r7, #212]	@ 0xd4
 80054f2:	2b00      	cmp	r3, #0
 80054f4:	d04f      	beq.n	8005596 <HAL_UART_IRQHandler+0x21a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 80054f6:	6878      	ldr	r0, [r7, #4]
 80054f8:	f000 fa14 	bl	8005924 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	681b      	ldr	r3, [r3, #0]
 8005500:	695b      	ldr	r3, [r3, #20]
 8005502:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 8005506:	2b40      	cmp	r3, #64	@ 0x40
 8005508:	d141      	bne.n	800558e <HAL_UART_IRQHandler+0x212>
        {
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	681b      	ldr	r3, [r3, #0]
 800550e:	3314      	adds	r3, #20
 8005510:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 */
__STATIC_FORCEINLINE uint32_t __LDREXW(volatile uint32_t *addr)
{
    uint32_t result;

   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005514:	f8d7 309c 	ldr.w	r3, [r7, #156]	@ 0x9c
 8005518:	e853 3f00 	ldrex	r3, [r3]
 800551c:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
   return(result);
 8005520:	f8d7 3098 	ldr.w	r3, [r7, #152]	@ 0x98
 8005524:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 8005528:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 800552c:	687b      	ldr	r3, [r7, #4]
 800552e:	681b      	ldr	r3, [r3, #0]
 8005530:	3314      	adds	r3, #20
 8005532:	f8d7 20d0 	ldr.w	r2, [r7, #208]	@ 0xd0
 8005536:	f8c7 20a8 	str.w	r2, [r7, #168]	@ 0xa8
 800553a:	f8c7 30a4 	str.w	r3, [r7, #164]	@ 0xa4
 */
__STATIC_FORCEINLINE uint32_t __STREXW(uint32_t value, volatile uint32_t *addr)
{
   uint32_t result;

   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800553e:	f8d7 10a4 	ldr.w	r1, [r7, #164]	@ 0xa4
 8005542:	f8d7 20a8 	ldr.w	r2, [r7, #168]	@ 0xa8
 8005546:	e841 2300 	strex	r3, r2, [r1]
 800554a:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
   return(result);
 800554e:	f8d7 30a0 	ldr.w	r3, [r7, #160]	@ 0xa0
 8005552:	2b00      	cmp	r3, #0
 8005554:	d1d9      	bne.n	800550a <HAL_UART_IRQHandler+0x18e>

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800555a:	2b00      	cmp	r3, #0
 800555c:	d013      	beq.n	8005586 <HAL_UART_IRQHandler+0x20a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005562:	4a8a      	ldr	r2, [pc, #552]	@ (800578c <HAL_UART_IRQHandler+0x410>)
 8005564:	651a      	str	r2, [r3, #80]	@ 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8005566:	687b      	ldr	r3, [r7, #4]
 8005568:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800556a:	4618      	mov	r0, r3
 800556c:	f7fd fbd3 	bl	8002d16 <HAL_DMA_Abort_IT>
 8005570:	4603      	mov	r3, r0
 8005572:	2b00      	cmp	r3, #0
 8005574:	d016      	beq.n	80055a4 <HAL_UART_IRQHandler+0x228>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800557a:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 800557c:	687a      	ldr	r2, [r7, #4]
 800557e:	6bd2      	ldr	r2, [r2, #60]	@ 0x3c
 8005580:	4610      	mov	r0, r2
 8005582:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005584:	e00e      	b.n	80055a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8005586:	6878      	ldr	r0, [r7, #4]
 8005588:	f000 f9b6 	bl	80058f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800558c:	e00a      	b.n	80055a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800558e:	6878      	ldr	r0, [r7, #4]
 8005590:	f000 f9b2 	bl	80058f8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8005594:	e006      	b.n	80055a4 <HAL_UART_IRQHandler+0x228>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8005596:	6878      	ldr	r0, [r7, #4]
 8005598:	f000 f9ae 	bl	80058f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800559c:	687b      	ldr	r3, [r7, #4]
 800559e:	2200      	movs	r2, #0
 80055a0:	645a      	str	r2, [r3, #68]	@ 0x44
      }
    }
    return;
 80055a2:	e18d      	b.n	80058c0 <HAL_UART_IRQHandler+0x544>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055a4:	bf00      	nop
    return;
 80055a6:	e18b      	b.n	80058c0 <HAL_UART_IRQHandler+0x544>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 80055ac:	2b01      	cmp	r3, #1
 80055ae:	f040 8167 	bne.w	8005880 <HAL_UART_IRQHandler+0x504>
      && ((isrflags & USART_SR_IDLE) != 0U)
 80055b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80055b6:	f003 0310 	and.w	r3, r3, #16
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	f000 8160 	beq.w	8005880 <HAL_UART_IRQHandler+0x504>
      && ((cr1its & USART_CR1_IDLEIE) != 0U))
 80055c0:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80055c4:	f003 0310 	and.w	r3, r3, #16
 80055c8:	2b00      	cmp	r3, #0
 80055ca:	f000 8159 	beq.w	8005880 <HAL_UART_IRQHandler+0x504>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80055ce:	2300      	movs	r3, #0
 80055d0:	60bb      	str	r3, [r7, #8]
 80055d2:	687b      	ldr	r3, [r7, #4]
 80055d4:	681b      	ldr	r3, [r3, #0]
 80055d6:	681b      	ldr	r3, [r3, #0]
 80055d8:	60bb      	str	r3, [r7, #8]
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	681b      	ldr	r3, [r3, #0]
 80055de:	685b      	ldr	r3, [r3, #4]
 80055e0:	60bb      	str	r3, [r7, #8]
 80055e2:	68bb      	ldr	r3, [r7, #8]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	681b      	ldr	r3, [r3, #0]
 80055e8:	695b      	ldr	r3, [r3, #20]
 80055ea:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80055ee:	2b40      	cmp	r3, #64	@ 0x40
 80055f0:	f040 80ce 	bne.w	8005790 <HAL_UART_IRQHandler+0x414>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80055f4:	687b      	ldr	r3, [r7, #4]
 80055f6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	685b      	ldr	r3, [r3, #4]
 80055fc:	f8a7 30be 	strh.w	r3, [r7, #190]	@ 0xbe
      if ((nb_remaining_rx_data > 0U)
 8005600:	f8b7 30be 	ldrh.w	r3, [r7, #190]	@ 0xbe
 8005604:	2b00      	cmp	r3, #0
 8005606:	f000 80a9 	beq.w	800575c <HAL_UART_IRQHandler+0x3e0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 800560e:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005612:	429a      	cmp	r2, r3
 8005614:	f080 80a2 	bcs.w	800575c <HAL_UART_IRQHandler+0x3e0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8005618:	687b      	ldr	r3, [r7, #4]
 800561a:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 800561e:	85da      	strh	r2, [r3, #46]	@ 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005624:	69db      	ldr	r3, [r3, #28]
 8005626:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 800562a:	f000 8088 	beq.w	800573e <HAL_UART_IRQHandler+0x3c2>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	681b      	ldr	r3, [r3, #0]
 8005632:	330c      	adds	r3, #12
 8005634:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005638:	f8d7 3088 	ldr.w	r3, [r7, #136]	@ 0x88
 800563c:	e853 3f00 	ldrex	r3, [r3]
 8005640:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
   return(result);
 8005644:	f8d7 3084 	ldr.w	r3, [r7, #132]	@ 0x84
 8005648:	f423 7380 	bic.w	r3, r3, #256	@ 0x100
 800564c:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	681b      	ldr	r3, [r3, #0]
 8005654:	330c      	adds	r3, #12
 8005656:	f8d7 20b8 	ldr.w	r2, [r7, #184]	@ 0xb8
 800565a:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 800565e:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005662:	f8d7 1090 	ldr.w	r1, [r7, #144]	@ 0x90
 8005666:	f8d7 2094 	ldr.w	r2, [r7, #148]	@ 0x94
 800566a:	e841 2300 	strex	r3, r2, [r1]
 800566e:	f8c7 308c 	str.w	r3, [r7, #140]	@ 0x8c
   return(result);
 8005672:	f8d7 308c 	ldr.w	r3, [r7, #140]	@ 0x8c
 8005676:	2b00      	cmp	r3, #0
 8005678:	d1d9      	bne.n	800562e <HAL_UART_IRQHandler+0x2b2>
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	3314      	adds	r3, #20
 8005680:	677b      	str	r3, [r7, #116]	@ 0x74
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005682:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8005684:	e853 3f00 	ldrex	r3, [r3]
 8005688:	673b      	str	r3, [r7, #112]	@ 0x70
   return(result);
 800568a:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 800568c:	f023 0301 	bic.w	r3, r3, #1
 8005690:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	3314      	adds	r3, #20
 800569a:	f8d7 20b4 	ldr.w	r2, [r7, #180]	@ 0xb4
 800569e:	f8c7 2080 	str.w	r2, [r7, #128]	@ 0x80
 80056a2:	67fb      	str	r3, [r7, #124]	@ 0x7c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056a4:	6ff9      	ldr	r1, [r7, #124]	@ 0x7c
 80056a6:	f8d7 2080 	ldr.w	r2, [r7, #128]	@ 0x80
 80056aa:	e841 2300 	strex	r3, r2, [r1]
 80056ae:	67bb      	str	r3, [r7, #120]	@ 0x78
   return(result);
 80056b0:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80056b2:	2b00      	cmp	r3, #0
 80056b4:	d1e1      	bne.n	800567a <HAL_UART_IRQHandler+0x2fe>

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	3314      	adds	r3, #20
 80056bc:	663b      	str	r3, [r7, #96]	@ 0x60
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80056be:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80056c0:	e853 3f00 	ldrex	r3, [r3]
 80056c4:	65fb      	str	r3, [r7, #92]	@ 0x5c
   return(result);
 80056c6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80056c8:	f023 0340 	bic.w	r3, r3, #64	@ 0x40
 80056cc:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 80056d0:	687b      	ldr	r3, [r7, #4]
 80056d2:	681b      	ldr	r3, [r3, #0]
 80056d4:	3314      	adds	r3, #20
 80056d6:	f8d7 20b0 	ldr.w	r2, [r7, #176]	@ 0xb0
 80056da:	66fa      	str	r2, [r7, #108]	@ 0x6c
 80056dc:	66bb      	str	r3, [r7, #104]	@ 0x68
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80056de:	6eb9      	ldr	r1, [r7, #104]	@ 0x68
 80056e0:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 80056e2:	e841 2300 	strex	r3, r2, [r1]
 80056e6:	667b      	str	r3, [r7, #100]	@ 0x64
   return(result);
 80056e8:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80056ea:	2b00      	cmp	r3, #0
 80056ec:	d1e3      	bne.n	80056b6 <HAL_UART_IRQHandler+0x33a>

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	2220      	movs	r2, #32
 80056f2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80056f6:	687b      	ldr	r3, [r7, #4]
 80056f8:	2200      	movs	r2, #0
 80056fa:	631a      	str	r2, [r3, #48]	@ 0x30

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80056fc:	687b      	ldr	r3, [r7, #4]
 80056fe:	681b      	ldr	r3, [r3, #0]
 8005700:	330c      	adds	r3, #12
 8005702:	64fb      	str	r3, [r7, #76]	@ 0x4c
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005704:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8005706:	e853 3f00 	ldrex	r3, [r3]
 800570a:	64bb      	str	r3, [r7, #72]	@ 0x48
   return(result);
 800570c:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 800570e:	f023 0310 	bic.w	r3, r3, #16
 8005712:	f8c7 30ac 	str.w	r3, [r7, #172]	@ 0xac
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	681b      	ldr	r3, [r3, #0]
 800571a:	330c      	adds	r3, #12
 800571c:	f8d7 20ac 	ldr.w	r2, [r7, #172]	@ 0xac
 8005720:	65ba      	str	r2, [r7, #88]	@ 0x58
 8005722:	657b      	str	r3, [r7, #84]	@ 0x54
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005724:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8005726:	6dba      	ldr	r2, [r7, #88]	@ 0x58
 8005728:	e841 2300 	strex	r3, r2, [r1]
 800572c:	653b      	str	r3, [r7, #80]	@ 0x50
   return(result);
 800572e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8005730:	2b00      	cmp	r3, #0
 8005732:	d1e3      	bne.n	80056fc <HAL_UART_IRQHandler+0x380>

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 8005738:	4618      	mov	r0, r3
 800573a:	f7fd fa7c 	bl	8002c36 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
        In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2202      	movs	r2, #2
 8005742:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005748:	687b      	ldr	r3, [r7, #4]
 800574a:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 800574c:	b29b      	uxth	r3, r3
 800574e:	1ad3      	subs	r3, r2, r3
 8005750:	b29b      	uxth	r3, r3
 8005752:	4619      	mov	r1, r3
 8005754:	6878      	ldr	r0, [r7, #4]
 8005756:	f000 f8d9 	bl	800590c <HAL_UARTEx_RxEventCallback>
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
          }
        }
      }
      return;
 800575a:	e0b3      	b.n	80058c4 <HAL_UART_IRQHandler+0x548>
        if (nb_remaining_rx_data == huart->RxXferSize)
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005760:	f8b7 20be 	ldrh.w	r2, [r7, #190]	@ 0xbe
 8005764:	429a      	cmp	r2, r3
 8005766:	f040 80ad 	bne.w	80058c4 <HAL_UART_IRQHandler+0x548>
          if (huart->hdmarx->Init.Mode == DMA_CIRCULAR)
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800576e:	69db      	ldr	r3, [r3, #28]
 8005770:	f5b3 7f80 	cmp.w	r3, #256	@ 0x100
 8005774:	f040 80a6 	bne.w	80058c4 <HAL_UART_IRQHandler+0x548>
            huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	2202      	movs	r2, #2
 800577c:	635a      	str	r2, [r3, #52]	@ 0x34
            HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005782:	4619      	mov	r1, r3
 8005784:	6878      	ldr	r0, [r7, #4]
 8005786:	f000 f8c1 	bl	800590c <HAL_UARTEx_RxEventCallback>
      return;
 800578a:	e09b      	b.n	80058c4 <HAL_UART_IRQHandler+0x548>
 800578c:	080059eb 	.word	0x080059eb
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	8d9a      	ldrh	r2, [r3, #44]	@ 0x2c
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005798:	b29b      	uxth	r3, r3
 800579a:	1ad3      	subs	r3, r2, r3
 800579c:	f8a7 30ce 	strh.w	r3, [r7, #206]	@ 0xce
      if ((huart->RxXferCount > 0U)
 80057a0:	687b      	ldr	r3, [r7, #4]
 80057a2:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 80057a4:	b29b      	uxth	r3, r3
 80057a6:	2b00      	cmp	r3, #0
 80057a8:	f000 808e 	beq.w	80058c8 <HAL_UART_IRQHandler+0x54c>
          && (nb_rx_data > 0U))
 80057ac:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 80057b0:	2b00      	cmp	r3, #0
 80057b2:	f000 8089 	beq.w	80058c8 <HAL_UART_IRQHandler+0x54c>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80057b6:	687b      	ldr	r3, [r7, #4]
 80057b8:	681b      	ldr	r3, [r3, #0]
 80057ba:	330c      	adds	r3, #12
 80057bc:	63bb      	str	r3, [r7, #56]	@ 0x38
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80057c0:	e853 3f00 	ldrex	r3, [r3]
 80057c4:	637b      	str	r3, [r7, #52]	@ 0x34
   return(result);
 80057c6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80057c8:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 80057cc:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	330c      	adds	r3, #12
 80057d6:	f8d7 20c8 	ldr.w	r2, [r7, #200]	@ 0xc8
 80057da:	647a      	str	r2, [r7, #68]	@ 0x44
 80057dc:	643b      	str	r3, [r7, #64]	@ 0x40
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80057de:	6c39      	ldr	r1, [r7, #64]	@ 0x40
 80057e0:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80057e2:	e841 2300 	strex	r3, r2, [r1]
 80057e6:	63fb      	str	r3, [r7, #60]	@ 0x3c
   return(result);
 80057e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d1e3      	bne.n	80057b6 <HAL_UART_IRQHandler+0x43a>

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	681b      	ldr	r3, [r3, #0]
 80057f2:	3314      	adds	r3, #20
 80057f4:	627b      	str	r3, [r7, #36]	@ 0x24
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80057f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80057f8:	e853 3f00 	ldrex	r3, [r3]
 80057fc:	623b      	str	r3, [r7, #32]
   return(result);
 80057fe:	6a3b      	ldr	r3, [r7, #32]
 8005800:	f023 0301 	bic.w	r3, r3, #1
 8005804:	f8c7 30c4 	str.w	r3, [r7, #196]	@ 0xc4
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	3314      	adds	r3, #20
 800580e:	f8d7 20c4 	ldr.w	r2, [r7, #196]	@ 0xc4
 8005812:	633a      	str	r2, [r7, #48]	@ 0x30
 8005814:	62fb      	str	r3, [r7, #44]	@ 0x2c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005816:	6af9      	ldr	r1, [r7, #44]	@ 0x2c
 8005818:	6b3a      	ldr	r2, [r7, #48]	@ 0x30
 800581a:	e841 2300 	strex	r3, r2, [r1]
 800581e:	62bb      	str	r3, [r7, #40]	@ 0x28
   return(result);
 8005820:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005822:	2b00      	cmp	r3, #0
 8005824:	d1e3      	bne.n	80057ee <HAL_UART_IRQHandler+0x472>

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	2220      	movs	r2, #32
 800582a:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	2200      	movs	r2, #0
 8005832:	631a      	str	r2, [r3, #48]	@ 0x30

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	330c      	adds	r3, #12
 800583a:	613b      	str	r3, [r7, #16]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 800583c:	693b      	ldr	r3, [r7, #16]
 800583e:	e853 3f00 	ldrex	r3, [r3]
 8005842:	60fb      	str	r3, [r7, #12]
   return(result);
 8005844:	68fb      	ldr	r3, [r7, #12]
 8005846:	f023 0310 	bic.w	r3, r3, #16
 800584a:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	681b      	ldr	r3, [r3, #0]
 8005852:	330c      	adds	r3, #12
 8005854:	f8d7 20c0 	ldr.w	r2, [r7, #192]	@ 0xc0
 8005858:	61fa      	str	r2, [r7, #28]
 800585a:	61bb      	str	r3, [r7, #24]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 800585c:	69b9      	ldr	r1, [r7, #24]
 800585e:	69fa      	ldr	r2, [r7, #28]
 8005860:	e841 2300 	strex	r3, r2, [r1]
 8005864:	617b      	str	r3, [r7, #20]
   return(result);
 8005866:	697b      	ldr	r3, [r7, #20]
 8005868:	2b00      	cmp	r3, #0
 800586a:	d1e3      	bne.n	8005834 <HAL_UART_IRQHandler+0x4b8>

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 800586c:	687b      	ldr	r3, [r7, #4]
 800586e:	2202      	movs	r2, #2
 8005870:	635a      	str	r2, [r3, #52]	@ 0x34
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8005872:	f8b7 30ce 	ldrh.w	r3, [r7, #206]	@ 0xce
 8005876:	4619      	mov	r1, r3
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f000 f847 	bl	800590c <HAL_UARTEx_RxEventCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      return;
 800587e:	e023      	b.n	80058c8 <HAL_UART_IRQHandler+0x54c>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8005880:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 8005884:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005888:	2b00      	cmp	r3, #0
 800588a:	d009      	beq.n	80058a0 <HAL_UART_IRQHandler+0x524>
 800588c:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 8005890:	f003 0380 	and.w	r3, r3, #128	@ 0x80
 8005894:	2b00      	cmp	r3, #0
 8005896:	d003      	beq.n	80058a0 <HAL_UART_IRQHandler+0x524>
  {
    UART_Transmit_IT(huart);
 8005898:	6878      	ldr	r0, [r7, #4]
 800589a:	f000 f8b7 	bl	8005a0c <UART_Transmit_IT>
    return;
 800589e:	e014      	b.n	80058ca <HAL_UART_IRQHandler+0x54e>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 80058a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	@ 0xe4
 80058a4:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058a8:	2b00      	cmp	r3, #0
 80058aa:	d00e      	beq.n	80058ca <HAL_UART_IRQHandler+0x54e>
 80058ac:	f8d7 30e0 	ldr.w	r3, [r7, #224]	@ 0xe0
 80058b0:	f003 0340 	and.w	r3, r3, #64	@ 0x40
 80058b4:	2b00      	cmp	r3, #0
 80058b6:	d008      	beq.n	80058ca <HAL_UART_IRQHandler+0x54e>
  {
    UART_EndTransmit_IT(huart);
 80058b8:	6878      	ldr	r0, [r7, #4]
 80058ba:	f000 f8f7 	bl	8005aac <UART_EndTransmit_IT>
    return;
 80058be:	e004      	b.n	80058ca <HAL_UART_IRQHandler+0x54e>
    return;
 80058c0:	bf00      	nop
 80058c2:	e002      	b.n	80058ca <HAL_UART_IRQHandler+0x54e>
      return;
 80058c4:	bf00      	nop
 80058c6:	e000      	b.n	80058ca <HAL_UART_IRQHandler+0x54e>
      return;
 80058c8:	bf00      	nop
  }
}
 80058ca:	37e8      	adds	r7, #232	@ 0xe8
 80058cc:	46bd      	mov	sp, r7
 80058ce:	bd80      	pop	{r7, pc}

080058d0 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 80058d0:	b480      	push	{r7}
 80058d2:	b083      	sub	sp, #12
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 80058d8:	bf00      	nop
 80058da:	370c      	adds	r7, #12
 80058dc:	46bd      	mov	sp, r7
 80058de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e2:	4770      	bx	lr

080058e4 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80058e4:	b480      	push	{r7}
 80058e6:	b083      	sub	sp, #12
 80058e8:	af00      	add	r7, sp, #0
 80058ea:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 80058ec:	bf00      	nop
 80058ee:	370c      	adds	r7, #12
 80058f0:	46bd      	mov	sp, r7
 80058f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058f6:	4770      	bx	lr

080058f8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80058f8:	b480      	push	{r7}
 80058fa:	b083      	sub	sp, #12
 80058fc:	af00      	add	r7, sp, #0
 80058fe:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8005900:	bf00      	nop
 8005902:	370c      	adds	r7, #12
 8005904:	46bd      	mov	sp, r7
 8005906:	f85d 7b04 	ldr.w	r7, [sp], #4
 800590a:	4770      	bx	lr

0800590c <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 800590c:	b480      	push	{r7}
 800590e:	b083      	sub	sp, #12
 8005910:	af00      	add	r7, sp, #0
 8005912:	6078      	str	r0, [r7, #4]
 8005914:	460b      	mov	r3, r1
 8005916:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8005918:	bf00      	nop
 800591a:	370c      	adds	r7, #12
 800591c:	46bd      	mov	sp, r7
 800591e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005922:	4770      	bx	lr

08005924 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8005924:	b480      	push	{r7}
 8005926:	b095      	sub	sp, #84	@ 0x54
 8005928:	af00      	add	r7, sp, #0
 800592a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	681b      	ldr	r3, [r3, #0]
 8005930:	330c      	adds	r3, #12
 8005932:	637b      	str	r3, [r7, #52]	@ 0x34
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005934:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8005936:	e853 3f00 	ldrex	r3, [r3]
 800593a:	633b      	str	r3, [r7, #48]	@ 0x30
   return(result);
 800593c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800593e:	f423 7390 	bic.w	r3, r3, #288	@ 0x120
 8005942:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005944:	687b      	ldr	r3, [r7, #4]
 8005946:	681b      	ldr	r3, [r3, #0]
 8005948:	330c      	adds	r3, #12
 800594a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 800594c:	643a      	str	r2, [r7, #64]	@ 0x40
 800594e:	63fb      	str	r3, [r7, #60]	@ 0x3c
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005950:	6bf9      	ldr	r1, [r7, #60]	@ 0x3c
 8005952:	6c3a      	ldr	r2, [r7, #64]	@ 0x40
 8005954:	e841 2300 	strex	r3, r2, [r1]
 8005958:	63bb      	str	r3, [r7, #56]	@ 0x38
   return(result);
 800595a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800595c:	2b00      	cmp	r3, #0
 800595e:	d1e5      	bne.n	800592c <UART_EndRxTransfer+0x8>
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	681b      	ldr	r3, [r3, #0]
 8005964:	3314      	adds	r3, #20
 8005966:	623b      	str	r3, [r7, #32]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005968:	6a3b      	ldr	r3, [r7, #32]
 800596a:	e853 3f00 	ldrex	r3, [r3]
 800596e:	61fb      	str	r3, [r7, #28]
   return(result);
 8005970:	69fb      	ldr	r3, [r7, #28]
 8005972:	f023 0301 	bic.w	r3, r3, #1
 8005976:	64bb      	str	r3, [r7, #72]	@ 0x48
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	3314      	adds	r3, #20
 800597e:	6cba      	ldr	r2, [r7, #72]	@ 0x48
 8005980:	62fa      	str	r2, [r7, #44]	@ 0x2c
 8005982:	62bb      	str	r3, [r7, #40]	@ 0x28
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005984:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8005986:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8005988:	e841 2300 	strex	r3, r2, [r1]
 800598c:	627b      	str	r3, [r7, #36]	@ 0x24
   return(result);
 800598e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8005990:	2b00      	cmp	r3, #0
 8005992:	d1e5      	bne.n	8005960 <UART_EndRxTransfer+0x3c>

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005998:	2b01      	cmp	r3, #1
 800599a:	d119      	bne.n	80059d0 <UART_EndRxTransfer+0xac>
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	681b      	ldr	r3, [r3, #0]
 80059a0:	330c      	adds	r3, #12
 80059a2:	60fb      	str	r3, [r7, #12]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 80059a4:	68fb      	ldr	r3, [r7, #12]
 80059a6:	e853 3f00 	ldrex	r3, [r3]
 80059aa:	60bb      	str	r3, [r7, #8]
   return(result);
 80059ac:	68bb      	ldr	r3, [r7, #8]
 80059ae:	f023 0310 	bic.w	r3, r3, #16
 80059b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	681b      	ldr	r3, [r3, #0]
 80059b8:	330c      	adds	r3, #12
 80059ba:	6c7a      	ldr	r2, [r7, #68]	@ 0x44
 80059bc:	61ba      	str	r2, [r7, #24]
 80059be:	617b      	str	r3, [r7, #20]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 80059c0:	6979      	ldr	r1, [r7, #20]
 80059c2:	69ba      	ldr	r2, [r7, #24]
 80059c4:	e841 2300 	strex	r3, r2, [r1]
 80059c8:	613b      	str	r3, [r7, #16]
   return(result);
 80059ca:	693b      	ldr	r3, [r7, #16]
 80059cc:	2b00      	cmp	r3, #0
 80059ce:	d1e5      	bne.n	800599c <UART_EndRxTransfer+0x78>
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	2220      	movs	r2, #32
 80059d4:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80059d8:	687b      	ldr	r3, [r7, #4]
 80059da:	2200      	movs	r2, #0
 80059dc:	631a      	str	r2, [r3, #48]	@ 0x30
}
 80059de:	bf00      	nop
 80059e0:	3754      	adds	r7, #84	@ 0x54
 80059e2:	46bd      	mov	sp, r7
 80059e4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059e8:	4770      	bx	lr

080059ea <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80059ea:	b580      	push	{r7, lr}
 80059ec:	b084      	sub	sp, #16
 80059ee:	af00      	add	r7, sp, #0
 80059f0:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 80059f6:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 80059f8:	68fb      	ldr	r3, [r7, #12]
 80059fa:	2200      	movs	r2, #0
 80059fc:	85da      	strh	r2, [r3, #46]	@ 0x2e
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80059fe:	68f8      	ldr	r0, [r7, #12]
 8005a00:	f7ff ff7a 	bl	80058f8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8005a04:	bf00      	nop
 8005a06:	3710      	adds	r7, #16
 8005a08:	46bd      	mov	sp, r7
 8005a0a:	bd80      	pop	{r7, pc}

08005a0c <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8005a0c:	b480      	push	{r7}
 8005a0e:	b085      	sub	sp, #20
 8005a10:	af00      	add	r7, sp, #0
 8005a12:	6078      	str	r0, [r7, #4]
  const uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8005a14:	687b      	ldr	r3, [r7, #4]
 8005a16:	f893 3041 	ldrb.w	r3, [r3, #65]	@ 0x41
 8005a1a:	b2db      	uxtb	r3, r3
 8005a1c:	2b21      	cmp	r3, #33	@ 0x21
 8005a1e:	d13e      	bne.n	8005a9e <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	689b      	ldr	r3, [r3, #8]
 8005a24:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005a28:	d114      	bne.n	8005a54 <UART_Transmit_IT+0x48>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	691b      	ldr	r3, [r3, #16]
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d110      	bne.n	8005a54 <UART_Transmit_IT+0x48>
    {
      tmp = (const uint16_t *) huart->pTxBuffPtr;
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6a1b      	ldr	r3, [r3, #32]
 8005a36:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8005a38:	68fb      	ldr	r3, [r7, #12]
 8005a3a:	881b      	ldrh	r3, [r3, #0]
 8005a3c:	461a      	mov	r2, r3
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	681b      	ldr	r3, [r3, #0]
 8005a42:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8005a46:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	6a1b      	ldr	r3, [r3, #32]
 8005a4c:	1c9a      	adds	r2, r3, #2
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	621a      	str	r2, [r3, #32]
 8005a52:	e008      	b.n	8005a66 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8005a54:	687b      	ldr	r3, [r7, #4]
 8005a56:	6a1b      	ldr	r3, [r3, #32]
 8005a58:	1c59      	adds	r1, r3, #1
 8005a5a:	687a      	ldr	r2, [r7, #4]
 8005a5c:	6211      	str	r1, [r2, #32]
 8005a5e:	781a      	ldrb	r2, [r3, #0]
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8005a66:	687b      	ldr	r3, [r7, #4]
 8005a68:	8cdb      	ldrh	r3, [r3, #38]	@ 0x26
 8005a6a:	b29b      	uxth	r3, r3
 8005a6c:	3b01      	subs	r3, #1
 8005a6e:	b29b      	uxth	r3, r3
 8005a70:	687a      	ldr	r2, [r7, #4]
 8005a72:	4619      	mov	r1, r3
 8005a74:	84d1      	strh	r1, [r2, #38]	@ 0x26
 8005a76:	2b00      	cmp	r3, #0
 8005a78:	d10f      	bne.n	8005a9a <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Data Register Empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	68da      	ldr	r2, [r3, #12]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	f022 0280 	bic.w	r2, r2, #128	@ 0x80
 8005a88:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8005a8a:	687b      	ldr	r3, [r7, #4]
 8005a8c:	681b      	ldr	r3, [r3, #0]
 8005a8e:	68da      	ldr	r2, [r3, #12]
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	681b      	ldr	r3, [r3, #0]
 8005a94:	f042 0240 	orr.w	r2, r2, #64	@ 0x40
 8005a98:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8005a9a:	2300      	movs	r3, #0
 8005a9c:	e000      	b.n	8005aa0 <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8005a9e:	2302      	movs	r3, #2
  }
}
 8005aa0:	4618      	mov	r0, r3
 8005aa2:	3714      	adds	r7, #20
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005aaa:	4770      	bx	lr

08005aac <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8005aac:	b580      	push	{r7, lr}
 8005aae:	b082      	sub	sp, #8
 8005ab0:	af00      	add	r7, sp, #0
 8005ab2:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	68da      	ldr	r2, [r3, #12]
 8005aba:	687b      	ldr	r3, [r7, #4]
 8005abc:	681b      	ldr	r3, [r3, #0]
 8005abe:	f022 0240 	bic.w	r2, r2, #64	@ 0x40
 8005ac2:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	2220      	movs	r2, #32
 8005ac8:	f883 2041 	strb.w	r2, [r3, #65]	@ 0x41
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8005acc:	6878      	ldr	r0, [r7, #4]
 8005ace:	f7ff feff 	bl	80058d0 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8005ad2:	2300      	movs	r3, #0
}
 8005ad4:	4618      	mov	r0, r3
 8005ad6:	3708      	adds	r7, #8
 8005ad8:	46bd      	mov	sp, r7
 8005ada:	bd80      	pop	{r7, pc}

08005adc <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8005adc:	b580      	push	{r7, lr}
 8005ade:	b08c      	sub	sp, #48	@ 0x30
 8005ae0:	af00      	add	r7, sp, #0
 8005ae2:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits = NULL;
 8005ae4:	2300      	movs	r3, #0
 8005ae6:	62fb      	str	r3, [r7, #44]	@ 0x2c
  uint16_t *pdata16bits = NULL;
 8005ae8:	2300      	movs	r3, #0
 8005aea:	62bb      	str	r3, [r7, #40]	@ 0x28

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	f893 3042 	ldrb.w	r3, [r3, #66]	@ 0x42
 8005af2:	b2db      	uxtb	r3, r3
 8005af4:	2b22      	cmp	r3, #34	@ 0x22
 8005af6:	f040 80aa 	bne.w	8005c4e <UART_Receive_IT+0x172>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b02:	d115      	bne.n	8005b30 <UART_Receive_IT+0x54>
 8005b04:	687b      	ldr	r3, [r7, #4]
 8005b06:	691b      	ldr	r3, [r3, #16]
 8005b08:	2b00      	cmp	r3, #0
 8005b0a:	d111      	bne.n	8005b30 <UART_Receive_IT+0x54>
    {
      /* Unused pdata8bits */
      UNUSED(pdata8bits);
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8005b0c:	687b      	ldr	r3, [r7, #4]
 8005b0e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b10:	62bb      	str	r3, [r7, #40]	@ 0x28
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	685b      	ldr	r3, [r3, #4]
 8005b18:	b29b      	uxth	r3, r3
 8005b1a:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8005b1e:	b29a      	uxth	r2, r3
 8005b20:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8005b22:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8005b24:	687b      	ldr	r3, [r7, #4]
 8005b26:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b28:	1c9a      	adds	r2, r3, #2
 8005b2a:	687b      	ldr	r3, [r7, #4]
 8005b2c:	629a      	str	r2, [r3, #40]	@ 0x28
 8005b2e:	e024      	b.n	8005b7a <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b34:	62fb      	str	r3, [r7, #44]	@ 0x2c
      /* Unused pdata16bits */
      UNUSED(pdata16bits);

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	689b      	ldr	r3, [r3, #8]
 8005b3a:	f5b3 5f80 	cmp.w	r3, #4096	@ 0x1000
 8005b3e:	d007      	beq.n	8005b50 <UART_Receive_IT+0x74>
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	689b      	ldr	r3, [r3, #8]
 8005b44:	2b00      	cmp	r3, #0
 8005b46:	d10a      	bne.n	8005b5e <UART_Receive_IT+0x82>
 8005b48:	687b      	ldr	r3, [r7, #4]
 8005b4a:	691b      	ldr	r3, [r3, #16]
 8005b4c:	2b00      	cmp	r3, #0
 8005b4e:	d106      	bne.n	8005b5e <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	685b      	ldr	r3, [r3, #4]
 8005b56:	b2da      	uxtb	r2, r3
 8005b58:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b5a:	701a      	strb	r2, [r3, #0]
 8005b5c:	e008      	b.n	8005b70 <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	681b      	ldr	r3, [r3, #0]
 8005b62:	685b      	ldr	r3, [r3, #4]
 8005b64:	b2db      	uxtb	r3, r3
 8005b66:	f003 037f 	and.w	r3, r3, #127	@ 0x7f
 8005b6a:	b2da      	uxtb	r2, r3
 8005b6c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8005b6e:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8005b70:	687b      	ldr	r3, [r7, #4]
 8005b72:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8005b74:	1c5a      	adds	r2, r3, #1
 8005b76:	687b      	ldr	r3, [r7, #4]
 8005b78:	629a      	str	r2, [r3, #40]	@ 0x28
    }

    if (--huart->RxXferCount == 0U)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	8ddb      	ldrh	r3, [r3, #46]	@ 0x2e
 8005b7e:	b29b      	uxth	r3, r3
 8005b80:	3b01      	subs	r3, #1
 8005b82:	b29b      	uxth	r3, r3
 8005b84:	687a      	ldr	r2, [r7, #4]
 8005b86:	4619      	mov	r1, r3
 8005b88:	85d1      	strh	r1, [r2, #46]	@ 0x2e
 8005b8a:	2b00      	cmp	r3, #0
 8005b8c:	d15d      	bne.n	8005c4a <UART_Receive_IT+0x16e>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	68da      	ldr	r2, [r3, #12]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f022 0220 	bic.w	r2, r2, #32
 8005b9c:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	681b      	ldr	r3, [r3, #0]
 8005ba2:	68da      	ldr	r2, [r3, #12]
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	681b      	ldr	r3, [r3, #0]
 8005ba8:	f422 7280 	bic.w	r2, r2, #256	@ 0x100
 8005bac:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8005bae:	687b      	ldr	r3, [r7, #4]
 8005bb0:	681b      	ldr	r3, [r3, #0]
 8005bb2:	695a      	ldr	r2, [r3, #20]
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f022 0201 	bic.w	r2, r2, #1
 8005bbc:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8005bbe:	687b      	ldr	r3, [r7, #4]
 8005bc0:	2220      	movs	r2, #32
 8005bc2:	f883 2042 	strb.w	r2, [r3, #66]	@ 0x42

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 8005bc6:	687b      	ldr	r3, [r7, #4]
 8005bc8:	2200      	movs	r2, #0
 8005bca:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8005bd0:	2b01      	cmp	r3, #1
 8005bd2:	d135      	bne.n	8005c40 <UART_Receive_IT+0x164>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2200      	movs	r2, #0
 8005bd8:	631a      	str	r2, [r3, #48]	@ 0x30

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	681b      	ldr	r3, [r3, #0]
 8005bde:	330c      	adds	r3, #12
 8005be0:	617b      	str	r3, [r7, #20]
   __ASM volatile ("ldrex %0, %1" : "=r" (result) : "Q" (*addr) );
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	e853 3f00 	ldrex	r3, [r3]
 8005be8:	613b      	str	r3, [r7, #16]
   return(result);
 8005bea:	693b      	ldr	r3, [r7, #16]
 8005bec:	f023 0310 	bic.w	r3, r3, #16
 8005bf0:	627b      	str	r3, [r7, #36]	@ 0x24
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	330c      	adds	r3, #12
 8005bf8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8005bfa:	623a      	str	r2, [r7, #32]
 8005bfc:	61fb      	str	r3, [r7, #28]
   __ASM volatile ("strex %0, %2, %1" : "=&r" (result), "=Q" (*addr) : "r" (value) );
 8005bfe:	69f9      	ldr	r1, [r7, #28]
 8005c00:	6a3a      	ldr	r2, [r7, #32]
 8005c02:	e841 2300 	strex	r3, r2, [r1]
 8005c06:	61bb      	str	r3, [r7, #24]
   return(result);
 8005c08:	69bb      	ldr	r3, [r7, #24]
 8005c0a:	2b00      	cmp	r3, #0
 8005c0c:	d1e5      	bne.n	8005bda <UART_Receive_IT+0xfe>

        /* Check if IDLE flag is set */
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE))
 8005c0e:	687b      	ldr	r3, [r7, #4]
 8005c10:	681b      	ldr	r3, [r3, #0]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f003 0310 	and.w	r3, r3, #16
 8005c18:	2b10      	cmp	r3, #16
 8005c1a:	d10a      	bne.n	8005c32 <UART_Receive_IT+0x156>
        {
          /* Clear IDLE flag in ISR */
          __HAL_UART_CLEAR_IDLEFLAG(huart);
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60fb      	str	r3, [r7, #12]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	681b      	ldr	r3, [r3, #0]
 8005c26:	60fb      	str	r3, [r7, #12]
 8005c28:	687b      	ldr	r3, [r7, #4]
 8005c2a:	681b      	ldr	r3, [r3, #0]
 8005c2c:	685b      	ldr	r3, [r3, #4]
 8005c2e:	60fb      	str	r3, [r7, #12]
 8005c30:	68fb      	ldr	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	8d9b      	ldrh	r3, [r3, #44]	@ 0x2c
 8005c36:	4619      	mov	r1, r3
 8005c38:	6878      	ldr	r0, [r7, #4]
 8005c3a:	f7ff fe67 	bl	800590c <HAL_UARTEx_RxEventCallback>
 8005c3e:	e002      	b.n	8005c46 <UART_Receive_IT+0x16a>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxCpltCallback(huart);
#else
        /*Call legacy weak Rx complete callback*/
        HAL_UART_RxCpltCallback(huart);
 8005c40:	6878      	ldr	r0, [r7, #4]
 8005c42:	f7ff fe4f 	bl	80058e4 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }

      return HAL_OK;
 8005c46:	2300      	movs	r3, #0
 8005c48:	e002      	b.n	8005c50 <UART_Receive_IT+0x174>
    }
    return HAL_OK;
 8005c4a:	2300      	movs	r3, #0
 8005c4c:	e000      	b.n	8005c50 <UART_Receive_IT+0x174>
  }
  else
  {
    return HAL_BUSY;
 8005c4e:	2302      	movs	r3, #2
  }
}
 8005c50:	4618      	mov	r0, r3
 8005c52:	3730      	adds	r7, #48	@ 0x30
 8005c54:	46bd      	mov	sp, r7
 8005c56:	bd80      	pop	{r7, pc}

08005c58 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8005c58:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8005c5c:	b0c0      	sub	sp, #256	@ 0x100
 8005c5e:	af00      	add	r7, sp, #0
 8005c60:	f8c7 00f4 	str.w	r0, [r7, #244]	@ 0xf4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8005c64:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c68:	681b      	ldr	r3, [r3, #0]
 8005c6a:	691b      	ldr	r3, [r3, #16]
 8005c6c:	f423 5040 	bic.w	r0, r3, #12288	@ 0x3000
 8005c70:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c74:	68d9      	ldr	r1, [r3, #12]
 8005c76:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c7a:	681a      	ldr	r2, [r3, #0]
 8005c7c:	ea40 0301 	orr.w	r3, r0, r1
 8005c80:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8005c82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c86:	689a      	ldr	r2, [r3, #8]
 8005c88:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c8c:	691b      	ldr	r3, [r3, #16]
 8005c8e:	431a      	orrs	r2, r3
 8005c90:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c94:	695b      	ldr	r3, [r3, #20]
 8005c96:	431a      	orrs	r2, r3
 8005c98:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005c9c:	69db      	ldr	r3, [r3, #28]
 8005c9e:	4313      	orrs	r3, r2
 8005ca0:	f8c7 30f8 	str.w	r3, [r7, #248]	@ 0xf8
  MODIFY_REG(huart->Instance->CR1,
 8005ca4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ca8:	681b      	ldr	r3, [r3, #0]
 8005caa:	68db      	ldr	r3, [r3, #12]
 8005cac:	f423 4116 	bic.w	r1, r3, #38400	@ 0x9600
 8005cb0:	f021 010c 	bic.w	r1, r1, #12
 8005cb4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cb8:	681a      	ldr	r2, [r3, #0]
 8005cba:	f8d7 30f8 	ldr.w	r3, [r7, #248]	@ 0xf8
 8005cbe:	430b      	orrs	r3, r1
 8005cc0:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8005cc2:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cc6:	681b      	ldr	r3, [r3, #0]
 8005cc8:	695b      	ldr	r3, [r3, #20]
 8005cca:	f423 7040 	bic.w	r0, r3, #768	@ 0x300
 8005cce:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd2:	6999      	ldr	r1, [r3, #24]
 8005cd4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cd8:	681a      	ldr	r2, [r3, #0]
 8005cda:	ea40 0301 	orr.w	r3, r0, r1
 8005cde:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8005ce0:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ce4:	681a      	ldr	r2, [r3, #0]
 8005ce6:	4b8f      	ldr	r3, [pc, #572]	@ (8005f24 <UART_SetConfig+0x2cc>)
 8005ce8:	429a      	cmp	r2, r3
 8005cea:	d005      	beq.n	8005cf8 <UART_SetConfig+0xa0>
 8005cec:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005cf0:	681a      	ldr	r2, [r3, #0]
 8005cf2:	4b8d      	ldr	r3, [pc, #564]	@ (8005f28 <UART_SetConfig+0x2d0>)
 8005cf4:	429a      	cmp	r2, r3
 8005cf6:	d104      	bne.n	8005d02 <UART_SetConfig+0xaa>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8005cf8:	f7ff fadc 	bl	80052b4 <HAL_RCC_GetPCLK2Freq>
 8005cfc:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
 8005d00:	e003      	b.n	8005d0a <UART_SetConfig+0xb2>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8005d02:	f7ff fac3 	bl	800528c <HAL_RCC_GetPCLK1Freq>
 8005d06:	f8c7 00fc 	str.w	r0, [r7, #252]	@ 0xfc
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8005d0a:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d0e:	69db      	ldr	r3, [r3, #28]
 8005d10:	f5b3 4f00 	cmp.w	r3, #32768	@ 0x8000
 8005d14:	f040 810c 	bne.w	8005f30 <UART_SetConfig+0x2d8>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8005d18:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005d1c:	2200      	movs	r2, #0
 8005d1e:	f8c7 30e8 	str.w	r3, [r7, #232]	@ 0xe8
 8005d22:	f8c7 20ec 	str.w	r2, [r7, #236]	@ 0xec
 8005d26:	e9d7 453a 	ldrd	r4, r5, [r7, #232]	@ 0xe8
 8005d2a:	4622      	mov	r2, r4
 8005d2c:	462b      	mov	r3, r5
 8005d2e:	1891      	adds	r1, r2, r2
 8005d30:	65b9      	str	r1, [r7, #88]	@ 0x58
 8005d32:	415b      	adcs	r3, r3
 8005d34:	65fb      	str	r3, [r7, #92]	@ 0x5c
 8005d36:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	@ 0x58
 8005d3a:	4621      	mov	r1, r4
 8005d3c:	eb12 0801 	adds.w	r8, r2, r1
 8005d40:	4629      	mov	r1, r5
 8005d42:	eb43 0901 	adc.w	r9, r3, r1
 8005d46:	f04f 0200 	mov.w	r2, #0
 8005d4a:	f04f 0300 	mov.w	r3, #0
 8005d4e:	ea4f 03c9 	mov.w	r3, r9, lsl #3
 8005d52:	ea43 7358 	orr.w	r3, r3, r8, lsr #29
 8005d56:	ea4f 02c8 	mov.w	r2, r8, lsl #3
 8005d5a:	4690      	mov	r8, r2
 8005d5c:	4699      	mov	r9, r3
 8005d5e:	4623      	mov	r3, r4
 8005d60:	eb18 0303 	adds.w	r3, r8, r3
 8005d64:	f8c7 30e0 	str.w	r3, [r7, #224]	@ 0xe0
 8005d68:	462b      	mov	r3, r5
 8005d6a:	eb49 0303 	adc.w	r3, r9, r3
 8005d6e:	f8c7 30e4 	str.w	r3, [r7, #228]	@ 0xe4
 8005d72:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005d76:	685b      	ldr	r3, [r3, #4]
 8005d78:	2200      	movs	r2, #0
 8005d7a:	f8c7 30d8 	str.w	r3, [r7, #216]	@ 0xd8
 8005d7e:	f8c7 20dc 	str.w	r2, [r7, #220]	@ 0xdc
 8005d82:	e9d7 1236 	ldrd	r1, r2, [r7, #216]	@ 0xd8
 8005d86:	460b      	mov	r3, r1
 8005d88:	18db      	adds	r3, r3, r3
 8005d8a:	653b      	str	r3, [r7, #80]	@ 0x50
 8005d8c:	4613      	mov	r3, r2
 8005d8e:	eb42 0303 	adc.w	r3, r2, r3
 8005d92:	657b      	str	r3, [r7, #84]	@ 0x54
 8005d94:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	@ 0x50
 8005d98:	e9d7 0138 	ldrd	r0, r1, [r7, #224]	@ 0xe0
 8005d9c:	f7fa ff5c 	bl	8000c58 <__aeabi_uldivmod>
 8005da0:	4602      	mov	r2, r0
 8005da2:	460b      	mov	r3, r1
 8005da4:	4b61      	ldr	r3, [pc, #388]	@ (8005f2c <UART_SetConfig+0x2d4>)
 8005da6:	fba3 2302 	umull	r2, r3, r3, r2
 8005daa:	095b      	lsrs	r3, r3, #5
 8005dac:	011c      	lsls	r4, r3, #4
 8005dae:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005db2:	2200      	movs	r2, #0
 8005db4:	f8c7 30d0 	str.w	r3, [r7, #208]	@ 0xd0
 8005db8:	f8c7 20d4 	str.w	r2, [r7, #212]	@ 0xd4
 8005dbc:	e9d7 8934 	ldrd	r8, r9, [r7, #208]	@ 0xd0
 8005dc0:	4642      	mov	r2, r8
 8005dc2:	464b      	mov	r3, r9
 8005dc4:	1891      	adds	r1, r2, r2
 8005dc6:	64b9      	str	r1, [r7, #72]	@ 0x48
 8005dc8:	415b      	adcs	r3, r3
 8005dca:	64fb      	str	r3, [r7, #76]	@ 0x4c
 8005dcc:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	@ 0x48
 8005dd0:	4641      	mov	r1, r8
 8005dd2:	eb12 0a01 	adds.w	sl, r2, r1
 8005dd6:	4649      	mov	r1, r9
 8005dd8:	eb43 0b01 	adc.w	fp, r3, r1
 8005ddc:	f04f 0200 	mov.w	r2, #0
 8005de0:	f04f 0300 	mov.w	r3, #0
 8005de4:	ea4f 03cb 	mov.w	r3, fp, lsl #3
 8005de8:	ea43 735a 	orr.w	r3, r3, sl, lsr #29
 8005dec:	ea4f 02ca 	mov.w	r2, sl, lsl #3
 8005df0:	4692      	mov	sl, r2
 8005df2:	469b      	mov	fp, r3
 8005df4:	4643      	mov	r3, r8
 8005df6:	eb1a 0303 	adds.w	r3, sl, r3
 8005dfa:	f8c7 30c8 	str.w	r3, [r7, #200]	@ 0xc8
 8005dfe:	464b      	mov	r3, r9
 8005e00:	eb4b 0303 	adc.w	r3, fp, r3
 8005e04:	f8c7 30cc 	str.w	r3, [r7, #204]	@ 0xcc
 8005e08:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005e0c:	685b      	ldr	r3, [r3, #4]
 8005e0e:	2200      	movs	r2, #0
 8005e10:	f8c7 30c0 	str.w	r3, [r7, #192]	@ 0xc0
 8005e14:	f8c7 20c4 	str.w	r2, [r7, #196]	@ 0xc4
 8005e18:	e9d7 1230 	ldrd	r1, r2, [r7, #192]	@ 0xc0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	18db      	adds	r3, r3, r3
 8005e20:	643b      	str	r3, [r7, #64]	@ 0x40
 8005e22:	4613      	mov	r3, r2
 8005e24:	eb42 0303 	adc.w	r3, r2, r3
 8005e28:	647b      	str	r3, [r7, #68]	@ 0x44
 8005e2a:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	@ 0x40
 8005e2e:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	@ 0xc8
 8005e32:	f7fa ff11 	bl	8000c58 <__aeabi_uldivmod>
 8005e36:	4602      	mov	r2, r0
 8005e38:	460b      	mov	r3, r1
 8005e3a:	4611      	mov	r1, r2
 8005e3c:	4b3b      	ldr	r3, [pc, #236]	@ (8005f2c <UART_SetConfig+0x2d4>)
 8005e3e:	fba3 2301 	umull	r2, r3, r3, r1
 8005e42:	095b      	lsrs	r3, r3, #5
 8005e44:	2264      	movs	r2, #100	@ 0x64
 8005e46:	fb02 f303 	mul.w	r3, r2, r3
 8005e4a:	1acb      	subs	r3, r1, r3
 8005e4c:	00db      	lsls	r3, r3, #3
 8005e4e:	f103 0232 	add.w	r2, r3, #50	@ 0x32
 8005e52:	4b36      	ldr	r3, [pc, #216]	@ (8005f2c <UART_SetConfig+0x2d4>)
 8005e54:	fba3 2302 	umull	r2, r3, r3, r2
 8005e58:	095b      	lsrs	r3, r3, #5
 8005e5a:	005b      	lsls	r3, r3, #1
 8005e5c:	f403 73f8 	and.w	r3, r3, #496	@ 0x1f0
 8005e60:	441c      	add	r4, r3
 8005e62:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005e66:	2200      	movs	r2, #0
 8005e68:	f8c7 30b8 	str.w	r3, [r7, #184]	@ 0xb8
 8005e6c:	f8c7 20bc 	str.w	r2, [r7, #188]	@ 0xbc
 8005e70:	e9d7 892e 	ldrd	r8, r9, [r7, #184]	@ 0xb8
 8005e74:	4642      	mov	r2, r8
 8005e76:	464b      	mov	r3, r9
 8005e78:	1891      	adds	r1, r2, r2
 8005e7a:	63b9      	str	r1, [r7, #56]	@ 0x38
 8005e7c:	415b      	adcs	r3, r3
 8005e7e:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8005e80:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	@ 0x38
 8005e84:	4641      	mov	r1, r8
 8005e86:	1851      	adds	r1, r2, r1
 8005e88:	6339      	str	r1, [r7, #48]	@ 0x30
 8005e8a:	4649      	mov	r1, r9
 8005e8c:	414b      	adcs	r3, r1
 8005e8e:	637b      	str	r3, [r7, #52]	@ 0x34
 8005e90:	f04f 0200 	mov.w	r2, #0
 8005e94:	f04f 0300 	mov.w	r3, #0
 8005e98:	e9d7 ab0c 	ldrd	sl, fp, [r7, #48]	@ 0x30
 8005e9c:	4659      	mov	r1, fp
 8005e9e:	00cb      	lsls	r3, r1, #3
 8005ea0:	4651      	mov	r1, sl
 8005ea2:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8005ea6:	4651      	mov	r1, sl
 8005ea8:	00ca      	lsls	r2, r1, #3
 8005eaa:	4610      	mov	r0, r2
 8005eac:	4619      	mov	r1, r3
 8005eae:	4603      	mov	r3, r0
 8005eb0:	4642      	mov	r2, r8
 8005eb2:	189b      	adds	r3, r3, r2
 8005eb4:	f8c7 30b0 	str.w	r3, [r7, #176]	@ 0xb0
 8005eb8:	464b      	mov	r3, r9
 8005eba:	460a      	mov	r2, r1
 8005ebc:	eb42 0303 	adc.w	r3, r2, r3
 8005ec0:	f8c7 30b4 	str.w	r3, [r7, #180]	@ 0xb4
 8005ec4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005ec8:	685b      	ldr	r3, [r3, #4]
 8005eca:	2200      	movs	r2, #0
 8005ecc:	f8c7 30a8 	str.w	r3, [r7, #168]	@ 0xa8
 8005ed0:	f8c7 20ac 	str.w	r2, [r7, #172]	@ 0xac
 8005ed4:	e9d7 122a 	ldrd	r1, r2, [r7, #168]	@ 0xa8
 8005ed8:	460b      	mov	r3, r1
 8005eda:	18db      	adds	r3, r3, r3
 8005edc:	62bb      	str	r3, [r7, #40]	@ 0x28
 8005ede:	4613      	mov	r3, r2
 8005ee0:	eb42 0303 	adc.w	r3, r2, r3
 8005ee4:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8005ee6:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	@ 0x28
 8005eea:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	@ 0xb0
 8005eee:	f7fa feb3 	bl	8000c58 <__aeabi_uldivmod>
 8005ef2:	4602      	mov	r2, r0
 8005ef4:	460b      	mov	r3, r1
 8005ef6:	4b0d      	ldr	r3, [pc, #52]	@ (8005f2c <UART_SetConfig+0x2d4>)
 8005ef8:	fba3 1302 	umull	r1, r3, r3, r2
 8005efc:	095b      	lsrs	r3, r3, #5
 8005efe:	2164      	movs	r1, #100	@ 0x64
 8005f00:	fb01 f303 	mul.w	r3, r1, r3
 8005f04:	1ad3      	subs	r3, r2, r3
 8005f06:	00db      	lsls	r3, r3, #3
 8005f08:	3332      	adds	r3, #50	@ 0x32
 8005f0a:	4a08      	ldr	r2, [pc, #32]	@ (8005f2c <UART_SetConfig+0x2d4>)
 8005f0c:	fba2 2303 	umull	r2, r3, r2, r3
 8005f10:	095b      	lsrs	r3, r3, #5
 8005f12:	f003 0207 	and.w	r2, r3, #7
 8005f16:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f1a:	681b      	ldr	r3, [r3, #0]
 8005f1c:	4422      	add	r2, r4
 8005f1e:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8005f20:	e106      	b.n	8006130 <UART_SetConfig+0x4d8>
 8005f22:	bf00      	nop
 8005f24:	40011000 	.word	0x40011000
 8005f28:	40011400 	.word	0x40011400
 8005f2c:	51eb851f 	.word	0x51eb851f
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8005f30:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005f34:	2200      	movs	r2, #0
 8005f36:	f8c7 30a0 	str.w	r3, [r7, #160]	@ 0xa0
 8005f3a:	f8c7 20a4 	str.w	r2, [r7, #164]	@ 0xa4
 8005f3e:	e9d7 8928 	ldrd	r8, r9, [r7, #160]	@ 0xa0
 8005f42:	4642      	mov	r2, r8
 8005f44:	464b      	mov	r3, r9
 8005f46:	1891      	adds	r1, r2, r2
 8005f48:	6239      	str	r1, [r7, #32]
 8005f4a:	415b      	adcs	r3, r3
 8005f4c:	627b      	str	r3, [r7, #36]	@ 0x24
 8005f4e:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8005f52:	4641      	mov	r1, r8
 8005f54:	1854      	adds	r4, r2, r1
 8005f56:	4649      	mov	r1, r9
 8005f58:	eb43 0501 	adc.w	r5, r3, r1
 8005f5c:	f04f 0200 	mov.w	r2, #0
 8005f60:	f04f 0300 	mov.w	r3, #0
 8005f64:	00eb      	lsls	r3, r5, #3
 8005f66:	ea43 7354 	orr.w	r3, r3, r4, lsr #29
 8005f6a:	00e2      	lsls	r2, r4, #3
 8005f6c:	4614      	mov	r4, r2
 8005f6e:	461d      	mov	r5, r3
 8005f70:	4643      	mov	r3, r8
 8005f72:	18e3      	adds	r3, r4, r3
 8005f74:	f8c7 3098 	str.w	r3, [r7, #152]	@ 0x98
 8005f78:	464b      	mov	r3, r9
 8005f7a:	eb45 0303 	adc.w	r3, r5, r3
 8005f7e:	f8c7 309c 	str.w	r3, [r7, #156]	@ 0x9c
 8005f82:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8005f86:	685b      	ldr	r3, [r3, #4]
 8005f88:	2200      	movs	r2, #0
 8005f8a:	f8c7 3090 	str.w	r3, [r7, #144]	@ 0x90
 8005f8e:	f8c7 2094 	str.w	r2, [r7, #148]	@ 0x94
 8005f92:	f04f 0200 	mov.w	r2, #0
 8005f96:	f04f 0300 	mov.w	r3, #0
 8005f9a:	e9d7 4524 	ldrd	r4, r5, [r7, #144]	@ 0x90
 8005f9e:	4629      	mov	r1, r5
 8005fa0:	008b      	lsls	r3, r1, #2
 8005fa2:	4621      	mov	r1, r4
 8005fa4:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8005fa8:	4621      	mov	r1, r4
 8005faa:	008a      	lsls	r2, r1, #2
 8005fac:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	@ 0x98
 8005fb0:	f7fa fe52 	bl	8000c58 <__aeabi_uldivmod>
 8005fb4:	4602      	mov	r2, r0
 8005fb6:	460b      	mov	r3, r1
 8005fb8:	4b60      	ldr	r3, [pc, #384]	@ (800613c <UART_SetConfig+0x4e4>)
 8005fba:	fba3 2302 	umull	r2, r3, r3, r2
 8005fbe:	095b      	lsrs	r3, r3, #5
 8005fc0:	011c      	lsls	r4, r3, #4
 8005fc2:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 8005fc6:	2200      	movs	r2, #0
 8005fc8:	f8c7 3088 	str.w	r3, [r7, #136]	@ 0x88
 8005fcc:	f8c7 208c 	str.w	r2, [r7, #140]	@ 0x8c
 8005fd0:	e9d7 8922 	ldrd	r8, r9, [r7, #136]	@ 0x88
 8005fd4:	4642      	mov	r2, r8
 8005fd6:	464b      	mov	r3, r9
 8005fd8:	1891      	adds	r1, r2, r2
 8005fda:	61b9      	str	r1, [r7, #24]
 8005fdc:	415b      	adcs	r3, r3
 8005fde:	61fb      	str	r3, [r7, #28]
 8005fe0:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8005fe4:	4641      	mov	r1, r8
 8005fe6:	1851      	adds	r1, r2, r1
 8005fe8:	6139      	str	r1, [r7, #16]
 8005fea:	4649      	mov	r1, r9
 8005fec:	414b      	adcs	r3, r1
 8005fee:	617b      	str	r3, [r7, #20]
 8005ff0:	f04f 0200 	mov.w	r2, #0
 8005ff4:	f04f 0300 	mov.w	r3, #0
 8005ff8:	e9d7 ab04 	ldrd	sl, fp, [r7, #16]
 8005ffc:	4659      	mov	r1, fp
 8005ffe:	00cb      	lsls	r3, r1, #3
 8006000:	4651      	mov	r1, sl
 8006002:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 8006006:	4651      	mov	r1, sl
 8006008:	00ca      	lsls	r2, r1, #3
 800600a:	4610      	mov	r0, r2
 800600c:	4619      	mov	r1, r3
 800600e:	4603      	mov	r3, r0
 8006010:	4642      	mov	r2, r8
 8006012:	189b      	adds	r3, r3, r2
 8006014:	f8c7 3080 	str.w	r3, [r7, #128]	@ 0x80
 8006018:	464b      	mov	r3, r9
 800601a:	460a      	mov	r2, r1
 800601c:	eb42 0303 	adc.w	r3, r2, r3
 8006020:	f8c7 3084 	str.w	r3, [r7, #132]	@ 0x84
 8006024:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 8006028:	685b      	ldr	r3, [r3, #4]
 800602a:	2200      	movs	r2, #0
 800602c:	67bb      	str	r3, [r7, #120]	@ 0x78
 800602e:	67fa      	str	r2, [r7, #124]	@ 0x7c
 8006030:	f04f 0200 	mov.w	r2, #0
 8006034:	f04f 0300 	mov.w	r3, #0
 8006038:	e9d7 891e 	ldrd	r8, r9, [r7, #120]	@ 0x78
 800603c:	4649      	mov	r1, r9
 800603e:	008b      	lsls	r3, r1, #2
 8006040:	4641      	mov	r1, r8
 8006042:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 8006046:	4641      	mov	r1, r8
 8006048:	008a      	lsls	r2, r1, #2
 800604a:	e9d7 0120 	ldrd	r0, r1, [r7, #128]	@ 0x80
 800604e:	f7fa fe03 	bl	8000c58 <__aeabi_uldivmod>
 8006052:	4602      	mov	r2, r0
 8006054:	460b      	mov	r3, r1
 8006056:	4611      	mov	r1, r2
 8006058:	4b38      	ldr	r3, [pc, #224]	@ (800613c <UART_SetConfig+0x4e4>)
 800605a:	fba3 2301 	umull	r2, r3, r3, r1
 800605e:	095b      	lsrs	r3, r3, #5
 8006060:	2264      	movs	r2, #100	@ 0x64
 8006062:	fb02 f303 	mul.w	r3, r2, r3
 8006066:	1acb      	subs	r3, r1, r3
 8006068:	011b      	lsls	r3, r3, #4
 800606a:	3332      	adds	r3, #50	@ 0x32
 800606c:	4a33      	ldr	r2, [pc, #204]	@ (800613c <UART_SetConfig+0x4e4>)
 800606e:	fba2 2303 	umull	r2, r3, r2, r3
 8006072:	095b      	lsrs	r3, r3, #5
 8006074:	f003 03f0 	and.w	r3, r3, #240	@ 0xf0
 8006078:	441c      	add	r4, r3
 800607a:	f8d7 30fc 	ldr.w	r3, [r7, #252]	@ 0xfc
 800607e:	2200      	movs	r2, #0
 8006080:	673b      	str	r3, [r7, #112]	@ 0x70
 8006082:	677a      	str	r2, [r7, #116]	@ 0x74
 8006084:	e9d7 891c 	ldrd	r8, r9, [r7, #112]	@ 0x70
 8006088:	4642      	mov	r2, r8
 800608a:	464b      	mov	r3, r9
 800608c:	1891      	adds	r1, r2, r2
 800608e:	60b9      	str	r1, [r7, #8]
 8006090:	415b      	adcs	r3, r3
 8006092:	60fb      	str	r3, [r7, #12]
 8006094:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006098:	4641      	mov	r1, r8
 800609a:	1851      	adds	r1, r2, r1
 800609c:	6039      	str	r1, [r7, #0]
 800609e:	4649      	mov	r1, r9
 80060a0:	414b      	adcs	r3, r1
 80060a2:	607b      	str	r3, [r7, #4]
 80060a4:	f04f 0200 	mov.w	r2, #0
 80060a8:	f04f 0300 	mov.w	r3, #0
 80060ac:	e9d7 ab00 	ldrd	sl, fp, [r7]
 80060b0:	4659      	mov	r1, fp
 80060b2:	00cb      	lsls	r3, r1, #3
 80060b4:	4651      	mov	r1, sl
 80060b6:	ea43 7351 	orr.w	r3, r3, r1, lsr #29
 80060ba:	4651      	mov	r1, sl
 80060bc:	00ca      	lsls	r2, r1, #3
 80060be:	4610      	mov	r0, r2
 80060c0:	4619      	mov	r1, r3
 80060c2:	4603      	mov	r3, r0
 80060c4:	4642      	mov	r2, r8
 80060c6:	189b      	adds	r3, r3, r2
 80060c8:	66bb      	str	r3, [r7, #104]	@ 0x68
 80060ca:	464b      	mov	r3, r9
 80060cc:	460a      	mov	r2, r1
 80060ce:	eb42 0303 	adc.w	r3, r2, r3
 80060d2:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80060d4:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	2200      	movs	r2, #0
 80060dc:	663b      	str	r3, [r7, #96]	@ 0x60
 80060de:	667a      	str	r2, [r7, #100]	@ 0x64
 80060e0:	f04f 0200 	mov.w	r2, #0
 80060e4:	f04f 0300 	mov.w	r3, #0
 80060e8:	e9d7 8918 	ldrd	r8, r9, [r7, #96]	@ 0x60
 80060ec:	4649      	mov	r1, r9
 80060ee:	008b      	lsls	r3, r1, #2
 80060f0:	4641      	mov	r1, r8
 80060f2:	ea43 7391 	orr.w	r3, r3, r1, lsr #30
 80060f6:	4641      	mov	r1, r8
 80060f8:	008a      	lsls	r2, r1, #2
 80060fa:	e9d7 011a 	ldrd	r0, r1, [r7, #104]	@ 0x68
 80060fe:	f7fa fdab 	bl	8000c58 <__aeabi_uldivmod>
 8006102:	4602      	mov	r2, r0
 8006104:	460b      	mov	r3, r1
 8006106:	4b0d      	ldr	r3, [pc, #52]	@ (800613c <UART_SetConfig+0x4e4>)
 8006108:	fba3 1302 	umull	r1, r3, r3, r2
 800610c:	095b      	lsrs	r3, r3, #5
 800610e:	2164      	movs	r1, #100	@ 0x64
 8006110:	fb01 f303 	mul.w	r3, r1, r3
 8006114:	1ad3      	subs	r3, r2, r3
 8006116:	011b      	lsls	r3, r3, #4
 8006118:	3332      	adds	r3, #50	@ 0x32
 800611a:	4a08      	ldr	r2, [pc, #32]	@ (800613c <UART_SetConfig+0x4e4>)
 800611c:	fba2 2303 	umull	r2, r3, r2, r3
 8006120:	095b      	lsrs	r3, r3, #5
 8006122:	f003 020f 	and.w	r2, r3, #15
 8006126:	f8d7 30f4 	ldr.w	r3, [r7, #244]	@ 0xf4
 800612a:	681b      	ldr	r3, [r3, #0]
 800612c:	4422      	add	r2, r4
 800612e:	609a      	str	r2, [r3, #8]
}
 8006130:	bf00      	nop
 8006132:	f507 7780 	add.w	r7, r7, #256	@ 0x100
 8006136:	46bd      	mov	sp, r7
 8006138:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800613c:	51eb851f 	.word	0x51eb851f

08006140 <__cvt>:
 8006140:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 8006144:	ec57 6b10 	vmov	r6, r7, d0
 8006148:	2f00      	cmp	r7, #0
 800614a:	460c      	mov	r4, r1
 800614c:	4619      	mov	r1, r3
 800614e:	463b      	mov	r3, r7
 8006150:	bfbb      	ittet	lt
 8006152:	f107 4300 	addlt.w	r3, r7, #2147483648	@ 0x80000000
 8006156:	461f      	movlt	r7, r3
 8006158:	2300      	movge	r3, #0
 800615a:	232d      	movlt	r3, #45	@ 0x2d
 800615c:	700b      	strb	r3, [r1, #0]
 800615e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8006160:	f8dd a030 	ldr.w	sl, [sp, #48]	@ 0x30
 8006164:	4691      	mov	r9, r2
 8006166:	f023 0820 	bic.w	r8, r3, #32
 800616a:	bfbc      	itt	lt
 800616c:	4632      	movlt	r2, r6
 800616e:	4616      	movlt	r6, r2
 8006170:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 8006174:	d005      	beq.n	8006182 <__cvt+0x42>
 8006176:	f1b8 0f45 	cmp.w	r8, #69	@ 0x45
 800617a:	d100      	bne.n	800617e <__cvt+0x3e>
 800617c:	3401      	adds	r4, #1
 800617e:	2102      	movs	r1, #2
 8006180:	e000      	b.n	8006184 <__cvt+0x44>
 8006182:	2103      	movs	r1, #3
 8006184:	ab03      	add	r3, sp, #12
 8006186:	9301      	str	r3, [sp, #4]
 8006188:	ab02      	add	r3, sp, #8
 800618a:	9300      	str	r3, [sp, #0]
 800618c:	ec47 6b10 	vmov	d0, r6, r7
 8006190:	4653      	mov	r3, sl
 8006192:	4622      	mov	r2, r4
 8006194:	f000 ff84 	bl	80070a0 <_dtoa_r>
 8006198:	f1b8 0f47 	cmp.w	r8, #71	@ 0x47
 800619c:	4605      	mov	r5, r0
 800619e:	d119      	bne.n	80061d4 <__cvt+0x94>
 80061a0:	f019 0f01 	tst.w	r9, #1
 80061a4:	d00e      	beq.n	80061c4 <__cvt+0x84>
 80061a6:	eb00 0904 	add.w	r9, r0, r4
 80061aa:	2200      	movs	r2, #0
 80061ac:	2300      	movs	r3, #0
 80061ae:	4630      	mov	r0, r6
 80061b0:	4639      	mov	r1, r7
 80061b2:	f7fa fc91 	bl	8000ad8 <__aeabi_dcmpeq>
 80061b6:	b108      	cbz	r0, 80061bc <__cvt+0x7c>
 80061b8:	f8cd 900c 	str.w	r9, [sp, #12]
 80061bc:	2230      	movs	r2, #48	@ 0x30
 80061be:	9b03      	ldr	r3, [sp, #12]
 80061c0:	454b      	cmp	r3, r9
 80061c2:	d31e      	bcc.n	8006202 <__cvt+0xc2>
 80061c4:	9b03      	ldr	r3, [sp, #12]
 80061c6:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 80061c8:	1b5b      	subs	r3, r3, r5
 80061ca:	4628      	mov	r0, r5
 80061cc:	6013      	str	r3, [r2, #0]
 80061ce:	b004      	add	sp, #16
 80061d0:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80061d4:	f1b8 0f46 	cmp.w	r8, #70	@ 0x46
 80061d8:	eb00 0904 	add.w	r9, r0, r4
 80061dc:	d1e5      	bne.n	80061aa <__cvt+0x6a>
 80061de:	7803      	ldrb	r3, [r0, #0]
 80061e0:	2b30      	cmp	r3, #48	@ 0x30
 80061e2:	d10a      	bne.n	80061fa <__cvt+0xba>
 80061e4:	2200      	movs	r2, #0
 80061e6:	2300      	movs	r3, #0
 80061e8:	4630      	mov	r0, r6
 80061ea:	4639      	mov	r1, r7
 80061ec:	f7fa fc74 	bl	8000ad8 <__aeabi_dcmpeq>
 80061f0:	b918      	cbnz	r0, 80061fa <__cvt+0xba>
 80061f2:	f1c4 0401 	rsb	r4, r4, #1
 80061f6:	f8ca 4000 	str.w	r4, [sl]
 80061fa:	f8da 3000 	ldr.w	r3, [sl]
 80061fe:	4499      	add	r9, r3
 8006200:	e7d3      	b.n	80061aa <__cvt+0x6a>
 8006202:	1c59      	adds	r1, r3, #1
 8006204:	9103      	str	r1, [sp, #12]
 8006206:	701a      	strb	r2, [r3, #0]
 8006208:	e7d9      	b.n	80061be <__cvt+0x7e>

0800620a <__exponent>:
 800620a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800620c:	2900      	cmp	r1, #0
 800620e:	bfba      	itte	lt
 8006210:	4249      	neglt	r1, r1
 8006212:	232d      	movlt	r3, #45	@ 0x2d
 8006214:	232b      	movge	r3, #43	@ 0x2b
 8006216:	2909      	cmp	r1, #9
 8006218:	7002      	strb	r2, [r0, #0]
 800621a:	7043      	strb	r3, [r0, #1]
 800621c:	dd29      	ble.n	8006272 <__exponent+0x68>
 800621e:	f10d 0307 	add.w	r3, sp, #7
 8006222:	461d      	mov	r5, r3
 8006224:	270a      	movs	r7, #10
 8006226:	461a      	mov	r2, r3
 8006228:	fbb1 f6f7 	udiv	r6, r1, r7
 800622c:	fb07 1416 	mls	r4, r7, r6, r1
 8006230:	3430      	adds	r4, #48	@ 0x30
 8006232:	f802 4c01 	strb.w	r4, [r2, #-1]
 8006236:	460c      	mov	r4, r1
 8006238:	2c63      	cmp	r4, #99	@ 0x63
 800623a:	f103 33ff 	add.w	r3, r3, #4294967295
 800623e:	4631      	mov	r1, r6
 8006240:	dcf1      	bgt.n	8006226 <__exponent+0x1c>
 8006242:	3130      	adds	r1, #48	@ 0x30
 8006244:	1e94      	subs	r4, r2, #2
 8006246:	f803 1c01 	strb.w	r1, [r3, #-1]
 800624a:	1c41      	adds	r1, r0, #1
 800624c:	4623      	mov	r3, r4
 800624e:	42ab      	cmp	r3, r5
 8006250:	d30a      	bcc.n	8006268 <__exponent+0x5e>
 8006252:	f10d 0309 	add.w	r3, sp, #9
 8006256:	1a9b      	subs	r3, r3, r2
 8006258:	42ac      	cmp	r4, r5
 800625a:	bf88      	it	hi
 800625c:	2300      	movhi	r3, #0
 800625e:	3302      	adds	r3, #2
 8006260:	4403      	add	r3, r0
 8006262:	1a18      	subs	r0, r3, r0
 8006264:	b003      	add	sp, #12
 8006266:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8006268:	f813 6b01 	ldrb.w	r6, [r3], #1
 800626c:	f801 6f01 	strb.w	r6, [r1, #1]!
 8006270:	e7ed      	b.n	800624e <__exponent+0x44>
 8006272:	2330      	movs	r3, #48	@ 0x30
 8006274:	3130      	adds	r1, #48	@ 0x30
 8006276:	7083      	strb	r3, [r0, #2]
 8006278:	70c1      	strb	r1, [r0, #3]
 800627a:	1d03      	adds	r3, r0, #4
 800627c:	e7f1      	b.n	8006262 <__exponent+0x58>
	...

08006280 <_printf_float>:
 8006280:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006284:	b08d      	sub	sp, #52	@ 0x34
 8006286:	460c      	mov	r4, r1
 8006288:	f8dd 8058 	ldr.w	r8, [sp, #88]	@ 0x58
 800628c:	4616      	mov	r6, r2
 800628e:	461f      	mov	r7, r3
 8006290:	4605      	mov	r5, r0
 8006292:	f000 fe03 	bl	8006e9c <_localeconv_r>
 8006296:	6803      	ldr	r3, [r0, #0]
 8006298:	9304      	str	r3, [sp, #16]
 800629a:	4618      	mov	r0, r3
 800629c:	f7f9 fff0 	bl	8000280 <strlen>
 80062a0:	2300      	movs	r3, #0
 80062a2:	930a      	str	r3, [sp, #40]	@ 0x28
 80062a4:	f8d8 3000 	ldr.w	r3, [r8]
 80062a8:	9005      	str	r0, [sp, #20]
 80062aa:	3307      	adds	r3, #7
 80062ac:	f023 0307 	bic.w	r3, r3, #7
 80062b0:	f103 0208 	add.w	r2, r3, #8
 80062b4:	f894 a018 	ldrb.w	sl, [r4, #24]
 80062b8:	f8d4 b000 	ldr.w	fp, [r4]
 80062bc:	f8c8 2000 	str.w	r2, [r8]
 80062c0:	e9d3 8900 	ldrd	r8, r9, [r3]
 80062c4:	f029 4300 	bic.w	r3, r9, #2147483648	@ 0x80000000
 80062c8:	9307      	str	r3, [sp, #28]
 80062ca:	f8cd 8018 	str.w	r8, [sp, #24]
 80062ce:	e9c4 8912 	strd	r8, r9, [r4, #72]	@ 0x48
 80062d2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062d6:	4b9c      	ldr	r3, [pc, #624]	@ (8006548 <_printf_float+0x2c8>)
 80062d8:	f04f 32ff 	mov.w	r2, #4294967295
 80062dc:	f7fa fc2e 	bl	8000b3c <__aeabi_dcmpun>
 80062e0:	bb70      	cbnz	r0, 8006340 <_printf_float+0xc0>
 80062e2:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80062e6:	4b98      	ldr	r3, [pc, #608]	@ (8006548 <_printf_float+0x2c8>)
 80062e8:	f04f 32ff 	mov.w	r2, #4294967295
 80062ec:	f7fa fc08 	bl	8000b00 <__aeabi_dcmple>
 80062f0:	bb30      	cbnz	r0, 8006340 <_printf_float+0xc0>
 80062f2:	2200      	movs	r2, #0
 80062f4:	2300      	movs	r3, #0
 80062f6:	4640      	mov	r0, r8
 80062f8:	4649      	mov	r1, r9
 80062fa:	f7fa fbf7 	bl	8000aec <__aeabi_dcmplt>
 80062fe:	b110      	cbz	r0, 8006306 <_printf_float+0x86>
 8006300:	232d      	movs	r3, #45	@ 0x2d
 8006302:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006306:	4a91      	ldr	r2, [pc, #580]	@ (800654c <_printf_float+0x2cc>)
 8006308:	4b91      	ldr	r3, [pc, #580]	@ (8006550 <_printf_float+0x2d0>)
 800630a:	f1ba 0f47 	cmp.w	sl, #71	@ 0x47
 800630e:	bf8c      	ite	hi
 8006310:	4690      	movhi	r8, r2
 8006312:	4698      	movls	r8, r3
 8006314:	2303      	movs	r3, #3
 8006316:	6123      	str	r3, [r4, #16]
 8006318:	f02b 0304 	bic.w	r3, fp, #4
 800631c:	6023      	str	r3, [r4, #0]
 800631e:	f04f 0900 	mov.w	r9, #0
 8006322:	9700      	str	r7, [sp, #0]
 8006324:	4633      	mov	r3, r6
 8006326:	aa0b      	add	r2, sp, #44	@ 0x2c
 8006328:	4621      	mov	r1, r4
 800632a:	4628      	mov	r0, r5
 800632c:	f000 f9d2 	bl	80066d4 <_printf_common>
 8006330:	3001      	adds	r0, #1
 8006332:	f040 808d 	bne.w	8006450 <_printf_float+0x1d0>
 8006336:	f04f 30ff 	mov.w	r0, #4294967295
 800633a:	b00d      	add	sp, #52	@ 0x34
 800633c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006340:	4642      	mov	r2, r8
 8006342:	464b      	mov	r3, r9
 8006344:	4640      	mov	r0, r8
 8006346:	4649      	mov	r1, r9
 8006348:	f7fa fbf8 	bl	8000b3c <__aeabi_dcmpun>
 800634c:	b140      	cbz	r0, 8006360 <_printf_float+0xe0>
 800634e:	464b      	mov	r3, r9
 8006350:	2b00      	cmp	r3, #0
 8006352:	bfbc      	itt	lt
 8006354:	232d      	movlt	r3, #45	@ 0x2d
 8006356:	f884 3043 	strblt.w	r3, [r4, #67]	@ 0x43
 800635a:	4a7e      	ldr	r2, [pc, #504]	@ (8006554 <_printf_float+0x2d4>)
 800635c:	4b7e      	ldr	r3, [pc, #504]	@ (8006558 <_printf_float+0x2d8>)
 800635e:	e7d4      	b.n	800630a <_printf_float+0x8a>
 8006360:	6863      	ldr	r3, [r4, #4]
 8006362:	f00a 02df 	and.w	r2, sl, #223	@ 0xdf
 8006366:	9206      	str	r2, [sp, #24]
 8006368:	1c5a      	adds	r2, r3, #1
 800636a:	d13b      	bne.n	80063e4 <_printf_float+0x164>
 800636c:	2306      	movs	r3, #6
 800636e:	6063      	str	r3, [r4, #4]
 8006370:	f44b 6280 	orr.w	r2, fp, #1024	@ 0x400
 8006374:	2300      	movs	r3, #0
 8006376:	6022      	str	r2, [r4, #0]
 8006378:	9303      	str	r3, [sp, #12]
 800637a:	ab0a      	add	r3, sp, #40	@ 0x28
 800637c:	e9cd a301 	strd	sl, r3, [sp, #4]
 8006380:	ab09      	add	r3, sp, #36	@ 0x24
 8006382:	9300      	str	r3, [sp, #0]
 8006384:	6861      	ldr	r1, [r4, #4]
 8006386:	ec49 8b10 	vmov	d0, r8, r9
 800638a:	f10d 0323 	add.w	r3, sp, #35	@ 0x23
 800638e:	4628      	mov	r0, r5
 8006390:	f7ff fed6 	bl	8006140 <__cvt>
 8006394:	9b06      	ldr	r3, [sp, #24]
 8006396:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8006398:	2b47      	cmp	r3, #71	@ 0x47
 800639a:	4680      	mov	r8, r0
 800639c:	d129      	bne.n	80063f2 <_printf_float+0x172>
 800639e:	1cc8      	adds	r0, r1, #3
 80063a0:	db02      	blt.n	80063a8 <_printf_float+0x128>
 80063a2:	6863      	ldr	r3, [r4, #4]
 80063a4:	4299      	cmp	r1, r3
 80063a6:	dd41      	ble.n	800642c <_printf_float+0x1ac>
 80063a8:	f1aa 0a02 	sub.w	sl, sl, #2
 80063ac:	fa5f fa8a 	uxtb.w	sl, sl
 80063b0:	3901      	subs	r1, #1
 80063b2:	4652      	mov	r2, sl
 80063b4:	f104 0050 	add.w	r0, r4, #80	@ 0x50
 80063b8:	9109      	str	r1, [sp, #36]	@ 0x24
 80063ba:	f7ff ff26 	bl	800620a <__exponent>
 80063be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 80063c0:	1813      	adds	r3, r2, r0
 80063c2:	2a01      	cmp	r2, #1
 80063c4:	4681      	mov	r9, r0
 80063c6:	6123      	str	r3, [r4, #16]
 80063c8:	dc02      	bgt.n	80063d0 <_printf_float+0x150>
 80063ca:	6822      	ldr	r2, [r4, #0]
 80063cc:	07d2      	lsls	r2, r2, #31
 80063ce:	d501      	bpl.n	80063d4 <_printf_float+0x154>
 80063d0:	3301      	adds	r3, #1
 80063d2:	6123      	str	r3, [r4, #16]
 80063d4:	f89d 3023 	ldrb.w	r3, [sp, #35]	@ 0x23
 80063d8:	2b00      	cmp	r3, #0
 80063da:	d0a2      	beq.n	8006322 <_printf_float+0xa2>
 80063dc:	232d      	movs	r3, #45	@ 0x2d
 80063de:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 80063e2:	e79e      	b.n	8006322 <_printf_float+0xa2>
 80063e4:	9a06      	ldr	r2, [sp, #24]
 80063e6:	2a47      	cmp	r2, #71	@ 0x47
 80063e8:	d1c2      	bne.n	8006370 <_printf_float+0xf0>
 80063ea:	2b00      	cmp	r3, #0
 80063ec:	d1c0      	bne.n	8006370 <_printf_float+0xf0>
 80063ee:	2301      	movs	r3, #1
 80063f0:	e7bd      	b.n	800636e <_printf_float+0xee>
 80063f2:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 80063f6:	d9db      	bls.n	80063b0 <_printf_float+0x130>
 80063f8:	f1ba 0f66 	cmp.w	sl, #102	@ 0x66
 80063fc:	d118      	bne.n	8006430 <_printf_float+0x1b0>
 80063fe:	2900      	cmp	r1, #0
 8006400:	6863      	ldr	r3, [r4, #4]
 8006402:	dd0b      	ble.n	800641c <_printf_float+0x19c>
 8006404:	6121      	str	r1, [r4, #16]
 8006406:	b913      	cbnz	r3, 800640e <_printf_float+0x18e>
 8006408:	6822      	ldr	r2, [r4, #0]
 800640a:	07d0      	lsls	r0, r2, #31
 800640c:	d502      	bpl.n	8006414 <_printf_float+0x194>
 800640e:	3301      	adds	r3, #1
 8006410:	440b      	add	r3, r1
 8006412:	6123      	str	r3, [r4, #16]
 8006414:	65a1      	str	r1, [r4, #88]	@ 0x58
 8006416:	f04f 0900 	mov.w	r9, #0
 800641a:	e7db      	b.n	80063d4 <_printf_float+0x154>
 800641c:	b913      	cbnz	r3, 8006424 <_printf_float+0x1a4>
 800641e:	6822      	ldr	r2, [r4, #0]
 8006420:	07d2      	lsls	r2, r2, #31
 8006422:	d501      	bpl.n	8006428 <_printf_float+0x1a8>
 8006424:	3302      	adds	r3, #2
 8006426:	e7f4      	b.n	8006412 <_printf_float+0x192>
 8006428:	2301      	movs	r3, #1
 800642a:	e7f2      	b.n	8006412 <_printf_float+0x192>
 800642c:	f04f 0a67 	mov.w	sl, #103	@ 0x67
 8006430:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8006432:	4299      	cmp	r1, r3
 8006434:	db05      	blt.n	8006442 <_printf_float+0x1c2>
 8006436:	6823      	ldr	r3, [r4, #0]
 8006438:	6121      	str	r1, [r4, #16]
 800643a:	07d8      	lsls	r0, r3, #31
 800643c:	d5ea      	bpl.n	8006414 <_printf_float+0x194>
 800643e:	1c4b      	adds	r3, r1, #1
 8006440:	e7e7      	b.n	8006412 <_printf_float+0x192>
 8006442:	2900      	cmp	r1, #0
 8006444:	bfd4      	ite	le
 8006446:	f1c1 0202 	rsble	r2, r1, #2
 800644a:	2201      	movgt	r2, #1
 800644c:	4413      	add	r3, r2
 800644e:	e7e0      	b.n	8006412 <_printf_float+0x192>
 8006450:	6823      	ldr	r3, [r4, #0]
 8006452:	055a      	lsls	r2, r3, #21
 8006454:	d407      	bmi.n	8006466 <_printf_float+0x1e6>
 8006456:	6923      	ldr	r3, [r4, #16]
 8006458:	4642      	mov	r2, r8
 800645a:	4631      	mov	r1, r6
 800645c:	4628      	mov	r0, r5
 800645e:	47b8      	blx	r7
 8006460:	3001      	adds	r0, #1
 8006462:	d12b      	bne.n	80064bc <_printf_float+0x23c>
 8006464:	e767      	b.n	8006336 <_printf_float+0xb6>
 8006466:	f1ba 0f65 	cmp.w	sl, #101	@ 0x65
 800646a:	f240 80dd 	bls.w	8006628 <_printf_float+0x3a8>
 800646e:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 8006472:	2200      	movs	r2, #0
 8006474:	2300      	movs	r3, #0
 8006476:	f7fa fb2f 	bl	8000ad8 <__aeabi_dcmpeq>
 800647a:	2800      	cmp	r0, #0
 800647c:	d033      	beq.n	80064e6 <_printf_float+0x266>
 800647e:	4a37      	ldr	r2, [pc, #220]	@ (800655c <_printf_float+0x2dc>)
 8006480:	2301      	movs	r3, #1
 8006482:	4631      	mov	r1, r6
 8006484:	4628      	mov	r0, r5
 8006486:	47b8      	blx	r7
 8006488:	3001      	adds	r0, #1
 800648a:	f43f af54 	beq.w	8006336 <_printf_float+0xb6>
 800648e:	e9dd 3809 	ldrd	r3, r8, [sp, #36]	@ 0x24
 8006492:	4543      	cmp	r3, r8
 8006494:	db02      	blt.n	800649c <_printf_float+0x21c>
 8006496:	6823      	ldr	r3, [r4, #0]
 8006498:	07d8      	lsls	r0, r3, #31
 800649a:	d50f      	bpl.n	80064bc <_printf_float+0x23c>
 800649c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80064a0:	4631      	mov	r1, r6
 80064a2:	4628      	mov	r0, r5
 80064a4:	47b8      	blx	r7
 80064a6:	3001      	adds	r0, #1
 80064a8:	f43f af45 	beq.w	8006336 <_printf_float+0xb6>
 80064ac:	f04f 0900 	mov.w	r9, #0
 80064b0:	f108 38ff 	add.w	r8, r8, #4294967295
 80064b4:	f104 0a1a 	add.w	sl, r4, #26
 80064b8:	45c8      	cmp	r8, r9
 80064ba:	dc09      	bgt.n	80064d0 <_printf_float+0x250>
 80064bc:	6823      	ldr	r3, [r4, #0]
 80064be:	079b      	lsls	r3, r3, #30
 80064c0:	f100 8103 	bmi.w	80066ca <_printf_float+0x44a>
 80064c4:	68e0      	ldr	r0, [r4, #12]
 80064c6:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 80064c8:	4298      	cmp	r0, r3
 80064ca:	bfb8      	it	lt
 80064cc:	4618      	movlt	r0, r3
 80064ce:	e734      	b.n	800633a <_printf_float+0xba>
 80064d0:	2301      	movs	r3, #1
 80064d2:	4652      	mov	r2, sl
 80064d4:	4631      	mov	r1, r6
 80064d6:	4628      	mov	r0, r5
 80064d8:	47b8      	blx	r7
 80064da:	3001      	adds	r0, #1
 80064dc:	f43f af2b 	beq.w	8006336 <_printf_float+0xb6>
 80064e0:	f109 0901 	add.w	r9, r9, #1
 80064e4:	e7e8      	b.n	80064b8 <_printf_float+0x238>
 80064e6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80064e8:	2b00      	cmp	r3, #0
 80064ea:	dc39      	bgt.n	8006560 <_printf_float+0x2e0>
 80064ec:	4a1b      	ldr	r2, [pc, #108]	@ (800655c <_printf_float+0x2dc>)
 80064ee:	2301      	movs	r3, #1
 80064f0:	4631      	mov	r1, r6
 80064f2:	4628      	mov	r0, r5
 80064f4:	47b8      	blx	r7
 80064f6:	3001      	adds	r0, #1
 80064f8:	f43f af1d 	beq.w	8006336 <_printf_float+0xb6>
 80064fc:	e9dd 3909 	ldrd	r3, r9, [sp, #36]	@ 0x24
 8006500:	ea59 0303 	orrs.w	r3, r9, r3
 8006504:	d102      	bne.n	800650c <_printf_float+0x28c>
 8006506:	6823      	ldr	r3, [r4, #0]
 8006508:	07d9      	lsls	r1, r3, #31
 800650a:	d5d7      	bpl.n	80064bc <_printf_float+0x23c>
 800650c:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8006510:	4631      	mov	r1, r6
 8006512:	4628      	mov	r0, r5
 8006514:	47b8      	blx	r7
 8006516:	3001      	adds	r0, #1
 8006518:	f43f af0d 	beq.w	8006336 <_printf_float+0xb6>
 800651c:	f04f 0a00 	mov.w	sl, #0
 8006520:	f104 0b1a 	add.w	fp, r4, #26
 8006524:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006526:	425b      	negs	r3, r3
 8006528:	4553      	cmp	r3, sl
 800652a:	dc01      	bgt.n	8006530 <_printf_float+0x2b0>
 800652c:	464b      	mov	r3, r9
 800652e:	e793      	b.n	8006458 <_printf_float+0x1d8>
 8006530:	2301      	movs	r3, #1
 8006532:	465a      	mov	r2, fp
 8006534:	4631      	mov	r1, r6
 8006536:	4628      	mov	r0, r5
 8006538:	47b8      	blx	r7
 800653a:	3001      	adds	r0, #1
 800653c:	f43f aefb 	beq.w	8006336 <_printf_float+0xb6>
 8006540:	f10a 0a01 	add.w	sl, sl, #1
 8006544:	e7ee      	b.n	8006524 <_printf_float+0x2a4>
 8006546:	bf00      	nop
 8006548:	7fefffff 	.word	0x7fefffff
 800654c:	080091d8 	.word	0x080091d8
 8006550:	080091d4 	.word	0x080091d4
 8006554:	080091e0 	.word	0x080091e0
 8006558:	080091dc 	.word	0x080091dc
 800655c:	080091e4 	.word	0x080091e4
 8006560:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006562:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 8006566:	4553      	cmp	r3, sl
 8006568:	bfa8      	it	ge
 800656a:	4653      	movge	r3, sl
 800656c:	2b00      	cmp	r3, #0
 800656e:	4699      	mov	r9, r3
 8006570:	dc36      	bgt.n	80065e0 <_printf_float+0x360>
 8006572:	f04f 0b00 	mov.w	fp, #0
 8006576:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 800657a:	f104 021a 	add.w	r2, r4, #26
 800657e:	6da3      	ldr	r3, [r4, #88]	@ 0x58
 8006580:	9306      	str	r3, [sp, #24]
 8006582:	eba3 0309 	sub.w	r3, r3, r9
 8006586:	455b      	cmp	r3, fp
 8006588:	dc31      	bgt.n	80065ee <_printf_float+0x36e>
 800658a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800658c:	459a      	cmp	sl, r3
 800658e:	dc3a      	bgt.n	8006606 <_printf_float+0x386>
 8006590:	6823      	ldr	r3, [r4, #0]
 8006592:	07da      	lsls	r2, r3, #31
 8006594:	d437      	bmi.n	8006606 <_printf_float+0x386>
 8006596:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8006598:	ebaa 0903 	sub.w	r9, sl, r3
 800659c:	9b06      	ldr	r3, [sp, #24]
 800659e:	ebaa 0303 	sub.w	r3, sl, r3
 80065a2:	4599      	cmp	r9, r3
 80065a4:	bfa8      	it	ge
 80065a6:	4699      	movge	r9, r3
 80065a8:	f1b9 0f00 	cmp.w	r9, #0
 80065ac:	dc33      	bgt.n	8006616 <_printf_float+0x396>
 80065ae:	f04f 0800 	mov.w	r8, #0
 80065b2:	ea29 79e9 	bic.w	r9, r9, r9, asr #31
 80065b6:	f104 0b1a 	add.w	fp, r4, #26
 80065ba:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80065bc:	ebaa 0303 	sub.w	r3, sl, r3
 80065c0:	eba3 0309 	sub.w	r3, r3, r9
 80065c4:	4543      	cmp	r3, r8
 80065c6:	f77f af79 	ble.w	80064bc <_printf_float+0x23c>
 80065ca:	2301      	movs	r3, #1
 80065cc:	465a      	mov	r2, fp
 80065ce:	4631      	mov	r1, r6
 80065d0:	4628      	mov	r0, r5
 80065d2:	47b8      	blx	r7
 80065d4:	3001      	adds	r0, #1
 80065d6:	f43f aeae 	beq.w	8006336 <_printf_float+0xb6>
 80065da:	f108 0801 	add.w	r8, r8, #1
 80065de:	e7ec      	b.n	80065ba <_printf_float+0x33a>
 80065e0:	4642      	mov	r2, r8
 80065e2:	4631      	mov	r1, r6
 80065e4:	4628      	mov	r0, r5
 80065e6:	47b8      	blx	r7
 80065e8:	3001      	adds	r0, #1
 80065ea:	d1c2      	bne.n	8006572 <_printf_float+0x2f2>
 80065ec:	e6a3      	b.n	8006336 <_printf_float+0xb6>
 80065ee:	2301      	movs	r3, #1
 80065f0:	4631      	mov	r1, r6
 80065f2:	4628      	mov	r0, r5
 80065f4:	9206      	str	r2, [sp, #24]
 80065f6:	47b8      	blx	r7
 80065f8:	3001      	adds	r0, #1
 80065fa:	f43f ae9c 	beq.w	8006336 <_printf_float+0xb6>
 80065fe:	9a06      	ldr	r2, [sp, #24]
 8006600:	f10b 0b01 	add.w	fp, fp, #1
 8006604:	e7bb      	b.n	800657e <_printf_float+0x2fe>
 8006606:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800660a:	4631      	mov	r1, r6
 800660c:	4628      	mov	r0, r5
 800660e:	47b8      	blx	r7
 8006610:	3001      	adds	r0, #1
 8006612:	d1c0      	bne.n	8006596 <_printf_float+0x316>
 8006614:	e68f      	b.n	8006336 <_printf_float+0xb6>
 8006616:	9a06      	ldr	r2, [sp, #24]
 8006618:	464b      	mov	r3, r9
 800661a:	4442      	add	r2, r8
 800661c:	4631      	mov	r1, r6
 800661e:	4628      	mov	r0, r5
 8006620:	47b8      	blx	r7
 8006622:	3001      	adds	r0, #1
 8006624:	d1c3      	bne.n	80065ae <_printf_float+0x32e>
 8006626:	e686      	b.n	8006336 <_printf_float+0xb6>
 8006628:	f8dd a028 	ldr.w	sl, [sp, #40]	@ 0x28
 800662c:	f1ba 0f01 	cmp.w	sl, #1
 8006630:	dc01      	bgt.n	8006636 <_printf_float+0x3b6>
 8006632:	07db      	lsls	r3, r3, #31
 8006634:	d536      	bpl.n	80066a4 <_printf_float+0x424>
 8006636:	2301      	movs	r3, #1
 8006638:	4642      	mov	r2, r8
 800663a:	4631      	mov	r1, r6
 800663c:	4628      	mov	r0, r5
 800663e:	47b8      	blx	r7
 8006640:	3001      	adds	r0, #1
 8006642:	f43f ae78 	beq.w	8006336 <_printf_float+0xb6>
 8006646:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800664a:	4631      	mov	r1, r6
 800664c:	4628      	mov	r0, r5
 800664e:	47b8      	blx	r7
 8006650:	3001      	adds	r0, #1
 8006652:	f43f ae70 	beq.w	8006336 <_printf_float+0xb6>
 8006656:	e9d4 0112 	ldrd	r0, r1, [r4, #72]	@ 0x48
 800665a:	2200      	movs	r2, #0
 800665c:	2300      	movs	r3, #0
 800665e:	f10a 3aff 	add.w	sl, sl, #4294967295
 8006662:	f7fa fa39 	bl	8000ad8 <__aeabi_dcmpeq>
 8006666:	b9c0      	cbnz	r0, 800669a <_printf_float+0x41a>
 8006668:	4653      	mov	r3, sl
 800666a:	f108 0201 	add.w	r2, r8, #1
 800666e:	4631      	mov	r1, r6
 8006670:	4628      	mov	r0, r5
 8006672:	47b8      	blx	r7
 8006674:	3001      	adds	r0, #1
 8006676:	d10c      	bne.n	8006692 <_printf_float+0x412>
 8006678:	e65d      	b.n	8006336 <_printf_float+0xb6>
 800667a:	2301      	movs	r3, #1
 800667c:	465a      	mov	r2, fp
 800667e:	4631      	mov	r1, r6
 8006680:	4628      	mov	r0, r5
 8006682:	47b8      	blx	r7
 8006684:	3001      	adds	r0, #1
 8006686:	f43f ae56 	beq.w	8006336 <_printf_float+0xb6>
 800668a:	f108 0801 	add.w	r8, r8, #1
 800668e:	45d0      	cmp	r8, sl
 8006690:	dbf3      	blt.n	800667a <_printf_float+0x3fa>
 8006692:	464b      	mov	r3, r9
 8006694:	f104 0250 	add.w	r2, r4, #80	@ 0x50
 8006698:	e6df      	b.n	800645a <_printf_float+0x1da>
 800669a:	f04f 0800 	mov.w	r8, #0
 800669e:	f104 0b1a 	add.w	fp, r4, #26
 80066a2:	e7f4      	b.n	800668e <_printf_float+0x40e>
 80066a4:	2301      	movs	r3, #1
 80066a6:	4642      	mov	r2, r8
 80066a8:	e7e1      	b.n	800666e <_printf_float+0x3ee>
 80066aa:	2301      	movs	r3, #1
 80066ac:	464a      	mov	r2, r9
 80066ae:	4631      	mov	r1, r6
 80066b0:	4628      	mov	r0, r5
 80066b2:	47b8      	blx	r7
 80066b4:	3001      	adds	r0, #1
 80066b6:	f43f ae3e 	beq.w	8006336 <_printf_float+0xb6>
 80066ba:	f108 0801 	add.w	r8, r8, #1
 80066be:	68e3      	ldr	r3, [r4, #12]
 80066c0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 80066c2:	1a5b      	subs	r3, r3, r1
 80066c4:	4543      	cmp	r3, r8
 80066c6:	dcf0      	bgt.n	80066aa <_printf_float+0x42a>
 80066c8:	e6fc      	b.n	80064c4 <_printf_float+0x244>
 80066ca:	f04f 0800 	mov.w	r8, #0
 80066ce:	f104 0919 	add.w	r9, r4, #25
 80066d2:	e7f4      	b.n	80066be <_printf_float+0x43e>

080066d4 <_printf_common>:
 80066d4:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 80066d8:	4616      	mov	r6, r2
 80066da:	4698      	mov	r8, r3
 80066dc:	688a      	ldr	r2, [r1, #8]
 80066de:	690b      	ldr	r3, [r1, #16]
 80066e0:	f8dd 9020 	ldr.w	r9, [sp, #32]
 80066e4:	4293      	cmp	r3, r2
 80066e6:	bfb8      	it	lt
 80066e8:	4613      	movlt	r3, r2
 80066ea:	6033      	str	r3, [r6, #0]
 80066ec:	f891 2043 	ldrb.w	r2, [r1, #67]	@ 0x43
 80066f0:	4607      	mov	r7, r0
 80066f2:	460c      	mov	r4, r1
 80066f4:	b10a      	cbz	r2, 80066fa <_printf_common+0x26>
 80066f6:	3301      	adds	r3, #1
 80066f8:	6033      	str	r3, [r6, #0]
 80066fa:	6823      	ldr	r3, [r4, #0]
 80066fc:	0699      	lsls	r1, r3, #26
 80066fe:	bf42      	ittt	mi
 8006700:	6833      	ldrmi	r3, [r6, #0]
 8006702:	3302      	addmi	r3, #2
 8006704:	6033      	strmi	r3, [r6, #0]
 8006706:	6825      	ldr	r5, [r4, #0]
 8006708:	f015 0506 	ands.w	r5, r5, #6
 800670c:	d106      	bne.n	800671c <_printf_common+0x48>
 800670e:	f104 0a19 	add.w	sl, r4, #25
 8006712:	68e3      	ldr	r3, [r4, #12]
 8006714:	6832      	ldr	r2, [r6, #0]
 8006716:	1a9b      	subs	r3, r3, r2
 8006718:	42ab      	cmp	r3, r5
 800671a:	dc26      	bgt.n	800676a <_printf_common+0x96>
 800671c:	f894 3043 	ldrb.w	r3, [r4, #67]	@ 0x43
 8006720:	6822      	ldr	r2, [r4, #0]
 8006722:	3b00      	subs	r3, #0
 8006724:	bf18      	it	ne
 8006726:	2301      	movne	r3, #1
 8006728:	0692      	lsls	r2, r2, #26
 800672a:	d42b      	bmi.n	8006784 <_printf_common+0xb0>
 800672c:	f104 0243 	add.w	r2, r4, #67	@ 0x43
 8006730:	4641      	mov	r1, r8
 8006732:	4638      	mov	r0, r7
 8006734:	47c8      	blx	r9
 8006736:	3001      	adds	r0, #1
 8006738:	d01e      	beq.n	8006778 <_printf_common+0xa4>
 800673a:	6823      	ldr	r3, [r4, #0]
 800673c:	6922      	ldr	r2, [r4, #16]
 800673e:	f003 0306 	and.w	r3, r3, #6
 8006742:	2b04      	cmp	r3, #4
 8006744:	bf02      	ittt	eq
 8006746:	68e5      	ldreq	r5, [r4, #12]
 8006748:	6833      	ldreq	r3, [r6, #0]
 800674a:	1aed      	subeq	r5, r5, r3
 800674c:	68a3      	ldr	r3, [r4, #8]
 800674e:	bf0c      	ite	eq
 8006750:	ea25 75e5 	biceq.w	r5, r5, r5, asr #31
 8006754:	2500      	movne	r5, #0
 8006756:	4293      	cmp	r3, r2
 8006758:	bfc4      	itt	gt
 800675a:	1a9b      	subgt	r3, r3, r2
 800675c:	18ed      	addgt	r5, r5, r3
 800675e:	2600      	movs	r6, #0
 8006760:	341a      	adds	r4, #26
 8006762:	42b5      	cmp	r5, r6
 8006764:	d11a      	bne.n	800679c <_printf_common+0xc8>
 8006766:	2000      	movs	r0, #0
 8006768:	e008      	b.n	800677c <_printf_common+0xa8>
 800676a:	2301      	movs	r3, #1
 800676c:	4652      	mov	r2, sl
 800676e:	4641      	mov	r1, r8
 8006770:	4638      	mov	r0, r7
 8006772:	47c8      	blx	r9
 8006774:	3001      	adds	r0, #1
 8006776:	d103      	bne.n	8006780 <_printf_common+0xac>
 8006778:	f04f 30ff 	mov.w	r0, #4294967295
 800677c:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006780:	3501      	adds	r5, #1
 8006782:	e7c6      	b.n	8006712 <_printf_common+0x3e>
 8006784:	18e1      	adds	r1, r4, r3
 8006786:	1c5a      	adds	r2, r3, #1
 8006788:	2030      	movs	r0, #48	@ 0x30
 800678a:	f881 0043 	strb.w	r0, [r1, #67]	@ 0x43
 800678e:	4422      	add	r2, r4
 8006790:	f894 1045 	ldrb.w	r1, [r4, #69]	@ 0x45
 8006794:	f882 1043 	strb.w	r1, [r2, #67]	@ 0x43
 8006798:	3302      	adds	r3, #2
 800679a:	e7c7      	b.n	800672c <_printf_common+0x58>
 800679c:	2301      	movs	r3, #1
 800679e:	4622      	mov	r2, r4
 80067a0:	4641      	mov	r1, r8
 80067a2:	4638      	mov	r0, r7
 80067a4:	47c8      	blx	r9
 80067a6:	3001      	adds	r0, #1
 80067a8:	d0e6      	beq.n	8006778 <_printf_common+0xa4>
 80067aa:	3601      	adds	r6, #1
 80067ac:	e7d9      	b.n	8006762 <_printf_common+0x8e>
	...

080067b0 <_printf_i>:
 80067b0:	e92d 47ff 	stmdb	sp!, {r0, r1, r2, r3, r4, r5, r6, r7, r8, r9, sl, lr}
 80067b4:	7e0f      	ldrb	r7, [r1, #24]
 80067b6:	9e0c      	ldr	r6, [sp, #48]	@ 0x30
 80067b8:	2f78      	cmp	r7, #120	@ 0x78
 80067ba:	4691      	mov	r9, r2
 80067bc:	4680      	mov	r8, r0
 80067be:	460c      	mov	r4, r1
 80067c0:	469a      	mov	sl, r3
 80067c2:	f101 0243 	add.w	r2, r1, #67	@ 0x43
 80067c6:	d807      	bhi.n	80067d8 <_printf_i+0x28>
 80067c8:	2f62      	cmp	r7, #98	@ 0x62
 80067ca:	d80a      	bhi.n	80067e2 <_printf_i+0x32>
 80067cc:	2f00      	cmp	r7, #0
 80067ce:	f000 80d1 	beq.w	8006974 <_printf_i+0x1c4>
 80067d2:	2f58      	cmp	r7, #88	@ 0x58
 80067d4:	f000 80b8 	beq.w	8006948 <_printf_i+0x198>
 80067d8:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 80067dc:	f884 7042 	strb.w	r7, [r4, #66]	@ 0x42
 80067e0:	e03a      	b.n	8006858 <_printf_i+0xa8>
 80067e2:	f1a7 0363 	sub.w	r3, r7, #99	@ 0x63
 80067e6:	2b15      	cmp	r3, #21
 80067e8:	d8f6      	bhi.n	80067d8 <_printf_i+0x28>
 80067ea:	a101      	add	r1, pc, #4	@ (adr r1, 80067f0 <_printf_i+0x40>)
 80067ec:	f851 f023 	ldr.w	pc, [r1, r3, lsl #2]
 80067f0:	08006849 	.word	0x08006849
 80067f4:	0800685d 	.word	0x0800685d
 80067f8:	080067d9 	.word	0x080067d9
 80067fc:	080067d9 	.word	0x080067d9
 8006800:	080067d9 	.word	0x080067d9
 8006804:	080067d9 	.word	0x080067d9
 8006808:	0800685d 	.word	0x0800685d
 800680c:	080067d9 	.word	0x080067d9
 8006810:	080067d9 	.word	0x080067d9
 8006814:	080067d9 	.word	0x080067d9
 8006818:	080067d9 	.word	0x080067d9
 800681c:	0800695b 	.word	0x0800695b
 8006820:	08006887 	.word	0x08006887
 8006824:	08006915 	.word	0x08006915
 8006828:	080067d9 	.word	0x080067d9
 800682c:	080067d9 	.word	0x080067d9
 8006830:	0800697d 	.word	0x0800697d
 8006834:	080067d9 	.word	0x080067d9
 8006838:	08006887 	.word	0x08006887
 800683c:	080067d9 	.word	0x080067d9
 8006840:	080067d9 	.word	0x080067d9
 8006844:	0800691d 	.word	0x0800691d
 8006848:	6833      	ldr	r3, [r6, #0]
 800684a:	1d1a      	adds	r2, r3, #4
 800684c:	681b      	ldr	r3, [r3, #0]
 800684e:	6032      	str	r2, [r6, #0]
 8006850:	f104 0642 	add.w	r6, r4, #66	@ 0x42
 8006854:	f884 3042 	strb.w	r3, [r4, #66]	@ 0x42
 8006858:	2301      	movs	r3, #1
 800685a:	e09c      	b.n	8006996 <_printf_i+0x1e6>
 800685c:	6833      	ldr	r3, [r6, #0]
 800685e:	6820      	ldr	r0, [r4, #0]
 8006860:	1d19      	adds	r1, r3, #4
 8006862:	6031      	str	r1, [r6, #0]
 8006864:	0606      	lsls	r6, r0, #24
 8006866:	d501      	bpl.n	800686c <_printf_i+0xbc>
 8006868:	681d      	ldr	r5, [r3, #0]
 800686a:	e003      	b.n	8006874 <_printf_i+0xc4>
 800686c:	0645      	lsls	r5, r0, #25
 800686e:	d5fb      	bpl.n	8006868 <_printf_i+0xb8>
 8006870:	f9b3 5000 	ldrsh.w	r5, [r3]
 8006874:	2d00      	cmp	r5, #0
 8006876:	da03      	bge.n	8006880 <_printf_i+0xd0>
 8006878:	232d      	movs	r3, #45	@ 0x2d
 800687a:	426d      	negs	r5, r5
 800687c:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 8006880:	4858      	ldr	r0, [pc, #352]	@ (80069e4 <_printf_i+0x234>)
 8006882:	230a      	movs	r3, #10
 8006884:	e011      	b.n	80068aa <_printf_i+0xfa>
 8006886:	6821      	ldr	r1, [r4, #0]
 8006888:	6833      	ldr	r3, [r6, #0]
 800688a:	0608      	lsls	r0, r1, #24
 800688c:	f853 5b04 	ldr.w	r5, [r3], #4
 8006890:	d402      	bmi.n	8006898 <_printf_i+0xe8>
 8006892:	0649      	lsls	r1, r1, #25
 8006894:	bf48      	it	mi
 8006896:	b2ad      	uxthmi	r5, r5
 8006898:	2f6f      	cmp	r7, #111	@ 0x6f
 800689a:	4852      	ldr	r0, [pc, #328]	@ (80069e4 <_printf_i+0x234>)
 800689c:	6033      	str	r3, [r6, #0]
 800689e:	bf14      	ite	ne
 80068a0:	230a      	movne	r3, #10
 80068a2:	2308      	moveq	r3, #8
 80068a4:	2100      	movs	r1, #0
 80068a6:	f884 1043 	strb.w	r1, [r4, #67]	@ 0x43
 80068aa:	6866      	ldr	r6, [r4, #4]
 80068ac:	60a6      	str	r6, [r4, #8]
 80068ae:	2e00      	cmp	r6, #0
 80068b0:	db05      	blt.n	80068be <_printf_i+0x10e>
 80068b2:	6821      	ldr	r1, [r4, #0]
 80068b4:	432e      	orrs	r6, r5
 80068b6:	f021 0104 	bic.w	r1, r1, #4
 80068ba:	6021      	str	r1, [r4, #0]
 80068bc:	d04b      	beq.n	8006956 <_printf_i+0x1a6>
 80068be:	4616      	mov	r6, r2
 80068c0:	fbb5 f1f3 	udiv	r1, r5, r3
 80068c4:	fb03 5711 	mls	r7, r3, r1, r5
 80068c8:	5dc7      	ldrb	r7, [r0, r7]
 80068ca:	f806 7d01 	strb.w	r7, [r6, #-1]!
 80068ce:	462f      	mov	r7, r5
 80068d0:	42bb      	cmp	r3, r7
 80068d2:	460d      	mov	r5, r1
 80068d4:	d9f4      	bls.n	80068c0 <_printf_i+0x110>
 80068d6:	2b08      	cmp	r3, #8
 80068d8:	d10b      	bne.n	80068f2 <_printf_i+0x142>
 80068da:	6823      	ldr	r3, [r4, #0]
 80068dc:	07df      	lsls	r7, r3, #31
 80068de:	d508      	bpl.n	80068f2 <_printf_i+0x142>
 80068e0:	6923      	ldr	r3, [r4, #16]
 80068e2:	6861      	ldr	r1, [r4, #4]
 80068e4:	4299      	cmp	r1, r3
 80068e6:	bfde      	ittt	le
 80068e8:	2330      	movle	r3, #48	@ 0x30
 80068ea:	f806 3c01 	strble.w	r3, [r6, #-1]
 80068ee:	f106 36ff 	addle.w	r6, r6, #4294967295
 80068f2:	1b92      	subs	r2, r2, r6
 80068f4:	6122      	str	r2, [r4, #16]
 80068f6:	f8cd a000 	str.w	sl, [sp]
 80068fa:	464b      	mov	r3, r9
 80068fc:	aa03      	add	r2, sp, #12
 80068fe:	4621      	mov	r1, r4
 8006900:	4640      	mov	r0, r8
 8006902:	f7ff fee7 	bl	80066d4 <_printf_common>
 8006906:	3001      	adds	r0, #1
 8006908:	d14a      	bne.n	80069a0 <_printf_i+0x1f0>
 800690a:	f04f 30ff 	mov.w	r0, #4294967295
 800690e:	b004      	add	sp, #16
 8006910:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8006914:	6823      	ldr	r3, [r4, #0]
 8006916:	f043 0320 	orr.w	r3, r3, #32
 800691a:	6023      	str	r3, [r4, #0]
 800691c:	4832      	ldr	r0, [pc, #200]	@ (80069e8 <_printf_i+0x238>)
 800691e:	2778      	movs	r7, #120	@ 0x78
 8006920:	f884 7045 	strb.w	r7, [r4, #69]	@ 0x45
 8006924:	6823      	ldr	r3, [r4, #0]
 8006926:	6831      	ldr	r1, [r6, #0]
 8006928:	061f      	lsls	r7, r3, #24
 800692a:	f851 5b04 	ldr.w	r5, [r1], #4
 800692e:	d402      	bmi.n	8006936 <_printf_i+0x186>
 8006930:	065f      	lsls	r7, r3, #25
 8006932:	bf48      	it	mi
 8006934:	b2ad      	uxthmi	r5, r5
 8006936:	6031      	str	r1, [r6, #0]
 8006938:	07d9      	lsls	r1, r3, #31
 800693a:	bf44      	itt	mi
 800693c:	f043 0320 	orrmi.w	r3, r3, #32
 8006940:	6023      	strmi	r3, [r4, #0]
 8006942:	b11d      	cbz	r5, 800694c <_printf_i+0x19c>
 8006944:	2310      	movs	r3, #16
 8006946:	e7ad      	b.n	80068a4 <_printf_i+0xf4>
 8006948:	4826      	ldr	r0, [pc, #152]	@ (80069e4 <_printf_i+0x234>)
 800694a:	e7e9      	b.n	8006920 <_printf_i+0x170>
 800694c:	6823      	ldr	r3, [r4, #0]
 800694e:	f023 0320 	bic.w	r3, r3, #32
 8006952:	6023      	str	r3, [r4, #0]
 8006954:	e7f6      	b.n	8006944 <_printf_i+0x194>
 8006956:	4616      	mov	r6, r2
 8006958:	e7bd      	b.n	80068d6 <_printf_i+0x126>
 800695a:	6833      	ldr	r3, [r6, #0]
 800695c:	6825      	ldr	r5, [r4, #0]
 800695e:	6961      	ldr	r1, [r4, #20]
 8006960:	1d18      	adds	r0, r3, #4
 8006962:	6030      	str	r0, [r6, #0]
 8006964:	062e      	lsls	r6, r5, #24
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	d501      	bpl.n	800696e <_printf_i+0x1be>
 800696a:	6019      	str	r1, [r3, #0]
 800696c:	e002      	b.n	8006974 <_printf_i+0x1c4>
 800696e:	0668      	lsls	r0, r5, #25
 8006970:	d5fb      	bpl.n	800696a <_printf_i+0x1ba>
 8006972:	8019      	strh	r1, [r3, #0]
 8006974:	2300      	movs	r3, #0
 8006976:	6123      	str	r3, [r4, #16]
 8006978:	4616      	mov	r6, r2
 800697a:	e7bc      	b.n	80068f6 <_printf_i+0x146>
 800697c:	6833      	ldr	r3, [r6, #0]
 800697e:	1d1a      	adds	r2, r3, #4
 8006980:	6032      	str	r2, [r6, #0]
 8006982:	681e      	ldr	r6, [r3, #0]
 8006984:	6862      	ldr	r2, [r4, #4]
 8006986:	2100      	movs	r1, #0
 8006988:	4630      	mov	r0, r6
 800698a:	f7f9 fc29 	bl	80001e0 <memchr>
 800698e:	b108      	cbz	r0, 8006994 <_printf_i+0x1e4>
 8006990:	1b80      	subs	r0, r0, r6
 8006992:	6060      	str	r0, [r4, #4]
 8006994:	6863      	ldr	r3, [r4, #4]
 8006996:	6123      	str	r3, [r4, #16]
 8006998:	2300      	movs	r3, #0
 800699a:	f884 3043 	strb.w	r3, [r4, #67]	@ 0x43
 800699e:	e7aa      	b.n	80068f6 <_printf_i+0x146>
 80069a0:	6923      	ldr	r3, [r4, #16]
 80069a2:	4632      	mov	r2, r6
 80069a4:	4649      	mov	r1, r9
 80069a6:	4640      	mov	r0, r8
 80069a8:	47d0      	blx	sl
 80069aa:	3001      	adds	r0, #1
 80069ac:	d0ad      	beq.n	800690a <_printf_i+0x15a>
 80069ae:	6823      	ldr	r3, [r4, #0]
 80069b0:	079b      	lsls	r3, r3, #30
 80069b2:	d413      	bmi.n	80069dc <_printf_i+0x22c>
 80069b4:	68e0      	ldr	r0, [r4, #12]
 80069b6:	9b03      	ldr	r3, [sp, #12]
 80069b8:	4298      	cmp	r0, r3
 80069ba:	bfb8      	it	lt
 80069bc:	4618      	movlt	r0, r3
 80069be:	e7a6      	b.n	800690e <_printf_i+0x15e>
 80069c0:	2301      	movs	r3, #1
 80069c2:	4632      	mov	r2, r6
 80069c4:	4649      	mov	r1, r9
 80069c6:	4640      	mov	r0, r8
 80069c8:	47d0      	blx	sl
 80069ca:	3001      	adds	r0, #1
 80069cc:	d09d      	beq.n	800690a <_printf_i+0x15a>
 80069ce:	3501      	adds	r5, #1
 80069d0:	68e3      	ldr	r3, [r4, #12]
 80069d2:	9903      	ldr	r1, [sp, #12]
 80069d4:	1a5b      	subs	r3, r3, r1
 80069d6:	42ab      	cmp	r3, r5
 80069d8:	dcf2      	bgt.n	80069c0 <_printf_i+0x210>
 80069da:	e7eb      	b.n	80069b4 <_printf_i+0x204>
 80069dc:	2500      	movs	r5, #0
 80069de:	f104 0619 	add.w	r6, r4, #25
 80069e2:	e7f5      	b.n	80069d0 <_printf_i+0x220>
 80069e4:	080091e6 	.word	0x080091e6
 80069e8:	080091f7 	.word	0x080091f7

080069ec <std>:
 80069ec:	2300      	movs	r3, #0
 80069ee:	b510      	push	{r4, lr}
 80069f0:	4604      	mov	r4, r0
 80069f2:	e9c0 3300 	strd	r3, r3, [r0]
 80069f6:	e9c0 3304 	strd	r3, r3, [r0, #16]
 80069fa:	6083      	str	r3, [r0, #8]
 80069fc:	8181      	strh	r1, [r0, #12]
 80069fe:	6643      	str	r3, [r0, #100]	@ 0x64
 8006a00:	81c2      	strh	r2, [r0, #14]
 8006a02:	6183      	str	r3, [r0, #24]
 8006a04:	4619      	mov	r1, r3
 8006a06:	2208      	movs	r2, #8
 8006a08:	305c      	adds	r0, #92	@ 0x5c
 8006a0a:	f000 fa3f 	bl	8006e8c <memset>
 8006a0e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a44 <std+0x58>)
 8006a10:	6263      	str	r3, [r4, #36]	@ 0x24
 8006a12:	4b0d      	ldr	r3, [pc, #52]	@ (8006a48 <std+0x5c>)
 8006a14:	62a3      	str	r3, [r4, #40]	@ 0x28
 8006a16:	4b0d      	ldr	r3, [pc, #52]	@ (8006a4c <std+0x60>)
 8006a18:	62e3      	str	r3, [r4, #44]	@ 0x2c
 8006a1a:	4b0d      	ldr	r3, [pc, #52]	@ (8006a50 <std+0x64>)
 8006a1c:	6323      	str	r3, [r4, #48]	@ 0x30
 8006a1e:	4b0d      	ldr	r3, [pc, #52]	@ (8006a54 <std+0x68>)
 8006a20:	6224      	str	r4, [r4, #32]
 8006a22:	429c      	cmp	r4, r3
 8006a24:	d006      	beq.n	8006a34 <std+0x48>
 8006a26:	f103 0268 	add.w	r2, r3, #104	@ 0x68
 8006a2a:	4294      	cmp	r4, r2
 8006a2c:	d002      	beq.n	8006a34 <std+0x48>
 8006a2e:	33d0      	adds	r3, #208	@ 0xd0
 8006a30:	429c      	cmp	r4, r3
 8006a32:	d105      	bne.n	8006a40 <std+0x54>
 8006a34:	f104 0058 	add.w	r0, r4, #88	@ 0x58
 8006a38:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a3c:	f000 baa2 	b.w	8006f84 <__retarget_lock_init_recursive>
 8006a40:	bd10      	pop	{r4, pc}
 8006a42:	bf00      	nop
 8006a44:	08006cdd 	.word	0x08006cdd
 8006a48:	08006cff 	.word	0x08006cff
 8006a4c:	08006d37 	.word	0x08006d37
 8006a50:	08006d5b 	.word	0x08006d5b
 8006a54:	20000770 	.word	0x20000770

08006a58 <stdio_exit_handler>:
 8006a58:	4a02      	ldr	r2, [pc, #8]	@ (8006a64 <stdio_exit_handler+0xc>)
 8006a5a:	4903      	ldr	r1, [pc, #12]	@ (8006a68 <stdio_exit_handler+0x10>)
 8006a5c:	4803      	ldr	r0, [pc, #12]	@ (8006a6c <stdio_exit_handler+0x14>)
 8006a5e:	f000 b869 	b.w	8006b34 <_fwalk_sglue>
 8006a62:	bf00      	nop
 8006a64:	2000000c 	.word	0x2000000c
 8006a68:	080088ed 	.word	0x080088ed
 8006a6c:	2000001c 	.word	0x2000001c

08006a70 <cleanup_stdio>:
 8006a70:	6841      	ldr	r1, [r0, #4]
 8006a72:	4b0c      	ldr	r3, [pc, #48]	@ (8006aa4 <cleanup_stdio+0x34>)
 8006a74:	4299      	cmp	r1, r3
 8006a76:	b510      	push	{r4, lr}
 8006a78:	4604      	mov	r4, r0
 8006a7a:	d001      	beq.n	8006a80 <cleanup_stdio+0x10>
 8006a7c:	f001 ff36 	bl	80088ec <_fflush_r>
 8006a80:	68a1      	ldr	r1, [r4, #8]
 8006a82:	4b09      	ldr	r3, [pc, #36]	@ (8006aa8 <cleanup_stdio+0x38>)
 8006a84:	4299      	cmp	r1, r3
 8006a86:	d002      	beq.n	8006a8e <cleanup_stdio+0x1e>
 8006a88:	4620      	mov	r0, r4
 8006a8a:	f001 ff2f 	bl	80088ec <_fflush_r>
 8006a8e:	68e1      	ldr	r1, [r4, #12]
 8006a90:	4b06      	ldr	r3, [pc, #24]	@ (8006aac <cleanup_stdio+0x3c>)
 8006a92:	4299      	cmp	r1, r3
 8006a94:	d004      	beq.n	8006aa0 <cleanup_stdio+0x30>
 8006a96:	4620      	mov	r0, r4
 8006a98:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006a9c:	f001 bf26 	b.w	80088ec <_fflush_r>
 8006aa0:	bd10      	pop	{r4, pc}
 8006aa2:	bf00      	nop
 8006aa4:	20000770 	.word	0x20000770
 8006aa8:	200007d8 	.word	0x200007d8
 8006aac:	20000840 	.word	0x20000840

08006ab0 <global_stdio_init.part.0>:
 8006ab0:	b510      	push	{r4, lr}
 8006ab2:	4b0b      	ldr	r3, [pc, #44]	@ (8006ae0 <global_stdio_init.part.0+0x30>)
 8006ab4:	4c0b      	ldr	r4, [pc, #44]	@ (8006ae4 <global_stdio_init.part.0+0x34>)
 8006ab6:	4a0c      	ldr	r2, [pc, #48]	@ (8006ae8 <global_stdio_init.part.0+0x38>)
 8006ab8:	601a      	str	r2, [r3, #0]
 8006aba:	4620      	mov	r0, r4
 8006abc:	2200      	movs	r2, #0
 8006abe:	2104      	movs	r1, #4
 8006ac0:	f7ff ff94 	bl	80069ec <std>
 8006ac4:	f104 0068 	add.w	r0, r4, #104	@ 0x68
 8006ac8:	2201      	movs	r2, #1
 8006aca:	2109      	movs	r1, #9
 8006acc:	f7ff ff8e 	bl	80069ec <std>
 8006ad0:	f104 00d0 	add.w	r0, r4, #208	@ 0xd0
 8006ad4:	2202      	movs	r2, #2
 8006ad6:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006ada:	2112      	movs	r1, #18
 8006adc:	f7ff bf86 	b.w	80069ec <std>
 8006ae0:	200008a8 	.word	0x200008a8
 8006ae4:	20000770 	.word	0x20000770
 8006ae8:	08006a59 	.word	0x08006a59

08006aec <__sfp_lock_acquire>:
 8006aec:	4801      	ldr	r0, [pc, #4]	@ (8006af4 <__sfp_lock_acquire+0x8>)
 8006aee:	f000 ba4a 	b.w	8006f86 <__retarget_lock_acquire_recursive>
 8006af2:	bf00      	nop
 8006af4:	200008b1 	.word	0x200008b1

08006af8 <__sfp_lock_release>:
 8006af8:	4801      	ldr	r0, [pc, #4]	@ (8006b00 <__sfp_lock_release+0x8>)
 8006afa:	f000 ba45 	b.w	8006f88 <__retarget_lock_release_recursive>
 8006afe:	bf00      	nop
 8006b00:	200008b1 	.word	0x200008b1

08006b04 <__sinit>:
 8006b04:	b510      	push	{r4, lr}
 8006b06:	4604      	mov	r4, r0
 8006b08:	f7ff fff0 	bl	8006aec <__sfp_lock_acquire>
 8006b0c:	6a23      	ldr	r3, [r4, #32]
 8006b0e:	b11b      	cbz	r3, 8006b18 <__sinit+0x14>
 8006b10:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006b14:	f7ff bff0 	b.w	8006af8 <__sfp_lock_release>
 8006b18:	4b04      	ldr	r3, [pc, #16]	@ (8006b2c <__sinit+0x28>)
 8006b1a:	6223      	str	r3, [r4, #32]
 8006b1c:	4b04      	ldr	r3, [pc, #16]	@ (8006b30 <__sinit+0x2c>)
 8006b1e:	681b      	ldr	r3, [r3, #0]
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1f5      	bne.n	8006b10 <__sinit+0xc>
 8006b24:	f7ff ffc4 	bl	8006ab0 <global_stdio_init.part.0>
 8006b28:	e7f2      	b.n	8006b10 <__sinit+0xc>
 8006b2a:	bf00      	nop
 8006b2c:	08006a71 	.word	0x08006a71
 8006b30:	200008a8 	.word	0x200008a8

08006b34 <_fwalk_sglue>:
 8006b34:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006b38:	4607      	mov	r7, r0
 8006b3a:	4688      	mov	r8, r1
 8006b3c:	4614      	mov	r4, r2
 8006b3e:	2600      	movs	r6, #0
 8006b40:	e9d4 9501 	ldrd	r9, r5, [r4, #4]
 8006b44:	f1b9 0901 	subs.w	r9, r9, #1
 8006b48:	d505      	bpl.n	8006b56 <_fwalk_sglue+0x22>
 8006b4a:	6824      	ldr	r4, [r4, #0]
 8006b4c:	2c00      	cmp	r4, #0
 8006b4e:	d1f7      	bne.n	8006b40 <_fwalk_sglue+0xc>
 8006b50:	4630      	mov	r0, r6
 8006b52:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006b56:	89ab      	ldrh	r3, [r5, #12]
 8006b58:	2b01      	cmp	r3, #1
 8006b5a:	d907      	bls.n	8006b6c <_fwalk_sglue+0x38>
 8006b5c:	f9b5 300e 	ldrsh.w	r3, [r5, #14]
 8006b60:	3301      	adds	r3, #1
 8006b62:	d003      	beq.n	8006b6c <_fwalk_sglue+0x38>
 8006b64:	4629      	mov	r1, r5
 8006b66:	4638      	mov	r0, r7
 8006b68:	47c0      	blx	r8
 8006b6a:	4306      	orrs	r6, r0
 8006b6c:	3568      	adds	r5, #104	@ 0x68
 8006b6e:	e7e9      	b.n	8006b44 <_fwalk_sglue+0x10>

08006b70 <_puts_r>:
 8006b70:	6a03      	ldr	r3, [r0, #32]
 8006b72:	b570      	push	{r4, r5, r6, lr}
 8006b74:	6884      	ldr	r4, [r0, #8]
 8006b76:	4605      	mov	r5, r0
 8006b78:	460e      	mov	r6, r1
 8006b7a:	b90b      	cbnz	r3, 8006b80 <_puts_r+0x10>
 8006b7c:	f7ff ffc2 	bl	8006b04 <__sinit>
 8006b80:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006b82:	07db      	lsls	r3, r3, #31
 8006b84:	d405      	bmi.n	8006b92 <_puts_r+0x22>
 8006b86:	89a3      	ldrh	r3, [r4, #12]
 8006b88:	0598      	lsls	r0, r3, #22
 8006b8a:	d402      	bmi.n	8006b92 <_puts_r+0x22>
 8006b8c:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006b8e:	f000 f9fa 	bl	8006f86 <__retarget_lock_acquire_recursive>
 8006b92:	89a3      	ldrh	r3, [r4, #12]
 8006b94:	0719      	lsls	r1, r3, #28
 8006b96:	d502      	bpl.n	8006b9e <_puts_r+0x2e>
 8006b98:	6923      	ldr	r3, [r4, #16]
 8006b9a:	2b00      	cmp	r3, #0
 8006b9c:	d135      	bne.n	8006c0a <_puts_r+0x9a>
 8006b9e:	4621      	mov	r1, r4
 8006ba0:	4628      	mov	r0, r5
 8006ba2:	f000 f91d 	bl	8006de0 <__swsetup_r>
 8006ba6:	b380      	cbz	r0, 8006c0a <_puts_r+0x9a>
 8006ba8:	f04f 35ff 	mov.w	r5, #4294967295
 8006bac:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8006bae:	07da      	lsls	r2, r3, #31
 8006bb0:	d405      	bmi.n	8006bbe <_puts_r+0x4e>
 8006bb2:	89a3      	ldrh	r3, [r4, #12]
 8006bb4:	059b      	lsls	r3, r3, #22
 8006bb6:	d402      	bmi.n	8006bbe <_puts_r+0x4e>
 8006bb8:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8006bba:	f000 f9e5 	bl	8006f88 <__retarget_lock_release_recursive>
 8006bbe:	4628      	mov	r0, r5
 8006bc0:	bd70      	pop	{r4, r5, r6, pc}
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	da04      	bge.n	8006bd0 <_puts_r+0x60>
 8006bc6:	69a2      	ldr	r2, [r4, #24]
 8006bc8:	429a      	cmp	r2, r3
 8006bca:	dc17      	bgt.n	8006bfc <_puts_r+0x8c>
 8006bcc:	290a      	cmp	r1, #10
 8006bce:	d015      	beq.n	8006bfc <_puts_r+0x8c>
 8006bd0:	6823      	ldr	r3, [r4, #0]
 8006bd2:	1c5a      	adds	r2, r3, #1
 8006bd4:	6022      	str	r2, [r4, #0]
 8006bd6:	7019      	strb	r1, [r3, #0]
 8006bd8:	68a3      	ldr	r3, [r4, #8]
 8006bda:	f816 1f01 	ldrb.w	r1, [r6, #1]!
 8006bde:	3b01      	subs	r3, #1
 8006be0:	60a3      	str	r3, [r4, #8]
 8006be2:	2900      	cmp	r1, #0
 8006be4:	d1ed      	bne.n	8006bc2 <_puts_r+0x52>
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	da11      	bge.n	8006c0e <_puts_r+0x9e>
 8006bea:	4622      	mov	r2, r4
 8006bec:	210a      	movs	r1, #10
 8006bee:	4628      	mov	r0, r5
 8006bf0:	f000 f8b7 	bl	8006d62 <__swbuf_r>
 8006bf4:	3001      	adds	r0, #1
 8006bf6:	d0d7      	beq.n	8006ba8 <_puts_r+0x38>
 8006bf8:	250a      	movs	r5, #10
 8006bfa:	e7d7      	b.n	8006bac <_puts_r+0x3c>
 8006bfc:	4622      	mov	r2, r4
 8006bfe:	4628      	mov	r0, r5
 8006c00:	f000 f8af 	bl	8006d62 <__swbuf_r>
 8006c04:	3001      	adds	r0, #1
 8006c06:	d1e7      	bne.n	8006bd8 <_puts_r+0x68>
 8006c08:	e7ce      	b.n	8006ba8 <_puts_r+0x38>
 8006c0a:	3e01      	subs	r6, #1
 8006c0c:	e7e4      	b.n	8006bd8 <_puts_r+0x68>
 8006c0e:	6823      	ldr	r3, [r4, #0]
 8006c10:	1c5a      	adds	r2, r3, #1
 8006c12:	6022      	str	r2, [r4, #0]
 8006c14:	220a      	movs	r2, #10
 8006c16:	701a      	strb	r2, [r3, #0]
 8006c18:	e7ee      	b.n	8006bf8 <_puts_r+0x88>
	...

08006c1c <puts>:
 8006c1c:	4b02      	ldr	r3, [pc, #8]	@ (8006c28 <puts+0xc>)
 8006c1e:	4601      	mov	r1, r0
 8006c20:	6818      	ldr	r0, [r3, #0]
 8006c22:	f7ff bfa5 	b.w	8006b70 <_puts_r>
 8006c26:	bf00      	nop
 8006c28:	20000018 	.word	0x20000018

08006c2c <sniprintf>:
 8006c2c:	b40c      	push	{r2, r3}
 8006c2e:	b530      	push	{r4, r5, lr}
 8006c30:	4b18      	ldr	r3, [pc, #96]	@ (8006c94 <sniprintf+0x68>)
 8006c32:	1e0c      	subs	r4, r1, #0
 8006c34:	681d      	ldr	r5, [r3, #0]
 8006c36:	b09d      	sub	sp, #116	@ 0x74
 8006c38:	da08      	bge.n	8006c4c <sniprintf+0x20>
 8006c3a:	238b      	movs	r3, #139	@ 0x8b
 8006c3c:	602b      	str	r3, [r5, #0]
 8006c3e:	f04f 30ff 	mov.w	r0, #4294967295
 8006c42:	b01d      	add	sp, #116	@ 0x74
 8006c44:	e8bd 4030 	ldmia.w	sp!, {r4, r5, lr}
 8006c48:	b002      	add	sp, #8
 8006c4a:	4770      	bx	lr
 8006c4c:	f44f 7302 	mov.w	r3, #520	@ 0x208
 8006c50:	f8ad 3014 	strh.w	r3, [sp, #20]
 8006c54:	f04f 0300 	mov.w	r3, #0
 8006c58:	931b      	str	r3, [sp, #108]	@ 0x6c
 8006c5a:	bf14      	ite	ne
 8006c5c:	f104 33ff 	addne.w	r3, r4, #4294967295
 8006c60:	4623      	moveq	r3, r4
 8006c62:	9304      	str	r3, [sp, #16]
 8006c64:	9307      	str	r3, [sp, #28]
 8006c66:	f64f 73ff 	movw	r3, #65535	@ 0xffff
 8006c6a:	9002      	str	r0, [sp, #8]
 8006c6c:	9006      	str	r0, [sp, #24]
 8006c6e:	f8ad 3016 	strh.w	r3, [sp, #22]
 8006c72:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 8006c74:	ab21      	add	r3, sp, #132	@ 0x84
 8006c76:	a902      	add	r1, sp, #8
 8006c78:	4628      	mov	r0, r5
 8006c7a:	9301      	str	r3, [sp, #4]
 8006c7c:	f001 fcb6 	bl	80085ec <_svfiprintf_r>
 8006c80:	1c43      	adds	r3, r0, #1
 8006c82:	bfbc      	itt	lt
 8006c84:	238b      	movlt	r3, #139	@ 0x8b
 8006c86:	602b      	strlt	r3, [r5, #0]
 8006c88:	2c00      	cmp	r4, #0
 8006c8a:	d0da      	beq.n	8006c42 <sniprintf+0x16>
 8006c8c:	9b02      	ldr	r3, [sp, #8]
 8006c8e:	2200      	movs	r2, #0
 8006c90:	701a      	strb	r2, [r3, #0]
 8006c92:	e7d6      	b.n	8006c42 <sniprintf+0x16>
 8006c94:	20000018 	.word	0x20000018

08006c98 <siprintf>:
 8006c98:	b40e      	push	{r1, r2, r3}
 8006c9a:	b510      	push	{r4, lr}
 8006c9c:	b09d      	sub	sp, #116	@ 0x74
 8006c9e:	ab1f      	add	r3, sp, #124	@ 0x7c
 8006ca0:	9002      	str	r0, [sp, #8]
 8006ca2:	9006      	str	r0, [sp, #24]
 8006ca4:	f06f 4100 	mvn.w	r1, #2147483648	@ 0x80000000
 8006ca8:	480a      	ldr	r0, [pc, #40]	@ (8006cd4 <siprintf+0x3c>)
 8006caa:	9107      	str	r1, [sp, #28]
 8006cac:	9104      	str	r1, [sp, #16]
 8006cae:	490a      	ldr	r1, [pc, #40]	@ (8006cd8 <siprintf+0x40>)
 8006cb0:	f853 2b04 	ldr.w	r2, [r3], #4
 8006cb4:	9105      	str	r1, [sp, #20]
 8006cb6:	2400      	movs	r4, #0
 8006cb8:	a902      	add	r1, sp, #8
 8006cba:	6800      	ldr	r0, [r0, #0]
 8006cbc:	9301      	str	r3, [sp, #4]
 8006cbe:	941b      	str	r4, [sp, #108]	@ 0x6c
 8006cc0:	f001 fc94 	bl	80085ec <_svfiprintf_r>
 8006cc4:	9b02      	ldr	r3, [sp, #8]
 8006cc6:	701c      	strb	r4, [r3, #0]
 8006cc8:	b01d      	add	sp, #116	@ 0x74
 8006cca:	e8bd 4010 	ldmia.w	sp!, {r4, lr}
 8006cce:	b003      	add	sp, #12
 8006cd0:	4770      	bx	lr
 8006cd2:	bf00      	nop
 8006cd4:	20000018 	.word	0x20000018
 8006cd8:	ffff0208 	.word	0xffff0208

08006cdc <__sread>:
 8006cdc:	b510      	push	{r4, lr}
 8006cde:	460c      	mov	r4, r1
 8006ce0:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006ce4:	f000 f900 	bl	8006ee8 <_read_r>
 8006ce8:	2800      	cmp	r0, #0
 8006cea:	bfab      	itete	ge
 8006cec:	6d63      	ldrge	r3, [r4, #84]	@ 0x54
 8006cee:	89a3      	ldrhlt	r3, [r4, #12]
 8006cf0:	181b      	addge	r3, r3, r0
 8006cf2:	f423 5380 	biclt.w	r3, r3, #4096	@ 0x1000
 8006cf6:	bfac      	ite	ge
 8006cf8:	6563      	strge	r3, [r4, #84]	@ 0x54
 8006cfa:	81a3      	strhlt	r3, [r4, #12]
 8006cfc:	bd10      	pop	{r4, pc}

08006cfe <__swrite>:
 8006cfe:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8006d02:	461f      	mov	r7, r3
 8006d04:	898b      	ldrh	r3, [r1, #12]
 8006d06:	05db      	lsls	r3, r3, #23
 8006d08:	4605      	mov	r5, r0
 8006d0a:	460c      	mov	r4, r1
 8006d0c:	4616      	mov	r6, r2
 8006d0e:	d505      	bpl.n	8006d1c <__swrite+0x1e>
 8006d10:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d14:	2302      	movs	r3, #2
 8006d16:	2200      	movs	r2, #0
 8006d18:	f000 f8d4 	bl	8006ec4 <_lseek_r>
 8006d1c:	89a3      	ldrh	r3, [r4, #12]
 8006d1e:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 8006d22:	f423 5380 	bic.w	r3, r3, #4096	@ 0x1000
 8006d26:	81a3      	strh	r3, [r4, #12]
 8006d28:	4632      	mov	r2, r6
 8006d2a:	463b      	mov	r3, r7
 8006d2c:	4628      	mov	r0, r5
 8006d2e:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8006d32:	f000 b8eb 	b.w	8006f0c <_write_r>

08006d36 <__sseek>:
 8006d36:	b510      	push	{r4, lr}
 8006d38:	460c      	mov	r4, r1
 8006d3a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d3e:	f000 f8c1 	bl	8006ec4 <_lseek_r>
 8006d42:	1c43      	adds	r3, r0, #1
 8006d44:	89a3      	ldrh	r3, [r4, #12]
 8006d46:	bf15      	itete	ne
 8006d48:	6560      	strne	r0, [r4, #84]	@ 0x54
 8006d4a:	f423 5380 	biceq.w	r3, r3, #4096	@ 0x1000
 8006d4e:	f443 5380 	orrne.w	r3, r3, #4096	@ 0x1000
 8006d52:	81a3      	strheq	r3, [r4, #12]
 8006d54:	bf18      	it	ne
 8006d56:	81a3      	strhne	r3, [r4, #12]
 8006d58:	bd10      	pop	{r4, pc}

08006d5a <__sclose>:
 8006d5a:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8006d5e:	f000 b8a1 	b.w	8006ea4 <_close_r>

08006d62 <__swbuf_r>:
 8006d62:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8006d64:	460e      	mov	r6, r1
 8006d66:	4614      	mov	r4, r2
 8006d68:	4605      	mov	r5, r0
 8006d6a:	b118      	cbz	r0, 8006d74 <__swbuf_r+0x12>
 8006d6c:	6a03      	ldr	r3, [r0, #32]
 8006d6e:	b90b      	cbnz	r3, 8006d74 <__swbuf_r+0x12>
 8006d70:	f7ff fec8 	bl	8006b04 <__sinit>
 8006d74:	69a3      	ldr	r3, [r4, #24]
 8006d76:	60a3      	str	r3, [r4, #8]
 8006d78:	89a3      	ldrh	r3, [r4, #12]
 8006d7a:	071a      	lsls	r2, r3, #28
 8006d7c:	d501      	bpl.n	8006d82 <__swbuf_r+0x20>
 8006d7e:	6923      	ldr	r3, [r4, #16]
 8006d80:	b943      	cbnz	r3, 8006d94 <__swbuf_r+0x32>
 8006d82:	4621      	mov	r1, r4
 8006d84:	4628      	mov	r0, r5
 8006d86:	f000 f82b 	bl	8006de0 <__swsetup_r>
 8006d8a:	b118      	cbz	r0, 8006d94 <__swbuf_r+0x32>
 8006d8c:	f04f 37ff 	mov.w	r7, #4294967295
 8006d90:	4638      	mov	r0, r7
 8006d92:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8006d94:	6823      	ldr	r3, [r4, #0]
 8006d96:	6922      	ldr	r2, [r4, #16]
 8006d98:	1a98      	subs	r0, r3, r2
 8006d9a:	6963      	ldr	r3, [r4, #20]
 8006d9c:	b2f6      	uxtb	r6, r6
 8006d9e:	4283      	cmp	r3, r0
 8006da0:	4637      	mov	r7, r6
 8006da2:	dc05      	bgt.n	8006db0 <__swbuf_r+0x4e>
 8006da4:	4621      	mov	r1, r4
 8006da6:	4628      	mov	r0, r5
 8006da8:	f001 fda0 	bl	80088ec <_fflush_r>
 8006dac:	2800      	cmp	r0, #0
 8006dae:	d1ed      	bne.n	8006d8c <__swbuf_r+0x2a>
 8006db0:	68a3      	ldr	r3, [r4, #8]
 8006db2:	3b01      	subs	r3, #1
 8006db4:	60a3      	str	r3, [r4, #8]
 8006db6:	6823      	ldr	r3, [r4, #0]
 8006db8:	1c5a      	adds	r2, r3, #1
 8006dba:	6022      	str	r2, [r4, #0]
 8006dbc:	701e      	strb	r6, [r3, #0]
 8006dbe:	6962      	ldr	r2, [r4, #20]
 8006dc0:	1c43      	adds	r3, r0, #1
 8006dc2:	429a      	cmp	r2, r3
 8006dc4:	d004      	beq.n	8006dd0 <__swbuf_r+0x6e>
 8006dc6:	89a3      	ldrh	r3, [r4, #12]
 8006dc8:	07db      	lsls	r3, r3, #31
 8006dca:	d5e1      	bpl.n	8006d90 <__swbuf_r+0x2e>
 8006dcc:	2e0a      	cmp	r6, #10
 8006dce:	d1df      	bne.n	8006d90 <__swbuf_r+0x2e>
 8006dd0:	4621      	mov	r1, r4
 8006dd2:	4628      	mov	r0, r5
 8006dd4:	f001 fd8a 	bl	80088ec <_fflush_r>
 8006dd8:	2800      	cmp	r0, #0
 8006dda:	d0d9      	beq.n	8006d90 <__swbuf_r+0x2e>
 8006ddc:	e7d6      	b.n	8006d8c <__swbuf_r+0x2a>
	...

08006de0 <__swsetup_r>:
 8006de0:	b538      	push	{r3, r4, r5, lr}
 8006de2:	4b29      	ldr	r3, [pc, #164]	@ (8006e88 <__swsetup_r+0xa8>)
 8006de4:	4605      	mov	r5, r0
 8006de6:	6818      	ldr	r0, [r3, #0]
 8006de8:	460c      	mov	r4, r1
 8006dea:	b118      	cbz	r0, 8006df4 <__swsetup_r+0x14>
 8006dec:	6a03      	ldr	r3, [r0, #32]
 8006dee:	b90b      	cbnz	r3, 8006df4 <__swsetup_r+0x14>
 8006df0:	f7ff fe88 	bl	8006b04 <__sinit>
 8006df4:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006df8:	0719      	lsls	r1, r3, #28
 8006dfa:	d422      	bmi.n	8006e42 <__swsetup_r+0x62>
 8006dfc:	06da      	lsls	r2, r3, #27
 8006dfe:	d407      	bmi.n	8006e10 <__swsetup_r+0x30>
 8006e00:	2209      	movs	r2, #9
 8006e02:	602a      	str	r2, [r5, #0]
 8006e04:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 8006e08:	81a3      	strh	r3, [r4, #12]
 8006e0a:	f04f 30ff 	mov.w	r0, #4294967295
 8006e0e:	e033      	b.n	8006e78 <__swsetup_r+0x98>
 8006e10:	0758      	lsls	r0, r3, #29
 8006e12:	d512      	bpl.n	8006e3a <__swsetup_r+0x5a>
 8006e14:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 8006e16:	b141      	cbz	r1, 8006e2a <__swsetup_r+0x4a>
 8006e18:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8006e1c:	4299      	cmp	r1, r3
 8006e1e:	d002      	beq.n	8006e26 <__swsetup_r+0x46>
 8006e20:	4628      	mov	r0, r5
 8006e22:	f000 ff0d 	bl	8007c40 <_free_r>
 8006e26:	2300      	movs	r3, #0
 8006e28:	6363      	str	r3, [r4, #52]	@ 0x34
 8006e2a:	89a3      	ldrh	r3, [r4, #12]
 8006e2c:	f023 0324 	bic.w	r3, r3, #36	@ 0x24
 8006e30:	81a3      	strh	r3, [r4, #12]
 8006e32:	2300      	movs	r3, #0
 8006e34:	6063      	str	r3, [r4, #4]
 8006e36:	6923      	ldr	r3, [r4, #16]
 8006e38:	6023      	str	r3, [r4, #0]
 8006e3a:	89a3      	ldrh	r3, [r4, #12]
 8006e3c:	f043 0308 	orr.w	r3, r3, #8
 8006e40:	81a3      	strh	r3, [r4, #12]
 8006e42:	6923      	ldr	r3, [r4, #16]
 8006e44:	b94b      	cbnz	r3, 8006e5a <__swsetup_r+0x7a>
 8006e46:	89a3      	ldrh	r3, [r4, #12]
 8006e48:	f403 7320 	and.w	r3, r3, #640	@ 0x280
 8006e4c:	f5b3 7f00 	cmp.w	r3, #512	@ 0x200
 8006e50:	d003      	beq.n	8006e5a <__swsetup_r+0x7a>
 8006e52:	4621      	mov	r1, r4
 8006e54:	4628      	mov	r0, r5
 8006e56:	f001 fd97 	bl	8008988 <__smakebuf_r>
 8006e5a:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 8006e5e:	f013 0201 	ands.w	r2, r3, #1
 8006e62:	d00a      	beq.n	8006e7a <__swsetup_r+0x9a>
 8006e64:	2200      	movs	r2, #0
 8006e66:	60a2      	str	r2, [r4, #8]
 8006e68:	6962      	ldr	r2, [r4, #20]
 8006e6a:	4252      	negs	r2, r2
 8006e6c:	61a2      	str	r2, [r4, #24]
 8006e6e:	6922      	ldr	r2, [r4, #16]
 8006e70:	b942      	cbnz	r2, 8006e84 <__swsetup_r+0xa4>
 8006e72:	f013 0080 	ands.w	r0, r3, #128	@ 0x80
 8006e76:	d1c5      	bne.n	8006e04 <__swsetup_r+0x24>
 8006e78:	bd38      	pop	{r3, r4, r5, pc}
 8006e7a:	0799      	lsls	r1, r3, #30
 8006e7c:	bf58      	it	pl
 8006e7e:	6962      	ldrpl	r2, [r4, #20]
 8006e80:	60a2      	str	r2, [r4, #8]
 8006e82:	e7f4      	b.n	8006e6e <__swsetup_r+0x8e>
 8006e84:	2000      	movs	r0, #0
 8006e86:	e7f7      	b.n	8006e78 <__swsetup_r+0x98>
 8006e88:	20000018 	.word	0x20000018

08006e8c <memset>:
 8006e8c:	4402      	add	r2, r0
 8006e8e:	4603      	mov	r3, r0
 8006e90:	4293      	cmp	r3, r2
 8006e92:	d100      	bne.n	8006e96 <memset+0xa>
 8006e94:	4770      	bx	lr
 8006e96:	f803 1b01 	strb.w	r1, [r3], #1
 8006e9a:	e7f9      	b.n	8006e90 <memset+0x4>

08006e9c <_localeconv_r>:
 8006e9c:	4800      	ldr	r0, [pc, #0]	@ (8006ea0 <_localeconv_r+0x4>)
 8006e9e:	4770      	bx	lr
 8006ea0:	20000158 	.word	0x20000158

08006ea4 <_close_r>:
 8006ea4:	b538      	push	{r3, r4, r5, lr}
 8006ea6:	4d06      	ldr	r5, [pc, #24]	@ (8006ec0 <_close_r+0x1c>)
 8006ea8:	2300      	movs	r3, #0
 8006eaa:	4604      	mov	r4, r0
 8006eac:	4608      	mov	r0, r1
 8006eae:	602b      	str	r3, [r5, #0]
 8006eb0:	f7fb fb1e 	bl	80024f0 <_close>
 8006eb4:	1c43      	adds	r3, r0, #1
 8006eb6:	d102      	bne.n	8006ebe <_close_r+0x1a>
 8006eb8:	682b      	ldr	r3, [r5, #0]
 8006eba:	b103      	cbz	r3, 8006ebe <_close_r+0x1a>
 8006ebc:	6023      	str	r3, [r4, #0]
 8006ebe:	bd38      	pop	{r3, r4, r5, pc}
 8006ec0:	200008ac 	.word	0x200008ac

08006ec4 <_lseek_r>:
 8006ec4:	b538      	push	{r3, r4, r5, lr}
 8006ec6:	4d07      	ldr	r5, [pc, #28]	@ (8006ee4 <_lseek_r+0x20>)
 8006ec8:	4604      	mov	r4, r0
 8006eca:	4608      	mov	r0, r1
 8006ecc:	4611      	mov	r1, r2
 8006ece:	2200      	movs	r2, #0
 8006ed0:	602a      	str	r2, [r5, #0]
 8006ed2:	461a      	mov	r2, r3
 8006ed4:	f7fb fb33 	bl	800253e <_lseek>
 8006ed8:	1c43      	adds	r3, r0, #1
 8006eda:	d102      	bne.n	8006ee2 <_lseek_r+0x1e>
 8006edc:	682b      	ldr	r3, [r5, #0]
 8006ede:	b103      	cbz	r3, 8006ee2 <_lseek_r+0x1e>
 8006ee0:	6023      	str	r3, [r4, #0]
 8006ee2:	bd38      	pop	{r3, r4, r5, pc}
 8006ee4:	200008ac 	.word	0x200008ac

08006ee8 <_read_r>:
 8006ee8:	b538      	push	{r3, r4, r5, lr}
 8006eea:	4d07      	ldr	r5, [pc, #28]	@ (8006f08 <_read_r+0x20>)
 8006eec:	4604      	mov	r4, r0
 8006eee:	4608      	mov	r0, r1
 8006ef0:	4611      	mov	r1, r2
 8006ef2:	2200      	movs	r2, #0
 8006ef4:	602a      	str	r2, [r5, #0]
 8006ef6:	461a      	mov	r2, r3
 8006ef8:	f7fb fac1 	bl	800247e <_read>
 8006efc:	1c43      	adds	r3, r0, #1
 8006efe:	d102      	bne.n	8006f06 <_read_r+0x1e>
 8006f00:	682b      	ldr	r3, [r5, #0]
 8006f02:	b103      	cbz	r3, 8006f06 <_read_r+0x1e>
 8006f04:	6023      	str	r3, [r4, #0]
 8006f06:	bd38      	pop	{r3, r4, r5, pc}
 8006f08:	200008ac 	.word	0x200008ac

08006f0c <_write_r>:
 8006f0c:	b538      	push	{r3, r4, r5, lr}
 8006f0e:	4d07      	ldr	r5, [pc, #28]	@ (8006f2c <_write_r+0x20>)
 8006f10:	4604      	mov	r4, r0
 8006f12:	4608      	mov	r0, r1
 8006f14:	4611      	mov	r1, r2
 8006f16:	2200      	movs	r2, #0
 8006f18:	602a      	str	r2, [r5, #0]
 8006f1a:	461a      	mov	r2, r3
 8006f1c:	f7fb facc 	bl	80024b8 <_write>
 8006f20:	1c43      	adds	r3, r0, #1
 8006f22:	d102      	bne.n	8006f2a <_write_r+0x1e>
 8006f24:	682b      	ldr	r3, [r5, #0]
 8006f26:	b103      	cbz	r3, 8006f2a <_write_r+0x1e>
 8006f28:	6023      	str	r3, [r4, #0]
 8006f2a:	bd38      	pop	{r3, r4, r5, pc}
 8006f2c:	200008ac 	.word	0x200008ac

08006f30 <__errno>:
 8006f30:	4b01      	ldr	r3, [pc, #4]	@ (8006f38 <__errno+0x8>)
 8006f32:	6818      	ldr	r0, [r3, #0]
 8006f34:	4770      	bx	lr
 8006f36:	bf00      	nop
 8006f38:	20000018 	.word	0x20000018

08006f3c <__libc_init_array>:
 8006f3c:	b570      	push	{r4, r5, r6, lr}
 8006f3e:	4d0d      	ldr	r5, [pc, #52]	@ (8006f74 <__libc_init_array+0x38>)
 8006f40:	4c0d      	ldr	r4, [pc, #52]	@ (8006f78 <__libc_init_array+0x3c>)
 8006f42:	1b64      	subs	r4, r4, r5
 8006f44:	10a4      	asrs	r4, r4, #2
 8006f46:	2600      	movs	r6, #0
 8006f48:	42a6      	cmp	r6, r4
 8006f4a:	d109      	bne.n	8006f60 <__libc_init_array+0x24>
 8006f4c:	4d0b      	ldr	r5, [pc, #44]	@ (8006f7c <__libc_init_array+0x40>)
 8006f4e:	4c0c      	ldr	r4, [pc, #48]	@ (8006f80 <__libc_init_array+0x44>)
 8006f50:	f001 ffd6 	bl	8008f00 <_init>
 8006f54:	1b64      	subs	r4, r4, r5
 8006f56:	10a4      	asrs	r4, r4, #2
 8006f58:	2600      	movs	r6, #0
 8006f5a:	42a6      	cmp	r6, r4
 8006f5c:	d105      	bne.n	8006f6a <__libc_init_array+0x2e>
 8006f5e:	bd70      	pop	{r4, r5, r6, pc}
 8006f60:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f64:	4798      	blx	r3
 8006f66:	3601      	adds	r6, #1
 8006f68:	e7ee      	b.n	8006f48 <__libc_init_array+0xc>
 8006f6a:	f855 3b04 	ldr.w	r3, [r5], #4
 8006f6e:	4798      	blx	r3
 8006f70:	3601      	adds	r6, #1
 8006f72:	e7f2      	b.n	8006f5a <__libc_init_array+0x1e>
 8006f74:	08009554 	.word	0x08009554
 8006f78:	08009554 	.word	0x08009554
 8006f7c:	08009554 	.word	0x08009554
 8006f80:	08009558 	.word	0x08009558

08006f84 <__retarget_lock_init_recursive>:
 8006f84:	4770      	bx	lr

08006f86 <__retarget_lock_acquire_recursive>:
 8006f86:	4770      	bx	lr

08006f88 <__retarget_lock_release_recursive>:
 8006f88:	4770      	bx	lr

08006f8a <quorem>:
 8006f8a:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f8e:	6903      	ldr	r3, [r0, #16]
 8006f90:	690c      	ldr	r4, [r1, #16]
 8006f92:	42a3      	cmp	r3, r4
 8006f94:	4607      	mov	r7, r0
 8006f96:	db7e      	blt.n	8007096 <quorem+0x10c>
 8006f98:	3c01      	subs	r4, #1
 8006f9a:	f101 0814 	add.w	r8, r1, #20
 8006f9e:	00a3      	lsls	r3, r4, #2
 8006fa0:	f100 0514 	add.w	r5, r0, #20
 8006fa4:	9300      	str	r3, [sp, #0]
 8006fa6:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8006faa:	9301      	str	r3, [sp, #4]
 8006fac:	f858 3024 	ldr.w	r3, [r8, r4, lsl #2]
 8006fb0:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8006fb4:	3301      	adds	r3, #1
 8006fb6:	429a      	cmp	r2, r3
 8006fb8:	eb08 0984 	add.w	r9, r8, r4, lsl #2
 8006fbc:	fbb2 f6f3 	udiv	r6, r2, r3
 8006fc0:	d32e      	bcc.n	8007020 <quorem+0x96>
 8006fc2:	f04f 0a00 	mov.w	sl, #0
 8006fc6:	46c4      	mov	ip, r8
 8006fc8:	46ae      	mov	lr, r5
 8006fca:	46d3      	mov	fp, sl
 8006fcc:	f85c 3b04 	ldr.w	r3, [ip], #4
 8006fd0:	b298      	uxth	r0, r3
 8006fd2:	fb06 a000 	mla	r0, r6, r0, sl
 8006fd6:	0c02      	lsrs	r2, r0, #16
 8006fd8:	0c1b      	lsrs	r3, r3, #16
 8006fda:	fb06 2303 	mla	r3, r6, r3, r2
 8006fde:	f8de 2000 	ldr.w	r2, [lr]
 8006fe2:	b280      	uxth	r0, r0
 8006fe4:	b292      	uxth	r2, r2
 8006fe6:	1a12      	subs	r2, r2, r0
 8006fe8:	445a      	add	r2, fp
 8006fea:	f8de 0000 	ldr.w	r0, [lr]
 8006fee:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8006ff2:	b29b      	uxth	r3, r3
 8006ff4:	ebc3 4322 	rsb	r3, r3, r2, asr #16
 8006ff8:	eb03 4310 	add.w	r3, r3, r0, lsr #16
 8006ffc:	b292      	uxth	r2, r2
 8006ffe:	ea42 4203 	orr.w	r2, r2, r3, lsl #16
 8007002:	45e1      	cmp	r9, ip
 8007004:	f84e 2b04 	str.w	r2, [lr], #4
 8007008:	ea4f 4b23 	mov.w	fp, r3, asr #16
 800700c:	d2de      	bcs.n	8006fcc <quorem+0x42>
 800700e:	9b00      	ldr	r3, [sp, #0]
 8007010:	58eb      	ldr	r3, [r5, r3]
 8007012:	b92b      	cbnz	r3, 8007020 <quorem+0x96>
 8007014:	9b01      	ldr	r3, [sp, #4]
 8007016:	3b04      	subs	r3, #4
 8007018:	429d      	cmp	r5, r3
 800701a:	461a      	mov	r2, r3
 800701c:	d32f      	bcc.n	800707e <quorem+0xf4>
 800701e:	613c      	str	r4, [r7, #16]
 8007020:	4638      	mov	r0, r7
 8007022:	f001 f97f 	bl	8008324 <__mcmp>
 8007026:	2800      	cmp	r0, #0
 8007028:	db25      	blt.n	8007076 <quorem+0xec>
 800702a:	4629      	mov	r1, r5
 800702c:	2000      	movs	r0, #0
 800702e:	f858 2b04 	ldr.w	r2, [r8], #4
 8007032:	f8d1 c000 	ldr.w	ip, [r1]
 8007036:	fa1f fe82 	uxth.w	lr, r2
 800703a:	fa1f f38c 	uxth.w	r3, ip
 800703e:	eba3 030e 	sub.w	r3, r3, lr
 8007042:	4403      	add	r3, r0
 8007044:	0c12      	lsrs	r2, r2, #16
 8007046:	ebc2 4223 	rsb	r2, r2, r3, asr #16
 800704a:	eb02 421c 	add.w	r2, r2, ip, lsr #16
 800704e:	b29b      	uxth	r3, r3
 8007050:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8007054:	45c1      	cmp	r9, r8
 8007056:	f841 3b04 	str.w	r3, [r1], #4
 800705a:	ea4f 4022 	mov.w	r0, r2, asr #16
 800705e:	d2e6      	bcs.n	800702e <quorem+0xa4>
 8007060:	f855 2024 	ldr.w	r2, [r5, r4, lsl #2]
 8007064:	eb05 0384 	add.w	r3, r5, r4, lsl #2
 8007068:	b922      	cbnz	r2, 8007074 <quorem+0xea>
 800706a:	3b04      	subs	r3, #4
 800706c:	429d      	cmp	r5, r3
 800706e:	461a      	mov	r2, r3
 8007070:	d30b      	bcc.n	800708a <quorem+0x100>
 8007072:	613c      	str	r4, [r7, #16]
 8007074:	3601      	adds	r6, #1
 8007076:	4630      	mov	r0, r6
 8007078:	b003      	add	sp, #12
 800707a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800707e:	6812      	ldr	r2, [r2, #0]
 8007080:	3b04      	subs	r3, #4
 8007082:	2a00      	cmp	r2, #0
 8007084:	d1cb      	bne.n	800701e <quorem+0x94>
 8007086:	3c01      	subs	r4, #1
 8007088:	e7c6      	b.n	8007018 <quorem+0x8e>
 800708a:	6812      	ldr	r2, [r2, #0]
 800708c:	3b04      	subs	r3, #4
 800708e:	2a00      	cmp	r2, #0
 8007090:	d1ef      	bne.n	8007072 <quorem+0xe8>
 8007092:	3c01      	subs	r4, #1
 8007094:	e7ea      	b.n	800706c <quorem+0xe2>
 8007096:	2000      	movs	r0, #0
 8007098:	e7ee      	b.n	8007078 <quorem+0xee>
 800709a:	0000      	movs	r0, r0
 800709c:	0000      	movs	r0, r0
	...

080070a0 <_dtoa_r>:
 80070a0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070a4:	69c7      	ldr	r7, [r0, #28]
 80070a6:	b097      	sub	sp, #92	@ 0x5c
 80070a8:	ed8d 0b04 	vstr	d0, [sp, #16]
 80070ac:	ec55 4b10 	vmov	r4, r5, d0
 80070b0:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 80070b2:	9107      	str	r1, [sp, #28]
 80070b4:	4681      	mov	r9, r0
 80070b6:	920c      	str	r2, [sp, #48]	@ 0x30
 80070b8:	9311      	str	r3, [sp, #68]	@ 0x44
 80070ba:	b97f      	cbnz	r7, 80070dc <_dtoa_r+0x3c>
 80070bc:	2010      	movs	r0, #16
 80070be:	f000 fe09 	bl	8007cd4 <malloc>
 80070c2:	4602      	mov	r2, r0
 80070c4:	f8c9 001c 	str.w	r0, [r9, #28]
 80070c8:	b920      	cbnz	r0, 80070d4 <_dtoa_r+0x34>
 80070ca:	4ba9      	ldr	r3, [pc, #676]	@ (8007370 <_dtoa_r+0x2d0>)
 80070cc:	21ef      	movs	r1, #239	@ 0xef
 80070ce:	48a9      	ldr	r0, [pc, #676]	@ (8007374 <_dtoa_r+0x2d4>)
 80070d0:	f001 fcf0 	bl	8008ab4 <__assert_func>
 80070d4:	e9c0 7701 	strd	r7, r7, [r0, #4]
 80070d8:	6007      	str	r7, [r0, #0]
 80070da:	60c7      	str	r7, [r0, #12]
 80070dc:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80070e0:	6819      	ldr	r1, [r3, #0]
 80070e2:	b159      	cbz	r1, 80070fc <_dtoa_r+0x5c>
 80070e4:	685a      	ldr	r2, [r3, #4]
 80070e6:	604a      	str	r2, [r1, #4]
 80070e8:	2301      	movs	r3, #1
 80070ea:	4093      	lsls	r3, r2
 80070ec:	608b      	str	r3, [r1, #8]
 80070ee:	4648      	mov	r0, r9
 80070f0:	f000 fee6 	bl	8007ec0 <_Bfree>
 80070f4:	f8d9 301c 	ldr.w	r3, [r9, #28]
 80070f8:	2200      	movs	r2, #0
 80070fa:	601a      	str	r2, [r3, #0]
 80070fc:	1e2b      	subs	r3, r5, #0
 80070fe:	bfb9      	ittee	lt
 8007100:	f023 4300 	biclt.w	r3, r3, #2147483648	@ 0x80000000
 8007104:	9305      	strlt	r3, [sp, #20]
 8007106:	2300      	movge	r3, #0
 8007108:	6033      	strge	r3, [r6, #0]
 800710a:	9f05      	ldr	r7, [sp, #20]
 800710c:	4b9a      	ldr	r3, [pc, #616]	@ (8007378 <_dtoa_r+0x2d8>)
 800710e:	bfbc      	itt	lt
 8007110:	2201      	movlt	r2, #1
 8007112:	6032      	strlt	r2, [r6, #0]
 8007114:	43bb      	bics	r3, r7
 8007116:	d112      	bne.n	800713e <_dtoa_r+0x9e>
 8007118:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 800711a:	f242 730f 	movw	r3, #9999	@ 0x270f
 800711e:	6013      	str	r3, [r2, #0]
 8007120:	f3c7 0313 	ubfx	r3, r7, #0, #20
 8007124:	4323      	orrs	r3, r4
 8007126:	f000 855a 	beq.w	8007bde <_dtoa_r+0xb3e>
 800712a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800712c:	f8df a25c 	ldr.w	sl, [pc, #604]	@ 800738c <_dtoa_r+0x2ec>
 8007130:	2b00      	cmp	r3, #0
 8007132:	f000 855c 	beq.w	8007bee <_dtoa_r+0xb4e>
 8007136:	f10a 0303 	add.w	r3, sl, #3
 800713a:	f000 bd56 	b.w	8007bea <_dtoa_r+0xb4a>
 800713e:	ed9d 7b04 	vldr	d7, [sp, #16]
 8007142:	2200      	movs	r2, #0
 8007144:	ec51 0b17 	vmov	r0, r1, d7
 8007148:	2300      	movs	r3, #0
 800714a:	ed8d 7b0a 	vstr	d7, [sp, #40]	@ 0x28
 800714e:	f7f9 fcc3 	bl	8000ad8 <__aeabi_dcmpeq>
 8007152:	4680      	mov	r8, r0
 8007154:	b158      	cbz	r0, 800716e <_dtoa_r+0xce>
 8007156:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 8007158:	2301      	movs	r3, #1
 800715a:	6013      	str	r3, [r2, #0]
 800715c:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 800715e:	b113      	cbz	r3, 8007166 <_dtoa_r+0xc6>
 8007160:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007162:	4b86      	ldr	r3, [pc, #536]	@ (800737c <_dtoa_r+0x2dc>)
 8007164:	6013      	str	r3, [r2, #0]
 8007166:	f8df a228 	ldr.w	sl, [pc, #552]	@ 8007390 <_dtoa_r+0x2f0>
 800716a:	f000 bd40 	b.w	8007bee <_dtoa_r+0xb4e>
 800716e:	ed9d 0b0a 	vldr	d0, [sp, #40]	@ 0x28
 8007172:	aa14      	add	r2, sp, #80	@ 0x50
 8007174:	a915      	add	r1, sp, #84	@ 0x54
 8007176:	4648      	mov	r0, r9
 8007178:	f001 f984 	bl	8008484 <__d2b>
 800717c:	f3c7 560a 	ubfx	r6, r7, #20, #11
 8007180:	9002      	str	r0, [sp, #8]
 8007182:	2e00      	cmp	r6, #0
 8007184:	d078      	beq.n	8007278 <_dtoa_r+0x1d8>
 8007186:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 8007188:	f8cd 8048 	str.w	r8, [sp, #72]	@ 0x48
 800718c:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007190:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 8007194:	f043 537f 	orr.w	r3, r3, #1069547520	@ 0x3fc00000
 8007198:	f443 1340 	orr.w	r3, r3, #3145728	@ 0x300000
 800719c:	f2a6 36ff 	subw	r6, r6, #1023	@ 0x3ff
 80071a0:	4619      	mov	r1, r3
 80071a2:	2200      	movs	r2, #0
 80071a4:	4b76      	ldr	r3, [pc, #472]	@ (8007380 <_dtoa_r+0x2e0>)
 80071a6:	f7f9 f877 	bl	8000298 <__aeabi_dsub>
 80071aa:	a36b      	add	r3, pc, #428	@ (adr r3, 8007358 <_dtoa_r+0x2b8>)
 80071ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071b0:	f7f9 fa2a 	bl	8000608 <__aeabi_dmul>
 80071b4:	a36a      	add	r3, pc, #424	@ (adr r3, 8007360 <_dtoa_r+0x2c0>)
 80071b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ba:	f7f9 f86f 	bl	800029c <__adddf3>
 80071be:	4604      	mov	r4, r0
 80071c0:	4630      	mov	r0, r6
 80071c2:	460d      	mov	r5, r1
 80071c4:	f7f9 f9b6 	bl	8000534 <__aeabi_i2d>
 80071c8:	a367      	add	r3, pc, #412	@ (adr r3, 8007368 <_dtoa_r+0x2c8>)
 80071ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071ce:	f7f9 fa1b 	bl	8000608 <__aeabi_dmul>
 80071d2:	4602      	mov	r2, r0
 80071d4:	460b      	mov	r3, r1
 80071d6:	4620      	mov	r0, r4
 80071d8:	4629      	mov	r1, r5
 80071da:	f7f9 f85f 	bl	800029c <__adddf3>
 80071de:	4604      	mov	r4, r0
 80071e0:	460d      	mov	r5, r1
 80071e2:	f7f9 fcc1 	bl	8000b68 <__aeabi_d2iz>
 80071e6:	2200      	movs	r2, #0
 80071e8:	4607      	mov	r7, r0
 80071ea:	2300      	movs	r3, #0
 80071ec:	4620      	mov	r0, r4
 80071ee:	4629      	mov	r1, r5
 80071f0:	f7f9 fc7c 	bl	8000aec <__aeabi_dcmplt>
 80071f4:	b140      	cbz	r0, 8007208 <_dtoa_r+0x168>
 80071f6:	4638      	mov	r0, r7
 80071f8:	f7f9 f99c 	bl	8000534 <__aeabi_i2d>
 80071fc:	4622      	mov	r2, r4
 80071fe:	462b      	mov	r3, r5
 8007200:	f7f9 fc6a 	bl	8000ad8 <__aeabi_dcmpeq>
 8007204:	b900      	cbnz	r0, 8007208 <_dtoa_r+0x168>
 8007206:	3f01      	subs	r7, #1
 8007208:	2f16      	cmp	r7, #22
 800720a:	d852      	bhi.n	80072b2 <_dtoa_r+0x212>
 800720c:	4b5d      	ldr	r3, [pc, #372]	@ (8007384 <_dtoa_r+0x2e4>)
 800720e:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 8007212:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007216:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800721a:	f7f9 fc67 	bl	8000aec <__aeabi_dcmplt>
 800721e:	2800      	cmp	r0, #0
 8007220:	d049      	beq.n	80072b6 <_dtoa_r+0x216>
 8007222:	3f01      	subs	r7, #1
 8007224:	2300      	movs	r3, #0
 8007226:	9310      	str	r3, [sp, #64]	@ 0x40
 8007228:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 800722a:	1b9b      	subs	r3, r3, r6
 800722c:	1e5a      	subs	r2, r3, #1
 800722e:	bf45      	ittet	mi
 8007230:	f1c3 0301 	rsbmi	r3, r3, #1
 8007234:	9300      	strmi	r3, [sp, #0]
 8007236:	2300      	movpl	r3, #0
 8007238:	2300      	movmi	r3, #0
 800723a:	9206      	str	r2, [sp, #24]
 800723c:	bf54      	ite	pl
 800723e:	9300      	strpl	r3, [sp, #0]
 8007240:	9306      	strmi	r3, [sp, #24]
 8007242:	2f00      	cmp	r7, #0
 8007244:	db39      	blt.n	80072ba <_dtoa_r+0x21a>
 8007246:	9b06      	ldr	r3, [sp, #24]
 8007248:	970d      	str	r7, [sp, #52]	@ 0x34
 800724a:	443b      	add	r3, r7
 800724c:	9306      	str	r3, [sp, #24]
 800724e:	2300      	movs	r3, #0
 8007250:	9308      	str	r3, [sp, #32]
 8007252:	9b07      	ldr	r3, [sp, #28]
 8007254:	2b09      	cmp	r3, #9
 8007256:	d863      	bhi.n	8007320 <_dtoa_r+0x280>
 8007258:	2b05      	cmp	r3, #5
 800725a:	bfc4      	itt	gt
 800725c:	3b04      	subgt	r3, #4
 800725e:	9307      	strgt	r3, [sp, #28]
 8007260:	9b07      	ldr	r3, [sp, #28]
 8007262:	f1a3 0302 	sub.w	r3, r3, #2
 8007266:	bfcc      	ite	gt
 8007268:	2400      	movgt	r4, #0
 800726a:	2401      	movle	r4, #1
 800726c:	2b03      	cmp	r3, #3
 800726e:	d863      	bhi.n	8007338 <_dtoa_r+0x298>
 8007270:	e8df f003 	tbb	[pc, r3]
 8007274:	2b375452 	.word	0x2b375452
 8007278:	e9dd 6314 	ldrd	r6, r3, [sp, #80]	@ 0x50
 800727c:	441e      	add	r6, r3
 800727e:	f206 4332 	addw	r3, r6, #1074	@ 0x432
 8007282:	2b20      	cmp	r3, #32
 8007284:	bfc1      	itttt	gt
 8007286:	f1c3 0340 	rsbgt	r3, r3, #64	@ 0x40
 800728a:	409f      	lslgt	r7, r3
 800728c:	f206 4312 	addwgt	r3, r6, #1042	@ 0x412
 8007290:	fa24 f303 	lsrgt.w	r3, r4, r3
 8007294:	bfd6      	itet	le
 8007296:	f1c3 0320 	rsble	r3, r3, #32
 800729a:	ea47 0003 	orrgt.w	r0, r7, r3
 800729e:	fa04 f003 	lslle.w	r0, r4, r3
 80072a2:	f7f9 f937 	bl	8000514 <__aeabi_ui2d>
 80072a6:	2201      	movs	r2, #1
 80072a8:	f1a1 73f8 	sub.w	r3, r1, #32505856	@ 0x1f00000
 80072ac:	3e01      	subs	r6, #1
 80072ae:	9212      	str	r2, [sp, #72]	@ 0x48
 80072b0:	e776      	b.n	80071a0 <_dtoa_r+0x100>
 80072b2:	2301      	movs	r3, #1
 80072b4:	e7b7      	b.n	8007226 <_dtoa_r+0x186>
 80072b6:	9010      	str	r0, [sp, #64]	@ 0x40
 80072b8:	e7b6      	b.n	8007228 <_dtoa_r+0x188>
 80072ba:	9b00      	ldr	r3, [sp, #0]
 80072bc:	1bdb      	subs	r3, r3, r7
 80072be:	9300      	str	r3, [sp, #0]
 80072c0:	427b      	negs	r3, r7
 80072c2:	9308      	str	r3, [sp, #32]
 80072c4:	2300      	movs	r3, #0
 80072c6:	930d      	str	r3, [sp, #52]	@ 0x34
 80072c8:	e7c3      	b.n	8007252 <_dtoa_r+0x1b2>
 80072ca:	2301      	movs	r3, #1
 80072cc:	9309      	str	r3, [sp, #36]	@ 0x24
 80072ce:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072d0:	eb07 0b03 	add.w	fp, r7, r3
 80072d4:	f10b 0301 	add.w	r3, fp, #1
 80072d8:	2b01      	cmp	r3, #1
 80072da:	9303      	str	r3, [sp, #12]
 80072dc:	bfb8      	it	lt
 80072de:	2301      	movlt	r3, #1
 80072e0:	e006      	b.n	80072f0 <_dtoa_r+0x250>
 80072e2:	2301      	movs	r3, #1
 80072e4:	9309      	str	r3, [sp, #36]	@ 0x24
 80072e6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80072e8:	2b00      	cmp	r3, #0
 80072ea:	dd28      	ble.n	800733e <_dtoa_r+0x29e>
 80072ec:	469b      	mov	fp, r3
 80072ee:	9303      	str	r3, [sp, #12]
 80072f0:	f8d9 001c 	ldr.w	r0, [r9, #28]
 80072f4:	2100      	movs	r1, #0
 80072f6:	2204      	movs	r2, #4
 80072f8:	f102 0514 	add.w	r5, r2, #20
 80072fc:	429d      	cmp	r5, r3
 80072fe:	d926      	bls.n	800734e <_dtoa_r+0x2ae>
 8007300:	6041      	str	r1, [r0, #4]
 8007302:	4648      	mov	r0, r9
 8007304:	f000 fd9c 	bl	8007e40 <_Balloc>
 8007308:	4682      	mov	sl, r0
 800730a:	2800      	cmp	r0, #0
 800730c:	d142      	bne.n	8007394 <_dtoa_r+0x2f4>
 800730e:	4b1e      	ldr	r3, [pc, #120]	@ (8007388 <_dtoa_r+0x2e8>)
 8007310:	4602      	mov	r2, r0
 8007312:	f240 11af 	movw	r1, #431	@ 0x1af
 8007316:	e6da      	b.n	80070ce <_dtoa_r+0x2e>
 8007318:	2300      	movs	r3, #0
 800731a:	e7e3      	b.n	80072e4 <_dtoa_r+0x244>
 800731c:	2300      	movs	r3, #0
 800731e:	e7d5      	b.n	80072cc <_dtoa_r+0x22c>
 8007320:	2401      	movs	r4, #1
 8007322:	2300      	movs	r3, #0
 8007324:	9307      	str	r3, [sp, #28]
 8007326:	9409      	str	r4, [sp, #36]	@ 0x24
 8007328:	f04f 3bff 	mov.w	fp, #4294967295
 800732c:	2200      	movs	r2, #0
 800732e:	f8cd b00c 	str.w	fp, [sp, #12]
 8007332:	2312      	movs	r3, #18
 8007334:	920c      	str	r2, [sp, #48]	@ 0x30
 8007336:	e7db      	b.n	80072f0 <_dtoa_r+0x250>
 8007338:	2301      	movs	r3, #1
 800733a:	9309      	str	r3, [sp, #36]	@ 0x24
 800733c:	e7f4      	b.n	8007328 <_dtoa_r+0x288>
 800733e:	f04f 0b01 	mov.w	fp, #1
 8007342:	f8cd b00c 	str.w	fp, [sp, #12]
 8007346:	465b      	mov	r3, fp
 8007348:	f8cd b030 	str.w	fp, [sp, #48]	@ 0x30
 800734c:	e7d0      	b.n	80072f0 <_dtoa_r+0x250>
 800734e:	3101      	adds	r1, #1
 8007350:	0052      	lsls	r2, r2, #1
 8007352:	e7d1      	b.n	80072f8 <_dtoa_r+0x258>
 8007354:	f3af 8000 	nop.w
 8007358:	636f4361 	.word	0x636f4361
 800735c:	3fd287a7 	.word	0x3fd287a7
 8007360:	8b60c8b3 	.word	0x8b60c8b3
 8007364:	3fc68a28 	.word	0x3fc68a28
 8007368:	509f79fb 	.word	0x509f79fb
 800736c:	3fd34413 	.word	0x3fd34413
 8007370:	08009215 	.word	0x08009215
 8007374:	0800922c 	.word	0x0800922c
 8007378:	7ff00000 	.word	0x7ff00000
 800737c:	080091e5 	.word	0x080091e5
 8007380:	3ff80000 	.word	0x3ff80000
 8007384:	08009380 	.word	0x08009380
 8007388:	08009284 	.word	0x08009284
 800738c:	08009211 	.word	0x08009211
 8007390:	080091e4 	.word	0x080091e4
 8007394:	f8d9 301c 	ldr.w	r3, [r9, #28]
 8007398:	6018      	str	r0, [r3, #0]
 800739a:	9b03      	ldr	r3, [sp, #12]
 800739c:	2b0e      	cmp	r3, #14
 800739e:	f200 80a1 	bhi.w	80074e4 <_dtoa_r+0x444>
 80073a2:	2c00      	cmp	r4, #0
 80073a4:	f000 809e 	beq.w	80074e4 <_dtoa_r+0x444>
 80073a8:	2f00      	cmp	r7, #0
 80073aa:	dd33      	ble.n	8007414 <_dtoa_r+0x374>
 80073ac:	4b9c      	ldr	r3, [pc, #624]	@ (8007620 <_dtoa_r+0x580>)
 80073ae:	f007 020f 	and.w	r2, r7, #15
 80073b2:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 80073b6:	ed93 7b00 	vldr	d7, [r3]
 80073ba:	05f8      	lsls	r0, r7, #23
 80073bc:	ed8d 7b0e 	vstr	d7, [sp, #56]	@ 0x38
 80073c0:	ea4f 1427 	mov.w	r4, r7, asr #4
 80073c4:	d516      	bpl.n	80073f4 <_dtoa_r+0x354>
 80073c6:	4b97      	ldr	r3, [pc, #604]	@ (8007624 <_dtoa_r+0x584>)
 80073c8:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 80073cc:	e9d3 2308 	ldrd	r2, r3, [r3, #32]
 80073d0:	f7f9 fa44 	bl	800085c <__aeabi_ddiv>
 80073d4:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073d8:	f004 040f 	and.w	r4, r4, #15
 80073dc:	2603      	movs	r6, #3
 80073de:	4d91      	ldr	r5, [pc, #580]	@ (8007624 <_dtoa_r+0x584>)
 80073e0:	b954      	cbnz	r4, 80073f8 <_dtoa_r+0x358>
 80073e2:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80073e6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80073ea:	f7f9 fa37 	bl	800085c <__aeabi_ddiv>
 80073ee:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80073f2:	e028      	b.n	8007446 <_dtoa_r+0x3a6>
 80073f4:	2602      	movs	r6, #2
 80073f6:	e7f2      	b.n	80073de <_dtoa_r+0x33e>
 80073f8:	07e1      	lsls	r1, r4, #31
 80073fa:	d508      	bpl.n	800740e <_dtoa_r+0x36e>
 80073fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007400:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007404:	f7f9 f900 	bl	8000608 <__aeabi_dmul>
 8007408:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800740c:	3601      	adds	r6, #1
 800740e:	1064      	asrs	r4, r4, #1
 8007410:	3508      	adds	r5, #8
 8007412:	e7e5      	b.n	80073e0 <_dtoa_r+0x340>
 8007414:	f000 80af 	beq.w	8007576 <_dtoa_r+0x4d6>
 8007418:	427c      	negs	r4, r7
 800741a:	4b81      	ldr	r3, [pc, #516]	@ (8007620 <_dtoa_r+0x580>)
 800741c:	4d81      	ldr	r5, [pc, #516]	@ (8007624 <_dtoa_r+0x584>)
 800741e:	f004 020f 	and.w	r2, r4, #15
 8007422:	eb03 03c2 	add.w	r3, r3, r2, lsl #3
 8007426:	e9d3 2300 	ldrd	r2, r3, [r3]
 800742a:	e9dd 010a 	ldrd	r0, r1, [sp, #40]	@ 0x28
 800742e:	f7f9 f8eb 	bl	8000608 <__aeabi_dmul>
 8007432:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007436:	1124      	asrs	r4, r4, #4
 8007438:	2300      	movs	r3, #0
 800743a:	2602      	movs	r6, #2
 800743c:	2c00      	cmp	r4, #0
 800743e:	f040 808f 	bne.w	8007560 <_dtoa_r+0x4c0>
 8007442:	2b00      	cmp	r3, #0
 8007444:	d1d3      	bne.n	80073ee <_dtoa_r+0x34e>
 8007446:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 8007448:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 800744c:	2b00      	cmp	r3, #0
 800744e:	f000 8094 	beq.w	800757a <_dtoa_r+0x4da>
 8007452:	4b75      	ldr	r3, [pc, #468]	@ (8007628 <_dtoa_r+0x588>)
 8007454:	2200      	movs	r2, #0
 8007456:	4620      	mov	r0, r4
 8007458:	4629      	mov	r1, r5
 800745a:	f7f9 fb47 	bl	8000aec <__aeabi_dcmplt>
 800745e:	2800      	cmp	r0, #0
 8007460:	f000 808b 	beq.w	800757a <_dtoa_r+0x4da>
 8007464:	9b03      	ldr	r3, [sp, #12]
 8007466:	2b00      	cmp	r3, #0
 8007468:	f000 8087 	beq.w	800757a <_dtoa_r+0x4da>
 800746c:	f1bb 0f00 	cmp.w	fp, #0
 8007470:	dd34      	ble.n	80074dc <_dtoa_r+0x43c>
 8007472:	4620      	mov	r0, r4
 8007474:	4b6d      	ldr	r3, [pc, #436]	@ (800762c <_dtoa_r+0x58c>)
 8007476:	2200      	movs	r2, #0
 8007478:	4629      	mov	r1, r5
 800747a:	f7f9 f8c5 	bl	8000608 <__aeabi_dmul>
 800747e:	e9cd 0104 	strd	r0, r1, [sp, #16]
 8007482:	f107 38ff 	add.w	r8, r7, #4294967295
 8007486:	3601      	adds	r6, #1
 8007488:	465c      	mov	r4, fp
 800748a:	4630      	mov	r0, r6
 800748c:	f7f9 f852 	bl	8000534 <__aeabi_i2d>
 8007490:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007494:	f7f9 f8b8 	bl	8000608 <__aeabi_dmul>
 8007498:	4b65      	ldr	r3, [pc, #404]	@ (8007630 <_dtoa_r+0x590>)
 800749a:	2200      	movs	r2, #0
 800749c:	f7f8 fefe 	bl	800029c <__adddf3>
 80074a0:	4605      	mov	r5, r0
 80074a2:	f1a1 7650 	sub.w	r6, r1, #54525952	@ 0x3400000
 80074a6:	2c00      	cmp	r4, #0
 80074a8:	d16a      	bne.n	8007580 <_dtoa_r+0x4e0>
 80074aa:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074ae:	4b61      	ldr	r3, [pc, #388]	@ (8007634 <_dtoa_r+0x594>)
 80074b0:	2200      	movs	r2, #0
 80074b2:	f7f8 fef1 	bl	8000298 <__aeabi_dsub>
 80074b6:	4602      	mov	r2, r0
 80074b8:	460b      	mov	r3, r1
 80074ba:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80074be:	462a      	mov	r2, r5
 80074c0:	4633      	mov	r3, r6
 80074c2:	f7f9 fb31 	bl	8000b28 <__aeabi_dcmpgt>
 80074c6:	2800      	cmp	r0, #0
 80074c8:	f040 8298 	bne.w	80079fc <_dtoa_r+0x95c>
 80074cc:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80074d0:	462a      	mov	r2, r5
 80074d2:	f106 4300 	add.w	r3, r6, #2147483648	@ 0x80000000
 80074d6:	f7f9 fb09 	bl	8000aec <__aeabi_dcmplt>
 80074da:	bb38      	cbnz	r0, 800752c <_dtoa_r+0x48c>
 80074dc:	e9dd 340a 	ldrd	r3, r4, [sp, #40]	@ 0x28
 80074e0:	e9cd 3404 	strd	r3, r4, [sp, #16]
 80074e4:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 80074e6:	2b00      	cmp	r3, #0
 80074e8:	f2c0 8157 	blt.w	800779a <_dtoa_r+0x6fa>
 80074ec:	2f0e      	cmp	r7, #14
 80074ee:	f300 8154 	bgt.w	800779a <_dtoa_r+0x6fa>
 80074f2:	4b4b      	ldr	r3, [pc, #300]	@ (8007620 <_dtoa_r+0x580>)
 80074f4:	eb03 03c7 	add.w	r3, r3, r7, lsl #3
 80074f8:	ed93 7b00 	vldr	d7, [r3]
 80074fc:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80074fe:	2b00      	cmp	r3, #0
 8007500:	ed8d 7b00 	vstr	d7, [sp]
 8007504:	f280 80e5 	bge.w	80076d2 <_dtoa_r+0x632>
 8007508:	9b03      	ldr	r3, [sp, #12]
 800750a:	2b00      	cmp	r3, #0
 800750c:	f300 80e1 	bgt.w	80076d2 <_dtoa_r+0x632>
 8007510:	d10c      	bne.n	800752c <_dtoa_r+0x48c>
 8007512:	4b48      	ldr	r3, [pc, #288]	@ (8007634 <_dtoa_r+0x594>)
 8007514:	2200      	movs	r2, #0
 8007516:	ec51 0b17 	vmov	r0, r1, d7
 800751a:	f7f9 f875 	bl	8000608 <__aeabi_dmul>
 800751e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007522:	f7f9 faf7 	bl	8000b14 <__aeabi_dcmpge>
 8007526:	2800      	cmp	r0, #0
 8007528:	f000 8266 	beq.w	80079f8 <_dtoa_r+0x958>
 800752c:	2400      	movs	r4, #0
 800752e:	4625      	mov	r5, r4
 8007530:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 8007532:	4656      	mov	r6, sl
 8007534:	ea6f 0803 	mvn.w	r8, r3
 8007538:	2700      	movs	r7, #0
 800753a:	4621      	mov	r1, r4
 800753c:	4648      	mov	r0, r9
 800753e:	f000 fcbf 	bl	8007ec0 <_Bfree>
 8007542:	2d00      	cmp	r5, #0
 8007544:	f000 80bd 	beq.w	80076c2 <_dtoa_r+0x622>
 8007548:	b12f      	cbz	r7, 8007556 <_dtoa_r+0x4b6>
 800754a:	42af      	cmp	r7, r5
 800754c:	d003      	beq.n	8007556 <_dtoa_r+0x4b6>
 800754e:	4639      	mov	r1, r7
 8007550:	4648      	mov	r0, r9
 8007552:	f000 fcb5 	bl	8007ec0 <_Bfree>
 8007556:	4629      	mov	r1, r5
 8007558:	4648      	mov	r0, r9
 800755a:	f000 fcb1 	bl	8007ec0 <_Bfree>
 800755e:	e0b0      	b.n	80076c2 <_dtoa_r+0x622>
 8007560:	07e2      	lsls	r2, r4, #31
 8007562:	d505      	bpl.n	8007570 <_dtoa_r+0x4d0>
 8007564:	e9d5 2300 	ldrd	r2, r3, [r5]
 8007568:	f7f9 f84e 	bl	8000608 <__aeabi_dmul>
 800756c:	3601      	adds	r6, #1
 800756e:	2301      	movs	r3, #1
 8007570:	1064      	asrs	r4, r4, #1
 8007572:	3508      	adds	r5, #8
 8007574:	e762      	b.n	800743c <_dtoa_r+0x39c>
 8007576:	2602      	movs	r6, #2
 8007578:	e765      	b.n	8007446 <_dtoa_r+0x3a6>
 800757a:	9c03      	ldr	r4, [sp, #12]
 800757c:	46b8      	mov	r8, r7
 800757e:	e784      	b.n	800748a <_dtoa_r+0x3ea>
 8007580:	4b27      	ldr	r3, [pc, #156]	@ (8007620 <_dtoa_r+0x580>)
 8007582:	9909      	ldr	r1, [sp, #36]	@ 0x24
 8007584:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8007588:	e953 2302 	ldrd	r2, r3, [r3, #-8]
 800758c:	4454      	add	r4, sl
 800758e:	2900      	cmp	r1, #0
 8007590:	d054      	beq.n	800763c <_dtoa_r+0x59c>
 8007592:	4929      	ldr	r1, [pc, #164]	@ (8007638 <_dtoa_r+0x598>)
 8007594:	2000      	movs	r0, #0
 8007596:	f7f9 f961 	bl	800085c <__aeabi_ddiv>
 800759a:	4633      	mov	r3, r6
 800759c:	462a      	mov	r2, r5
 800759e:	f7f8 fe7b 	bl	8000298 <__aeabi_dsub>
 80075a2:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 80075a6:	4656      	mov	r6, sl
 80075a8:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075ac:	f7f9 fadc 	bl	8000b68 <__aeabi_d2iz>
 80075b0:	4605      	mov	r5, r0
 80075b2:	f7f8 ffbf 	bl	8000534 <__aeabi_i2d>
 80075b6:	4602      	mov	r2, r0
 80075b8:	460b      	mov	r3, r1
 80075ba:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80075be:	f7f8 fe6b 	bl	8000298 <__aeabi_dsub>
 80075c2:	3530      	adds	r5, #48	@ 0x30
 80075c4:	4602      	mov	r2, r0
 80075c6:	460b      	mov	r3, r1
 80075c8:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80075cc:	f806 5b01 	strb.w	r5, [r6], #1
 80075d0:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80075d4:	f7f9 fa8a 	bl	8000aec <__aeabi_dcmplt>
 80075d8:	2800      	cmp	r0, #0
 80075da:	d172      	bne.n	80076c2 <_dtoa_r+0x622>
 80075dc:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80075e0:	4911      	ldr	r1, [pc, #68]	@ (8007628 <_dtoa_r+0x588>)
 80075e2:	2000      	movs	r0, #0
 80075e4:	f7f8 fe58 	bl	8000298 <__aeabi_dsub>
 80075e8:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 80075ec:	f7f9 fa7e 	bl	8000aec <__aeabi_dcmplt>
 80075f0:	2800      	cmp	r0, #0
 80075f2:	f040 80b4 	bne.w	800775e <_dtoa_r+0x6be>
 80075f6:	42a6      	cmp	r6, r4
 80075f8:	f43f af70 	beq.w	80074dc <_dtoa_r+0x43c>
 80075fc:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007600:	4b0a      	ldr	r3, [pc, #40]	@ (800762c <_dtoa_r+0x58c>)
 8007602:	2200      	movs	r2, #0
 8007604:	f7f9 f800 	bl	8000608 <__aeabi_dmul>
 8007608:	4b08      	ldr	r3, [pc, #32]	@ (800762c <_dtoa_r+0x58c>)
 800760a:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 800760e:	2200      	movs	r2, #0
 8007610:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007614:	f7f8 fff8 	bl	8000608 <__aeabi_dmul>
 8007618:	e9cd 0104 	strd	r0, r1, [sp, #16]
 800761c:	e7c4      	b.n	80075a8 <_dtoa_r+0x508>
 800761e:	bf00      	nop
 8007620:	08009380 	.word	0x08009380
 8007624:	08009358 	.word	0x08009358
 8007628:	3ff00000 	.word	0x3ff00000
 800762c:	40240000 	.word	0x40240000
 8007630:	401c0000 	.word	0x401c0000
 8007634:	40140000 	.word	0x40140000
 8007638:	3fe00000 	.word	0x3fe00000
 800763c:	4631      	mov	r1, r6
 800763e:	4628      	mov	r0, r5
 8007640:	f7f8 ffe2 	bl	8000608 <__aeabi_dmul>
 8007644:	e9cd 010e 	strd	r0, r1, [sp, #56]	@ 0x38
 8007648:	9413      	str	r4, [sp, #76]	@ 0x4c
 800764a:	4656      	mov	r6, sl
 800764c:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007650:	f7f9 fa8a 	bl	8000b68 <__aeabi_d2iz>
 8007654:	4605      	mov	r5, r0
 8007656:	f7f8 ff6d 	bl	8000534 <__aeabi_i2d>
 800765a:	4602      	mov	r2, r0
 800765c:	460b      	mov	r3, r1
 800765e:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 8007662:	f7f8 fe19 	bl	8000298 <__aeabi_dsub>
 8007666:	3530      	adds	r5, #48	@ 0x30
 8007668:	f806 5b01 	strb.w	r5, [r6], #1
 800766c:	4602      	mov	r2, r0
 800766e:	460b      	mov	r3, r1
 8007670:	42a6      	cmp	r6, r4
 8007672:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007676:	f04f 0200 	mov.w	r2, #0
 800767a:	d124      	bne.n	80076c6 <_dtoa_r+0x626>
 800767c:	4baf      	ldr	r3, [pc, #700]	@ (800793c <_dtoa_r+0x89c>)
 800767e:	e9dd 010e 	ldrd	r0, r1, [sp, #56]	@ 0x38
 8007682:	f7f8 fe0b 	bl	800029c <__adddf3>
 8007686:	4602      	mov	r2, r0
 8007688:	460b      	mov	r3, r1
 800768a:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 800768e:	f7f9 fa4b 	bl	8000b28 <__aeabi_dcmpgt>
 8007692:	2800      	cmp	r0, #0
 8007694:	d163      	bne.n	800775e <_dtoa_r+0x6be>
 8007696:	e9dd 230e 	ldrd	r2, r3, [sp, #56]	@ 0x38
 800769a:	49a8      	ldr	r1, [pc, #672]	@ (800793c <_dtoa_r+0x89c>)
 800769c:	2000      	movs	r0, #0
 800769e:	f7f8 fdfb 	bl	8000298 <__aeabi_dsub>
 80076a2:	4602      	mov	r2, r0
 80076a4:	460b      	mov	r3, r1
 80076a6:	e9dd 0104 	ldrd	r0, r1, [sp, #16]
 80076aa:	f7f9 fa1f 	bl	8000aec <__aeabi_dcmplt>
 80076ae:	2800      	cmp	r0, #0
 80076b0:	f43f af14 	beq.w	80074dc <_dtoa_r+0x43c>
 80076b4:	9e13      	ldr	r6, [sp, #76]	@ 0x4c
 80076b6:	1e73      	subs	r3, r6, #1
 80076b8:	9313      	str	r3, [sp, #76]	@ 0x4c
 80076ba:	f816 3c01 	ldrb.w	r3, [r6, #-1]
 80076be:	2b30      	cmp	r3, #48	@ 0x30
 80076c0:	d0f8      	beq.n	80076b4 <_dtoa_r+0x614>
 80076c2:	4647      	mov	r7, r8
 80076c4:	e03b      	b.n	800773e <_dtoa_r+0x69e>
 80076c6:	4b9e      	ldr	r3, [pc, #632]	@ (8007940 <_dtoa_r+0x8a0>)
 80076c8:	f7f8 ff9e 	bl	8000608 <__aeabi_dmul>
 80076cc:	e9cd 0104 	strd	r0, r1, [sp, #16]
 80076d0:	e7bc      	b.n	800764c <_dtoa_r+0x5ac>
 80076d2:	e9dd 4504 	ldrd	r4, r5, [sp, #16]
 80076d6:	4656      	mov	r6, sl
 80076d8:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076dc:	4620      	mov	r0, r4
 80076de:	4629      	mov	r1, r5
 80076e0:	f7f9 f8bc 	bl	800085c <__aeabi_ddiv>
 80076e4:	f7f9 fa40 	bl	8000b68 <__aeabi_d2iz>
 80076e8:	4680      	mov	r8, r0
 80076ea:	f7f8 ff23 	bl	8000534 <__aeabi_i2d>
 80076ee:	e9dd 2300 	ldrd	r2, r3, [sp]
 80076f2:	f7f8 ff89 	bl	8000608 <__aeabi_dmul>
 80076f6:	4602      	mov	r2, r0
 80076f8:	460b      	mov	r3, r1
 80076fa:	4620      	mov	r0, r4
 80076fc:	4629      	mov	r1, r5
 80076fe:	f108 0430 	add.w	r4, r8, #48	@ 0x30
 8007702:	f7f8 fdc9 	bl	8000298 <__aeabi_dsub>
 8007706:	f806 4b01 	strb.w	r4, [r6], #1
 800770a:	9d03      	ldr	r5, [sp, #12]
 800770c:	eba6 040a 	sub.w	r4, r6, sl
 8007710:	42a5      	cmp	r5, r4
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	d133      	bne.n	8007780 <_dtoa_r+0x6e0>
 8007718:	f7f8 fdc0 	bl	800029c <__adddf3>
 800771c:	e9dd 2300 	ldrd	r2, r3, [sp]
 8007720:	4604      	mov	r4, r0
 8007722:	460d      	mov	r5, r1
 8007724:	f7f9 fa00 	bl	8000b28 <__aeabi_dcmpgt>
 8007728:	b9c0      	cbnz	r0, 800775c <_dtoa_r+0x6bc>
 800772a:	e9dd 2300 	ldrd	r2, r3, [sp]
 800772e:	4620      	mov	r0, r4
 8007730:	4629      	mov	r1, r5
 8007732:	f7f9 f9d1 	bl	8000ad8 <__aeabi_dcmpeq>
 8007736:	b110      	cbz	r0, 800773e <_dtoa_r+0x69e>
 8007738:	f018 0f01 	tst.w	r8, #1
 800773c:	d10e      	bne.n	800775c <_dtoa_r+0x6bc>
 800773e:	9902      	ldr	r1, [sp, #8]
 8007740:	4648      	mov	r0, r9
 8007742:	f000 fbbd 	bl	8007ec0 <_Bfree>
 8007746:	2300      	movs	r3, #0
 8007748:	7033      	strb	r3, [r6, #0]
 800774a:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 800774c:	3701      	adds	r7, #1
 800774e:	601f      	str	r7, [r3, #0]
 8007750:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007752:	2b00      	cmp	r3, #0
 8007754:	f000 824b 	beq.w	8007bee <_dtoa_r+0xb4e>
 8007758:	601e      	str	r6, [r3, #0]
 800775a:	e248      	b.n	8007bee <_dtoa_r+0xb4e>
 800775c:	46b8      	mov	r8, r7
 800775e:	4633      	mov	r3, r6
 8007760:	461e      	mov	r6, r3
 8007762:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007766:	2a39      	cmp	r2, #57	@ 0x39
 8007768:	d106      	bne.n	8007778 <_dtoa_r+0x6d8>
 800776a:	459a      	cmp	sl, r3
 800776c:	d1f8      	bne.n	8007760 <_dtoa_r+0x6c0>
 800776e:	2230      	movs	r2, #48	@ 0x30
 8007770:	f108 0801 	add.w	r8, r8, #1
 8007774:	f88a 2000 	strb.w	r2, [sl]
 8007778:	781a      	ldrb	r2, [r3, #0]
 800777a:	3201      	adds	r2, #1
 800777c:	701a      	strb	r2, [r3, #0]
 800777e:	e7a0      	b.n	80076c2 <_dtoa_r+0x622>
 8007780:	4b6f      	ldr	r3, [pc, #444]	@ (8007940 <_dtoa_r+0x8a0>)
 8007782:	2200      	movs	r2, #0
 8007784:	f7f8 ff40 	bl	8000608 <__aeabi_dmul>
 8007788:	2200      	movs	r2, #0
 800778a:	2300      	movs	r3, #0
 800778c:	4604      	mov	r4, r0
 800778e:	460d      	mov	r5, r1
 8007790:	f7f9 f9a2 	bl	8000ad8 <__aeabi_dcmpeq>
 8007794:	2800      	cmp	r0, #0
 8007796:	d09f      	beq.n	80076d8 <_dtoa_r+0x638>
 8007798:	e7d1      	b.n	800773e <_dtoa_r+0x69e>
 800779a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 800779c:	2a00      	cmp	r2, #0
 800779e:	f000 80ea 	beq.w	8007976 <_dtoa_r+0x8d6>
 80077a2:	9a07      	ldr	r2, [sp, #28]
 80077a4:	2a01      	cmp	r2, #1
 80077a6:	f300 80cd 	bgt.w	8007944 <_dtoa_r+0x8a4>
 80077aa:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 80077ac:	2a00      	cmp	r2, #0
 80077ae:	f000 80c1 	beq.w	8007934 <_dtoa_r+0x894>
 80077b2:	f203 4333 	addw	r3, r3, #1075	@ 0x433
 80077b6:	9c08      	ldr	r4, [sp, #32]
 80077b8:	9e00      	ldr	r6, [sp, #0]
 80077ba:	9a00      	ldr	r2, [sp, #0]
 80077bc:	441a      	add	r2, r3
 80077be:	9200      	str	r2, [sp, #0]
 80077c0:	9a06      	ldr	r2, [sp, #24]
 80077c2:	2101      	movs	r1, #1
 80077c4:	441a      	add	r2, r3
 80077c6:	4648      	mov	r0, r9
 80077c8:	9206      	str	r2, [sp, #24]
 80077ca:	f000 fc2d 	bl	8008028 <__i2b>
 80077ce:	4605      	mov	r5, r0
 80077d0:	b166      	cbz	r6, 80077ec <_dtoa_r+0x74c>
 80077d2:	9b06      	ldr	r3, [sp, #24]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	dd09      	ble.n	80077ec <_dtoa_r+0x74c>
 80077d8:	42b3      	cmp	r3, r6
 80077da:	9a00      	ldr	r2, [sp, #0]
 80077dc:	bfa8      	it	ge
 80077de:	4633      	movge	r3, r6
 80077e0:	1ad2      	subs	r2, r2, r3
 80077e2:	9200      	str	r2, [sp, #0]
 80077e4:	9a06      	ldr	r2, [sp, #24]
 80077e6:	1af6      	subs	r6, r6, r3
 80077e8:	1ad3      	subs	r3, r2, r3
 80077ea:	9306      	str	r3, [sp, #24]
 80077ec:	9b08      	ldr	r3, [sp, #32]
 80077ee:	b30b      	cbz	r3, 8007834 <_dtoa_r+0x794>
 80077f0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 80077f2:	2b00      	cmp	r3, #0
 80077f4:	f000 80c6 	beq.w	8007984 <_dtoa_r+0x8e4>
 80077f8:	2c00      	cmp	r4, #0
 80077fa:	f000 80c0 	beq.w	800797e <_dtoa_r+0x8de>
 80077fe:	4629      	mov	r1, r5
 8007800:	4622      	mov	r2, r4
 8007802:	4648      	mov	r0, r9
 8007804:	f000 fcc8 	bl	8008198 <__pow5mult>
 8007808:	9a02      	ldr	r2, [sp, #8]
 800780a:	4601      	mov	r1, r0
 800780c:	4605      	mov	r5, r0
 800780e:	4648      	mov	r0, r9
 8007810:	f000 fc20 	bl	8008054 <__multiply>
 8007814:	9902      	ldr	r1, [sp, #8]
 8007816:	4680      	mov	r8, r0
 8007818:	4648      	mov	r0, r9
 800781a:	f000 fb51 	bl	8007ec0 <_Bfree>
 800781e:	9b08      	ldr	r3, [sp, #32]
 8007820:	1b1b      	subs	r3, r3, r4
 8007822:	9308      	str	r3, [sp, #32]
 8007824:	f000 80b1 	beq.w	800798a <_dtoa_r+0x8ea>
 8007828:	9a08      	ldr	r2, [sp, #32]
 800782a:	4641      	mov	r1, r8
 800782c:	4648      	mov	r0, r9
 800782e:	f000 fcb3 	bl	8008198 <__pow5mult>
 8007832:	9002      	str	r0, [sp, #8]
 8007834:	2101      	movs	r1, #1
 8007836:	4648      	mov	r0, r9
 8007838:	f000 fbf6 	bl	8008028 <__i2b>
 800783c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800783e:	4604      	mov	r4, r0
 8007840:	2b00      	cmp	r3, #0
 8007842:	f000 81d8 	beq.w	8007bf6 <_dtoa_r+0xb56>
 8007846:	461a      	mov	r2, r3
 8007848:	4601      	mov	r1, r0
 800784a:	4648      	mov	r0, r9
 800784c:	f000 fca4 	bl	8008198 <__pow5mult>
 8007850:	9b07      	ldr	r3, [sp, #28]
 8007852:	2b01      	cmp	r3, #1
 8007854:	4604      	mov	r4, r0
 8007856:	f300 809f 	bgt.w	8007998 <_dtoa_r+0x8f8>
 800785a:	9b04      	ldr	r3, [sp, #16]
 800785c:	2b00      	cmp	r3, #0
 800785e:	f040 8097 	bne.w	8007990 <_dtoa_r+0x8f0>
 8007862:	9b05      	ldr	r3, [sp, #20]
 8007864:	f3c3 0313 	ubfx	r3, r3, #0, #20
 8007868:	2b00      	cmp	r3, #0
 800786a:	f040 8093 	bne.w	8007994 <_dtoa_r+0x8f4>
 800786e:	9b05      	ldr	r3, [sp, #20]
 8007870:	f023 4300 	bic.w	r3, r3, #2147483648	@ 0x80000000
 8007874:	0d1b      	lsrs	r3, r3, #20
 8007876:	051b      	lsls	r3, r3, #20
 8007878:	b133      	cbz	r3, 8007888 <_dtoa_r+0x7e8>
 800787a:	9b00      	ldr	r3, [sp, #0]
 800787c:	3301      	adds	r3, #1
 800787e:	9300      	str	r3, [sp, #0]
 8007880:	9b06      	ldr	r3, [sp, #24]
 8007882:	3301      	adds	r3, #1
 8007884:	9306      	str	r3, [sp, #24]
 8007886:	2301      	movs	r3, #1
 8007888:	9308      	str	r3, [sp, #32]
 800788a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 800788c:	2b00      	cmp	r3, #0
 800788e:	f000 81b8 	beq.w	8007c02 <_dtoa_r+0xb62>
 8007892:	6923      	ldr	r3, [r4, #16]
 8007894:	eb04 0383 	add.w	r3, r4, r3, lsl #2
 8007898:	6918      	ldr	r0, [r3, #16]
 800789a:	f000 fb79 	bl	8007f90 <__hi0bits>
 800789e:	f1c0 0020 	rsb	r0, r0, #32
 80078a2:	9b06      	ldr	r3, [sp, #24]
 80078a4:	4418      	add	r0, r3
 80078a6:	f010 001f 	ands.w	r0, r0, #31
 80078aa:	f000 8082 	beq.w	80079b2 <_dtoa_r+0x912>
 80078ae:	f1c0 0320 	rsb	r3, r0, #32
 80078b2:	2b04      	cmp	r3, #4
 80078b4:	dd73      	ble.n	800799e <_dtoa_r+0x8fe>
 80078b6:	9b00      	ldr	r3, [sp, #0]
 80078b8:	f1c0 001c 	rsb	r0, r0, #28
 80078bc:	4403      	add	r3, r0
 80078be:	9300      	str	r3, [sp, #0]
 80078c0:	9b06      	ldr	r3, [sp, #24]
 80078c2:	4403      	add	r3, r0
 80078c4:	4406      	add	r6, r0
 80078c6:	9306      	str	r3, [sp, #24]
 80078c8:	9b00      	ldr	r3, [sp, #0]
 80078ca:	2b00      	cmp	r3, #0
 80078cc:	dd05      	ble.n	80078da <_dtoa_r+0x83a>
 80078ce:	9902      	ldr	r1, [sp, #8]
 80078d0:	461a      	mov	r2, r3
 80078d2:	4648      	mov	r0, r9
 80078d4:	f000 fcba 	bl	800824c <__lshift>
 80078d8:	9002      	str	r0, [sp, #8]
 80078da:	9b06      	ldr	r3, [sp, #24]
 80078dc:	2b00      	cmp	r3, #0
 80078de:	dd05      	ble.n	80078ec <_dtoa_r+0x84c>
 80078e0:	4621      	mov	r1, r4
 80078e2:	461a      	mov	r2, r3
 80078e4:	4648      	mov	r0, r9
 80078e6:	f000 fcb1 	bl	800824c <__lshift>
 80078ea:	4604      	mov	r4, r0
 80078ec:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 80078ee:	2b00      	cmp	r3, #0
 80078f0:	d061      	beq.n	80079b6 <_dtoa_r+0x916>
 80078f2:	9802      	ldr	r0, [sp, #8]
 80078f4:	4621      	mov	r1, r4
 80078f6:	f000 fd15 	bl	8008324 <__mcmp>
 80078fa:	2800      	cmp	r0, #0
 80078fc:	da5b      	bge.n	80079b6 <_dtoa_r+0x916>
 80078fe:	2300      	movs	r3, #0
 8007900:	9902      	ldr	r1, [sp, #8]
 8007902:	220a      	movs	r2, #10
 8007904:	4648      	mov	r0, r9
 8007906:	f000 fafd 	bl	8007f04 <__multadd>
 800790a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 800790c:	9002      	str	r0, [sp, #8]
 800790e:	f107 38ff 	add.w	r8, r7, #4294967295
 8007912:	2b00      	cmp	r3, #0
 8007914:	f000 8177 	beq.w	8007c06 <_dtoa_r+0xb66>
 8007918:	4629      	mov	r1, r5
 800791a:	2300      	movs	r3, #0
 800791c:	220a      	movs	r2, #10
 800791e:	4648      	mov	r0, r9
 8007920:	f000 faf0 	bl	8007f04 <__multadd>
 8007924:	f1bb 0f00 	cmp.w	fp, #0
 8007928:	4605      	mov	r5, r0
 800792a:	dc6f      	bgt.n	8007a0c <_dtoa_r+0x96c>
 800792c:	9b07      	ldr	r3, [sp, #28]
 800792e:	2b02      	cmp	r3, #2
 8007930:	dc49      	bgt.n	80079c6 <_dtoa_r+0x926>
 8007932:	e06b      	b.n	8007a0c <_dtoa_r+0x96c>
 8007934:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 8007936:	f1c3 0336 	rsb	r3, r3, #54	@ 0x36
 800793a:	e73c      	b.n	80077b6 <_dtoa_r+0x716>
 800793c:	3fe00000 	.word	0x3fe00000
 8007940:	40240000 	.word	0x40240000
 8007944:	9b03      	ldr	r3, [sp, #12]
 8007946:	1e5c      	subs	r4, r3, #1
 8007948:	9b08      	ldr	r3, [sp, #32]
 800794a:	42a3      	cmp	r3, r4
 800794c:	db09      	blt.n	8007962 <_dtoa_r+0x8c2>
 800794e:	1b1c      	subs	r4, r3, r4
 8007950:	9b03      	ldr	r3, [sp, #12]
 8007952:	2b00      	cmp	r3, #0
 8007954:	f6bf af30 	bge.w	80077b8 <_dtoa_r+0x718>
 8007958:	9b00      	ldr	r3, [sp, #0]
 800795a:	9a03      	ldr	r2, [sp, #12]
 800795c:	1a9e      	subs	r6, r3, r2
 800795e:	2300      	movs	r3, #0
 8007960:	e72b      	b.n	80077ba <_dtoa_r+0x71a>
 8007962:	9b08      	ldr	r3, [sp, #32]
 8007964:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 8007966:	9408      	str	r4, [sp, #32]
 8007968:	1ae3      	subs	r3, r4, r3
 800796a:	441a      	add	r2, r3
 800796c:	9e00      	ldr	r6, [sp, #0]
 800796e:	9b03      	ldr	r3, [sp, #12]
 8007970:	920d      	str	r2, [sp, #52]	@ 0x34
 8007972:	2400      	movs	r4, #0
 8007974:	e721      	b.n	80077ba <_dtoa_r+0x71a>
 8007976:	9c08      	ldr	r4, [sp, #32]
 8007978:	9e00      	ldr	r6, [sp, #0]
 800797a:	9d09      	ldr	r5, [sp, #36]	@ 0x24
 800797c:	e728      	b.n	80077d0 <_dtoa_r+0x730>
 800797e:	f8dd 8008 	ldr.w	r8, [sp, #8]
 8007982:	e751      	b.n	8007828 <_dtoa_r+0x788>
 8007984:	9a08      	ldr	r2, [sp, #32]
 8007986:	9902      	ldr	r1, [sp, #8]
 8007988:	e750      	b.n	800782c <_dtoa_r+0x78c>
 800798a:	f8cd 8008 	str.w	r8, [sp, #8]
 800798e:	e751      	b.n	8007834 <_dtoa_r+0x794>
 8007990:	2300      	movs	r3, #0
 8007992:	e779      	b.n	8007888 <_dtoa_r+0x7e8>
 8007994:	9b04      	ldr	r3, [sp, #16]
 8007996:	e777      	b.n	8007888 <_dtoa_r+0x7e8>
 8007998:	2300      	movs	r3, #0
 800799a:	9308      	str	r3, [sp, #32]
 800799c:	e779      	b.n	8007892 <_dtoa_r+0x7f2>
 800799e:	d093      	beq.n	80078c8 <_dtoa_r+0x828>
 80079a0:	9a00      	ldr	r2, [sp, #0]
 80079a2:	331c      	adds	r3, #28
 80079a4:	441a      	add	r2, r3
 80079a6:	9200      	str	r2, [sp, #0]
 80079a8:	9a06      	ldr	r2, [sp, #24]
 80079aa:	441a      	add	r2, r3
 80079ac:	441e      	add	r6, r3
 80079ae:	9206      	str	r2, [sp, #24]
 80079b0:	e78a      	b.n	80078c8 <_dtoa_r+0x828>
 80079b2:	4603      	mov	r3, r0
 80079b4:	e7f4      	b.n	80079a0 <_dtoa_r+0x900>
 80079b6:	9b03      	ldr	r3, [sp, #12]
 80079b8:	2b00      	cmp	r3, #0
 80079ba:	46b8      	mov	r8, r7
 80079bc:	dc20      	bgt.n	8007a00 <_dtoa_r+0x960>
 80079be:	469b      	mov	fp, r3
 80079c0:	9b07      	ldr	r3, [sp, #28]
 80079c2:	2b02      	cmp	r3, #2
 80079c4:	dd1e      	ble.n	8007a04 <_dtoa_r+0x964>
 80079c6:	f1bb 0f00 	cmp.w	fp, #0
 80079ca:	f47f adb1 	bne.w	8007530 <_dtoa_r+0x490>
 80079ce:	4621      	mov	r1, r4
 80079d0:	465b      	mov	r3, fp
 80079d2:	2205      	movs	r2, #5
 80079d4:	4648      	mov	r0, r9
 80079d6:	f000 fa95 	bl	8007f04 <__multadd>
 80079da:	4601      	mov	r1, r0
 80079dc:	4604      	mov	r4, r0
 80079de:	9802      	ldr	r0, [sp, #8]
 80079e0:	f000 fca0 	bl	8008324 <__mcmp>
 80079e4:	2800      	cmp	r0, #0
 80079e6:	f77f ada3 	ble.w	8007530 <_dtoa_r+0x490>
 80079ea:	4656      	mov	r6, sl
 80079ec:	2331      	movs	r3, #49	@ 0x31
 80079ee:	f806 3b01 	strb.w	r3, [r6], #1
 80079f2:	f108 0801 	add.w	r8, r8, #1
 80079f6:	e59f      	b.n	8007538 <_dtoa_r+0x498>
 80079f8:	9c03      	ldr	r4, [sp, #12]
 80079fa:	46b8      	mov	r8, r7
 80079fc:	4625      	mov	r5, r4
 80079fe:	e7f4      	b.n	80079ea <_dtoa_r+0x94a>
 8007a00:	f8dd b00c 	ldr.w	fp, [sp, #12]
 8007a04:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a06:	2b00      	cmp	r3, #0
 8007a08:	f000 8101 	beq.w	8007c0e <_dtoa_r+0xb6e>
 8007a0c:	2e00      	cmp	r6, #0
 8007a0e:	dd05      	ble.n	8007a1c <_dtoa_r+0x97c>
 8007a10:	4629      	mov	r1, r5
 8007a12:	4632      	mov	r2, r6
 8007a14:	4648      	mov	r0, r9
 8007a16:	f000 fc19 	bl	800824c <__lshift>
 8007a1a:	4605      	mov	r5, r0
 8007a1c:	9b08      	ldr	r3, [sp, #32]
 8007a1e:	2b00      	cmp	r3, #0
 8007a20:	d05c      	beq.n	8007adc <_dtoa_r+0xa3c>
 8007a22:	6869      	ldr	r1, [r5, #4]
 8007a24:	4648      	mov	r0, r9
 8007a26:	f000 fa0b 	bl	8007e40 <_Balloc>
 8007a2a:	4606      	mov	r6, r0
 8007a2c:	b928      	cbnz	r0, 8007a3a <_dtoa_r+0x99a>
 8007a2e:	4b82      	ldr	r3, [pc, #520]	@ (8007c38 <_dtoa_r+0xb98>)
 8007a30:	4602      	mov	r2, r0
 8007a32:	f240 21ef 	movw	r1, #751	@ 0x2ef
 8007a36:	f7ff bb4a 	b.w	80070ce <_dtoa_r+0x2e>
 8007a3a:	692a      	ldr	r2, [r5, #16]
 8007a3c:	3202      	adds	r2, #2
 8007a3e:	0092      	lsls	r2, r2, #2
 8007a40:	f105 010c 	add.w	r1, r5, #12
 8007a44:	300c      	adds	r0, #12
 8007a46:	f001 f827 	bl	8008a98 <memcpy>
 8007a4a:	2201      	movs	r2, #1
 8007a4c:	4631      	mov	r1, r6
 8007a4e:	4648      	mov	r0, r9
 8007a50:	f000 fbfc 	bl	800824c <__lshift>
 8007a54:	f10a 0301 	add.w	r3, sl, #1
 8007a58:	9300      	str	r3, [sp, #0]
 8007a5a:	eb0a 030b 	add.w	r3, sl, fp
 8007a5e:	9308      	str	r3, [sp, #32]
 8007a60:	9b04      	ldr	r3, [sp, #16]
 8007a62:	f003 0301 	and.w	r3, r3, #1
 8007a66:	462f      	mov	r7, r5
 8007a68:	9306      	str	r3, [sp, #24]
 8007a6a:	4605      	mov	r5, r0
 8007a6c:	9b00      	ldr	r3, [sp, #0]
 8007a6e:	9802      	ldr	r0, [sp, #8]
 8007a70:	4621      	mov	r1, r4
 8007a72:	f103 3bff 	add.w	fp, r3, #4294967295
 8007a76:	f7ff fa88 	bl	8006f8a <quorem>
 8007a7a:	4603      	mov	r3, r0
 8007a7c:	3330      	adds	r3, #48	@ 0x30
 8007a7e:	9003      	str	r0, [sp, #12]
 8007a80:	4639      	mov	r1, r7
 8007a82:	9802      	ldr	r0, [sp, #8]
 8007a84:	9309      	str	r3, [sp, #36]	@ 0x24
 8007a86:	f000 fc4d 	bl	8008324 <__mcmp>
 8007a8a:	462a      	mov	r2, r5
 8007a8c:	9004      	str	r0, [sp, #16]
 8007a8e:	4621      	mov	r1, r4
 8007a90:	4648      	mov	r0, r9
 8007a92:	f000 fc63 	bl	800835c <__mdiff>
 8007a96:	68c2      	ldr	r2, [r0, #12]
 8007a98:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007a9a:	4606      	mov	r6, r0
 8007a9c:	bb02      	cbnz	r2, 8007ae0 <_dtoa_r+0xa40>
 8007a9e:	4601      	mov	r1, r0
 8007aa0:	9802      	ldr	r0, [sp, #8]
 8007aa2:	f000 fc3f 	bl	8008324 <__mcmp>
 8007aa6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007aa8:	4602      	mov	r2, r0
 8007aaa:	4631      	mov	r1, r6
 8007aac:	4648      	mov	r0, r9
 8007aae:	920c      	str	r2, [sp, #48]	@ 0x30
 8007ab0:	9309      	str	r3, [sp, #36]	@ 0x24
 8007ab2:	f000 fa05 	bl	8007ec0 <_Bfree>
 8007ab6:	9b07      	ldr	r3, [sp, #28]
 8007ab8:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 8007aba:	9e00      	ldr	r6, [sp, #0]
 8007abc:	ea42 0103 	orr.w	r1, r2, r3
 8007ac0:	9b06      	ldr	r3, [sp, #24]
 8007ac2:	4319      	orrs	r1, r3
 8007ac4:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8007ac6:	d10d      	bne.n	8007ae4 <_dtoa_r+0xa44>
 8007ac8:	2b39      	cmp	r3, #57	@ 0x39
 8007aca:	d027      	beq.n	8007b1c <_dtoa_r+0xa7c>
 8007acc:	9a04      	ldr	r2, [sp, #16]
 8007ace:	2a00      	cmp	r2, #0
 8007ad0:	dd01      	ble.n	8007ad6 <_dtoa_r+0xa36>
 8007ad2:	9b03      	ldr	r3, [sp, #12]
 8007ad4:	3331      	adds	r3, #49	@ 0x31
 8007ad6:	f88b 3000 	strb.w	r3, [fp]
 8007ada:	e52e      	b.n	800753a <_dtoa_r+0x49a>
 8007adc:	4628      	mov	r0, r5
 8007ade:	e7b9      	b.n	8007a54 <_dtoa_r+0x9b4>
 8007ae0:	2201      	movs	r2, #1
 8007ae2:	e7e2      	b.n	8007aaa <_dtoa_r+0xa0a>
 8007ae4:	9904      	ldr	r1, [sp, #16]
 8007ae6:	2900      	cmp	r1, #0
 8007ae8:	db04      	blt.n	8007af4 <_dtoa_r+0xa54>
 8007aea:	9807      	ldr	r0, [sp, #28]
 8007aec:	4301      	orrs	r1, r0
 8007aee:	9806      	ldr	r0, [sp, #24]
 8007af0:	4301      	orrs	r1, r0
 8007af2:	d120      	bne.n	8007b36 <_dtoa_r+0xa96>
 8007af4:	2a00      	cmp	r2, #0
 8007af6:	ddee      	ble.n	8007ad6 <_dtoa_r+0xa36>
 8007af8:	9902      	ldr	r1, [sp, #8]
 8007afa:	9300      	str	r3, [sp, #0]
 8007afc:	2201      	movs	r2, #1
 8007afe:	4648      	mov	r0, r9
 8007b00:	f000 fba4 	bl	800824c <__lshift>
 8007b04:	4621      	mov	r1, r4
 8007b06:	9002      	str	r0, [sp, #8]
 8007b08:	f000 fc0c 	bl	8008324 <__mcmp>
 8007b0c:	2800      	cmp	r0, #0
 8007b0e:	9b00      	ldr	r3, [sp, #0]
 8007b10:	dc02      	bgt.n	8007b18 <_dtoa_r+0xa78>
 8007b12:	d1e0      	bne.n	8007ad6 <_dtoa_r+0xa36>
 8007b14:	07da      	lsls	r2, r3, #31
 8007b16:	d5de      	bpl.n	8007ad6 <_dtoa_r+0xa36>
 8007b18:	2b39      	cmp	r3, #57	@ 0x39
 8007b1a:	d1da      	bne.n	8007ad2 <_dtoa_r+0xa32>
 8007b1c:	2339      	movs	r3, #57	@ 0x39
 8007b1e:	f88b 3000 	strb.w	r3, [fp]
 8007b22:	4633      	mov	r3, r6
 8007b24:	461e      	mov	r6, r3
 8007b26:	3b01      	subs	r3, #1
 8007b28:	f816 2c01 	ldrb.w	r2, [r6, #-1]
 8007b2c:	2a39      	cmp	r2, #57	@ 0x39
 8007b2e:	d04e      	beq.n	8007bce <_dtoa_r+0xb2e>
 8007b30:	3201      	adds	r2, #1
 8007b32:	701a      	strb	r2, [r3, #0]
 8007b34:	e501      	b.n	800753a <_dtoa_r+0x49a>
 8007b36:	2a00      	cmp	r2, #0
 8007b38:	dd03      	ble.n	8007b42 <_dtoa_r+0xaa2>
 8007b3a:	2b39      	cmp	r3, #57	@ 0x39
 8007b3c:	d0ee      	beq.n	8007b1c <_dtoa_r+0xa7c>
 8007b3e:	3301      	adds	r3, #1
 8007b40:	e7c9      	b.n	8007ad6 <_dtoa_r+0xa36>
 8007b42:	9a00      	ldr	r2, [sp, #0]
 8007b44:	9908      	ldr	r1, [sp, #32]
 8007b46:	f802 3c01 	strb.w	r3, [r2, #-1]
 8007b4a:	428a      	cmp	r2, r1
 8007b4c:	d028      	beq.n	8007ba0 <_dtoa_r+0xb00>
 8007b4e:	9902      	ldr	r1, [sp, #8]
 8007b50:	2300      	movs	r3, #0
 8007b52:	220a      	movs	r2, #10
 8007b54:	4648      	mov	r0, r9
 8007b56:	f000 f9d5 	bl	8007f04 <__multadd>
 8007b5a:	42af      	cmp	r7, r5
 8007b5c:	9002      	str	r0, [sp, #8]
 8007b5e:	f04f 0300 	mov.w	r3, #0
 8007b62:	f04f 020a 	mov.w	r2, #10
 8007b66:	4639      	mov	r1, r7
 8007b68:	4648      	mov	r0, r9
 8007b6a:	d107      	bne.n	8007b7c <_dtoa_r+0xadc>
 8007b6c:	f000 f9ca 	bl	8007f04 <__multadd>
 8007b70:	4607      	mov	r7, r0
 8007b72:	4605      	mov	r5, r0
 8007b74:	9b00      	ldr	r3, [sp, #0]
 8007b76:	3301      	adds	r3, #1
 8007b78:	9300      	str	r3, [sp, #0]
 8007b7a:	e777      	b.n	8007a6c <_dtoa_r+0x9cc>
 8007b7c:	f000 f9c2 	bl	8007f04 <__multadd>
 8007b80:	4629      	mov	r1, r5
 8007b82:	4607      	mov	r7, r0
 8007b84:	2300      	movs	r3, #0
 8007b86:	220a      	movs	r2, #10
 8007b88:	4648      	mov	r0, r9
 8007b8a:	f000 f9bb 	bl	8007f04 <__multadd>
 8007b8e:	4605      	mov	r5, r0
 8007b90:	e7f0      	b.n	8007b74 <_dtoa_r+0xad4>
 8007b92:	f1bb 0f00 	cmp.w	fp, #0
 8007b96:	bfcc      	ite	gt
 8007b98:	465e      	movgt	r6, fp
 8007b9a:	2601      	movle	r6, #1
 8007b9c:	4456      	add	r6, sl
 8007b9e:	2700      	movs	r7, #0
 8007ba0:	9902      	ldr	r1, [sp, #8]
 8007ba2:	9300      	str	r3, [sp, #0]
 8007ba4:	2201      	movs	r2, #1
 8007ba6:	4648      	mov	r0, r9
 8007ba8:	f000 fb50 	bl	800824c <__lshift>
 8007bac:	4621      	mov	r1, r4
 8007bae:	9002      	str	r0, [sp, #8]
 8007bb0:	f000 fbb8 	bl	8008324 <__mcmp>
 8007bb4:	2800      	cmp	r0, #0
 8007bb6:	dcb4      	bgt.n	8007b22 <_dtoa_r+0xa82>
 8007bb8:	d102      	bne.n	8007bc0 <_dtoa_r+0xb20>
 8007bba:	9b00      	ldr	r3, [sp, #0]
 8007bbc:	07db      	lsls	r3, r3, #31
 8007bbe:	d4b0      	bmi.n	8007b22 <_dtoa_r+0xa82>
 8007bc0:	4633      	mov	r3, r6
 8007bc2:	461e      	mov	r6, r3
 8007bc4:	f813 2d01 	ldrb.w	r2, [r3, #-1]!
 8007bc8:	2a30      	cmp	r2, #48	@ 0x30
 8007bca:	d0fa      	beq.n	8007bc2 <_dtoa_r+0xb22>
 8007bcc:	e4b5      	b.n	800753a <_dtoa_r+0x49a>
 8007bce:	459a      	cmp	sl, r3
 8007bd0:	d1a8      	bne.n	8007b24 <_dtoa_r+0xa84>
 8007bd2:	2331      	movs	r3, #49	@ 0x31
 8007bd4:	f108 0801 	add.w	r8, r8, #1
 8007bd8:	f88a 3000 	strb.w	r3, [sl]
 8007bdc:	e4ad      	b.n	800753a <_dtoa_r+0x49a>
 8007bde:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 8007be0:	f8df a058 	ldr.w	sl, [pc, #88]	@ 8007c3c <_dtoa_r+0xb9c>
 8007be4:	b11b      	cbz	r3, 8007bee <_dtoa_r+0xb4e>
 8007be6:	f10a 0308 	add.w	r3, sl, #8
 8007bea:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 8007bec:	6013      	str	r3, [r2, #0]
 8007bee:	4650      	mov	r0, sl
 8007bf0:	b017      	add	sp, #92	@ 0x5c
 8007bf2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8007bf6:	9b07      	ldr	r3, [sp, #28]
 8007bf8:	2b01      	cmp	r3, #1
 8007bfa:	f77f ae2e 	ble.w	800785a <_dtoa_r+0x7ba>
 8007bfe:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 8007c00:	9308      	str	r3, [sp, #32]
 8007c02:	2001      	movs	r0, #1
 8007c04:	e64d      	b.n	80078a2 <_dtoa_r+0x802>
 8007c06:	f1bb 0f00 	cmp.w	fp, #0
 8007c0a:	f77f aed9 	ble.w	80079c0 <_dtoa_r+0x920>
 8007c0e:	4656      	mov	r6, sl
 8007c10:	9802      	ldr	r0, [sp, #8]
 8007c12:	4621      	mov	r1, r4
 8007c14:	f7ff f9b9 	bl	8006f8a <quorem>
 8007c18:	f100 0330 	add.w	r3, r0, #48	@ 0x30
 8007c1c:	f806 3b01 	strb.w	r3, [r6], #1
 8007c20:	eba6 020a 	sub.w	r2, r6, sl
 8007c24:	4593      	cmp	fp, r2
 8007c26:	ddb4      	ble.n	8007b92 <_dtoa_r+0xaf2>
 8007c28:	9902      	ldr	r1, [sp, #8]
 8007c2a:	2300      	movs	r3, #0
 8007c2c:	220a      	movs	r2, #10
 8007c2e:	4648      	mov	r0, r9
 8007c30:	f000 f968 	bl	8007f04 <__multadd>
 8007c34:	9002      	str	r0, [sp, #8]
 8007c36:	e7eb      	b.n	8007c10 <_dtoa_r+0xb70>
 8007c38:	08009284 	.word	0x08009284
 8007c3c:	08009208 	.word	0x08009208

08007c40 <_free_r>:
 8007c40:	b538      	push	{r3, r4, r5, lr}
 8007c42:	4605      	mov	r5, r0
 8007c44:	2900      	cmp	r1, #0
 8007c46:	d041      	beq.n	8007ccc <_free_r+0x8c>
 8007c48:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8007c4c:	1f0c      	subs	r4, r1, #4
 8007c4e:	2b00      	cmp	r3, #0
 8007c50:	bfb8      	it	lt
 8007c52:	18e4      	addlt	r4, r4, r3
 8007c54:	f000 f8e8 	bl	8007e28 <__malloc_lock>
 8007c58:	4a1d      	ldr	r2, [pc, #116]	@ (8007cd0 <_free_r+0x90>)
 8007c5a:	6813      	ldr	r3, [r2, #0]
 8007c5c:	b933      	cbnz	r3, 8007c6c <_free_r+0x2c>
 8007c5e:	6063      	str	r3, [r4, #4]
 8007c60:	6014      	str	r4, [r2, #0]
 8007c62:	4628      	mov	r0, r5
 8007c64:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8007c68:	f000 b8e4 	b.w	8007e34 <__malloc_unlock>
 8007c6c:	42a3      	cmp	r3, r4
 8007c6e:	d908      	bls.n	8007c82 <_free_r+0x42>
 8007c70:	6820      	ldr	r0, [r4, #0]
 8007c72:	1821      	adds	r1, r4, r0
 8007c74:	428b      	cmp	r3, r1
 8007c76:	bf01      	itttt	eq
 8007c78:	6819      	ldreq	r1, [r3, #0]
 8007c7a:	685b      	ldreq	r3, [r3, #4]
 8007c7c:	1809      	addeq	r1, r1, r0
 8007c7e:	6021      	streq	r1, [r4, #0]
 8007c80:	e7ed      	b.n	8007c5e <_free_r+0x1e>
 8007c82:	461a      	mov	r2, r3
 8007c84:	685b      	ldr	r3, [r3, #4]
 8007c86:	b10b      	cbz	r3, 8007c8c <_free_r+0x4c>
 8007c88:	42a3      	cmp	r3, r4
 8007c8a:	d9fa      	bls.n	8007c82 <_free_r+0x42>
 8007c8c:	6811      	ldr	r1, [r2, #0]
 8007c8e:	1850      	adds	r0, r2, r1
 8007c90:	42a0      	cmp	r0, r4
 8007c92:	d10b      	bne.n	8007cac <_free_r+0x6c>
 8007c94:	6820      	ldr	r0, [r4, #0]
 8007c96:	4401      	add	r1, r0
 8007c98:	1850      	adds	r0, r2, r1
 8007c9a:	4283      	cmp	r3, r0
 8007c9c:	6011      	str	r1, [r2, #0]
 8007c9e:	d1e0      	bne.n	8007c62 <_free_r+0x22>
 8007ca0:	6818      	ldr	r0, [r3, #0]
 8007ca2:	685b      	ldr	r3, [r3, #4]
 8007ca4:	6053      	str	r3, [r2, #4]
 8007ca6:	4408      	add	r0, r1
 8007ca8:	6010      	str	r0, [r2, #0]
 8007caa:	e7da      	b.n	8007c62 <_free_r+0x22>
 8007cac:	d902      	bls.n	8007cb4 <_free_r+0x74>
 8007cae:	230c      	movs	r3, #12
 8007cb0:	602b      	str	r3, [r5, #0]
 8007cb2:	e7d6      	b.n	8007c62 <_free_r+0x22>
 8007cb4:	6820      	ldr	r0, [r4, #0]
 8007cb6:	1821      	adds	r1, r4, r0
 8007cb8:	428b      	cmp	r3, r1
 8007cba:	bf04      	itt	eq
 8007cbc:	6819      	ldreq	r1, [r3, #0]
 8007cbe:	685b      	ldreq	r3, [r3, #4]
 8007cc0:	6063      	str	r3, [r4, #4]
 8007cc2:	bf04      	itt	eq
 8007cc4:	1809      	addeq	r1, r1, r0
 8007cc6:	6021      	streq	r1, [r4, #0]
 8007cc8:	6054      	str	r4, [r2, #4]
 8007cca:	e7ca      	b.n	8007c62 <_free_r+0x22>
 8007ccc:	bd38      	pop	{r3, r4, r5, pc}
 8007cce:	bf00      	nop
 8007cd0:	200008b8 	.word	0x200008b8

08007cd4 <malloc>:
 8007cd4:	4b02      	ldr	r3, [pc, #8]	@ (8007ce0 <malloc+0xc>)
 8007cd6:	4601      	mov	r1, r0
 8007cd8:	6818      	ldr	r0, [r3, #0]
 8007cda:	f000 b825 	b.w	8007d28 <_malloc_r>
 8007cde:	bf00      	nop
 8007ce0:	20000018 	.word	0x20000018

08007ce4 <sbrk_aligned>:
 8007ce4:	b570      	push	{r4, r5, r6, lr}
 8007ce6:	4e0f      	ldr	r6, [pc, #60]	@ (8007d24 <sbrk_aligned+0x40>)
 8007ce8:	460c      	mov	r4, r1
 8007cea:	6831      	ldr	r1, [r6, #0]
 8007cec:	4605      	mov	r5, r0
 8007cee:	b911      	cbnz	r1, 8007cf6 <sbrk_aligned+0x12>
 8007cf0:	f000 fec2 	bl	8008a78 <_sbrk_r>
 8007cf4:	6030      	str	r0, [r6, #0]
 8007cf6:	4621      	mov	r1, r4
 8007cf8:	4628      	mov	r0, r5
 8007cfa:	f000 febd 	bl	8008a78 <_sbrk_r>
 8007cfe:	1c43      	adds	r3, r0, #1
 8007d00:	d103      	bne.n	8007d0a <sbrk_aligned+0x26>
 8007d02:	f04f 34ff 	mov.w	r4, #4294967295
 8007d06:	4620      	mov	r0, r4
 8007d08:	bd70      	pop	{r4, r5, r6, pc}
 8007d0a:	1cc4      	adds	r4, r0, #3
 8007d0c:	f024 0403 	bic.w	r4, r4, #3
 8007d10:	42a0      	cmp	r0, r4
 8007d12:	d0f8      	beq.n	8007d06 <sbrk_aligned+0x22>
 8007d14:	1a21      	subs	r1, r4, r0
 8007d16:	4628      	mov	r0, r5
 8007d18:	f000 feae 	bl	8008a78 <_sbrk_r>
 8007d1c:	3001      	adds	r0, #1
 8007d1e:	d1f2      	bne.n	8007d06 <sbrk_aligned+0x22>
 8007d20:	e7ef      	b.n	8007d02 <sbrk_aligned+0x1e>
 8007d22:	bf00      	nop
 8007d24:	200008b4 	.word	0x200008b4

08007d28 <_malloc_r>:
 8007d28:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007d2c:	1ccd      	adds	r5, r1, #3
 8007d2e:	f025 0503 	bic.w	r5, r5, #3
 8007d32:	3508      	adds	r5, #8
 8007d34:	2d0c      	cmp	r5, #12
 8007d36:	bf38      	it	cc
 8007d38:	250c      	movcc	r5, #12
 8007d3a:	2d00      	cmp	r5, #0
 8007d3c:	4606      	mov	r6, r0
 8007d3e:	db01      	blt.n	8007d44 <_malloc_r+0x1c>
 8007d40:	42a9      	cmp	r1, r5
 8007d42:	d904      	bls.n	8007d4e <_malloc_r+0x26>
 8007d44:	230c      	movs	r3, #12
 8007d46:	6033      	str	r3, [r6, #0]
 8007d48:	2000      	movs	r0, #0
 8007d4a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8007d4e:	f8df 80d4 	ldr.w	r8, [pc, #212]	@ 8007e24 <_malloc_r+0xfc>
 8007d52:	f000 f869 	bl	8007e28 <__malloc_lock>
 8007d56:	f8d8 3000 	ldr.w	r3, [r8]
 8007d5a:	461c      	mov	r4, r3
 8007d5c:	bb44      	cbnz	r4, 8007db0 <_malloc_r+0x88>
 8007d5e:	4629      	mov	r1, r5
 8007d60:	4630      	mov	r0, r6
 8007d62:	f7ff ffbf 	bl	8007ce4 <sbrk_aligned>
 8007d66:	1c43      	adds	r3, r0, #1
 8007d68:	4604      	mov	r4, r0
 8007d6a:	d158      	bne.n	8007e1e <_malloc_r+0xf6>
 8007d6c:	f8d8 4000 	ldr.w	r4, [r8]
 8007d70:	4627      	mov	r7, r4
 8007d72:	2f00      	cmp	r7, #0
 8007d74:	d143      	bne.n	8007dfe <_malloc_r+0xd6>
 8007d76:	2c00      	cmp	r4, #0
 8007d78:	d04b      	beq.n	8007e12 <_malloc_r+0xea>
 8007d7a:	6823      	ldr	r3, [r4, #0]
 8007d7c:	4639      	mov	r1, r7
 8007d7e:	4630      	mov	r0, r6
 8007d80:	eb04 0903 	add.w	r9, r4, r3
 8007d84:	f000 fe78 	bl	8008a78 <_sbrk_r>
 8007d88:	4581      	cmp	r9, r0
 8007d8a:	d142      	bne.n	8007e12 <_malloc_r+0xea>
 8007d8c:	6821      	ldr	r1, [r4, #0]
 8007d8e:	1a6d      	subs	r5, r5, r1
 8007d90:	4629      	mov	r1, r5
 8007d92:	4630      	mov	r0, r6
 8007d94:	f7ff ffa6 	bl	8007ce4 <sbrk_aligned>
 8007d98:	3001      	adds	r0, #1
 8007d9a:	d03a      	beq.n	8007e12 <_malloc_r+0xea>
 8007d9c:	6823      	ldr	r3, [r4, #0]
 8007d9e:	442b      	add	r3, r5
 8007da0:	6023      	str	r3, [r4, #0]
 8007da2:	f8d8 3000 	ldr.w	r3, [r8]
 8007da6:	685a      	ldr	r2, [r3, #4]
 8007da8:	bb62      	cbnz	r2, 8007e04 <_malloc_r+0xdc>
 8007daa:	f8c8 7000 	str.w	r7, [r8]
 8007dae:	e00f      	b.n	8007dd0 <_malloc_r+0xa8>
 8007db0:	6822      	ldr	r2, [r4, #0]
 8007db2:	1b52      	subs	r2, r2, r5
 8007db4:	d420      	bmi.n	8007df8 <_malloc_r+0xd0>
 8007db6:	2a0b      	cmp	r2, #11
 8007db8:	d917      	bls.n	8007dea <_malloc_r+0xc2>
 8007dba:	1961      	adds	r1, r4, r5
 8007dbc:	42a3      	cmp	r3, r4
 8007dbe:	6025      	str	r5, [r4, #0]
 8007dc0:	bf18      	it	ne
 8007dc2:	6059      	strne	r1, [r3, #4]
 8007dc4:	6863      	ldr	r3, [r4, #4]
 8007dc6:	bf08      	it	eq
 8007dc8:	f8c8 1000 	streq.w	r1, [r8]
 8007dcc:	5162      	str	r2, [r4, r5]
 8007dce:	604b      	str	r3, [r1, #4]
 8007dd0:	4630      	mov	r0, r6
 8007dd2:	f000 f82f 	bl	8007e34 <__malloc_unlock>
 8007dd6:	f104 000b 	add.w	r0, r4, #11
 8007dda:	1d23      	adds	r3, r4, #4
 8007ddc:	f020 0007 	bic.w	r0, r0, #7
 8007de0:	1ac2      	subs	r2, r0, r3
 8007de2:	bf1c      	itt	ne
 8007de4:	1a1b      	subne	r3, r3, r0
 8007de6:	50a3      	strne	r3, [r4, r2]
 8007de8:	e7af      	b.n	8007d4a <_malloc_r+0x22>
 8007dea:	6862      	ldr	r2, [r4, #4]
 8007dec:	42a3      	cmp	r3, r4
 8007dee:	bf0c      	ite	eq
 8007df0:	f8c8 2000 	streq.w	r2, [r8]
 8007df4:	605a      	strne	r2, [r3, #4]
 8007df6:	e7eb      	b.n	8007dd0 <_malloc_r+0xa8>
 8007df8:	4623      	mov	r3, r4
 8007dfa:	6864      	ldr	r4, [r4, #4]
 8007dfc:	e7ae      	b.n	8007d5c <_malloc_r+0x34>
 8007dfe:	463c      	mov	r4, r7
 8007e00:	687f      	ldr	r7, [r7, #4]
 8007e02:	e7b6      	b.n	8007d72 <_malloc_r+0x4a>
 8007e04:	461a      	mov	r2, r3
 8007e06:	685b      	ldr	r3, [r3, #4]
 8007e08:	42a3      	cmp	r3, r4
 8007e0a:	d1fb      	bne.n	8007e04 <_malloc_r+0xdc>
 8007e0c:	2300      	movs	r3, #0
 8007e0e:	6053      	str	r3, [r2, #4]
 8007e10:	e7de      	b.n	8007dd0 <_malloc_r+0xa8>
 8007e12:	230c      	movs	r3, #12
 8007e14:	6033      	str	r3, [r6, #0]
 8007e16:	4630      	mov	r0, r6
 8007e18:	f000 f80c 	bl	8007e34 <__malloc_unlock>
 8007e1c:	e794      	b.n	8007d48 <_malloc_r+0x20>
 8007e1e:	6005      	str	r5, [r0, #0]
 8007e20:	e7d6      	b.n	8007dd0 <_malloc_r+0xa8>
 8007e22:	bf00      	nop
 8007e24:	200008b8 	.word	0x200008b8

08007e28 <__malloc_lock>:
 8007e28:	4801      	ldr	r0, [pc, #4]	@ (8007e30 <__malloc_lock+0x8>)
 8007e2a:	f7ff b8ac 	b.w	8006f86 <__retarget_lock_acquire_recursive>
 8007e2e:	bf00      	nop
 8007e30:	200008b0 	.word	0x200008b0

08007e34 <__malloc_unlock>:
 8007e34:	4801      	ldr	r0, [pc, #4]	@ (8007e3c <__malloc_unlock+0x8>)
 8007e36:	f7ff b8a7 	b.w	8006f88 <__retarget_lock_release_recursive>
 8007e3a:	bf00      	nop
 8007e3c:	200008b0 	.word	0x200008b0

08007e40 <_Balloc>:
 8007e40:	b570      	push	{r4, r5, r6, lr}
 8007e42:	69c6      	ldr	r6, [r0, #28]
 8007e44:	4604      	mov	r4, r0
 8007e46:	460d      	mov	r5, r1
 8007e48:	b976      	cbnz	r6, 8007e68 <_Balloc+0x28>
 8007e4a:	2010      	movs	r0, #16
 8007e4c:	f7ff ff42 	bl	8007cd4 <malloc>
 8007e50:	4602      	mov	r2, r0
 8007e52:	61e0      	str	r0, [r4, #28]
 8007e54:	b920      	cbnz	r0, 8007e60 <_Balloc+0x20>
 8007e56:	4b18      	ldr	r3, [pc, #96]	@ (8007eb8 <_Balloc+0x78>)
 8007e58:	4818      	ldr	r0, [pc, #96]	@ (8007ebc <_Balloc+0x7c>)
 8007e5a:	216b      	movs	r1, #107	@ 0x6b
 8007e5c:	f000 fe2a 	bl	8008ab4 <__assert_func>
 8007e60:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007e64:	6006      	str	r6, [r0, #0]
 8007e66:	60c6      	str	r6, [r0, #12]
 8007e68:	69e6      	ldr	r6, [r4, #28]
 8007e6a:	68f3      	ldr	r3, [r6, #12]
 8007e6c:	b183      	cbz	r3, 8007e90 <_Balloc+0x50>
 8007e6e:	69e3      	ldr	r3, [r4, #28]
 8007e70:	68db      	ldr	r3, [r3, #12]
 8007e72:	f853 0025 	ldr.w	r0, [r3, r5, lsl #2]
 8007e76:	b9b8      	cbnz	r0, 8007ea8 <_Balloc+0x68>
 8007e78:	2101      	movs	r1, #1
 8007e7a:	fa01 f605 	lsl.w	r6, r1, r5
 8007e7e:	1d72      	adds	r2, r6, #5
 8007e80:	0092      	lsls	r2, r2, #2
 8007e82:	4620      	mov	r0, r4
 8007e84:	f000 fe34 	bl	8008af0 <_calloc_r>
 8007e88:	b160      	cbz	r0, 8007ea4 <_Balloc+0x64>
 8007e8a:	e9c0 5601 	strd	r5, r6, [r0, #4]
 8007e8e:	e00e      	b.n	8007eae <_Balloc+0x6e>
 8007e90:	2221      	movs	r2, #33	@ 0x21
 8007e92:	2104      	movs	r1, #4
 8007e94:	4620      	mov	r0, r4
 8007e96:	f000 fe2b 	bl	8008af0 <_calloc_r>
 8007e9a:	69e3      	ldr	r3, [r4, #28]
 8007e9c:	60f0      	str	r0, [r6, #12]
 8007e9e:	68db      	ldr	r3, [r3, #12]
 8007ea0:	2b00      	cmp	r3, #0
 8007ea2:	d1e4      	bne.n	8007e6e <_Balloc+0x2e>
 8007ea4:	2000      	movs	r0, #0
 8007ea6:	bd70      	pop	{r4, r5, r6, pc}
 8007ea8:	6802      	ldr	r2, [r0, #0]
 8007eaa:	f843 2025 	str.w	r2, [r3, r5, lsl #2]
 8007eae:	2300      	movs	r3, #0
 8007eb0:	e9c0 3303 	strd	r3, r3, [r0, #12]
 8007eb4:	e7f7      	b.n	8007ea6 <_Balloc+0x66>
 8007eb6:	bf00      	nop
 8007eb8:	08009215 	.word	0x08009215
 8007ebc:	08009295 	.word	0x08009295

08007ec0 <_Bfree>:
 8007ec0:	b570      	push	{r4, r5, r6, lr}
 8007ec2:	69c6      	ldr	r6, [r0, #28]
 8007ec4:	4605      	mov	r5, r0
 8007ec6:	460c      	mov	r4, r1
 8007ec8:	b976      	cbnz	r6, 8007ee8 <_Bfree+0x28>
 8007eca:	2010      	movs	r0, #16
 8007ecc:	f7ff ff02 	bl	8007cd4 <malloc>
 8007ed0:	4602      	mov	r2, r0
 8007ed2:	61e8      	str	r0, [r5, #28]
 8007ed4:	b920      	cbnz	r0, 8007ee0 <_Bfree+0x20>
 8007ed6:	4b09      	ldr	r3, [pc, #36]	@ (8007efc <_Bfree+0x3c>)
 8007ed8:	4809      	ldr	r0, [pc, #36]	@ (8007f00 <_Bfree+0x40>)
 8007eda:	218f      	movs	r1, #143	@ 0x8f
 8007edc:	f000 fdea 	bl	8008ab4 <__assert_func>
 8007ee0:	e9c0 6601 	strd	r6, r6, [r0, #4]
 8007ee4:	6006      	str	r6, [r0, #0]
 8007ee6:	60c6      	str	r6, [r0, #12]
 8007ee8:	b13c      	cbz	r4, 8007efa <_Bfree+0x3a>
 8007eea:	69eb      	ldr	r3, [r5, #28]
 8007eec:	6862      	ldr	r2, [r4, #4]
 8007eee:	68db      	ldr	r3, [r3, #12]
 8007ef0:	f853 1022 	ldr.w	r1, [r3, r2, lsl #2]
 8007ef4:	6021      	str	r1, [r4, #0]
 8007ef6:	f843 4022 	str.w	r4, [r3, r2, lsl #2]
 8007efa:	bd70      	pop	{r4, r5, r6, pc}
 8007efc:	08009215 	.word	0x08009215
 8007f00:	08009295 	.word	0x08009295

08007f04 <__multadd>:
 8007f04:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007f08:	690d      	ldr	r5, [r1, #16]
 8007f0a:	4607      	mov	r7, r0
 8007f0c:	460c      	mov	r4, r1
 8007f0e:	461e      	mov	r6, r3
 8007f10:	f101 0c14 	add.w	ip, r1, #20
 8007f14:	2000      	movs	r0, #0
 8007f16:	f8dc 3000 	ldr.w	r3, [ip]
 8007f1a:	b299      	uxth	r1, r3
 8007f1c:	fb02 6101 	mla	r1, r2, r1, r6
 8007f20:	0c1e      	lsrs	r6, r3, #16
 8007f22:	0c0b      	lsrs	r3, r1, #16
 8007f24:	fb02 3306 	mla	r3, r2, r6, r3
 8007f28:	b289      	uxth	r1, r1
 8007f2a:	3001      	adds	r0, #1
 8007f2c:	eb01 4103 	add.w	r1, r1, r3, lsl #16
 8007f30:	4285      	cmp	r5, r0
 8007f32:	f84c 1b04 	str.w	r1, [ip], #4
 8007f36:	ea4f 4613 	mov.w	r6, r3, lsr #16
 8007f3a:	dcec      	bgt.n	8007f16 <__multadd+0x12>
 8007f3c:	b30e      	cbz	r6, 8007f82 <__multadd+0x7e>
 8007f3e:	68a3      	ldr	r3, [r4, #8]
 8007f40:	42ab      	cmp	r3, r5
 8007f42:	dc19      	bgt.n	8007f78 <__multadd+0x74>
 8007f44:	6861      	ldr	r1, [r4, #4]
 8007f46:	4638      	mov	r0, r7
 8007f48:	3101      	adds	r1, #1
 8007f4a:	f7ff ff79 	bl	8007e40 <_Balloc>
 8007f4e:	4680      	mov	r8, r0
 8007f50:	b928      	cbnz	r0, 8007f5e <__multadd+0x5a>
 8007f52:	4602      	mov	r2, r0
 8007f54:	4b0c      	ldr	r3, [pc, #48]	@ (8007f88 <__multadd+0x84>)
 8007f56:	480d      	ldr	r0, [pc, #52]	@ (8007f8c <__multadd+0x88>)
 8007f58:	21ba      	movs	r1, #186	@ 0xba
 8007f5a:	f000 fdab 	bl	8008ab4 <__assert_func>
 8007f5e:	6922      	ldr	r2, [r4, #16]
 8007f60:	3202      	adds	r2, #2
 8007f62:	f104 010c 	add.w	r1, r4, #12
 8007f66:	0092      	lsls	r2, r2, #2
 8007f68:	300c      	adds	r0, #12
 8007f6a:	f000 fd95 	bl	8008a98 <memcpy>
 8007f6e:	4621      	mov	r1, r4
 8007f70:	4638      	mov	r0, r7
 8007f72:	f7ff ffa5 	bl	8007ec0 <_Bfree>
 8007f76:	4644      	mov	r4, r8
 8007f78:	eb04 0385 	add.w	r3, r4, r5, lsl #2
 8007f7c:	3501      	adds	r5, #1
 8007f7e:	615e      	str	r6, [r3, #20]
 8007f80:	6125      	str	r5, [r4, #16]
 8007f82:	4620      	mov	r0, r4
 8007f84:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007f88:	08009284 	.word	0x08009284
 8007f8c:	08009295 	.word	0x08009295

08007f90 <__hi0bits>:
 8007f90:	f5b0 3f80 	cmp.w	r0, #65536	@ 0x10000
 8007f94:	4603      	mov	r3, r0
 8007f96:	bf36      	itet	cc
 8007f98:	0403      	lslcc	r3, r0, #16
 8007f9a:	2000      	movcs	r0, #0
 8007f9c:	2010      	movcc	r0, #16
 8007f9e:	f1b3 7f80 	cmp.w	r3, #16777216	@ 0x1000000
 8007fa2:	bf3c      	itt	cc
 8007fa4:	021b      	lslcc	r3, r3, #8
 8007fa6:	3008      	addcc	r0, #8
 8007fa8:	f1b3 5f80 	cmp.w	r3, #268435456	@ 0x10000000
 8007fac:	bf3c      	itt	cc
 8007fae:	011b      	lslcc	r3, r3, #4
 8007fb0:	3004      	addcc	r0, #4
 8007fb2:	f1b3 4f80 	cmp.w	r3, #1073741824	@ 0x40000000
 8007fb6:	bf3c      	itt	cc
 8007fb8:	009b      	lslcc	r3, r3, #2
 8007fba:	3002      	addcc	r0, #2
 8007fbc:	2b00      	cmp	r3, #0
 8007fbe:	db05      	blt.n	8007fcc <__hi0bits+0x3c>
 8007fc0:	f013 4f80 	tst.w	r3, #1073741824	@ 0x40000000
 8007fc4:	f100 0001 	add.w	r0, r0, #1
 8007fc8:	bf08      	it	eq
 8007fca:	2020      	moveq	r0, #32
 8007fcc:	4770      	bx	lr

08007fce <__lo0bits>:
 8007fce:	6803      	ldr	r3, [r0, #0]
 8007fd0:	4602      	mov	r2, r0
 8007fd2:	f013 0007 	ands.w	r0, r3, #7
 8007fd6:	d00b      	beq.n	8007ff0 <__lo0bits+0x22>
 8007fd8:	07d9      	lsls	r1, r3, #31
 8007fda:	d421      	bmi.n	8008020 <__lo0bits+0x52>
 8007fdc:	0798      	lsls	r0, r3, #30
 8007fde:	bf49      	itett	mi
 8007fe0:	085b      	lsrmi	r3, r3, #1
 8007fe2:	089b      	lsrpl	r3, r3, #2
 8007fe4:	2001      	movmi	r0, #1
 8007fe6:	6013      	strmi	r3, [r2, #0]
 8007fe8:	bf5c      	itt	pl
 8007fea:	6013      	strpl	r3, [r2, #0]
 8007fec:	2002      	movpl	r0, #2
 8007fee:	4770      	bx	lr
 8007ff0:	b299      	uxth	r1, r3
 8007ff2:	b909      	cbnz	r1, 8007ff8 <__lo0bits+0x2a>
 8007ff4:	0c1b      	lsrs	r3, r3, #16
 8007ff6:	2010      	movs	r0, #16
 8007ff8:	b2d9      	uxtb	r1, r3
 8007ffa:	b909      	cbnz	r1, 8008000 <__lo0bits+0x32>
 8007ffc:	3008      	adds	r0, #8
 8007ffe:	0a1b      	lsrs	r3, r3, #8
 8008000:	0719      	lsls	r1, r3, #28
 8008002:	bf04      	itt	eq
 8008004:	091b      	lsreq	r3, r3, #4
 8008006:	3004      	addeq	r0, #4
 8008008:	0799      	lsls	r1, r3, #30
 800800a:	bf04      	itt	eq
 800800c:	089b      	lsreq	r3, r3, #2
 800800e:	3002      	addeq	r0, #2
 8008010:	07d9      	lsls	r1, r3, #31
 8008012:	d403      	bmi.n	800801c <__lo0bits+0x4e>
 8008014:	085b      	lsrs	r3, r3, #1
 8008016:	f100 0001 	add.w	r0, r0, #1
 800801a:	d003      	beq.n	8008024 <__lo0bits+0x56>
 800801c:	6013      	str	r3, [r2, #0]
 800801e:	4770      	bx	lr
 8008020:	2000      	movs	r0, #0
 8008022:	4770      	bx	lr
 8008024:	2020      	movs	r0, #32
 8008026:	4770      	bx	lr

08008028 <__i2b>:
 8008028:	b510      	push	{r4, lr}
 800802a:	460c      	mov	r4, r1
 800802c:	2101      	movs	r1, #1
 800802e:	f7ff ff07 	bl	8007e40 <_Balloc>
 8008032:	4602      	mov	r2, r0
 8008034:	b928      	cbnz	r0, 8008042 <__i2b+0x1a>
 8008036:	4b05      	ldr	r3, [pc, #20]	@ (800804c <__i2b+0x24>)
 8008038:	4805      	ldr	r0, [pc, #20]	@ (8008050 <__i2b+0x28>)
 800803a:	f240 1145 	movw	r1, #325	@ 0x145
 800803e:	f000 fd39 	bl	8008ab4 <__assert_func>
 8008042:	2301      	movs	r3, #1
 8008044:	6144      	str	r4, [r0, #20]
 8008046:	6103      	str	r3, [r0, #16]
 8008048:	bd10      	pop	{r4, pc}
 800804a:	bf00      	nop
 800804c:	08009284 	.word	0x08009284
 8008050:	08009295 	.word	0x08009295

08008054 <__multiply>:
 8008054:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008058:	4617      	mov	r7, r2
 800805a:	690a      	ldr	r2, [r1, #16]
 800805c:	693b      	ldr	r3, [r7, #16]
 800805e:	429a      	cmp	r2, r3
 8008060:	bfa8      	it	ge
 8008062:	463b      	movge	r3, r7
 8008064:	4689      	mov	r9, r1
 8008066:	bfa4      	itt	ge
 8008068:	460f      	movge	r7, r1
 800806a:	4699      	movge	r9, r3
 800806c:	693d      	ldr	r5, [r7, #16]
 800806e:	f8d9 a010 	ldr.w	sl, [r9, #16]
 8008072:	68bb      	ldr	r3, [r7, #8]
 8008074:	6879      	ldr	r1, [r7, #4]
 8008076:	eb05 060a 	add.w	r6, r5, sl
 800807a:	42b3      	cmp	r3, r6
 800807c:	b085      	sub	sp, #20
 800807e:	bfb8      	it	lt
 8008080:	3101      	addlt	r1, #1
 8008082:	f7ff fedd 	bl	8007e40 <_Balloc>
 8008086:	b930      	cbnz	r0, 8008096 <__multiply+0x42>
 8008088:	4602      	mov	r2, r0
 800808a:	4b41      	ldr	r3, [pc, #260]	@ (8008190 <__multiply+0x13c>)
 800808c:	4841      	ldr	r0, [pc, #260]	@ (8008194 <__multiply+0x140>)
 800808e:	f44f 71b1 	mov.w	r1, #354	@ 0x162
 8008092:	f000 fd0f 	bl	8008ab4 <__assert_func>
 8008096:	f100 0414 	add.w	r4, r0, #20
 800809a:	eb04 0e86 	add.w	lr, r4, r6, lsl #2
 800809e:	4623      	mov	r3, r4
 80080a0:	2200      	movs	r2, #0
 80080a2:	4573      	cmp	r3, lr
 80080a4:	d320      	bcc.n	80080e8 <__multiply+0x94>
 80080a6:	f107 0814 	add.w	r8, r7, #20
 80080aa:	f109 0114 	add.w	r1, r9, #20
 80080ae:	eb08 0585 	add.w	r5, r8, r5, lsl #2
 80080b2:	eb01 038a 	add.w	r3, r1, sl, lsl #2
 80080b6:	9302      	str	r3, [sp, #8]
 80080b8:	1beb      	subs	r3, r5, r7
 80080ba:	3b15      	subs	r3, #21
 80080bc:	f023 0303 	bic.w	r3, r3, #3
 80080c0:	3304      	adds	r3, #4
 80080c2:	3715      	adds	r7, #21
 80080c4:	42bd      	cmp	r5, r7
 80080c6:	bf38      	it	cc
 80080c8:	2304      	movcc	r3, #4
 80080ca:	9301      	str	r3, [sp, #4]
 80080cc:	9b02      	ldr	r3, [sp, #8]
 80080ce:	9103      	str	r1, [sp, #12]
 80080d0:	428b      	cmp	r3, r1
 80080d2:	d80c      	bhi.n	80080ee <__multiply+0x9a>
 80080d4:	2e00      	cmp	r6, #0
 80080d6:	dd03      	ble.n	80080e0 <__multiply+0x8c>
 80080d8:	f85e 3d04 	ldr.w	r3, [lr, #-4]!
 80080dc:	2b00      	cmp	r3, #0
 80080de:	d055      	beq.n	800818c <__multiply+0x138>
 80080e0:	6106      	str	r6, [r0, #16]
 80080e2:	b005      	add	sp, #20
 80080e4:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80080e8:	f843 2b04 	str.w	r2, [r3], #4
 80080ec:	e7d9      	b.n	80080a2 <__multiply+0x4e>
 80080ee:	f8b1 a000 	ldrh.w	sl, [r1]
 80080f2:	f1ba 0f00 	cmp.w	sl, #0
 80080f6:	d01f      	beq.n	8008138 <__multiply+0xe4>
 80080f8:	46c4      	mov	ip, r8
 80080fa:	46a1      	mov	r9, r4
 80080fc:	2700      	movs	r7, #0
 80080fe:	f85c 2b04 	ldr.w	r2, [ip], #4
 8008102:	f8d9 3000 	ldr.w	r3, [r9]
 8008106:	fa1f fb82 	uxth.w	fp, r2
 800810a:	b29b      	uxth	r3, r3
 800810c:	fb0a 330b 	mla	r3, sl, fp, r3
 8008110:	443b      	add	r3, r7
 8008112:	f8d9 7000 	ldr.w	r7, [r9]
 8008116:	0c12      	lsrs	r2, r2, #16
 8008118:	0c3f      	lsrs	r7, r7, #16
 800811a:	fb0a 7202 	mla	r2, sl, r2, r7
 800811e:	eb02 4213 	add.w	r2, r2, r3, lsr #16
 8008122:	b29b      	uxth	r3, r3
 8008124:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008128:	4565      	cmp	r5, ip
 800812a:	f849 3b04 	str.w	r3, [r9], #4
 800812e:	ea4f 4712 	mov.w	r7, r2, lsr #16
 8008132:	d8e4      	bhi.n	80080fe <__multiply+0xaa>
 8008134:	9b01      	ldr	r3, [sp, #4]
 8008136:	50e7      	str	r7, [r4, r3]
 8008138:	9b03      	ldr	r3, [sp, #12]
 800813a:	f8b3 9002 	ldrh.w	r9, [r3, #2]
 800813e:	3104      	adds	r1, #4
 8008140:	f1b9 0f00 	cmp.w	r9, #0
 8008144:	d020      	beq.n	8008188 <__multiply+0x134>
 8008146:	6823      	ldr	r3, [r4, #0]
 8008148:	4647      	mov	r7, r8
 800814a:	46a4      	mov	ip, r4
 800814c:	f04f 0a00 	mov.w	sl, #0
 8008150:	f8b7 b000 	ldrh.w	fp, [r7]
 8008154:	f8bc 2002 	ldrh.w	r2, [ip, #2]
 8008158:	fb09 220b 	mla	r2, r9, fp, r2
 800815c:	4452      	add	r2, sl
 800815e:	b29b      	uxth	r3, r3
 8008160:	ea43 4302 	orr.w	r3, r3, r2, lsl #16
 8008164:	f84c 3b04 	str.w	r3, [ip], #4
 8008168:	f857 3b04 	ldr.w	r3, [r7], #4
 800816c:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008170:	f8bc 3000 	ldrh.w	r3, [ip]
 8008174:	fb09 330a 	mla	r3, r9, sl, r3
 8008178:	eb03 4312 	add.w	r3, r3, r2, lsr #16
 800817c:	42bd      	cmp	r5, r7
 800817e:	ea4f 4a13 	mov.w	sl, r3, lsr #16
 8008182:	d8e5      	bhi.n	8008150 <__multiply+0xfc>
 8008184:	9a01      	ldr	r2, [sp, #4]
 8008186:	50a3      	str	r3, [r4, r2]
 8008188:	3404      	adds	r4, #4
 800818a:	e79f      	b.n	80080cc <__multiply+0x78>
 800818c:	3e01      	subs	r6, #1
 800818e:	e7a1      	b.n	80080d4 <__multiply+0x80>
 8008190:	08009284 	.word	0x08009284
 8008194:	08009295 	.word	0x08009295

08008198 <__pow5mult>:
 8008198:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800819c:	4615      	mov	r5, r2
 800819e:	f012 0203 	ands.w	r2, r2, #3
 80081a2:	4607      	mov	r7, r0
 80081a4:	460e      	mov	r6, r1
 80081a6:	d007      	beq.n	80081b8 <__pow5mult+0x20>
 80081a8:	4c25      	ldr	r4, [pc, #148]	@ (8008240 <__pow5mult+0xa8>)
 80081aa:	3a01      	subs	r2, #1
 80081ac:	2300      	movs	r3, #0
 80081ae:	f854 2022 	ldr.w	r2, [r4, r2, lsl #2]
 80081b2:	f7ff fea7 	bl	8007f04 <__multadd>
 80081b6:	4606      	mov	r6, r0
 80081b8:	10ad      	asrs	r5, r5, #2
 80081ba:	d03d      	beq.n	8008238 <__pow5mult+0xa0>
 80081bc:	69fc      	ldr	r4, [r7, #28]
 80081be:	b97c      	cbnz	r4, 80081e0 <__pow5mult+0x48>
 80081c0:	2010      	movs	r0, #16
 80081c2:	f7ff fd87 	bl	8007cd4 <malloc>
 80081c6:	4602      	mov	r2, r0
 80081c8:	61f8      	str	r0, [r7, #28]
 80081ca:	b928      	cbnz	r0, 80081d8 <__pow5mult+0x40>
 80081cc:	4b1d      	ldr	r3, [pc, #116]	@ (8008244 <__pow5mult+0xac>)
 80081ce:	481e      	ldr	r0, [pc, #120]	@ (8008248 <__pow5mult+0xb0>)
 80081d0:	f240 11b3 	movw	r1, #435	@ 0x1b3
 80081d4:	f000 fc6e 	bl	8008ab4 <__assert_func>
 80081d8:	e9c0 4401 	strd	r4, r4, [r0, #4]
 80081dc:	6004      	str	r4, [r0, #0]
 80081de:	60c4      	str	r4, [r0, #12]
 80081e0:	f8d7 801c 	ldr.w	r8, [r7, #28]
 80081e4:	f8d8 4008 	ldr.w	r4, [r8, #8]
 80081e8:	b94c      	cbnz	r4, 80081fe <__pow5mult+0x66>
 80081ea:	f240 2171 	movw	r1, #625	@ 0x271
 80081ee:	4638      	mov	r0, r7
 80081f0:	f7ff ff1a 	bl	8008028 <__i2b>
 80081f4:	2300      	movs	r3, #0
 80081f6:	f8c8 0008 	str.w	r0, [r8, #8]
 80081fa:	4604      	mov	r4, r0
 80081fc:	6003      	str	r3, [r0, #0]
 80081fe:	f04f 0900 	mov.w	r9, #0
 8008202:	07eb      	lsls	r3, r5, #31
 8008204:	d50a      	bpl.n	800821c <__pow5mult+0x84>
 8008206:	4631      	mov	r1, r6
 8008208:	4622      	mov	r2, r4
 800820a:	4638      	mov	r0, r7
 800820c:	f7ff ff22 	bl	8008054 <__multiply>
 8008210:	4631      	mov	r1, r6
 8008212:	4680      	mov	r8, r0
 8008214:	4638      	mov	r0, r7
 8008216:	f7ff fe53 	bl	8007ec0 <_Bfree>
 800821a:	4646      	mov	r6, r8
 800821c:	106d      	asrs	r5, r5, #1
 800821e:	d00b      	beq.n	8008238 <__pow5mult+0xa0>
 8008220:	6820      	ldr	r0, [r4, #0]
 8008222:	b938      	cbnz	r0, 8008234 <__pow5mult+0x9c>
 8008224:	4622      	mov	r2, r4
 8008226:	4621      	mov	r1, r4
 8008228:	4638      	mov	r0, r7
 800822a:	f7ff ff13 	bl	8008054 <__multiply>
 800822e:	6020      	str	r0, [r4, #0]
 8008230:	f8c0 9000 	str.w	r9, [r0]
 8008234:	4604      	mov	r4, r0
 8008236:	e7e4      	b.n	8008202 <__pow5mult+0x6a>
 8008238:	4630      	mov	r0, r6
 800823a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800823e:	bf00      	nop
 8008240:	08009348 	.word	0x08009348
 8008244:	08009215 	.word	0x08009215
 8008248:	08009295 	.word	0x08009295

0800824c <__lshift>:
 800824c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008250:	460c      	mov	r4, r1
 8008252:	6849      	ldr	r1, [r1, #4]
 8008254:	6923      	ldr	r3, [r4, #16]
 8008256:	eb03 1862 	add.w	r8, r3, r2, asr #5
 800825a:	68a3      	ldr	r3, [r4, #8]
 800825c:	4607      	mov	r7, r0
 800825e:	4691      	mov	r9, r2
 8008260:	ea4f 1a62 	mov.w	sl, r2, asr #5
 8008264:	f108 0601 	add.w	r6, r8, #1
 8008268:	42b3      	cmp	r3, r6
 800826a:	db0b      	blt.n	8008284 <__lshift+0x38>
 800826c:	4638      	mov	r0, r7
 800826e:	f7ff fde7 	bl	8007e40 <_Balloc>
 8008272:	4605      	mov	r5, r0
 8008274:	b948      	cbnz	r0, 800828a <__lshift+0x3e>
 8008276:	4602      	mov	r2, r0
 8008278:	4b28      	ldr	r3, [pc, #160]	@ (800831c <__lshift+0xd0>)
 800827a:	4829      	ldr	r0, [pc, #164]	@ (8008320 <__lshift+0xd4>)
 800827c:	f44f 71ef 	mov.w	r1, #478	@ 0x1de
 8008280:	f000 fc18 	bl	8008ab4 <__assert_func>
 8008284:	3101      	adds	r1, #1
 8008286:	005b      	lsls	r3, r3, #1
 8008288:	e7ee      	b.n	8008268 <__lshift+0x1c>
 800828a:	2300      	movs	r3, #0
 800828c:	f100 0114 	add.w	r1, r0, #20
 8008290:	f100 0210 	add.w	r2, r0, #16
 8008294:	4618      	mov	r0, r3
 8008296:	4553      	cmp	r3, sl
 8008298:	db33      	blt.n	8008302 <__lshift+0xb6>
 800829a:	6920      	ldr	r0, [r4, #16]
 800829c:	ea2a 7aea 	bic.w	sl, sl, sl, asr #31
 80082a0:	f104 0314 	add.w	r3, r4, #20
 80082a4:	f019 091f 	ands.w	r9, r9, #31
 80082a8:	eb01 018a 	add.w	r1, r1, sl, lsl #2
 80082ac:	eb03 0c80 	add.w	ip, r3, r0, lsl #2
 80082b0:	d02b      	beq.n	800830a <__lshift+0xbe>
 80082b2:	f1c9 0e20 	rsb	lr, r9, #32
 80082b6:	468a      	mov	sl, r1
 80082b8:	2200      	movs	r2, #0
 80082ba:	6818      	ldr	r0, [r3, #0]
 80082bc:	fa00 f009 	lsl.w	r0, r0, r9
 80082c0:	4310      	orrs	r0, r2
 80082c2:	f84a 0b04 	str.w	r0, [sl], #4
 80082c6:	f853 2b04 	ldr.w	r2, [r3], #4
 80082ca:	459c      	cmp	ip, r3
 80082cc:	fa22 f20e 	lsr.w	r2, r2, lr
 80082d0:	d8f3      	bhi.n	80082ba <__lshift+0x6e>
 80082d2:	ebac 0304 	sub.w	r3, ip, r4
 80082d6:	3b15      	subs	r3, #21
 80082d8:	f023 0303 	bic.w	r3, r3, #3
 80082dc:	3304      	adds	r3, #4
 80082de:	f104 0015 	add.w	r0, r4, #21
 80082e2:	4560      	cmp	r0, ip
 80082e4:	bf88      	it	hi
 80082e6:	2304      	movhi	r3, #4
 80082e8:	50ca      	str	r2, [r1, r3]
 80082ea:	b10a      	cbz	r2, 80082f0 <__lshift+0xa4>
 80082ec:	f108 0602 	add.w	r6, r8, #2
 80082f0:	3e01      	subs	r6, #1
 80082f2:	4638      	mov	r0, r7
 80082f4:	612e      	str	r6, [r5, #16]
 80082f6:	4621      	mov	r1, r4
 80082f8:	f7ff fde2 	bl	8007ec0 <_Bfree>
 80082fc:	4628      	mov	r0, r5
 80082fe:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8008302:	f842 0f04 	str.w	r0, [r2, #4]!
 8008306:	3301      	adds	r3, #1
 8008308:	e7c5      	b.n	8008296 <__lshift+0x4a>
 800830a:	3904      	subs	r1, #4
 800830c:	f853 2b04 	ldr.w	r2, [r3], #4
 8008310:	f841 2f04 	str.w	r2, [r1, #4]!
 8008314:	459c      	cmp	ip, r3
 8008316:	d8f9      	bhi.n	800830c <__lshift+0xc0>
 8008318:	e7ea      	b.n	80082f0 <__lshift+0xa4>
 800831a:	bf00      	nop
 800831c:	08009284 	.word	0x08009284
 8008320:	08009295 	.word	0x08009295

08008324 <__mcmp>:
 8008324:	690a      	ldr	r2, [r1, #16]
 8008326:	4603      	mov	r3, r0
 8008328:	6900      	ldr	r0, [r0, #16]
 800832a:	1a80      	subs	r0, r0, r2
 800832c:	b530      	push	{r4, r5, lr}
 800832e:	d10e      	bne.n	800834e <__mcmp+0x2a>
 8008330:	3314      	adds	r3, #20
 8008332:	3114      	adds	r1, #20
 8008334:	eb03 0482 	add.w	r4, r3, r2, lsl #2
 8008338:	eb01 0182 	add.w	r1, r1, r2, lsl #2
 800833c:	f854 5d04 	ldr.w	r5, [r4, #-4]!
 8008340:	f851 2d04 	ldr.w	r2, [r1, #-4]!
 8008344:	4295      	cmp	r5, r2
 8008346:	d003      	beq.n	8008350 <__mcmp+0x2c>
 8008348:	d205      	bcs.n	8008356 <__mcmp+0x32>
 800834a:	f04f 30ff 	mov.w	r0, #4294967295
 800834e:	bd30      	pop	{r4, r5, pc}
 8008350:	42a3      	cmp	r3, r4
 8008352:	d3f3      	bcc.n	800833c <__mcmp+0x18>
 8008354:	e7fb      	b.n	800834e <__mcmp+0x2a>
 8008356:	2001      	movs	r0, #1
 8008358:	e7f9      	b.n	800834e <__mcmp+0x2a>
	...

0800835c <__mdiff>:
 800835c:	e92d 4ff7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008360:	4689      	mov	r9, r1
 8008362:	4606      	mov	r6, r0
 8008364:	4611      	mov	r1, r2
 8008366:	4648      	mov	r0, r9
 8008368:	4614      	mov	r4, r2
 800836a:	f7ff ffdb 	bl	8008324 <__mcmp>
 800836e:	1e05      	subs	r5, r0, #0
 8008370:	d112      	bne.n	8008398 <__mdiff+0x3c>
 8008372:	4629      	mov	r1, r5
 8008374:	4630      	mov	r0, r6
 8008376:	f7ff fd63 	bl	8007e40 <_Balloc>
 800837a:	4602      	mov	r2, r0
 800837c:	b928      	cbnz	r0, 800838a <__mdiff+0x2e>
 800837e:	4b3f      	ldr	r3, [pc, #252]	@ (800847c <__mdiff+0x120>)
 8008380:	f240 2137 	movw	r1, #567	@ 0x237
 8008384:	483e      	ldr	r0, [pc, #248]	@ (8008480 <__mdiff+0x124>)
 8008386:	f000 fb95 	bl	8008ab4 <__assert_func>
 800838a:	2301      	movs	r3, #1
 800838c:	e9c0 3504 	strd	r3, r5, [r0, #16]
 8008390:	4610      	mov	r0, r2
 8008392:	b003      	add	sp, #12
 8008394:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008398:	bfbc      	itt	lt
 800839a:	464b      	movlt	r3, r9
 800839c:	46a1      	movlt	r9, r4
 800839e:	4630      	mov	r0, r6
 80083a0:	f8d9 1004 	ldr.w	r1, [r9, #4]
 80083a4:	bfba      	itte	lt
 80083a6:	461c      	movlt	r4, r3
 80083a8:	2501      	movlt	r5, #1
 80083aa:	2500      	movge	r5, #0
 80083ac:	f7ff fd48 	bl	8007e40 <_Balloc>
 80083b0:	4602      	mov	r2, r0
 80083b2:	b918      	cbnz	r0, 80083bc <__mdiff+0x60>
 80083b4:	4b31      	ldr	r3, [pc, #196]	@ (800847c <__mdiff+0x120>)
 80083b6:	f240 2145 	movw	r1, #581	@ 0x245
 80083ba:	e7e3      	b.n	8008384 <__mdiff+0x28>
 80083bc:	f8d9 7010 	ldr.w	r7, [r9, #16]
 80083c0:	6926      	ldr	r6, [r4, #16]
 80083c2:	60c5      	str	r5, [r0, #12]
 80083c4:	f109 0310 	add.w	r3, r9, #16
 80083c8:	f109 0514 	add.w	r5, r9, #20
 80083cc:	f104 0e14 	add.w	lr, r4, #20
 80083d0:	f100 0b14 	add.w	fp, r0, #20
 80083d4:	eb05 0887 	add.w	r8, r5, r7, lsl #2
 80083d8:	eb0e 0686 	add.w	r6, lr, r6, lsl #2
 80083dc:	9301      	str	r3, [sp, #4]
 80083de:	46d9      	mov	r9, fp
 80083e0:	f04f 0c00 	mov.w	ip, #0
 80083e4:	9b01      	ldr	r3, [sp, #4]
 80083e6:	f85e 0b04 	ldr.w	r0, [lr], #4
 80083ea:	f853 af04 	ldr.w	sl, [r3, #4]!
 80083ee:	9301      	str	r3, [sp, #4]
 80083f0:	fa1f f38a 	uxth.w	r3, sl
 80083f4:	4619      	mov	r1, r3
 80083f6:	b283      	uxth	r3, r0
 80083f8:	1acb      	subs	r3, r1, r3
 80083fa:	0c00      	lsrs	r0, r0, #16
 80083fc:	4463      	add	r3, ip
 80083fe:	ebc0 401a 	rsb	r0, r0, sl, lsr #16
 8008402:	eb00 4023 	add.w	r0, r0, r3, asr #16
 8008406:	b29b      	uxth	r3, r3
 8008408:	ea43 4300 	orr.w	r3, r3, r0, lsl #16
 800840c:	4576      	cmp	r6, lr
 800840e:	f849 3b04 	str.w	r3, [r9], #4
 8008412:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008416:	d8e5      	bhi.n	80083e4 <__mdiff+0x88>
 8008418:	1b33      	subs	r3, r6, r4
 800841a:	3b15      	subs	r3, #21
 800841c:	f023 0303 	bic.w	r3, r3, #3
 8008420:	3415      	adds	r4, #21
 8008422:	3304      	adds	r3, #4
 8008424:	42a6      	cmp	r6, r4
 8008426:	bf38      	it	cc
 8008428:	2304      	movcc	r3, #4
 800842a:	441d      	add	r5, r3
 800842c:	445b      	add	r3, fp
 800842e:	461e      	mov	r6, r3
 8008430:	462c      	mov	r4, r5
 8008432:	4544      	cmp	r4, r8
 8008434:	d30e      	bcc.n	8008454 <__mdiff+0xf8>
 8008436:	f108 0103 	add.w	r1, r8, #3
 800843a:	1b49      	subs	r1, r1, r5
 800843c:	f021 0103 	bic.w	r1, r1, #3
 8008440:	3d03      	subs	r5, #3
 8008442:	45a8      	cmp	r8, r5
 8008444:	bf38      	it	cc
 8008446:	2100      	movcc	r1, #0
 8008448:	440b      	add	r3, r1
 800844a:	f853 1d04 	ldr.w	r1, [r3, #-4]!
 800844e:	b191      	cbz	r1, 8008476 <__mdiff+0x11a>
 8008450:	6117      	str	r7, [r2, #16]
 8008452:	e79d      	b.n	8008390 <__mdiff+0x34>
 8008454:	f854 1b04 	ldr.w	r1, [r4], #4
 8008458:	46e6      	mov	lr, ip
 800845a:	0c08      	lsrs	r0, r1, #16
 800845c:	fa1c fc81 	uxtah	ip, ip, r1
 8008460:	4471      	add	r1, lr
 8008462:	eb00 402c 	add.w	r0, r0, ip, asr #16
 8008466:	b289      	uxth	r1, r1
 8008468:	ea41 4100 	orr.w	r1, r1, r0, lsl #16
 800846c:	f846 1b04 	str.w	r1, [r6], #4
 8008470:	ea4f 4c20 	mov.w	ip, r0, asr #16
 8008474:	e7dd      	b.n	8008432 <__mdiff+0xd6>
 8008476:	3f01      	subs	r7, #1
 8008478:	e7e7      	b.n	800844a <__mdiff+0xee>
 800847a:	bf00      	nop
 800847c:	08009284 	.word	0x08009284
 8008480:	08009295 	.word	0x08009295

08008484 <__d2b>:
 8008484:	e92d 43f7 	stmdb	sp!, {r0, r1, r2, r4, r5, r6, r7, r8, r9, lr}
 8008488:	460f      	mov	r7, r1
 800848a:	2101      	movs	r1, #1
 800848c:	ec59 8b10 	vmov	r8, r9, d0
 8008490:	4616      	mov	r6, r2
 8008492:	f7ff fcd5 	bl	8007e40 <_Balloc>
 8008496:	4604      	mov	r4, r0
 8008498:	b930      	cbnz	r0, 80084a8 <__d2b+0x24>
 800849a:	4602      	mov	r2, r0
 800849c:	4b23      	ldr	r3, [pc, #140]	@ (800852c <__d2b+0xa8>)
 800849e:	4824      	ldr	r0, [pc, #144]	@ (8008530 <__d2b+0xac>)
 80084a0:	f240 310f 	movw	r1, #783	@ 0x30f
 80084a4:	f000 fb06 	bl	8008ab4 <__assert_func>
 80084a8:	f3c9 550a 	ubfx	r5, r9, #20, #11
 80084ac:	f3c9 0313 	ubfx	r3, r9, #0, #20
 80084b0:	b10d      	cbz	r5, 80084b6 <__d2b+0x32>
 80084b2:	f443 1380 	orr.w	r3, r3, #1048576	@ 0x100000
 80084b6:	9301      	str	r3, [sp, #4]
 80084b8:	f1b8 0300 	subs.w	r3, r8, #0
 80084bc:	d023      	beq.n	8008506 <__d2b+0x82>
 80084be:	4668      	mov	r0, sp
 80084c0:	9300      	str	r3, [sp, #0]
 80084c2:	f7ff fd84 	bl	8007fce <__lo0bits>
 80084c6:	e9dd 1200 	ldrd	r1, r2, [sp]
 80084ca:	b1d0      	cbz	r0, 8008502 <__d2b+0x7e>
 80084cc:	f1c0 0320 	rsb	r3, r0, #32
 80084d0:	fa02 f303 	lsl.w	r3, r2, r3
 80084d4:	430b      	orrs	r3, r1
 80084d6:	40c2      	lsrs	r2, r0
 80084d8:	6163      	str	r3, [r4, #20]
 80084da:	9201      	str	r2, [sp, #4]
 80084dc:	9b01      	ldr	r3, [sp, #4]
 80084de:	61a3      	str	r3, [r4, #24]
 80084e0:	2b00      	cmp	r3, #0
 80084e2:	bf0c      	ite	eq
 80084e4:	2201      	moveq	r2, #1
 80084e6:	2202      	movne	r2, #2
 80084e8:	6122      	str	r2, [r4, #16]
 80084ea:	b1a5      	cbz	r5, 8008516 <__d2b+0x92>
 80084ec:	f2a5 4533 	subw	r5, r5, #1075	@ 0x433
 80084f0:	4405      	add	r5, r0
 80084f2:	603d      	str	r5, [r7, #0]
 80084f4:	f1c0 0035 	rsb	r0, r0, #53	@ 0x35
 80084f8:	6030      	str	r0, [r6, #0]
 80084fa:	4620      	mov	r0, r4
 80084fc:	b003      	add	sp, #12
 80084fe:	e8bd 83f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, pc}
 8008502:	6161      	str	r1, [r4, #20]
 8008504:	e7ea      	b.n	80084dc <__d2b+0x58>
 8008506:	a801      	add	r0, sp, #4
 8008508:	f7ff fd61 	bl	8007fce <__lo0bits>
 800850c:	9b01      	ldr	r3, [sp, #4]
 800850e:	6163      	str	r3, [r4, #20]
 8008510:	3020      	adds	r0, #32
 8008512:	2201      	movs	r2, #1
 8008514:	e7e8      	b.n	80084e8 <__d2b+0x64>
 8008516:	eb04 0382 	add.w	r3, r4, r2, lsl #2
 800851a:	f2a0 4032 	subw	r0, r0, #1074	@ 0x432
 800851e:	6038      	str	r0, [r7, #0]
 8008520:	6918      	ldr	r0, [r3, #16]
 8008522:	f7ff fd35 	bl	8007f90 <__hi0bits>
 8008526:	ebc0 1042 	rsb	r0, r0, r2, lsl #5
 800852a:	e7e5      	b.n	80084f8 <__d2b+0x74>
 800852c:	08009284 	.word	0x08009284
 8008530:	08009295 	.word	0x08009295

08008534 <__ssputs_r>:
 8008534:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8008538:	688e      	ldr	r6, [r1, #8]
 800853a:	461f      	mov	r7, r3
 800853c:	42be      	cmp	r6, r7
 800853e:	680b      	ldr	r3, [r1, #0]
 8008540:	4682      	mov	sl, r0
 8008542:	460c      	mov	r4, r1
 8008544:	4690      	mov	r8, r2
 8008546:	d82d      	bhi.n	80085a4 <__ssputs_r+0x70>
 8008548:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 800854c:	f412 6f90 	tst.w	r2, #1152	@ 0x480
 8008550:	d026      	beq.n	80085a0 <__ssputs_r+0x6c>
 8008552:	6965      	ldr	r5, [r4, #20]
 8008554:	6909      	ldr	r1, [r1, #16]
 8008556:	eb05 0545 	add.w	r5, r5, r5, lsl #1
 800855a:	eba3 0901 	sub.w	r9, r3, r1
 800855e:	eb05 75d5 	add.w	r5, r5, r5, lsr #31
 8008562:	1c7b      	adds	r3, r7, #1
 8008564:	444b      	add	r3, r9
 8008566:	106d      	asrs	r5, r5, #1
 8008568:	429d      	cmp	r5, r3
 800856a:	bf38      	it	cc
 800856c:	461d      	movcc	r5, r3
 800856e:	0553      	lsls	r3, r2, #21
 8008570:	d527      	bpl.n	80085c2 <__ssputs_r+0x8e>
 8008572:	4629      	mov	r1, r5
 8008574:	f7ff fbd8 	bl	8007d28 <_malloc_r>
 8008578:	4606      	mov	r6, r0
 800857a:	b360      	cbz	r0, 80085d6 <__ssputs_r+0xa2>
 800857c:	6921      	ldr	r1, [r4, #16]
 800857e:	464a      	mov	r2, r9
 8008580:	f000 fa8a 	bl	8008a98 <memcpy>
 8008584:	89a3      	ldrh	r3, [r4, #12]
 8008586:	f423 6390 	bic.w	r3, r3, #1152	@ 0x480
 800858a:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 800858e:	81a3      	strh	r3, [r4, #12]
 8008590:	6126      	str	r6, [r4, #16]
 8008592:	6165      	str	r5, [r4, #20]
 8008594:	444e      	add	r6, r9
 8008596:	eba5 0509 	sub.w	r5, r5, r9
 800859a:	6026      	str	r6, [r4, #0]
 800859c:	60a5      	str	r5, [r4, #8]
 800859e:	463e      	mov	r6, r7
 80085a0:	42be      	cmp	r6, r7
 80085a2:	d900      	bls.n	80085a6 <__ssputs_r+0x72>
 80085a4:	463e      	mov	r6, r7
 80085a6:	6820      	ldr	r0, [r4, #0]
 80085a8:	4632      	mov	r2, r6
 80085aa:	4641      	mov	r1, r8
 80085ac:	f000 fa28 	bl	8008a00 <memmove>
 80085b0:	68a3      	ldr	r3, [r4, #8]
 80085b2:	1b9b      	subs	r3, r3, r6
 80085b4:	60a3      	str	r3, [r4, #8]
 80085b6:	6823      	ldr	r3, [r4, #0]
 80085b8:	4433      	add	r3, r6
 80085ba:	6023      	str	r3, [r4, #0]
 80085bc:	2000      	movs	r0, #0
 80085be:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 80085c2:	462a      	mov	r2, r5
 80085c4:	f000 faba 	bl	8008b3c <_realloc_r>
 80085c8:	4606      	mov	r6, r0
 80085ca:	2800      	cmp	r0, #0
 80085cc:	d1e0      	bne.n	8008590 <__ssputs_r+0x5c>
 80085ce:	6921      	ldr	r1, [r4, #16]
 80085d0:	4650      	mov	r0, sl
 80085d2:	f7ff fb35 	bl	8007c40 <_free_r>
 80085d6:	230c      	movs	r3, #12
 80085d8:	f8ca 3000 	str.w	r3, [sl]
 80085dc:	89a3      	ldrh	r3, [r4, #12]
 80085de:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80085e2:	81a3      	strh	r3, [r4, #12]
 80085e4:	f04f 30ff 	mov.w	r0, #4294967295
 80085e8:	e7e9      	b.n	80085be <__ssputs_r+0x8a>
	...

080085ec <_svfiprintf_r>:
 80085ec:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80085f0:	4698      	mov	r8, r3
 80085f2:	898b      	ldrh	r3, [r1, #12]
 80085f4:	061b      	lsls	r3, r3, #24
 80085f6:	b09d      	sub	sp, #116	@ 0x74
 80085f8:	4607      	mov	r7, r0
 80085fa:	460d      	mov	r5, r1
 80085fc:	4614      	mov	r4, r2
 80085fe:	d510      	bpl.n	8008622 <_svfiprintf_r+0x36>
 8008600:	690b      	ldr	r3, [r1, #16]
 8008602:	b973      	cbnz	r3, 8008622 <_svfiprintf_r+0x36>
 8008604:	2140      	movs	r1, #64	@ 0x40
 8008606:	f7ff fb8f 	bl	8007d28 <_malloc_r>
 800860a:	6028      	str	r0, [r5, #0]
 800860c:	6128      	str	r0, [r5, #16]
 800860e:	b930      	cbnz	r0, 800861e <_svfiprintf_r+0x32>
 8008610:	230c      	movs	r3, #12
 8008612:	603b      	str	r3, [r7, #0]
 8008614:	f04f 30ff 	mov.w	r0, #4294967295
 8008618:	b01d      	add	sp, #116	@ 0x74
 800861a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800861e:	2340      	movs	r3, #64	@ 0x40
 8008620:	616b      	str	r3, [r5, #20]
 8008622:	2300      	movs	r3, #0
 8008624:	9309      	str	r3, [sp, #36]	@ 0x24
 8008626:	2320      	movs	r3, #32
 8008628:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 800862c:	f8cd 800c 	str.w	r8, [sp, #12]
 8008630:	2330      	movs	r3, #48	@ 0x30
 8008632:	f8df 819c 	ldr.w	r8, [pc, #412]	@ 80087d0 <_svfiprintf_r+0x1e4>
 8008636:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 800863a:	f04f 0901 	mov.w	r9, #1
 800863e:	4623      	mov	r3, r4
 8008640:	469a      	mov	sl, r3
 8008642:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008646:	b10a      	cbz	r2, 800864c <_svfiprintf_r+0x60>
 8008648:	2a25      	cmp	r2, #37	@ 0x25
 800864a:	d1f9      	bne.n	8008640 <_svfiprintf_r+0x54>
 800864c:	ebba 0b04 	subs.w	fp, sl, r4
 8008650:	d00b      	beq.n	800866a <_svfiprintf_r+0x7e>
 8008652:	465b      	mov	r3, fp
 8008654:	4622      	mov	r2, r4
 8008656:	4629      	mov	r1, r5
 8008658:	4638      	mov	r0, r7
 800865a:	f7ff ff6b 	bl	8008534 <__ssputs_r>
 800865e:	3001      	adds	r0, #1
 8008660:	f000 80a7 	beq.w	80087b2 <_svfiprintf_r+0x1c6>
 8008664:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008666:	445a      	add	r2, fp
 8008668:	9209      	str	r2, [sp, #36]	@ 0x24
 800866a:	f89a 3000 	ldrb.w	r3, [sl]
 800866e:	2b00      	cmp	r3, #0
 8008670:	f000 809f 	beq.w	80087b2 <_svfiprintf_r+0x1c6>
 8008674:	2300      	movs	r3, #0
 8008676:	f04f 32ff 	mov.w	r2, #4294967295
 800867a:	e9cd 2305 	strd	r2, r3, [sp, #20]
 800867e:	f10a 0a01 	add.w	sl, sl, #1
 8008682:	9304      	str	r3, [sp, #16]
 8008684:	9307      	str	r3, [sp, #28]
 8008686:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 800868a:	931a      	str	r3, [sp, #104]	@ 0x68
 800868c:	4654      	mov	r4, sl
 800868e:	2205      	movs	r2, #5
 8008690:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008694:	484e      	ldr	r0, [pc, #312]	@ (80087d0 <_svfiprintf_r+0x1e4>)
 8008696:	f7f7 fda3 	bl	80001e0 <memchr>
 800869a:	9a04      	ldr	r2, [sp, #16]
 800869c:	b9d8      	cbnz	r0, 80086d6 <_svfiprintf_r+0xea>
 800869e:	06d0      	lsls	r0, r2, #27
 80086a0:	bf44      	itt	mi
 80086a2:	2320      	movmi	r3, #32
 80086a4:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086a8:	0711      	lsls	r1, r2, #28
 80086aa:	bf44      	itt	mi
 80086ac:	232b      	movmi	r3, #43	@ 0x2b
 80086ae:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 80086b2:	f89a 3000 	ldrb.w	r3, [sl]
 80086b6:	2b2a      	cmp	r3, #42	@ 0x2a
 80086b8:	d015      	beq.n	80086e6 <_svfiprintf_r+0xfa>
 80086ba:	9a07      	ldr	r2, [sp, #28]
 80086bc:	4654      	mov	r4, sl
 80086be:	2000      	movs	r0, #0
 80086c0:	f04f 0c0a 	mov.w	ip, #10
 80086c4:	4621      	mov	r1, r4
 80086c6:	f811 3b01 	ldrb.w	r3, [r1], #1
 80086ca:	3b30      	subs	r3, #48	@ 0x30
 80086cc:	2b09      	cmp	r3, #9
 80086ce:	d94b      	bls.n	8008768 <_svfiprintf_r+0x17c>
 80086d0:	b1b0      	cbz	r0, 8008700 <_svfiprintf_r+0x114>
 80086d2:	9207      	str	r2, [sp, #28]
 80086d4:	e014      	b.n	8008700 <_svfiprintf_r+0x114>
 80086d6:	eba0 0308 	sub.w	r3, r0, r8
 80086da:	fa09 f303 	lsl.w	r3, r9, r3
 80086de:	4313      	orrs	r3, r2
 80086e0:	9304      	str	r3, [sp, #16]
 80086e2:	46a2      	mov	sl, r4
 80086e4:	e7d2      	b.n	800868c <_svfiprintf_r+0xa0>
 80086e6:	9b03      	ldr	r3, [sp, #12]
 80086e8:	1d19      	adds	r1, r3, #4
 80086ea:	681b      	ldr	r3, [r3, #0]
 80086ec:	9103      	str	r1, [sp, #12]
 80086ee:	2b00      	cmp	r3, #0
 80086f0:	bfbb      	ittet	lt
 80086f2:	425b      	neglt	r3, r3
 80086f4:	f042 0202 	orrlt.w	r2, r2, #2
 80086f8:	9307      	strge	r3, [sp, #28]
 80086fa:	9307      	strlt	r3, [sp, #28]
 80086fc:	bfb8      	it	lt
 80086fe:	9204      	strlt	r2, [sp, #16]
 8008700:	7823      	ldrb	r3, [r4, #0]
 8008702:	2b2e      	cmp	r3, #46	@ 0x2e
 8008704:	d10a      	bne.n	800871c <_svfiprintf_r+0x130>
 8008706:	7863      	ldrb	r3, [r4, #1]
 8008708:	2b2a      	cmp	r3, #42	@ 0x2a
 800870a:	d132      	bne.n	8008772 <_svfiprintf_r+0x186>
 800870c:	9b03      	ldr	r3, [sp, #12]
 800870e:	1d1a      	adds	r2, r3, #4
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	9203      	str	r2, [sp, #12]
 8008714:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008718:	3402      	adds	r4, #2
 800871a:	9305      	str	r3, [sp, #20]
 800871c:	f8df a0c0 	ldr.w	sl, [pc, #192]	@ 80087e0 <_svfiprintf_r+0x1f4>
 8008720:	7821      	ldrb	r1, [r4, #0]
 8008722:	2203      	movs	r2, #3
 8008724:	4650      	mov	r0, sl
 8008726:	f7f7 fd5b 	bl	80001e0 <memchr>
 800872a:	b138      	cbz	r0, 800873c <_svfiprintf_r+0x150>
 800872c:	9b04      	ldr	r3, [sp, #16]
 800872e:	eba0 000a 	sub.w	r0, r0, sl
 8008732:	2240      	movs	r2, #64	@ 0x40
 8008734:	4082      	lsls	r2, r0
 8008736:	4313      	orrs	r3, r2
 8008738:	3401      	adds	r4, #1
 800873a:	9304      	str	r3, [sp, #16]
 800873c:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008740:	4824      	ldr	r0, [pc, #144]	@ (80087d4 <_svfiprintf_r+0x1e8>)
 8008742:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008746:	2206      	movs	r2, #6
 8008748:	f7f7 fd4a 	bl	80001e0 <memchr>
 800874c:	2800      	cmp	r0, #0
 800874e:	d036      	beq.n	80087be <_svfiprintf_r+0x1d2>
 8008750:	4b21      	ldr	r3, [pc, #132]	@ (80087d8 <_svfiprintf_r+0x1ec>)
 8008752:	bb1b      	cbnz	r3, 800879c <_svfiprintf_r+0x1b0>
 8008754:	9b03      	ldr	r3, [sp, #12]
 8008756:	3307      	adds	r3, #7
 8008758:	f023 0307 	bic.w	r3, r3, #7
 800875c:	3308      	adds	r3, #8
 800875e:	9303      	str	r3, [sp, #12]
 8008760:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008762:	4433      	add	r3, r6
 8008764:	9309      	str	r3, [sp, #36]	@ 0x24
 8008766:	e76a      	b.n	800863e <_svfiprintf_r+0x52>
 8008768:	fb0c 3202 	mla	r2, ip, r2, r3
 800876c:	460c      	mov	r4, r1
 800876e:	2001      	movs	r0, #1
 8008770:	e7a8      	b.n	80086c4 <_svfiprintf_r+0xd8>
 8008772:	2300      	movs	r3, #0
 8008774:	3401      	adds	r4, #1
 8008776:	9305      	str	r3, [sp, #20]
 8008778:	4619      	mov	r1, r3
 800877a:	f04f 0c0a 	mov.w	ip, #10
 800877e:	4620      	mov	r0, r4
 8008780:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008784:	3a30      	subs	r2, #48	@ 0x30
 8008786:	2a09      	cmp	r2, #9
 8008788:	d903      	bls.n	8008792 <_svfiprintf_r+0x1a6>
 800878a:	2b00      	cmp	r3, #0
 800878c:	d0c6      	beq.n	800871c <_svfiprintf_r+0x130>
 800878e:	9105      	str	r1, [sp, #20]
 8008790:	e7c4      	b.n	800871c <_svfiprintf_r+0x130>
 8008792:	fb0c 2101 	mla	r1, ip, r1, r2
 8008796:	4604      	mov	r4, r0
 8008798:	2301      	movs	r3, #1
 800879a:	e7f0      	b.n	800877e <_svfiprintf_r+0x192>
 800879c:	ab03      	add	r3, sp, #12
 800879e:	9300      	str	r3, [sp, #0]
 80087a0:	462a      	mov	r2, r5
 80087a2:	4b0e      	ldr	r3, [pc, #56]	@ (80087dc <_svfiprintf_r+0x1f0>)
 80087a4:	a904      	add	r1, sp, #16
 80087a6:	4638      	mov	r0, r7
 80087a8:	f7fd fd6a 	bl	8006280 <_printf_float>
 80087ac:	1c42      	adds	r2, r0, #1
 80087ae:	4606      	mov	r6, r0
 80087b0:	d1d6      	bne.n	8008760 <_svfiprintf_r+0x174>
 80087b2:	89ab      	ldrh	r3, [r5, #12]
 80087b4:	065b      	lsls	r3, r3, #25
 80087b6:	f53f af2d 	bmi.w	8008614 <_svfiprintf_r+0x28>
 80087ba:	9809      	ldr	r0, [sp, #36]	@ 0x24
 80087bc:	e72c      	b.n	8008618 <_svfiprintf_r+0x2c>
 80087be:	ab03      	add	r3, sp, #12
 80087c0:	9300      	str	r3, [sp, #0]
 80087c2:	462a      	mov	r2, r5
 80087c4:	4b05      	ldr	r3, [pc, #20]	@ (80087dc <_svfiprintf_r+0x1f0>)
 80087c6:	a904      	add	r1, sp, #16
 80087c8:	4638      	mov	r0, r7
 80087ca:	f7fd fff1 	bl	80067b0 <_printf_i>
 80087ce:	e7ed      	b.n	80087ac <_svfiprintf_r+0x1c0>
 80087d0:	080092ee 	.word	0x080092ee
 80087d4:	080092f8 	.word	0x080092f8
 80087d8:	08006281 	.word	0x08006281
 80087dc:	08008535 	.word	0x08008535
 80087e0:	080092f4 	.word	0x080092f4

080087e4 <__sflush_r>:
 80087e4:	f9b1 200c 	ldrsh.w	r2, [r1, #12]
 80087e8:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80087ec:	0716      	lsls	r6, r2, #28
 80087ee:	4605      	mov	r5, r0
 80087f0:	460c      	mov	r4, r1
 80087f2:	d454      	bmi.n	800889e <__sflush_r+0xba>
 80087f4:	684b      	ldr	r3, [r1, #4]
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	dc02      	bgt.n	8008800 <__sflush_r+0x1c>
 80087fa:	6c0b      	ldr	r3, [r1, #64]	@ 0x40
 80087fc:	2b00      	cmp	r3, #0
 80087fe:	dd48      	ble.n	8008892 <__sflush_r+0xae>
 8008800:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 8008802:	2e00      	cmp	r6, #0
 8008804:	d045      	beq.n	8008892 <__sflush_r+0xae>
 8008806:	2300      	movs	r3, #0
 8008808:	f412 5280 	ands.w	r2, r2, #4096	@ 0x1000
 800880c:	682f      	ldr	r7, [r5, #0]
 800880e:	6a21      	ldr	r1, [r4, #32]
 8008810:	602b      	str	r3, [r5, #0]
 8008812:	d030      	beq.n	8008876 <__sflush_r+0x92>
 8008814:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 8008816:	89a3      	ldrh	r3, [r4, #12]
 8008818:	0759      	lsls	r1, r3, #29
 800881a:	d505      	bpl.n	8008828 <__sflush_r+0x44>
 800881c:	6863      	ldr	r3, [r4, #4]
 800881e:	1ad2      	subs	r2, r2, r3
 8008820:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 8008822:	b10b      	cbz	r3, 8008828 <__sflush_r+0x44>
 8008824:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 8008826:	1ad2      	subs	r2, r2, r3
 8008828:	2300      	movs	r3, #0
 800882a:	6ae6      	ldr	r6, [r4, #44]	@ 0x2c
 800882c:	6a21      	ldr	r1, [r4, #32]
 800882e:	4628      	mov	r0, r5
 8008830:	47b0      	blx	r6
 8008832:	1c43      	adds	r3, r0, #1
 8008834:	89a3      	ldrh	r3, [r4, #12]
 8008836:	d106      	bne.n	8008846 <__sflush_r+0x62>
 8008838:	6829      	ldr	r1, [r5, #0]
 800883a:	291d      	cmp	r1, #29
 800883c:	d82b      	bhi.n	8008896 <__sflush_r+0xb2>
 800883e:	4a2a      	ldr	r2, [pc, #168]	@ (80088e8 <__sflush_r+0x104>)
 8008840:	40ca      	lsrs	r2, r1
 8008842:	07d6      	lsls	r6, r2, #31
 8008844:	d527      	bpl.n	8008896 <__sflush_r+0xb2>
 8008846:	2200      	movs	r2, #0
 8008848:	6062      	str	r2, [r4, #4]
 800884a:	04d9      	lsls	r1, r3, #19
 800884c:	6922      	ldr	r2, [r4, #16]
 800884e:	6022      	str	r2, [r4, #0]
 8008850:	d504      	bpl.n	800885c <__sflush_r+0x78>
 8008852:	1c42      	adds	r2, r0, #1
 8008854:	d101      	bne.n	800885a <__sflush_r+0x76>
 8008856:	682b      	ldr	r3, [r5, #0]
 8008858:	b903      	cbnz	r3, 800885c <__sflush_r+0x78>
 800885a:	6560      	str	r0, [r4, #84]	@ 0x54
 800885c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 800885e:	602f      	str	r7, [r5, #0]
 8008860:	b1b9      	cbz	r1, 8008892 <__sflush_r+0xae>
 8008862:	f104 0344 	add.w	r3, r4, #68	@ 0x44
 8008866:	4299      	cmp	r1, r3
 8008868:	d002      	beq.n	8008870 <__sflush_r+0x8c>
 800886a:	4628      	mov	r0, r5
 800886c:	f7ff f9e8 	bl	8007c40 <_free_r>
 8008870:	2300      	movs	r3, #0
 8008872:	6363      	str	r3, [r4, #52]	@ 0x34
 8008874:	e00d      	b.n	8008892 <__sflush_r+0xae>
 8008876:	2301      	movs	r3, #1
 8008878:	4628      	mov	r0, r5
 800887a:	47b0      	blx	r6
 800887c:	4602      	mov	r2, r0
 800887e:	1c50      	adds	r0, r2, #1
 8008880:	d1c9      	bne.n	8008816 <__sflush_r+0x32>
 8008882:	682b      	ldr	r3, [r5, #0]
 8008884:	2b00      	cmp	r3, #0
 8008886:	d0c6      	beq.n	8008816 <__sflush_r+0x32>
 8008888:	2b1d      	cmp	r3, #29
 800888a:	d001      	beq.n	8008890 <__sflush_r+0xac>
 800888c:	2b16      	cmp	r3, #22
 800888e:	d11e      	bne.n	80088ce <__sflush_r+0xea>
 8008890:	602f      	str	r7, [r5, #0]
 8008892:	2000      	movs	r0, #0
 8008894:	e022      	b.n	80088dc <__sflush_r+0xf8>
 8008896:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 800889a:	b21b      	sxth	r3, r3
 800889c:	e01b      	b.n	80088d6 <__sflush_r+0xf2>
 800889e:	690f      	ldr	r7, [r1, #16]
 80088a0:	2f00      	cmp	r7, #0
 80088a2:	d0f6      	beq.n	8008892 <__sflush_r+0xae>
 80088a4:	0793      	lsls	r3, r2, #30
 80088a6:	680e      	ldr	r6, [r1, #0]
 80088a8:	bf08      	it	eq
 80088aa:	694b      	ldreq	r3, [r1, #20]
 80088ac:	600f      	str	r7, [r1, #0]
 80088ae:	bf18      	it	ne
 80088b0:	2300      	movne	r3, #0
 80088b2:	eba6 0807 	sub.w	r8, r6, r7
 80088b6:	608b      	str	r3, [r1, #8]
 80088b8:	f1b8 0f00 	cmp.w	r8, #0
 80088bc:	dde9      	ble.n	8008892 <__sflush_r+0xae>
 80088be:	6a21      	ldr	r1, [r4, #32]
 80088c0:	6aa6      	ldr	r6, [r4, #40]	@ 0x28
 80088c2:	4643      	mov	r3, r8
 80088c4:	463a      	mov	r2, r7
 80088c6:	4628      	mov	r0, r5
 80088c8:	47b0      	blx	r6
 80088ca:	2800      	cmp	r0, #0
 80088cc:	dc08      	bgt.n	80088e0 <__sflush_r+0xfc>
 80088ce:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80088d2:	f043 0340 	orr.w	r3, r3, #64	@ 0x40
 80088d6:	81a3      	strh	r3, [r4, #12]
 80088d8:	f04f 30ff 	mov.w	r0, #4294967295
 80088dc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 80088e0:	4407      	add	r7, r0
 80088e2:	eba8 0800 	sub.w	r8, r8, r0
 80088e6:	e7e7      	b.n	80088b8 <__sflush_r+0xd4>
 80088e8:	20400001 	.word	0x20400001

080088ec <_fflush_r>:
 80088ec:	b538      	push	{r3, r4, r5, lr}
 80088ee:	690b      	ldr	r3, [r1, #16]
 80088f0:	4605      	mov	r5, r0
 80088f2:	460c      	mov	r4, r1
 80088f4:	b913      	cbnz	r3, 80088fc <_fflush_r+0x10>
 80088f6:	2500      	movs	r5, #0
 80088f8:	4628      	mov	r0, r5
 80088fa:	bd38      	pop	{r3, r4, r5, pc}
 80088fc:	b118      	cbz	r0, 8008906 <_fflush_r+0x1a>
 80088fe:	6a03      	ldr	r3, [r0, #32]
 8008900:	b90b      	cbnz	r3, 8008906 <_fflush_r+0x1a>
 8008902:	f7fe f8ff 	bl	8006b04 <__sinit>
 8008906:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 800890a:	2b00      	cmp	r3, #0
 800890c:	d0f3      	beq.n	80088f6 <_fflush_r+0xa>
 800890e:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 8008910:	07d0      	lsls	r0, r2, #31
 8008912:	d404      	bmi.n	800891e <_fflush_r+0x32>
 8008914:	0599      	lsls	r1, r3, #22
 8008916:	d402      	bmi.n	800891e <_fflush_r+0x32>
 8008918:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 800891a:	f7fe fb34 	bl	8006f86 <__retarget_lock_acquire_recursive>
 800891e:	4628      	mov	r0, r5
 8008920:	4621      	mov	r1, r4
 8008922:	f7ff ff5f 	bl	80087e4 <__sflush_r>
 8008926:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 8008928:	07da      	lsls	r2, r3, #31
 800892a:	4605      	mov	r5, r0
 800892c:	d4e4      	bmi.n	80088f8 <_fflush_r+0xc>
 800892e:	89a3      	ldrh	r3, [r4, #12]
 8008930:	059b      	lsls	r3, r3, #22
 8008932:	d4e1      	bmi.n	80088f8 <_fflush_r+0xc>
 8008934:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 8008936:	f7fe fb27 	bl	8006f88 <__retarget_lock_release_recursive>
 800893a:	e7dd      	b.n	80088f8 <_fflush_r+0xc>

0800893c <__swhatbuf_r>:
 800893c:	b570      	push	{r4, r5, r6, lr}
 800893e:	460c      	mov	r4, r1
 8008940:	f9b1 100e 	ldrsh.w	r1, [r1, #14]
 8008944:	2900      	cmp	r1, #0
 8008946:	b096      	sub	sp, #88	@ 0x58
 8008948:	4615      	mov	r5, r2
 800894a:	461e      	mov	r6, r3
 800894c:	da0d      	bge.n	800896a <__swhatbuf_r+0x2e>
 800894e:	89a3      	ldrh	r3, [r4, #12]
 8008950:	f013 0f80 	tst.w	r3, #128	@ 0x80
 8008954:	f04f 0100 	mov.w	r1, #0
 8008958:	bf14      	ite	ne
 800895a:	2340      	movne	r3, #64	@ 0x40
 800895c:	f44f 6380 	moveq.w	r3, #1024	@ 0x400
 8008960:	2000      	movs	r0, #0
 8008962:	6031      	str	r1, [r6, #0]
 8008964:	602b      	str	r3, [r5, #0]
 8008966:	b016      	add	sp, #88	@ 0x58
 8008968:	bd70      	pop	{r4, r5, r6, pc}
 800896a:	466a      	mov	r2, sp
 800896c:	f000 f862 	bl	8008a34 <_fstat_r>
 8008970:	2800      	cmp	r0, #0
 8008972:	dbec      	blt.n	800894e <__swhatbuf_r+0x12>
 8008974:	9901      	ldr	r1, [sp, #4]
 8008976:	f401 4170 	and.w	r1, r1, #61440	@ 0xf000
 800897a:	f5a1 5300 	sub.w	r3, r1, #8192	@ 0x2000
 800897e:	4259      	negs	r1, r3
 8008980:	4159      	adcs	r1, r3
 8008982:	f44f 6380 	mov.w	r3, #1024	@ 0x400
 8008986:	e7eb      	b.n	8008960 <__swhatbuf_r+0x24>

08008988 <__smakebuf_r>:
 8008988:	898b      	ldrh	r3, [r1, #12]
 800898a:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800898c:	079d      	lsls	r5, r3, #30
 800898e:	4606      	mov	r6, r0
 8008990:	460c      	mov	r4, r1
 8008992:	d507      	bpl.n	80089a4 <__smakebuf_r+0x1c>
 8008994:	f104 0347 	add.w	r3, r4, #71	@ 0x47
 8008998:	6023      	str	r3, [r4, #0]
 800899a:	6123      	str	r3, [r4, #16]
 800899c:	2301      	movs	r3, #1
 800899e:	6163      	str	r3, [r4, #20]
 80089a0:	b003      	add	sp, #12
 80089a2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089a4:	ab01      	add	r3, sp, #4
 80089a6:	466a      	mov	r2, sp
 80089a8:	f7ff ffc8 	bl	800893c <__swhatbuf_r>
 80089ac:	9f00      	ldr	r7, [sp, #0]
 80089ae:	4605      	mov	r5, r0
 80089b0:	4639      	mov	r1, r7
 80089b2:	4630      	mov	r0, r6
 80089b4:	f7ff f9b8 	bl	8007d28 <_malloc_r>
 80089b8:	b948      	cbnz	r0, 80089ce <__smakebuf_r+0x46>
 80089ba:	f9b4 300c 	ldrsh.w	r3, [r4, #12]
 80089be:	059a      	lsls	r2, r3, #22
 80089c0:	d4ee      	bmi.n	80089a0 <__smakebuf_r+0x18>
 80089c2:	f023 0303 	bic.w	r3, r3, #3
 80089c6:	f043 0302 	orr.w	r3, r3, #2
 80089ca:	81a3      	strh	r3, [r4, #12]
 80089cc:	e7e2      	b.n	8008994 <__smakebuf_r+0xc>
 80089ce:	89a3      	ldrh	r3, [r4, #12]
 80089d0:	6020      	str	r0, [r4, #0]
 80089d2:	f043 0380 	orr.w	r3, r3, #128	@ 0x80
 80089d6:	81a3      	strh	r3, [r4, #12]
 80089d8:	9b01      	ldr	r3, [sp, #4]
 80089da:	e9c4 0704 	strd	r0, r7, [r4, #16]
 80089de:	b15b      	cbz	r3, 80089f8 <__smakebuf_r+0x70>
 80089e0:	f9b4 100e 	ldrsh.w	r1, [r4, #14]
 80089e4:	4630      	mov	r0, r6
 80089e6:	f000 f837 	bl	8008a58 <_isatty_r>
 80089ea:	b128      	cbz	r0, 80089f8 <__smakebuf_r+0x70>
 80089ec:	89a3      	ldrh	r3, [r4, #12]
 80089ee:	f023 0303 	bic.w	r3, r3, #3
 80089f2:	f043 0301 	orr.w	r3, r3, #1
 80089f6:	81a3      	strh	r3, [r4, #12]
 80089f8:	89a3      	ldrh	r3, [r4, #12]
 80089fa:	431d      	orrs	r5, r3
 80089fc:	81a5      	strh	r5, [r4, #12]
 80089fe:	e7cf      	b.n	80089a0 <__smakebuf_r+0x18>

08008a00 <memmove>:
 8008a00:	4288      	cmp	r0, r1
 8008a02:	b510      	push	{r4, lr}
 8008a04:	eb01 0402 	add.w	r4, r1, r2
 8008a08:	d902      	bls.n	8008a10 <memmove+0x10>
 8008a0a:	4284      	cmp	r4, r0
 8008a0c:	4623      	mov	r3, r4
 8008a0e:	d807      	bhi.n	8008a20 <memmove+0x20>
 8008a10:	1e43      	subs	r3, r0, #1
 8008a12:	42a1      	cmp	r1, r4
 8008a14:	d008      	beq.n	8008a28 <memmove+0x28>
 8008a16:	f811 2b01 	ldrb.w	r2, [r1], #1
 8008a1a:	f803 2f01 	strb.w	r2, [r3, #1]!
 8008a1e:	e7f8      	b.n	8008a12 <memmove+0x12>
 8008a20:	4402      	add	r2, r0
 8008a22:	4601      	mov	r1, r0
 8008a24:	428a      	cmp	r2, r1
 8008a26:	d100      	bne.n	8008a2a <memmove+0x2a>
 8008a28:	bd10      	pop	{r4, pc}
 8008a2a:	f813 4d01 	ldrb.w	r4, [r3, #-1]!
 8008a2e:	f802 4d01 	strb.w	r4, [r2, #-1]!
 8008a32:	e7f7      	b.n	8008a24 <memmove+0x24>

08008a34 <_fstat_r>:
 8008a34:	b538      	push	{r3, r4, r5, lr}
 8008a36:	4d07      	ldr	r5, [pc, #28]	@ (8008a54 <_fstat_r+0x20>)
 8008a38:	2300      	movs	r3, #0
 8008a3a:	4604      	mov	r4, r0
 8008a3c:	4608      	mov	r0, r1
 8008a3e:	4611      	mov	r1, r2
 8008a40:	602b      	str	r3, [r5, #0]
 8008a42:	f7f9 fd61 	bl	8002508 <_fstat>
 8008a46:	1c43      	adds	r3, r0, #1
 8008a48:	d102      	bne.n	8008a50 <_fstat_r+0x1c>
 8008a4a:	682b      	ldr	r3, [r5, #0]
 8008a4c:	b103      	cbz	r3, 8008a50 <_fstat_r+0x1c>
 8008a4e:	6023      	str	r3, [r4, #0]
 8008a50:	bd38      	pop	{r3, r4, r5, pc}
 8008a52:	bf00      	nop
 8008a54:	200008ac 	.word	0x200008ac

08008a58 <_isatty_r>:
 8008a58:	b538      	push	{r3, r4, r5, lr}
 8008a5a:	4d06      	ldr	r5, [pc, #24]	@ (8008a74 <_isatty_r+0x1c>)
 8008a5c:	2300      	movs	r3, #0
 8008a5e:	4604      	mov	r4, r0
 8008a60:	4608      	mov	r0, r1
 8008a62:	602b      	str	r3, [r5, #0]
 8008a64:	f7f9 fd60 	bl	8002528 <_isatty>
 8008a68:	1c43      	adds	r3, r0, #1
 8008a6a:	d102      	bne.n	8008a72 <_isatty_r+0x1a>
 8008a6c:	682b      	ldr	r3, [r5, #0]
 8008a6e:	b103      	cbz	r3, 8008a72 <_isatty_r+0x1a>
 8008a70:	6023      	str	r3, [r4, #0]
 8008a72:	bd38      	pop	{r3, r4, r5, pc}
 8008a74:	200008ac 	.word	0x200008ac

08008a78 <_sbrk_r>:
 8008a78:	b538      	push	{r3, r4, r5, lr}
 8008a7a:	4d06      	ldr	r5, [pc, #24]	@ (8008a94 <_sbrk_r+0x1c>)
 8008a7c:	2300      	movs	r3, #0
 8008a7e:	4604      	mov	r4, r0
 8008a80:	4608      	mov	r0, r1
 8008a82:	602b      	str	r3, [r5, #0]
 8008a84:	f7f9 fd68 	bl	8002558 <_sbrk>
 8008a88:	1c43      	adds	r3, r0, #1
 8008a8a:	d102      	bne.n	8008a92 <_sbrk_r+0x1a>
 8008a8c:	682b      	ldr	r3, [r5, #0]
 8008a8e:	b103      	cbz	r3, 8008a92 <_sbrk_r+0x1a>
 8008a90:	6023      	str	r3, [r4, #0]
 8008a92:	bd38      	pop	{r3, r4, r5, pc}
 8008a94:	200008ac 	.word	0x200008ac

08008a98 <memcpy>:
 8008a98:	440a      	add	r2, r1
 8008a9a:	4291      	cmp	r1, r2
 8008a9c:	f100 33ff 	add.w	r3, r0, #4294967295
 8008aa0:	d100      	bne.n	8008aa4 <memcpy+0xc>
 8008aa2:	4770      	bx	lr
 8008aa4:	b510      	push	{r4, lr}
 8008aa6:	f811 4b01 	ldrb.w	r4, [r1], #1
 8008aaa:	f803 4f01 	strb.w	r4, [r3, #1]!
 8008aae:	4291      	cmp	r1, r2
 8008ab0:	d1f9      	bne.n	8008aa6 <memcpy+0xe>
 8008ab2:	bd10      	pop	{r4, pc}

08008ab4 <__assert_func>:
 8008ab4:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8008ab6:	4614      	mov	r4, r2
 8008ab8:	461a      	mov	r2, r3
 8008aba:	4b09      	ldr	r3, [pc, #36]	@ (8008ae0 <__assert_func+0x2c>)
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	4605      	mov	r5, r0
 8008ac0:	68d8      	ldr	r0, [r3, #12]
 8008ac2:	b14c      	cbz	r4, 8008ad8 <__assert_func+0x24>
 8008ac4:	4b07      	ldr	r3, [pc, #28]	@ (8008ae4 <__assert_func+0x30>)
 8008ac6:	9100      	str	r1, [sp, #0]
 8008ac8:	e9cd 3401 	strd	r3, r4, [sp, #4]
 8008acc:	4906      	ldr	r1, [pc, #24]	@ (8008ae8 <__assert_func+0x34>)
 8008ace:	462b      	mov	r3, r5
 8008ad0:	f000 f870 	bl	8008bb4 <fiprintf>
 8008ad4:	f000 f880 	bl	8008bd8 <abort>
 8008ad8:	4b04      	ldr	r3, [pc, #16]	@ (8008aec <__assert_func+0x38>)
 8008ada:	461c      	mov	r4, r3
 8008adc:	e7f3      	b.n	8008ac6 <__assert_func+0x12>
 8008ade:	bf00      	nop
 8008ae0:	20000018 	.word	0x20000018
 8008ae4:	08009309 	.word	0x08009309
 8008ae8:	08009316 	.word	0x08009316
 8008aec:	08009344 	.word	0x08009344

08008af0 <_calloc_r>:
 8008af0:	b570      	push	{r4, r5, r6, lr}
 8008af2:	fba1 5402 	umull	r5, r4, r1, r2
 8008af6:	b934      	cbnz	r4, 8008b06 <_calloc_r+0x16>
 8008af8:	4629      	mov	r1, r5
 8008afa:	f7ff f915 	bl	8007d28 <_malloc_r>
 8008afe:	4606      	mov	r6, r0
 8008b00:	b928      	cbnz	r0, 8008b0e <_calloc_r+0x1e>
 8008b02:	4630      	mov	r0, r6
 8008b04:	bd70      	pop	{r4, r5, r6, pc}
 8008b06:	220c      	movs	r2, #12
 8008b08:	6002      	str	r2, [r0, #0]
 8008b0a:	2600      	movs	r6, #0
 8008b0c:	e7f9      	b.n	8008b02 <_calloc_r+0x12>
 8008b0e:	462a      	mov	r2, r5
 8008b10:	4621      	mov	r1, r4
 8008b12:	f7fe f9bb 	bl	8006e8c <memset>
 8008b16:	e7f4      	b.n	8008b02 <_calloc_r+0x12>

08008b18 <__ascii_mbtowc>:
 8008b18:	b082      	sub	sp, #8
 8008b1a:	b901      	cbnz	r1, 8008b1e <__ascii_mbtowc+0x6>
 8008b1c:	a901      	add	r1, sp, #4
 8008b1e:	b142      	cbz	r2, 8008b32 <__ascii_mbtowc+0x1a>
 8008b20:	b14b      	cbz	r3, 8008b36 <__ascii_mbtowc+0x1e>
 8008b22:	7813      	ldrb	r3, [r2, #0]
 8008b24:	600b      	str	r3, [r1, #0]
 8008b26:	7812      	ldrb	r2, [r2, #0]
 8008b28:	1e10      	subs	r0, r2, #0
 8008b2a:	bf18      	it	ne
 8008b2c:	2001      	movne	r0, #1
 8008b2e:	b002      	add	sp, #8
 8008b30:	4770      	bx	lr
 8008b32:	4610      	mov	r0, r2
 8008b34:	e7fb      	b.n	8008b2e <__ascii_mbtowc+0x16>
 8008b36:	f06f 0001 	mvn.w	r0, #1
 8008b3a:	e7f8      	b.n	8008b2e <__ascii_mbtowc+0x16>

08008b3c <_realloc_r>:
 8008b3c:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8008b40:	4607      	mov	r7, r0
 8008b42:	4614      	mov	r4, r2
 8008b44:	460d      	mov	r5, r1
 8008b46:	b921      	cbnz	r1, 8008b52 <_realloc_r+0x16>
 8008b48:	e8bd 41f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, lr}
 8008b4c:	4611      	mov	r1, r2
 8008b4e:	f7ff b8eb 	b.w	8007d28 <_malloc_r>
 8008b52:	b92a      	cbnz	r2, 8008b60 <_realloc_r+0x24>
 8008b54:	f7ff f874 	bl	8007c40 <_free_r>
 8008b58:	4625      	mov	r5, r4
 8008b5a:	4628      	mov	r0, r5
 8008b5c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8008b60:	f000 f841 	bl	8008be6 <_malloc_usable_size_r>
 8008b64:	4284      	cmp	r4, r0
 8008b66:	4606      	mov	r6, r0
 8008b68:	d802      	bhi.n	8008b70 <_realloc_r+0x34>
 8008b6a:	ebb4 0f50 	cmp.w	r4, r0, lsr #1
 8008b6e:	d8f4      	bhi.n	8008b5a <_realloc_r+0x1e>
 8008b70:	4621      	mov	r1, r4
 8008b72:	4638      	mov	r0, r7
 8008b74:	f7ff f8d8 	bl	8007d28 <_malloc_r>
 8008b78:	4680      	mov	r8, r0
 8008b7a:	b908      	cbnz	r0, 8008b80 <_realloc_r+0x44>
 8008b7c:	4645      	mov	r5, r8
 8008b7e:	e7ec      	b.n	8008b5a <_realloc_r+0x1e>
 8008b80:	42b4      	cmp	r4, r6
 8008b82:	4622      	mov	r2, r4
 8008b84:	4629      	mov	r1, r5
 8008b86:	bf28      	it	cs
 8008b88:	4632      	movcs	r2, r6
 8008b8a:	f7ff ff85 	bl	8008a98 <memcpy>
 8008b8e:	4629      	mov	r1, r5
 8008b90:	4638      	mov	r0, r7
 8008b92:	f7ff f855 	bl	8007c40 <_free_r>
 8008b96:	e7f1      	b.n	8008b7c <_realloc_r+0x40>

08008b98 <__ascii_wctomb>:
 8008b98:	4603      	mov	r3, r0
 8008b9a:	4608      	mov	r0, r1
 8008b9c:	b141      	cbz	r1, 8008bb0 <__ascii_wctomb+0x18>
 8008b9e:	2aff      	cmp	r2, #255	@ 0xff
 8008ba0:	d904      	bls.n	8008bac <__ascii_wctomb+0x14>
 8008ba2:	228a      	movs	r2, #138	@ 0x8a
 8008ba4:	601a      	str	r2, [r3, #0]
 8008ba6:	f04f 30ff 	mov.w	r0, #4294967295
 8008baa:	4770      	bx	lr
 8008bac:	700a      	strb	r2, [r1, #0]
 8008bae:	2001      	movs	r0, #1
 8008bb0:	4770      	bx	lr
	...

08008bb4 <fiprintf>:
 8008bb4:	b40e      	push	{r1, r2, r3}
 8008bb6:	b503      	push	{r0, r1, lr}
 8008bb8:	4601      	mov	r1, r0
 8008bba:	ab03      	add	r3, sp, #12
 8008bbc:	4805      	ldr	r0, [pc, #20]	@ (8008bd4 <fiprintf+0x20>)
 8008bbe:	f853 2b04 	ldr.w	r2, [r3], #4
 8008bc2:	6800      	ldr	r0, [r0, #0]
 8008bc4:	9301      	str	r3, [sp, #4]
 8008bc6:	f000 f83f 	bl	8008c48 <_vfiprintf_r>
 8008bca:	b002      	add	sp, #8
 8008bcc:	f85d eb04 	ldr.w	lr, [sp], #4
 8008bd0:	b003      	add	sp, #12
 8008bd2:	4770      	bx	lr
 8008bd4:	20000018 	.word	0x20000018

08008bd8 <abort>:
 8008bd8:	b508      	push	{r3, lr}
 8008bda:	2006      	movs	r0, #6
 8008bdc:	f000 f974 	bl	8008ec8 <raise>
 8008be0:	2001      	movs	r0, #1
 8008be2:	f7f9 fc41 	bl	8002468 <_exit>

08008be6 <_malloc_usable_size_r>:
 8008be6:	f851 3c04 	ldr.w	r3, [r1, #-4]
 8008bea:	1f18      	subs	r0, r3, #4
 8008bec:	2b00      	cmp	r3, #0
 8008bee:	bfbc      	itt	lt
 8008bf0:	580b      	ldrlt	r3, [r1, r0]
 8008bf2:	18c0      	addlt	r0, r0, r3
 8008bf4:	4770      	bx	lr

08008bf6 <__sfputc_r>:
 8008bf6:	6893      	ldr	r3, [r2, #8]
 8008bf8:	3b01      	subs	r3, #1
 8008bfa:	2b00      	cmp	r3, #0
 8008bfc:	b410      	push	{r4}
 8008bfe:	6093      	str	r3, [r2, #8]
 8008c00:	da08      	bge.n	8008c14 <__sfputc_r+0x1e>
 8008c02:	6994      	ldr	r4, [r2, #24]
 8008c04:	42a3      	cmp	r3, r4
 8008c06:	db01      	blt.n	8008c0c <__sfputc_r+0x16>
 8008c08:	290a      	cmp	r1, #10
 8008c0a:	d103      	bne.n	8008c14 <__sfputc_r+0x1e>
 8008c0c:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c10:	f7fe b8a7 	b.w	8006d62 <__swbuf_r>
 8008c14:	6813      	ldr	r3, [r2, #0]
 8008c16:	1c58      	adds	r0, r3, #1
 8008c18:	6010      	str	r0, [r2, #0]
 8008c1a:	7019      	strb	r1, [r3, #0]
 8008c1c:	4608      	mov	r0, r1
 8008c1e:	f85d 4b04 	ldr.w	r4, [sp], #4
 8008c22:	4770      	bx	lr

08008c24 <__sfputs_r>:
 8008c24:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008c26:	4606      	mov	r6, r0
 8008c28:	460f      	mov	r7, r1
 8008c2a:	4614      	mov	r4, r2
 8008c2c:	18d5      	adds	r5, r2, r3
 8008c2e:	42ac      	cmp	r4, r5
 8008c30:	d101      	bne.n	8008c36 <__sfputs_r+0x12>
 8008c32:	2000      	movs	r0, #0
 8008c34:	e007      	b.n	8008c46 <__sfputs_r+0x22>
 8008c36:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008c3a:	463a      	mov	r2, r7
 8008c3c:	4630      	mov	r0, r6
 8008c3e:	f7ff ffda 	bl	8008bf6 <__sfputc_r>
 8008c42:	1c43      	adds	r3, r0, #1
 8008c44:	d1f3      	bne.n	8008c2e <__sfputs_r+0xa>
 8008c46:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

08008c48 <_vfiprintf_r>:
 8008c48:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008c4c:	460d      	mov	r5, r1
 8008c4e:	b09d      	sub	sp, #116	@ 0x74
 8008c50:	4614      	mov	r4, r2
 8008c52:	4698      	mov	r8, r3
 8008c54:	4606      	mov	r6, r0
 8008c56:	b118      	cbz	r0, 8008c60 <_vfiprintf_r+0x18>
 8008c58:	6a03      	ldr	r3, [r0, #32]
 8008c5a:	b90b      	cbnz	r3, 8008c60 <_vfiprintf_r+0x18>
 8008c5c:	f7fd ff52 	bl	8006b04 <__sinit>
 8008c60:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c62:	07d9      	lsls	r1, r3, #31
 8008c64:	d405      	bmi.n	8008c72 <_vfiprintf_r+0x2a>
 8008c66:	89ab      	ldrh	r3, [r5, #12]
 8008c68:	059a      	lsls	r2, r3, #22
 8008c6a:	d402      	bmi.n	8008c72 <_vfiprintf_r+0x2a>
 8008c6c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c6e:	f7fe f98a 	bl	8006f86 <__retarget_lock_acquire_recursive>
 8008c72:	89ab      	ldrh	r3, [r5, #12]
 8008c74:	071b      	lsls	r3, r3, #28
 8008c76:	d501      	bpl.n	8008c7c <_vfiprintf_r+0x34>
 8008c78:	692b      	ldr	r3, [r5, #16]
 8008c7a:	b99b      	cbnz	r3, 8008ca4 <_vfiprintf_r+0x5c>
 8008c7c:	4629      	mov	r1, r5
 8008c7e:	4630      	mov	r0, r6
 8008c80:	f7fe f8ae 	bl	8006de0 <__swsetup_r>
 8008c84:	b170      	cbz	r0, 8008ca4 <_vfiprintf_r+0x5c>
 8008c86:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008c88:	07dc      	lsls	r4, r3, #31
 8008c8a:	d504      	bpl.n	8008c96 <_vfiprintf_r+0x4e>
 8008c8c:	f04f 30ff 	mov.w	r0, #4294967295
 8008c90:	b01d      	add	sp, #116	@ 0x74
 8008c92:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008c96:	89ab      	ldrh	r3, [r5, #12]
 8008c98:	0598      	lsls	r0, r3, #22
 8008c9a:	d4f7      	bmi.n	8008c8c <_vfiprintf_r+0x44>
 8008c9c:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008c9e:	f7fe f973 	bl	8006f88 <__retarget_lock_release_recursive>
 8008ca2:	e7f3      	b.n	8008c8c <_vfiprintf_r+0x44>
 8008ca4:	2300      	movs	r3, #0
 8008ca6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008ca8:	2320      	movs	r3, #32
 8008caa:	f88d 3029 	strb.w	r3, [sp, #41]	@ 0x29
 8008cae:	f8cd 800c 	str.w	r8, [sp, #12]
 8008cb2:	2330      	movs	r3, #48	@ 0x30
 8008cb4:	f8df 81ac 	ldr.w	r8, [pc, #428]	@ 8008e64 <_vfiprintf_r+0x21c>
 8008cb8:	f88d 302a 	strb.w	r3, [sp, #42]	@ 0x2a
 8008cbc:	f04f 0901 	mov.w	r9, #1
 8008cc0:	4623      	mov	r3, r4
 8008cc2:	469a      	mov	sl, r3
 8008cc4:	f813 2b01 	ldrb.w	r2, [r3], #1
 8008cc8:	b10a      	cbz	r2, 8008cce <_vfiprintf_r+0x86>
 8008cca:	2a25      	cmp	r2, #37	@ 0x25
 8008ccc:	d1f9      	bne.n	8008cc2 <_vfiprintf_r+0x7a>
 8008cce:	ebba 0b04 	subs.w	fp, sl, r4
 8008cd2:	d00b      	beq.n	8008cec <_vfiprintf_r+0xa4>
 8008cd4:	465b      	mov	r3, fp
 8008cd6:	4622      	mov	r2, r4
 8008cd8:	4629      	mov	r1, r5
 8008cda:	4630      	mov	r0, r6
 8008cdc:	f7ff ffa2 	bl	8008c24 <__sfputs_r>
 8008ce0:	3001      	adds	r0, #1
 8008ce2:	f000 80a7 	beq.w	8008e34 <_vfiprintf_r+0x1ec>
 8008ce6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 8008ce8:	445a      	add	r2, fp
 8008cea:	9209      	str	r2, [sp, #36]	@ 0x24
 8008cec:	f89a 3000 	ldrb.w	r3, [sl]
 8008cf0:	2b00      	cmp	r3, #0
 8008cf2:	f000 809f 	beq.w	8008e34 <_vfiprintf_r+0x1ec>
 8008cf6:	2300      	movs	r3, #0
 8008cf8:	f04f 32ff 	mov.w	r2, #4294967295
 8008cfc:	e9cd 2305 	strd	r2, r3, [sp, #20]
 8008d00:	f10a 0a01 	add.w	sl, sl, #1
 8008d04:	9304      	str	r3, [sp, #16]
 8008d06:	9307      	str	r3, [sp, #28]
 8008d08:	f88d 3053 	strb.w	r3, [sp, #83]	@ 0x53
 8008d0c:	931a      	str	r3, [sp, #104]	@ 0x68
 8008d0e:	4654      	mov	r4, sl
 8008d10:	2205      	movs	r2, #5
 8008d12:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008d16:	4853      	ldr	r0, [pc, #332]	@ (8008e64 <_vfiprintf_r+0x21c>)
 8008d18:	f7f7 fa62 	bl	80001e0 <memchr>
 8008d1c:	9a04      	ldr	r2, [sp, #16]
 8008d1e:	b9d8      	cbnz	r0, 8008d58 <_vfiprintf_r+0x110>
 8008d20:	06d1      	lsls	r1, r2, #27
 8008d22:	bf44      	itt	mi
 8008d24:	2320      	movmi	r3, #32
 8008d26:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d2a:	0713      	lsls	r3, r2, #28
 8008d2c:	bf44      	itt	mi
 8008d2e:	232b      	movmi	r3, #43	@ 0x2b
 8008d30:	f88d 3053 	strbmi.w	r3, [sp, #83]	@ 0x53
 8008d34:	f89a 3000 	ldrb.w	r3, [sl]
 8008d38:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d3a:	d015      	beq.n	8008d68 <_vfiprintf_r+0x120>
 8008d3c:	9a07      	ldr	r2, [sp, #28]
 8008d3e:	4654      	mov	r4, sl
 8008d40:	2000      	movs	r0, #0
 8008d42:	f04f 0c0a 	mov.w	ip, #10
 8008d46:	4621      	mov	r1, r4
 8008d48:	f811 3b01 	ldrb.w	r3, [r1], #1
 8008d4c:	3b30      	subs	r3, #48	@ 0x30
 8008d4e:	2b09      	cmp	r3, #9
 8008d50:	d94b      	bls.n	8008dea <_vfiprintf_r+0x1a2>
 8008d52:	b1b0      	cbz	r0, 8008d82 <_vfiprintf_r+0x13a>
 8008d54:	9207      	str	r2, [sp, #28]
 8008d56:	e014      	b.n	8008d82 <_vfiprintf_r+0x13a>
 8008d58:	eba0 0308 	sub.w	r3, r0, r8
 8008d5c:	fa09 f303 	lsl.w	r3, r9, r3
 8008d60:	4313      	orrs	r3, r2
 8008d62:	9304      	str	r3, [sp, #16]
 8008d64:	46a2      	mov	sl, r4
 8008d66:	e7d2      	b.n	8008d0e <_vfiprintf_r+0xc6>
 8008d68:	9b03      	ldr	r3, [sp, #12]
 8008d6a:	1d19      	adds	r1, r3, #4
 8008d6c:	681b      	ldr	r3, [r3, #0]
 8008d6e:	9103      	str	r1, [sp, #12]
 8008d70:	2b00      	cmp	r3, #0
 8008d72:	bfbb      	ittet	lt
 8008d74:	425b      	neglt	r3, r3
 8008d76:	f042 0202 	orrlt.w	r2, r2, #2
 8008d7a:	9307      	strge	r3, [sp, #28]
 8008d7c:	9307      	strlt	r3, [sp, #28]
 8008d7e:	bfb8      	it	lt
 8008d80:	9204      	strlt	r2, [sp, #16]
 8008d82:	7823      	ldrb	r3, [r4, #0]
 8008d84:	2b2e      	cmp	r3, #46	@ 0x2e
 8008d86:	d10a      	bne.n	8008d9e <_vfiprintf_r+0x156>
 8008d88:	7863      	ldrb	r3, [r4, #1]
 8008d8a:	2b2a      	cmp	r3, #42	@ 0x2a
 8008d8c:	d132      	bne.n	8008df4 <_vfiprintf_r+0x1ac>
 8008d8e:	9b03      	ldr	r3, [sp, #12]
 8008d90:	1d1a      	adds	r2, r3, #4
 8008d92:	681b      	ldr	r3, [r3, #0]
 8008d94:	9203      	str	r2, [sp, #12]
 8008d96:	ea43 73e3 	orr.w	r3, r3, r3, asr #31
 8008d9a:	3402      	adds	r4, #2
 8008d9c:	9305      	str	r3, [sp, #20]
 8008d9e:	f8df a0d4 	ldr.w	sl, [pc, #212]	@ 8008e74 <_vfiprintf_r+0x22c>
 8008da2:	7821      	ldrb	r1, [r4, #0]
 8008da4:	2203      	movs	r2, #3
 8008da6:	4650      	mov	r0, sl
 8008da8:	f7f7 fa1a 	bl	80001e0 <memchr>
 8008dac:	b138      	cbz	r0, 8008dbe <_vfiprintf_r+0x176>
 8008dae:	9b04      	ldr	r3, [sp, #16]
 8008db0:	eba0 000a 	sub.w	r0, r0, sl
 8008db4:	2240      	movs	r2, #64	@ 0x40
 8008db6:	4082      	lsls	r2, r0
 8008db8:	4313      	orrs	r3, r2
 8008dba:	3401      	adds	r4, #1
 8008dbc:	9304      	str	r3, [sp, #16]
 8008dbe:	f814 1b01 	ldrb.w	r1, [r4], #1
 8008dc2:	4829      	ldr	r0, [pc, #164]	@ (8008e68 <_vfiprintf_r+0x220>)
 8008dc4:	f88d 1028 	strb.w	r1, [sp, #40]	@ 0x28
 8008dc8:	2206      	movs	r2, #6
 8008dca:	f7f7 fa09 	bl	80001e0 <memchr>
 8008dce:	2800      	cmp	r0, #0
 8008dd0:	d03f      	beq.n	8008e52 <_vfiprintf_r+0x20a>
 8008dd2:	4b26      	ldr	r3, [pc, #152]	@ (8008e6c <_vfiprintf_r+0x224>)
 8008dd4:	bb1b      	cbnz	r3, 8008e1e <_vfiprintf_r+0x1d6>
 8008dd6:	9b03      	ldr	r3, [sp, #12]
 8008dd8:	3307      	adds	r3, #7
 8008dda:	f023 0307 	bic.w	r3, r3, #7
 8008dde:	3308      	adds	r3, #8
 8008de0:	9303      	str	r3, [sp, #12]
 8008de2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 8008de4:	443b      	add	r3, r7
 8008de6:	9309      	str	r3, [sp, #36]	@ 0x24
 8008de8:	e76a      	b.n	8008cc0 <_vfiprintf_r+0x78>
 8008dea:	fb0c 3202 	mla	r2, ip, r2, r3
 8008dee:	460c      	mov	r4, r1
 8008df0:	2001      	movs	r0, #1
 8008df2:	e7a8      	b.n	8008d46 <_vfiprintf_r+0xfe>
 8008df4:	2300      	movs	r3, #0
 8008df6:	3401      	adds	r4, #1
 8008df8:	9305      	str	r3, [sp, #20]
 8008dfa:	4619      	mov	r1, r3
 8008dfc:	f04f 0c0a 	mov.w	ip, #10
 8008e00:	4620      	mov	r0, r4
 8008e02:	f810 2b01 	ldrb.w	r2, [r0], #1
 8008e06:	3a30      	subs	r2, #48	@ 0x30
 8008e08:	2a09      	cmp	r2, #9
 8008e0a:	d903      	bls.n	8008e14 <_vfiprintf_r+0x1cc>
 8008e0c:	2b00      	cmp	r3, #0
 8008e0e:	d0c6      	beq.n	8008d9e <_vfiprintf_r+0x156>
 8008e10:	9105      	str	r1, [sp, #20]
 8008e12:	e7c4      	b.n	8008d9e <_vfiprintf_r+0x156>
 8008e14:	fb0c 2101 	mla	r1, ip, r1, r2
 8008e18:	4604      	mov	r4, r0
 8008e1a:	2301      	movs	r3, #1
 8008e1c:	e7f0      	b.n	8008e00 <_vfiprintf_r+0x1b8>
 8008e1e:	ab03      	add	r3, sp, #12
 8008e20:	9300      	str	r3, [sp, #0]
 8008e22:	462a      	mov	r2, r5
 8008e24:	4b12      	ldr	r3, [pc, #72]	@ (8008e70 <_vfiprintf_r+0x228>)
 8008e26:	a904      	add	r1, sp, #16
 8008e28:	4630      	mov	r0, r6
 8008e2a:	f7fd fa29 	bl	8006280 <_printf_float>
 8008e2e:	4607      	mov	r7, r0
 8008e30:	1c78      	adds	r0, r7, #1
 8008e32:	d1d6      	bne.n	8008de2 <_vfiprintf_r+0x19a>
 8008e34:	6e6b      	ldr	r3, [r5, #100]	@ 0x64
 8008e36:	07d9      	lsls	r1, r3, #31
 8008e38:	d405      	bmi.n	8008e46 <_vfiprintf_r+0x1fe>
 8008e3a:	89ab      	ldrh	r3, [r5, #12]
 8008e3c:	059a      	lsls	r2, r3, #22
 8008e3e:	d402      	bmi.n	8008e46 <_vfiprintf_r+0x1fe>
 8008e40:	6da8      	ldr	r0, [r5, #88]	@ 0x58
 8008e42:	f7fe f8a1 	bl	8006f88 <__retarget_lock_release_recursive>
 8008e46:	89ab      	ldrh	r3, [r5, #12]
 8008e48:	065b      	lsls	r3, r3, #25
 8008e4a:	f53f af1f 	bmi.w	8008c8c <_vfiprintf_r+0x44>
 8008e4e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 8008e50:	e71e      	b.n	8008c90 <_vfiprintf_r+0x48>
 8008e52:	ab03      	add	r3, sp, #12
 8008e54:	9300      	str	r3, [sp, #0]
 8008e56:	462a      	mov	r2, r5
 8008e58:	4b05      	ldr	r3, [pc, #20]	@ (8008e70 <_vfiprintf_r+0x228>)
 8008e5a:	a904      	add	r1, sp, #16
 8008e5c:	4630      	mov	r0, r6
 8008e5e:	f7fd fca7 	bl	80067b0 <_printf_i>
 8008e62:	e7e4      	b.n	8008e2e <_vfiprintf_r+0x1e6>
 8008e64:	080092ee 	.word	0x080092ee
 8008e68:	080092f8 	.word	0x080092f8
 8008e6c:	08006281 	.word	0x08006281
 8008e70:	08008c25 	.word	0x08008c25
 8008e74:	080092f4 	.word	0x080092f4

08008e78 <_raise_r>:
 8008e78:	291f      	cmp	r1, #31
 8008e7a:	b538      	push	{r3, r4, r5, lr}
 8008e7c:	4605      	mov	r5, r0
 8008e7e:	460c      	mov	r4, r1
 8008e80:	d904      	bls.n	8008e8c <_raise_r+0x14>
 8008e82:	2316      	movs	r3, #22
 8008e84:	6003      	str	r3, [r0, #0]
 8008e86:	f04f 30ff 	mov.w	r0, #4294967295
 8008e8a:	bd38      	pop	{r3, r4, r5, pc}
 8008e8c:	6bc2      	ldr	r2, [r0, #60]	@ 0x3c
 8008e8e:	b112      	cbz	r2, 8008e96 <_raise_r+0x1e>
 8008e90:	f852 3021 	ldr.w	r3, [r2, r1, lsl #2]
 8008e94:	b94b      	cbnz	r3, 8008eaa <_raise_r+0x32>
 8008e96:	4628      	mov	r0, r5
 8008e98:	f000 f830 	bl	8008efc <_getpid_r>
 8008e9c:	4622      	mov	r2, r4
 8008e9e:	4601      	mov	r1, r0
 8008ea0:	4628      	mov	r0, r5
 8008ea2:	e8bd 4038 	ldmia.w	sp!, {r3, r4, r5, lr}
 8008ea6:	f000 b817 	b.w	8008ed8 <_kill_r>
 8008eaa:	2b01      	cmp	r3, #1
 8008eac:	d00a      	beq.n	8008ec4 <_raise_r+0x4c>
 8008eae:	1c59      	adds	r1, r3, #1
 8008eb0:	d103      	bne.n	8008eba <_raise_r+0x42>
 8008eb2:	2316      	movs	r3, #22
 8008eb4:	6003      	str	r3, [r0, #0]
 8008eb6:	2001      	movs	r0, #1
 8008eb8:	e7e7      	b.n	8008e8a <_raise_r+0x12>
 8008eba:	2100      	movs	r1, #0
 8008ebc:	f842 1024 	str.w	r1, [r2, r4, lsl #2]
 8008ec0:	4620      	mov	r0, r4
 8008ec2:	4798      	blx	r3
 8008ec4:	2000      	movs	r0, #0
 8008ec6:	e7e0      	b.n	8008e8a <_raise_r+0x12>

08008ec8 <raise>:
 8008ec8:	4b02      	ldr	r3, [pc, #8]	@ (8008ed4 <raise+0xc>)
 8008eca:	4601      	mov	r1, r0
 8008ecc:	6818      	ldr	r0, [r3, #0]
 8008ece:	f7ff bfd3 	b.w	8008e78 <_raise_r>
 8008ed2:	bf00      	nop
 8008ed4:	20000018 	.word	0x20000018

08008ed8 <_kill_r>:
 8008ed8:	b538      	push	{r3, r4, r5, lr}
 8008eda:	4d07      	ldr	r5, [pc, #28]	@ (8008ef8 <_kill_r+0x20>)
 8008edc:	2300      	movs	r3, #0
 8008ede:	4604      	mov	r4, r0
 8008ee0:	4608      	mov	r0, r1
 8008ee2:	4611      	mov	r1, r2
 8008ee4:	602b      	str	r3, [r5, #0]
 8008ee6:	f7f9 faaf 	bl	8002448 <_kill>
 8008eea:	1c43      	adds	r3, r0, #1
 8008eec:	d102      	bne.n	8008ef4 <_kill_r+0x1c>
 8008eee:	682b      	ldr	r3, [r5, #0]
 8008ef0:	b103      	cbz	r3, 8008ef4 <_kill_r+0x1c>
 8008ef2:	6023      	str	r3, [r4, #0]
 8008ef4:	bd38      	pop	{r3, r4, r5, pc}
 8008ef6:	bf00      	nop
 8008ef8:	200008ac 	.word	0x200008ac

08008efc <_getpid_r>:
 8008efc:	f7f9 ba9c 	b.w	8002438 <_getpid>

08008f00 <_init>:
 8008f00:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f02:	bf00      	nop
 8008f04:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f06:	bc08      	pop	{r3}
 8008f08:	469e      	mov	lr, r3
 8008f0a:	4770      	bx	lr

08008f0c <_fini>:
 8008f0c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8008f0e:	bf00      	nop
 8008f10:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8008f12:	bc08      	pop	{r3}
 8008f14:	469e      	mov	lr, r3
 8008f16:	4770      	bx	lr
